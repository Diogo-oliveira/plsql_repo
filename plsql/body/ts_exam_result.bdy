/*-- Last Change Revision: $Rev: 2028177 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:24 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_exam_result
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: April 5, 2017 10:35:17
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_exam_result_in             IN exam_result.id_exam_result%TYPE,
        id_exam_in                    IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_req_det_in            IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_professional_in            IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in                 IN exam_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                   IN exam_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in             IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_prof_mov_begin_in          IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_end_in            IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_episode_in                 IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_write_in           IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        dt_exam_result_tstz_in        IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_in          IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_in            IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        id_external_doc_in            IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        create_user_in                IN exam_result.create_user%TYPE DEFAULT NULL,
        create_time_in                IN exam_result.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN exam_result.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN exam_result.update_user%TYPE DEFAULT NULL,
        update_time_in                IN exam_result.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN exam_result.update_institution%TYPE DEFAULT NULL,
        flg_status_in                 IN exam_result.flg_status%TYPE DEFAULT 'A',
        dt_exam_result_cancel_tstz_in IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in             IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        flg_result_origin_in          IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        id_result_status_in           IN exam_result.id_result_status%TYPE DEFAULT NULL,
        notes_in                      IN exam_result.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in               IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        id_result_notes_in            IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        notes_result_in               IN exam_result.notes_result%TYPE DEFAULT NULL,
        id_prof_read_in               IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        dt_prof_read_tstz_in          IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        id_exam_result_parent_in      IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        result_origin_notes_in        IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        id_abnormality_in             IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_epis_documentation_in      IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        flg_relevant_in               IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO exam_result
            (id_exam_result,
             id_exam,
             id_exam_req_det,
             id_professional,
             id_patient,
             flg_type,
             id_institution,
             id_prof_mov_begin,
             id_prof_mov_end,
             id_episode,
             id_episode_write,
             dt_exam_result_tstz,
             dt_mov_begin_tstz,
             dt_mov_end_tstz,
             id_external_doc,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_status,
             dt_exam_result_cancel_tstz,
             id_prof_cancel,
             flg_result_origin,
             id_result_status,
             notes,
             id_cancel_reason,
             notes_cancel,
             id_result_notes,
             notes_result,
             id_prof_read,
             dt_prof_read_tstz,
             id_exam_result_parent,
             result_origin_notes,
             id_abnormality,
             id_epis_documentation,
             flg_relevant)
        VALUES
            (id_exam_result_in,
             id_exam_in,
             id_exam_req_det_in,
             id_professional_in,
             id_patient_in,
             flg_type_in,
             id_institution_in,
             id_prof_mov_begin_in,
             id_prof_mov_end_in,
             id_episode_in,
             id_episode_write_in,
             dt_exam_result_tstz_in,
             dt_mov_begin_tstz_in,
             dt_mov_end_tstz_in,
             id_external_doc_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_status_in,
             dt_exam_result_cancel_tstz_in,
             id_prof_cancel_in,
             flg_result_origin_in,
             id_result_status_in,
             notes_in,
             id_cancel_reason_in,
             notes_cancel_in,
             id_result_notes_in,
             notes_result_in,
             id_prof_read_in,
             dt_prof_read_tstz_in,
             id_exam_result_parent_in,
             result_origin_notes_in,
             id_abnormality_in,
             id_epis_documentation_in,
             flg_relevant_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EXAM_RESULT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    IF l_name = 'ERES_ABY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ABNORMALITY',
                                                        value_in           => id_abnormality_in);
                    END IF;
                    IF l_name = 'ERES_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'ERES_EPIS_DOCUMENTATION_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DOCUMENTATION',
                                                        value_in           => id_epis_documentation_in);
                    END IF;
                    IF l_name = 'ERES_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'ERES_EPIS_WRITE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_WRITE',
                                                        value_in           => id_episode_write_in);
                    END IF;
                    IF l_name = 'ERES_ERD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_REQ_DET',
                                                        value_in           => id_exam_req_det_in);
                    END IF;
                    IF l_name = 'ERES_ERES_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_RESULT_PARENT',
                                                        value_in           => id_exam_result_parent_in);
                    END IF;
                    IF l_name = 'ERES_EXAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM',
                                                        value_in           => id_exam_in);
                    END IF;
                    IF l_name = 'ERES_EXT_DOC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXTERNAL_DOC',
                                                        value_in           => id_external_doc_in);
                    END IF;
                    IF l_name = 'ERES_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'ERES_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'ERES_PRL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'ERES_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'ERES_PROF_MOV_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_MOV_BEGIN',
                                                        value_in           => id_prof_mov_begin_in);
                    END IF;
                    IF l_name = 'ERES_PROF_READ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_READ',
                                                        value_in           => id_prof_read_in);
                    END IF;
                    IF l_name = 'ERES_PROF_RECEIVE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_MOV_END',
                                                        value_in           => id_prof_mov_end_in);
                    END IF;
                    IF l_name = 'ERES_RSNT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESULT_NOTES',
                                                        value_in           => id_result_notes_in);
                    END IF;
                    IF l_name = 'ERES_RSS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESULT_STATUS',
                                                        value_in           => id_result_status_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_exam_result_in             IN exam_result.id_exam_result%TYPE,
        id_exam_in                    IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_req_det_in            IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_professional_in            IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in                 IN exam_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                   IN exam_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in             IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_prof_mov_begin_in          IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_end_in            IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_episode_in                 IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_write_in           IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        dt_exam_result_tstz_in        IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_in          IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_in            IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        id_external_doc_in            IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        create_user_in                IN exam_result.create_user%TYPE DEFAULT NULL,
        create_time_in                IN exam_result.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN exam_result.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN exam_result.update_user%TYPE DEFAULT NULL,
        update_time_in                IN exam_result.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN exam_result.update_institution%TYPE DEFAULT NULL,
        flg_status_in                 IN exam_result.flg_status%TYPE DEFAULT 'A',
        dt_exam_result_cancel_tstz_in IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in             IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        flg_result_origin_in          IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        id_result_status_in           IN exam_result.id_result_status%TYPE DEFAULT NULL,
        notes_in                      IN exam_result.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in               IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        id_result_notes_in            IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        notes_result_in               IN exam_result.notes_result%TYPE DEFAULT NULL,
        id_prof_read_in               IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        dt_prof_read_tstz_in          IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        id_exam_result_parent_in      IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        result_origin_notes_in        IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        id_abnormality_in             IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_epis_documentation_in      IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        flg_relevant_in               IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_exam_result_in             => id_exam_result_in,
            id_exam_in                    => id_exam_in,
            id_exam_req_det_in            => id_exam_req_det_in,
            id_professional_in            => id_professional_in,
            id_patient_in                 => id_patient_in,
            flg_type_in                   => flg_type_in,
            id_institution_in             => id_institution_in,
            id_prof_mov_begin_in          => id_prof_mov_begin_in,
            id_prof_mov_end_in            => id_prof_mov_end_in,
            id_episode_in                 => id_episode_in,
            id_episode_write_in           => id_episode_write_in,
            dt_exam_result_tstz_in        => dt_exam_result_tstz_in,
            dt_mov_begin_tstz_in          => dt_mov_begin_tstz_in,
            dt_mov_end_tstz_in            => dt_mov_end_tstz_in,
            id_external_doc_in            => id_external_doc_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            flg_status_in                 => flg_status_in,
            dt_exam_result_cancel_tstz_in => dt_exam_result_cancel_tstz_in,
            id_prof_cancel_in             => id_prof_cancel_in,
            flg_result_origin_in          => flg_result_origin_in,
            id_result_status_in           => id_result_status_in,
            notes_in                      => notes_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            notes_cancel_in               => notes_cancel_in,
            id_result_notes_in            => id_result_notes_in,
            notes_result_in               => notes_result_in,
            id_prof_read_in               => id_prof_read_in,
            dt_prof_read_tstz_in          => dt_prof_read_tstz_in,
            id_exam_result_parent_in      => id_exam_result_parent_in,
            result_origin_notes_in        => result_origin_notes_in,
            id_abnormality_in             => id_abnormality_in,
            id_epis_documentation_in      => id_epis_documentation_in,
            flg_relevant_in               => flg_relevant_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    /*
    START Special logic for handling LOB columns....
    */

    PROCEDURE n_ins_clobs_in_chunks
    (
        id_exam_result_in             IN exam_result.id_exam_result%TYPE,
        id_exam_in                    IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_req_det_in            IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_professional_in            IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in                 IN exam_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                   IN exam_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in             IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_prof_mov_begin_in          IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_end_in            IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_episode_in                 IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_write_in           IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        dt_exam_result_tstz_in        IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_in          IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_in            IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        id_external_doc_in            IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        create_user_in                IN exam_result.create_user%TYPE DEFAULT NULL,
        create_time_in                IN exam_result.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN exam_result.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN exam_result.update_user%TYPE DEFAULT NULL,
        update_time_in                IN exam_result.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN exam_result.update_institution%TYPE DEFAULT NULL,
        flg_status_in                 IN exam_result.flg_status%TYPE DEFAULT 'A',
        dt_exam_result_cancel_tstz_in IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in             IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        flg_result_origin_in          IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        id_result_status_in           IN exam_result.id_result_status%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        id_result_notes_in            IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        id_prof_read_in               IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        dt_prof_read_tstz_in          IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        id_exam_result_parent_in      IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        result_origin_notes_in        IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        id_abnormality_in             IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_epis_documentation_in      IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        flg_relevant_in               IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        clob_columns_in               IN varchar2_t,
        clob_pieces_in                IN varchar2_t
    ) IS
        l_notes        CLOB;
        l_notes_cancel CLOB;
        l_notes_result CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
    BEGIN
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'notes_in' THEN
                            IF l_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes, TRUE, dbms_lob.call);
                            END IF;
                        WHEN 'notes_cancel_in' THEN
                            IF l_notes_cancel IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes_cancel, TRUE, dbms_lob.call);
                            END IF;
                        WHEN 'notes_result_in' THEN
                            IF l_notes_result IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes_result, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'notes_in' THEN
                        dbms_lob.writeappend(l_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                    WHEN 'notes_cancel_in' THEN
                        dbms_lob.writeappend(l_notes_cancel, length(clob_pieces_in(i)), clob_pieces_in(i));
                    WHEN 'notes_result_in' THEN
                        dbms_lob.writeappend(l_notes_result, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        ins(id_exam_result_in             => id_exam_result_in,
            id_exam_in                    => id_exam_in,
            id_exam_req_det_in            => id_exam_req_det_in,
            id_professional_in            => id_professional_in,
            id_patient_in                 => id_patient_in,
            flg_type_in                   => flg_type_in,
            id_institution_in             => id_institution_in,
            id_prof_mov_begin_in          => id_prof_mov_begin_in,
            id_prof_mov_end_in            => id_prof_mov_end_in,
            id_episode_in                 => id_episode_in,
            id_episode_write_in           => id_episode_write_in,
            dt_exam_result_tstz_in        => dt_exam_result_tstz_in,
            dt_mov_begin_tstz_in          => dt_mov_begin_tstz_in,
            dt_mov_end_tstz_in            => dt_mov_end_tstz_in,
            id_external_doc_in            => id_external_doc_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            flg_status_in                 => flg_status_in,
            dt_exam_result_cancel_tstz_in => dt_exam_result_cancel_tstz_in,
            id_prof_cancel_in             => id_prof_cancel_in,
            flg_result_origin_in          => flg_result_origin_in,
            id_result_status_in           => id_result_status_in,
            notes_in                      => l_notes,
            id_cancel_reason_in           => id_cancel_reason_in,
            notes_cancel_in               => l_notes_cancel,
            id_result_notes_in            => id_result_notes_in,
            notes_result_in               => l_notes_result,
            id_prof_read_in               => id_prof_read_in,
            dt_prof_read_tstz_in          => dt_prof_read_tstz_in,
            id_exam_result_parent_in      => id_exam_result_parent_in,
            result_origin_notes_in        => result_origin_notes_in,
            id_abnormality_in             => id_abnormality_in,
            id_epis_documentation_in      => id_epis_documentation_in,
            flg_relevant_in               => flg_relevant_in,
            handle_error_in               => handle_error_in);
    
    END n_ins_clobs_in_chunks;

    PROCEDURE n_upd_clobs_in_chunks
    (
        id_exam_result_in             IN exam_result.id_exam_result%TYPE,
        id_exam_in                    IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_req_det_in            IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_professional_in            IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in                 IN exam_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                   IN exam_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in             IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_prof_mov_begin_in          IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_end_in            IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_episode_in                 IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_write_in           IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        dt_exam_result_tstz_in        IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_in          IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_in            IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        id_external_doc_in            IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        create_user_in                IN exam_result.create_user%TYPE DEFAULT NULL,
        create_time_in                IN exam_result.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN exam_result.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN exam_result.update_user%TYPE DEFAULT NULL,
        update_time_in                IN exam_result.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN exam_result.update_institution%TYPE DEFAULT NULL,
        flg_status_in                 IN exam_result.flg_status%TYPE DEFAULT 'A',
        dt_exam_result_cancel_tstz_in IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in             IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        flg_result_origin_in          IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        id_result_status_in           IN exam_result.id_result_status%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        id_result_notes_in            IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        id_prof_read_in               IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        dt_prof_read_tstz_in          IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        id_exam_result_parent_in      IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        result_origin_notes_in        IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        id_abnormality_in             IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_epis_documentation_in      IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        flg_relevant_in               IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        ignore_if_null_in             IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE,
        clob_columns_in               IN varchar2_t,
        clob_pieces_in                IN varchar2_t
    ) IS
        l_notes        CLOB;
        l_notes_cancel CLOB;
        l_notes_result CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
        l_rows         PLS_INTEGER;
    BEGIN
    
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'notes_in' THEN
                            IF l_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes, TRUE, dbms_lob.call);
                            END IF;
                        WHEN 'notes_cancel_in' THEN
                            IF l_notes_cancel IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes_cancel, TRUE, dbms_lob.call);
                            END IF;
                        WHEN 'notes_result_in' THEN
                            IF l_notes_result IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes_result, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'notes_in' THEN
                        dbms_lob.writeappend(l_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                    WHEN 'notes_cancel_in' THEN
                        dbms_lob.writeappend(l_notes_cancel, length(clob_pieces_in(i)), clob_pieces_in(i));
                    WHEN 'notes_result_in' THEN
                        dbms_lob.writeappend(l_notes_result, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        upd(id_exam_result_in             => id_exam_result_in,
            id_exam_in                    => id_exam_in,
            id_exam_req_det_in            => id_exam_req_det_in,
            id_professional_in            => id_professional_in,
            id_patient_in                 => id_patient_in,
            flg_type_in                   => flg_type_in,
            id_institution_in             => id_institution_in,
            id_prof_mov_begin_in          => id_prof_mov_begin_in,
            id_prof_mov_end_in            => id_prof_mov_end_in,
            id_episode_in                 => id_episode_in,
            id_episode_write_in           => id_episode_write_in,
            dt_exam_result_tstz_in        => dt_exam_result_tstz_in,
            dt_mov_begin_tstz_in          => dt_mov_begin_tstz_in,
            dt_mov_end_tstz_in            => dt_mov_end_tstz_in,
            id_external_doc_in            => id_external_doc_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            flg_status_in                 => flg_status_in,
            dt_exam_result_cancel_tstz_in => dt_exam_result_cancel_tstz_in,
            id_prof_cancel_in             => id_prof_cancel_in,
            flg_result_origin_in          => flg_result_origin_in,
            id_result_status_in           => id_result_status_in,
            notes_in                      => l_notes,
            id_cancel_reason_in           => id_cancel_reason_in,
            notes_cancel_in               => l_notes_cancel,
            id_result_notes_in            => id_result_notes_in,
            notes_result_in               => l_notes_result,
            id_prof_read_in               => id_prof_read_in,
            dt_prof_read_tstz_in          => dt_prof_read_tstz_in,
            id_exam_result_parent_in      => id_exam_result_parent_in,
            result_origin_notes_in        => result_origin_notes_in,
            id_abnormality_in             => id_abnormality_in,
            id_epis_documentation_in      => id_epis_documentation_in,
            flg_relevant_in               => flg_relevant_in,
            handle_error_in               => handle_error_in);
    END n_upd_clobs_in_chunks;

    PROCEDURE n_upd_ins_clobs_in_chunks
    (
        id_exam_result_in             IN exam_result.id_exam_result%TYPE,
        id_exam_in                    IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_req_det_in            IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_professional_in            IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in                 IN exam_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                   IN exam_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in             IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_prof_mov_begin_in          IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_end_in            IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_episode_in                 IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_write_in           IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        dt_exam_result_tstz_in        IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_in          IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_in            IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        id_external_doc_in            IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        create_user_in                IN exam_result.create_user%TYPE DEFAULT NULL,
        create_time_in                IN exam_result.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN exam_result.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN exam_result.update_user%TYPE DEFAULT NULL,
        update_time_in                IN exam_result.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN exam_result.update_institution%TYPE DEFAULT NULL,
        flg_status_in                 IN exam_result.flg_status%TYPE DEFAULT 'A',
        dt_exam_result_cancel_tstz_in IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in             IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        flg_result_origin_in          IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        id_result_status_in           IN exam_result.id_result_status%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        id_result_notes_in            IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        id_prof_read_in               IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        dt_prof_read_tstz_in          IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        id_exam_result_parent_in      IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        result_origin_notes_in        IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        id_abnormality_in             IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_epis_documentation_in      IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        flg_relevant_in               IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        ignore_if_null_in             IN BOOLEAN DEFAULT TRUE,
        handle_error_in               IN BOOLEAN DEFAULT TRUE,
        clob_columns_in               IN varchar2_t,
        clob_pieces_in                IN varchar2_t
    ) IS
    BEGIN
        n_upd_clobs_in_chunks(id_exam_result_in             => id_exam_result_in,
                              id_exam_in                    => id_exam_in,
                              id_exam_req_det_in            => id_exam_req_det_in,
                              id_professional_in            => id_professional_in,
                              id_patient_in                 => id_patient_in,
                              flg_type_in                   => flg_type_in,
                              id_institution_in             => id_institution_in,
                              id_prof_mov_begin_in          => id_prof_mov_begin_in,
                              id_prof_mov_end_in            => id_prof_mov_end_in,
                              id_episode_in                 => id_episode_in,
                              id_episode_write_in           => id_episode_write_in,
                              dt_exam_result_tstz_in        => dt_exam_result_tstz_in,
                              dt_mov_begin_tstz_in          => dt_mov_begin_tstz_in,
                              dt_mov_end_tstz_in            => dt_mov_end_tstz_in,
                              id_external_doc_in            => id_external_doc_in,
                              create_user_in                => create_user_in,
                              create_time_in                => create_time_in,
                              create_institution_in         => create_institution_in,
                              update_user_in                => update_user_in,
                              update_time_in                => update_time_in,
                              update_institution_in         => update_institution_in,
                              flg_status_in                 => flg_status_in,
                              dt_exam_result_cancel_tstz_in => dt_exam_result_cancel_tstz_in,
                              id_prof_cancel_in             => id_prof_cancel_in,
                              flg_result_origin_in          => flg_result_origin_in,
                              id_result_status_in           => id_result_status_in,
                              id_cancel_reason_in           => id_cancel_reason_in,
                              id_result_notes_in            => id_result_notes_in,
                              id_prof_read_in               => id_prof_read_in,
                              dt_prof_read_tstz_in          => dt_prof_read_tstz_in,
                              id_exam_result_parent_in      => id_exam_result_parent_in,
                              result_origin_notes_in        => result_origin_notes_in,
                              id_abnormality_in             => id_abnormality_in,
                              id_epis_documentation_in      => id_epis_documentation_in,
                              flg_relevant_in               => flg_relevant_in,
                              clob_columns_in               => clob_columns_in,
                              clob_pieces_in                => clob_pieces_in,
                              ignore_if_null_in             => ignore_if_null_in,
                              handle_error_in               => handle_error_in);
    
        IF SQL%ROWCOUNT = 0
        THEN
            n_ins_clobs_in_chunks(id_exam_result_in             => id_exam_result_in,
                                  id_exam_in                    => id_exam_in,
                                  id_exam_req_det_in            => id_exam_req_det_in,
                                  id_professional_in            => id_professional_in,
                                  id_patient_in                 => id_patient_in,
                                  flg_type_in                   => flg_type_in,
                                  id_institution_in             => id_institution_in,
                                  id_prof_mov_begin_in          => id_prof_mov_begin_in,
                                  id_prof_mov_end_in            => id_prof_mov_end_in,
                                  id_episode_in                 => id_episode_in,
                                  id_episode_write_in           => id_episode_write_in,
                                  dt_exam_result_tstz_in        => dt_exam_result_tstz_in,
                                  dt_mov_begin_tstz_in          => dt_mov_begin_tstz_in,
                                  dt_mov_end_tstz_in            => dt_mov_end_tstz_in,
                                  id_external_doc_in            => id_external_doc_in,
                                  create_user_in                => create_user_in,
                                  create_time_in                => create_time_in,
                                  create_institution_in         => create_institution_in,
                                  update_user_in                => update_user_in,
                                  update_time_in                => update_time_in,
                                  update_institution_in         => update_institution_in,
                                  flg_status_in                 => flg_status_in,
                                  dt_exam_result_cancel_tstz_in => dt_exam_result_cancel_tstz_in,
                                  id_prof_cancel_in             => id_prof_cancel_in,
                                  flg_result_origin_in          => flg_result_origin_in,
                                  id_result_status_in           => id_result_status_in,
                                  id_cancel_reason_in           => id_cancel_reason_in,
                                  id_result_notes_in            => id_result_notes_in,
                                  id_prof_read_in               => id_prof_read_in,
                                  dt_prof_read_tstz_in          => dt_prof_read_tstz_in,
                                  id_exam_result_parent_in      => id_exam_result_parent_in,
                                  result_origin_notes_in        => result_origin_notes_in,
                                  id_abnormality_in             => id_abnormality_in,
                                  id_epis_documentation_in      => id_epis_documentation_in,
                                  flg_relevant_in               => flg_relevant_in,
                                  clob_columns_in               => clob_columns_in,
                                  clob_pieces_in                => clob_pieces_in,
                                  handle_error_in               => handle_error_in);
        END IF;
    END n_upd_ins_clobs_in_chunks;

    /*
    END Special logic for handling LOB columns.
    */

    PROCEDURE ins
    (
        rec_in          IN exam_result%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec exam_result%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_exam_result := next_key(sequence_in);
        END IF;
        ins(id_exam_result_in             => l_rec.id_exam_result,
            id_exam_in                    => l_rec.id_exam,
            id_exam_req_det_in            => l_rec.id_exam_req_det,
            id_professional_in            => l_rec.id_professional,
            id_patient_in                 => l_rec.id_patient,
            flg_type_in                   => l_rec.flg_type,
            id_institution_in             => l_rec.id_institution,
            id_prof_mov_begin_in          => l_rec.id_prof_mov_begin,
            id_prof_mov_end_in            => l_rec.id_prof_mov_end,
            id_episode_in                 => l_rec.id_episode,
            id_episode_write_in           => l_rec.id_episode_write,
            dt_exam_result_tstz_in        => l_rec.dt_exam_result_tstz,
            dt_mov_begin_tstz_in          => l_rec.dt_mov_begin_tstz,
            dt_mov_end_tstz_in            => l_rec.dt_mov_end_tstz,
            id_external_doc_in            => l_rec.id_external_doc,
            create_user_in                => l_rec.create_user,
            create_time_in                => l_rec.create_time,
            create_institution_in         => l_rec.create_institution,
            update_user_in                => l_rec.update_user,
            update_time_in                => l_rec.update_time,
            update_institution_in         => l_rec.update_institution,
            flg_status_in                 => l_rec.flg_status,
            dt_exam_result_cancel_tstz_in => l_rec.dt_exam_result_cancel_tstz,
            id_prof_cancel_in             => l_rec.id_prof_cancel,
            flg_result_origin_in          => l_rec.flg_result_origin,
            id_result_status_in           => l_rec.id_result_status,
            notes_in                      => l_rec.notes,
            id_cancel_reason_in           => l_rec.id_cancel_reason,
            notes_cancel_in               => l_rec.notes_cancel,
            id_result_notes_in            => l_rec.id_result_notes,
            notes_result_in               => l_rec.notes_result,
            id_prof_read_in               => l_rec.id_prof_read,
            dt_prof_read_tstz_in          => l_rec.dt_prof_read_tstz,
            id_exam_result_parent_in      => l_rec.id_exam_result_parent,
            result_origin_notes_in        => l_rec.result_origin_notes,
            id_abnormality_in             => l_rec.id_abnormality,
            id_epis_documentation_in      => l_rec.id_epis_documentation,
            flg_relevant_in               => l_rec.flg_relevant,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN exam_result%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN exam_result.id_exam_result%TYPE
    
     IS
        retval exam_result.id_exam_result%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_exam_result.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_EXAM_RESULT'));
    END next_key;

    PROCEDURE ins
    (
        id_exam_in                    IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_req_det_in            IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_professional_in            IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in                 IN exam_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                   IN exam_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in             IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_prof_mov_begin_in          IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_end_in            IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_episode_in                 IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_write_in           IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        dt_exam_result_tstz_in        IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_in          IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_in            IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        id_external_doc_in            IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        create_user_in                IN exam_result.create_user%TYPE DEFAULT NULL,
        create_time_in                IN exam_result.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN exam_result.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN exam_result.update_user%TYPE DEFAULT NULL,
        update_time_in                IN exam_result.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN exam_result.update_institution%TYPE DEFAULT NULL,
        flg_status_in                 IN exam_result.flg_status%TYPE DEFAULT 'A',
        dt_exam_result_cancel_tstz_in IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in             IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        flg_result_origin_in          IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        id_result_status_in           IN exam_result.id_result_status%TYPE DEFAULT NULL,
        notes_in                      IN exam_result.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in               IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        id_result_notes_in            IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        notes_result_in               IN exam_result.notes_result%TYPE DEFAULT NULL,
        id_prof_read_in               IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        dt_prof_read_tstz_in          IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        id_exam_result_parent_in      IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        result_origin_notes_in        IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        id_abnormality_in             IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_epis_documentation_in      IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        flg_relevant_in               IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        id_exam_result_out            IN OUT exam_result.id_exam_result%TYPE,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      OUT table_varchar
    ) IS
        l_pky exam_result.id_exam_result%TYPE := next_key;
    BEGIN
        ins(id_exam_result_in             => l_pky,
            id_exam_in                    => id_exam_in,
            id_exam_req_det_in            => id_exam_req_det_in,
            id_professional_in            => id_professional_in,
            id_patient_in                 => id_patient_in,
            flg_type_in                   => flg_type_in,
            id_institution_in             => id_institution_in,
            id_prof_mov_begin_in          => id_prof_mov_begin_in,
            id_prof_mov_end_in            => id_prof_mov_end_in,
            id_episode_in                 => id_episode_in,
            id_episode_write_in           => id_episode_write_in,
            dt_exam_result_tstz_in        => dt_exam_result_tstz_in,
            dt_mov_begin_tstz_in          => dt_mov_begin_tstz_in,
            dt_mov_end_tstz_in            => dt_mov_end_tstz_in,
            id_external_doc_in            => id_external_doc_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            flg_status_in                 => flg_status_in,
            dt_exam_result_cancel_tstz_in => dt_exam_result_cancel_tstz_in,
            id_prof_cancel_in             => id_prof_cancel_in,
            flg_result_origin_in          => flg_result_origin_in,
            id_result_status_in           => id_result_status_in,
            notes_in                      => notes_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            notes_cancel_in               => notes_cancel_in,
            id_result_notes_in            => id_result_notes_in,
            notes_result_in               => notes_result_in,
            id_prof_read_in               => id_prof_read_in,
            dt_prof_read_tstz_in          => dt_prof_read_tstz_in,
            id_exam_result_parent_in      => id_exam_result_parent_in,
            result_origin_notes_in        => result_origin_notes_in,
            id_abnormality_in             => id_abnormality_in,
            id_epis_documentation_in      => id_epis_documentation_in,
            flg_relevant_in               => flg_relevant_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        id_exam_result_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_exam_in                    IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_req_det_in            IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_professional_in            IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in                 IN exam_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                   IN exam_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in             IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_prof_mov_begin_in          IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_end_in            IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_episode_in                 IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_write_in           IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        dt_exam_result_tstz_in        IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_in          IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_in            IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        id_external_doc_in            IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        create_user_in                IN exam_result.create_user%TYPE DEFAULT NULL,
        create_time_in                IN exam_result.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN exam_result.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN exam_result.update_user%TYPE DEFAULT NULL,
        update_time_in                IN exam_result.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN exam_result.update_institution%TYPE DEFAULT NULL,
        flg_status_in                 IN exam_result.flg_status%TYPE DEFAULT 'A',
        dt_exam_result_cancel_tstz_in IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in             IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        flg_result_origin_in          IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        id_result_status_in           IN exam_result.id_result_status%TYPE DEFAULT NULL,
        notes_in                      IN exam_result.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in               IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        id_result_notes_in            IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        notes_result_in               IN exam_result.notes_result%TYPE DEFAULT NULL,
        id_prof_read_in               IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        dt_prof_read_tstz_in          IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        id_exam_result_parent_in      IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        result_origin_notes_in        IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        id_abnormality_in             IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_epis_documentation_in      IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        flg_relevant_in               IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        id_exam_result_out            IN OUT exam_result.id_exam_result%TYPE,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_exam_in                    => id_exam_in,
            id_exam_req_det_in            => id_exam_req_det_in,
            id_professional_in            => id_professional_in,
            id_patient_in                 => id_patient_in,
            flg_type_in                   => flg_type_in,
            id_institution_in             => id_institution_in,
            id_prof_mov_begin_in          => id_prof_mov_begin_in,
            id_prof_mov_end_in            => id_prof_mov_end_in,
            id_episode_in                 => id_episode_in,
            id_episode_write_in           => id_episode_write_in,
            dt_exam_result_tstz_in        => dt_exam_result_tstz_in,
            dt_mov_begin_tstz_in          => dt_mov_begin_tstz_in,
            dt_mov_end_tstz_in            => dt_mov_end_tstz_in,
            id_external_doc_in            => id_external_doc_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            flg_status_in                 => flg_status_in,
            dt_exam_result_cancel_tstz_in => dt_exam_result_cancel_tstz_in,
            id_prof_cancel_in             => id_prof_cancel_in,
            flg_result_origin_in          => flg_result_origin_in,
            id_result_status_in           => id_result_status_in,
            notes_in                      => notes_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            notes_cancel_in               => notes_cancel_in,
            id_result_notes_in            => id_result_notes_in,
            notes_result_in               => notes_result_in,
            id_prof_read_in               => id_prof_read_in,
            dt_prof_read_tstz_in          => dt_prof_read_tstz_in,
            id_exam_result_parent_in      => id_exam_result_parent_in,
            result_origin_notes_in        => result_origin_notes_in,
            id_abnormality_in             => id_abnormality_in,
            id_epis_documentation_in      => id_epis_documentation_in,
            flg_relevant_in               => flg_relevant_in,
            id_exam_result_out            => id_exam_result_out,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    FUNCTION ins
    (
        id_exam_in                    IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_req_det_in            IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_professional_in            IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in                 IN exam_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                   IN exam_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in             IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_prof_mov_begin_in          IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_end_in            IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_episode_in                 IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_write_in           IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        dt_exam_result_tstz_in        IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_in          IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_in            IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        id_external_doc_in            IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        create_user_in                IN exam_result.create_user%TYPE DEFAULT NULL,
        create_time_in                IN exam_result.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN exam_result.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN exam_result.update_user%TYPE DEFAULT NULL,
        update_time_in                IN exam_result.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN exam_result.update_institution%TYPE DEFAULT NULL,
        flg_status_in                 IN exam_result.flg_status%TYPE DEFAULT 'A',
        dt_exam_result_cancel_tstz_in IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in             IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        flg_result_origin_in          IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        id_result_status_in           IN exam_result.id_result_status%TYPE DEFAULT NULL,
        notes_in                      IN exam_result.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in               IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        id_result_notes_in            IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        notes_result_in               IN exam_result.notes_result%TYPE DEFAULT NULL,
        id_prof_read_in               IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        dt_prof_read_tstz_in          IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        id_exam_result_parent_in      IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        result_origin_notes_in        IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        id_abnormality_in             IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_epis_documentation_in      IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        flg_relevant_in               IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      OUT table_varchar
    ) RETURN exam_result.id_exam_result%TYPE IS
        l_pky exam_result.id_exam_result%TYPE := next_key;
    BEGIN
        ins(id_exam_result_in             => l_pky,
            id_exam_in                    => id_exam_in,
            id_exam_req_det_in            => id_exam_req_det_in,
            id_professional_in            => id_professional_in,
            id_patient_in                 => id_patient_in,
            flg_type_in                   => flg_type_in,
            id_institution_in             => id_institution_in,
            id_prof_mov_begin_in          => id_prof_mov_begin_in,
            id_prof_mov_end_in            => id_prof_mov_end_in,
            id_episode_in                 => id_episode_in,
            id_episode_write_in           => id_episode_write_in,
            dt_exam_result_tstz_in        => dt_exam_result_tstz_in,
            dt_mov_begin_tstz_in          => dt_mov_begin_tstz_in,
            dt_mov_end_tstz_in            => dt_mov_end_tstz_in,
            id_external_doc_in            => id_external_doc_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            flg_status_in                 => flg_status_in,
            dt_exam_result_cancel_tstz_in => dt_exam_result_cancel_tstz_in,
            id_prof_cancel_in             => id_prof_cancel_in,
            flg_result_origin_in          => flg_result_origin_in,
            id_result_status_in           => id_result_status_in,
            notes_in                      => notes_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            notes_cancel_in               => notes_cancel_in,
            id_result_notes_in            => id_result_notes_in,
            notes_result_in               => notes_result_in,
            id_prof_read_in               => id_prof_read_in,
            dt_prof_read_tstz_in          => dt_prof_read_tstz_in,
            id_exam_result_parent_in      => id_exam_result_parent_in,
            result_origin_notes_in        => result_origin_notes_in,
            id_abnormality_in             => id_abnormality_in,
            id_epis_documentation_in      => id_epis_documentation_in,
            flg_relevant_in               => flg_relevant_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_exam_in                    IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_req_det_in            IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_professional_in            IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in                 IN exam_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                   IN exam_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in             IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_prof_mov_begin_in          IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_end_in            IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_episode_in                 IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_write_in           IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        dt_exam_result_tstz_in        IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_in          IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_in            IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        id_external_doc_in            IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        create_user_in                IN exam_result.create_user%TYPE DEFAULT NULL,
        create_time_in                IN exam_result.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN exam_result.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN exam_result.update_user%TYPE DEFAULT NULL,
        update_time_in                IN exam_result.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN exam_result.update_institution%TYPE DEFAULT NULL,
        flg_status_in                 IN exam_result.flg_status%TYPE DEFAULT 'A',
        dt_exam_result_cancel_tstz_in IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in             IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        flg_result_origin_in          IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        id_result_status_in           IN exam_result.id_result_status%TYPE DEFAULT NULL,
        notes_in                      IN exam_result.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in               IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        id_result_notes_in            IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        notes_result_in               IN exam_result.notes_result%TYPE DEFAULT NULL,
        id_prof_read_in               IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        dt_prof_read_tstz_in          IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        id_exam_result_parent_in      IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        result_origin_notes_in        IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        id_abnormality_in             IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_epis_documentation_in      IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        flg_relevant_in               IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) RETURN exam_result.id_exam_result%TYPE IS
        l_pky    exam_result.id_exam_result%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_exam_result_in             => l_pky,
            id_exam_in                    => id_exam_in,
            id_exam_req_det_in            => id_exam_req_det_in,
            id_professional_in            => id_professional_in,
            id_patient_in                 => id_patient_in,
            flg_type_in                   => flg_type_in,
            id_institution_in             => id_institution_in,
            id_prof_mov_begin_in          => id_prof_mov_begin_in,
            id_prof_mov_end_in            => id_prof_mov_end_in,
            id_episode_in                 => id_episode_in,
            id_episode_write_in           => id_episode_write_in,
            dt_exam_result_tstz_in        => dt_exam_result_tstz_in,
            dt_mov_begin_tstz_in          => dt_mov_begin_tstz_in,
            dt_mov_end_tstz_in            => dt_mov_end_tstz_in,
            id_external_doc_in            => id_external_doc_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            flg_status_in                 => flg_status_in,
            dt_exam_result_cancel_tstz_in => dt_exam_result_cancel_tstz_in,
            id_prof_cancel_in             => id_prof_cancel_in,
            flg_result_origin_in          => flg_result_origin_in,
            id_result_status_in           => id_result_status_in,
            notes_in                      => notes_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            notes_cancel_in               => notes_cancel_in,
            id_result_notes_in            => id_result_notes_in,
            notes_result_in               => notes_result_in,
            id_prof_read_in               => id_prof_read_in,
            dt_prof_read_tstz_in          => dt_prof_read_tstz_in,
            id_exam_result_parent_in      => id_exam_result_parent_in,
            result_origin_notes_in        => result_origin_notes_in,
            id_abnormality_in             => id_abnormality_in,
            id_epis_documentation_in      => id_epis_documentation_in,
            flg_relevant_in               => flg_relevant_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_exam_in                    IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_req_det_in            IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_professional_in            IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in                 IN exam_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                   IN exam_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in             IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_prof_mov_begin_in          IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_end_in            IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_episode_in                 IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_write_in           IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        dt_exam_result_tstz_in        IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_in          IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_in            IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        id_external_doc_in            IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        create_user_in                IN exam_result.create_user%TYPE DEFAULT NULL,
        create_time_in                IN exam_result.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN exam_result.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN exam_result.update_user%TYPE DEFAULT NULL,
        update_time_in                IN exam_result.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN exam_result.update_institution%TYPE DEFAULT NULL,
        flg_status_in                 IN exam_result.flg_status%TYPE DEFAULT 'A',
        dt_exam_result_cancel_tstz_in IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in             IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        flg_result_origin_in          IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        id_result_status_in           IN exam_result.id_result_status%TYPE DEFAULT NULL,
        notes_in                      IN exam_result.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in               IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        id_result_notes_in            IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        notes_result_in               IN exam_result.notes_result%TYPE DEFAULT NULL,
        id_prof_read_in               IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        dt_prof_read_tstz_in          IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        id_exam_result_parent_in      IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        result_origin_notes_in        IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        id_abnormality_in             IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_epis_documentation_in      IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        flg_relevant_in               IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      OUT table_varchar
    ) IS
        l_pky exam_result.id_exam_result%TYPE := next_key;
    BEGIN
        ins(id_exam_result_in             => l_pky,
            id_exam_in                    => id_exam_in,
            id_exam_req_det_in            => id_exam_req_det_in,
            id_professional_in            => id_professional_in,
            id_patient_in                 => id_patient_in,
            flg_type_in                   => flg_type_in,
            id_institution_in             => id_institution_in,
            id_prof_mov_begin_in          => id_prof_mov_begin_in,
            id_prof_mov_end_in            => id_prof_mov_end_in,
            id_episode_in                 => id_episode_in,
            id_episode_write_in           => id_episode_write_in,
            dt_exam_result_tstz_in        => dt_exam_result_tstz_in,
            dt_mov_begin_tstz_in          => dt_mov_begin_tstz_in,
            dt_mov_end_tstz_in            => dt_mov_end_tstz_in,
            id_external_doc_in            => id_external_doc_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            flg_status_in                 => flg_status_in,
            dt_exam_result_cancel_tstz_in => dt_exam_result_cancel_tstz_in,
            id_prof_cancel_in             => id_prof_cancel_in,
            flg_result_origin_in          => flg_result_origin_in,
            id_result_status_in           => id_result_status_in,
            notes_in                      => notes_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            notes_cancel_in               => notes_cancel_in,
            id_result_notes_in            => id_result_notes_in,
            notes_result_in               => notes_result_in,
            id_prof_read_in               => id_prof_read_in,
            dt_prof_read_tstz_in          => dt_prof_read_tstz_in,
            id_exam_result_parent_in      => id_exam_result_parent_in,
            result_origin_notes_in        => result_origin_notes_in,
            id_abnormality_in             => id_abnormality_in,
            id_epis_documentation_in      => id_epis_documentation_in,
            flg_relevant_in               => flg_relevant_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_exam_in                    IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_req_det_in            IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_professional_in            IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in                 IN exam_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                   IN exam_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in             IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_prof_mov_begin_in          IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_end_in            IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_episode_in                 IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_write_in           IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        dt_exam_result_tstz_in        IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_in          IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_in            IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        id_external_doc_in            IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        create_user_in                IN exam_result.create_user%TYPE DEFAULT NULL,
        create_time_in                IN exam_result.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN exam_result.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN exam_result.update_user%TYPE DEFAULT NULL,
        update_time_in                IN exam_result.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN exam_result.update_institution%TYPE DEFAULT NULL,
        flg_status_in                 IN exam_result.flg_status%TYPE DEFAULT 'A',
        dt_exam_result_cancel_tstz_in IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in             IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        flg_result_origin_in          IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        id_result_status_in           IN exam_result.id_result_status%TYPE DEFAULT NULL,
        notes_in                      IN exam_result.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in               IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        id_result_notes_in            IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        notes_result_in               IN exam_result.notes_result%TYPE DEFAULT NULL,
        id_prof_read_in               IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        dt_prof_read_tstz_in          IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        id_exam_result_parent_in      IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        result_origin_notes_in        IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        id_abnormality_in             IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_epis_documentation_in      IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        flg_relevant_in               IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        l_pky    exam_result.id_exam_result%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_exam_result_in             => l_pky,
            id_exam_in                    => id_exam_in,
            id_exam_req_det_in            => id_exam_req_det_in,
            id_professional_in            => id_professional_in,
            id_patient_in                 => id_patient_in,
            flg_type_in                   => flg_type_in,
            id_institution_in             => id_institution_in,
            id_prof_mov_begin_in          => id_prof_mov_begin_in,
            id_prof_mov_end_in            => id_prof_mov_end_in,
            id_episode_in                 => id_episode_in,
            id_episode_write_in           => id_episode_write_in,
            dt_exam_result_tstz_in        => dt_exam_result_tstz_in,
            dt_mov_begin_tstz_in          => dt_mov_begin_tstz_in,
            dt_mov_end_tstz_in            => dt_mov_end_tstz_in,
            id_external_doc_in            => id_external_doc_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            flg_status_in                 => flg_status_in,
            dt_exam_result_cancel_tstz_in => dt_exam_result_cancel_tstz_in,
            id_prof_cancel_in             => id_prof_cancel_in,
            flg_result_origin_in          => flg_result_origin_in,
            id_result_status_in           => id_result_status_in,
            notes_in                      => notes_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            notes_cancel_in               => notes_cancel_in,
            id_result_notes_in            => id_result_notes_in,
            notes_result_in               => notes_result_in,
            id_prof_read_in               => id_prof_read_in,
            dt_prof_read_tstz_in          => dt_prof_read_tstz_in,
            id_exam_result_parent_in      => id_exam_result_parent_in,
            result_origin_notes_in        => result_origin_notes_in,
            id_abnormality_in             => id_abnormality_in,
            id_epis_documentation_in      => id_epis_documentation_in,
            flg_relevant_in               => flg_relevant_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN exam_result_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO exam_result
                    (id_exam_result,
                     id_exam,
                     id_exam_req_det,
                     id_professional,
                     id_patient,
                     flg_type,
                     id_institution,
                     id_prof_mov_begin,
                     id_prof_mov_end,
                     id_episode,
                     id_episode_write,
                     dt_exam_result_tstz,
                     dt_mov_begin_tstz,
                     dt_mov_end_tstz,
                     id_external_doc,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     flg_status,
                     dt_exam_result_cancel_tstz,
                     id_prof_cancel,
                     flg_result_origin,
                     id_result_status,
                     notes,
                     id_cancel_reason,
                     notes_cancel,
                     id_result_notes,
                     notes_result,
                     id_prof_read,
                     dt_prof_read_tstz,
                     id_exam_result_parent,
                     result_origin_notes,
                     id_abnormality,
                     id_epis_documentation,
                     flg_relevant)
                VALUES
                    (rows_in(indx).id_exam_result,
                     rows_in(indx).id_exam,
                     rows_in(indx).id_exam_req_det,
                     rows_in(indx).id_professional,
                     rows_in(indx).id_patient,
                     rows_in(indx).flg_type,
                     rows_in(indx).id_institution,
                     rows_in(indx).id_prof_mov_begin,
                     rows_in(indx).id_prof_mov_end,
                     rows_in(indx).id_episode,
                     rows_in(indx).id_episode_write,
                     rows_in(indx).dt_exam_result_tstz,
                     rows_in(indx).dt_mov_begin_tstz,
                     rows_in(indx).dt_mov_end_tstz,
                     rows_in(indx).id_external_doc,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).flg_status,
                     rows_in(indx).dt_exam_result_cancel_tstz,
                     rows_in(indx).id_prof_cancel,
                     rows_in(indx).flg_result_origin,
                     rows_in(indx).id_result_status,
                     rows_in(indx).notes,
                     rows_in(indx).id_cancel_reason,
                     rows_in(indx).notes_cancel,
                     rows_in(indx).id_result_notes,
                     rows_in(indx).notes_result,
                     rows_in(indx).id_prof_read,
                     rows_in(indx).dt_prof_read_tstz,
                     rows_in(indx).id_exam_result_parent,
                     rows_in(indx).result_origin_notes,
                     rows_in(indx).id_abnormality,
                     rows_in(indx).id_epis_documentation,
                     rows_in(indx).flg_relevant)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXAM_RESULT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_exam_result,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXAM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_exam,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXAM_REQ_DET _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_exam_req_det,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_MOV_BEGIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_mov_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_MOV_END _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_mov_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_WRITE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode_write,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_EXAM_RESULT_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_exam_result_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_MOV_BEGIN_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_mov_begin_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_MOV_END_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_mov_end_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXTERNAL_DOC _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_external_doc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_EXAM_RESULT_CANCEL_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_exam_result_cancel_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_RESULT_ORIGIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_result_origin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RESULT_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_result_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RESULT_NOTES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_result_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_READ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_read,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PROF_READ_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_prof_read_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXAM_RESULT_PARENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_exam_result_parent,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RESULT_ORIGIN_NOTES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .result_origin_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ABNORMALITY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_abnormality,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_DOCUMENTATION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_epis_documentation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_RELEVANT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_relevant,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'EXAM_RESULT',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN exam_result_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_exam_result_in              IN exam_result.id_exam_result%TYPE,
        id_exam_in                     IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_nin                    IN BOOLEAN := TRUE,
        id_exam_req_det_in             IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_exam_req_det_nin            IN BOOLEAN := TRUE,
        id_professional_in             IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        id_patient_in                  IN exam_result.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        flg_type_in                    IN exam_result.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                   IN BOOLEAN := TRUE,
        id_institution_in              IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_institution_nin             IN BOOLEAN := TRUE,
        id_prof_mov_begin_in           IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_begin_nin          IN BOOLEAN := TRUE,
        id_prof_mov_end_in             IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_prof_mov_end_nin            IN BOOLEAN := TRUE,
        id_episode_in                  IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_episode_write_in            IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        id_episode_write_nin           IN BOOLEAN := TRUE,
        dt_exam_result_tstz_in         IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_exam_result_tstz_nin        IN BOOLEAN := TRUE,
        dt_mov_begin_tstz_in           IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_nin          IN BOOLEAN := TRUE,
        dt_mov_end_tstz_in             IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_nin            IN BOOLEAN := TRUE,
        id_external_doc_in             IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        id_external_doc_nin            IN BOOLEAN := TRUE,
        create_user_in                 IN exam_result.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN exam_result.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN exam_result.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN exam_result.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN exam_result.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN exam_result.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        flg_status_in                  IN exam_result.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        dt_exam_result_cancel_tstz_in  IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        dt_exam_result_cancel_tstz_nin IN BOOLEAN := TRUE,
        id_prof_cancel_in              IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin             IN BOOLEAN := TRUE,
        flg_result_origin_in           IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        flg_result_origin_nin          IN BOOLEAN := TRUE,
        id_result_status_in            IN exam_result.id_result_status%TYPE DEFAULT NULL,
        id_result_status_nin           IN BOOLEAN := TRUE,
        notes_in                       IN exam_result.notes%TYPE DEFAULT NULL,
        notes_nin                      IN BOOLEAN := TRUE,
        id_cancel_reason_in            IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin           IN BOOLEAN := TRUE,
        notes_cancel_in                IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin               IN BOOLEAN := TRUE,
        id_result_notes_in             IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        id_result_notes_nin            IN BOOLEAN := TRUE,
        notes_result_in                IN exam_result.notes_result%TYPE DEFAULT NULL,
        notes_result_nin               IN BOOLEAN := TRUE,
        id_prof_read_in                IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        id_prof_read_nin               IN BOOLEAN := TRUE,
        dt_prof_read_tstz_in           IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        dt_prof_read_tstz_nin          IN BOOLEAN := TRUE,
        id_exam_result_parent_in       IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        id_exam_result_parent_nin      IN BOOLEAN := TRUE,
        result_origin_notes_in         IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        result_origin_notes_nin        IN BOOLEAN := TRUE,
        id_abnormality_in              IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_abnormality_nin             IN BOOLEAN := TRUE,
        id_epis_documentation_in       IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        id_epis_documentation_nin      IN BOOLEAN := TRUE,
        flg_relevant_in                IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        flg_relevant_nin               IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
        l_rows_out                     table_varchar;
        l_id_exam_n                    NUMBER(1);
        l_id_exam_req_det_n            NUMBER(1);
        l_id_professional_n            NUMBER(1);
        l_id_patient_n                 NUMBER(1);
        l_flg_type_n                   NUMBER(1);
        l_id_institution_n             NUMBER(1);
        l_id_prof_mov_begin_n          NUMBER(1);
        l_id_prof_mov_end_n            NUMBER(1);
        l_id_episode_n                 NUMBER(1);
        l_id_episode_write_n           NUMBER(1);
        l_dt_exam_result_tstz_n        NUMBER(1);
        l_dt_mov_begin_tstz_n          NUMBER(1);
        l_dt_mov_end_tstz_n            NUMBER(1);
        l_id_external_doc_n            NUMBER(1);
        l_create_user_n                NUMBER(1);
        l_create_time_n                NUMBER(1);
        l_create_institution_n         NUMBER(1);
        l_update_user_n                NUMBER(1);
        l_update_time_n                NUMBER(1);
        l_update_institution_n         NUMBER(1);
        l_flg_status_n                 NUMBER(1);
        l_dt_exam_result_cancel_tstz_n NUMBER(1);
        l_id_prof_cancel_n             NUMBER(1);
        l_flg_result_origin_n          NUMBER(1);
        l_id_result_status_n           NUMBER(1);
        l_notes_n                      NUMBER(1);
        l_id_cancel_reason_n           NUMBER(1);
        l_notes_cancel_n               NUMBER(1);
        l_id_result_notes_n            NUMBER(1);
        l_notes_result_n               NUMBER(1);
        l_id_prof_read_n               NUMBER(1);
        l_dt_prof_read_tstz_n          NUMBER(1);
        l_id_exam_result_parent_n      NUMBER(1);
        l_result_origin_notes_n        NUMBER(1);
        l_id_abnormality_n             NUMBER(1);
        l_id_epis_documentation_n      NUMBER(1);
        l_flg_relevant_n               NUMBER(1);
    BEGIN
    
        l_id_exam_n                    := sys.diutil.bool_to_int(id_exam_nin);
        l_id_exam_req_det_n            := sys.diutil.bool_to_int(id_exam_req_det_nin);
        l_id_professional_n            := sys.diutil.bool_to_int(id_professional_nin);
        l_id_patient_n                 := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_type_n                   := sys.diutil.bool_to_int(flg_type_nin);
        l_id_institution_n             := sys.diutil.bool_to_int(id_institution_nin);
        l_id_prof_mov_begin_n          := sys.diutil.bool_to_int(id_prof_mov_begin_nin);
        l_id_prof_mov_end_n            := sys.diutil.bool_to_int(id_prof_mov_end_nin);
        l_id_episode_n                 := sys.diutil.bool_to_int(id_episode_nin);
        l_id_episode_write_n           := sys.diutil.bool_to_int(id_episode_write_nin);
        l_dt_exam_result_tstz_n        := sys.diutil.bool_to_int(dt_exam_result_tstz_nin);
        l_dt_mov_begin_tstz_n          := sys.diutil.bool_to_int(dt_mov_begin_tstz_nin);
        l_dt_mov_end_tstz_n            := sys.diutil.bool_to_int(dt_mov_end_tstz_nin);
        l_id_external_doc_n            := sys.diutil.bool_to_int(id_external_doc_nin);
        l_create_user_n                := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n                := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n         := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n                := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n                := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n         := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_status_n                 := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_exam_result_cancel_tstz_n := sys.diutil.bool_to_int(dt_exam_result_cancel_tstz_nin);
        l_id_prof_cancel_n             := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_flg_result_origin_n          := sys.diutil.bool_to_int(flg_result_origin_nin);
        l_id_result_status_n           := sys.diutil.bool_to_int(id_result_status_nin);
        l_notes_n                      := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n           := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n               := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_result_notes_n            := sys.diutil.bool_to_int(id_result_notes_nin);
        l_notes_result_n               := sys.diutil.bool_to_int(notes_result_nin);
        l_id_prof_read_n               := sys.diutil.bool_to_int(id_prof_read_nin);
        l_dt_prof_read_tstz_n          := sys.diutil.bool_to_int(dt_prof_read_tstz_nin);
        l_id_exam_result_parent_n      := sys.diutil.bool_to_int(id_exam_result_parent_nin);
        l_result_origin_notes_n        := sys.diutil.bool_to_int(result_origin_notes_nin);
        l_id_abnormality_n             := sys.diutil.bool_to_int(id_abnormality_nin);
        l_id_epis_documentation_n      := sys.diutil.bool_to_int(id_epis_documentation_nin);
        l_flg_relevant_n               := sys.diutil.bool_to_int(flg_relevant_nin);
    
        UPDATE exam_result
           SET id_exam                    = decode(l_id_exam_n, 0, id_exam_in, nvl(id_exam_in, id_exam)),
               id_exam_req_det            = decode(l_id_exam_req_det_n,
                                                   0,
                                                   id_exam_req_det_in,
                                                   nvl(id_exam_req_det_in, id_exam_req_det)),
               id_professional            = decode(l_id_professional_n,
                                                   0,
                                                   id_professional_in,
                                                   nvl(id_professional_in, id_professional)),
               id_patient                 = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               flg_type                   = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               id_institution             = decode(l_id_institution_n,
                                                   0,
                                                   id_institution_in,
                                                   nvl(id_institution_in, id_institution)),
               id_prof_mov_begin          = decode(l_id_prof_mov_begin_n,
                                                   0,
                                                   id_prof_mov_begin_in,
                                                   nvl(id_prof_mov_begin_in, id_prof_mov_begin)),
               id_prof_mov_end            = decode(l_id_prof_mov_end_n,
                                                   0,
                                                   id_prof_mov_end_in,
                                                   nvl(id_prof_mov_end_in, id_prof_mov_end)),
               id_episode                 = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_episode_write           = decode(l_id_episode_write_n,
                                                   0,
                                                   id_episode_write_in,
                                                   nvl(id_episode_write_in, id_episode_write)),
               dt_exam_result_tstz        = decode(l_dt_exam_result_tstz_n,
                                                   0,
                                                   dt_exam_result_tstz_in,
                                                   nvl(dt_exam_result_tstz_in, dt_exam_result_tstz)),
               dt_mov_begin_tstz          = decode(l_dt_mov_begin_tstz_n,
                                                   0,
                                                   dt_mov_begin_tstz_in,
                                                   nvl(dt_mov_begin_tstz_in, dt_mov_begin_tstz)),
               dt_mov_end_tstz            = decode(l_dt_mov_end_tstz_n,
                                                   0,
                                                   dt_mov_end_tstz_in,
                                                   nvl(dt_mov_end_tstz_in, dt_mov_end_tstz)),
               id_external_doc            = decode(l_id_external_doc_n,
                                                   0,
                                                   id_external_doc_in,
                                                   nvl(id_external_doc_in, id_external_doc)),
               create_user                = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time                = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution         = decode(l_create_institution_n,
                                                   0,
                                                   create_institution_in,
                                                   nvl(create_institution_in, create_institution)),
               update_user                = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time                = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution         = decode(l_update_institution_n,
                                                   0,
                                                   update_institution_in,
                                                   nvl(update_institution_in, update_institution)),
               flg_status                 = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               dt_exam_result_cancel_tstz = decode(l_dt_exam_result_cancel_tstz_n,
                                                   0,
                                                   dt_exam_result_cancel_tstz_in,
                                                   nvl(dt_exam_result_cancel_tstz_in, dt_exam_result_cancel_tstz)),
               id_prof_cancel             = decode(l_id_prof_cancel_n,
                                                   0,
                                                   id_prof_cancel_in,
                                                   nvl(id_prof_cancel_in, id_prof_cancel)),
               flg_result_origin          = decode(l_flg_result_origin_n,
                                                   0,
                                                   flg_result_origin_in,
                                                   nvl(flg_result_origin_in, flg_result_origin)),
               id_result_status           = decode(l_id_result_status_n,
                                                   0,
                                                   id_result_status_in,
                                                   nvl(id_result_status_in, id_result_status)),
               notes                      = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_cancel_reason           = decode(l_id_cancel_reason_n,
                                                   0,
                                                   id_cancel_reason_in,
                                                   nvl(id_cancel_reason_in, id_cancel_reason)),
               notes_cancel               = decode(l_notes_cancel_n,
                                                   0,
                                                   notes_cancel_in,
                                                   nvl(notes_cancel_in, notes_cancel)),
               id_result_notes            = decode(l_id_result_notes_n,
                                                   0,
                                                   id_result_notes_in,
                                                   nvl(id_result_notes_in, id_result_notes)),
               notes_result               = decode(l_notes_result_n,
                                                   0,
                                                   notes_result_in,
                                                   nvl(notes_result_in, notes_result)),
               id_prof_read               = decode(l_id_prof_read_n,
                                                   0,
                                                   id_prof_read_in,
                                                   nvl(id_prof_read_in, id_prof_read)),
               dt_prof_read_tstz          = decode(l_dt_prof_read_tstz_n,
                                                   0,
                                                   dt_prof_read_tstz_in,
                                                   nvl(dt_prof_read_tstz_in, dt_prof_read_tstz)),
               id_exam_result_parent      = decode(l_id_exam_result_parent_n,
                                                   0,
                                                   id_exam_result_parent_in,
                                                   nvl(id_exam_result_parent_in, id_exam_result_parent)),
               result_origin_notes        = decode(l_result_origin_notes_n,
                                                   0,
                                                   result_origin_notes_in,
                                                   nvl(result_origin_notes_in, result_origin_notes)),
               id_abnormality             = decode(l_id_abnormality_n,
                                                   0,
                                                   id_abnormality_in,
                                                   nvl(id_abnormality_in, id_abnormality)),
               id_epis_documentation      = decode(l_id_epis_documentation_n,
                                                   0,
                                                   id_epis_documentation_in,
                                                   nvl(id_epis_documentation_in, id_epis_documentation)),
               flg_relevant               = decode(l_flg_relevant_n,
                                                   0,
                                                   flg_relevant_in,
                                                   nvl(flg_relevant_in, flg_relevant))
         WHERE id_exam_result = id_exam_result_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EXAM_RESULT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    IF l_name = 'ERES_ABY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ABNORMALITY',
                                                        value_in           => id_abnormality_in);
                    END IF;
                    IF l_name = 'ERES_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'ERES_EPIS_DOCUMENTATION_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DOCUMENTATION',
                                                        value_in           => id_epis_documentation_in);
                    END IF;
                    IF l_name = 'ERES_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'ERES_EPIS_WRITE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_WRITE',
                                                        value_in           => id_episode_write_in);
                    END IF;
                    IF l_name = 'ERES_ERD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_REQ_DET',
                                                        value_in           => id_exam_req_det_in);
                    END IF;
                    IF l_name = 'ERES_ERES_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_RESULT_PARENT',
                                                        value_in           => id_exam_result_parent_in);
                    END IF;
                    IF l_name = 'ERES_EXAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM',
                                                        value_in           => id_exam_in);
                    END IF;
                    IF l_name = 'ERES_EXT_DOC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXTERNAL_DOC',
                                                        value_in           => id_external_doc_in);
                    END IF;
                    IF l_name = 'ERES_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'ERES_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'ERES_PRL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'ERES_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'ERES_PROF_MOV_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_MOV_BEGIN',
                                                        value_in           => id_prof_mov_begin_in);
                    END IF;
                    IF l_name = 'ERES_PROF_READ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_READ',
                                                        value_in           => id_prof_read_in);
                    END IF;
                    IF l_name = 'ERES_PROF_RECEIVE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_MOV_END',
                                                        value_in           => id_prof_mov_end_in);
                    END IF;
                    IF l_name = 'ERES_RSNT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESULT_NOTES',
                                                        value_in           => id_result_notes_in);
                    END IF;
                    IF l_name = 'ERES_RSS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESULT_STATUS',
                                                        value_in           => id_result_status_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_exam_result_in              IN exam_result.id_exam_result%TYPE,
        id_exam_in                     IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_nin                    IN BOOLEAN := TRUE,
        id_exam_req_det_in             IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_exam_req_det_nin            IN BOOLEAN := TRUE,
        id_professional_in             IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        id_patient_in                  IN exam_result.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        flg_type_in                    IN exam_result.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                   IN BOOLEAN := TRUE,
        id_institution_in              IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_institution_nin             IN BOOLEAN := TRUE,
        id_prof_mov_begin_in           IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_begin_nin          IN BOOLEAN := TRUE,
        id_prof_mov_end_in             IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_prof_mov_end_nin            IN BOOLEAN := TRUE,
        id_episode_in                  IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_episode_write_in            IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        id_episode_write_nin           IN BOOLEAN := TRUE,
        dt_exam_result_tstz_in         IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_exam_result_tstz_nin        IN BOOLEAN := TRUE,
        dt_mov_begin_tstz_in           IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_nin          IN BOOLEAN := TRUE,
        dt_mov_end_tstz_in             IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_nin            IN BOOLEAN := TRUE,
        id_external_doc_in             IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        id_external_doc_nin            IN BOOLEAN := TRUE,
        create_user_in                 IN exam_result.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN exam_result.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN exam_result.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN exam_result.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN exam_result.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN exam_result.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        flg_status_in                  IN exam_result.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        dt_exam_result_cancel_tstz_in  IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        dt_exam_result_cancel_tstz_nin IN BOOLEAN := TRUE,
        id_prof_cancel_in              IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin             IN BOOLEAN := TRUE,
        flg_result_origin_in           IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        flg_result_origin_nin          IN BOOLEAN := TRUE,
        id_result_status_in            IN exam_result.id_result_status%TYPE DEFAULT NULL,
        id_result_status_nin           IN BOOLEAN := TRUE,
        notes_in                       IN exam_result.notes%TYPE DEFAULT NULL,
        notes_nin                      IN BOOLEAN := TRUE,
        id_cancel_reason_in            IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin           IN BOOLEAN := TRUE,
        notes_cancel_in                IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin               IN BOOLEAN := TRUE,
        id_result_notes_in             IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        id_result_notes_nin            IN BOOLEAN := TRUE,
        notes_result_in                IN exam_result.notes_result%TYPE DEFAULT NULL,
        notes_result_nin               IN BOOLEAN := TRUE,
        id_prof_read_in                IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        id_prof_read_nin               IN BOOLEAN := TRUE,
        dt_prof_read_tstz_in           IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        dt_prof_read_tstz_nin          IN BOOLEAN := TRUE,
        id_exam_result_parent_in       IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        id_exam_result_parent_nin      IN BOOLEAN := TRUE,
        result_origin_notes_in         IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        result_origin_notes_nin        IN BOOLEAN := TRUE,
        id_abnormality_in              IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_abnormality_nin             IN BOOLEAN := TRUE,
        id_epis_documentation_in       IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        id_epis_documentation_nin      IN BOOLEAN := TRUE,
        flg_relevant_in                IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        flg_relevant_nin               IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_exam_result_in              => id_exam_result_in,
            id_exam_in                     => id_exam_in,
            id_exam_nin                    => id_exam_nin,
            id_exam_req_det_in             => id_exam_req_det_in,
            id_exam_req_det_nin            => id_exam_req_det_nin,
            id_professional_in             => id_professional_in,
            id_professional_nin            => id_professional_nin,
            id_patient_in                  => id_patient_in,
            id_patient_nin                 => id_patient_nin,
            flg_type_in                    => flg_type_in,
            flg_type_nin                   => flg_type_nin,
            id_institution_in              => id_institution_in,
            id_institution_nin             => id_institution_nin,
            id_prof_mov_begin_in           => id_prof_mov_begin_in,
            id_prof_mov_begin_nin          => id_prof_mov_begin_nin,
            id_prof_mov_end_in             => id_prof_mov_end_in,
            id_prof_mov_end_nin            => id_prof_mov_end_nin,
            id_episode_in                  => id_episode_in,
            id_episode_nin                 => id_episode_nin,
            id_episode_write_in            => id_episode_write_in,
            id_episode_write_nin           => id_episode_write_nin,
            dt_exam_result_tstz_in         => dt_exam_result_tstz_in,
            dt_exam_result_tstz_nin        => dt_exam_result_tstz_nin,
            dt_mov_begin_tstz_in           => dt_mov_begin_tstz_in,
            dt_mov_begin_tstz_nin          => dt_mov_begin_tstz_nin,
            dt_mov_end_tstz_in             => dt_mov_end_tstz_in,
            dt_mov_end_tstz_nin            => dt_mov_end_tstz_nin,
            id_external_doc_in             => id_external_doc_in,
            id_external_doc_nin            => id_external_doc_nin,
            create_user_in                 => create_user_in,
            create_user_nin                => create_user_nin,
            create_time_in                 => create_time_in,
            create_time_nin                => create_time_nin,
            create_institution_in          => create_institution_in,
            create_institution_nin         => create_institution_nin,
            update_user_in                 => update_user_in,
            update_user_nin                => update_user_nin,
            update_time_in                 => update_time_in,
            update_time_nin                => update_time_nin,
            update_institution_in          => update_institution_in,
            update_institution_nin         => update_institution_nin,
            flg_status_in                  => flg_status_in,
            flg_status_nin                 => flg_status_nin,
            dt_exam_result_cancel_tstz_in  => dt_exam_result_cancel_tstz_in,
            dt_exam_result_cancel_tstz_nin => dt_exam_result_cancel_tstz_nin,
            id_prof_cancel_in              => id_prof_cancel_in,
            id_prof_cancel_nin             => id_prof_cancel_nin,
            flg_result_origin_in           => flg_result_origin_in,
            flg_result_origin_nin          => flg_result_origin_nin,
            id_result_status_in            => id_result_status_in,
            id_result_status_nin           => id_result_status_nin,
            notes_in                       => notes_in,
            notes_nin                      => notes_nin,
            id_cancel_reason_in            => id_cancel_reason_in,
            id_cancel_reason_nin           => id_cancel_reason_nin,
            notes_cancel_in                => notes_cancel_in,
            notes_cancel_nin               => notes_cancel_nin,
            id_result_notes_in             => id_result_notes_in,
            id_result_notes_nin            => id_result_notes_nin,
            notes_result_in                => notes_result_in,
            notes_result_nin               => notes_result_nin,
            id_prof_read_in                => id_prof_read_in,
            id_prof_read_nin               => id_prof_read_nin,
            dt_prof_read_tstz_in           => dt_prof_read_tstz_in,
            dt_prof_read_tstz_nin          => dt_prof_read_tstz_nin,
            id_exam_result_parent_in       => id_exam_result_parent_in,
            id_exam_result_parent_nin      => id_exam_result_parent_nin,
            result_origin_notes_in         => result_origin_notes_in,
            result_origin_notes_nin        => result_origin_notes_nin,
            id_abnormality_in              => id_abnormality_in,
            id_abnormality_nin             => id_abnormality_nin,
            id_epis_documentation_in       => id_epis_documentation_in,
            id_epis_documentation_nin      => id_epis_documentation_nin,
            flg_relevant_in                => flg_relevant_in,
            flg_relevant_nin               => flg_relevant_nin,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_exam_in                     IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_nin                    IN BOOLEAN := TRUE,
        id_exam_req_det_in             IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_exam_req_det_nin            IN BOOLEAN := TRUE,
        id_professional_in             IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        id_patient_in                  IN exam_result.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        flg_type_in                    IN exam_result.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                   IN BOOLEAN := TRUE,
        id_institution_in              IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_institution_nin             IN BOOLEAN := TRUE,
        id_prof_mov_begin_in           IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_begin_nin          IN BOOLEAN := TRUE,
        id_prof_mov_end_in             IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_prof_mov_end_nin            IN BOOLEAN := TRUE,
        id_episode_in                  IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_episode_write_in            IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        id_episode_write_nin           IN BOOLEAN := TRUE,
        dt_exam_result_tstz_in         IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_exam_result_tstz_nin        IN BOOLEAN := TRUE,
        dt_mov_begin_tstz_in           IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_nin          IN BOOLEAN := TRUE,
        dt_mov_end_tstz_in             IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_nin            IN BOOLEAN := TRUE,
        id_external_doc_in             IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        id_external_doc_nin            IN BOOLEAN := TRUE,
        create_user_in                 IN exam_result.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN exam_result.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN exam_result.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN exam_result.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN exam_result.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN exam_result.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        flg_status_in                  IN exam_result.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        dt_exam_result_cancel_tstz_in  IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        dt_exam_result_cancel_tstz_nin IN BOOLEAN := TRUE,
        id_prof_cancel_in              IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin             IN BOOLEAN := TRUE,
        flg_result_origin_in           IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        flg_result_origin_nin          IN BOOLEAN := TRUE,
        id_result_status_in            IN exam_result.id_result_status%TYPE DEFAULT NULL,
        id_result_status_nin           IN BOOLEAN := TRUE,
        notes_in                       IN exam_result.notes%TYPE DEFAULT NULL,
        notes_nin                      IN BOOLEAN := TRUE,
        id_cancel_reason_in            IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin           IN BOOLEAN := TRUE,
        notes_cancel_in                IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin               IN BOOLEAN := TRUE,
        id_result_notes_in             IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        id_result_notes_nin            IN BOOLEAN := TRUE,
        notes_result_in                IN exam_result.notes_result%TYPE DEFAULT NULL,
        notes_result_nin               IN BOOLEAN := TRUE,
        id_prof_read_in                IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        id_prof_read_nin               IN BOOLEAN := TRUE,
        dt_prof_read_tstz_in           IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        dt_prof_read_tstz_nin          IN BOOLEAN := TRUE,
        id_exam_result_parent_in       IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        id_exam_result_parent_nin      IN BOOLEAN := TRUE,
        result_origin_notes_in         IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        result_origin_notes_nin        IN BOOLEAN := TRUE,
        id_abnormality_in              IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_abnormality_nin             IN BOOLEAN := TRUE,
        id_epis_documentation_in       IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        id_epis_documentation_nin      IN BOOLEAN := TRUE,
        flg_relevant_in                IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        flg_relevant_nin               IN BOOLEAN := TRUE,
        where_in                       VARCHAR2,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
        l_sql                          VARCHAR2(32767);
        l_rows_out                     table_varchar;
        l_id_exam_n                    NUMBER(1);
        l_id_exam_req_det_n            NUMBER(1);
        l_id_professional_n            NUMBER(1);
        l_id_patient_n                 NUMBER(1);
        l_flg_type_n                   NUMBER(1);
        l_id_institution_n             NUMBER(1);
        l_id_prof_mov_begin_n          NUMBER(1);
        l_id_prof_mov_end_n            NUMBER(1);
        l_id_episode_n                 NUMBER(1);
        l_id_episode_write_n           NUMBER(1);
        l_dt_exam_result_tstz_n        NUMBER(1);
        l_dt_mov_begin_tstz_n          NUMBER(1);
        l_dt_mov_end_tstz_n            NUMBER(1);
        l_id_external_doc_n            NUMBER(1);
        l_create_user_n                NUMBER(1);
        l_create_time_n                NUMBER(1);
        l_create_institution_n         NUMBER(1);
        l_update_user_n                NUMBER(1);
        l_update_time_n                NUMBER(1);
        l_update_institution_n         NUMBER(1);
        l_flg_status_n                 NUMBER(1);
        l_dt_exam_result_cancel_tstz_n NUMBER(1);
        l_id_prof_cancel_n             NUMBER(1);
        l_flg_result_origin_n          NUMBER(1);
        l_id_result_status_n           NUMBER(1);
        l_notes_n                      NUMBER(1);
        l_id_cancel_reason_n           NUMBER(1);
        l_notes_cancel_n               NUMBER(1);
        l_id_result_notes_n            NUMBER(1);
        l_notes_result_n               NUMBER(1);
        l_id_prof_read_n               NUMBER(1);
        l_dt_prof_read_tstz_n          NUMBER(1);
        l_id_exam_result_parent_n      NUMBER(1);
        l_result_origin_notes_n        NUMBER(1);
        l_id_abnormality_n             NUMBER(1);
        l_id_epis_documentation_n      NUMBER(1);
        l_flg_relevant_n               NUMBER(1);
        id_exam_result_in              exam_result.id_exam_result%TYPE;
    BEGIN
    
        l_id_exam_n                    := sys.diutil.bool_to_int(id_exam_nin);
        l_id_exam_req_det_n            := sys.diutil.bool_to_int(id_exam_req_det_nin);
        l_id_professional_n            := sys.diutil.bool_to_int(id_professional_nin);
        l_id_patient_n                 := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_type_n                   := sys.diutil.bool_to_int(flg_type_nin);
        l_id_institution_n             := sys.diutil.bool_to_int(id_institution_nin);
        l_id_prof_mov_begin_n          := sys.diutil.bool_to_int(id_prof_mov_begin_nin);
        l_id_prof_mov_end_n            := sys.diutil.bool_to_int(id_prof_mov_end_nin);
        l_id_episode_n                 := sys.diutil.bool_to_int(id_episode_nin);
        l_id_episode_write_n           := sys.diutil.bool_to_int(id_episode_write_nin);
        l_dt_exam_result_tstz_n        := sys.diutil.bool_to_int(dt_exam_result_tstz_nin);
        l_dt_mov_begin_tstz_n          := sys.diutil.bool_to_int(dt_mov_begin_tstz_nin);
        l_dt_mov_end_tstz_n            := sys.diutil.bool_to_int(dt_mov_end_tstz_nin);
        l_id_external_doc_n            := sys.diutil.bool_to_int(id_external_doc_nin);
        l_create_user_n                := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n                := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n         := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n                := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n                := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n         := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_status_n                 := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_exam_result_cancel_tstz_n := sys.diutil.bool_to_int(dt_exam_result_cancel_tstz_nin);
        l_id_prof_cancel_n             := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_flg_result_origin_n          := sys.diutil.bool_to_int(flg_result_origin_nin);
        l_id_result_status_n           := sys.diutil.bool_to_int(id_result_status_nin);
        l_notes_n                      := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n           := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n               := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_result_notes_n            := sys.diutil.bool_to_int(id_result_notes_nin);
        l_notes_result_n               := sys.diutil.bool_to_int(notes_result_nin);
        l_id_prof_read_n               := sys.diutil.bool_to_int(id_prof_read_nin);
        l_dt_prof_read_tstz_n          := sys.diutil.bool_to_int(dt_prof_read_tstz_nin);
        l_id_exam_result_parent_n      := sys.diutil.bool_to_int(id_exam_result_parent_nin);
        l_result_origin_notes_n        := sys.diutil.bool_to_int(result_origin_notes_nin);
        l_id_abnormality_n             := sys.diutil.bool_to_int(id_abnormality_nin);
        l_id_epis_documentation_n      := sys.diutil.bool_to_int(id_epis_documentation_nin);
        l_flg_relevant_n               := sys.diutil.bool_to_int(flg_relevant_nin);
    
        l_sql := 'UPDATE EXAM_RESULT SET ' || ' ID_EXAM = decode (' || l_id_exam_n ||
                 ',0,:id_exam_in, NVL (:id_exam_in, ID_EXAM)) ' || ',' || ' ID_EXAM_REQ_DET = decode (' ||
                 l_id_exam_req_det_n || ',0,:id_exam_req_det_in, NVL (:id_exam_req_det_in, ID_EXAM_REQ_DET)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' FLG_TYPE = decode (' || l_flg_type_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' ID_PROF_MOV_BEGIN = decode (' || l_id_prof_mov_begin_n ||
                 ',0,:id_prof_mov_begin_in, NVL (:id_prof_mov_begin_in, ID_PROF_MOV_BEGIN)) ' || ',' ||
                 ' ID_PROF_MOV_END = decode (' || l_id_prof_mov_end_n ||
                 ',0,:id_prof_mov_end_in, NVL (:id_prof_mov_end_in, ID_PROF_MOV_END)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_EPISODE_WRITE = decode (' || l_id_episode_write_n ||
                 ',0,:id_episode_write_in, NVL (:id_episode_write_in, ID_EPISODE_WRITE)) ' || ',' ||
                 ' DT_EXAM_RESULT_TSTZ = decode (' || l_dt_exam_result_tstz_n ||
                 ',0,:dt_exam_result_tstz_in, NVL (:dt_exam_result_tstz_in, DT_EXAM_RESULT_TSTZ)) ' || ',' ||
                 ' DT_MOV_BEGIN_TSTZ = decode (' || l_dt_mov_begin_tstz_n ||
                 ',0,:dt_mov_begin_tstz_in, NVL (:dt_mov_begin_tstz_in, DT_MOV_BEGIN_TSTZ)) ' || ',' ||
                 ' DT_MOV_END_TSTZ = decode (' || l_dt_mov_end_tstz_n ||
                 ',0,:dt_mov_end_tstz_in, NVL (:dt_mov_end_tstz_in, DT_MOV_END_TSTZ)) ' || ',' ||
                 ' ID_EXTERNAL_DOC = decode (' || l_id_external_doc_n ||
                 ',0,:id_external_doc_in, NVL (:id_external_doc_in, ID_EXTERNAL_DOC)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' DT_EXAM_RESULT_CANCEL_TSTZ = decode (' || l_dt_exam_result_cancel_tstz_n ||
                 ',0,:dt_exam_result_cancel_tstz_in, NVL (:dt_exam_result_cancel_tstz_in, DT_EXAM_RESULT_CANCEL_TSTZ)) ' || ',' ||
                 ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                 ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' ||
                 ' FLG_RESULT_ORIGIN = decode (' || l_flg_result_origin_n ||
                 ',0,:flg_result_origin_in, NVL (:flg_result_origin_in, FLG_RESULT_ORIGIN)) ' || ',' ||
                 ' ID_RESULT_STATUS = decode (' || l_id_result_status_n ||
                 ',0,:id_result_status_in, NVL (:id_result_status_in, ID_RESULT_STATUS)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' ID_RESULT_NOTES = decode (' ||
                 l_id_result_notes_n || ',0,:id_result_notes_in, NVL (:id_result_notes_in, ID_RESULT_NOTES)) ' || ',' ||
                 ' NOTES_RESULT = decode (' || l_notes_result_n ||
                 ',0,:notes_result_in, NVL (:notes_result_in, NOTES_RESULT)) ' || ',' || ' ID_PROF_READ = decode (' ||
                 l_id_prof_read_n || ',0,:id_prof_read_in, NVL (:id_prof_read_in, ID_PROF_READ)) ' || ',' ||
                 ' DT_PROF_READ_TSTZ = decode (' || l_dt_prof_read_tstz_n ||
                 ',0,:dt_prof_read_tstz_in, NVL (:dt_prof_read_tstz_in, DT_PROF_READ_TSTZ)) ' || ',' ||
                 ' ID_EXAM_RESULT_PARENT = decode (' || l_id_exam_result_parent_n ||
                 ',0,:id_exam_result_parent_in, NVL (:id_exam_result_parent_in, ID_EXAM_RESULT_PARENT)) ' || ',' ||
                 ' RESULT_ORIGIN_NOTES = decode (' || l_result_origin_notes_n ||
                 ',0,:result_origin_notes_in, NVL (:result_origin_notes_in, RESULT_ORIGIN_NOTES)) ' || ',' ||
                 ' ID_ABNORMALITY = decode (' || l_id_abnormality_n ||
                 ',0,:id_abnormality_in, NVL (:id_abnormality_in, ID_ABNORMALITY)) ' || ',' ||
                 ' ID_EPIS_DOCUMENTATION = decode (' || l_id_epis_documentation_n ||
                 ',0,:id_epis_documentation_in, NVL (:id_epis_documentation_in, ID_EPIS_DOCUMENTATION)) ' || ',' ||
                 ' FLG_RELEVANT = decode (' || l_flg_relevant_n ||
                 ',0,:flg_relevant_in, NVL (:flg_relevant_in, FLG_RELEVANT)) ' || ' where ' || nvl(where_in, '(1=1)') ||
                 ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_exam_in, id_exam_req_det_in, id_professional_in, id_patient_in, flg_type_in, id_institution_in, id_prof_mov_begin_in, id_prof_mov_end_in, id_episode_in, id_episode_write_in, dt_exam_result_tstz_in, dt_mov_begin_tstz_in, dt_mov_end_tstz_in, id_external_doc_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_status_in, dt_exam_result_cancel_tstz_in, id_prof_cancel_in, flg_result_origin_in, id_result_status_in, notes_in, id_cancel_reason_in, notes_cancel_in, id_result_notes_in, notes_result_in, id_prof_read_in, dt_prof_read_tstz_in, id_exam_result_parent_in, result_origin_notes_in, id_abnormality_in, id_epis_documentation_in, flg_relevant_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EXAM_RESULT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    IF l_name = 'ERES_ABY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ABNORMALITY',
                                                        value_in           => id_abnormality_in);
                    END IF;
                    IF l_name = 'ERES_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'ERES_EPIS_DOCUMENTATION_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DOCUMENTATION',
                                                        value_in           => id_epis_documentation_in);
                    END IF;
                    IF l_name = 'ERES_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'ERES_EPIS_WRITE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_WRITE',
                                                        value_in           => id_episode_write_in);
                    END IF;
                    IF l_name = 'ERES_ERD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_REQ_DET',
                                                        value_in           => id_exam_req_det_in);
                    END IF;
                    IF l_name = 'ERES_ERES_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_RESULT_PARENT',
                                                        value_in           => id_exam_result_parent_in);
                    END IF;
                    IF l_name = 'ERES_EXAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM',
                                                        value_in           => id_exam_in);
                    END IF;
                    IF l_name = 'ERES_EXT_DOC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXTERNAL_DOC',
                                                        value_in           => id_external_doc_in);
                    END IF;
                    IF l_name = 'ERES_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'ERES_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'ERES_PRL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'ERES_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'ERES_PROF_MOV_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_MOV_BEGIN',
                                                        value_in           => id_prof_mov_begin_in);
                    END IF;
                    IF l_name = 'ERES_PROF_READ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_READ',
                                                        value_in           => id_prof_read_in);
                    END IF;
                    IF l_name = 'ERES_PROF_RECEIVE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_MOV_END',
                                                        value_in           => id_prof_mov_end_in);
                    END IF;
                    IF l_name = 'ERES_RSNT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESULT_NOTES',
                                                        value_in           => id_result_notes_in);
                    END IF;
                    IF l_name = 'ERES_RSS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESULT_STATUS',
                                                        value_in           => id_result_status_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_exam_in                     IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_nin                    IN BOOLEAN := TRUE,
        id_exam_req_det_in             IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_exam_req_det_nin            IN BOOLEAN := TRUE,
        id_professional_in             IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        id_patient_in                  IN exam_result.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        flg_type_in                    IN exam_result.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                   IN BOOLEAN := TRUE,
        id_institution_in              IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_institution_nin             IN BOOLEAN := TRUE,
        id_prof_mov_begin_in           IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_begin_nin          IN BOOLEAN := TRUE,
        id_prof_mov_end_in             IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_prof_mov_end_nin            IN BOOLEAN := TRUE,
        id_episode_in                  IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_episode_write_in            IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        id_episode_write_nin           IN BOOLEAN := TRUE,
        dt_exam_result_tstz_in         IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_exam_result_tstz_nin        IN BOOLEAN := TRUE,
        dt_mov_begin_tstz_in           IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_nin          IN BOOLEAN := TRUE,
        dt_mov_end_tstz_in             IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_nin            IN BOOLEAN := TRUE,
        id_external_doc_in             IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        id_external_doc_nin            IN BOOLEAN := TRUE,
        create_user_in                 IN exam_result.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN exam_result.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN exam_result.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN exam_result.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN exam_result.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN exam_result.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        flg_status_in                  IN exam_result.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        dt_exam_result_cancel_tstz_in  IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        dt_exam_result_cancel_tstz_nin IN BOOLEAN := TRUE,
        id_prof_cancel_in              IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin             IN BOOLEAN := TRUE,
        flg_result_origin_in           IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        flg_result_origin_nin          IN BOOLEAN := TRUE,
        id_result_status_in            IN exam_result.id_result_status%TYPE DEFAULT NULL,
        id_result_status_nin           IN BOOLEAN := TRUE,
        notes_in                       IN exam_result.notes%TYPE DEFAULT NULL,
        notes_nin                      IN BOOLEAN := TRUE,
        id_cancel_reason_in            IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin           IN BOOLEAN := TRUE,
        notes_cancel_in                IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin               IN BOOLEAN := TRUE,
        id_result_notes_in             IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        id_result_notes_nin            IN BOOLEAN := TRUE,
        notes_result_in                IN exam_result.notes_result%TYPE DEFAULT NULL,
        notes_result_nin               IN BOOLEAN := TRUE,
        id_prof_read_in                IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        id_prof_read_nin               IN BOOLEAN := TRUE,
        dt_prof_read_tstz_in           IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        dt_prof_read_tstz_nin          IN BOOLEAN := TRUE,
        id_exam_result_parent_in       IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        id_exam_result_parent_nin      IN BOOLEAN := TRUE,
        result_origin_notes_in         IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        result_origin_notes_nin        IN BOOLEAN := TRUE,
        id_abnormality_in              IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_abnormality_nin             IN BOOLEAN := TRUE,
        id_epis_documentation_in       IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        id_epis_documentation_nin      IN BOOLEAN := TRUE,
        flg_relevant_in                IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        flg_relevant_nin               IN BOOLEAN := TRUE,
        where_in                       VARCHAR2,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_exam_in                     => id_exam_in,
            id_exam_nin                    => id_exam_nin,
            id_exam_req_det_in             => id_exam_req_det_in,
            id_exam_req_det_nin            => id_exam_req_det_nin,
            id_professional_in             => id_professional_in,
            id_professional_nin            => id_professional_nin,
            id_patient_in                  => id_patient_in,
            id_patient_nin                 => id_patient_nin,
            flg_type_in                    => flg_type_in,
            flg_type_nin                   => flg_type_nin,
            id_institution_in              => id_institution_in,
            id_institution_nin             => id_institution_nin,
            id_prof_mov_begin_in           => id_prof_mov_begin_in,
            id_prof_mov_begin_nin          => id_prof_mov_begin_nin,
            id_prof_mov_end_in             => id_prof_mov_end_in,
            id_prof_mov_end_nin            => id_prof_mov_end_nin,
            id_episode_in                  => id_episode_in,
            id_episode_nin                 => id_episode_nin,
            id_episode_write_in            => id_episode_write_in,
            id_episode_write_nin           => id_episode_write_nin,
            dt_exam_result_tstz_in         => dt_exam_result_tstz_in,
            dt_exam_result_tstz_nin        => dt_exam_result_tstz_nin,
            dt_mov_begin_tstz_in           => dt_mov_begin_tstz_in,
            dt_mov_begin_tstz_nin          => dt_mov_begin_tstz_nin,
            dt_mov_end_tstz_in             => dt_mov_end_tstz_in,
            dt_mov_end_tstz_nin            => dt_mov_end_tstz_nin,
            id_external_doc_in             => id_external_doc_in,
            id_external_doc_nin            => id_external_doc_nin,
            create_user_in                 => create_user_in,
            create_user_nin                => create_user_nin,
            create_time_in                 => create_time_in,
            create_time_nin                => create_time_nin,
            create_institution_in          => create_institution_in,
            create_institution_nin         => create_institution_nin,
            update_user_in                 => update_user_in,
            update_user_nin                => update_user_nin,
            update_time_in                 => update_time_in,
            update_time_nin                => update_time_nin,
            update_institution_in          => update_institution_in,
            update_institution_nin         => update_institution_nin,
            flg_status_in                  => flg_status_in,
            flg_status_nin                 => flg_status_nin,
            dt_exam_result_cancel_tstz_in  => dt_exam_result_cancel_tstz_in,
            dt_exam_result_cancel_tstz_nin => dt_exam_result_cancel_tstz_nin,
            id_prof_cancel_in              => id_prof_cancel_in,
            id_prof_cancel_nin             => id_prof_cancel_nin,
            flg_result_origin_in           => flg_result_origin_in,
            flg_result_origin_nin          => flg_result_origin_nin,
            id_result_status_in            => id_result_status_in,
            id_result_status_nin           => id_result_status_nin,
            notes_in                       => notes_in,
            notes_nin                      => notes_nin,
            id_cancel_reason_in            => id_cancel_reason_in,
            id_cancel_reason_nin           => id_cancel_reason_nin,
            notes_cancel_in                => notes_cancel_in,
            notes_cancel_nin               => notes_cancel_nin,
            id_result_notes_in             => id_result_notes_in,
            id_result_notes_nin            => id_result_notes_nin,
            notes_result_in                => notes_result_in,
            notes_result_nin               => notes_result_nin,
            id_prof_read_in                => id_prof_read_in,
            id_prof_read_nin               => id_prof_read_nin,
            dt_prof_read_tstz_in           => dt_prof_read_tstz_in,
            dt_prof_read_tstz_nin          => dt_prof_read_tstz_nin,
            id_exam_result_parent_in       => id_exam_result_parent_in,
            id_exam_result_parent_nin      => id_exam_result_parent_nin,
            result_origin_notes_in         => result_origin_notes_in,
            result_origin_notes_nin        => result_origin_notes_nin,
            id_abnormality_in              => id_abnormality_in,
            id_abnormality_nin             => id_abnormality_nin,
            id_epis_documentation_in       => id_epis_documentation_in,
            id_epis_documentation_nin      => id_epis_documentation_nin,
            flg_relevant_in                => flg_relevant_in,
            flg_relevant_nin               => flg_relevant_nin,
            where_in                       => where_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN exam_result%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_exam_result_in             => rec_in.id_exam_result,
            id_exam_in                    => rec_in.id_exam,
            id_exam_req_det_in            => rec_in.id_exam_req_det,
            id_professional_in            => rec_in.id_professional,
            id_patient_in                 => rec_in.id_patient,
            flg_type_in                   => rec_in.flg_type,
            id_institution_in             => rec_in.id_institution,
            id_prof_mov_begin_in          => rec_in.id_prof_mov_begin,
            id_prof_mov_end_in            => rec_in.id_prof_mov_end,
            id_episode_in                 => rec_in.id_episode,
            id_episode_write_in           => rec_in.id_episode_write,
            dt_exam_result_tstz_in        => rec_in.dt_exam_result_tstz,
            dt_mov_begin_tstz_in          => rec_in.dt_mov_begin_tstz,
            dt_mov_end_tstz_in            => rec_in.dt_mov_end_tstz,
            id_external_doc_in            => rec_in.id_external_doc,
            create_user_in                => rec_in.create_user,
            create_time_in                => rec_in.create_time,
            create_institution_in         => rec_in.create_institution,
            update_user_in                => rec_in.update_user,
            update_time_in                => rec_in.update_time,
            update_institution_in         => rec_in.update_institution,
            flg_status_in                 => rec_in.flg_status,
            dt_exam_result_cancel_tstz_in => rec_in.dt_exam_result_cancel_tstz,
            id_prof_cancel_in             => rec_in.id_prof_cancel,
            flg_result_origin_in          => rec_in.flg_result_origin,
            id_result_status_in           => rec_in.id_result_status,
            notes_in                      => rec_in.notes,
            id_cancel_reason_in           => rec_in.id_cancel_reason,
            notes_cancel_in               => rec_in.notes_cancel,
            id_result_notes_in            => rec_in.id_result_notes,
            notes_result_in               => rec_in.notes_result,
            id_prof_read_in               => rec_in.id_prof_read,
            dt_prof_read_tstz_in          => rec_in.dt_prof_read_tstz,
            id_exam_result_parent_in      => rec_in.id_exam_result_parent,
            result_origin_notes_in        => rec_in.result_origin_notes,
            id_abnormality_in             => rec_in.id_abnormality,
            id_epis_documentation_in      => rec_in.id_epis_documentation,
            flg_relevant_in               => rec_in.flg_relevant
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN exam_result%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_exam_result_in             => rec_in.id_exam_result,
            id_exam_in                    => rec_in.id_exam,
            id_exam_req_det_in            => rec_in.id_exam_req_det,
            id_professional_in            => rec_in.id_professional,
            id_patient_in                 => rec_in.id_patient,
            flg_type_in                   => rec_in.flg_type,
            id_institution_in             => rec_in.id_institution,
            id_prof_mov_begin_in          => rec_in.id_prof_mov_begin,
            id_prof_mov_end_in            => rec_in.id_prof_mov_end,
            id_episode_in                 => rec_in.id_episode,
            id_episode_write_in           => rec_in.id_episode_write,
            dt_exam_result_tstz_in        => rec_in.dt_exam_result_tstz,
            dt_mov_begin_tstz_in          => rec_in.dt_mov_begin_tstz,
            dt_mov_end_tstz_in            => rec_in.dt_mov_end_tstz,
            id_external_doc_in            => rec_in.id_external_doc,
            create_user_in                => rec_in.create_user,
            create_time_in                => rec_in.create_time,
            create_institution_in         => rec_in.create_institution,
            update_user_in                => rec_in.update_user,
            update_time_in                => rec_in.update_time,
            update_institution_in         => rec_in.update_institution,
            flg_status_in                 => rec_in.flg_status,
            dt_exam_result_cancel_tstz_in => rec_in.dt_exam_result_cancel_tstz,
            id_prof_cancel_in             => rec_in.id_prof_cancel,
            flg_result_origin_in          => rec_in.flg_result_origin,
            id_result_status_in           => rec_in.id_result_status,
            notes_in                      => rec_in.notes,
            id_cancel_reason_in           => rec_in.id_cancel_reason,
            notes_cancel_in               => rec_in.notes_cancel,
            id_result_notes_in            => rec_in.id_result_notes,
            notes_result_in               => rec_in.notes_result,
            id_prof_read_in               => rec_in.id_prof_read,
            dt_prof_read_tstz_in          => rec_in.dt_prof_read_tstz,
            id_exam_result_parent_in      => rec_in.id_exam_result_parent,
            result_origin_notes_in        => rec_in.result_origin_notes,
            id_abnormality_in             => rec_in.id_abnormality,
            id_epis_documentation_in      => rec_in.id_epis_documentation,
            flg_relevant_in               => rec_in.flg_relevant
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_exam_result_in             IN exam_result.id_exam_result%TYPE,
        id_exam_in                    IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_req_det_in            IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_professional_in            IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in                 IN exam_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                   IN exam_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in             IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_prof_mov_begin_in          IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_end_in            IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_episode_in                 IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_write_in           IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        dt_exam_result_tstz_in        IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_in          IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_in            IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        id_external_doc_in            IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        create_user_in                IN exam_result.create_user%TYPE DEFAULT NULL,
        create_time_in                IN exam_result.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN exam_result.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN exam_result.update_user%TYPE DEFAULT NULL,
        update_time_in                IN exam_result.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN exam_result.update_institution%TYPE DEFAULT NULL,
        flg_status_in                 IN exam_result.flg_status%TYPE DEFAULT NULL,
        dt_exam_result_cancel_tstz_in IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in             IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        flg_result_origin_in          IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        id_result_status_in           IN exam_result.id_result_status%TYPE DEFAULT NULL,
        notes_in                      IN exam_result.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in               IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        id_result_notes_in            IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        notes_result_in               IN exam_result.notes_result%TYPE DEFAULT NULL,
        id_prof_read_in               IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        dt_prof_read_tstz_in          IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        id_exam_result_parent_in      IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        result_origin_notes_in        IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        id_abnormality_in             IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_epis_documentation_in      IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        flg_relevant_in               IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      OUT table_varchar
    ) IS
    BEGIN
        upd(id_exam_result_in             => id_exam_result_in,
            id_exam_in                    => id_exam_in,
            id_exam_req_det_in            => id_exam_req_det_in,
            id_professional_in            => id_professional_in,
            id_patient_in                 => id_patient_in,
            flg_type_in                   => flg_type_in,
            id_institution_in             => id_institution_in,
            id_prof_mov_begin_in          => id_prof_mov_begin_in,
            id_prof_mov_end_in            => id_prof_mov_end_in,
            id_episode_in                 => id_episode_in,
            id_episode_write_in           => id_episode_write_in,
            dt_exam_result_tstz_in        => dt_exam_result_tstz_in,
            dt_mov_begin_tstz_in          => dt_mov_begin_tstz_in,
            dt_mov_end_tstz_in            => dt_mov_end_tstz_in,
            id_external_doc_in            => id_external_doc_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            flg_status_in                 => flg_status_in,
            dt_exam_result_cancel_tstz_in => dt_exam_result_cancel_tstz_in,
            id_prof_cancel_in             => id_prof_cancel_in,
            flg_result_origin_in          => flg_result_origin_in,
            id_result_status_in           => id_result_status_in,
            notes_in                      => notes_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            notes_cancel_in               => notes_cancel_in,
            id_result_notes_in            => id_result_notes_in,
            notes_result_in               => notes_result_in,
            id_prof_read_in               => id_prof_read_in,
            dt_prof_read_tstz_in          => dt_prof_read_tstz_in,
            id_exam_result_parent_in      => id_exam_result_parent_in,
            result_origin_notes_in        => result_origin_notes_in,
            id_abnormality_in             => id_abnormality_in,
            id_epis_documentation_in      => id_epis_documentation_in,
            flg_relevant_in               => flg_relevant_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_exam_result_in             => id_exam_result_in,
                id_exam_in                    => id_exam_in,
                id_exam_req_det_in            => id_exam_req_det_in,
                id_professional_in            => id_professional_in,
                id_patient_in                 => id_patient_in,
                flg_type_in                   => flg_type_in,
                id_institution_in             => id_institution_in,
                id_prof_mov_begin_in          => id_prof_mov_begin_in,
                id_prof_mov_end_in            => id_prof_mov_end_in,
                id_episode_in                 => id_episode_in,
                id_episode_write_in           => id_episode_write_in,
                dt_exam_result_tstz_in        => dt_exam_result_tstz_in,
                dt_mov_begin_tstz_in          => dt_mov_begin_tstz_in,
                dt_mov_end_tstz_in            => dt_mov_end_tstz_in,
                id_external_doc_in            => id_external_doc_in,
                create_user_in                => create_user_in,
                create_time_in                => create_time_in,
                create_institution_in         => create_institution_in,
                update_user_in                => update_user_in,
                update_time_in                => update_time_in,
                update_institution_in         => update_institution_in,
                flg_status_in                 => flg_status_in,
                dt_exam_result_cancel_tstz_in => dt_exam_result_cancel_tstz_in,
                id_prof_cancel_in             => id_prof_cancel_in,
                flg_result_origin_in          => flg_result_origin_in,
                id_result_status_in           => id_result_status_in,
                notes_in                      => notes_in,
                id_cancel_reason_in           => id_cancel_reason_in,
                notes_cancel_in               => notes_cancel_in,
                id_result_notes_in            => id_result_notes_in,
                notes_result_in               => notes_result_in,
                id_prof_read_in               => id_prof_read_in,
                dt_prof_read_tstz_in          => dt_prof_read_tstz_in,
                id_exam_result_parent_in      => id_exam_result_parent_in,
                result_origin_notes_in        => result_origin_notes_in,
                id_abnormality_in             => id_abnormality_in,
                id_epis_documentation_in      => id_epis_documentation_in,
                flg_relevant_in               => flg_relevant_in,
                handle_error_in               => handle_error_in,
                rows_out                      => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_exam_result_in             IN exam_result.id_exam_result%TYPE,
        id_exam_in                    IN exam_result.id_exam%TYPE DEFAULT NULL,
        id_exam_req_det_in            IN exam_result.id_exam_req_det%TYPE DEFAULT NULL,
        id_professional_in            IN exam_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in                 IN exam_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                   IN exam_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in             IN exam_result.id_institution%TYPE DEFAULT NULL,
        id_prof_mov_begin_in          IN exam_result.id_prof_mov_begin%TYPE DEFAULT NULL,
        id_prof_mov_end_in            IN exam_result.id_prof_mov_end%TYPE DEFAULT NULL,
        id_episode_in                 IN exam_result.id_episode%TYPE DEFAULT NULL,
        id_episode_write_in           IN exam_result.id_episode_write%TYPE DEFAULT NULL,
        dt_exam_result_tstz_in        IN exam_result.dt_exam_result_tstz%TYPE DEFAULT NULL,
        dt_mov_begin_tstz_in          IN exam_result.dt_mov_begin_tstz%TYPE DEFAULT NULL,
        dt_mov_end_tstz_in            IN exam_result.dt_mov_end_tstz%TYPE DEFAULT NULL,
        id_external_doc_in            IN exam_result.id_external_doc%TYPE DEFAULT NULL,
        create_user_in                IN exam_result.create_user%TYPE DEFAULT NULL,
        create_time_in                IN exam_result.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN exam_result.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN exam_result.update_user%TYPE DEFAULT NULL,
        update_time_in                IN exam_result.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN exam_result.update_institution%TYPE DEFAULT NULL,
        flg_status_in                 IN exam_result.flg_status%TYPE DEFAULT NULL,
        dt_exam_result_cancel_tstz_in IN exam_result.dt_exam_result_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in             IN exam_result.id_prof_cancel%TYPE DEFAULT NULL,
        flg_result_origin_in          IN exam_result.flg_result_origin%TYPE DEFAULT NULL,
        id_result_status_in           IN exam_result.id_result_status%TYPE DEFAULT NULL,
        notes_in                      IN exam_result.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN exam_result.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in               IN exam_result.notes_cancel%TYPE DEFAULT NULL,
        id_result_notes_in            IN exam_result.id_result_notes%TYPE DEFAULT NULL,
        notes_result_in               IN exam_result.notes_result%TYPE DEFAULT NULL,
        id_prof_read_in               IN exam_result.id_prof_read%TYPE DEFAULT NULL,
        dt_prof_read_tstz_in          IN exam_result.dt_prof_read_tstz%TYPE DEFAULT NULL,
        id_exam_result_parent_in      IN exam_result.id_exam_result_parent%TYPE DEFAULT NULL,
        result_origin_notes_in        IN exam_result.result_origin_notes%TYPE DEFAULT NULL,
        id_abnormality_in             IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        id_epis_documentation_in      IN exam_result.id_epis_documentation%TYPE DEFAULT NULL,
        flg_relevant_in               IN exam_result.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_exam_result_in,
                id_exam_in,
                id_exam_req_det_in,
                id_professional_in,
                id_patient_in,
                flg_type_in,
                id_institution_in,
                id_prof_mov_begin_in,
                id_prof_mov_end_in,
                id_episode_in,
                id_episode_write_in,
                dt_exam_result_tstz_in,
                dt_mov_begin_tstz_in,
                dt_mov_end_tstz_in,
                id_external_doc_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_status_in,
                dt_exam_result_cancel_tstz_in,
                id_prof_cancel_in,
                flg_result_origin_in,
                id_result_status_in,
                notes_in,
                id_cancel_reason_in,
                notes_cancel_in,
                id_result_notes_in,
                notes_result_in,
                id_prof_read_in,
                dt_prof_read_tstz_in,
                id_exam_result_parent_in,
                result_origin_notes_in,
                id_abnormality_in,
                id_epis_documentation_in,
                flg_relevant_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN exam_result_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_exam_result             id_exam_result_cc;
        l_id_exam                    id_exam_cc;
        l_id_exam_req_det            id_exam_req_det_cc;
        l_id_professional            id_professional_cc;
        l_id_patient                 id_patient_cc;
        l_flg_type                   flg_type_cc;
        l_id_institution             id_institution_cc;
        l_id_prof_mov_begin          id_prof_mov_begin_cc;
        l_id_prof_mov_end            id_prof_mov_end_cc;
        l_id_episode                 id_episode_cc;
        l_id_episode_write           id_episode_write_cc;
        l_dt_exam_result_tstz        dt_exam_result_tstz_cc;
        l_dt_mov_begin_tstz          dt_mov_begin_tstz_cc;
        l_dt_mov_end_tstz            dt_mov_end_tstz_cc;
        l_id_external_doc            id_external_doc_cc;
        l_create_user                create_user_cc;
        l_create_time                create_time_cc;
        l_create_institution         create_institution_cc;
        l_update_user                update_user_cc;
        l_update_time                update_time_cc;
        l_update_institution         update_institution_cc;
        l_flg_status                 flg_status_cc;
        l_dt_exam_result_cancel_tstz dt_exam_result_cancel_tstz_cc;
        l_id_prof_cancel             id_prof_cancel_cc;
        l_flg_result_origin          flg_result_origin_cc;
        l_id_result_status           id_result_status_cc;
        l_notes                      notes_cc;
        l_id_cancel_reason           id_cancel_reason_cc;
        l_notes_cancel               notes_cancel_cc;
        l_id_result_notes            id_result_notes_cc;
        l_notes_result               notes_result_cc;
        l_id_prof_read               id_prof_read_cc;
        l_dt_prof_read_tstz          dt_prof_read_tstz_cc;
        l_id_exam_result_parent      id_exam_result_parent_cc;
        l_result_origin_notes        result_origin_notes_cc;
        l_id_abnormality             id_abnormality_cc;
        l_id_epis_documentation      id_epis_documentation_cc;
        l_flg_relevant               flg_relevant_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_exam_result(i) := col_in(i).id_exam_result;
            l_id_exam(i) := col_in(i).id_exam;
            l_id_exam_req_det(i) := col_in(i).id_exam_req_det;
            l_id_professional(i) := col_in(i).id_professional;
            l_id_patient(i) := col_in(i).id_patient;
            l_flg_type(i) := col_in(i).flg_type;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_prof_mov_begin(i) := col_in(i).id_prof_mov_begin;
            l_id_prof_mov_end(i) := col_in(i).id_prof_mov_end;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_episode_write(i) := col_in(i).id_episode_write;
            l_dt_exam_result_tstz(i) := col_in(i).dt_exam_result_tstz;
            l_dt_mov_begin_tstz(i) := col_in(i).dt_mov_begin_tstz;
            l_dt_mov_end_tstz(i) := col_in(i).dt_mov_end_tstz;
            l_id_external_doc(i) := col_in(i).id_external_doc;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_status(i) := col_in(i).flg_status;
            l_dt_exam_result_cancel_tstz(i) := col_in(i).dt_exam_result_cancel_tstz;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_flg_result_origin(i) := col_in(i).flg_result_origin;
            l_id_result_status(i) := col_in(i).id_result_status;
            l_notes(i) := col_in(i).notes;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_result_notes(i) := col_in(i).id_result_notes;
            l_notes_result(i) := col_in(i).notes_result;
            l_id_prof_read(i) := col_in(i).id_prof_read;
            l_dt_prof_read_tstz(i) := col_in(i).dt_prof_read_tstz;
            l_id_exam_result_parent(i) := col_in(i).id_exam_result_parent;
            l_result_origin_notes(i) := col_in(i).result_origin_notes;
            l_id_abnormality(i) := col_in(i).id_abnormality;
            l_id_epis_documentation(i) := col_in(i).id_epis_documentation;
            l_flg_relevant(i) := col_in(i).flg_relevant;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE exam_result
                   SET id_exam                    = nvl(l_id_exam(i), id_exam),
                       id_exam_req_det            = nvl(l_id_exam_req_det(i), id_exam_req_det),
                       id_professional            = nvl(l_id_professional(i), id_professional),
                       id_patient                 = nvl(l_id_patient(i), id_patient),
                       flg_type                   = nvl(l_flg_type(i), flg_type),
                       id_institution             = nvl(l_id_institution(i), id_institution),
                       id_prof_mov_begin          = nvl(l_id_prof_mov_begin(i), id_prof_mov_begin),
                       id_prof_mov_end            = nvl(l_id_prof_mov_end(i), id_prof_mov_end),
                       id_episode                 = nvl(l_id_episode(i), id_episode),
                       id_episode_write           = nvl(l_id_episode_write(i), id_episode_write),
                       dt_exam_result_tstz        = nvl(l_dt_exam_result_tstz(i), dt_exam_result_tstz),
                       dt_mov_begin_tstz          = nvl(l_dt_mov_begin_tstz(i), dt_mov_begin_tstz),
                       dt_mov_end_tstz            = nvl(l_dt_mov_end_tstz(i), dt_mov_end_tstz),
                       id_external_doc            = nvl(l_id_external_doc(i), id_external_doc),
                       create_user                = nvl(l_create_user(i), create_user),
                       create_time                = nvl(l_create_time(i), create_time),
                       create_institution         = nvl(l_create_institution(i), create_institution),
                       update_user                = nvl(l_update_user(i), update_user),
                       update_time                = nvl(l_update_time(i), update_time),
                       update_institution         = nvl(l_update_institution(i), update_institution),
                       flg_status                 = nvl(l_flg_status(i), flg_status),
                       dt_exam_result_cancel_tstz = nvl(l_dt_exam_result_cancel_tstz(i), dt_exam_result_cancel_tstz),
                       id_prof_cancel             = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       flg_result_origin          = nvl(l_flg_result_origin(i), flg_result_origin),
                       id_result_status           = nvl(l_id_result_status(i), id_result_status),
                       notes                      = nvl(l_notes(i), notes),
                       id_cancel_reason           = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       notes_cancel               = nvl(l_notes_cancel(i), notes_cancel),
                       id_result_notes            = nvl(l_id_result_notes(i), id_result_notes),
                       notes_result               = nvl(l_notes_result(i), notes_result),
                       id_prof_read               = nvl(l_id_prof_read(i), id_prof_read),
                       dt_prof_read_tstz          = nvl(l_dt_prof_read_tstz(i), dt_prof_read_tstz),
                       id_exam_result_parent      = nvl(l_id_exam_result_parent(i), id_exam_result_parent),
                       result_origin_notes        = nvl(l_result_origin_notes(i), result_origin_notes),
                       id_abnormality             = nvl(l_id_abnormality(i), id_abnormality),
                       id_epis_documentation      = nvl(l_id_epis_documentation(i), id_epis_documentation),
                       flg_relevant               = nvl(l_flg_relevant(i), flg_relevant)
                 WHERE id_exam_result = l_id_exam_result(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE exam_result
                   SET id_exam                    = l_id_exam(i),
                       id_exam_req_det            = l_id_exam_req_det(i),
                       id_professional            = l_id_professional(i),
                       id_patient                 = l_id_patient(i),
                       flg_type                   = l_flg_type(i),
                       id_institution             = l_id_institution(i),
                       id_prof_mov_begin          = l_id_prof_mov_begin(i),
                       id_prof_mov_end            = l_id_prof_mov_end(i),
                       id_episode                 = l_id_episode(i),
                       id_episode_write           = l_id_episode_write(i),
                       dt_exam_result_tstz        = l_dt_exam_result_tstz(i),
                       dt_mov_begin_tstz          = l_dt_mov_begin_tstz(i),
                       dt_mov_end_tstz            = l_dt_mov_end_tstz(i),
                       id_external_doc            = l_id_external_doc(i),
                       create_user                = l_create_user(i),
                       create_time                = l_create_time(i),
                       create_institution         = l_create_institution(i),
                       update_user                = l_update_user(i),
                       update_time                = l_update_time(i),
                       update_institution         = l_update_institution(i),
                       flg_status                 = l_flg_status(i),
                       dt_exam_result_cancel_tstz = l_dt_exam_result_cancel_tstz(i),
                       id_prof_cancel             = l_id_prof_cancel(i),
                       flg_result_origin          = l_flg_result_origin(i),
                       id_result_status           = l_id_result_status(i),
                       notes                      = l_notes(i),
                       id_cancel_reason           = l_id_cancel_reason(i),
                       notes_cancel               = l_notes_cancel(i),
                       id_result_notes            = l_id_result_notes(i),
                       notes_result               = l_notes_result(i),
                       id_prof_read               = l_id_prof_read(i),
                       dt_prof_read_tstz          = l_dt_prof_read_tstz(i),
                       id_exam_result_parent      = l_id_exam_result_parent(i),
                       result_origin_notes        = l_result_origin_notes(i),
                       id_abnormality             = l_id_abnormality(i),
                       id_epis_documentation      = l_id_epis_documentation(i),
                       flg_relevant               = l_flg_relevant(i)
                 WHERE id_exam_result = l_id_exam_result(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN exam_result_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE EXAM_RESULT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE EXAM_RESULT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE EXAM_RESULT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE EXAM_RESULT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_exam_result_in IN exam_result.id_exam_result%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_exam_result = id_exam_result_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_exam_result_in IN exam_result.id_exam_result%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_exam_result_in => id_exam_result_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_EXAM_RESULT
    PROCEDURE del_id_exam_result
    (
        id_exam_result_in IN exam_result.id_exam_result%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_exam_result = id_exam_result_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_exam_result;

    -- Delete all rows for primary key column ID_EXAM_RESULT
    PROCEDURE del_id_exam_result
    (
        id_exam_result_in IN exam_result.id_exam_result%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_exam_result(id_exam_result_in => id_exam_result_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_id_exam_result;

    PROCEDURE del_eres_aby_fk
    (
        id_abnormality_in IN exam_result.id_abnormality%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_abnormality = del_eres_aby_fk.id_abnormality_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_aby_fk;

    PROCEDURE del_eres_aby_fk
    (
        id_abnormality_in IN exam_result.id_abnormality%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_aby_fk(id_abnormality_in => id_abnormality_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_eres_aby_fk;

    PROCEDURE del_eres_cre_fk
    (
        id_cancel_reason_in IN exam_result.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_cancel_reason = del_eres_cre_fk.id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_cre_fk;

    PROCEDURE del_eres_cre_fk
    (
        id_cancel_reason_in IN exam_result.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_cre_fk(id_cancel_reason_in => id_cancel_reason_in,
                        handle_error_in     => handle_error_in,
                        rows_out            => rows_out);
    END del_eres_cre_fk;

    PROCEDURE del_eres_epis_documentation_fk
    (
        id_epis_documentation_in IN exam_result.id_epis_documentation%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_epis_documentation = del_eres_epis_documentation_fk.id_epis_documentation_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_epis_documentation_fk;

    PROCEDURE del_eres_epis_documentation_fk
    (
        id_epis_documentation_in IN exam_result.id_epis_documentation%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_epis_documentation_fk(id_epis_documentation_in => id_epis_documentation_in,
                                       handle_error_in          => handle_error_in,
                                       rows_out                 => rows_out);
    END del_eres_epis_documentation_fk;

    PROCEDURE del_eres_epis_fk
    (
        id_episode_in   IN exam_result.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_episode = del_eres_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_epis_fk;

    PROCEDURE del_eres_epis_fk
    (
        id_episode_in   IN exam_result.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eres_epis_fk;

    PROCEDURE del_eres_epis_write_fk
    (
        id_episode_write_in IN exam_result.id_episode_write%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_episode_write = del_eres_epis_write_fk.id_episode_write_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_epis_write_fk;

    PROCEDURE del_eres_epis_write_fk
    (
        id_episode_write_in IN exam_result.id_episode_write%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_epis_write_fk(id_episode_write_in => id_episode_write_in,
                               handle_error_in     => handle_error_in,
                               rows_out            => rows_out);
    END del_eres_epis_write_fk;

    PROCEDURE del_eres_erd_fk
    (
        id_exam_req_det_in IN exam_result.id_exam_req_det%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_exam_req_det = del_eres_erd_fk.id_exam_req_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_erd_fk;

    PROCEDURE del_eres_erd_fk
    (
        id_exam_req_det_in IN exam_result.id_exam_req_det%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_erd_fk(id_exam_req_det_in => id_exam_req_det_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_eres_erd_fk;

    PROCEDURE del_eres_eres_fk
    (
        id_exam_result_parent_in IN exam_result.id_exam_result_parent%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_exam_result_parent = del_eres_eres_fk.id_exam_result_parent_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_eres_fk;

    PROCEDURE del_eres_eres_fk
    (
        id_exam_result_parent_in IN exam_result.id_exam_result_parent%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_eres_fk(id_exam_result_parent_in => id_exam_result_parent_in,
                         handle_error_in          => handle_error_in,
                         rows_out                 => rows_out);
    END del_eres_eres_fk;

    PROCEDURE del_eres_exam_fk
    (
        id_exam_in      IN exam_result.id_exam%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_exam = del_eres_exam_fk.id_exam_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_exam_fk;

    PROCEDURE del_eres_exam_fk
    (
        id_exam_in      IN exam_result.id_exam%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_exam_fk(id_exam_in => id_exam_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eres_exam_fk;

    PROCEDURE del_eres_ext_doc_fk
    (
        id_external_doc_in IN exam_result.id_external_doc%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_external_doc = del_eres_ext_doc_fk.id_external_doc_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_ext_doc_fk;

    PROCEDURE del_eres_ext_doc_fk
    (
        id_external_doc_in IN exam_result.id_external_doc%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_ext_doc_fk(id_external_doc_in => id_external_doc_in,
                            handle_error_in    => handle_error_in,
                            rows_out           => rows_out);
    END del_eres_ext_doc_fk;

    PROCEDURE del_eres_inst_fk
    (
        id_institution_in IN exam_result.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_institution = del_eres_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_inst_fk;

    PROCEDURE del_eres_inst_fk
    (
        id_institution_in IN exam_result.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_inst_fk(id_institution_in => id_institution_in,
                         handle_error_in   => handle_error_in,
                         rows_out          => rows_out);
    END del_eres_inst_fk;

    PROCEDURE del_eres_pat_fk
    (
        id_patient_in   IN exam_result.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_patient = del_eres_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_pat_fk;

    PROCEDURE del_eres_pat_fk
    (
        id_patient_in   IN exam_result.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eres_pat_fk;

    PROCEDURE del_eres_prl_fk
    (
        id_prof_cancel_in IN exam_result.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_prof_cancel = del_eres_prl_fk.id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_prl_fk;

    PROCEDURE del_eres_prl_fk
    (
        id_prof_cancel_in IN exam_result.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_prl_fk(id_prof_cancel_in => id_prof_cancel_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_eres_prl_fk;

    PROCEDURE del_eres_prof_fk
    (
        id_professional_in IN exam_result.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_professional = del_eres_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_prof_fk;

    PROCEDURE del_eres_prof_fk
    (
        id_professional_in IN exam_result.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_prof_fk(id_professional_in => id_professional_in,
                         handle_error_in    => handle_error_in,
                         rows_out           => rows_out);
    END del_eres_prof_fk;

    PROCEDURE del_eres_prof_mov_fk
    (
        id_prof_mov_begin_in IN exam_result.id_prof_mov_begin%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_prof_mov_begin = del_eres_prof_mov_fk.id_prof_mov_begin_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_prof_mov_fk;

    PROCEDURE del_eres_prof_mov_fk
    (
        id_prof_mov_begin_in IN exam_result.id_prof_mov_begin%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_prof_mov_fk(id_prof_mov_begin_in => id_prof_mov_begin_in,
                             handle_error_in      => handle_error_in,
                             rows_out             => rows_out);
    END del_eres_prof_mov_fk;

    PROCEDURE del_eres_prof_read_fk
    (
        id_prof_read_in IN exam_result.id_prof_read%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_prof_read = del_eres_prof_read_fk.id_prof_read_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_prof_read_fk;

    PROCEDURE del_eres_prof_read_fk
    (
        id_prof_read_in IN exam_result.id_prof_read%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_prof_read_fk(id_prof_read_in => id_prof_read_in,
                              handle_error_in => handle_error_in,
                              rows_out        => rows_out);
    END del_eres_prof_read_fk;

    PROCEDURE del_eres_prof_receive_fk
    (
        id_prof_mov_end_in IN exam_result.id_prof_mov_end%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_prof_mov_end = del_eres_prof_receive_fk.id_prof_mov_end_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_prof_receive_fk;

    PROCEDURE del_eres_prof_receive_fk
    (
        id_prof_mov_end_in IN exam_result.id_prof_mov_end%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_prof_receive_fk(id_prof_mov_end_in => id_prof_mov_end_in,
                                 handle_error_in    => handle_error_in,
                                 rows_out           => rows_out);
    END del_eres_prof_receive_fk;

    PROCEDURE del_eres_rsnt_fk
    (
        id_result_notes_in IN exam_result.id_result_notes%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_result_notes = del_eres_rsnt_fk.id_result_notes_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_rsnt_fk;

    PROCEDURE del_eres_rsnt_fk
    (
        id_result_notes_in IN exam_result.id_result_notes%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_rsnt_fk(id_result_notes_in => id_result_notes_in,
                         handle_error_in    => handle_error_in,
                         rows_out           => rows_out);
    END del_eres_rsnt_fk;

    PROCEDURE del_eres_rss_fk
    (
        id_result_status_in IN exam_result.id_result_status%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam_result
         WHERE id_result_status = del_eres_rss_fk.id_result_status_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eres_rss_fk;

    PROCEDURE del_eres_rss_fk
    (
        id_result_status_in IN exam_result.id_result_status%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eres_rss_fk(id_result_status_in => id_result_status_in,
                        handle_error_in     => handle_error_in,
                        rows_out            => rows_out);
    END del_eres_rss_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM EXAM_RESULT';
        ELSE
            RETURN 'DELETE FROM EXAM_RESULT WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAM_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAM_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(exam_result_inout IN OUT exam_result%ROWTYPE) IS
    BEGIN
        exam_result_inout.id_exam_result             := NULL;
        exam_result_inout.id_exam                    := NULL;
        exam_result_inout.id_exam_req_det            := NULL;
        exam_result_inout.id_professional            := NULL;
        exam_result_inout.id_patient                 := NULL;
        exam_result_inout.flg_type                   := NULL;
        exam_result_inout.id_institution             := NULL;
        exam_result_inout.id_prof_mov_begin          := NULL;
        exam_result_inout.id_prof_mov_end            := NULL;
        exam_result_inout.id_episode                 := NULL;
        exam_result_inout.id_episode_write           := NULL;
        exam_result_inout.dt_exam_result_tstz        := NULL;
        exam_result_inout.dt_mov_begin_tstz          := NULL;
        exam_result_inout.dt_mov_end_tstz            := NULL;
        exam_result_inout.id_external_doc            := NULL;
        exam_result_inout.create_user                := NULL;
        exam_result_inout.create_time                := NULL;
        exam_result_inout.create_institution         := NULL;
        exam_result_inout.update_user                := NULL;
        exam_result_inout.update_time                := NULL;
        exam_result_inout.update_institution         := NULL;
        exam_result_inout.flg_status                 := 'A';
        exam_result_inout.dt_exam_result_cancel_tstz := NULL;
        exam_result_inout.id_prof_cancel             := NULL;
        exam_result_inout.flg_result_origin          := NULL;
        exam_result_inout.id_result_status           := NULL;
        exam_result_inout.notes                      := NULL;
        exam_result_inout.id_cancel_reason           := NULL;
        exam_result_inout.notes_cancel               := NULL;
        exam_result_inout.id_result_notes            := NULL;
        exam_result_inout.notes_result               := NULL;
        exam_result_inout.id_prof_read               := NULL;
        exam_result_inout.dt_prof_read_tstz          := NULL;
        exam_result_inout.id_exam_result_parent      := NULL;
        exam_result_inout.result_origin_notes        := NULL;
        exam_result_inout.id_abnormality             := NULL;
        exam_result_inout.id_epis_documentation      := NULL;
        exam_result_inout.flg_relevant               := NULL;
    END initrec;

    FUNCTION initrec RETURN exam_result%ROWTYPE IS
        l_exam_result exam_result%ROWTYPE;
    BEGIN
        l_exam_result.flg_status := 'A';
        RETURN l_exam_result;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN exam_result_tc IS
        data exam_result_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM exam_result
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN exam_result_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data exam_result_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_exam_result;
/
