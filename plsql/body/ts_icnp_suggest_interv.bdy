/*-- Last Change Revision: $Rev: 2028225 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:32 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_icnp_suggest_interv
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: March 6, 2012 14:47:46
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_icnp_sug_interv_in  IN icnp_suggest_interv.id_icnp_sug_interv%TYPE,
        id_req_in              IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_task_in             IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_type_in        IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_composition_in      IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_patient_in          IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        id_icnp_epis_interv_in IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        create_user_in         IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_time_in         IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_time_in         IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        flg_status_rel_in      IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT 'A',
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO icnp_suggest_interv
            (id_icnp_sug_interv,
             id_req,
             id_task,
             id_task_type,
             id_composition,
             id_patient,
             id_episode,
             flg_status,
             id_prof_last_update,
             dt_last_update,
             id_icnp_epis_interv,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_status_rel)
        VALUES
            (id_icnp_sug_interv_in,
             id_req_in,
             id_task_in,
             id_task_type_in,
             id_composition_in,
             id_patient_in,
             id_episode_in,
             flg_status_in,
             id_prof_last_update_in,
             dt_last_update_in,
             id_icnp_epis_interv_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_status_rel_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'ISV_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "ISV_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ICNP_SUGGEST_INTERV',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TASK_TYPE',
                                                        value_in           => id_task_type_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REQ',
                                                        value_in           => id_req_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TASK',
                                                        value_in           => id_task_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION',
                                                        value_in           => id_composition_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ICNP_SUGGEST_INTERV');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    IF l_name = 'ISV_EPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'ISV_IEN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ICNP_EPIS_INTERV',
                                                        value_in           => id_icnp_epis_interv_in);
                    END IF;
                    IF l_name = 'ISV_ITN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TASK',
                                                        value_in           => id_task_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TASK_TYPE',
                                                        value_in           => id_task_type_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COMPOSITION',
                                                        value_in           => id_composition_in);
                    END IF;
                    IF l_name = 'ISV_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'ISV_PL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_LAST_UPDATE',
                                                        value_in           => id_prof_last_update_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_icnp_sug_interv_in  IN icnp_suggest_interv.id_icnp_sug_interv%TYPE,
        id_req_in              IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_task_in             IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_type_in        IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_composition_in      IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_patient_in          IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        id_icnp_epis_interv_in IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        create_user_in         IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_time_in         IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_time_in         IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        flg_status_rel_in      IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT 'A',
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_icnp_sug_interv_in  => id_icnp_sug_interv_in,
            id_req_in              => id_req_in,
            id_task_in             => id_task_in,
            id_task_type_in        => id_task_type_in,
            id_composition_in      => id_composition_in,
            id_patient_in          => id_patient_in,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            id_icnp_epis_interv_in => id_icnp_epis_interv_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_status_rel_in      => flg_status_rel_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN icnp_suggest_interv%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec icnp_suggest_interv%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_icnp_sug_interv := next_key(sequence_in);
        END IF;
        ins(id_icnp_sug_interv_in  => l_rec.id_icnp_sug_interv,
            id_req_in              => l_rec.id_req,
            id_task_in             => l_rec.id_task,
            id_task_type_in        => l_rec.id_task_type,
            id_composition_in      => l_rec.id_composition,
            id_patient_in          => l_rec.id_patient,
            id_episode_in          => l_rec.id_episode,
            flg_status_in          => l_rec.flg_status,
            id_prof_last_update_in => l_rec.id_prof_last_update,
            dt_last_update_in      => l_rec.dt_last_update,
            id_icnp_epis_interv_in => l_rec.id_icnp_epis_interv,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            flg_status_rel_in      => l_rec.flg_status_rel,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN icnp_suggest_interv%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN icnp_suggest_interv.id_icnp_sug_interv%TYPE
    
     IS
        retval icnp_suggest_interv.id_icnp_sug_interv%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_icnp_suggest_interv.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_ICNP_SUGGEST_INTERV'));
    END next_key;

    PROCEDURE ins
    (
        id_req_in              IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_task_in             IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_type_in        IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_composition_in      IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_patient_in          IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        id_icnp_epis_interv_in IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        create_user_in         IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_time_in         IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_time_in         IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        flg_status_rel_in      IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT 'A',
        id_icnp_sug_interv_out IN OUT icnp_suggest_interv.id_icnp_sug_interv%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky icnp_suggest_interv.id_icnp_sug_interv%TYPE := next_key;
    BEGIN
        ins(id_icnp_sug_interv_in  => l_pky,
            id_req_in              => id_req_in,
            id_task_in             => id_task_in,
            id_task_type_in        => id_task_type_in,
            id_composition_in      => id_composition_in,
            id_patient_in          => id_patient_in,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            id_icnp_epis_interv_in => id_icnp_epis_interv_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_status_rel_in      => flg_status_rel_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_icnp_sug_interv_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_req_in              IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_task_in             IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_type_in        IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_composition_in      IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_patient_in          IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        id_icnp_epis_interv_in IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        create_user_in         IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_time_in         IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_time_in         IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        flg_status_rel_in      IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT 'A',
        id_icnp_sug_interv_out IN OUT icnp_suggest_interv.id_icnp_sug_interv%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_req_in              => id_req_in,
            id_task_in             => id_task_in,
            id_task_type_in        => id_task_type_in,
            id_composition_in      => id_composition_in,
            id_patient_in          => id_patient_in,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            id_icnp_epis_interv_in => id_icnp_epis_interv_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_status_rel_in      => flg_status_rel_in,
            id_icnp_sug_interv_out => id_icnp_sug_interv_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    FUNCTION ins
    (
        id_req_in              IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_task_in             IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_type_in        IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_composition_in      IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_patient_in          IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        id_icnp_epis_interv_in IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        create_user_in         IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_time_in         IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_time_in         IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        flg_status_rel_in      IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT 'A',
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) RETURN icnp_suggest_interv.id_icnp_sug_interv%TYPE IS
        l_pky icnp_suggest_interv.id_icnp_sug_interv%TYPE := next_key;
    BEGIN
        ins(id_icnp_sug_interv_in  => l_pky,
            id_req_in              => id_req_in,
            id_task_in             => id_task_in,
            id_task_type_in        => id_task_type_in,
            id_composition_in      => id_composition_in,
            id_patient_in          => id_patient_in,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            id_icnp_epis_interv_in => id_icnp_epis_interv_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_status_rel_in      => flg_status_rel_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_req_in              IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_task_in             IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_type_in        IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_composition_in      IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_patient_in          IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        id_icnp_epis_interv_in IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        create_user_in         IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_time_in         IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_time_in         IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        flg_status_rel_in      IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT 'A',
        handle_error_in        IN BOOLEAN := TRUE
    ) RETURN icnp_suggest_interv.id_icnp_sug_interv%TYPE IS
        l_pky    icnp_suggest_interv.id_icnp_sug_interv%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_icnp_sug_interv_in  => l_pky,
            id_req_in              => id_req_in,
            id_task_in             => id_task_in,
            id_task_type_in        => id_task_type_in,
            id_composition_in      => id_composition_in,
            id_patient_in          => id_patient_in,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            id_icnp_epis_interv_in => id_icnp_epis_interv_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_status_rel_in      => flg_status_rel_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_req_in              IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_task_in             IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_type_in        IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_composition_in      IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_patient_in          IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        id_icnp_epis_interv_in IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        create_user_in         IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_time_in         IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_time_in         IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        flg_status_rel_in      IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT 'A',
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky icnp_suggest_interv.id_icnp_sug_interv%TYPE := next_key;
    BEGIN
        ins(id_icnp_sug_interv_in  => l_pky,
            id_req_in              => id_req_in,
            id_task_in             => id_task_in,
            id_task_type_in        => id_task_type_in,
            id_composition_in      => id_composition_in,
            id_patient_in          => id_patient_in,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            id_icnp_epis_interv_in => id_icnp_epis_interv_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_status_rel_in      => flg_status_rel_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_req_in              IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_task_in             IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_type_in        IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_composition_in      IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_patient_in          IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        id_icnp_epis_interv_in IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        create_user_in         IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_time_in         IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_time_in         IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        flg_status_rel_in      IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT 'A',
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        l_pky    icnp_suggest_interv.id_icnp_sug_interv%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_icnp_sug_interv_in  => l_pky,
            id_req_in              => id_req_in,
            id_task_in             => id_task_in,
            id_task_type_in        => id_task_type_in,
            id_composition_in      => id_composition_in,
            id_patient_in          => id_patient_in,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            id_icnp_epis_interv_in => id_icnp_epis_interv_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_status_rel_in      => flg_status_rel_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN icnp_suggest_interv_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO icnp_suggest_interv
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ICNP_SUG_INTERV _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_icnp_sug_interv,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TASK _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_task,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TASK_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_task_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_composition,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ICNP_EPIS_INTERV _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_icnp_epis_interv,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS_REL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status_rel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'ICNP_SUGGEST_INTERV',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN icnp_suggest_interv_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_icnp_sug_interv_in   IN icnp_suggest_interv.id_icnp_sug_interv%TYPE,
        id_req_in               IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_req_nin              IN BOOLEAN := TRUE,
        id_task_in              IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_nin             IN BOOLEAN := TRUE,
        id_task_type_in         IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_task_type_nin        IN BOOLEAN := TRUE,
        id_composition_in       IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_composition_nin      IN BOOLEAN := TRUE,
        id_patient_in           IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_episode_in           IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        flg_status_in           IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        id_icnp_epis_interv_in  IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        id_icnp_epis_interv_nin IN BOOLEAN := TRUE,
        create_user_in          IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_status_rel_in       IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT NULL,
        flg_status_rel_nin      IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_req_n              NUMBER(1);
        l_id_task_n             NUMBER(1);
        l_id_task_type_n        NUMBER(1);
        l_id_composition_n      NUMBER(1);
        l_id_patient_n          NUMBER(1);
        l_id_episode_n          NUMBER(1);
        l_flg_status_n          NUMBER(1);
        l_id_prof_last_update_n NUMBER(1);
        l_dt_last_update_n      NUMBER(1);
        l_id_icnp_epis_interv_n NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_flg_status_rel_n      NUMBER(1);
    BEGIN
    
        l_id_req_n              := sys.diutil.bool_to_int(id_req_nin);
        l_id_task_n             := sys.diutil.bool_to_int(id_task_nin);
        l_id_task_type_n        := sys.diutil.bool_to_int(id_task_type_nin);
        l_id_composition_n      := sys.diutil.bool_to_int(id_composition_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_last_update_n := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n      := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_icnp_epis_interv_n := sys.diutil.bool_to_int(id_icnp_epis_interv_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_status_rel_n      := sys.diutil.bool_to_int(flg_status_rel_nin);
    
        UPDATE icnp_suggest_interv
           SET id_req              = decode(l_id_req_n, 0, id_req_in, nvl(id_req_in, id_req)),
               id_task             = decode(l_id_task_n, 0, id_task_in, nvl(id_task_in, id_task)),
               id_task_type        = decode(l_id_task_type_n, 0, id_task_type_in, nvl(id_task_type_in, id_task_type)),
               id_composition      = decode(l_id_composition_n,
                                            0,
                                            id_composition_in,
                                            nvl(id_composition_in, id_composition)),
               id_patient          = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_episode          = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               flg_status          = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_last_update = decode(l_id_prof_last_update_n,
                                            0,
                                            id_prof_last_update_in,
                                            nvl(id_prof_last_update_in, id_prof_last_update)),
               dt_last_update      = decode(l_dt_last_update_n,
                                            0,
                                            dt_last_update_in,
                                            nvl(dt_last_update_in, dt_last_update)),
               id_icnp_epis_interv = decode(l_id_icnp_epis_interv_n,
                                            0,
                                            id_icnp_epis_interv_in,
                                            nvl(id_icnp_epis_interv_in, id_icnp_epis_interv)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution)),
               flg_status_rel      = decode(l_flg_status_rel_n,
                                            0,
                                            flg_status_rel_in,
                                            nvl(flg_status_rel_in, flg_status_rel))
         WHERE id_icnp_sug_interv = id_icnp_sug_interv_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'ISV_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "ISV_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ICNP_SUGGEST_INTERV',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TASK_TYPE',
                                                        value_in           => id_task_type_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REQ',
                                                        value_in           => id_req_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TASK',
                                                        value_in           => id_task_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION',
                                                        value_in           => id_composition_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ICNP_SUGGEST_INTERV');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    IF l_name = 'ISV_EPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'ISV_IEN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ICNP_EPIS_INTERV',
                                                        value_in           => id_icnp_epis_interv_in);
                    END IF;
                    IF l_name = 'ISV_ITN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TASK',
                                                        value_in           => id_task_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TASK_TYPE',
                                                        value_in           => id_task_type_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COMPOSITION',
                                                        value_in           => id_composition_in);
                    END IF;
                    IF l_name = 'ISV_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'ISV_PL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_LAST_UPDATE',
                                                        value_in           => id_prof_last_update_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_icnp_sug_interv_in   IN icnp_suggest_interv.id_icnp_sug_interv%TYPE,
        id_req_in               IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_req_nin              IN BOOLEAN := TRUE,
        id_task_in              IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_nin             IN BOOLEAN := TRUE,
        id_task_type_in         IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_task_type_nin        IN BOOLEAN := TRUE,
        id_composition_in       IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_composition_nin      IN BOOLEAN := TRUE,
        id_patient_in           IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_episode_in           IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        flg_status_in           IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        id_icnp_epis_interv_in  IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        id_icnp_epis_interv_nin IN BOOLEAN := TRUE,
        create_user_in          IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_status_rel_in       IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT NULL,
        flg_status_rel_nin      IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_icnp_sug_interv_in   => id_icnp_sug_interv_in,
            id_req_in               => id_req_in,
            id_req_nin              => id_req_nin,
            id_task_in              => id_task_in,
            id_task_nin             => id_task_nin,
            id_task_type_in         => id_task_type_in,
            id_task_type_nin        => id_task_type_nin,
            id_composition_in       => id_composition_in,
            id_composition_nin      => id_composition_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            id_prof_last_update_in  => id_prof_last_update_in,
            id_prof_last_update_nin => id_prof_last_update_nin,
            dt_last_update_in       => dt_last_update_in,
            dt_last_update_nin      => dt_last_update_nin,
            id_icnp_epis_interv_in  => id_icnp_epis_interv_in,
            id_icnp_epis_interv_nin => id_icnp_epis_interv_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            flg_status_rel_in       => flg_status_rel_in,
            flg_status_rel_nin      => flg_status_rel_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_req_in               IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_req_nin              IN BOOLEAN := TRUE,
        id_task_in              IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_nin             IN BOOLEAN := TRUE,
        id_task_type_in         IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_task_type_nin        IN BOOLEAN := TRUE,
        id_composition_in       IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_composition_nin      IN BOOLEAN := TRUE,
        id_patient_in           IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_episode_in           IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        flg_status_in           IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        id_icnp_epis_interv_in  IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        id_icnp_epis_interv_nin IN BOOLEAN := TRUE,
        create_user_in          IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_status_rel_in       IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT NULL,
        flg_status_rel_nin      IN BOOLEAN := TRUE,
        where_in                VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_req_n              NUMBER(1);
        l_id_task_n             NUMBER(1);
        l_id_task_type_n        NUMBER(1);
        l_id_composition_n      NUMBER(1);
        l_id_patient_n          NUMBER(1);
        l_id_episode_n          NUMBER(1);
        l_flg_status_n          NUMBER(1);
        l_id_prof_last_update_n NUMBER(1);
        l_dt_last_update_n      NUMBER(1);
        l_id_icnp_epis_interv_n NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_flg_status_rel_n      NUMBER(1);
        id_icnp_sug_interv_in   icnp_suggest_interv.id_icnp_sug_interv%TYPE;
    BEGIN
    
        l_id_req_n              := sys.diutil.bool_to_int(id_req_nin);
        l_id_task_n             := sys.diutil.bool_to_int(id_task_nin);
        l_id_task_type_n        := sys.diutil.bool_to_int(id_task_type_nin);
        l_id_composition_n      := sys.diutil.bool_to_int(id_composition_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_last_update_n := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n      := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_icnp_epis_interv_n := sys.diutil.bool_to_int(id_icnp_epis_interv_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_status_rel_n      := sys.diutil.bool_to_int(flg_status_rel_nin);
    
        l_sql := 'UPDATE ICNP_SUGGEST_INTERV SET ' || ' ID_REQ = decode (' || l_id_req_n ||
                 ',0,:id_req_in, NVL (:id_req_in, ID_REQ)) ' || ',' || ' ID_TASK = decode (' || l_id_task_n ||
                 ',0,:id_task_in, NVL (:id_task_in, ID_TASK)) ' || ',' || ' ID_TASK_TYPE = decode (' ||
                 l_id_task_type_n || ',0,:id_task_type_in, NVL (:id_task_type_in, ID_TASK_TYPE)) ' || ',' ||
                 ' ID_COMPOSITION = decode (' || l_id_composition_n ||
                 ',0,:id_composition_in, NVL (:id_composition_in, ID_COMPOSITION)) ' || ',' || ' ID_PATIENT = decode (' ||
                 l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                 ',0,:id_prof_last_update_in, NVL (:id_prof_last_update_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                 ' DT_LAST_UPDATE = decode (' || l_dt_last_update_n ||
                 ',0,:dt_last_update_in, NVL (:dt_last_update_in, DT_LAST_UPDATE)) ' || ',' ||
                 ' ID_ICNP_EPIS_INTERV = decode (' || l_id_icnp_epis_interv_n ||
                 ',0,:id_icnp_epis_interv_in, NVL (:id_icnp_epis_interv_in, ID_ICNP_EPIS_INTERV)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' FLG_STATUS_REL = decode (' || l_flg_status_rel_n ||
                 ',0,:flg_status_rel_in, NVL (:flg_status_rel_in, FLG_STATUS_REL)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_req_in, id_task_in, id_task_type_in, id_composition_in, id_patient_in, id_episode_in, flg_status_in, id_prof_last_update_in, dt_last_update_in, id_icnp_epis_interv_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_status_rel_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'ISV_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "ISV_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ICNP_SUGGEST_INTERV',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TASK_TYPE',
                                                        value_in           => id_task_type_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REQ',
                                                        value_in           => id_req_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TASK',
                                                        value_in           => id_task_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION',
                                                        value_in           => id_composition_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ICNP_SUGGEST_INTERV');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    IF l_name = 'ISV_EPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'ISV_IEN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ICNP_EPIS_INTERV',
                                                        value_in           => id_icnp_epis_interv_in);
                    END IF;
                    IF l_name = 'ISV_ITN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TASK',
                                                        value_in           => id_task_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TASK_TYPE',
                                                        value_in           => id_task_type_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COMPOSITION',
                                                        value_in           => id_composition_in);
                    END IF;
                    IF l_name = 'ISV_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'ISV_PL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_LAST_UPDATE',
                                                        value_in           => id_prof_last_update_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_req_in               IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_req_nin              IN BOOLEAN := TRUE,
        id_task_in              IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_nin             IN BOOLEAN := TRUE,
        id_task_type_in         IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_task_type_nin        IN BOOLEAN := TRUE,
        id_composition_in       IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_composition_nin      IN BOOLEAN := TRUE,
        id_patient_in           IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_episode_in           IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        flg_status_in           IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        id_icnp_epis_interv_in  IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        id_icnp_epis_interv_nin IN BOOLEAN := TRUE,
        create_user_in          IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_status_rel_in       IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT NULL,
        flg_status_rel_nin      IN BOOLEAN := TRUE,
        where_in                VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_req_in               => id_req_in,
            id_req_nin              => id_req_nin,
            id_task_in              => id_task_in,
            id_task_nin             => id_task_nin,
            id_task_type_in         => id_task_type_in,
            id_task_type_nin        => id_task_type_nin,
            id_composition_in       => id_composition_in,
            id_composition_nin      => id_composition_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            id_prof_last_update_in  => id_prof_last_update_in,
            id_prof_last_update_nin => id_prof_last_update_nin,
            dt_last_update_in       => dt_last_update_in,
            dt_last_update_nin      => dt_last_update_nin,
            id_icnp_epis_interv_in  => id_icnp_epis_interv_in,
            id_icnp_epis_interv_nin => id_icnp_epis_interv_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            flg_status_rel_in       => flg_status_rel_in,
            flg_status_rel_nin      => flg_status_rel_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN icnp_suggest_interv%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_icnp_sug_interv_in  => rec_in.id_icnp_sug_interv,
            id_req_in              => rec_in.id_req,
            id_task_in             => rec_in.id_task,
            id_task_type_in        => rec_in.id_task_type,
            id_composition_in      => rec_in.id_composition,
            id_patient_in          => rec_in.id_patient,
            id_episode_in          => rec_in.id_episode,
            flg_status_in          => rec_in.flg_status,
            id_prof_last_update_in => rec_in.id_prof_last_update,
            dt_last_update_in      => rec_in.dt_last_update,
            id_icnp_epis_interv_in => rec_in.id_icnp_epis_interv,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            flg_status_rel_in      => rec_in.flg_status_rel
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN icnp_suggest_interv%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_icnp_sug_interv_in  => rec_in.id_icnp_sug_interv,
            id_req_in              => rec_in.id_req,
            id_task_in             => rec_in.id_task,
            id_task_type_in        => rec_in.id_task_type,
            id_composition_in      => rec_in.id_composition,
            id_patient_in          => rec_in.id_patient,
            id_episode_in          => rec_in.id_episode,
            flg_status_in          => rec_in.flg_status,
            id_prof_last_update_in => rec_in.id_prof_last_update,
            dt_last_update_in      => rec_in.dt_last_update,
            id_icnp_epis_interv_in => rec_in.id_icnp_epis_interv,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            flg_status_rel_in      => rec_in.flg_status_rel
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_icnp_sug_interv_in  IN icnp_suggest_interv.id_icnp_sug_interv%TYPE,
        id_req_in              IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_task_in             IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_type_in        IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_composition_in      IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_patient_in          IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        id_icnp_epis_interv_in IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        create_user_in         IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_time_in         IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_time_in         IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        flg_status_rel_in      IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        upd(id_icnp_sug_interv_in  => id_icnp_sug_interv_in,
            id_req_in              => id_req_in,
            id_task_in             => id_task_in,
            id_task_type_in        => id_task_type_in,
            id_composition_in      => id_composition_in,
            id_patient_in          => id_patient_in,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            id_icnp_epis_interv_in => id_icnp_epis_interv_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_status_rel_in      => flg_status_rel_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_icnp_sug_interv_in  => id_icnp_sug_interv_in,
                id_req_in              => id_req_in,
                id_task_in             => id_task_in,
                id_task_type_in        => id_task_type_in,
                id_composition_in      => id_composition_in,
                id_patient_in          => id_patient_in,
                id_episode_in          => id_episode_in,
                flg_status_in          => flg_status_in,
                id_prof_last_update_in => id_prof_last_update_in,
                dt_last_update_in      => dt_last_update_in,
                id_icnp_epis_interv_in => id_icnp_epis_interv_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                flg_status_rel_in      => flg_status_rel_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_icnp_sug_interv_in  IN icnp_suggest_interv.id_icnp_sug_interv%TYPE,
        id_req_in              IN icnp_suggest_interv.id_req%TYPE DEFAULT NULL,
        id_task_in             IN icnp_suggest_interv.id_task%TYPE DEFAULT NULL,
        id_task_type_in        IN icnp_suggest_interv.id_task_type%TYPE DEFAULT NULL,
        id_composition_in      IN icnp_suggest_interv.id_composition%TYPE DEFAULT NULL,
        id_patient_in          IN icnp_suggest_interv.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN icnp_suggest_interv.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN icnp_suggest_interv.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN icnp_suggest_interv.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN icnp_suggest_interv.dt_last_update%TYPE DEFAULT NULL,
        id_icnp_epis_interv_in IN icnp_suggest_interv.id_icnp_epis_interv%TYPE DEFAULT NULL,
        create_user_in         IN icnp_suggest_interv.create_user%TYPE DEFAULT NULL,
        create_time_in         IN icnp_suggest_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN icnp_suggest_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN icnp_suggest_interv.update_user%TYPE DEFAULT NULL,
        update_time_in         IN icnp_suggest_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN icnp_suggest_interv.update_institution%TYPE DEFAULT NULL,
        flg_status_rel_in      IN icnp_suggest_interv.flg_status_rel%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_icnp_sug_interv_in,
                id_req_in,
                id_task_in,
                id_task_type_in,
                id_composition_in,
                id_patient_in,
                id_episode_in,
                flg_status_in,
                id_prof_last_update_in,
                dt_last_update_in,
                id_icnp_epis_interv_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_status_rel_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN icnp_suggest_interv_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_icnp_sug_interv  id_icnp_sug_interv_cc;
        l_id_req              id_req_cc;
        l_id_task             id_task_cc;
        l_id_task_type        id_task_type_cc;
        l_id_composition      id_composition_cc;
        l_id_patient          id_patient_cc;
        l_id_episode          id_episode_cc;
        l_flg_status          flg_status_cc;
        l_id_prof_last_update id_prof_last_update_cc;
        l_dt_last_update      dt_last_update_cc;
        l_id_icnp_epis_interv id_icnp_epis_interv_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
        l_flg_status_rel      flg_status_rel_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_icnp_sug_interv(i) := col_in(i).id_icnp_sug_interv;
            l_id_req(i) := col_in(i).id_req;
            l_id_task(i) := col_in(i).id_task;
            l_id_task_type(i) := col_in(i).id_task_type;
            l_id_composition(i) := col_in(i).id_composition;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_episode(i) := col_in(i).id_episode;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_dt_last_update(i) := col_in(i).dt_last_update;
            l_id_icnp_epis_interv(i) := col_in(i).id_icnp_epis_interv;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_status_rel(i) := col_in(i).flg_status_rel;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE icnp_suggest_interv
                   SET id_req              = nvl(l_id_req(i), id_req),
                       id_task             = nvl(l_id_task(i), id_task),
                       id_task_type        = nvl(l_id_task_type(i), id_task_type),
                       id_composition      = nvl(l_id_composition(i), id_composition),
                       id_patient          = nvl(l_id_patient(i), id_patient),
                       id_episode          = nvl(l_id_episode(i), id_episode),
                       flg_status          = nvl(l_flg_status(i), flg_status),
                       id_prof_last_update = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       dt_last_update      = nvl(l_dt_last_update(i), dt_last_update),
                       id_icnp_epis_interv = nvl(l_id_icnp_epis_interv(i), id_icnp_epis_interv),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution),
                       flg_status_rel      = nvl(l_flg_status_rel(i), flg_status_rel)
                 WHERE id_icnp_sug_interv = l_id_icnp_sug_interv(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE icnp_suggest_interv
                   SET id_req              = l_id_req(i),
                       id_task             = l_id_task(i),
                       id_task_type        = l_id_task_type(i),
                       id_composition      = l_id_composition(i),
                       id_patient          = l_id_patient(i),
                       id_episode          = l_id_episode(i),
                       flg_status          = l_flg_status(i),
                       id_prof_last_update = l_id_prof_last_update(i),
                       dt_last_update      = l_dt_last_update(i),
                       id_icnp_epis_interv = l_id_icnp_epis_interv(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i),
                       flg_status_rel      = l_flg_status_rel(i)
                 WHERE id_icnp_sug_interv = l_id_icnp_sug_interv(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN icnp_suggest_interv_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE ICNP_SUGGEST_INTERV
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE ICNP_SUGGEST_INTERV
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE ICNP_SUGGEST_INTERV set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE ICNP_SUGGEST_INTERV set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_icnp_sug_interv_in IN icnp_suggest_interv.id_icnp_sug_interv%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_suggest_interv
         WHERE id_icnp_sug_interv = id_icnp_sug_interv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_icnp_sug_interv_in IN icnp_suggest_interv.id_icnp_sug_interv%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_icnp_sug_interv_in => id_icnp_sug_interv_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_ICNP_SUG_INTERV
    PROCEDURE del_id_icnp_sug_interv
    (
        id_icnp_sug_interv_in IN icnp_suggest_interv.id_icnp_sug_interv%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_suggest_interv
         WHERE id_icnp_sug_interv = id_icnp_sug_interv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_icnp_sug_interv;

    -- Delete all rows for primary key column ID_ICNP_SUG_INTERV
    PROCEDURE del_id_icnp_sug_interv
    (
        id_icnp_sug_interv_in IN icnp_suggest_interv.id_icnp_sug_interv%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_icnp_sug_interv(id_icnp_sug_interv_in => id_icnp_sug_interv_in,
                               handle_error_in       => handle_error_in,
                               rows_out              => rows_out);
    END del_id_icnp_sug_interv;

    -- Delete for unique value of ISV_UK
    PROCEDURE del_isv_uk
    (
        id_task_type_in   IN icnp_suggest_interv.id_task_type%TYPE,
        id_req_in         IN icnp_suggest_interv.id_req%TYPE,
        id_task_in        IN icnp_suggest_interv.id_task%TYPE,
        id_composition_in IN icnp_suggest_interv.id_composition%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_suggest_interv
         WHERE id_task_type = id_task_type_in
           AND id_req = id_req_in
           AND id_task = id_task_in
           AND id_composition = id_composition_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_isv_uk;

    -- Delete for unique value of ISV_UK
    PROCEDURE del_isv_uk
    (
        id_task_type_in   IN icnp_suggest_interv.id_task_type%TYPE,
        id_req_in         IN icnp_suggest_interv.id_req%TYPE,
        id_task_in        IN icnp_suggest_interv.id_task%TYPE,
        id_composition_in IN icnp_suggest_interv.id_composition%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_isv_uk(id_task_type_in   => id_task_type_in,
                   id_req_in         => id_req_in,
                   id_task_in        => id_task_in,
                   id_composition_in => id_composition_in,
                   handle_error_in   => handle_error_in,
                   rows_out          => rows_out);
    END del_isv_uk;

    PROCEDURE del_isv_epe_fk
    (
        id_episode_in   IN icnp_suggest_interv.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_suggest_interv
         WHERE id_episode = del_isv_epe_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_isv_epe_fk;

    PROCEDURE del_isv_epe_fk
    (
        id_episode_in   IN icnp_suggest_interv.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_isv_epe_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_isv_epe_fk;

    PROCEDURE del_isv_ien_fk
    (
        id_icnp_epis_interv_in IN icnp_suggest_interv.id_icnp_epis_interv%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_suggest_interv
         WHERE id_icnp_epis_interv = del_isv_ien_fk.id_icnp_epis_interv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_isv_ien_fk;

    PROCEDURE del_isv_ien_fk
    (
        id_icnp_epis_interv_in IN icnp_suggest_interv.id_icnp_epis_interv%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_isv_ien_fk(id_icnp_epis_interv_in => id_icnp_epis_interv_in,
                       handle_error_in        => handle_error_in,
                       rows_out               => rows_out);
    END del_isv_ien_fk;

    PROCEDURE del_isv_itn_fk
    (
        id_task_in        IN icnp_suggest_interv.id_task%TYPE,
        id_task_type_in   IN icnp_suggest_interv.id_task_type%TYPE,
        id_composition_in IN icnp_suggest_interv.id_composition%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_suggest_interv
         WHERE id_task = del_isv_itn_fk.id_task_in
           AND id_task_type = del_isv_itn_fk.id_task_type_in
           AND id_composition = del_isv_itn_fk.id_composition_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_isv_itn_fk;

    PROCEDURE del_isv_itn_fk
    (
        id_task_in        IN icnp_suggest_interv.id_task%TYPE,
        id_task_type_in   IN icnp_suggest_interv.id_task_type%TYPE,
        id_composition_in IN icnp_suggest_interv.id_composition%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_isv_itn_fk(id_task_in        => id_task_in,
                       id_task_type_in   => id_task_type_in,
                       id_composition_in => id_composition_in,
                       handle_error_in   => handle_error_in,
                       rows_out          => rows_out);
    END del_isv_itn_fk;

    PROCEDURE del_isv_pat_fk
    (
        id_patient_in   IN icnp_suggest_interv.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_suggest_interv
         WHERE id_patient = del_isv_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_isv_pat_fk;

    PROCEDURE del_isv_pat_fk
    (
        id_patient_in   IN icnp_suggest_interv.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_isv_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_isv_pat_fk;

    PROCEDURE del_isv_pl_fk
    (
        id_prof_last_update_in IN icnp_suggest_interv.id_prof_last_update%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_suggest_interv
         WHERE id_prof_last_update = del_isv_pl_fk.id_prof_last_update_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_isv_pl_fk;

    PROCEDURE del_isv_pl_fk
    (
        id_prof_last_update_in IN icnp_suggest_interv.id_prof_last_update%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_isv_pl_fk(id_prof_last_update_in => id_prof_last_update_in,
                      handle_error_in        => handle_error_in,
                      rows_out               => rows_out);
    END del_isv_pl_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM ICNP_SUGGEST_INTERV';
        ELSE
            RETURN 'DELETE FROM ICNP_SUGGEST_INTERV WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_SUGGEST_INTERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_SUGGEST_INTERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(icnp_suggest_interv_inout IN OUT icnp_suggest_interv%ROWTYPE) IS
    BEGIN
        icnp_suggest_interv_inout.id_icnp_sug_interv  := NULL;
        icnp_suggest_interv_inout.id_req              := NULL;
        icnp_suggest_interv_inout.id_task             := NULL;
        icnp_suggest_interv_inout.id_task_type        := NULL;
        icnp_suggest_interv_inout.id_composition      := NULL;
        icnp_suggest_interv_inout.id_patient          := NULL;
        icnp_suggest_interv_inout.id_episode          := NULL;
        icnp_suggest_interv_inout.flg_status          := NULL;
        icnp_suggest_interv_inout.id_prof_last_update := NULL;
        icnp_suggest_interv_inout.dt_last_update      := NULL;
        icnp_suggest_interv_inout.id_icnp_epis_interv := NULL;
        icnp_suggest_interv_inout.create_user         := NULL;
        icnp_suggest_interv_inout.create_time         := NULL;
        icnp_suggest_interv_inout.create_institution  := NULL;
        icnp_suggest_interv_inout.update_user         := NULL;
        icnp_suggest_interv_inout.update_time         := NULL;
        icnp_suggest_interv_inout.update_institution  := NULL;
        icnp_suggest_interv_inout.flg_status_rel      := 'A';
    END initrec;

    FUNCTION initrec RETURN icnp_suggest_interv%ROWTYPE IS
        l_icnp_suggest_interv icnp_suggest_interv%ROWTYPE;
    BEGIN
        l_icnp_suggest_interv.flg_status_rel := 'A';
        RETURN l_icnp_suggest_interv;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN icnp_suggest_interv_tc IS
        data icnp_suggest_interv_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM icnp_suggest_interv
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN icnp_suggest_interv_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data icnp_suggest_interv_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_icnp_suggest_interv;
/
