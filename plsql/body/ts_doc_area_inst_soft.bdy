/*-- Last Change Revision: $Rev: 1683523 $*/
/*-- Last Change by: $Author: luis.r.silva $*/
/*-- Date of last change: $Date: 2015-02-04 16:57:36 +0000 (qua, 04 fev 2015) $*/
CREATE OR REPLACE PACKAGE BODY ts_doc_area_inst_soft
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Janeiro 22, 2015 10:46:5
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_doc_area_inst_soft_in   IN doc_area_inst_soft.id_doc_area_inst_soft%TYPE,
        id_doc_area_in             IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_institution_in          IN doc_area_inst_soft.id_institution%TYPE DEFAULT 0,
        id_software_in             IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        flg_mode_in                IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        adw_last_update_in         IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_switch_mode_in         IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_type_in                IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_multiple_in            IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        id_sys_shortcut_error_in   IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        create_user_in             IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_time_in             IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_time_in             IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        flg_scope_type_in          IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT 'E',
        flg_data_paging_enabled_in IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT 'N',
        page_size_in               IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        id_market_in               IN doc_area_inst_soft.id_market%TYPE DEFAULT 0,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO doc_area_inst_soft
            (id_doc_area_inst_soft,
             id_doc_area,
             id_institution,
             id_software,
             flg_mode,
             adw_last_update,
             flg_switch_mode,
             flg_type,
             flg_multiple,
             id_sys_shortcut_error,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_scope_type,
             flg_data_paging_enabled,
             page_size,
             id_market)
        VALUES
            (id_doc_area_inst_soft_in,
             id_doc_area_in,
             id_institution_in,
             id_software_in,
             flg_mode_in,
             adw_last_update_in,
             flg_switch_mode_in,
             flg_type_in,
             flg_multiple_in,
             id_sys_shortcut_error_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_scope_type_in,
             flg_data_paging_enabled_in,
             page_size_in,
             id_market_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'DAIS_DA_INST_MARKET_SFT_IDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "DAIS_DA_INST_MARKET_SFT_IDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'DOC_AREA_INST_SOFT',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DOC_AREA',
                                                        value_in           => id_doc_area_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MARKET',
                                                        value_in           => id_market_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'DOC_AREA_INST_SOFT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    IF l_name = 'DAIS_MRK_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MARKET',
                                                        value_in           => id_market_in);
                    END IF;
                    IF l_name = 'DOC_AREA_INST_SOFT_ID_DA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DOC_AREA',
                                                        value_in           => id_doc_area_in);
                    END IF;
                    IF l_name = 'DOC_AREA_INST_SOFT_ID_INS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'DOC_AREA_INST_SOFT_ID_SOFT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_doc_area_inst_soft_in   IN doc_area_inst_soft.id_doc_area_inst_soft%TYPE,
        id_doc_area_in             IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_institution_in          IN doc_area_inst_soft.id_institution%TYPE DEFAULT 0,
        id_software_in             IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        flg_mode_in                IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        adw_last_update_in         IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_switch_mode_in         IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_type_in                IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_multiple_in            IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        id_sys_shortcut_error_in   IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        create_user_in             IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_time_in             IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_time_in             IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        flg_scope_type_in          IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT 'E',
        flg_data_paging_enabled_in IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT 'N',
        page_size_in               IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        id_market_in               IN doc_area_inst_soft.id_market%TYPE DEFAULT 0,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_doc_area_inst_soft_in   => id_doc_area_inst_soft_in,
            id_doc_area_in             => id_doc_area_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            flg_mode_in                => flg_mode_in,
            adw_last_update_in         => adw_last_update_in,
            flg_switch_mode_in         => flg_switch_mode_in,
            flg_type_in                => flg_type_in,
            flg_multiple_in            => flg_multiple_in,
            id_sys_shortcut_error_in   => id_sys_shortcut_error_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_scope_type_in          => flg_scope_type_in,
            flg_data_paging_enabled_in => flg_data_paging_enabled_in,
            page_size_in               => page_size_in,
            id_market_in               => id_market_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN doc_area_inst_soft%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec doc_area_inst_soft%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_doc_area_inst_soft := next_key(sequence_in);
        END IF;
        ins(id_doc_area_inst_soft_in   => l_rec.id_doc_area_inst_soft,
            id_doc_area_in             => l_rec.id_doc_area,
            id_institution_in          => l_rec.id_institution,
            id_software_in             => l_rec.id_software,
            flg_mode_in                => l_rec.flg_mode,
            adw_last_update_in         => l_rec.adw_last_update,
            flg_switch_mode_in         => l_rec.flg_switch_mode,
            flg_type_in                => l_rec.flg_type,
            flg_multiple_in            => l_rec.flg_multiple,
            id_sys_shortcut_error_in   => l_rec.id_sys_shortcut_error,
            create_user_in             => l_rec.create_user,
            create_time_in             => l_rec.create_time,
            create_institution_in      => l_rec.create_institution,
            update_user_in             => l_rec.update_user,
            update_time_in             => l_rec.update_time,
            update_institution_in      => l_rec.update_institution,
            flg_scope_type_in          => l_rec.flg_scope_type,
            flg_data_paging_enabled_in => l_rec.flg_data_paging_enabled,
            page_size_in               => l_rec.page_size,
            id_market_in               => l_rec.id_market,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN doc_area_inst_soft%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN doc_area_inst_soft.id_doc_area_inst_soft%TYPE
    
     IS
        retval doc_area_inst_soft.id_doc_area_inst_soft%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_doc_area_inst_soft.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_DOC_AREA_INST_SOFT'));
    END next_key;

    PROCEDURE ins
    (
        id_doc_area_in             IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_institution_in          IN doc_area_inst_soft.id_institution%TYPE DEFAULT 0,
        id_software_in             IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        flg_mode_in                IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        adw_last_update_in         IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_switch_mode_in         IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_type_in                IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_multiple_in            IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        id_sys_shortcut_error_in   IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        create_user_in             IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_time_in             IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_time_in             IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        flg_scope_type_in          IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT 'E',
        flg_data_paging_enabled_in IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT 'N',
        page_size_in               IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        id_market_in               IN doc_area_inst_soft.id_market%TYPE DEFAULT 0,
        id_doc_area_inst_soft_out  IN OUT doc_area_inst_soft.id_doc_area_inst_soft%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky doc_area_inst_soft.id_doc_area_inst_soft%TYPE := next_key;
    BEGIN
        ins(id_doc_area_inst_soft_in   => l_pky,
            id_doc_area_in             => id_doc_area_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            flg_mode_in                => flg_mode_in,
            adw_last_update_in         => adw_last_update_in,
            flg_switch_mode_in         => flg_switch_mode_in,
            flg_type_in                => flg_type_in,
            flg_multiple_in            => flg_multiple_in,
            id_sys_shortcut_error_in   => id_sys_shortcut_error_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_scope_type_in          => flg_scope_type_in,
            flg_data_paging_enabled_in => flg_data_paging_enabled_in,
            page_size_in               => page_size_in,
            id_market_in               => id_market_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        id_doc_area_inst_soft_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_doc_area_in             IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_institution_in          IN doc_area_inst_soft.id_institution%TYPE DEFAULT 0,
        id_software_in             IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        flg_mode_in                IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        adw_last_update_in         IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_switch_mode_in         IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_type_in                IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_multiple_in            IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        id_sys_shortcut_error_in   IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        create_user_in             IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_time_in             IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_time_in             IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        flg_scope_type_in          IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT 'E',
        flg_data_paging_enabled_in IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT 'N',
        page_size_in               IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        id_market_in               IN doc_area_inst_soft.id_market%TYPE DEFAULT 0,
        id_doc_area_inst_soft_out  IN OUT doc_area_inst_soft.id_doc_area_inst_soft%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_doc_area_in             => id_doc_area_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            flg_mode_in                => flg_mode_in,
            adw_last_update_in         => adw_last_update_in,
            flg_switch_mode_in         => flg_switch_mode_in,
            flg_type_in                => flg_type_in,
            flg_multiple_in            => flg_multiple_in,
            id_sys_shortcut_error_in   => id_sys_shortcut_error_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_scope_type_in          => flg_scope_type_in,
            flg_data_paging_enabled_in => flg_data_paging_enabled_in,
            page_size_in               => page_size_in,
            id_market_in               => id_market_in,
            id_doc_area_inst_soft_out  => id_doc_area_inst_soft_out,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    FUNCTION ins
    (
        id_doc_area_in             IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_institution_in          IN doc_area_inst_soft.id_institution%TYPE DEFAULT 0,
        id_software_in             IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        flg_mode_in                IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        adw_last_update_in         IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_switch_mode_in         IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_type_in                IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_multiple_in            IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        id_sys_shortcut_error_in   IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        create_user_in             IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_time_in             IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_time_in             IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        flg_scope_type_in          IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT 'E',
        flg_data_paging_enabled_in IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT 'N',
        page_size_in               IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        id_market_in               IN doc_area_inst_soft.id_market%TYPE DEFAULT 0,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) RETURN doc_area_inst_soft.id_doc_area_inst_soft%TYPE IS
        l_pky doc_area_inst_soft.id_doc_area_inst_soft%TYPE := next_key;
    BEGIN
        ins(id_doc_area_inst_soft_in   => l_pky,
            id_doc_area_in             => id_doc_area_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            flg_mode_in                => flg_mode_in,
            adw_last_update_in         => adw_last_update_in,
            flg_switch_mode_in         => flg_switch_mode_in,
            flg_type_in                => flg_type_in,
            flg_multiple_in            => flg_multiple_in,
            id_sys_shortcut_error_in   => id_sys_shortcut_error_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_scope_type_in          => flg_scope_type_in,
            flg_data_paging_enabled_in => flg_data_paging_enabled_in,
            page_size_in               => page_size_in,
            id_market_in               => id_market_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_doc_area_in             IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_institution_in          IN doc_area_inst_soft.id_institution%TYPE DEFAULT 0,
        id_software_in             IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        flg_mode_in                IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        adw_last_update_in         IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_switch_mode_in         IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_type_in                IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_multiple_in            IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        id_sys_shortcut_error_in   IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        create_user_in             IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_time_in             IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_time_in             IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        flg_scope_type_in          IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT 'E',
        flg_data_paging_enabled_in IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT 'N',
        page_size_in               IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        id_market_in               IN doc_area_inst_soft.id_market%TYPE DEFAULT 0,
        handle_error_in            IN BOOLEAN := TRUE
    ) RETURN doc_area_inst_soft.id_doc_area_inst_soft%TYPE IS
        l_pky    doc_area_inst_soft.id_doc_area_inst_soft%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_doc_area_inst_soft_in   => l_pky,
            id_doc_area_in             => id_doc_area_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            flg_mode_in                => flg_mode_in,
            adw_last_update_in         => adw_last_update_in,
            flg_switch_mode_in         => flg_switch_mode_in,
            flg_type_in                => flg_type_in,
            flg_multiple_in            => flg_multiple_in,
            id_sys_shortcut_error_in   => id_sys_shortcut_error_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_scope_type_in          => flg_scope_type_in,
            flg_data_paging_enabled_in => flg_data_paging_enabled_in,
            page_size_in               => page_size_in,
            id_market_in               => id_market_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_doc_area_in             IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_institution_in          IN doc_area_inst_soft.id_institution%TYPE DEFAULT 0,
        id_software_in             IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        flg_mode_in                IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        adw_last_update_in         IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_switch_mode_in         IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_type_in                IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_multiple_in            IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        id_sys_shortcut_error_in   IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        create_user_in             IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_time_in             IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_time_in             IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        flg_scope_type_in          IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT 'E',
        flg_data_paging_enabled_in IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT 'N',
        page_size_in               IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        id_market_in               IN doc_area_inst_soft.id_market%TYPE DEFAULT 0,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky doc_area_inst_soft.id_doc_area_inst_soft%TYPE := next_key;
    BEGIN
        ins(id_doc_area_inst_soft_in   => l_pky,
            id_doc_area_in             => id_doc_area_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            flg_mode_in                => flg_mode_in,
            adw_last_update_in         => adw_last_update_in,
            flg_switch_mode_in         => flg_switch_mode_in,
            flg_type_in                => flg_type_in,
            flg_multiple_in            => flg_multiple_in,
            id_sys_shortcut_error_in   => id_sys_shortcut_error_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_scope_type_in          => flg_scope_type_in,
            flg_data_paging_enabled_in => flg_data_paging_enabled_in,
            page_size_in               => page_size_in,
            id_market_in               => id_market_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_doc_area_in             IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_institution_in          IN doc_area_inst_soft.id_institution%TYPE DEFAULT 0,
        id_software_in             IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        flg_mode_in                IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        adw_last_update_in         IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_switch_mode_in         IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_type_in                IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_multiple_in            IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        id_sys_shortcut_error_in   IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        create_user_in             IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_time_in             IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_time_in             IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        flg_scope_type_in          IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT 'E',
        flg_data_paging_enabled_in IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT 'N',
        page_size_in               IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        id_market_in               IN doc_area_inst_soft.id_market%TYPE DEFAULT 0,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        l_pky    doc_area_inst_soft.id_doc_area_inst_soft%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_doc_area_inst_soft_in   => l_pky,
            id_doc_area_in             => id_doc_area_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            flg_mode_in                => flg_mode_in,
            adw_last_update_in         => adw_last_update_in,
            flg_switch_mode_in         => flg_switch_mode_in,
            flg_type_in                => flg_type_in,
            flg_multiple_in            => flg_multiple_in,
            id_sys_shortcut_error_in   => id_sys_shortcut_error_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_scope_type_in          => flg_scope_type_in,
            flg_data_paging_enabled_in => flg_data_paging_enabled_in,
            page_size_in               => page_size_in,
            id_market_in               => id_market_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN doc_area_inst_soft_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO doc_area_inst_soft
                    (id_doc_area_inst_soft,
                     id_doc_area,
                     id_institution,
                     id_software,
                     flg_mode,
                     adw_last_update,
                     flg_switch_mode,
                     flg_type,
                     flg_multiple,
                     id_sys_shortcut_error,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     flg_scope_type,
                     flg_data_paging_enabled,
                     page_size,
                     id_market)
                VALUES
                    (rows_in(indx).id_doc_area_inst_soft,
                     rows_in(indx).id_doc_area,
                     rows_in(indx).id_institution,
                     rows_in(indx).id_software,
                     rows_in(indx).flg_mode,
                     rows_in(indx).adw_last_update,
                     rows_in(indx).flg_switch_mode,
                     rows_in(indx).flg_type,
                     rows_in(indx).flg_multiple,
                     rows_in(indx).id_sys_shortcut_error,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).flg_scope_type,
                     rows_in(indx).flg_data_paging_enabled,
                     rows_in(indx).page_size,
                     rows_in(indx).id_market)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DOC_AREA_INST_SOFT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_doc_area_inst_soft,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DOC_AREA _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_doc_area,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_software,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_MODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_mode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ADW_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .adw_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_SWITCH_MODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_switch_mode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_MULTIPLE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_multiple,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SYS_SHORTCUT_ERROR _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_sys_shortcut_error,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_SCOPE_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_scope_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_DATA_PAGING_ENABLED _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_data_paging_enabled,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PAGE_SIZE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .page_size,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MARKET _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_market,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'DOC_AREA_INST_SOFT',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN doc_area_inst_soft_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_doc_area_inst_soft_in    IN doc_area_inst_soft.id_doc_area_inst_soft%TYPE,
        id_doc_area_in              IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin             IN BOOLEAN := TRUE,
        id_institution_in           IN doc_area_inst_soft.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_software_in              IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        id_software_nin             IN BOOLEAN := TRUE,
        flg_mode_in                 IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        flg_mode_nin                IN BOOLEAN := TRUE,
        adw_last_update_in          IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin         IN BOOLEAN := TRUE,
        flg_switch_mode_in          IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_switch_mode_nin         IN BOOLEAN := TRUE,
        flg_type_in                 IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        flg_multiple_in             IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        flg_multiple_nin            IN BOOLEAN := TRUE,
        id_sys_shortcut_error_in    IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        id_sys_shortcut_error_nin   IN BOOLEAN := TRUE,
        create_user_in              IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        flg_scope_type_in           IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT NULL,
        flg_scope_type_nin          IN BOOLEAN := TRUE,
        flg_data_paging_enabled_in  IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT NULL,
        flg_data_paging_enabled_nin IN BOOLEAN := TRUE,
        page_size_in                IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        page_size_nin               IN BOOLEAN := TRUE,
        id_market_in                IN doc_area_inst_soft.id_market%TYPE DEFAULT NULL,
        id_market_nin               IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_rows_out                  table_varchar;
        l_id_doc_area_n             NUMBER(1);
        l_id_institution_n          NUMBER(1);
        l_id_software_n             NUMBER(1);
        l_flg_mode_n                NUMBER(1);
        l_adw_last_update_n         NUMBER(1);
        l_flg_switch_mode_n         NUMBER(1);
        l_flg_type_n                NUMBER(1);
        l_flg_multiple_n            NUMBER(1);
        l_id_sys_shortcut_error_n   NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
        l_flg_scope_type_n          NUMBER(1);
        l_flg_data_paging_enabled_n NUMBER(1);
        l_page_size_n               NUMBER(1);
        l_id_market_n               NUMBER(1);
    BEGIN
    
        l_id_doc_area_n             := sys.diutil.bool_to_int(id_doc_area_nin);
        l_id_institution_n          := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n             := sys.diutil.bool_to_int(id_software_nin);
        l_flg_mode_n                := sys.diutil.bool_to_int(flg_mode_nin);
        l_adw_last_update_n         := sys.diutil.bool_to_int(adw_last_update_nin);
        l_flg_switch_mode_n         := sys.diutil.bool_to_int(flg_switch_mode_nin);
        l_flg_type_n                := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_multiple_n            := sys.diutil.bool_to_int(flg_multiple_nin);
        l_id_sys_shortcut_error_n   := sys.diutil.bool_to_int(id_sys_shortcut_error_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_scope_type_n          := sys.diutil.bool_to_int(flg_scope_type_nin);
        l_flg_data_paging_enabled_n := sys.diutil.bool_to_int(flg_data_paging_enabled_nin);
        l_page_size_n               := sys.diutil.bool_to_int(page_size_nin);
        l_id_market_n               := sys.diutil.bool_to_int(id_market_nin);
    
        UPDATE doc_area_inst_soft
           SET id_doc_area             = decode(l_id_doc_area_n, 0, id_doc_area_in, nvl(id_doc_area_in, id_doc_area)),
               id_institution          = decode(l_id_institution_n,
                                                0,
                                                id_institution_in,
                                                nvl(id_institution_in, id_institution)),
               id_software             = decode(l_id_software_n, 0, id_software_in, nvl(id_software_in, id_software)),
               flg_mode                = decode(l_flg_mode_n, 0, flg_mode_in, nvl(flg_mode_in, flg_mode)),
               adw_last_update         = decode(l_adw_last_update_n,
                                                0,
                                                adw_last_update_in,
                                                nvl(adw_last_update_in, adw_last_update)),
               flg_switch_mode         = decode(l_flg_switch_mode_n,
                                                0,
                                                flg_switch_mode_in,
                                                nvl(flg_switch_mode_in, flg_switch_mode)),
               flg_type                = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               flg_multiple            = decode(l_flg_multiple_n, 0, flg_multiple_in, nvl(flg_multiple_in, flg_multiple)),
               id_sys_shortcut_error   = decode(l_id_sys_shortcut_error_n,
                                                0,
                                                id_sys_shortcut_error_in,
                                                nvl(id_sys_shortcut_error_in, id_sys_shortcut_error)),
               create_user             = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time             = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution      = decode(l_create_institution_n,
                                                0,
                                                create_institution_in,
                                                nvl(create_institution_in, create_institution)),
               update_user             = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time             = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution      = decode(l_update_institution_n,
                                                0,
                                                update_institution_in,
                                                nvl(update_institution_in, update_institution)),
               flg_scope_type          = decode(l_flg_scope_type_n,
                                                0,
                                                flg_scope_type_in,
                                                nvl(flg_scope_type_in, flg_scope_type)),
               flg_data_paging_enabled = decode(l_flg_data_paging_enabled_n,
                                                0,
                                                flg_data_paging_enabled_in,
                                                nvl(flg_data_paging_enabled_in, flg_data_paging_enabled)),
               page_size               = decode(l_page_size_n, 0, page_size_in, nvl(page_size_in, page_size)),
               id_market               = decode(l_id_market_n, 0, id_market_in, nvl(id_market_in, id_market))
         WHERE id_doc_area_inst_soft = id_doc_area_inst_soft_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'DAIS_DA_INST_MARKET_SFT_IDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "DAIS_DA_INST_MARKET_SFT_IDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'DOC_AREA_INST_SOFT',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DOC_AREA',
                                                        value_in           => id_doc_area_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MARKET',
                                                        value_in           => id_market_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'DOC_AREA_INST_SOFT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    IF l_name = 'DAIS_MRK_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MARKET',
                                                        value_in           => id_market_in);
                    END IF;
                    IF l_name = 'DOC_AREA_INST_SOFT_ID_DA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DOC_AREA',
                                                        value_in           => id_doc_area_in);
                    END IF;
                    IF l_name = 'DOC_AREA_INST_SOFT_ID_INS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'DOC_AREA_INST_SOFT_ID_SOFT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_doc_area_inst_soft_in    IN doc_area_inst_soft.id_doc_area_inst_soft%TYPE,
        id_doc_area_in              IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin             IN BOOLEAN := TRUE,
        id_institution_in           IN doc_area_inst_soft.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_software_in              IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        id_software_nin             IN BOOLEAN := TRUE,
        flg_mode_in                 IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        flg_mode_nin                IN BOOLEAN := TRUE,
        adw_last_update_in          IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin         IN BOOLEAN := TRUE,
        flg_switch_mode_in          IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_switch_mode_nin         IN BOOLEAN := TRUE,
        flg_type_in                 IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        flg_multiple_in             IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        flg_multiple_nin            IN BOOLEAN := TRUE,
        id_sys_shortcut_error_in    IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        id_sys_shortcut_error_nin   IN BOOLEAN := TRUE,
        create_user_in              IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        flg_scope_type_in           IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT NULL,
        flg_scope_type_nin          IN BOOLEAN := TRUE,
        flg_data_paging_enabled_in  IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT NULL,
        flg_data_paging_enabled_nin IN BOOLEAN := TRUE,
        page_size_in                IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        page_size_nin               IN BOOLEAN := TRUE,
        id_market_in                IN doc_area_inst_soft.id_market%TYPE DEFAULT NULL,
        id_market_nin               IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_doc_area_inst_soft_in    => id_doc_area_inst_soft_in,
            id_doc_area_in              => id_doc_area_in,
            id_doc_area_nin             => id_doc_area_nin,
            id_institution_in           => id_institution_in,
            id_institution_nin          => id_institution_nin,
            id_software_in              => id_software_in,
            id_software_nin             => id_software_nin,
            flg_mode_in                 => flg_mode_in,
            flg_mode_nin                => flg_mode_nin,
            adw_last_update_in          => adw_last_update_in,
            adw_last_update_nin         => adw_last_update_nin,
            flg_switch_mode_in          => flg_switch_mode_in,
            flg_switch_mode_nin         => flg_switch_mode_nin,
            flg_type_in                 => flg_type_in,
            flg_type_nin                => flg_type_nin,
            flg_multiple_in             => flg_multiple_in,
            flg_multiple_nin            => flg_multiple_nin,
            id_sys_shortcut_error_in    => id_sys_shortcut_error_in,
            id_sys_shortcut_error_nin   => id_sys_shortcut_error_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            flg_scope_type_in           => flg_scope_type_in,
            flg_scope_type_nin          => flg_scope_type_nin,
            flg_data_paging_enabled_in  => flg_data_paging_enabled_in,
            flg_data_paging_enabled_nin => flg_data_paging_enabled_nin,
            page_size_in                => page_size_in,
            page_size_nin               => page_size_nin,
            id_market_in                => id_market_in,
            id_market_nin               => id_market_nin,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_doc_area_in              IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin             IN BOOLEAN := TRUE,
        id_institution_in           IN doc_area_inst_soft.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_software_in              IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        id_software_nin             IN BOOLEAN := TRUE,
        flg_mode_in                 IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        flg_mode_nin                IN BOOLEAN := TRUE,
        adw_last_update_in          IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin         IN BOOLEAN := TRUE,
        flg_switch_mode_in          IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_switch_mode_nin         IN BOOLEAN := TRUE,
        flg_type_in                 IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        flg_multiple_in             IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        flg_multiple_nin            IN BOOLEAN := TRUE,
        id_sys_shortcut_error_in    IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        id_sys_shortcut_error_nin   IN BOOLEAN := TRUE,
        create_user_in              IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        flg_scope_type_in           IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT NULL,
        flg_scope_type_nin          IN BOOLEAN := TRUE,
        flg_data_paging_enabled_in  IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT NULL,
        flg_data_paging_enabled_nin IN BOOLEAN := TRUE,
        page_size_in                IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        page_size_nin               IN BOOLEAN := TRUE,
        id_market_in                IN doc_area_inst_soft.id_market%TYPE DEFAULT NULL,
        id_market_nin               IN BOOLEAN := TRUE,
        where_in                    VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_sql                       VARCHAR2(32767);
        l_rows_out                  table_varchar;
        l_id_doc_area_n             NUMBER(1);
        l_id_institution_n          NUMBER(1);
        l_id_software_n             NUMBER(1);
        l_flg_mode_n                NUMBER(1);
        l_adw_last_update_n         NUMBER(1);
        l_flg_switch_mode_n         NUMBER(1);
        l_flg_type_n                NUMBER(1);
        l_flg_multiple_n            NUMBER(1);
        l_id_sys_shortcut_error_n   NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
        l_flg_scope_type_n          NUMBER(1);
        l_flg_data_paging_enabled_n NUMBER(1);
        l_page_size_n               NUMBER(1);
        l_id_market_n               NUMBER(1);
        id_doc_area_inst_soft_in    doc_area_inst_soft.id_doc_area_inst_soft%TYPE;
    BEGIN
    
        l_id_doc_area_n             := sys.diutil.bool_to_int(id_doc_area_nin);
        l_id_institution_n          := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n             := sys.diutil.bool_to_int(id_software_nin);
        l_flg_mode_n                := sys.diutil.bool_to_int(flg_mode_nin);
        l_adw_last_update_n         := sys.diutil.bool_to_int(adw_last_update_nin);
        l_flg_switch_mode_n         := sys.diutil.bool_to_int(flg_switch_mode_nin);
        l_flg_type_n                := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_multiple_n            := sys.diutil.bool_to_int(flg_multiple_nin);
        l_id_sys_shortcut_error_n   := sys.diutil.bool_to_int(id_sys_shortcut_error_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_scope_type_n          := sys.diutil.bool_to_int(flg_scope_type_nin);
        l_flg_data_paging_enabled_n := sys.diutil.bool_to_int(flg_data_paging_enabled_nin);
        l_page_size_n               := sys.diutil.bool_to_int(page_size_nin);
        l_id_market_n               := sys.diutil.bool_to_int(id_market_nin);
    
        l_sql := 'UPDATE DOC_AREA_INST_SOFT SET ' || ' ID_DOC_AREA = decode (' || l_id_doc_area_n ||
                 ',0,:id_doc_area_in, NVL (:id_doc_area_in, ID_DOC_AREA)) ' || ',' || ' ID_INSTITUTION = decode (' ||
                 l_id_institution_n || ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' ID_SOFTWARE = decode (' || l_id_software_n ||
                 ',0,:id_software_in, NVL (:id_software_in, ID_SOFTWARE)) ' || ',' || ' FLG_MODE = decode (' ||
                 l_flg_mode_n || ',0,:flg_mode_in, NVL (:flg_mode_in, FLG_MODE)) ' || ',' ||
                 ' ADW_LAST_UPDATE = decode (' || l_adw_last_update_n ||
                 ',0,:adw_last_update_in, NVL (:adw_last_update_in, ADW_LAST_UPDATE)) ' || ',' ||
                 ' FLG_SWITCH_MODE = decode (' || l_flg_switch_mode_n ||
                 ',0,:flg_switch_mode_in, NVL (:flg_switch_mode_in, FLG_SWITCH_MODE)) ' || ',' ||
                 ' FLG_TYPE = decode (' || l_flg_type_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' ||
                 ' FLG_MULTIPLE = decode (' || l_flg_multiple_n ||
                 ',0,:flg_multiple_in, NVL (:flg_multiple_in, FLG_MULTIPLE)) ' || ',' ||
                 ' ID_SYS_SHORTCUT_ERROR = decode (' || l_id_sys_shortcut_error_n ||
                 ',0,:id_sys_shortcut_error_in, NVL (:id_sys_shortcut_error_in, ID_SYS_SHORTCUT_ERROR)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' FLG_SCOPE_TYPE = decode (' || l_flg_scope_type_n ||
                 ',0,:flg_scope_type_in, NVL (:flg_scope_type_in, FLG_SCOPE_TYPE)) ' || ',' ||
                 ' FLG_DATA_PAGING_ENABLED = decode (' || l_flg_data_paging_enabled_n ||
                 ',0,:flg_data_paging_enabled_in, NVL (:flg_data_paging_enabled_in, FLG_DATA_PAGING_ENABLED)) ' || ',' ||
                 ' PAGE_SIZE = decode (' || l_page_size_n || ',0,:page_size_in, NVL (:page_size_in, PAGE_SIZE)) ' || ',' ||
                 ' ID_MARKET = decode (' || l_id_market_n || ',0,:id_market_in, NVL (:id_market_in, ID_MARKET)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_doc_area_in, id_institution_in, id_software_in, flg_mode_in, adw_last_update_in, flg_switch_mode_in, flg_type_in, flg_multiple_in, id_sys_shortcut_error_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_scope_type_in, flg_data_paging_enabled_in, page_size_in, id_market_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'DAIS_DA_INST_MARKET_SFT_IDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "DAIS_DA_INST_MARKET_SFT_IDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'DOC_AREA_INST_SOFT',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DOC_AREA',
                                                        value_in           => id_doc_area_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MARKET',
                                                        value_in           => id_market_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'DOC_AREA_INST_SOFT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    IF l_name = 'DAIS_MRK_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MARKET',
                                                        value_in           => id_market_in);
                    END IF;
                    IF l_name = 'DOC_AREA_INST_SOFT_ID_DA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DOC_AREA',
                                                        value_in           => id_doc_area_in);
                    END IF;
                    IF l_name = 'DOC_AREA_INST_SOFT_ID_INS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'DOC_AREA_INST_SOFT_ID_SOFT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_doc_area_in              IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin             IN BOOLEAN := TRUE,
        id_institution_in           IN doc_area_inst_soft.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_software_in              IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        id_software_nin             IN BOOLEAN := TRUE,
        flg_mode_in                 IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        flg_mode_nin                IN BOOLEAN := TRUE,
        adw_last_update_in          IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin         IN BOOLEAN := TRUE,
        flg_switch_mode_in          IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_switch_mode_nin         IN BOOLEAN := TRUE,
        flg_type_in                 IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        flg_multiple_in             IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        flg_multiple_nin            IN BOOLEAN := TRUE,
        id_sys_shortcut_error_in    IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        id_sys_shortcut_error_nin   IN BOOLEAN := TRUE,
        create_user_in              IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        flg_scope_type_in           IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT NULL,
        flg_scope_type_nin          IN BOOLEAN := TRUE,
        flg_data_paging_enabled_in  IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT NULL,
        flg_data_paging_enabled_nin IN BOOLEAN := TRUE,
        page_size_in                IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        page_size_nin               IN BOOLEAN := TRUE,
        id_market_in                IN doc_area_inst_soft.id_market%TYPE DEFAULT NULL,
        id_market_nin               IN BOOLEAN := TRUE,
        where_in                    VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_doc_area_in              => id_doc_area_in,
            id_doc_area_nin             => id_doc_area_nin,
            id_institution_in           => id_institution_in,
            id_institution_nin          => id_institution_nin,
            id_software_in              => id_software_in,
            id_software_nin             => id_software_nin,
            flg_mode_in                 => flg_mode_in,
            flg_mode_nin                => flg_mode_nin,
            adw_last_update_in          => adw_last_update_in,
            adw_last_update_nin         => adw_last_update_nin,
            flg_switch_mode_in          => flg_switch_mode_in,
            flg_switch_mode_nin         => flg_switch_mode_nin,
            flg_type_in                 => flg_type_in,
            flg_type_nin                => flg_type_nin,
            flg_multiple_in             => flg_multiple_in,
            flg_multiple_nin            => flg_multiple_nin,
            id_sys_shortcut_error_in    => id_sys_shortcut_error_in,
            id_sys_shortcut_error_nin   => id_sys_shortcut_error_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            flg_scope_type_in           => flg_scope_type_in,
            flg_scope_type_nin          => flg_scope_type_nin,
            flg_data_paging_enabled_in  => flg_data_paging_enabled_in,
            flg_data_paging_enabled_nin => flg_data_paging_enabled_nin,
            page_size_in                => page_size_in,
            page_size_nin               => page_size_nin,
            id_market_in                => id_market_in,
            id_market_nin               => id_market_nin,
            where_in                    => where_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN doc_area_inst_soft%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_doc_area_inst_soft_in   => rec_in.id_doc_area_inst_soft,
            id_doc_area_in             => rec_in.id_doc_area,
            id_institution_in          => rec_in.id_institution,
            id_software_in             => rec_in.id_software,
            flg_mode_in                => rec_in.flg_mode,
            adw_last_update_in         => rec_in.adw_last_update,
            flg_switch_mode_in         => rec_in.flg_switch_mode,
            flg_type_in                => rec_in.flg_type,
            flg_multiple_in            => rec_in.flg_multiple,
            id_sys_shortcut_error_in   => rec_in.id_sys_shortcut_error,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            flg_scope_type_in          => rec_in.flg_scope_type,
            flg_data_paging_enabled_in => rec_in.flg_data_paging_enabled,
            page_size_in               => rec_in.page_size,
            id_market_in               => rec_in.id_market
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN doc_area_inst_soft%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_doc_area_inst_soft_in   => rec_in.id_doc_area_inst_soft,
            id_doc_area_in             => rec_in.id_doc_area,
            id_institution_in          => rec_in.id_institution,
            id_software_in             => rec_in.id_software,
            flg_mode_in                => rec_in.flg_mode,
            adw_last_update_in         => rec_in.adw_last_update,
            flg_switch_mode_in         => rec_in.flg_switch_mode,
            flg_type_in                => rec_in.flg_type,
            flg_multiple_in            => rec_in.flg_multiple,
            id_sys_shortcut_error_in   => rec_in.id_sys_shortcut_error,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            flg_scope_type_in          => rec_in.flg_scope_type,
            flg_data_paging_enabled_in => rec_in.flg_data_paging_enabled,
            page_size_in               => rec_in.page_size,
            id_market_in               => rec_in.id_market
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_doc_area_inst_soft_in   IN doc_area_inst_soft.id_doc_area_inst_soft%TYPE,
        id_doc_area_in             IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_institution_in          IN doc_area_inst_soft.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        flg_mode_in                IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        adw_last_update_in         IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT NULL,
        flg_switch_mode_in         IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_type_in                IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_multiple_in            IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        id_sys_shortcut_error_in   IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        create_user_in             IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_time_in             IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_time_in             IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        flg_scope_type_in          IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT NULL,
        flg_data_paging_enabled_in IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT NULL,
        page_size_in               IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        id_market_in               IN doc_area_inst_soft.id_market%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        upd(id_doc_area_inst_soft_in   => id_doc_area_inst_soft_in,
            id_doc_area_in             => id_doc_area_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            flg_mode_in                => flg_mode_in,
            adw_last_update_in         => adw_last_update_in,
            flg_switch_mode_in         => flg_switch_mode_in,
            flg_type_in                => flg_type_in,
            flg_multiple_in            => flg_multiple_in,
            id_sys_shortcut_error_in   => id_sys_shortcut_error_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_scope_type_in          => flg_scope_type_in,
            flg_data_paging_enabled_in => flg_data_paging_enabled_in,
            page_size_in               => page_size_in,
            id_market_in               => id_market_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_doc_area_inst_soft_in   => id_doc_area_inst_soft_in,
                id_doc_area_in             => id_doc_area_in,
                id_institution_in          => id_institution_in,
                id_software_in             => id_software_in,
                flg_mode_in                => flg_mode_in,
                adw_last_update_in         => adw_last_update_in,
                flg_switch_mode_in         => flg_switch_mode_in,
                flg_type_in                => flg_type_in,
                flg_multiple_in            => flg_multiple_in,
                id_sys_shortcut_error_in   => id_sys_shortcut_error_in,
                create_user_in             => create_user_in,
                create_time_in             => create_time_in,
                create_institution_in      => create_institution_in,
                update_user_in             => update_user_in,
                update_time_in             => update_time_in,
                update_institution_in      => update_institution_in,
                flg_scope_type_in          => flg_scope_type_in,
                flg_data_paging_enabled_in => flg_data_paging_enabled_in,
                page_size_in               => page_size_in,
                id_market_in               => id_market_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_doc_area_inst_soft_in   IN doc_area_inst_soft.id_doc_area_inst_soft%TYPE,
        id_doc_area_in             IN doc_area_inst_soft.id_doc_area%TYPE DEFAULT NULL,
        id_institution_in          IN doc_area_inst_soft.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN doc_area_inst_soft.id_software%TYPE DEFAULT NULL,
        flg_mode_in                IN doc_area_inst_soft.flg_mode%TYPE DEFAULT NULL,
        adw_last_update_in         IN doc_area_inst_soft.adw_last_update%TYPE DEFAULT NULL,
        flg_switch_mode_in         IN doc_area_inst_soft.flg_switch_mode%TYPE DEFAULT NULL,
        flg_type_in                IN doc_area_inst_soft.flg_type%TYPE DEFAULT NULL,
        flg_multiple_in            IN doc_area_inst_soft.flg_multiple%TYPE DEFAULT NULL,
        id_sys_shortcut_error_in   IN doc_area_inst_soft.id_sys_shortcut_error%TYPE DEFAULT NULL,
        create_user_in             IN doc_area_inst_soft.create_user%TYPE DEFAULT NULL,
        create_time_in             IN doc_area_inst_soft.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN doc_area_inst_soft.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN doc_area_inst_soft.update_user%TYPE DEFAULT NULL,
        update_time_in             IN doc_area_inst_soft.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN doc_area_inst_soft.update_institution%TYPE DEFAULT NULL,
        flg_scope_type_in          IN doc_area_inst_soft.flg_scope_type%TYPE DEFAULT NULL,
        flg_data_paging_enabled_in IN doc_area_inst_soft.flg_data_paging_enabled%TYPE DEFAULT NULL,
        page_size_in               IN doc_area_inst_soft.page_size%TYPE DEFAULT NULL,
        id_market_in               IN doc_area_inst_soft.id_market%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_doc_area_inst_soft_in,
                id_doc_area_in,
                id_institution_in,
                id_software_in,
                flg_mode_in,
                adw_last_update_in,
                flg_switch_mode_in,
                flg_type_in,
                flg_multiple_in,
                id_sys_shortcut_error_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_scope_type_in,
                flg_data_paging_enabled_in,
                page_size_in,
                id_market_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN doc_area_inst_soft_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_doc_area_inst_soft   id_doc_area_inst_soft_cc;
        l_id_doc_area             id_doc_area_cc;
        l_id_institution          id_institution_cc;
        l_id_software             id_software_cc;
        l_flg_mode                flg_mode_cc;
        l_adw_last_update         adw_last_update_cc;
        l_flg_switch_mode         flg_switch_mode_cc;
        l_flg_type                flg_type_cc;
        l_flg_multiple            flg_multiple_cc;
        l_id_sys_shortcut_error   id_sys_shortcut_error_cc;
        l_create_user             create_user_cc;
        l_create_time             create_time_cc;
        l_create_institution      create_institution_cc;
        l_update_user             update_user_cc;
        l_update_time             update_time_cc;
        l_update_institution      update_institution_cc;
        l_flg_scope_type          flg_scope_type_cc;
        l_flg_data_paging_enabled flg_data_paging_enabled_cc;
        l_page_size               page_size_cc;
        l_id_market               id_market_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_doc_area_inst_soft(i) := col_in(i).id_doc_area_inst_soft;
            l_id_doc_area(i) := col_in(i).id_doc_area;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_software(i) := col_in(i).id_software;
            l_flg_mode(i) := col_in(i).flg_mode;
            l_adw_last_update(i) := col_in(i).adw_last_update;
            l_flg_switch_mode(i) := col_in(i).flg_switch_mode;
            l_flg_type(i) := col_in(i).flg_type;
            l_flg_multiple(i) := col_in(i).flg_multiple;
            l_id_sys_shortcut_error(i) := col_in(i).id_sys_shortcut_error;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_scope_type(i) := col_in(i).flg_scope_type;
            l_flg_data_paging_enabled(i) := col_in(i).flg_data_paging_enabled;
            l_page_size(i) := col_in(i).page_size;
            l_id_market(i) := col_in(i).id_market;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE doc_area_inst_soft
                   SET id_doc_area             = nvl(l_id_doc_area(i), id_doc_area),
                       id_institution          = nvl(l_id_institution(i), id_institution),
                       id_software             = nvl(l_id_software(i), id_software),
                       flg_mode                = nvl(l_flg_mode(i), flg_mode),
                       adw_last_update         = nvl(l_adw_last_update(i), adw_last_update),
                       flg_switch_mode         = nvl(l_flg_switch_mode(i), flg_switch_mode),
                       flg_type                = nvl(l_flg_type(i), flg_type),
                       flg_multiple            = nvl(l_flg_multiple(i), flg_multiple),
                       id_sys_shortcut_error   = nvl(l_id_sys_shortcut_error(i), id_sys_shortcut_error),
                       create_user             = nvl(l_create_user(i), create_user),
                       create_time             = nvl(l_create_time(i), create_time),
                       create_institution      = nvl(l_create_institution(i), create_institution),
                       update_user             = nvl(l_update_user(i), update_user),
                       update_time             = nvl(l_update_time(i), update_time),
                       update_institution      = nvl(l_update_institution(i), update_institution),
                       flg_scope_type          = nvl(l_flg_scope_type(i), flg_scope_type),
                       flg_data_paging_enabled = nvl(l_flg_data_paging_enabled(i), flg_data_paging_enabled),
                       page_size               = nvl(l_page_size(i), page_size),
                       id_market               = nvl(l_id_market(i), id_market)
                 WHERE id_doc_area_inst_soft = l_id_doc_area_inst_soft(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE doc_area_inst_soft
                   SET id_doc_area             = l_id_doc_area(i),
                       id_institution          = l_id_institution(i),
                       id_software             = l_id_software(i),
                       flg_mode                = l_flg_mode(i),
                       adw_last_update         = l_adw_last_update(i),
                       flg_switch_mode         = l_flg_switch_mode(i),
                       flg_type                = l_flg_type(i),
                       flg_multiple            = l_flg_multiple(i),
                       id_sys_shortcut_error   = l_id_sys_shortcut_error(i),
                       create_user             = l_create_user(i),
                       create_time             = l_create_time(i),
                       create_institution      = l_create_institution(i),
                       update_user             = l_update_user(i),
                       update_time             = l_update_time(i),
                       update_institution      = l_update_institution(i),
                       flg_scope_type          = l_flg_scope_type(i),
                       flg_data_paging_enabled = l_flg_data_paging_enabled(i),
                       page_size               = l_page_size(i),
                       id_market               = l_id_market(i)
                 WHERE id_doc_area_inst_soft = l_id_doc_area_inst_soft(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN doc_area_inst_soft_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE DOC_AREA_INST_SOFT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE DOC_AREA_INST_SOFT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE DOC_AREA_INST_SOFT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE DOC_AREA_INST_SOFT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_doc_area_inst_soft_in IN doc_area_inst_soft.id_doc_area_inst_soft%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM doc_area_inst_soft
         WHERE id_doc_area_inst_soft = id_doc_area_inst_soft_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_doc_area_inst_soft_in IN doc_area_inst_soft.id_doc_area_inst_soft%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_doc_area_inst_soft_in => id_doc_area_inst_soft_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_DOC_AREA_INST_SOFT
    PROCEDURE del_id_doc_area_inst_soft
    (
        id_doc_area_inst_soft_in IN doc_area_inst_soft.id_doc_area_inst_soft%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM doc_area_inst_soft
         WHERE id_doc_area_inst_soft = id_doc_area_inst_soft_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_doc_area_inst_soft;

    -- Delete all rows for primary key column ID_DOC_AREA_INST_SOFT
    PROCEDURE del_id_doc_area_inst_soft
    (
        id_doc_area_inst_soft_in IN doc_area_inst_soft.id_doc_area_inst_soft%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_doc_area_inst_soft(id_doc_area_inst_soft_in => id_doc_area_inst_soft_in,
                                  handle_error_in          => handle_error_in,
                                  rows_out                 => rows_out);
    END del_id_doc_area_inst_soft;

    -- Delete for unique value of DAIS_DA_INST_MARKET_SFT_IDX
    PROCEDURE del_dais_da_inst_mkt_sft_idx
    (
        id_doc_area_in    IN doc_area_inst_soft.id_doc_area%TYPE,
        id_institution_in IN doc_area_inst_soft.id_institution%TYPE,
        id_market_in      IN doc_area_inst_soft.id_market%TYPE,
        id_software_in    IN doc_area_inst_soft.id_software%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM doc_area_inst_soft
         WHERE id_doc_area = id_doc_area_in
           AND id_institution = id_institution_in
           AND id_market = id_market_in
           AND id_software = id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_dais_da_inst_mkt_sft_idx;

    -- Delete for unique value of DAIS_DA_INST_MARKET_SFT_IDX
    PROCEDURE del_dais_da_inst_mkt_sft_idx
    (
        id_doc_area_in    IN doc_area_inst_soft.id_doc_area%TYPE,
        id_institution_in IN doc_area_inst_soft.id_institution%TYPE,
        id_market_in      IN doc_area_inst_soft.id_market%TYPE,
        id_software_in    IN doc_area_inst_soft.id_software%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dais_da_inst_mkt_sft_idx(id_doc_area_in    => id_doc_area_in,
                                     id_institution_in => id_institution_in,
                                     id_market_in      => id_market_in,
                                     id_software_in    => id_software_in,
                                     handle_error_in   => handle_error_in,
                                     rows_out          => rows_out);
    END del_dais_da_inst_mkt_sft_idx;

    PROCEDURE del_dais_mrk_fk
    (
        id_market_in    IN doc_area_inst_soft.id_market%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM doc_area_inst_soft
         WHERE id_market = del_dais_mrk_fk.id_market_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_dais_mrk_fk;

    PROCEDURE del_dais_mrk_fk
    (
        id_market_in    IN doc_area_inst_soft.id_market%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dais_mrk_fk(id_market_in => id_market_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_dais_mrk_fk;

    PROCEDURE del_da_inst_soft_id_da_fk
    (
        id_doc_area_in  IN doc_area_inst_soft.id_doc_area%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM doc_area_inst_soft
         WHERE id_doc_area = del_da_inst_soft_id_da_fk.id_doc_area_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_da_inst_soft_id_da_fk;

    PROCEDURE del_da_inst_soft_id_da_fk
    (
        id_doc_area_in  IN doc_area_inst_soft.id_doc_area%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_da_inst_soft_id_da_fk(id_doc_area_in  => id_doc_area_in,
                                  handle_error_in => handle_error_in,
                                  rows_out        => rows_out);
    END del_da_inst_soft_id_da_fk;

    PROCEDURE del_da_inst_soft_id_ins_fk
    (
        id_institution_in IN doc_area_inst_soft.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM doc_area_inst_soft
         WHERE id_institution = del_da_inst_soft_id_ins_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_da_inst_soft_id_ins_fk;

    PROCEDURE del_da_inst_soft_id_ins_fk
    (
        id_institution_in IN doc_area_inst_soft.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_da_inst_soft_id_ins_fk(id_institution_in => id_institution_in,
                                   handle_error_in   => handle_error_in,
                                   rows_out          => rows_out);
    END del_da_inst_soft_id_ins_fk;

    PROCEDURE del_da_inst_soft_id_soft_fk
    (
        id_software_in  IN doc_area_inst_soft.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM doc_area_inst_soft
         WHERE id_software = del_da_inst_soft_id_soft_fk.id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_da_inst_soft_id_soft_fk;

    PROCEDURE del_da_inst_soft_id_soft_fk
    (
        id_software_in  IN doc_area_inst_soft.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_da_inst_soft_id_soft_fk(id_software_in  => id_software_in,
                                    handle_error_in => handle_error_in,
                                    rows_out        => rows_out);
    END del_da_inst_soft_id_soft_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM DOC_AREA_INST_SOFT';
        ELSE
            RETURN 'DELETE FROM DOC_AREA_INST_SOFT WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DOC_AREA_INST_SOFT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DOC_AREA_INST_SOFT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(doc_area_inst_soft_inout IN OUT doc_area_inst_soft%ROWTYPE) IS
    BEGIN
        doc_area_inst_soft_inout.id_doc_area_inst_soft   := NULL;
        doc_area_inst_soft_inout.id_doc_area             := NULL;
        doc_area_inst_soft_inout.id_institution          := 0;
        doc_area_inst_soft_inout.id_software             := NULL;
        doc_area_inst_soft_inout.flg_mode                := NULL;
        doc_area_inst_soft_inout.adw_last_update         := SYSDATE;
        doc_area_inst_soft_inout.flg_switch_mode         := NULL;
        doc_area_inst_soft_inout.flg_type                := NULL;
        doc_area_inst_soft_inout.flg_multiple            := NULL;
        doc_area_inst_soft_inout.id_sys_shortcut_error   := NULL;
        doc_area_inst_soft_inout.create_user             := NULL;
        doc_area_inst_soft_inout.create_time             := NULL;
        doc_area_inst_soft_inout.create_institution      := NULL;
        doc_area_inst_soft_inout.update_user             := NULL;
        doc_area_inst_soft_inout.update_time             := NULL;
        doc_area_inst_soft_inout.update_institution      := NULL;
        doc_area_inst_soft_inout.flg_scope_type          := 'E';
        doc_area_inst_soft_inout.flg_data_paging_enabled := 'N';
        doc_area_inst_soft_inout.page_size               := NULL;
        doc_area_inst_soft_inout.id_market               := 0;
    END initrec;

    FUNCTION initrec RETURN doc_area_inst_soft%ROWTYPE IS
        l_doc_area_inst_soft doc_area_inst_soft%ROWTYPE;
    BEGIN
        l_doc_area_inst_soft.id_institution          := 0;
        l_doc_area_inst_soft.adw_last_update         := SYSDATE;
        l_doc_area_inst_soft.flg_scope_type          := 'E';
        l_doc_area_inst_soft.flg_data_paging_enabled := 'N';
        l_doc_area_inst_soft.id_market               := 0;
        RETURN l_doc_area_inst_soft;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN doc_area_inst_soft_tc IS
        data doc_area_inst_soft_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM doc_area_inst_soft
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN doc_area_inst_soft_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data doc_area_inst_soft_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_doc_area_inst_soft;
/