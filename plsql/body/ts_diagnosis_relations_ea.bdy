/*-- Last Change Revision: $Rev: 1290973 $*/
/*-- Last Change by: $Author: alexandre.santos $*/
/*-- Date of last change: $Date: 2012-05-07 11:31:32 +0100 (seg, 07 mai 2012) $*/
CREATE OR REPLACE PACKAGE BODY TS_DIAGNOSIS_RELATIONS_EA
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: MarÃ§o 19, 2012 10:48:18
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_concept_version_1_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_1%TYPE,
      id_cncpt_vrs_inst_own1_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN1%TYPE,
      concept_type_int_name1_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME1%TYPE,
      id_concept_version_2_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_2%TYPE,
      id_cncpt_vrs_inst_own2_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN2%TYPE,
      concept_type_int_name2_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME2%TYPE,
      cncpt_rel_type_int_name_in IN DIAGNOSIS_RELATIONS_EA.CNCPT_REL_TYPE_INT_NAME%TYPE,
      id_institution_in IN DIAGNOSIS_RELATIONS_EA.ID_INSTITUTION%TYPE,
      id_software_in IN DIAGNOSIS_RELATIONS_EA.ID_SOFTWARE%TYPE
      ,
      rank_in IN DIAGNOSIS_RELATIONS_EA.RANK%TYPE DEFAULT NULL,
      flg_default_in IN DIAGNOSIS_RELATIONS_EA.FLG_DEFAULT%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO DIAGNOSIS_RELATIONS_EA (
         ID_CONCEPT_VERSION_1,
         ID_CNCPT_VRS_INST_OWN1,
         CONCEPT_TYPE_INT_NAME1,
         ID_CONCEPT_VERSION_2,
         ID_CNCPT_VRS_INST_OWN2,
         CONCEPT_TYPE_INT_NAME2,
         CNCPT_REL_TYPE_INT_NAME,
         RANK,
         FLG_DEFAULT,
         ID_INSTITUTION,
         ID_SOFTWARE
         )
      VALUES (
         id_concept_version_1_in,
         id_cncpt_vrs_inst_own1_in,
         concept_type_int_name1_in,
         id_concept_version_2_in,
         id_cncpt_vrs_inst_own2_in,
         concept_type_int_name2_in,
         cncpt_rel_type_int_name_in,
         rank_in,
         flg_default_in,
         id_institution_in,
         id_software_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_concept_version_1_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_1%TYPE,
      id_cncpt_vrs_inst_own1_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN1%TYPE,
      concept_type_int_name1_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME1%TYPE,
      id_concept_version_2_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_2%TYPE,
      id_cncpt_vrs_inst_own2_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN2%TYPE,
      concept_type_int_name2_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME2%TYPE,
      cncpt_rel_type_int_name_in IN DIAGNOSIS_RELATIONS_EA.CNCPT_REL_TYPE_INT_NAME%TYPE,
      id_institution_in IN DIAGNOSIS_RELATIONS_EA.ID_INSTITUTION%TYPE,
      id_software_in IN DIAGNOSIS_RELATIONS_EA.ID_SOFTWARE%TYPE
      ,
      rank_in IN DIAGNOSIS_RELATIONS_EA.RANK%TYPE DEFAULT NULL,
      flg_default_in IN DIAGNOSIS_RELATIONS_EA.FLG_DEFAULT%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_concept_version_1_in => id_concept_version_1_in,
      id_cncpt_vrs_inst_own1_in => id_cncpt_vrs_inst_own1_in,
      concept_type_int_name1_in => concept_type_int_name1_in,
      id_concept_version_2_in => id_concept_version_2_in,
      id_cncpt_vrs_inst_own2_in => id_cncpt_vrs_inst_own2_in,
      concept_type_int_name2_in => concept_type_int_name2_in,
      cncpt_rel_type_int_name_in => cncpt_rel_type_int_name_in,
      id_institution_in => id_institution_in,
      id_software_in => id_software_in
      ,
      rank_in => rank_in,
      flg_default_in => flg_default_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN DIAGNOSIS_RELATIONS_EA%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec DIAGNOSIS_RELATIONS_EA%ROWTYPE := rec_in;
   BEGIN
      ins (
         id_concept_version_1_in => l_rec.ID_CONCEPT_VERSION_1,
         id_cncpt_vrs_inst_own1_in => l_rec.ID_CNCPT_VRS_INST_OWN1,
         concept_type_int_name1_in => l_rec.CONCEPT_TYPE_INT_NAME1,
         id_concept_version_2_in => l_rec.ID_CONCEPT_VERSION_2,
         id_cncpt_vrs_inst_own2_in => l_rec.ID_CNCPT_VRS_INST_OWN2,
         concept_type_int_name2_in => l_rec.CONCEPT_TYPE_INT_NAME2,
         cncpt_rel_type_int_name_in => l_rec.CNCPT_REL_TYPE_INT_NAME,
         id_institution_in => l_rec.ID_INSTITUTION,
         id_software_in => l_rec.ID_SOFTWARE
         ,
         rank_in => l_rec.RANK,
         flg_default_in => l_rec.FLG_DEFAULT
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN DIAGNOSIS_RELATIONS_EA%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

    PROCEDURE ins (
      rows_in IN DIAGNOSIS_RELATIONS_EA_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO DIAGNOSIS_RELATIONS_EA VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CONCEPT_VERSION_1 _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CONCEPT_VERSION_1
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CNCPT_VRS_INST_OWN1 _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CNCPT_VRS_INST_OWN1
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CONCEPT_TYPE_INT_NAME1 _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CONCEPT_TYPE_INT_NAME1
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CONCEPT_VERSION_2 _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CONCEPT_VERSION_2
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CNCPT_VRS_INST_OWN2 _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CNCPT_VRS_INST_OWN2
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CONCEPT_TYPE_INT_NAME2 _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CONCEPT_TYPE_INT_NAME2
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CNCPT_REL_TYPE_INT_NAME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CNCPT_REL_TYPE_INT_NAME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'RANK _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).RANK
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_DEFAULT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_DEFAULT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SOFTWARE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_SOFTWARE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'DIAGNOSIS_RELATIONS_EA'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN DIAGNOSIS_RELATIONS_EA_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_concept_version_1_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_1%TYPE,
      id_cncpt_vrs_inst_own1_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN1%TYPE,
      concept_type_int_name1_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME1%TYPE,
      id_concept_version_2_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_2%TYPE,
      id_cncpt_vrs_inst_own2_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN2%TYPE,
      concept_type_int_name2_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME2%TYPE,
      cncpt_rel_type_int_name_in IN DIAGNOSIS_RELATIONS_EA.CNCPT_REL_TYPE_INT_NAME%TYPE,
      id_institution_in IN DIAGNOSIS_RELATIONS_EA.ID_INSTITUTION%TYPE,
      id_software_in IN DIAGNOSIS_RELATIONS_EA.ID_SOFTWARE%TYPE,
      rank_in IN DIAGNOSIS_RELATIONS_EA.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      flg_default_in IN DIAGNOSIS_RELATIONS_EA.FLG_DEFAULT%TYPE DEFAULT NULL,
      FLG_DEFAULT_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_RANK_n NUMBER(1);
   l_FLG_DEFAULT_n NUMBER(1);
   BEGIN

   l_RANK_n := sys.diutil.bool_to_int(RANK_nin);
   l_FLG_DEFAULT_n := sys.diutil.bool_to_int(FLG_DEFAULT_nin);


         UPDATE DIAGNOSIS_RELATIONS_EA SET
     RANK = decode (l_RANK_n,0,rank_in, NVL (rank_in, RANK)),
     FLG_DEFAULT = decode (l_FLG_DEFAULT_n,0,flg_default_in, NVL (flg_default_in, FLG_DEFAULT))
          WHERE
             ID_CONCEPT_VERSION_1 = id_concept_version_1_in AND
             ID_CNCPT_VRS_INST_OWN1 = id_cncpt_vrs_inst_own1_in AND
             CONCEPT_TYPE_INT_NAME1 = concept_type_int_name1_in AND
             ID_CONCEPT_VERSION_2 = id_concept_version_2_in AND
             ID_CNCPT_VRS_INST_OWN2 = id_cncpt_vrs_inst_own2_in AND
             CONCEPT_TYPE_INT_NAME2 = concept_type_int_name2_in AND
             CNCPT_REL_TYPE_INT_NAME = cncpt_rel_type_int_name_in AND
             ID_INSTITUTION = id_institution_in AND
             ID_SOFTWARE = id_software_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_concept_version_1_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_1%TYPE,
      id_cncpt_vrs_inst_own1_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN1%TYPE,
      concept_type_int_name1_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME1%TYPE,
      id_concept_version_2_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_2%TYPE,
      id_cncpt_vrs_inst_own2_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN2%TYPE,
      concept_type_int_name2_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME2%TYPE,
      cncpt_rel_type_int_name_in IN DIAGNOSIS_RELATIONS_EA.CNCPT_REL_TYPE_INT_NAME%TYPE,
      id_institution_in IN DIAGNOSIS_RELATIONS_EA.ID_INSTITUTION%TYPE,
      id_software_in IN DIAGNOSIS_RELATIONS_EA.ID_SOFTWARE%TYPE,
      rank_in IN DIAGNOSIS_RELATIONS_EA.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      flg_default_in IN DIAGNOSIS_RELATIONS_EA.FLG_DEFAULT%TYPE DEFAULT NULL,
      FLG_DEFAULT_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_concept_version_1_in => id_concept_version_1_in,
      id_cncpt_vrs_inst_own1_in => id_cncpt_vrs_inst_own1_in,
      concept_type_int_name1_in => concept_type_int_name1_in,
      id_concept_version_2_in => id_concept_version_2_in,
      id_cncpt_vrs_inst_own2_in => id_cncpt_vrs_inst_own2_in,
      concept_type_int_name2_in => concept_type_int_name2_in,
      cncpt_rel_type_int_name_in => cncpt_rel_type_int_name_in,
      id_institution_in => id_institution_in,
      id_software_in => id_software_in,
      rank_in => rank_in,
      RANK_nin => RANK_nin,
      flg_default_in => flg_default_in,
      FLG_DEFAULT_nin => FLG_DEFAULT_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      rank_in IN DIAGNOSIS_RELATIONS_EA.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      flg_default_in IN DIAGNOSIS_RELATIONS_EA.FLG_DEFAULT%TYPE DEFAULT NULL,
      FLG_DEFAULT_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_RANK_n NUMBER(1);
   l_FLG_DEFAULT_n NUMBER(1);
      id_concept_version_1_in DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_1%TYPE;
      id_cncpt_vrs_inst_own1_in DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN1%TYPE;
      concept_type_int_name1_in DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME1%TYPE;
      id_concept_version_2_in DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_2%TYPE;
      id_cncpt_vrs_inst_own2_in DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN2%TYPE;
      concept_type_int_name2_in DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME2%TYPE;
      cncpt_rel_type_int_name_in DIAGNOSIS_RELATIONS_EA.CNCPT_REL_TYPE_INT_NAME%TYPE;
      id_institution_in DIAGNOSIS_RELATIONS_EA.ID_INSTITUTION%TYPE;
      id_software_in DIAGNOSIS_RELATIONS_EA.ID_SOFTWARE%TYPE;
   BEGIN



      l_RANK_n := sys.diutil.bool_to_int(RANK_nin);
      l_FLG_DEFAULT_n := sys.diutil.bool_to_int(FLG_DEFAULT_nin);



l_sql := 'UPDATE DIAGNOSIS_RELATIONS_EA SET '
     || ' RANK = decode (' || l_RANK_n || ',0,:rank_in, NVL (:rank_in, RANK)) '|| ','
     || ' FLG_DEFAULT = decode (' || l_FLG_DEFAULT_n || ',0,:flg_default_in, NVL (:flg_default_in, FLG_DEFAULT)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     rank_in,
     flg_default_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      rank_in IN DIAGNOSIS_RELATIONS_EA.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      flg_default_in IN DIAGNOSIS_RELATIONS_EA.FLG_DEFAULT%TYPE DEFAULT NULL,
      FLG_DEFAULT_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      rank_in => rank_in,
      RANK_nin => RANK_nin,
      flg_default_in => flg_default_in,
      FLG_DEFAULT_nin => FLG_DEFAULT_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN DIAGNOSIS_RELATIONS_EA%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_concept_version_1_in => rec_in.ID_CONCEPT_VERSION_1,
         id_cncpt_vrs_inst_own1_in => rec_in.ID_CNCPT_VRS_INST_OWN1,
         concept_type_int_name1_in => rec_in.CONCEPT_TYPE_INT_NAME1,
         id_concept_version_2_in => rec_in.ID_CONCEPT_VERSION_2,
         id_cncpt_vrs_inst_own2_in => rec_in.ID_CNCPT_VRS_INST_OWN2,
         concept_type_int_name2_in => rec_in.CONCEPT_TYPE_INT_NAME2,
         cncpt_rel_type_int_name_in => rec_in.CNCPT_REL_TYPE_INT_NAME,
         rank_in => rec_in.RANK,
         flg_default_in => rec_in.FLG_DEFAULT,
         id_institution_in => rec_in.ID_INSTITUTION,
         id_software_in => rec_in.ID_SOFTWARE

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN DIAGNOSIS_RELATIONS_EA%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_concept_version_1_in => rec_in.ID_CONCEPT_VERSION_1,
         id_cncpt_vrs_inst_own1_in => rec_in.ID_CNCPT_VRS_INST_OWN1,
         concept_type_int_name1_in => rec_in.CONCEPT_TYPE_INT_NAME1,
         id_concept_version_2_in => rec_in.ID_CONCEPT_VERSION_2,
         id_cncpt_vrs_inst_own2_in => rec_in.ID_CNCPT_VRS_INST_OWN2,
         concept_type_int_name2_in => rec_in.CONCEPT_TYPE_INT_NAME2,
         cncpt_rel_type_int_name_in => rec_in.CNCPT_REL_TYPE_INT_NAME,
         rank_in => rec_in.RANK,
         flg_default_in => rec_in.FLG_DEFAULT,
         id_institution_in => rec_in.ID_INSTITUTION,
         id_software_in => rec_in.ID_SOFTWARE

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_concept_version_1_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_1%TYPE,
      id_cncpt_vrs_inst_own1_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN1%TYPE,
      concept_type_int_name1_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME1%TYPE,
      id_concept_version_2_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_2%TYPE,
      id_cncpt_vrs_inst_own2_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN2%TYPE,
      concept_type_int_name2_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME2%TYPE,
      cncpt_rel_type_int_name_in IN DIAGNOSIS_RELATIONS_EA.CNCPT_REL_TYPE_INT_NAME%TYPE,
      id_institution_in IN DIAGNOSIS_RELATIONS_EA.ID_INSTITUTION%TYPE,
      id_software_in IN DIAGNOSIS_RELATIONS_EA.ID_SOFTWARE%TYPE,
      rank_in IN DIAGNOSIS_RELATIONS_EA.RANK%TYPE DEFAULT NULL,
      flg_default_in IN DIAGNOSIS_RELATIONS_EA.FLG_DEFAULT%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_concept_version_1_in => id_concept_version_1_in,
         id_cncpt_vrs_inst_own1_in => id_cncpt_vrs_inst_own1_in,
         concept_type_int_name1_in => concept_type_int_name1_in,
         id_concept_version_2_in => id_concept_version_2_in,
         id_cncpt_vrs_inst_own2_in => id_cncpt_vrs_inst_own2_in,
         concept_type_int_name2_in => concept_type_int_name2_in,
         cncpt_rel_type_int_name_in => cncpt_rel_type_int_name_in,
         id_institution_in => id_institution_in,
         id_software_in => id_software_in,
         rank_in => rank_in,
         flg_default_in => flg_default_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_concept_version_1_in => id_concept_version_1_in,
            id_cncpt_vrs_inst_own1_in => id_cncpt_vrs_inst_own1_in,
            concept_type_int_name1_in => concept_type_int_name1_in,
            id_concept_version_2_in => id_concept_version_2_in,
            id_cncpt_vrs_inst_own2_in => id_cncpt_vrs_inst_own2_in,
            concept_type_int_name2_in => concept_type_int_name2_in,
            cncpt_rel_type_int_name_in => cncpt_rel_type_int_name_in,
            id_institution_in => id_institution_in,
            id_software_in => id_software_in,
            rank_in => rank_in,
            flg_default_in => flg_default_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_concept_version_1_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_1%TYPE,
      id_cncpt_vrs_inst_own1_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN1%TYPE,
      concept_type_int_name1_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME1%TYPE,
      id_concept_version_2_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_2%TYPE,
      id_cncpt_vrs_inst_own2_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN2%TYPE,
      concept_type_int_name2_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME2%TYPE,
      cncpt_rel_type_int_name_in IN DIAGNOSIS_RELATIONS_EA.CNCPT_REL_TYPE_INT_NAME%TYPE,
      id_institution_in IN DIAGNOSIS_RELATIONS_EA.ID_INSTITUTION%TYPE,
      id_software_in IN DIAGNOSIS_RELATIONS_EA.ID_SOFTWARE%TYPE,
      rank_in IN DIAGNOSIS_RELATIONS_EA.RANK%TYPE DEFAULT NULL,
      flg_default_in IN DIAGNOSIS_RELATIONS_EA.FLG_DEFAULT%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_concept_version_1_in,
      id_cncpt_vrs_inst_own1_in,
      concept_type_int_name1_in,
      id_concept_version_2_in,
      id_cncpt_vrs_inst_own2_in,
      concept_type_int_name2_in,
      cncpt_rel_type_int_name_in,
      id_institution_in,
      id_software_in,
      rank_in,
      flg_default_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN DIAGNOSIS_RELATIONS_EA_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_CONCEPT_VERSION_1 ID_CONCEPT_VERSION_1_cc;
      l_ID_CNCPT_VRS_INST_OWN1 ID_CNCPT_VRS_INST_OWN1_cc;
      l_CONCEPT_TYPE_INT_NAME1 CONCEPT_TYPE_INT_NAME1_cc;
      l_ID_CONCEPT_VERSION_2 ID_CONCEPT_VERSION_2_cc;
      l_ID_CNCPT_VRS_INST_OWN2 ID_CNCPT_VRS_INST_OWN2_cc;
      l_CONCEPT_TYPE_INT_NAME2 CONCEPT_TYPE_INT_NAME2_cc;
      l_CNCPT_REL_TYPE_INT_NAME CNCPT_REL_TYPE_INT_NAME_cc;
      l_RANK RANK_cc;
      l_FLG_DEFAULT FLG_DEFAULT_cc;
      l_ID_INSTITUTION ID_INSTITUTION_cc;
      l_ID_SOFTWARE ID_SOFTWARE_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_CONCEPT_VERSION_1(i) := col_in(i).ID_CONCEPT_VERSION_1;
         l_ID_CNCPT_VRS_INST_OWN1(i) := col_in(i).ID_CNCPT_VRS_INST_OWN1;
         l_CONCEPT_TYPE_INT_NAME1(i) := col_in(i).CONCEPT_TYPE_INT_NAME1;
         l_ID_CONCEPT_VERSION_2(i) := col_in(i).ID_CONCEPT_VERSION_2;
         l_ID_CNCPT_VRS_INST_OWN2(i) := col_in(i).ID_CNCPT_VRS_INST_OWN2;
         l_CONCEPT_TYPE_INT_NAME2(i) := col_in(i).CONCEPT_TYPE_INT_NAME2;
         l_CNCPT_REL_TYPE_INT_NAME(i) := col_in(i).CNCPT_REL_TYPE_INT_NAME;
         l_RANK(i) := col_in(i).RANK;
         l_FLG_DEFAULT(i) := col_in(i).FLG_DEFAULT;
         l_ID_INSTITUTION(i) := col_in(i).ID_INSTITUTION;
         l_ID_SOFTWARE(i) := col_in(i).ID_SOFTWARE;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE DIAGNOSIS_RELATIONS_EA SET
               RANK = NVL (l_RANK(i), RANK),
               FLG_DEFAULT = NVL (l_FLG_DEFAULT(i), FLG_DEFAULT)
             WHERE
                ID_CONCEPT_VERSION_1 = l_ID_CONCEPT_VERSION_1(i) AND
                ID_CNCPT_VRS_INST_OWN1 = l_ID_CNCPT_VRS_INST_OWN1(i) AND
                CONCEPT_TYPE_INT_NAME1 = l_CONCEPT_TYPE_INT_NAME1(i) AND
                ID_CONCEPT_VERSION_2 = l_ID_CONCEPT_VERSION_2(i) AND
                ID_CNCPT_VRS_INST_OWN2 = l_ID_CNCPT_VRS_INST_OWN2(i) AND
                CONCEPT_TYPE_INT_NAME2 = l_CONCEPT_TYPE_INT_NAME2(i) AND
                CNCPT_REL_TYPE_INT_NAME = l_CNCPT_REL_TYPE_INT_NAME(i) AND
                ID_INSTITUTION = l_ID_INSTITUTION(i) AND
                ID_SOFTWARE = l_ID_SOFTWARE(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE DIAGNOSIS_RELATIONS_EA SET
               RANK = l_RANK(i),
               FLG_DEFAULT = l_FLG_DEFAULT(i)
             WHERE
                ID_CONCEPT_VERSION_1 = l_ID_CONCEPT_VERSION_1(i) AND
                ID_CNCPT_VRS_INST_OWN1 = l_ID_CNCPT_VRS_INST_OWN1(i) AND
                CONCEPT_TYPE_INT_NAME1 = l_CONCEPT_TYPE_INT_NAME1(i) AND
                ID_CONCEPT_VERSION_2 = l_ID_CONCEPT_VERSION_2(i) AND
                ID_CNCPT_VRS_INST_OWN2 = l_ID_CNCPT_VRS_INST_OWN2(i) AND
                CONCEPT_TYPE_INT_NAME2 = l_CONCEPT_TYPE_INT_NAME2(i) AND
                CNCPT_REL_TYPE_INT_NAME = l_CNCPT_REL_TYPE_INT_NAME(i) AND
                ID_INSTITUTION = l_ID_INSTITUTION(i) AND
                ID_SOFTWARE = l_ID_SOFTWARE(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN DIAGNOSIS_RELATIONS_EA_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE DIAGNOSIS_RELATIONS_EA
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE DIAGNOSIS_RELATIONS_EA
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE DIAGNOSIS_RELATIONS_EA set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE DIAGNOSIS_RELATIONS_EA set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_concept_version_1_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_1%TYPE,
      id_cncpt_vrs_inst_own1_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN1%TYPE,
      concept_type_int_name1_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME1%TYPE,
      id_concept_version_2_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_2%TYPE,
      id_cncpt_vrs_inst_own2_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN2%TYPE,
      concept_type_int_name2_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME2%TYPE,
      cncpt_rel_type_int_name_in IN DIAGNOSIS_RELATIONS_EA.CNCPT_REL_TYPE_INT_NAME%TYPE,
      id_institution_in IN DIAGNOSIS_RELATIONS_EA.ID_INSTITUTION%TYPE,
      id_software_in IN DIAGNOSIS_RELATIONS_EA.ID_SOFTWARE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DIAGNOSIS_RELATIONS_EA
       WHERE
          ID_CONCEPT_VERSION_1 = id_concept_version_1_in AND
          ID_CNCPT_VRS_INST_OWN1 = id_cncpt_vrs_inst_own1_in AND
          CONCEPT_TYPE_INT_NAME1 = concept_type_int_name1_in AND
          ID_CONCEPT_VERSION_2 = id_concept_version_2_in AND
          ID_CNCPT_VRS_INST_OWN2 = id_cncpt_vrs_inst_own2_in AND
          CONCEPT_TYPE_INT_NAME2 = concept_type_int_name2_in AND
          CNCPT_REL_TYPE_INT_NAME = cncpt_rel_type_int_name_in AND
          ID_INSTITUTION = id_institution_in AND
          ID_SOFTWARE = id_software_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_concept_version_1_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_1%TYPE,
      id_cncpt_vrs_inst_own1_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN1%TYPE,
      concept_type_int_name1_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME1%TYPE,
      id_concept_version_2_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_2%TYPE,
      id_cncpt_vrs_inst_own2_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN2%TYPE,
      concept_type_int_name2_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME2%TYPE,
      cncpt_rel_type_int_name_in IN DIAGNOSIS_RELATIONS_EA.CNCPT_REL_TYPE_INT_NAME%TYPE,
      id_institution_in IN DIAGNOSIS_RELATIONS_EA.ID_INSTITUTION%TYPE,
      id_software_in IN DIAGNOSIS_RELATIONS_EA.ID_SOFTWARE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_concept_version_1_in => id_concept_version_1_in,
      id_cncpt_vrs_inst_own1_in => id_cncpt_vrs_inst_own1_in,
      concept_type_int_name1_in => concept_type_int_name1_in,
      id_concept_version_2_in => id_concept_version_2_in,
      id_cncpt_vrs_inst_own2_in => id_cncpt_vrs_inst_own2_in,
      concept_type_int_name2_in => concept_type_int_name2_in,
      cncpt_rel_type_int_name_in => cncpt_rel_type_int_name_in,
      id_institution_in => id_institution_in,
      id_software_in => id_software_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_CONCEPT_VERSION_1
   PROCEDURE del_ID_CONCEPT_VERSION_1 (
      id_concept_version_1_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_1%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM DIAGNOSIS_RELATIONS_EA
       WHERE ID_CONCEPT_VERSION_1 = id_concept_version_1_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_CONCEPT_VERSION_1;

   -- Delete all rows for primary key column ID_CNCPT_VRS_INST_OWN1
   PROCEDURE del_ID_CNCPT_VRS_INST_OWN1 (
      id_cncpt_vrs_inst_own1_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN1%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM DIAGNOSIS_RELATIONS_EA
       WHERE ID_CNCPT_VRS_INST_OWN1 = id_cncpt_vrs_inst_own1_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_CNCPT_VRS_INST_OWN1;

   -- Delete all rows for primary key column CONCEPT_TYPE_INT_NAME1
   PROCEDURE del_CONCEPT_TYPE_INT_NAME1 (
      concept_type_int_name1_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME1%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM DIAGNOSIS_RELATIONS_EA
       WHERE CONCEPT_TYPE_INT_NAME1 = concept_type_int_name1_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_CONCEPT_TYPE_INT_NAME1;

   -- Delete all rows for primary key column ID_CONCEPT_VERSION_2
   PROCEDURE del_ID_CONCEPT_VERSION_2 (
      id_concept_version_2_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_2%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM DIAGNOSIS_RELATIONS_EA
       WHERE ID_CONCEPT_VERSION_2 = id_concept_version_2_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_CONCEPT_VERSION_2;

   -- Delete all rows for primary key column ID_CNCPT_VRS_INST_OWN2
   PROCEDURE del_ID_CNCPT_VRS_INST_OWN2 (
      id_cncpt_vrs_inst_own2_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN2%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM DIAGNOSIS_RELATIONS_EA
       WHERE ID_CNCPT_VRS_INST_OWN2 = id_cncpt_vrs_inst_own2_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_CNCPT_VRS_INST_OWN2;

   -- Delete all rows for primary key column CONCEPT_TYPE_INT_NAME2
   PROCEDURE del_CONCEPT_TYPE_INT_NAME2 (
      concept_type_int_name2_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME2%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM DIAGNOSIS_RELATIONS_EA
       WHERE CONCEPT_TYPE_INT_NAME2 = concept_type_int_name2_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_CONCEPT_TYPE_INT_NAME2;

   -- Delete all rows for primary key column CNCPT_REL_TYPE_INT_NAME
   PROCEDURE del_CNCPT_REL_TYPE_INT_NAME (
      cncpt_rel_type_int_name_in IN DIAGNOSIS_RELATIONS_EA.CNCPT_REL_TYPE_INT_NAME%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM DIAGNOSIS_RELATIONS_EA
       WHERE CNCPT_REL_TYPE_INT_NAME = cncpt_rel_type_int_name_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_CNCPT_REL_TYPE_INT_NAME;

   -- Delete all rows for primary key column ID_INSTITUTION
   PROCEDURE del_ID_INSTITUTION (
      id_institution_in IN DIAGNOSIS_RELATIONS_EA.ID_INSTITUTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM DIAGNOSIS_RELATIONS_EA
       WHERE ID_INSTITUTION = id_institution_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_INSTITUTION;

   -- Delete all rows for primary key column ID_SOFTWARE
   PROCEDURE del_ID_SOFTWARE (
      id_software_in IN DIAGNOSIS_RELATIONS_EA.ID_SOFTWARE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM DIAGNOSIS_RELATIONS_EA
       WHERE ID_SOFTWARE = id_software_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_SOFTWARE;






   -- Delete all rows for primary key column ID_CONCEPT_VERSION_1
   PROCEDURE del_ID_CONCEPT_VERSION_1 (
      id_concept_version_1_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_1%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_CONCEPT_VERSION_1 (
      id_concept_version_1_in => id_concept_version_1_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_CONCEPT_VERSION_1;

   -- Delete all rows for primary key column ID_CNCPT_VRS_INST_OWN1
   PROCEDURE del_ID_CNCPT_VRS_INST_OWN1 (
      id_cncpt_vrs_inst_own1_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN1%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_CNCPT_VRS_INST_OWN1 (
      id_cncpt_vrs_inst_own1_in => id_cncpt_vrs_inst_own1_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_CNCPT_VRS_INST_OWN1;

   -- Delete all rows for primary key column CONCEPT_TYPE_INT_NAME1
   PROCEDURE del_CONCEPT_TYPE_INT_NAME1 (
      concept_type_int_name1_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME1%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_CONCEPT_TYPE_INT_NAME1 (
      concept_type_int_name1_in => concept_type_int_name1_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_CONCEPT_TYPE_INT_NAME1;

   -- Delete all rows for primary key column ID_CONCEPT_VERSION_2
   PROCEDURE del_ID_CONCEPT_VERSION_2 (
      id_concept_version_2_in IN DIAGNOSIS_RELATIONS_EA.ID_CONCEPT_VERSION_2%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_CONCEPT_VERSION_2 (
      id_concept_version_2_in => id_concept_version_2_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_CONCEPT_VERSION_2;

   -- Delete all rows for primary key column ID_CNCPT_VRS_INST_OWN2
   PROCEDURE del_ID_CNCPT_VRS_INST_OWN2 (
      id_cncpt_vrs_inst_own2_in IN DIAGNOSIS_RELATIONS_EA.ID_CNCPT_VRS_INST_OWN2%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_CNCPT_VRS_INST_OWN2 (
      id_cncpt_vrs_inst_own2_in => id_cncpt_vrs_inst_own2_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_CNCPT_VRS_INST_OWN2;

   -- Delete all rows for primary key column CONCEPT_TYPE_INT_NAME2
   PROCEDURE del_CONCEPT_TYPE_INT_NAME2 (
      concept_type_int_name2_in IN DIAGNOSIS_RELATIONS_EA.CONCEPT_TYPE_INT_NAME2%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_CONCEPT_TYPE_INT_NAME2 (
      concept_type_int_name2_in => concept_type_int_name2_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_CONCEPT_TYPE_INT_NAME2;

   -- Delete all rows for primary key column CNCPT_REL_TYPE_INT_NAME
   PROCEDURE del_CNCPT_REL_TYPE_INT_NAME (
      cncpt_rel_type_int_name_in IN DIAGNOSIS_RELATIONS_EA.CNCPT_REL_TYPE_INT_NAME%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_CNCPT_REL_TYPE_INT_NAME (
      cncpt_rel_type_int_name_in => cncpt_rel_type_int_name_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_CNCPT_REL_TYPE_INT_NAME;

   -- Delete all rows for primary key column ID_INSTITUTION
   PROCEDURE del_ID_INSTITUTION (
      id_institution_in IN DIAGNOSIS_RELATIONS_EA.ID_INSTITUTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_INSTITUTION (
      id_institution_in => id_institution_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_INSTITUTION;

   -- Delete all rows for primary key column ID_SOFTWARE
   PROCEDURE del_ID_SOFTWARE (
      id_software_in IN DIAGNOSIS_RELATIONS_EA.ID_SOFTWARE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_SOFTWARE (
      id_software_in => id_software_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_SOFTWARE;






















   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM DIAGNOSIS_RELATIONS_EA';
      ELSE
         RETURN
            'DELETE FROM DIAGNOSIS_RELATIONS_EA WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DIAGNOSIS_RELATIONS_EA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DIAGNOSIS_RELATIONS_EA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      diagnosis_relations_ea_inout IN OUT DIAGNOSIS_RELATIONS_EA%ROWTYPE
   )
   IS
   BEGIN
      diagnosis_relations_ea_inout.ID_CONCEPT_VERSION_1 := NULL;
      diagnosis_relations_ea_inout.ID_CNCPT_VRS_INST_OWN1 := NULL;
      diagnosis_relations_ea_inout.CONCEPT_TYPE_INT_NAME1 := NULL;
      diagnosis_relations_ea_inout.ID_CONCEPT_VERSION_2 := NULL;
      diagnosis_relations_ea_inout.ID_CNCPT_VRS_INST_OWN2 := NULL;
      diagnosis_relations_ea_inout.CONCEPT_TYPE_INT_NAME2 := NULL;
      diagnosis_relations_ea_inout.CNCPT_REL_TYPE_INT_NAME := NULL;
      diagnosis_relations_ea_inout.RANK := NULL;
      diagnosis_relations_ea_inout.FLG_DEFAULT := NULL;
      diagnosis_relations_ea_inout.ID_INSTITUTION := NULL;
      diagnosis_relations_ea_inout.ID_SOFTWARE := NULL;
   END initrec;

   FUNCTION initrec RETURN DIAGNOSIS_RELATIONS_EA%ROWTYPE
   IS
      l_diagnosis_relations_ea DIAGNOSIS_RELATIONS_EA%ROWTYPE;
   BEGIN
      RETURN l_diagnosis_relations_ea;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN DIAGNOSIS_RELATIONS_EA_tc
   IS
        data DIAGNOSIS_RELATIONS_EA_tc;
   BEGIN
        select * bulk collect into data from DIAGNOSIS_RELATIONS_EA where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN DIAGNOSIS_RELATIONS_EA_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data DIAGNOSIS_RELATIONS_EA_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_DIAGNOSIS_RELATIONS_EA;
/
