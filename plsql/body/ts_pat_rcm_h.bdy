/*-- Last Change Revision: $Rev: 1307034 $*/
/*-- Last Change by: $Author: ana.monteiro $*/
/*-- Date of last change: $Date: 2012-05-22 09:10:44 +0100 (ter, 22 mai 2012) $*/
CREATE OR REPLACE PACKAGE BODY ts_pat_rcm_h
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: April 26, 2012 11:15:22
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_patient_in         IN pat_rcm_h.id_patient%TYPE,
        id_institution_in     IN pat_rcm_h.id_institution%TYPE,
        id_rcm_in             IN pat_rcm_h.id_rcm%TYPE,
        id_rcm_det_in         IN pat_rcm_h.id_rcm_det%TYPE,
        dt_status_in          IN pat_rcm_h.dt_status%TYPE,
        id_rcm_det_h_in       IN pat_rcm_h.id_rcm_det_h%TYPE,
        id_workflow_in        IN pat_rcm_h.id_workflow%TYPE DEFAULT NULL,
        id_status_in          IN pat_rcm_h.id_status%TYPE DEFAULT NULL,
        id_workflow_action_in IN pat_rcm_h.id_workflow_action%TYPE DEFAULT NULL,
        id_prof_status_in     IN pat_rcm_h.id_prof_status%TYPE DEFAULT NULL,
        id_epis_created_in    IN pat_rcm_h.id_epis_created%TYPE DEFAULT NULL,
        notes_in              IN pat_rcm_h.notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_rcm_h.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_rcm_h.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_rcm_h.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_rcm_h.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_rcm_h.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_rcm_h.update_institution%TYPE DEFAULT NULL,
        crm_key_in            IN pat_rcm_h.crm_key%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pat_rcm_h
            (id_patient,
             id_rcm,
             id_rcm_det,
             dt_status,
             id_rcm_det_h,
             id_workflow,
             id_status,
             id_workflow_action,
             id_prof_status,
             id_epis_created,
             notes,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_institution,
             crm_key)
        VALUES
            (id_patient_in,
             id_rcm_in,
             id_rcm_det_in,
             dt_status_in,
             id_rcm_det_h_in,
             id_workflow_in,
             id_status_in,
             id_workflow_action_in,
             id_prof_status_in,
             id_epis_created_in,
             notes_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_institution_in,
             crm_key_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_RCM_H');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    IF l_name = 'PRH_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_CREATED',
                                                        value_in           => id_epis_created_in);
                    END IF;
                    IF l_name = 'PRH_INN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PRH_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_STATUS',
                                                        value_in           => id_prof_status_in);
                    END IF;
                    IF l_name = 'PRH_WSW_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WORKFLOW',
                                                        value_in           => id_workflow_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_STATUS',
                                                        value_in           => id_status_in);
                    END IF;
                    IF l_name = 'PRH_WWN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WORKFLOW_ACTION',
                                                        value_in           => id_workflow_action_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_patient_in         IN pat_rcm_h.id_patient%TYPE,
        id_institution_in     IN pat_rcm_h.id_institution%TYPE,
        id_rcm_in             IN pat_rcm_h.id_rcm%TYPE,
        id_rcm_det_in         IN pat_rcm_h.id_rcm_det%TYPE,
        dt_status_in          IN pat_rcm_h.dt_status%TYPE,
        id_rcm_det_h_in       IN pat_rcm_h.id_rcm_det_h%TYPE,
        id_workflow_in        IN pat_rcm_h.id_workflow%TYPE DEFAULT NULL,
        id_status_in          IN pat_rcm_h.id_status%TYPE DEFAULT NULL,
        id_workflow_action_in IN pat_rcm_h.id_workflow_action%TYPE DEFAULT NULL,
        id_prof_status_in     IN pat_rcm_h.id_prof_status%TYPE DEFAULT NULL,
        id_epis_created_in    IN pat_rcm_h.id_epis_created%TYPE DEFAULT NULL,
        notes_in              IN pat_rcm_h.notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_rcm_h.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_rcm_h.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_rcm_h.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_rcm_h.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_rcm_h.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_rcm_h.update_institution%TYPE DEFAULT NULL,
        crm_key_in            IN pat_rcm_h.crm_key%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_patient_in         => id_patient_in,
            id_institution_in     => id_institution_in,
            id_rcm_in             => id_rcm_in,
            id_rcm_det_in         => id_rcm_det_in,
            dt_status_in          => dt_status_in,
            id_rcm_det_h_in       => id_rcm_det_h_in,
            id_workflow_in        => id_workflow_in,
            id_status_in          => id_status_in,
            id_workflow_action_in => id_workflow_action_in,
            id_prof_status_in     => id_prof_status_in,
            id_epis_created_in    => id_epis_created_in,
            notes_in              => notes_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            crm_key_in            => crm_key_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    /*
    START Special logic for handling LOB columns....
    */

    PROCEDURE n_ins_clobs_in_chunks
    (
        id_patient_in         IN pat_rcm_h.id_patient%TYPE,
        id_institution_in     IN pat_rcm_h.id_institution%TYPE,
        id_rcm_in             IN pat_rcm_h.id_rcm%TYPE,
        id_rcm_det_in         IN pat_rcm_h.id_rcm_det%TYPE,
        dt_status_in          IN pat_rcm_h.dt_status%TYPE,
        id_rcm_det_h_in       IN pat_rcm_h.id_rcm_det_h%TYPE,
        id_workflow_in        IN pat_rcm_h.id_workflow%TYPE DEFAULT NULL,
        id_status_in          IN pat_rcm_h.id_status%TYPE DEFAULT NULL,
        id_workflow_action_in IN pat_rcm_h.id_workflow_action%TYPE DEFAULT NULL,
        id_prof_status_in     IN pat_rcm_h.id_prof_status%TYPE DEFAULT NULL,
        id_epis_created_in    IN pat_rcm_h.id_epis_created%TYPE DEFAULT NULL,
        create_user_in        IN pat_rcm_h.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_rcm_h.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_rcm_h.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_rcm_h.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_rcm_h.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_rcm_h.update_institution%TYPE DEFAULT NULL,
        crm_key_in            IN pat_rcm_h.crm_key%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        clob_columns_in       IN varchar2_t,
        clob_pieces_in        IN varchar2_t
    ) IS
        l_notes        CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
    BEGIN
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'notes_in' THEN
                            IF l_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'notes_in' THEN
                        dbms_lob.writeappend(l_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        ins(id_patient_in         => id_patient_in,
            id_institution_in     => id_institution_in,
            id_rcm_in             => id_rcm_in,
            id_rcm_det_in         => id_rcm_det_in,
            dt_status_in          => dt_status_in,
            id_rcm_det_h_in       => id_rcm_det_h_in,
            id_workflow_in        => id_workflow_in,
            id_status_in          => id_status_in,
            id_workflow_action_in => id_workflow_action_in,
            id_prof_status_in     => id_prof_status_in,
            id_epis_created_in    => id_epis_created_in,
            notes_in              => l_notes,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            crm_key_in            => crm_key_in,
            handle_error_in       => handle_error_in);
    
    END n_ins_clobs_in_chunks;

    PROCEDURE n_upd_clobs_in_chunks
    (
        id_patient_in         IN pat_rcm_h.id_patient%TYPE,
        id_institution_in     IN pat_rcm_h.id_institution%TYPE,
        id_rcm_in             IN pat_rcm_h.id_rcm%TYPE,
        id_rcm_det_in         IN pat_rcm_h.id_rcm_det%TYPE,
        dt_status_in          IN pat_rcm_h.dt_status%TYPE,
        id_rcm_det_h_in       IN pat_rcm_h.id_rcm_det_h%TYPE,
        id_workflow_in        IN pat_rcm_h.id_workflow%TYPE DEFAULT NULL,
        id_status_in          IN pat_rcm_h.id_status%TYPE DEFAULT NULL,
        id_workflow_action_in IN pat_rcm_h.id_workflow_action%TYPE DEFAULT NULL,
        id_prof_status_in     IN pat_rcm_h.id_prof_status%TYPE DEFAULT NULL,
        id_epis_created_in    IN pat_rcm_h.id_epis_created%TYPE DEFAULT NULL,
        create_user_in        IN pat_rcm_h.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_rcm_h.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_rcm_h.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_rcm_h.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_rcm_h.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_rcm_h.update_institution%TYPE DEFAULT NULL,
        crm_key_in            IN pat_rcm_h.crm_key%TYPE DEFAULT NULL,
        ignore_if_null_in     IN BOOLEAN := TRUE,
        handle_error_in       IN BOOLEAN := TRUE,
        clob_columns_in       IN varchar2_t,
        clob_pieces_in        IN varchar2_t
    ) IS
        l_notes        CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
        l_rows         PLS_INTEGER;
    BEGIN
    
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'notes_in' THEN
                            IF l_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'notes_in' THEN
                        dbms_lob.writeappend(l_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        upd(id_patient_in         => id_patient_in,
            id_institution_in     => id_institution_in,
            id_rcm_in             => id_rcm_in,
            id_rcm_det_in         => id_rcm_det_in,
            dt_status_in          => dt_status_in,
            id_rcm_det_h_in       => id_rcm_det_h_in,
            id_workflow_in        => id_workflow_in,
            id_status_in          => id_status_in,
            id_workflow_action_in => id_workflow_action_in,
            id_prof_status_in     => id_prof_status_in,
            id_epis_created_in    => id_epis_created_in,
            notes_in              => l_notes,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            crm_key_in            => crm_key_in,
            handle_error_in       => handle_error_in);
    END n_upd_clobs_in_chunks;

    PROCEDURE n_upd_ins_clobs_in_chunks
    (
        id_patient_in         IN pat_rcm_h.id_patient%TYPE,
        id_institution_in     IN pat_rcm_h.id_institution%TYPE,
        id_rcm_in             IN pat_rcm_h.id_rcm%TYPE,
        id_rcm_det_in         IN pat_rcm_h.id_rcm_det%TYPE,
        dt_status_in          IN pat_rcm_h.dt_status%TYPE,
        id_rcm_det_h_in       IN pat_rcm_h.id_rcm_det_h%TYPE,
        id_workflow_in        IN pat_rcm_h.id_workflow%TYPE DEFAULT NULL,
        id_status_in          IN pat_rcm_h.id_status%TYPE DEFAULT NULL,
        id_workflow_action_in IN pat_rcm_h.id_workflow_action%TYPE DEFAULT NULL,
        id_prof_status_in     IN pat_rcm_h.id_prof_status%TYPE DEFAULT NULL,
        id_epis_created_in    IN pat_rcm_h.id_epis_created%TYPE DEFAULT NULL,
        create_user_in        IN pat_rcm_h.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_rcm_h.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_rcm_h.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_rcm_h.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_rcm_h.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_rcm_h.update_institution%TYPE DEFAULT NULL,
        crm_key_in            IN pat_rcm_h.crm_key%TYPE DEFAULT NULL,
        ignore_if_null_in     IN BOOLEAN DEFAULT TRUE,
        handle_error_in       IN BOOLEAN DEFAULT TRUE,
        clob_columns_in       IN varchar2_t,
        clob_pieces_in        IN varchar2_t
    ) IS
    BEGIN
        n_upd_clobs_in_chunks(id_patient_in         => id_patient_in,
                              id_institution_in     => id_institution_in,
                              id_rcm_in             => id_rcm_in,
                              id_rcm_det_in         => id_rcm_det_in,
                              dt_status_in          => dt_status_in,
                              id_rcm_det_h_in       => id_rcm_det_h_in,
                              id_workflow_in        => id_workflow_in,
                              id_status_in          => id_status_in,
                              id_workflow_action_in => id_workflow_action_in,
                              id_prof_status_in     => id_prof_status_in,
                              id_epis_created_in    => id_epis_created_in,
                              create_user_in        => create_user_in,
                              create_time_in        => create_time_in,
                              create_institution_in => create_institution_in,
                              update_user_in        => update_user_in,
                              update_time_in        => update_time_in,
                              update_institution_in => update_institution_in,
                              crm_key_in            => crm_key_in,
                              clob_columns_in       => clob_columns_in,
                              clob_pieces_in        => clob_pieces_in,
                              ignore_if_null_in     => ignore_if_null_in,
                              handle_error_in       => handle_error_in);
    
        IF SQL%ROWCOUNT = 0
        THEN
            n_ins_clobs_in_chunks(id_patient_in         => id_patient_in,
                                  id_institution_in     => id_institution_in,
                                  id_rcm_in             => id_rcm_in,
                                  id_rcm_det_in         => id_rcm_det_in,
                                  dt_status_in          => dt_status_in,
                                  id_rcm_det_h_in       => id_rcm_det_h_in,
                                  id_workflow_in        => id_workflow_in,
                                  id_status_in          => id_status_in,
                                  id_workflow_action_in => id_workflow_action_in,
                                  id_prof_status_in     => id_prof_status_in,
                                  id_epis_created_in    => id_epis_created_in,
                                  create_user_in        => create_user_in,
                                  create_time_in        => create_time_in,
                                  create_institution_in => create_institution_in,
                                  update_user_in        => update_user_in,
                                  update_time_in        => update_time_in,
                                  update_institution_in => update_institution_in,
                                  crm_key_in            => crm_key_in,
                                  clob_columns_in       => clob_columns_in,
                                  clob_pieces_in        => clob_pieces_in,
                                  handle_error_in       => handle_error_in);
        END IF;
    END n_upd_ins_clobs_in_chunks;

    /*
    END Special logic for handling LOB columns.
    */

    PROCEDURE ins
    (
        rec_in          IN pat_rcm_h%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pat_rcm_h%ROWTYPE := rec_in;
    BEGIN
        ins(id_patient_in         => l_rec.id_patient,
            id_institution_in     => l_rec.id_institution,
            id_rcm_in             => l_rec.id_rcm,
            id_rcm_det_in         => l_rec.id_rcm_det,
            dt_status_in          => l_rec.dt_status,
            id_rcm_det_h_in       => l_rec.id_rcm_det_h,
            id_workflow_in        => l_rec.id_workflow,
            id_status_in          => l_rec.id_status,
            id_workflow_action_in => l_rec.id_workflow_action,
            id_prof_status_in     => l_rec.id_prof_status,
            id_epis_created_in    => l_rec.id_epis_created,
            notes_in              => l_rec.notes,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_time_in        => l_rec.update_time,
            update_institution_in => l_rec.update_institution,
            crm_key_in            => l_rec.crm_key,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_rcm_h%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_rcm_h_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO pat_rcm_h
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RCM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_rcm,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RCM_DET _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_rcm_det,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RCM_DET_H _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_rcm_det_h,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_WORKFLOW _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_workflow,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_WORKFLOW_ACTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_workflow_action,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_CREATED _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_epis_created,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CRM_KEY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .crm_key,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PAT_RCM_H',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_rcm_h_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_patient_in          IN pat_rcm_h.id_patient%TYPE,
        id_institution_in      IN pat_rcm_h.id_institution%TYPE,
        id_rcm_in              IN pat_rcm_h.id_rcm%TYPE,
        id_rcm_det_in          IN pat_rcm_h.id_rcm_det%TYPE,
        dt_status_in           IN pat_rcm_h.dt_status%TYPE,
        id_rcm_det_h_in        IN pat_rcm_h.id_rcm_det_h%TYPE,
        id_workflow_in         IN pat_rcm_h.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin        IN BOOLEAN := TRUE,
        id_status_in           IN pat_rcm_h.id_status%TYPE DEFAULT NULL,
        id_status_nin          IN BOOLEAN := TRUE,
        id_workflow_action_in  IN pat_rcm_h.id_workflow_action%TYPE DEFAULT NULL,
        id_workflow_action_nin IN BOOLEAN := TRUE,
        id_prof_status_in      IN pat_rcm_h.id_prof_status%TYPE DEFAULT NULL,
        id_prof_status_nin     IN BOOLEAN := TRUE,
        id_epis_created_in     IN pat_rcm_h.id_epis_created%TYPE DEFAULT NULL,
        id_epis_created_nin    IN BOOLEAN := TRUE,
        notes_in               IN pat_rcm_h.notes%TYPE DEFAULT NULL,
        notes_nin              IN BOOLEAN := TRUE,
        create_user_in         IN pat_rcm_h.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pat_rcm_h.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pat_rcm_h.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pat_rcm_h.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN pat_rcm_h.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pat_rcm_h.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        crm_key_in             IN pat_rcm_h.crm_key%TYPE DEFAULT NULL,
        crm_key_nin            IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_workflow_n        NUMBER(1);
        l_id_status_n          NUMBER(1);
        l_id_workflow_action_n NUMBER(1);
        l_id_prof_status_n     NUMBER(1);
        l_id_epis_created_n    NUMBER(1);
        l_notes_n              NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        l_crm_key_n            NUMBER(1);
    BEGIN
    
        l_id_workflow_n        := sys.diutil.bool_to_int(id_workflow_nin);
        l_id_status_n          := sys.diutil.bool_to_int(id_status_nin);
        l_id_workflow_action_n := sys.diutil.bool_to_int(id_workflow_action_nin);
        l_id_prof_status_n     := sys.diutil.bool_to_int(id_prof_status_nin);
        l_id_epis_created_n    := sys.diutil.bool_to_int(id_epis_created_nin);
        l_notes_n              := sys.diutil.bool_to_int(notes_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_crm_key_n            := sys.diutil.bool_to_int(crm_key_nin);
    
        UPDATE pat_rcm_h
           SET id_workflow        = decode(l_id_workflow_n, 0, id_workflow_in, nvl(id_workflow_in, id_workflow)),
               id_status          = decode(l_id_status_n, 0, id_status_in, nvl(id_status_in, id_status)),
               id_workflow_action = decode(l_id_workflow_action_n,
                                           0,
                                           id_workflow_action_in,
                                           nvl(id_workflow_action_in, id_workflow_action)),
               id_prof_status     = decode(l_id_prof_status_n,
                                           0,
                                           id_prof_status_in,
                                           nvl(id_prof_status_in, id_prof_status)),
               id_epis_created    = decode(l_id_epis_created_n,
                                           0,
                                           id_epis_created_in,
                                           nvl(id_epis_created_in, id_epis_created)),
               notes              = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution)),
               crm_key            = decode(l_crm_key_n, 0, crm_key_in, nvl(crm_key_in, crm_key))
         WHERE id_patient = id_patient_in
           AND id_institution = id_institution_in
           AND id_rcm = id_rcm_in
           AND id_rcm_det = id_rcm_det_in
           AND dt_status = dt_status_in
           AND id_rcm_det_h = id_rcm_det_h_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_RCM_H');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    IF l_name = 'PRH_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_CREATED',
                                                        value_in           => id_epis_created_in);
                    END IF;
                    IF l_name = 'PRH_INN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PRH_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_STATUS',
                                                        value_in           => id_prof_status_in);
                    END IF;
                    IF l_name = 'PRH_WSW_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WORKFLOW',
                                                        value_in           => id_workflow_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_STATUS',
                                                        value_in           => id_status_in);
                    END IF;
                    IF l_name = 'PRH_WWN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WORKFLOW_ACTION',
                                                        value_in           => id_workflow_action_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_patient_in          IN pat_rcm_h.id_patient%TYPE,
        id_institution_in      IN pat_rcm_h.id_institution%TYPE,
        id_rcm_in              IN pat_rcm_h.id_rcm%TYPE,
        id_rcm_det_in          IN pat_rcm_h.id_rcm_det%TYPE,
        dt_status_in           IN pat_rcm_h.dt_status%TYPE,
        id_rcm_det_h_in        IN pat_rcm_h.id_rcm_det_h%TYPE,
        id_workflow_in         IN pat_rcm_h.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin        IN BOOLEAN := TRUE,
        id_status_in           IN pat_rcm_h.id_status%TYPE DEFAULT NULL,
        id_status_nin          IN BOOLEAN := TRUE,
        id_workflow_action_in  IN pat_rcm_h.id_workflow_action%TYPE DEFAULT NULL,
        id_workflow_action_nin IN BOOLEAN := TRUE,
        id_prof_status_in      IN pat_rcm_h.id_prof_status%TYPE DEFAULT NULL,
        id_prof_status_nin     IN BOOLEAN := TRUE,
        id_epis_created_in     IN pat_rcm_h.id_epis_created%TYPE DEFAULT NULL,
        id_epis_created_nin    IN BOOLEAN := TRUE,
        notes_in               IN pat_rcm_h.notes%TYPE DEFAULT NULL,
        notes_nin              IN BOOLEAN := TRUE,
        create_user_in         IN pat_rcm_h.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pat_rcm_h.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pat_rcm_h.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pat_rcm_h.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN pat_rcm_h.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pat_rcm_h.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        crm_key_in             IN pat_rcm_h.crm_key%TYPE DEFAULT NULL,
        crm_key_nin            IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_patient_in          => id_patient_in,
            id_institution_in      => id_institution_in,
            id_rcm_in              => id_rcm_in,
            id_rcm_det_in          => id_rcm_det_in,
            dt_status_in           => dt_status_in,
            id_rcm_det_h_in        => id_rcm_det_h_in,
            id_workflow_in         => id_workflow_in,
            id_workflow_nin        => id_workflow_nin,
            id_status_in           => id_status_in,
            id_status_nin          => id_status_nin,
            id_workflow_action_in  => id_workflow_action_in,
            id_workflow_action_nin => id_workflow_action_nin,
            id_prof_status_in      => id_prof_status_in,
            id_prof_status_nin     => id_prof_status_nin,
            id_epis_created_in     => id_epis_created_in,
            id_epis_created_nin    => id_epis_created_nin,
            notes_in               => notes_in,
            notes_nin              => notes_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            crm_key_in             => crm_key_in,
            crm_key_nin            => crm_key_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_workflow_in         IN pat_rcm_h.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin        IN BOOLEAN := TRUE,
        id_status_in           IN pat_rcm_h.id_status%TYPE DEFAULT NULL,
        id_status_nin          IN BOOLEAN := TRUE,
        id_workflow_action_in  IN pat_rcm_h.id_workflow_action%TYPE DEFAULT NULL,
        id_workflow_action_nin IN BOOLEAN := TRUE,
        id_prof_status_in      IN pat_rcm_h.id_prof_status%TYPE DEFAULT NULL,
        id_prof_status_nin     IN BOOLEAN := TRUE,
        id_epis_created_in     IN pat_rcm_h.id_epis_created%TYPE DEFAULT NULL,
        id_epis_created_nin    IN BOOLEAN := TRUE,
        notes_in               IN pat_rcm_h.notes%TYPE DEFAULT NULL,
        notes_nin              IN BOOLEAN := TRUE,
        create_user_in         IN pat_rcm_h.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pat_rcm_h.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pat_rcm_h.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pat_rcm_h.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN pat_rcm_h.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pat_rcm_h.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        crm_key_in             IN pat_rcm_h.crm_key%TYPE DEFAULT NULL,
        crm_key_nin            IN BOOLEAN := TRUE,
        where_in               VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_id_workflow_n        NUMBER(1);
        l_id_status_n          NUMBER(1);
        l_id_workflow_action_n NUMBER(1);
        l_id_prof_status_n     NUMBER(1);
        l_id_epis_created_n    NUMBER(1);
        l_notes_n              NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        l_crm_key_n            NUMBER(1);
        id_patient_in          pat_rcm_h.id_patient%TYPE;
        id_institution_in      pat_rcm_h.id_institution%TYPE;
        id_rcm_in              pat_rcm_h.id_rcm%TYPE;
        id_rcm_det_in          pat_rcm_h.id_rcm_det%TYPE;
        dt_status_in           pat_rcm_h.dt_status%TYPE;
        id_rcm_det_h_in        pat_rcm_h.id_rcm_det_h%TYPE;
    BEGIN
    
        l_id_workflow_n        := sys.diutil.bool_to_int(id_workflow_nin);
        l_id_status_n          := sys.diutil.bool_to_int(id_status_nin);
        l_id_workflow_action_n := sys.diutil.bool_to_int(id_workflow_action_nin);
        l_id_prof_status_n     := sys.diutil.bool_to_int(id_prof_status_nin);
        l_id_epis_created_n    := sys.diutil.bool_to_int(id_epis_created_nin);
        l_notes_n              := sys.diutil.bool_to_int(notes_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_crm_key_n            := sys.diutil.bool_to_int(crm_key_nin);
    
        l_sql := 'UPDATE PAT_RCM_H SET ' || ' ID_WORKFLOW = decode (' || l_id_workflow_n ||
                 ',0,:id_workflow_in, NVL (:id_workflow_in, ID_WORKFLOW)) ' || ',' || ' ID_STATUS = decode (' ||
                 l_id_status_n || ',0,:id_status_in, NVL (:id_status_in, ID_STATUS)) ' || ',' ||
                 ' ID_WORKFLOW_ACTION = decode (' || l_id_workflow_action_n ||
                 ',0,:id_workflow_action_in, NVL (:id_workflow_action_in, ID_WORKFLOW_ACTION)) ' || ',' ||
                 ' ID_PROF_STATUS = decode (' || l_id_prof_status_n ||
                 ',0,:id_prof_status_in, NVL (:id_prof_status_in, ID_PROF_STATUS)) ' || ',' ||
                 ' ID_EPIS_CREATED = decode (' || l_id_epis_created_n ||
                 ',0,:id_epis_created_in, NVL (:id_epis_created_in, ID_EPIS_CREATED)) ' || ',' || ' NOTES = decode (' ||
                 l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' CRM_KEY = decode (' || l_crm_key_n || ',0,:crm_key_in, NVL (:crm_key_in, CRM_KEY)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_workflow_in, id_status_in, id_workflow_action_in, id_prof_status_in, id_epis_created_in, notes_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, crm_key_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_RCM_H');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    IF l_name = 'PRH_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_CREATED',
                                                        value_in           => id_epis_created_in);
                    END IF;
                    IF l_name = 'PRH_INN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PRH_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_STATUS',
                                                        value_in           => id_prof_status_in);
                    END IF;
                    IF l_name = 'PRH_WSW_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WORKFLOW',
                                                        value_in           => id_workflow_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_STATUS',
                                                        value_in           => id_status_in);
                    END IF;
                    IF l_name = 'PRH_WWN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WORKFLOW_ACTION',
                                                        value_in           => id_workflow_action_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_workflow_in         IN pat_rcm_h.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin        IN BOOLEAN := TRUE,
        id_status_in           IN pat_rcm_h.id_status%TYPE DEFAULT NULL,
        id_status_nin          IN BOOLEAN := TRUE,
        id_workflow_action_in  IN pat_rcm_h.id_workflow_action%TYPE DEFAULT NULL,
        id_workflow_action_nin IN BOOLEAN := TRUE,
        id_prof_status_in      IN pat_rcm_h.id_prof_status%TYPE DEFAULT NULL,
        id_prof_status_nin     IN BOOLEAN := TRUE,
        id_epis_created_in     IN pat_rcm_h.id_epis_created%TYPE DEFAULT NULL,
        id_epis_created_nin    IN BOOLEAN := TRUE,
        notes_in               IN pat_rcm_h.notes%TYPE DEFAULT NULL,
        notes_nin              IN BOOLEAN := TRUE,
        create_user_in         IN pat_rcm_h.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pat_rcm_h.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pat_rcm_h.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pat_rcm_h.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN pat_rcm_h.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pat_rcm_h.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        crm_key_in             IN pat_rcm_h.crm_key%TYPE DEFAULT NULL,
        crm_key_nin            IN BOOLEAN := TRUE,
        where_in               VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_workflow_in         => id_workflow_in,
            id_workflow_nin        => id_workflow_nin,
            id_status_in           => id_status_in,
            id_status_nin          => id_status_nin,
            id_workflow_action_in  => id_workflow_action_in,
            id_workflow_action_nin => id_workflow_action_nin,
            id_prof_status_in      => id_prof_status_in,
            id_prof_status_nin     => id_prof_status_nin,
            id_epis_created_in     => id_epis_created_in,
            id_epis_created_nin    => id_epis_created_nin,
            notes_in               => notes_in,
            notes_nin              => notes_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            crm_key_in             => crm_key_in,
            crm_key_nin            => crm_key_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_rcm_h%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_patient_in         => rec_in.id_patient,
            id_rcm_in             => rec_in.id_rcm,
            id_rcm_det_in         => rec_in.id_rcm_det,
            dt_status_in          => rec_in.dt_status,
            id_rcm_det_h_in       => rec_in.id_rcm_det_h,
            id_workflow_in        => rec_in.id_workflow,
            id_status_in          => rec_in.id_status,
            id_workflow_action_in => rec_in.id_workflow_action,
            id_prof_status_in     => rec_in.id_prof_status,
            id_epis_created_in    => rec_in.id_epis_created,
            notes_in              => rec_in.notes,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            id_institution_in     => rec_in.id_institution,
            crm_key_in            => rec_in.crm_key
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_rcm_h%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_patient_in         => rec_in.id_patient,
            id_rcm_in             => rec_in.id_rcm,
            id_rcm_det_in         => rec_in.id_rcm_det,
            dt_status_in          => rec_in.dt_status,
            id_rcm_det_h_in       => rec_in.id_rcm_det_h,
            id_workflow_in        => rec_in.id_workflow,
            id_status_in          => rec_in.id_status,
            id_workflow_action_in => rec_in.id_workflow_action,
            id_prof_status_in     => rec_in.id_prof_status,
            id_epis_created_in    => rec_in.id_epis_created,
            notes_in              => rec_in.notes,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            id_institution_in     => rec_in.id_institution,
            crm_key_in            => rec_in.crm_key
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_patient_in         IN pat_rcm_h.id_patient%TYPE,
        id_institution_in     IN pat_rcm_h.id_institution%TYPE,
        id_rcm_in             IN pat_rcm_h.id_rcm%TYPE,
        id_rcm_det_in         IN pat_rcm_h.id_rcm_det%TYPE,
        dt_status_in          IN pat_rcm_h.dt_status%TYPE,
        id_rcm_det_h_in       IN pat_rcm_h.id_rcm_det_h%TYPE,
        id_workflow_in        IN pat_rcm_h.id_workflow%TYPE DEFAULT NULL,
        id_status_in          IN pat_rcm_h.id_status%TYPE DEFAULT NULL,
        id_workflow_action_in IN pat_rcm_h.id_workflow_action%TYPE DEFAULT NULL,
        id_prof_status_in     IN pat_rcm_h.id_prof_status%TYPE DEFAULT NULL,
        id_epis_created_in    IN pat_rcm_h.id_epis_created%TYPE DEFAULT NULL,
        notes_in              IN pat_rcm_h.notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_rcm_h.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_rcm_h.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_rcm_h.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_rcm_h.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_rcm_h.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_rcm_h.update_institution%TYPE DEFAULT NULL,
        crm_key_in            IN pat_rcm_h.crm_key%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        upd(id_patient_in         => id_patient_in,
            id_institution_in     => id_institution_in,
            id_rcm_in             => id_rcm_in,
            id_rcm_det_in         => id_rcm_det_in,
            dt_status_in          => dt_status_in,
            id_rcm_det_h_in       => id_rcm_det_h_in,
            id_workflow_in        => id_workflow_in,
            id_status_in          => id_status_in,
            id_workflow_action_in => id_workflow_action_in,
            id_prof_status_in     => id_prof_status_in,
            id_epis_created_in    => id_epis_created_in,
            notes_in              => notes_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            crm_key_in            => crm_key_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_patient_in         => id_patient_in,
                id_institution_in     => id_institution_in,
                id_rcm_in             => id_rcm_in,
                id_rcm_det_in         => id_rcm_det_in,
                dt_status_in          => dt_status_in,
                id_rcm_det_h_in       => id_rcm_det_h_in,
                id_workflow_in        => id_workflow_in,
                id_status_in          => id_status_in,
                id_workflow_action_in => id_workflow_action_in,
                id_prof_status_in     => id_prof_status_in,
                id_epis_created_in    => id_epis_created_in,
                notes_in              => notes_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_time_in        => update_time_in,
                update_institution_in => update_institution_in,
                crm_key_in            => crm_key_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_patient_in         IN pat_rcm_h.id_patient%TYPE,
        id_institution_in     IN pat_rcm_h.id_institution%TYPE,
        id_rcm_in             IN pat_rcm_h.id_rcm%TYPE,
        id_rcm_det_in         IN pat_rcm_h.id_rcm_det%TYPE,
        dt_status_in          IN pat_rcm_h.dt_status%TYPE,
        id_rcm_det_h_in       IN pat_rcm_h.id_rcm_det_h%TYPE,
        id_workflow_in        IN pat_rcm_h.id_workflow%TYPE DEFAULT NULL,
        id_status_in          IN pat_rcm_h.id_status%TYPE DEFAULT NULL,
        id_workflow_action_in IN pat_rcm_h.id_workflow_action%TYPE DEFAULT NULL,
        id_prof_status_in     IN pat_rcm_h.id_prof_status%TYPE DEFAULT NULL,
        id_epis_created_in    IN pat_rcm_h.id_epis_created%TYPE DEFAULT NULL,
        notes_in              IN pat_rcm_h.notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_rcm_h.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_rcm_h.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_rcm_h.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_rcm_h.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_rcm_h.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_rcm_h.update_institution%TYPE DEFAULT NULL,
        crm_key_in            IN pat_rcm_h.crm_key%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_patient_in,
                id_institution_in,
                id_rcm_in,
                id_rcm_det_in,
                dt_status_in,
                id_rcm_det_h_in,
                id_workflow_in,
                id_status_in,
                id_workflow_action_in,
                id_prof_status_in,
                id_epis_created_in,
                notes_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                crm_key_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pat_rcm_h_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_patient         id_patient_cc;
        l_id_rcm             id_rcm_cc;
        l_id_rcm_det         id_rcm_det_cc;
        l_dt_status          dt_status_cc;
        l_id_rcm_det_h       id_rcm_det_h_cc;
        l_id_workflow        id_workflow_cc;
        l_id_status          id_status_cc;
        l_id_workflow_action id_workflow_action_cc;
        l_id_prof_status     id_prof_status_cc;
        l_id_epis_created    id_epis_created_cc;
        l_notes              notes_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_time        update_time_cc;
        l_update_institution update_institution_cc;
        l_id_institution     id_institution_cc;
        l_crm_key            crm_key_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_patient(i) := col_in(i).id_patient;
            l_id_rcm(i) := col_in(i).id_rcm;
            l_id_rcm_det(i) := col_in(i).id_rcm_det;
            l_dt_status(i) := col_in(i).dt_status;
            l_id_rcm_det_h(i) := col_in(i).id_rcm_det_h;
            l_id_workflow(i) := col_in(i).id_workflow;
            l_id_status(i) := col_in(i).id_status;
            l_id_workflow_action(i) := col_in(i).id_workflow_action;
            l_id_prof_status(i) := col_in(i).id_prof_status;
            l_id_epis_created(i) := col_in(i).id_epis_created;
            l_notes(i) := col_in(i).notes;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_institution(i) := col_in(i).id_institution;
            l_crm_key(i) := col_in(i).crm_key;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE pat_rcm_h
                   SET id_workflow        = nvl(l_id_workflow(i), id_workflow),
                       id_status          = nvl(l_id_status(i), id_status),
                       id_workflow_action = nvl(l_id_workflow_action(i), id_workflow_action),
                       id_prof_status     = nvl(l_id_prof_status(i), id_prof_status),
                       id_epis_created    = nvl(l_id_epis_created(i), id_epis_created),
                       notes              = nvl(l_notes(i), notes),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution),
                       crm_key            = nvl(l_crm_key(i), crm_key)
                 WHERE id_patient = l_id_patient(i)
                   AND id_institution = l_id_institution(i)
                   AND id_rcm = l_id_rcm(i)
                   AND id_rcm_det = l_id_rcm_det(i)
                   AND dt_status = l_dt_status(i)
                   AND id_rcm_det_h = l_id_rcm_det_h(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE pat_rcm_h
                   SET id_workflow        = l_id_workflow(i),
                       id_status          = l_id_status(i),
                       id_workflow_action = l_id_workflow_action(i),
                       id_prof_status     = l_id_prof_status(i),
                       id_epis_created    = l_id_epis_created(i),
                       notes              = l_notes(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i),
                       crm_key            = l_crm_key(i)
                 WHERE id_patient = l_id_patient(i)
                   AND id_institution = l_id_institution(i)
                   AND id_rcm = l_id_rcm(i)
                   AND id_rcm_det = l_id_rcm_det(i)
                   AND dt_status = l_dt_status(i)
                   AND id_rcm_det_h = l_id_rcm_det_h(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pat_rcm_h_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PAT_RCM_H
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PAT_RCM_H
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_RCM_H set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PAT_RCM_H set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_patient_in     IN pat_rcm_h.id_patient%TYPE,
        id_institution_in IN pat_rcm_h.id_institution%TYPE,
        id_rcm_in         IN pat_rcm_h.id_rcm%TYPE,
        id_rcm_det_in     IN pat_rcm_h.id_rcm_det%TYPE,
        dt_status_in      IN pat_rcm_h.dt_status%TYPE,
        id_rcm_det_h_in   IN pat_rcm_h.id_rcm_det_h%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_rcm_h
         WHERE id_patient = id_patient_in
           AND id_institution = id_institution_in
           AND id_rcm = id_rcm_in
           AND id_rcm_det = id_rcm_det_in
           AND dt_status = dt_status_in
           AND id_rcm_det_h = id_rcm_det_h_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_patient_in     IN pat_rcm_h.id_patient%TYPE,
        id_institution_in IN pat_rcm_h.id_institution%TYPE,
        id_rcm_in         IN pat_rcm_h.id_rcm%TYPE,
        id_rcm_det_in     IN pat_rcm_h.id_rcm_det%TYPE,
        dt_status_in      IN pat_rcm_h.dt_status%TYPE,
        id_rcm_det_h_in   IN pat_rcm_h.id_rcm_det_h%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_patient_in     => id_patient_in,
            id_institution_in => id_institution_in,
            id_rcm_in         => id_rcm_in,
            id_rcm_det_in     => id_rcm_det_in,
            dt_status_in      => dt_status_in,
            id_rcm_det_h_in   => id_rcm_det_h_in,
            handle_error_in   => handle_error_in,
            rows_out          => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PATIENT
    PROCEDURE del_id_patient
    (
        id_patient_in   IN pat_rcm_h.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_rcm_h
         WHERE id_patient = id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_patient;

    -- Delete all rows for primary key column ID_INSTITUTION
    PROCEDURE del_id_institution
    (
        id_institution_in IN pat_rcm_h.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_rcm_h
         WHERE id_institution = id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_institution;

    -- Delete all rows for primary key column ID_RCM
    PROCEDURE del_id_rcm
    (
        id_rcm_in       IN pat_rcm_h.id_rcm%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_rcm_h
         WHERE id_rcm = id_rcm_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_rcm;

    -- Delete all rows for primary key column ID_RCM_DET
    PROCEDURE del_id_rcm_det
    (
        id_rcm_det_in   IN pat_rcm_h.id_rcm_det%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_rcm_h
         WHERE id_rcm_det = id_rcm_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_rcm_det;

    -- Delete all rows for primary key column DT_STATUS
    PROCEDURE del_dt_status
    (
        dt_status_in    IN pat_rcm_h.dt_status%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_rcm_h
         WHERE dt_status = dt_status_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_dt_status;

    -- Delete all rows for primary key column ID_RCM_DET_H
    PROCEDURE del_id_rcm_det_h
    (
        id_rcm_det_h_in IN pat_rcm_h.id_rcm_det_h%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_rcm_h
         WHERE id_rcm_det_h = id_rcm_det_h_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_rcm_det_h;

    -- Delete all rows for primary key column ID_PATIENT
    PROCEDURE del_id_patient
    (
        id_patient_in   IN pat_rcm_h.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_patient(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_patient;

    -- Delete all rows for primary key column ID_INSTITUTION
    PROCEDURE del_id_institution
    (
        id_institution_in IN pat_rcm_h.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_institution(id_institution_in => id_institution_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_id_institution;

    -- Delete all rows for primary key column ID_RCM
    PROCEDURE del_id_rcm
    (
        id_rcm_in       IN pat_rcm_h.id_rcm%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_rcm(id_rcm_in => id_rcm_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_rcm;

    -- Delete all rows for primary key column ID_RCM_DET
    PROCEDURE del_id_rcm_det
    (
        id_rcm_det_in   IN pat_rcm_h.id_rcm_det%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_rcm_det(id_rcm_det_in => id_rcm_det_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_rcm_det;

    -- Delete all rows for primary key column DT_STATUS
    PROCEDURE del_dt_status
    (
        dt_status_in    IN pat_rcm_h.dt_status%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dt_status(dt_status_in => dt_status_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_dt_status;

    -- Delete all rows for primary key column ID_RCM_DET_H
    PROCEDURE del_id_rcm_det_h
    (
        id_rcm_det_h_in IN pat_rcm_h.id_rcm_det_h%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_rcm_det_h(id_rcm_det_h_in => id_rcm_det_h_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_rcm_det_h;

    PROCEDURE del_prh_epis_fk
    (
        id_epis_created_in IN pat_rcm_h.id_epis_created%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_rcm_h
         WHERE id_epis_created = del_prh_epis_fk.id_epis_created_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prh_epis_fk;

    PROCEDURE del_prh_epis_fk
    (
        id_epis_created_in IN pat_rcm_h.id_epis_created%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prh_epis_fk(id_epis_created_in => id_epis_created_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_prh_epis_fk;

    PROCEDURE del_prh_inn_fk
    (
        id_institution_in IN pat_rcm_h.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_rcm_h
         WHERE id_institution = del_prh_inn_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prh_inn_fk;

    PROCEDURE del_prh_inn_fk
    (
        id_institution_in IN pat_rcm_h.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prh_inn_fk(id_institution_in => id_institution_in,
                       handle_error_in   => handle_error_in,
                       rows_out          => rows_out);
    END del_prh_inn_fk;

    PROCEDURE del_prh_prof_fk
    (
        id_prof_status_in IN pat_rcm_h.id_prof_status%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_rcm_h
         WHERE id_prof_status = del_prh_prof_fk.id_prof_status_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prh_prof_fk;

    PROCEDURE del_prh_prof_fk
    (
        id_prof_status_in IN pat_rcm_h.id_prof_status%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prh_prof_fk(id_prof_status_in => id_prof_status_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_prh_prof_fk;

    PROCEDURE del_prh_wsw_fk
    (
        id_workflow_in  IN pat_rcm_h.id_workflow%TYPE,
        id_status_in    IN pat_rcm_h.id_status%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_rcm_h
         WHERE id_workflow = del_prh_wsw_fk.id_workflow_in
           AND id_status = del_prh_wsw_fk.id_status_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prh_wsw_fk;

    PROCEDURE del_prh_wsw_fk
    (
        id_workflow_in  IN pat_rcm_h.id_workflow%TYPE,
        id_status_in    IN pat_rcm_h.id_status%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prh_wsw_fk(id_workflow_in  => id_workflow_in,
                       id_status_in    => id_status_in,
                       handle_error_in => handle_error_in,
                       rows_out        => rows_out);
    END del_prh_wsw_fk;

    PROCEDURE del_prh_wwn_fk
    (
        id_workflow_action_in IN pat_rcm_h.id_workflow_action%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_rcm_h
         WHERE id_workflow_action = del_prh_wwn_fk.id_workflow_action_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prh_wwn_fk;

    PROCEDURE del_prh_wwn_fk
    (
        id_workflow_action_in IN pat_rcm_h.id_workflow_action%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prh_wwn_fk(id_workflow_action_in => id_workflow_action_in,
                       handle_error_in       => handle_error_in,
                       rows_out              => rows_out);
    END del_prh_wwn_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PAT_RCM_H';
        ELSE
            RETURN 'DELETE FROM PAT_RCM_H WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_RCM_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_RCM_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pat_rcm_h_inout IN OUT pat_rcm_h%ROWTYPE) IS
    BEGIN
        pat_rcm_h_inout.id_patient         := NULL;
        pat_rcm_h_inout.id_rcm             := NULL;
        pat_rcm_h_inout.id_rcm_det         := NULL;
        pat_rcm_h_inout.dt_status          := NULL;
        pat_rcm_h_inout.id_rcm_det_h       := NULL;
        pat_rcm_h_inout.id_workflow        := NULL;
        pat_rcm_h_inout.id_status          := NULL;
        pat_rcm_h_inout.id_workflow_action := NULL;
        pat_rcm_h_inout.id_prof_status     := NULL;
        pat_rcm_h_inout.id_epis_created    := NULL;
        pat_rcm_h_inout.notes              := NULL;
        pat_rcm_h_inout.create_user        := NULL;
        pat_rcm_h_inout.create_time        := NULL;
        pat_rcm_h_inout.create_institution := NULL;
        pat_rcm_h_inout.update_user        := NULL;
        pat_rcm_h_inout.update_time        := NULL;
        pat_rcm_h_inout.update_institution := NULL;
        pat_rcm_h_inout.id_institution     := NULL;
        pat_rcm_h_inout.crm_key            := NULL;
    END initrec;

    FUNCTION initrec RETURN pat_rcm_h%ROWTYPE IS
        l_pat_rcm_h pat_rcm_h%ROWTYPE;
    BEGIN
        RETURN l_pat_rcm_h;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pat_rcm_h_tc IS
        data pat_rcm_h_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pat_rcm_h
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pat_rcm_h_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pat_rcm_h_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pat_rcm_h;
/
