/*-- Last Change Revision: $Rev: 1666929 $*/
/*-- Last Change by: $Author: nuno.alves $*/
/*-- Date of last change: $Date: 2014-12-01 14:43:05 +0000 (seg, 01 dez 2014) $*/
CREATE OR REPLACE PACKAGE BODY ts_pn_area_soft_inst
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Novembro 13, 2014 15:52:20
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_software_in            IN pn_area_soft_inst.id_software%TYPE,
        id_institution_in         IN pn_area_soft_inst.id_institution%TYPE,
        id_pn_area_in             IN pn_area_soft_inst.id_pn_area%TYPE,
        id_department_in          IN pn_area_soft_inst.id_department%TYPE,
        id_dep_clin_serv_in       IN pn_area_soft_inst.id_dep_clin_serv%TYPE,
        nr_rec_page_summary_in    IN pn_area_soft_inst.nr_rec_page_summary%TYPE DEFAULT 5,
        data_sort_summary_in      IN pn_area_soft_inst.data_sort_summary%TYPE DEFAULT 'DESC',
        nr_rec_page_hist_in       IN pn_area_soft_inst.nr_rec_page_hist%TYPE DEFAULT 5,
        flg_report_title_type_in  IN pn_area_soft_inst.flg_report_title_type%TYPE DEFAULT 'B',
        flg_available_in          IN pn_area_soft_inst.flg_available%TYPE DEFAULT 'Y',
        create_user_in            IN pn_area_soft_inst.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pn_area_soft_inst.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pn_area_soft_inst.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pn_area_soft_inst.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pn_area_soft_inst.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pn_area_soft_inst.update_institution%TYPE DEFAULT NULL,
        summary_default_filter_in IN pn_area_soft_inst.summary_default_filter%TYPE DEFAULT 'N',
        time_to_close_note_in     IN pn_area_soft_inst.time_to_close_note%TYPE DEFAULT NULL,
        time_to_start_docum_in    IN pn_area_soft_inst.time_to_start_docum%TYPE DEFAULT NULL,
        id_report_in              IN pn_area_soft_inst.id_report%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pn_area_soft_inst
            (id_pn_area,
             id_software,
             id_institution,
             id_department,
             id_dep_clin_serv,
             nr_rec_page_summary,
             data_sort_summary,
             nr_rec_page_hist,
             flg_report_title_type,
             flg_available,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             summary_default_filter,
             time_to_close_note,
             time_to_start_docum,
             id_report)
        VALUES
            (id_pn_area_in,
             id_software_in,
             id_institution_in,
             id_department_in,
             id_dep_clin_serv_in,
             nr_rec_page_summary_in,
             data_sort_summary_in,
             nr_rec_page_hist_in,
             flg_report_title_type_in,
             flg_available_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             summary_default_filter_in,
             time_to_close_note_in,
             time_to_start_docum_in,
             id_report_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PN_AREA_SOFT_INST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    IF l_name = 'PNASI_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'PNASI_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PNASI_PNA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PN_AREA',
                                                        value_in           => id_pn_area_in);
                    END IF;
                    IF l_name = 'PNASI_S_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    IF l_name = 'PNTA_DEP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEPARTMENT',
                                                        value_in           => id_department_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_software_in            IN pn_area_soft_inst.id_software%TYPE,
        id_institution_in         IN pn_area_soft_inst.id_institution%TYPE,
        id_pn_area_in             IN pn_area_soft_inst.id_pn_area%TYPE,
        id_department_in          IN pn_area_soft_inst.id_department%TYPE,
        id_dep_clin_serv_in       IN pn_area_soft_inst.id_dep_clin_serv%TYPE,
        nr_rec_page_summary_in    IN pn_area_soft_inst.nr_rec_page_summary%TYPE DEFAULT 5,
        data_sort_summary_in      IN pn_area_soft_inst.data_sort_summary%TYPE DEFAULT 'DESC',
        nr_rec_page_hist_in       IN pn_area_soft_inst.nr_rec_page_hist%TYPE DEFAULT 5,
        flg_report_title_type_in  IN pn_area_soft_inst.flg_report_title_type%TYPE DEFAULT 'B',
        flg_available_in          IN pn_area_soft_inst.flg_available%TYPE DEFAULT 'Y',
        create_user_in            IN pn_area_soft_inst.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pn_area_soft_inst.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pn_area_soft_inst.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pn_area_soft_inst.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pn_area_soft_inst.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pn_area_soft_inst.update_institution%TYPE DEFAULT NULL,
        summary_default_filter_in IN pn_area_soft_inst.summary_default_filter%TYPE DEFAULT 'N',
        time_to_close_note_in     IN pn_area_soft_inst.time_to_close_note%TYPE DEFAULT NULL,
        time_to_start_docum_in    IN pn_area_soft_inst.time_to_start_docum%TYPE DEFAULT NULL,
        id_report_in              IN pn_area_soft_inst.id_report%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_software_in            => id_software_in,
            id_institution_in         => id_institution_in,
            id_pn_area_in             => id_pn_area_in,
            id_department_in          => id_department_in,
            id_dep_clin_serv_in       => id_dep_clin_serv_in,
            nr_rec_page_summary_in    => nr_rec_page_summary_in,
            data_sort_summary_in      => data_sort_summary_in,
            nr_rec_page_hist_in       => nr_rec_page_hist_in,
            flg_report_title_type_in  => flg_report_title_type_in,
            flg_available_in          => flg_available_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            summary_default_filter_in => summary_default_filter_in,
            time_to_close_note_in     => time_to_close_note_in,
            time_to_start_docum_in    => time_to_start_docum_in,
            id_report_in              => id_report_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pn_area_soft_inst%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pn_area_soft_inst%ROWTYPE := rec_in;
    BEGIN
        ins(id_software_in            => l_rec.id_software,
            id_institution_in         => l_rec.id_institution,
            id_pn_area_in             => l_rec.id_pn_area,
            id_department_in          => l_rec.id_department,
            id_dep_clin_serv_in       => l_rec.id_dep_clin_serv,
            nr_rec_page_summary_in    => l_rec.nr_rec_page_summary,
            data_sort_summary_in      => l_rec.data_sort_summary,
            nr_rec_page_hist_in       => l_rec.nr_rec_page_hist,
            flg_report_title_type_in  => l_rec.flg_report_title_type,
            flg_available_in          => l_rec.flg_available,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            summary_default_filter_in => l_rec.summary_default_filter,
            time_to_close_note_in     => l_rec.time_to_close_note,
            time_to_start_docum_in    => l_rec.time_to_start_docum,
            id_report_in              => l_rec.id_report,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pn_area_soft_inst%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pn_area_soft_inst_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO pn_area_soft_inst
                    (id_pn_area,
                     id_software,
                     id_institution,
                     id_department,
                     id_dep_clin_serv,
                     nr_rec_page_summary,
                     data_sort_summary,
                     nr_rec_page_hist,
                     flg_report_title_type,
                     flg_available,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     summary_default_filter,
                     time_to_close_note,
                     time_to_start_docum,
                     id_report)
                VALUES
                    (rows_in(indx).id_pn_area,
                     rows_in(indx).id_software,
                     rows_in(indx).id_institution,
                     rows_in(indx).id_department,
                     rows_in(indx).id_dep_clin_serv,
                     rows_in(indx).nr_rec_page_summary,
                     rows_in(indx).data_sort_summary,
                     rows_in(indx).nr_rec_page_hist,
                     rows_in(indx).flg_report_title_type,
                     rows_in(indx).flg_available,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).summary_default_filter,
                     rows_in(indx).time_to_close_note,
                     rows_in(indx).time_to_start_docum,
                     rows_in(indx).id_report)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PN_AREA _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_pn_area,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_software,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DEPARTMENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_department,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_dep_clin_serv,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NR_REC_PAGE_SUMMARY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .nr_rec_page_summary,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DATA_SORT_SUMMARY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .data_sort_summary,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NR_REC_PAGE_HIST _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .nr_rec_page_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_REPORT_TITLE_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_report_title_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_available,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'SUMMARY_DEFAULT_FILTER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .summary_default_filter,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TIME_TO_CLOSE_NOTE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .time_to_close_note,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TIME_TO_START_DOCUM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .time_to_start_docum,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REPORT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_report,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PN_AREA_SOFT_INST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pn_area_soft_inst_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_software_in             IN pn_area_soft_inst.id_software%TYPE,
        id_institution_in          IN pn_area_soft_inst.id_institution%TYPE,
        id_pn_area_in              IN pn_area_soft_inst.id_pn_area%TYPE,
        id_department_in           IN pn_area_soft_inst.id_department%TYPE,
        id_dep_clin_serv_in        IN pn_area_soft_inst.id_dep_clin_serv%TYPE,
        nr_rec_page_summary_in     IN pn_area_soft_inst.nr_rec_page_summary%TYPE DEFAULT NULL,
        nr_rec_page_summary_nin    IN BOOLEAN := TRUE,
        data_sort_summary_in       IN pn_area_soft_inst.data_sort_summary%TYPE DEFAULT NULL,
        data_sort_summary_nin      IN BOOLEAN := TRUE,
        nr_rec_page_hist_in        IN pn_area_soft_inst.nr_rec_page_hist%TYPE DEFAULT NULL,
        nr_rec_page_hist_nin       IN BOOLEAN := TRUE,
        flg_report_title_type_in   IN pn_area_soft_inst.flg_report_title_type%TYPE DEFAULT NULL,
        flg_report_title_type_nin  IN BOOLEAN := TRUE,
        flg_available_in           IN pn_area_soft_inst.flg_available%TYPE DEFAULT NULL,
        flg_available_nin          IN BOOLEAN := TRUE,
        create_user_in             IN pn_area_soft_inst.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN pn_area_soft_inst.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN pn_area_soft_inst.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN pn_area_soft_inst.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN pn_area_soft_inst.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN pn_area_soft_inst.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        summary_default_filter_in  IN pn_area_soft_inst.summary_default_filter%TYPE DEFAULT NULL,
        summary_default_filter_nin IN BOOLEAN := TRUE,
        time_to_close_note_in      IN pn_area_soft_inst.time_to_close_note%TYPE DEFAULT NULL,
        time_to_close_note_nin     IN BOOLEAN := TRUE,
        time_to_start_docum_in     IN pn_area_soft_inst.time_to_start_docum%TYPE DEFAULT NULL,
        time_to_start_docum_nin    IN BOOLEAN := TRUE,
        id_report_in               IN pn_area_soft_inst.id_report%TYPE DEFAULT NULL,
        id_report_nin              IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_nr_rec_page_summary_n    NUMBER(1);
        l_data_sort_summary_n      NUMBER(1);
        l_nr_rec_page_hist_n       NUMBER(1);
        l_flg_report_title_type_n  NUMBER(1);
        l_flg_available_n          NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        l_summary_default_filter_n NUMBER(1);
        l_time_to_close_note_n     NUMBER(1);
        l_time_to_start_docum_n    NUMBER(1);
        l_id_report_n              NUMBER(1);
    BEGIN
    
        l_nr_rec_page_summary_n    := sys.diutil.bool_to_int(nr_rec_page_summary_nin);
        l_data_sort_summary_n      := sys.diutil.bool_to_int(data_sort_summary_nin);
        l_nr_rec_page_hist_n       := sys.diutil.bool_to_int(nr_rec_page_hist_nin);
        l_flg_report_title_type_n  := sys.diutil.bool_to_int(flg_report_title_type_nin);
        l_flg_available_n          := sys.diutil.bool_to_int(flg_available_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_summary_default_filter_n := sys.diutil.bool_to_int(summary_default_filter_nin);
        l_time_to_close_note_n     := sys.diutil.bool_to_int(time_to_close_note_nin);
        l_time_to_start_docum_n    := sys.diutil.bool_to_int(time_to_start_docum_nin);
        l_id_report_n              := sys.diutil.bool_to_int(id_report_nin);
    
        UPDATE pn_area_soft_inst
           SET nr_rec_page_summary    = decode(l_nr_rec_page_summary_n,
                                               0,
                                               nr_rec_page_summary_in,
                                               nvl(nr_rec_page_summary_in, nr_rec_page_summary)),
               data_sort_summary      = decode(l_data_sort_summary_n,
                                               0,
                                               data_sort_summary_in,
                                               nvl(data_sort_summary_in, data_sort_summary)),
               nr_rec_page_hist       = decode(l_nr_rec_page_hist_n,
                                               0,
                                               nr_rec_page_hist_in,
                                               nvl(nr_rec_page_hist_in, nr_rec_page_hist)),
               flg_report_title_type  = decode(l_flg_report_title_type_n,
                                               0,
                                               flg_report_title_type_in,
                                               nvl(flg_report_title_type_in, flg_report_title_type)),
               flg_available          = decode(l_flg_available_n,
                                               0,
                                               flg_available_in,
                                               nvl(flg_available_in, flg_available)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution)),
               summary_default_filter = decode(l_summary_default_filter_n,
                                               0,
                                               summary_default_filter_in,
                                               nvl(summary_default_filter_in, summary_default_filter)),
               time_to_close_note     = decode(l_time_to_close_note_n,
                                               0,
                                               time_to_close_note_in,
                                               nvl(time_to_close_note_in, time_to_close_note)),
               time_to_start_docum    = decode(l_time_to_start_docum_n,
                                               0,
                                               time_to_start_docum_in,
                                               nvl(time_to_start_docum_in, time_to_start_docum)),
               id_report              = decode(l_id_report_n, 0, id_report_in, nvl(id_report_in, id_report))
         WHERE id_software = id_software_in
           AND id_institution = id_institution_in
           AND id_pn_area = id_pn_area_in
           AND id_department = id_department_in
           AND id_dep_clin_serv = id_dep_clin_serv_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PN_AREA_SOFT_INST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    IF l_name = 'PNASI_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'PNASI_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PNASI_PNA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PN_AREA',
                                                        value_in           => id_pn_area_in);
                    END IF;
                    IF l_name = 'PNASI_S_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    IF l_name = 'PNTA_DEP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEPARTMENT',
                                                        value_in           => id_department_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_software_in             IN pn_area_soft_inst.id_software%TYPE,
        id_institution_in          IN pn_area_soft_inst.id_institution%TYPE,
        id_pn_area_in              IN pn_area_soft_inst.id_pn_area%TYPE,
        id_department_in           IN pn_area_soft_inst.id_department%TYPE,
        id_dep_clin_serv_in        IN pn_area_soft_inst.id_dep_clin_serv%TYPE,
        nr_rec_page_summary_in     IN pn_area_soft_inst.nr_rec_page_summary%TYPE DEFAULT NULL,
        nr_rec_page_summary_nin    IN BOOLEAN := TRUE,
        data_sort_summary_in       IN pn_area_soft_inst.data_sort_summary%TYPE DEFAULT NULL,
        data_sort_summary_nin      IN BOOLEAN := TRUE,
        nr_rec_page_hist_in        IN pn_area_soft_inst.nr_rec_page_hist%TYPE DEFAULT NULL,
        nr_rec_page_hist_nin       IN BOOLEAN := TRUE,
        flg_report_title_type_in   IN pn_area_soft_inst.flg_report_title_type%TYPE DEFAULT NULL,
        flg_report_title_type_nin  IN BOOLEAN := TRUE,
        flg_available_in           IN pn_area_soft_inst.flg_available%TYPE DEFAULT NULL,
        flg_available_nin          IN BOOLEAN := TRUE,
        create_user_in             IN pn_area_soft_inst.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN pn_area_soft_inst.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN pn_area_soft_inst.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN pn_area_soft_inst.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN pn_area_soft_inst.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN pn_area_soft_inst.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        summary_default_filter_in  IN pn_area_soft_inst.summary_default_filter%TYPE DEFAULT NULL,
        summary_default_filter_nin IN BOOLEAN := TRUE,
        time_to_close_note_in      IN pn_area_soft_inst.time_to_close_note%TYPE DEFAULT NULL,
        time_to_close_note_nin     IN BOOLEAN := TRUE,
        time_to_start_docum_in     IN pn_area_soft_inst.time_to_start_docum%TYPE DEFAULT NULL,
        time_to_start_docum_nin    IN BOOLEAN := TRUE,
        id_report_in               IN pn_area_soft_inst.id_report%TYPE DEFAULT NULL,
        id_report_nin              IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_software_in             => id_software_in,
            id_institution_in          => id_institution_in,
            id_pn_area_in              => id_pn_area_in,
            id_department_in           => id_department_in,
            id_dep_clin_serv_in        => id_dep_clin_serv_in,
            nr_rec_page_summary_in     => nr_rec_page_summary_in,
            nr_rec_page_summary_nin    => nr_rec_page_summary_nin,
            data_sort_summary_in       => data_sort_summary_in,
            data_sort_summary_nin      => data_sort_summary_nin,
            nr_rec_page_hist_in        => nr_rec_page_hist_in,
            nr_rec_page_hist_nin       => nr_rec_page_hist_nin,
            flg_report_title_type_in   => flg_report_title_type_in,
            flg_report_title_type_nin  => flg_report_title_type_nin,
            flg_available_in           => flg_available_in,
            flg_available_nin          => flg_available_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            summary_default_filter_in  => summary_default_filter_in,
            summary_default_filter_nin => summary_default_filter_nin,
            time_to_close_note_in      => time_to_close_note_in,
            time_to_close_note_nin     => time_to_close_note_nin,
            time_to_start_docum_in     => time_to_start_docum_in,
            time_to_start_docum_nin    => time_to_start_docum_nin,
            id_report_in               => id_report_in,
            id_report_nin              => id_report_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        nr_rec_page_summary_in     IN pn_area_soft_inst.nr_rec_page_summary%TYPE DEFAULT NULL,
        nr_rec_page_summary_nin    IN BOOLEAN := TRUE,
        data_sort_summary_in       IN pn_area_soft_inst.data_sort_summary%TYPE DEFAULT NULL,
        data_sort_summary_nin      IN BOOLEAN := TRUE,
        nr_rec_page_hist_in        IN pn_area_soft_inst.nr_rec_page_hist%TYPE DEFAULT NULL,
        nr_rec_page_hist_nin       IN BOOLEAN := TRUE,
        flg_report_title_type_in   IN pn_area_soft_inst.flg_report_title_type%TYPE DEFAULT NULL,
        flg_report_title_type_nin  IN BOOLEAN := TRUE,
        flg_available_in           IN pn_area_soft_inst.flg_available%TYPE DEFAULT NULL,
        flg_available_nin          IN BOOLEAN := TRUE,
        create_user_in             IN pn_area_soft_inst.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN pn_area_soft_inst.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN pn_area_soft_inst.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN pn_area_soft_inst.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN pn_area_soft_inst.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN pn_area_soft_inst.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        summary_default_filter_in  IN pn_area_soft_inst.summary_default_filter%TYPE DEFAULT NULL,
        summary_default_filter_nin IN BOOLEAN := TRUE,
        time_to_close_note_in      IN pn_area_soft_inst.time_to_close_note%TYPE DEFAULT NULL,
        time_to_close_note_nin     IN BOOLEAN := TRUE,
        time_to_start_docum_in     IN pn_area_soft_inst.time_to_start_docum%TYPE DEFAULT NULL,
        time_to_start_docum_nin    IN BOOLEAN := TRUE,
        id_report_in               IN pn_area_soft_inst.id_report%TYPE DEFAULT NULL,
        id_report_nin              IN BOOLEAN := TRUE,
        where_in                   VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_nr_rec_page_summary_n    NUMBER(1);
        l_data_sort_summary_n      NUMBER(1);
        l_nr_rec_page_hist_n       NUMBER(1);
        l_flg_report_title_type_n  NUMBER(1);
        l_flg_available_n          NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        l_summary_default_filter_n NUMBER(1);
        l_time_to_close_note_n     NUMBER(1);
        l_time_to_start_docum_n    NUMBER(1);
        l_id_report_n              NUMBER(1);
        id_software_in             pn_area_soft_inst.id_software%TYPE;
        id_institution_in          pn_area_soft_inst.id_institution%TYPE;
        id_pn_area_in              pn_area_soft_inst.id_pn_area%TYPE;
        id_department_in           pn_area_soft_inst.id_department%TYPE;
        id_dep_clin_serv_in        pn_area_soft_inst.id_dep_clin_serv%TYPE;
    BEGIN
    
        l_nr_rec_page_summary_n    := sys.diutil.bool_to_int(nr_rec_page_summary_nin);
        l_data_sort_summary_n      := sys.diutil.bool_to_int(data_sort_summary_nin);
        l_nr_rec_page_hist_n       := sys.diutil.bool_to_int(nr_rec_page_hist_nin);
        l_flg_report_title_type_n  := sys.diutil.bool_to_int(flg_report_title_type_nin);
        l_flg_available_n          := sys.diutil.bool_to_int(flg_available_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_summary_default_filter_n := sys.diutil.bool_to_int(summary_default_filter_nin);
        l_time_to_close_note_n     := sys.diutil.bool_to_int(time_to_close_note_nin);
        l_time_to_start_docum_n    := sys.diutil.bool_to_int(time_to_start_docum_nin);
        l_id_report_n              := sys.diutil.bool_to_int(id_report_nin);
    
        l_sql := 'UPDATE PN_AREA_SOFT_INST SET ' || ' NR_REC_PAGE_SUMMARY = decode (' || l_nr_rec_page_summary_n ||
                 ',0,:nr_rec_page_summary_in, NVL (:nr_rec_page_summary_in, NR_REC_PAGE_SUMMARY)) ' || ',' ||
                 ' DATA_SORT_SUMMARY = decode (' || l_data_sort_summary_n ||
                 ',0,:data_sort_summary_in, NVL (:data_sort_summary_in, DATA_SORT_SUMMARY)) ' || ',' ||
                 ' NR_REC_PAGE_HIST = decode (' || l_nr_rec_page_hist_n ||
                 ',0,:nr_rec_page_hist_in, NVL (:nr_rec_page_hist_in, NR_REC_PAGE_HIST)) ' || ',' ||
                 ' FLG_REPORT_TITLE_TYPE = decode (' || l_flg_report_title_type_n ||
                 ',0,:flg_report_title_type_in, NVL (:flg_report_title_type_in, FLG_REPORT_TITLE_TYPE)) ' || ',' ||
                 ' FLG_AVAILABLE = decode (' || l_flg_available_n ||
                 ',0,:flg_available_in, NVL (:flg_available_in, FLG_AVAILABLE)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' SUMMARY_DEFAULT_FILTER = decode (' || l_summary_default_filter_n ||
                 ',0,:summary_default_filter_in, NVL (:summary_default_filter_in, SUMMARY_DEFAULT_FILTER)) ' || ',' ||
                 ' TIME_TO_CLOSE_NOTE = decode (' || l_time_to_close_note_n ||
                 ',0,:time_to_close_note_in, NVL (:time_to_close_note_in, TIME_TO_CLOSE_NOTE)) ' || ',' ||
                 ' TIME_TO_START_DOCUM = decode (' || l_time_to_start_docum_n ||
                 ',0,:time_to_start_docum_in, NVL (:time_to_start_docum_in, TIME_TO_START_DOCUM)) ' || ',' ||
                 ' ID_REPORT = decode (' || l_id_report_n || ',0,:id_report_in, NVL (:id_report_in, ID_REPORT)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN nr_rec_page_summary_in, data_sort_summary_in, nr_rec_page_hist_in, flg_report_title_type_in, flg_available_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, summary_default_filter_in, time_to_close_note_in, time_to_start_docum_in, id_report_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PN_AREA_SOFT_INST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    IF l_name = 'PNASI_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'PNASI_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PNASI_PNA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PN_AREA',
                                                        value_in           => id_pn_area_in);
                    END IF;
                    IF l_name = 'PNASI_S_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    IF l_name = 'PNTA_DEP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEPARTMENT',
                                                        value_in           => id_department_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        nr_rec_page_summary_in     IN pn_area_soft_inst.nr_rec_page_summary%TYPE DEFAULT NULL,
        nr_rec_page_summary_nin    IN BOOLEAN := TRUE,
        data_sort_summary_in       IN pn_area_soft_inst.data_sort_summary%TYPE DEFAULT NULL,
        data_sort_summary_nin      IN BOOLEAN := TRUE,
        nr_rec_page_hist_in        IN pn_area_soft_inst.nr_rec_page_hist%TYPE DEFAULT NULL,
        nr_rec_page_hist_nin       IN BOOLEAN := TRUE,
        flg_report_title_type_in   IN pn_area_soft_inst.flg_report_title_type%TYPE DEFAULT NULL,
        flg_report_title_type_nin  IN BOOLEAN := TRUE,
        flg_available_in           IN pn_area_soft_inst.flg_available%TYPE DEFAULT NULL,
        flg_available_nin          IN BOOLEAN := TRUE,
        create_user_in             IN pn_area_soft_inst.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN pn_area_soft_inst.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN pn_area_soft_inst.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN pn_area_soft_inst.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN pn_area_soft_inst.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN pn_area_soft_inst.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        summary_default_filter_in  IN pn_area_soft_inst.summary_default_filter%TYPE DEFAULT NULL,
        summary_default_filter_nin IN BOOLEAN := TRUE,
        time_to_close_note_in      IN pn_area_soft_inst.time_to_close_note%TYPE DEFAULT NULL,
        time_to_close_note_nin     IN BOOLEAN := TRUE,
        time_to_start_docum_in     IN pn_area_soft_inst.time_to_start_docum%TYPE DEFAULT NULL,
        time_to_start_docum_nin    IN BOOLEAN := TRUE,
        id_report_in               IN pn_area_soft_inst.id_report%TYPE DEFAULT NULL,
        id_report_nin              IN BOOLEAN := TRUE,
        where_in                   VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(nr_rec_page_summary_in     => nr_rec_page_summary_in,
            nr_rec_page_summary_nin    => nr_rec_page_summary_nin,
            data_sort_summary_in       => data_sort_summary_in,
            data_sort_summary_nin      => data_sort_summary_nin,
            nr_rec_page_hist_in        => nr_rec_page_hist_in,
            nr_rec_page_hist_nin       => nr_rec_page_hist_nin,
            flg_report_title_type_in   => flg_report_title_type_in,
            flg_report_title_type_nin  => flg_report_title_type_nin,
            flg_available_in           => flg_available_in,
            flg_available_nin          => flg_available_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            summary_default_filter_in  => summary_default_filter_in,
            summary_default_filter_nin => summary_default_filter_nin,
            time_to_close_note_in      => time_to_close_note_in,
            time_to_close_note_nin     => time_to_close_note_nin,
            time_to_start_docum_in     => time_to_start_docum_in,
            time_to_start_docum_nin    => time_to_start_docum_nin,
            id_report_in               => id_report_in,
            id_report_nin              => id_report_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pn_area_soft_inst%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_pn_area_in             => rec_in.id_pn_area,
            id_software_in            => rec_in.id_software,
            id_institution_in         => rec_in.id_institution,
            id_department_in          => rec_in.id_department,
            id_dep_clin_serv_in       => rec_in.id_dep_clin_serv,
            nr_rec_page_summary_in    => rec_in.nr_rec_page_summary,
            data_sort_summary_in      => rec_in.data_sort_summary,
            nr_rec_page_hist_in       => rec_in.nr_rec_page_hist,
            flg_report_title_type_in  => rec_in.flg_report_title_type,
            flg_available_in          => rec_in.flg_available,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            summary_default_filter_in => rec_in.summary_default_filter,
            time_to_close_note_in     => rec_in.time_to_close_note,
            time_to_start_docum_in    => rec_in.time_to_start_docum,
            id_report_in              => rec_in.id_report
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pn_area_soft_inst%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pn_area_in             => rec_in.id_pn_area,
            id_software_in            => rec_in.id_software,
            id_institution_in         => rec_in.id_institution,
            id_department_in          => rec_in.id_department,
            id_dep_clin_serv_in       => rec_in.id_dep_clin_serv,
            nr_rec_page_summary_in    => rec_in.nr_rec_page_summary,
            data_sort_summary_in      => rec_in.data_sort_summary,
            nr_rec_page_hist_in       => rec_in.nr_rec_page_hist,
            flg_report_title_type_in  => rec_in.flg_report_title_type,
            flg_available_in          => rec_in.flg_available,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            summary_default_filter_in => rec_in.summary_default_filter,
            time_to_close_note_in     => rec_in.time_to_close_note,
            time_to_start_docum_in    => rec_in.time_to_start_docum,
            id_report_in              => rec_in.id_report
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_software_in            IN pn_area_soft_inst.id_software%TYPE,
        id_institution_in         IN pn_area_soft_inst.id_institution%TYPE,
        id_pn_area_in             IN pn_area_soft_inst.id_pn_area%TYPE,
        id_department_in          IN pn_area_soft_inst.id_department%TYPE,
        id_dep_clin_serv_in       IN pn_area_soft_inst.id_dep_clin_serv%TYPE,
        nr_rec_page_summary_in    IN pn_area_soft_inst.nr_rec_page_summary%TYPE DEFAULT NULL,
        data_sort_summary_in      IN pn_area_soft_inst.data_sort_summary%TYPE DEFAULT NULL,
        nr_rec_page_hist_in       IN pn_area_soft_inst.nr_rec_page_hist%TYPE DEFAULT NULL,
        flg_report_title_type_in  IN pn_area_soft_inst.flg_report_title_type%TYPE DEFAULT NULL,
        flg_available_in          IN pn_area_soft_inst.flg_available%TYPE DEFAULT NULL,
        create_user_in            IN pn_area_soft_inst.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pn_area_soft_inst.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pn_area_soft_inst.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pn_area_soft_inst.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pn_area_soft_inst.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pn_area_soft_inst.update_institution%TYPE DEFAULT NULL,
        summary_default_filter_in IN pn_area_soft_inst.summary_default_filter%TYPE DEFAULT NULL,
        time_to_close_note_in     IN pn_area_soft_inst.time_to_close_note%TYPE DEFAULT NULL,
        time_to_start_docum_in    IN pn_area_soft_inst.time_to_start_docum%TYPE DEFAULT NULL,
        id_report_in              IN pn_area_soft_inst.id_report%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        upd(id_software_in            => id_software_in,
            id_institution_in         => id_institution_in,
            id_pn_area_in             => id_pn_area_in,
            id_department_in          => id_department_in,
            id_dep_clin_serv_in       => id_dep_clin_serv_in,
            nr_rec_page_summary_in    => nr_rec_page_summary_in,
            data_sort_summary_in      => data_sort_summary_in,
            nr_rec_page_hist_in       => nr_rec_page_hist_in,
            flg_report_title_type_in  => flg_report_title_type_in,
            flg_available_in          => flg_available_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            summary_default_filter_in => summary_default_filter_in,
            time_to_close_note_in     => time_to_close_note_in,
            time_to_start_docum_in    => time_to_start_docum_in,
            id_report_in              => id_report_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_software_in            => id_software_in,
                id_institution_in         => id_institution_in,
                id_pn_area_in             => id_pn_area_in,
                id_department_in          => id_department_in,
                id_dep_clin_serv_in       => id_dep_clin_serv_in,
                nr_rec_page_summary_in    => nr_rec_page_summary_in,
                data_sort_summary_in      => data_sort_summary_in,
                nr_rec_page_hist_in       => nr_rec_page_hist_in,
                flg_report_title_type_in  => flg_report_title_type_in,
                flg_available_in          => flg_available_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                summary_default_filter_in => summary_default_filter_in,
                time_to_close_note_in     => time_to_close_note_in,
                time_to_start_docum_in    => time_to_start_docum_in,
                id_report_in              => id_report_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_software_in            IN pn_area_soft_inst.id_software%TYPE,
        id_institution_in         IN pn_area_soft_inst.id_institution%TYPE,
        id_pn_area_in             IN pn_area_soft_inst.id_pn_area%TYPE,
        id_department_in          IN pn_area_soft_inst.id_department%TYPE,
        id_dep_clin_serv_in       IN pn_area_soft_inst.id_dep_clin_serv%TYPE,
        nr_rec_page_summary_in    IN pn_area_soft_inst.nr_rec_page_summary%TYPE DEFAULT NULL,
        data_sort_summary_in      IN pn_area_soft_inst.data_sort_summary%TYPE DEFAULT NULL,
        nr_rec_page_hist_in       IN pn_area_soft_inst.nr_rec_page_hist%TYPE DEFAULT NULL,
        flg_report_title_type_in  IN pn_area_soft_inst.flg_report_title_type%TYPE DEFAULT NULL,
        flg_available_in          IN pn_area_soft_inst.flg_available%TYPE DEFAULT NULL,
        create_user_in            IN pn_area_soft_inst.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pn_area_soft_inst.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pn_area_soft_inst.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pn_area_soft_inst.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pn_area_soft_inst.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pn_area_soft_inst.update_institution%TYPE DEFAULT NULL,
        summary_default_filter_in IN pn_area_soft_inst.summary_default_filter%TYPE DEFAULT NULL,
        time_to_close_note_in     IN pn_area_soft_inst.time_to_close_note%TYPE DEFAULT NULL,
        time_to_start_docum_in    IN pn_area_soft_inst.time_to_start_docum%TYPE DEFAULT NULL,
        id_report_in              IN pn_area_soft_inst.id_report%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_software_in,
                id_institution_in,
                id_pn_area_in,
                id_department_in,
                id_dep_clin_serv_in,
                nr_rec_page_summary_in,
                data_sort_summary_in,
                nr_rec_page_hist_in,
                flg_report_title_type_in,
                flg_available_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                summary_default_filter_in,
                time_to_close_note_in,
                time_to_start_docum_in,
                id_report_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pn_area_soft_inst_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_pn_area             id_pn_area_cc;
        l_id_software            id_software_cc;
        l_id_institution         id_institution_cc;
        l_id_department          id_department_cc;
        l_id_dep_clin_serv       id_dep_clin_serv_cc;
        l_nr_rec_page_summary    nr_rec_page_summary_cc;
        l_data_sort_summary      data_sort_summary_cc;
        l_nr_rec_page_hist       nr_rec_page_hist_cc;
        l_flg_report_title_type  flg_report_title_type_cc;
        l_flg_available          flg_available_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
        l_summary_default_filter summary_default_filter_cc;
        l_time_to_close_note     time_to_close_note_cc;
        l_time_to_start_docum    time_to_start_docum_cc;
        l_id_report              id_report_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_pn_area(i) := col_in(i).id_pn_area;
            l_id_software(i) := col_in(i).id_software;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_department(i) := col_in(i).id_department;
            l_id_dep_clin_serv(i) := col_in(i).id_dep_clin_serv;
            l_nr_rec_page_summary(i) := col_in(i).nr_rec_page_summary;
            l_data_sort_summary(i) := col_in(i).data_sort_summary;
            l_nr_rec_page_hist(i) := col_in(i).nr_rec_page_hist;
            l_flg_report_title_type(i) := col_in(i).flg_report_title_type;
            l_flg_available(i) := col_in(i).flg_available;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_summary_default_filter(i) := col_in(i).summary_default_filter;
            l_time_to_close_note(i) := col_in(i).time_to_close_note;
            l_time_to_start_docum(i) := col_in(i).time_to_start_docum;
            l_id_report(i) := col_in(i).id_report;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE pn_area_soft_inst
                   SET nr_rec_page_summary    = nvl(l_nr_rec_page_summary(i), nr_rec_page_summary),
                       data_sort_summary      = nvl(l_data_sort_summary(i), data_sort_summary),
                       nr_rec_page_hist       = nvl(l_nr_rec_page_hist(i), nr_rec_page_hist),
                       flg_report_title_type  = nvl(l_flg_report_title_type(i), flg_report_title_type),
                       flg_available          = nvl(l_flg_available(i), flg_available),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution),
                       summary_default_filter = nvl(l_summary_default_filter(i), summary_default_filter),
                       time_to_close_note     = nvl(l_time_to_close_note(i), time_to_close_note),
                       time_to_start_docum    = nvl(l_time_to_start_docum(i), time_to_start_docum),
                       id_report              = nvl(l_id_report(i), id_report)
                 WHERE id_software = l_id_software(i)
                   AND id_institution = l_id_institution(i)
                   AND id_pn_area = l_id_pn_area(i)
                   AND id_department = l_id_department(i)
                   AND id_dep_clin_serv = l_id_dep_clin_serv(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE pn_area_soft_inst
                   SET nr_rec_page_summary    = l_nr_rec_page_summary(i),
                       data_sort_summary      = l_data_sort_summary(i),
                       nr_rec_page_hist       = l_nr_rec_page_hist(i),
                       flg_report_title_type  = l_flg_report_title_type(i),
                       flg_available          = l_flg_available(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i),
                       summary_default_filter = l_summary_default_filter(i),
                       time_to_close_note     = l_time_to_close_note(i),
                       time_to_start_docum    = l_time_to_start_docum(i),
                       id_report              = l_id_report(i)
                 WHERE id_software = l_id_software(i)
                   AND id_institution = l_id_institution(i)
                   AND id_pn_area = l_id_pn_area(i)
                   AND id_department = l_id_department(i)
                   AND id_dep_clin_serv = l_id_dep_clin_serv(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pn_area_soft_inst_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PN_AREA_SOFT_INST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PN_AREA_SOFT_INST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PN_AREA_SOFT_INST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PN_AREA_SOFT_INST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_software_in      IN pn_area_soft_inst.id_software%TYPE,
        id_institution_in   IN pn_area_soft_inst.id_institution%TYPE,
        id_pn_area_in       IN pn_area_soft_inst.id_pn_area%TYPE,
        id_department_in    IN pn_area_soft_inst.id_department%TYPE,
        id_dep_clin_serv_in IN pn_area_soft_inst.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_area_soft_inst
         WHERE id_software = id_software_in
           AND id_institution = id_institution_in
           AND id_pn_area = id_pn_area_in
           AND id_department = id_department_in
           AND id_dep_clin_serv = id_dep_clin_serv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_software_in      IN pn_area_soft_inst.id_software%TYPE,
        id_institution_in   IN pn_area_soft_inst.id_institution%TYPE,
        id_pn_area_in       IN pn_area_soft_inst.id_pn_area%TYPE,
        id_department_in    IN pn_area_soft_inst.id_department%TYPE,
        id_dep_clin_serv_in IN pn_area_soft_inst.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_software_in      => id_software_in,
            id_institution_in   => id_institution_in,
            id_pn_area_in       => id_pn_area_in,
            id_department_in    => id_department_in,
            id_dep_clin_serv_in => id_dep_clin_serv_in,
            handle_error_in     => handle_error_in,
            rows_out            => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_SOFTWARE
    PROCEDURE del_id_software
    (
        id_software_in  IN pn_area_soft_inst.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_area_soft_inst
         WHERE id_software = id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_software;

    -- Delete all rows for primary key column ID_INSTITUTION
    PROCEDURE del_id_institution
    (
        id_institution_in IN pn_area_soft_inst.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_area_soft_inst
         WHERE id_institution = id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_institution;

    -- Delete all rows for primary key column ID_PN_AREA
    PROCEDURE del_id_pn_area
    (
        id_pn_area_in   IN pn_area_soft_inst.id_pn_area%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_area_soft_inst
         WHERE id_pn_area = id_pn_area_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_pn_area;

    -- Delete all rows for primary key column ID_DEPARTMENT
    PROCEDURE del_id_department
    (
        id_department_in IN pn_area_soft_inst.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_area_soft_inst
         WHERE id_department = id_department_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_department;

    -- Delete all rows for primary key column ID_DEP_CLIN_SERV
    PROCEDURE del_id_dep_clin_serv
    (
        id_dep_clin_serv_in IN pn_area_soft_inst.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_area_soft_inst
         WHERE id_dep_clin_serv = id_dep_clin_serv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_dep_clin_serv;

    -- Delete all rows for primary key column ID_SOFTWARE
    PROCEDURE del_id_software
    (
        id_software_in  IN pn_area_soft_inst.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_software(id_software_in => id_software_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_software;

    -- Delete all rows for primary key column ID_INSTITUTION
    PROCEDURE del_id_institution
    (
        id_institution_in IN pn_area_soft_inst.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_institution(id_institution_in => id_institution_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_id_institution;

    -- Delete all rows for primary key column ID_PN_AREA
    PROCEDURE del_id_pn_area
    (
        id_pn_area_in   IN pn_area_soft_inst.id_pn_area%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_pn_area(id_pn_area_in => id_pn_area_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_pn_area;

    -- Delete all rows for primary key column ID_DEPARTMENT
    PROCEDURE del_id_department
    (
        id_department_in IN pn_area_soft_inst.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_department(id_department_in => id_department_in,
                          handle_error_in  => handle_error_in,
                          rows_out         => rows_out);
    END del_id_department;

    -- Delete all rows for primary key column ID_DEP_CLIN_SERV
    PROCEDURE del_id_dep_clin_serv
    (
        id_dep_clin_serv_in IN pn_area_soft_inst.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_dep_clin_serv(id_dep_clin_serv_in => id_dep_clin_serv_in,
                             handle_error_in     => handle_error_in,
                             rows_out            => rows_out);
    END del_id_dep_clin_serv;

    PROCEDURE del_pnasi_dcs_fk
    (
        id_dep_clin_serv_in IN pn_area_soft_inst.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_area_soft_inst
         WHERE id_dep_clin_serv = del_pnasi_dcs_fk.id_dep_clin_serv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pnasi_dcs_fk;

    PROCEDURE del_pnasi_dcs_fk
    (
        id_dep_clin_serv_in IN pn_area_soft_inst.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pnasi_dcs_fk(id_dep_clin_serv_in => id_dep_clin_serv_in,
                         handle_error_in     => handle_error_in,
                         rows_out            => rows_out);
    END del_pnasi_dcs_fk;

    PROCEDURE del_pnasi_inst_fk
    (
        id_institution_in IN pn_area_soft_inst.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_area_soft_inst
         WHERE id_institution = del_pnasi_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pnasi_inst_fk;

    PROCEDURE del_pnasi_inst_fk
    (
        id_institution_in IN pn_area_soft_inst.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pnasi_inst_fk(id_institution_in => id_institution_in,
                          handle_error_in   => handle_error_in,
                          rows_out          => rows_out);
    END del_pnasi_inst_fk;

    PROCEDURE del_pnasi_pna_fk
    (
        id_pn_area_in   IN pn_area_soft_inst.id_pn_area%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_area_soft_inst
         WHERE id_pn_area = del_pnasi_pna_fk.id_pn_area_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pnasi_pna_fk;

    PROCEDURE del_pnasi_pna_fk
    (
        id_pn_area_in   IN pn_area_soft_inst.id_pn_area%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pnasi_pna_fk(id_pn_area_in => id_pn_area_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pnasi_pna_fk;

    PROCEDURE del_pnasi_s_fk
    (
        id_software_in  IN pn_area_soft_inst.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_area_soft_inst
         WHERE id_software = del_pnasi_s_fk.id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pnasi_s_fk;

    PROCEDURE del_pnasi_s_fk
    (
        id_software_in  IN pn_area_soft_inst.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pnasi_s_fk(id_software_in => id_software_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pnasi_s_fk;

    PROCEDURE del_pnta_dep_fk
    (
        id_department_in IN pn_area_soft_inst.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_area_soft_inst
         WHERE id_department = del_pnta_dep_fk.id_department_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pnta_dep_fk;

    PROCEDURE del_pnta_dep_fk
    (
        id_department_in IN pn_area_soft_inst.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pnta_dep_fk(id_department_in => id_department_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pnta_dep_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PN_AREA_SOFT_INST';
        ELSE
            RETURN 'DELETE FROM PN_AREA_SOFT_INST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_AREA_SOFT_INST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_AREA_SOFT_INST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pn_area_soft_inst_inout IN OUT pn_area_soft_inst%ROWTYPE) IS
    BEGIN
        pn_area_soft_inst_inout.id_pn_area             := NULL;
        pn_area_soft_inst_inout.id_software            := NULL;
        pn_area_soft_inst_inout.id_institution         := NULL;
        pn_area_soft_inst_inout.id_department          := NULL;
        pn_area_soft_inst_inout.id_dep_clin_serv       := NULL;
        pn_area_soft_inst_inout.nr_rec_page_summary    := 5;
        pn_area_soft_inst_inout.data_sort_summary      := 'DESC';
        pn_area_soft_inst_inout.nr_rec_page_hist       := 5;
        pn_area_soft_inst_inout.flg_report_title_type  := 'B';
        pn_area_soft_inst_inout.flg_available          := 'Y';
        pn_area_soft_inst_inout.create_user            := NULL;
        pn_area_soft_inst_inout.create_time            := NULL;
        pn_area_soft_inst_inout.create_institution     := NULL;
        pn_area_soft_inst_inout.update_user            := NULL;
        pn_area_soft_inst_inout.update_time            := NULL;
        pn_area_soft_inst_inout.update_institution     := NULL;
        pn_area_soft_inst_inout.summary_default_filter := 'N';
        pn_area_soft_inst_inout.time_to_close_note     := NULL;
        pn_area_soft_inst_inout.time_to_start_docum    := NULL;
        pn_area_soft_inst_inout.id_report              := NULL;
    END initrec;

    FUNCTION initrec RETURN pn_area_soft_inst%ROWTYPE IS
        l_pn_area_soft_inst pn_area_soft_inst%ROWTYPE;
    BEGIN
        l_pn_area_soft_inst.nr_rec_page_summary    := 5;
        l_pn_area_soft_inst.data_sort_summary      := 'DESC';
        l_pn_area_soft_inst.nr_rec_page_hist       := 5;
        l_pn_area_soft_inst.flg_report_title_type  := 'B';
        l_pn_area_soft_inst.flg_available          := 'Y';
        l_pn_area_soft_inst.summary_default_filter := 'N';
        RETURN l_pn_area_soft_inst;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pn_area_soft_inst_tc IS
        data pn_area_soft_inst_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pn_area_soft_inst
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pn_area_soft_inst_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pn_area_soft_inst_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pn_area_soft_inst;
/
