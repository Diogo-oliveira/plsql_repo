/*-- Last Change Revision: $Rev: 1666929 $*/
/*-- Last Change by: $Author: nuno.alves $*/
/*-- Date of last change: $Date: 2014-12-01 14:43:05 +0000 (seg, 01 dez 2014) $*/
CREATE OR REPLACE PACKAGE BODY ts_pn_soap_block
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Novembro 13, 2014 15:57:21
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_pn_soap_block_in        IN pn_soap_block.id_pn_soap_block%TYPE,
        create_user_in             IN pn_soap_block.create_user%TYPE DEFAULT NULL,
        create_time_in             IN pn_soap_block.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN pn_soap_block.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN pn_soap_block.update_user%TYPE DEFAULT NULL,
        update_time_in             IN pn_soap_block.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN pn_soap_block.update_institution%TYPE DEFAULT NULL,
        desc_pn_soap_block_in      IN pn_soap_block.desc_pn_soap_block%TYPE DEFAULT NULL,
        flg_type_in                IN pn_soap_block.flg_type%TYPE DEFAULT NULL,
        rank_in                    IN pn_soap_block.rank%TYPE DEFAULT NULL,
        sample_text_code_in        IN pn_soap_block.sample_text_code%TYPE DEFAULT NULL,
        code_message_dn_in         IN pn_soap_block.code_message_dn%TYPE DEFAULT NULL,
        code_message_ti_in         IN pn_soap_block.code_message_ti%TYPE DEFAULT NULL,
        code_pn_soap_block_hist_in IN pn_soap_block.code_pn_soap_block_hist%TYPE DEFAULT NULL,
        id_swf_file_viewer_in      IN pn_soap_block.id_swf_file_viewer%TYPE DEFAULT NULL,
        id_sys_button_viewer_in    IN pn_soap_block.id_sys_button_viewer%TYPE DEFAULT NULL,
        flg_wf_viewer_in           IN pn_soap_block.flg_wf_viewer%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pn_soap_block
            (id_pn_soap_block,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             desc_pn_soap_block,
             flg_type,
             rank,
             sample_text_code,
             code_message_dn,
             code_message_ti,
             code_pn_soap_block_hist,
             id_swf_file_viewer,
             id_sys_button_viewer,
             flg_wf_viewer)
        VALUES
            (id_pn_soap_block_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             desc_pn_soap_block_in,
             flg_type_in,
             rank_in,
             sample_text_code_in,
             code_message_dn_in,
             code_message_ti_in,
             code_pn_soap_block_hist_in,
             id_swf_file_viewer_in,
             id_sys_button_viewer_in,
             flg_wf_viewer_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PN_SOAP_BLOCK');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    IF l_name = 'PSB_APPF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SWF_FILE_VIEWER',
                                                        value_in           => id_swf_file_viewer_in);
                    END IF;
                    IF l_name = 'PSB_SB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SYS_BUTTON_VIEWER',
                                                        value_in           => id_sys_button_viewer_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_pn_soap_block_in        IN pn_soap_block.id_pn_soap_block%TYPE,
        create_user_in             IN pn_soap_block.create_user%TYPE DEFAULT NULL,
        create_time_in             IN pn_soap_block.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN pn_soap_block.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN pn_soap_block.update_user%TYPE DEFAULT NULL,
        update_time_in             IN pn_soap_block.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN pn_soap_block.update_institution%TYPE DEFAULT NULL,
        desc_pn_soap_block_in      IN pn_soap_block.desc_pn_soap_block%TYPE DEFAULT NULL,
        flg_type_in                IN pn_soap_block.flg_type%TYPE DEFAULT NULL,
        rank_in                    IN pn_soap_block.rank%TYPE DEFAULT NULL,
        sample_text_code_in        IN pn_soap_block.sample_text_code%TYPE DEFAULT NULL,
        code_message_dn_in         IN pn_soap_block.code_message_dn%TYPE DEFAULT NULL,
        code_message_ti_in         IN pn_soap_block.code_message_ti%TYPE DEFAULT NULL,
        code_pn_soap_block_hist_in IN pn_soap_block.code_pn_soap_block_hist%TYPE DEFAULT NULL,
        id_swf_file_viewer_in      IN pn_soap_block.id_swf_file_viewer%TYPE DEFAULT NULL,
        id_sys_button_viewer_in    IN pn_soap_block.id_sys_button_viewer%TYPE DEFAULT NULL,
        flg_wf_viewer_in           IN pn_soap_block.flg_wf_viewer%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_pn_soap_block_in        => id_pn_soap_block_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            desc_pn_soap_block_in      => desc_pn_soap_block_in,
            flg_type_in                => flg_type_in,
            rank_in                    => rank_in,
            sample_text_code_in        => sample_text_code_in,
            code_message_dn_in         => code_message_dn_in,
            code_message_ti_in         => code_message_ti_in,
            code_pn_soap_block_hist_in => code_pn_soap_block_hist_in,
            id_swf_file_viewer_in      => id_swf_file_viewer_in,
            id_sys_button_viewer_in    => id_sys_button_viewer_in,
            flg_wf_viewer_in           => flg_wf_viewer_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pn_soap_block%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pn_soap_block%ROWTYPE := rec_in;
    BEGIN
        ins(id_pn_soap_block_in        => l_rec.id_pn_soap_block,
            create_user_in             => l_rec.create_user,
            create_time_in             => l_rec.create_time,
            create_institution_in      => l_rec.create_institution,
            update_user_in             => l_rec.update_user,
            update_time_in             => l_rec.update_time,
            update_institution_in      => l_rec.update_institution,
            desc_pn_soap_block_in      => l_rec.desc_pn_soap_block,
            flg_type_in                => l_rec.flg_type,
            rank_in                    => l_rec.rank,
            sample_text_code_in        => l_rec.sample_text_code,
            code_message_dn_in         => l_rec.code_message_dn,
            code_message_ti_in         => l_rec.code_message_ti,
            code_pn_soap_block_hist_in => l_rec.code_pn_soap_block_hist,
            id_swf_file_viewer_in      => l_rec.id_swf_file_viewer,
            id_sys_button_viewer_in    => l_rec.id_sys_button_viewer,
            flg_wf_viewer_in           => l_rec.flg_wf_viewer,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pn_soap_block%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pn_soap_block_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO pn_soap_block
                    (id_pn_soap_block,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     desc_pn_soap_block,
                     flg_type,
                     rank,
                     sample_text_code,
                     code_message_dn,
                     code_message_ti,
                     code_pn_soap_block_hist,
                     id_swf_file_viewer,
                     id_sys_button_viewer,
                     flg_wf_viewer)
                VALUES
                    (rows_in(indx).id_pn_soap_block,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).desc_pn_soap_block,
                     rows_in(indx).flg_type,
                     rows_in(indx).rank,
                     rows_in(indx).sample_text_code,
                     rows_in(indx).code_message_dn,
                     rows_in(indx).code_message_ti,
                     rows_in(indx).code_pn_soap_block_hist,
                     rows_in(indx).id_swf_file_viewer,
                     rows_in(indx).id_sys_button_viewer,
                     rows_in(indx).flg_wf_viewer)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PN_SOAP_BLOCK _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_pn_soap_block,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DESC_PN_SOAP_BLOCK _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .desc_pn_soap_block,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RANK _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index).rank,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'SAMPLE_TEXT_CODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .sample_text_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CODE_MESSAGE_DN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .code_message_dn,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CODE_MESSAGE_TI _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .code_message_ti,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CODE_PN_SOAP_BLOCK_HIST _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .code_pn_soap_block_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SWF_FILE_VIEWER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_swf_file_viewer,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SYS_BUTTON_VIEWER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_sys_button_viewer,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_WF_VIEWER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_wf_viewer,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PN_SOAP_BLOCK',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pn_soap_block_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_pn_soap_block_in         IN pn_soap_block.id_pn_soap_block%TYPE,
        create_user_in              IN pn_soap_block.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN pn_soap_block.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN pn_soap_block.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN pn_soap_block.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN pn_soap_block.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN pn_soap_block.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        desc_pn_soap_block_in       IN pn_soap_block.desc_pn_soap_block%TYPE DEFAULT NULL,
        desc_pn_soap_block_nin      IN BOOLEAN := TRUE,
        flg_type_in                 IN pn_soap_block.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        rank_in                     IN pn_soap_block.rank%TYPE DEFAULT NULL,
        rank_nin                    IN BOOLEAN := TRUE,
        sample_text_code_in         IN pn_soap_block.sample_text_code%TYPE DEFAULT NULL,
        sample_text_code_nin        IN BOOLEAN := TRUE,
        code_message_dn_in          IN pn_soap_block.code_message_dn%TYPE DEFAULT NULL,
        code_message_dn_nin         IN BOOLEAN := TRUE,
        code_message_ti_in          IN pn_soap_block.code_message_ti%TYPE DEFAULT NULL,
        code_message_ti_nin         IN BOOLEAN := TRUE,
        code_pn_soap_block_hist_in  IN pn_soap_block.code_pn_soap_block_hist%TYPE DEFAULT NULL,
        code_pn_soap_block_hist_nin IN BOOLEAN := TRUE,
        id_swf_file_viewer_in       IN pn_soap_block.id_swf_file_viewer%TYPE DEFAULT NULL,
        id_swf_file_viewer_nin      IN BOOLEAN := TRUE,
        id_sys_button_viewer_in     IN pn_soap_block.id_sys_button_viewer%TYPE DEFAULT NULL,
        id_sys_button_viewer_nin    IN BOOLEAN := TRUE,
        flg_wf_viewer_in            IN pn_soap_block.flg_wf_viewer%TYPE DEFAULT NULL,
        flg_wf_viewer_nin           IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_rows_out                  table_varchar;
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
        l_desc_pn_soap_block_n      NUMBER(1);
        l_flg_type_n                NUMBER(1);
        l_rank_n                    NUMBER(1);
        l_sample_text_code_n        NUMBER(1);
        l_code_message_dn_n         NUMBER(1);
        l_code_message_ti_n         NUMBER(1);
        l_code_pn_soap_block_hist_n NUMBER(1);
        l_id_swf_file_viewer_n      NUMBER(1);
        l_id_sys_button_viewer_n    NUMBER(1);
        l_flg_wf_viewer_n           NUMBER(1);
    BEGIN
    
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
        l_desc_pn_soap_block_n      := sys.diutil.bool_to_int(desc_pn_soap_block_nin);
        l_flg_type_n                := sys.diutil.bool_to_int(flg_type_nin);
        l_rank_n                    := sys.diutil.bool_to_int(rank_nin);
        l_sample_text_code_n        := sys.diutil.bool_to_int(sample_text_code_nin);
        l_code_message_dn_n         := sys.diutil.bool_to_int(code_message_dn_nin);
        l_code_message_ti_n         := sys.diutil.bool_to_int(code_message_ti_nin);
        l_code_pn_soap_block_hist_n := sys.diutil.bool_to_int(code_pn_soap_block_hist_nin);
        l_id_swf_file_viewer_n      := sys.diutil.bool_to_int(id_swf_file_viewer_nin);
        l_id_sys_button_viewer_n    := sys.diutil.bool_to_int(id_sys_button_viewer_nin);
        l_flg_wf_viewer_n           := sys.diutil.bool_to_int(flg_wf_viewer_nin);
    
        UPDATE pn_soap_block
           SET create_user             = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time             = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution      = decode(l_create_institution_n,
                                                0,
                                                create_institution_in,
                                                nvl(create_institution_in, create_institution)),
               update_user             = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time             = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution      = decode(l_update_institution_n,
                                                0,
                                                update_institution_in,
                                                nvl(update_institution_in, update_institution)),
               desc_pn_soap_block      = decode(l_desc_pn_soap_block_n,
                                                0,
                                                desc_pn_soap_block_in,
                                                nvl(desc_pn_soap_block_in, desc_pn_soap_block)),
               flg_type                = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               rank                    = decode(l_rank_n, 0, rank_in, nvl(rank_in, rank)),
               sample_text_code        = decode(l_sample_text_code_n,
                                                0,
                                                sample_text_code_in,
                                                nvl(sample_text_code_in, sample_text_code)),
               code_message_dn         = decode(l_code_message_dn_n,
                                                0,
                                                code_message_dn_in,
                                                nvl(code_message_dn_in, code_message_dn)),
               code_message_ti         = decode(l_code_message_ti_n,
                                                0,
                                                code_message_ti_in,
                                                nvl(code_message_ti_in, code_message_ti)),
               code_pn_soap_block_hist = decode(l_code_pn_soap_block_hist_n,
                                                0,
                                                code_pn_soap_block_hist_in,
                                                nvl(code_pn_soap_block_hist_in, code_pn_soap_block_hist)),
               id_swf_file_viewer      = decode(l_id_swf_file_viewer_n,
                                                0,
                                                id_swf_file_viewer_in,
                                                nvl(id_swf_file_viewer_in, id_swf_file_viewer)),
               id_sys_button_viewer    = decode(l_id_sys_button_viewer_n,
                                                0,
                                                id_sys_button_viewer_in,
                                                nvl(id_sys_button_viewer_in, id_sys_button_viewer)),
               flg_wf_viewer           = decode(l_flg_wf_viewer_n,
                                                0,
                                                flg_wf_viewer_in,
                                                nvl(flg_wf_viewer_in, flg_wf_viewer))
         WHERE id_pn_soap_block = id_pn_soap_block_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PN_SOAP_BLOCK');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    IF l_name = 'PSB_APPF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SWF_FILE_VIEWER',
                                                        value_in           => id_swf_file_viewer_in);
                    END IF;
                    IF l_name = 'PSB_SB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SYS_BUTTON_VIEWER',
                                                        value_in           => id_sys_button_viewer_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pn_soap_block_in         IN pn_soap_block.id_pn_soap_block%TYPE,
        create_user_in              IN pn_soap_block.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN pn_soap_block.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN pn_soap_block.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN pn_soap_block.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN pn_soap_block.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN pn_soap_block.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        desc_pn_soap_block_in       IN pn_soap_block.desc_pn_soap_block%TYPE DEFAULT NULL,
        desc_pn_soap_block_nin      IN BOOLEAN := TRUE,
        flg_type_in                 IN pn_soap_block.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        rank_in                     IN pn_soap_block.rank%TYPE DEFAULT NULL,
        rank_nin                    IN BOOLEAN := TRUE,
        sample_text_code_in         IN pn_soap_block.sample_text_code%TYPE DEFAULT NULL,
        sample_text_code_nin        IN BOOLEAN := TRUE,
        code_message_dn_in          IN pn_soap_block.code_message_dn%TYPE DEFAULT NULL,
        code_message_dn_nin         IN BOOLEAN := TRUE,
        code_message_ti_in          IN pn_soap_block.code_message_ti%TYPE DEFAULT NULL,
        code_message_ti_nin         IN BOOLEAN := TRUE,
        code_pn_soap_block_hist_in  IN pn_soap_block.code_pn_soap_block_hist%TYPE DEFAULT NULL,
        code_pn_soap_block_hist_nin IN BOOLEAN := TRUE,
        id_swf_file_viewer_in       IN pn_soap_block.id_swf_file_viewer%TYPE DEFAULT NULL,
        id_swf_file_viewer_nin      IN BOOLEAN := TRUE,
        id_sys_button_viewer_in     IN pn_soap_block.id_sys_button_viewer%TYPE DEFAULT NULL,
        id_sys_button_viewer_nin    IN BOOLEAN := TRUE,
        flg_wf_viewer_in            IN pn_soap_block.flg_wf_viewer%TYPE DEFAULT NULL,
        flg_wf_viewer_nin           IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pn_soap_block_in         => id_pn_soap_block_in,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            desc_pn_soap_block_in       => desc_pn_soap_block_in,
            desc_pn_soap_block_nin      => desc_pn_soap_block_nin,
            flg_type_in                 => flg_type_in,
            flg_type_nin                => flg_type_nin,
            rank_in                     => rank_in,
            rank_nin                    => rank_nin,
            sample_text_code_in         => sample_text_code_in,
            sample_text_code_nin        => sample_text_code_nin,
            code_message_dn_in          => code_message_dn_in,
            code_message_dn_nin         => code_message_dn_nin,
            code_message_ti_in          => code_message_ti_in,
            code_message_ti_nin         => code_message_ti_nin,
            code_pn_soap_block_hist_in  => code_pn_soap_block_hist_in,
            code_pn_soap_block_hist_nin => code_pn_soap_block_hist_nin,
            id_swf_file_viewer_in       => id_swf_file_viewer_in,
            id_swf_file_viewer_nin      => id_swf_file_viewer_nin,
            id_sys_button_viewer_in     => id_sys_button_viewer_in,
            id_sys_button_viewer_nin    => id_sys_button_viewer_nin,
            flg_wf_viewer_in            => flg_wf_viewer_in,
            flg_wf_viewer_nin           => flg_wf_viewer_nin,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        create_user_in              IN pn_soap_block.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN pn_soap_block.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN pn_soap_block.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN pn_soap_block.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN pn_soap_block.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN pn_soap_block.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        desc_pn_soap_block_in       IN pn_soap_block.desc_pn_soap_block%TYPE DEFAULT NULL,
        desc_pn_soap_block_nin      IN BOOLEAN := TRUE,
        flg_type_in                 IN pn_soap_block.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        rank_in                     IN pn_soap_block.rank%TYPE DEFAULT NULL,
        rank_nin                    IN BOOLEAN := TRUE,
        sample_text_code_in         IN pn_soap_block.sample_text_code%TYPE DEFAULT NULL,
        sample_text_code_nin        IN BOOLEAN := TRUE,
        code_message_dn_in          IN pn_soap_block.code_message_dn%TYPE DEFAULT NULL,
        code_message_dn_nin         IN BOOLEAN := TRUE,
        code_message_ti_in          IN pn_soap_block.code_message_ti%TYPE DEFAULT NULL,
        code_message_ti_nin         IN BOOLEAN := TRUE,
        code_pn_soap_block_hist_in  IN pn_soap_block.code_pn_soap_block_hist%TYPE DEFAULT NULL,
        code_pn_soap_block_hist_nin IN BOOLEAN := TRUE,
        id_swf_file_viewer_in       IN pn_soap_block.id_swf_file_viewer%TYPE DEFAULT NULL,
        id_swf_file_viewer_nin      IN BOOLEAN := TRUE,
        id_sys_button_viewer_in     IN pn_soap_block.id_sys_button_viewer%TYPE DEFAULT NULL,
        id_sys_button_viewer_nin    IN BOOLEAN := TRUE,
        flg_wf_viewer_in            IN pn_soap_block.flg_wf_viewer%TYPE DEFAULT NULL,
        flg_wf_viewer_nin           IN BOOLEAN := TRUE,
        where_in                    VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_sql                       VARCHAR2(32767);
        l_rows_out                  table_varchar;
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
        l_desc_pn_soap_block_n      NUMBER(1);
        l_flg_type_n                NUMBER(1);
        l_rank_n                    NUMBER(1);
        l_sample_text_code_n        NUMBER(1);
        l_code_message_dn_n         NUMBER(1);
        l_code_message_ti_n         NUMBER(1);
        l_code_pn_soap_block_hist_n NUMBER(1);
        l_id_swf_file_viewer_n      NUMBER(1);
        l_id_sys_button_viewer_n    NUMBER(1);
        l_flg_wf_viewer_n           NUMBER(1);
        id_pn_soap_block_in         pn_soap_block.id_pn_soap_block%TYPE;
    BEGIN
    
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
        l_desc_pn_soap_block_n      := sys.diutil.bool_to_int(desc_pn_soap_block_nin);
        l_flg_type_n                := sys.diutil.bool_to_int(flg_type_nin);
        l_rank_n                    := sys.diutil.bool_to_int(rank_nin);
        l_sample_text_code_n        := sys.diutil.bool_to_int(sample_text_code_nin);
        l_code_message_dn_n         := sys.diutil.bool_to_int(code_message_dn_nin);
        l_code_message_ti_n         := sys.diutil.bool_to_int(code_message_ti_nin);
        l_code_pn_soap_block_hist_n := sys.diutil.bool_to_int(code_pn_soap_block_hist_nin);
        l_id_swf_file_viewer_n      := sys.diutil.bool_to_int(id_swf_file_viewer_nin);
        l_id_sys_button_viewer_n    := sys.diutil.bool_to_int(id_sys_button_viewer_nin);
        l_flg_wf_viewer_n           := sys.diutil.bool_to_int(flg_wf_viewer_nin);
    
        l_sql := 'UPDATE PN_SOAP_BLOCK SET ' || ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' DESC_PN_SOAP_BLOCK = decode (' || l_desc_pn_soap_block_n ||
                 ',0,:desc_pn_soap_block_in, NVL (:desc_pn_soap_block_in, DESC_PN_SOAP_BLOCK)) ' || ',' ||
                 ' FLG_TYPE = decode (' || l_flg_type_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' ||
                 ' RANK = decode (' || l_rank_n || ',0,:rank_in, NVL (:rank_in, RANK)) ' || ',' ||
                 ' SAMPLE_TEXT_CODE = decode (' || l_sample_text_code_n ||
                 ',0,:sample_text_code_in, NVL (:sample_text_code_in, SAMPLE_TEXT_CODE)) ' || ',' ||
                 ' CODE_MESSAGE_DN = decode (' || l_code_message_dn_n ||
                 ',0,:code_message_dn_in, NVL (:code_message_dn_in, CODE_MESSAGE_DN)) ' || ',' ||
                 ' CODE_MESSAGE_TI = decode (' || l_code_message_ti_n ||
                 ',0,:code_message_ti_in, NVL (:code_message_ti_in, CODE_MESSAGE_TI)) ' || ',' ||
                 ' CODE_PN_SOAP_BLOCK_HIST = decode (' || l_code_pn_soap_block_hist_n ||
                 ',0,:code_pn_soap_block_hist_in, NVL (:code_pn_soap_block_hist_in, CODE_PN_SOAP_BLOCK_HIST)) ' || ',' ||
                 ' ID_SWF_FILE_VIEWER = decode (' || l_id_swf_file_viewer_n ||
                 ',0,:id_swf_file_viewer_in, NVL (:id_swf_file_viewer_in, ID_SWF_FILE_VIEWER)) ' || ',' ||
                 ' ID_SYS_BUTTON_VIEWER = decode (' || l_id_sys_button_viewer_n ||
                 ',0,:id_sys_button_viewer_in, NVL (:id_sys_button_viewer_in, ID_SYS_BUTTON_VIEWER)) ' || ',' ||
                 ' FLG_WF_VIEWER = decode (' || l_flg_wf_viewer_n ||
                 ',0,:flg_wf_viewer_in, NVL (:flg_wf_viewer_in, FLG_WF_VIEWER)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, desc_pn_soap_block_in, flg_type_in, rank_in, sample_text_code_in, code_message_dn_in, code_message_ti_in, code_pn_soap_block_hist_in, id_swf_file_viewer_in, id_sys_button_viewer_in, flg_wf_viewer_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PN_SOAP_BLOCK');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    IF l_name = 'PSB_APPF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SWF_FILE_VIEWER',
                                                        value_in           => id_swf_file_viewer_in);
                    END IF;
                    IF l_name = 'PSB_SB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SYS_BUTTON_VIEWER',
                                                        value_in           => id_sys_button_viewer_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        create_user_in              IN pn_soap_block.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN pn_soap_block.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN pn_soap_block.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN pn_soap_block.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN pn_soap_block.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN pn_soap_block.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        desc_pn_soap_block_in       IN pn_soap_block.desc_pn_soap_block%TYPE DEFAULT NULL,
        desc_pn_soap_block_nin      IN BOOLEAN := TRUE,
        flg_type_in                 IN pn_soap_block.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        rank_in                     IN pn_soap_block.rank%TYPE DEFAULT NULL,
        rank_nin                    IN BOOLEAN := TRUE,
        sample_text_code_in         IN pn_soap_block.sample_text_code%TYPE DEFAULT NULL,
        sample_text_code_nin        IN BOOLEAN := TRUE,
        code_message_dn_in          IN pn_soap_block.code_message_dn%TYPE DEFAULT NULL,
        code_message_dn_nin         IN BOOLEAN := TRUE,
        code_message_ti_in          IN pn_soap_block.code_message_ti%TYPE DEFAULT NULL,
        code_message_ti_nin         IN BOOLEAN := TRUE,
        code_pn_soap_block_hist_in  IN pn_soap_block.code_pn_soap_block_hist%TYPE DEFAULT NULL,
        code_pn_soap_block_hist_nin IN BOOLEAN := TRUE,
        id_swf_file_viewer_in       IN pn_soap_block.id_swf_file_viewer%TYPE DEFAULT NULL,
        id_swf_file_viewer_nin      IN BOOLEAN := TRUE,
        id_sys_button_viewer_in     IN pn_soap_block.id_sys_button_viewer%TYPE DEFAULT NULL,
        id_sys_button_viewer_nin    IN BOOLEAN := TRUE,
        flg_wf_viewer_in            IN pn_soap_block.flg_wf_viewer%TYPE DEFAULT NULL,
        flg_wf_viewer_nin           IN BOOLEAN := TRUE,
        where_in                    VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            desc_pn_soap_block_in       => desc_pn_soap_block_in,
            desc_pn_soap_block_nin      => desc_pn_soap_block_nin,
            flg_type_in                 => flg_type_in,
            flg_type_nin                => flg_type_nin,
            rank_in                     => rank_in,
            rank_nin                    => rank_nin,
            sample_text_code_in         => sample_text_code_in,
            sample_text_code_nin        => sample_text_code_nin,
            code_message_dn_in          => code_message_dn_in,
            code_message_dn_nin         => code_message_dn_nin,
            code_message_ti_in          => code_message_ti_in,
            code_message_ti_nin         => code_message_ti_nin,
            code_pn_soap_block_hist_in  => code_pn_soap_block_hist_in,
            code_pn_soap_block_hist_nin => code_pn_soap_block_hist_nin,
            id_swf_file_viewer_in       => id_swf_file_viewer_in,
            id_swf_file_viewer_nin      => id_swf_file_viewer_nin,
            id_sys_button_viewer_in     => id_sys_button_viewer_in,
            id_sys_button_viewer_nin    => id_sys_button_viewer_nin,
            flg_wf_viewer_in            => flg_wf_viewer_in,
            flg_wf_viewer_nin           => flg_wf_viewer_nin,
            where_in                    => where_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pn_soap_block%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_pn_soap_block_in        => rec_in.id_pn_soap_block,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            desc_pn_soap_block_in      => rec_in.desc_pn_soap_block,
            flg_type_in                => rec_in.flg_type,
            rank_in                    => rec_in.rank,
            sample_text_code_in        => rec_in.sample_text_code,
            code_message_dn_in         => rec_in.code_message_dn,
            code_message_ti_in         => rec_in.code_message_ti,
            code_pn_soap_block_hist_in => rec_in.code_pn_soap_block_hist,
            id_swf_file_viewer_in      => rec_in.id_swf_file_viewer,
            id_sys_button_viewer_in    => rec_in.id_sys_button_viewer,
            flg_wf_viewer_in           => rec_in.flg_wf_viewer
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pn_soap_block%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pn_soap_block_in        => rec_in.id_pn_soap_block,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            desc_pn_soap_block_in      => rec_in.desc_pn_soap_block,
            flg_type_in                => rec_in.flg_type,
            rank_in                    => rec_in.rank,
            sample_text_code_in        => rec_in.sample_text_code,
            code_message_dn_in         => rec_in.code_message_dn,
            code_message_ti_in         => rec_in.code_message_ti,
            code_pn_soap_block_hist_in => rec_in.code_pn_soap_block_hist,
            id_swf_file_viewer_in      => rec_in.id_swf_file_viewer,
            id_sys_button_viewer_in    => rec_in.id_sys_button_viewer,
            flg_wf_viewer_in           => rec_in.flg_wf_viewer
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_pn_soap_block_in        IN pn_soap_block.id_pn_soap_block%TYPE,
        create_user_in             IN pn_soap_block.create_user%TYPE DEFAULT NULL,
        create_time_in             IN pn_soap_block.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN pn_soap_block.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN pn_soap_block.update_user%TYPE DEFAULT NULL,
        update_time_in             IN pn_soap_block.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN pn_soap_block.update_institution%TYPE DEFAULT NULL,
        desc_pn_soap_block_in      IN pn_soap_block.desc_pn_soap_block%TYPE DEFAULT NULL,
        flg_type_in                IN pn_soap_block.flg_type%TYPE DEFAULT NULL,
        rank_in                    IN pn_soap_block.rank%TYPE DEFAULT NULL,
        sample_text_code_in        IN pn_soap_block.sample_text_code%TYPE DEFAULT NULL,
        code_message_dn_in         IN pn_soap_block.code_message_dn%TYPE DEFAULT NULL,
        code_message_ti_in         IN pn_soap_block.code_message_ti%TYPE DEFAULT NULL,
        code_pn_soap_block_hist_in IN pn_soap_block.code_pn_soap_block_hist%TYPE DEFAULT NULL,
        id_swf_file_viewer_in      IN pn_soap_block.id_swf_file_viewer%TYPE DEFAULT NULL,
        id_sys_button_viewer_in    IN pn_soap_block.id_sys_button_viewer%TYPE DEFAULT NULL,
        flg_wf_viewer_in           IN pn_soap_block.flg_wf_viewer%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        upd(id_pn_soap_block_in        => id_pn_soap_block_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            desc_pn_soap_block_in      => desc_pn_soap_block_in,
            flg_type_in                => flg_type_in,
            rank_in                    => rank_in,
            sample_text_code_in        => sample_text_code_in,
            code_message_dn_in         => code_message_dn_in,
            code_message_ti_in         => code_message_ti_in,
            code_pn_soap_block_hist_in => code_pn_soap_block_hist_in,
            id_swf_file_viewer_in      => id_swf_file_viewer_in,
            id_sys_button_viewer_in    => id_sys_button_viewer_in,
            flg_wf_viewer_in           => flg_wf_viewer_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_pn_soap_block_in        => id_pn_soap_block_in,
                create_user_in             => create_user_in,
                create_time_in             => create_time_in,
                create_institution_in      => create_institution_in,
                update_user_in             => update_user_in,
                update_time_in             => update_time_in,
                update_institution_in      => update_institution_in,
                desc_pn_soap_block_in      => desc_pn_soap_block_in,
                flg_type_in                => flg_type_in,
                rank_in                    => rank_in,
                sample_text_code_in        => sample_text_code_in,
                code_message_dn_in         => code_message_dn_in,
                code_message_ti_in         => code_message_ti_in,
                code_pn_soap_block_hist_in => code_pn_soap_block_hist_in,
                id_swf_file_viewer_in      => id_swf_file_viewer_in,
                id_sys_button_viewer_in    => id_sys_button_viewer_in,
                flg_wf_viewer_in           => flg_wf_viewer_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_pn_soap_block_in        IN pn_soap_block.id_pn_soap_block%TYPE,
        create_user_in             IN pn_soap_block.create_user%TYPE DEFAULT NULL,
        create_time_in             IN pn_soap_block.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN pn_soap_block.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN pn_soap_block.update_user%TYPE DEFAULT NULL,
        update_time_in             IN pn_soap_block.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN pn_soap_block.update_institution%TYPE DEFAULT NULL,
        desc_pn_soap_block_in      IN pn_soap_block.desc_pn_soap_block%TYPE DEFAULT NULL,
        flg_type_in                IN pn_soap_block.flg_type%TYPE DEFAULT NULL,
        rank_in                    IN pn_soap_block.rank%TYPE DEFAULT NULL,
        sample_text_code_in        IN pn_soap_block.sample_text_code%TYPE DEFAULT NULL,
        code_message_dn_in         IN pn_soap_block.code_message_dn%TYPE DEFAULT NULL,
        code_message_ti_in         IN pn_soap_block.code_message_ti%TYPE DEFAULT NULL,
        code_pn_soap_block_hist_in IN pn_soap_block.code_pn_soap_block_hist%TYPE DEFAULT NULL,
        id_swf_file_viewer_in      IN pn_soap_block.id_swf_file_viewer%TYPE DEFAULT NULL,
        id_sys_button_viewer_in    IN pn_soap_block.id_sys_button_viewer%TYPE DEFAULT NULL,
        flg_wf_viewer_in           IN pn_soap_block.flg_wf_viewer%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_pn_soap_block_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                desc_pn_soap_block_in,
                flg_type_in,
                rank_in,
                sample_text_code_in,
                code_message_dn_in,
                code_message_ti_in,
                code_pn_soap_block_hist_in,
                id_swf_file_viewer_in,
                id_sys_button_viewer_in,
                flg_wf_viewer_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pn_soap_block_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_pn_soap_block        id_pn_soap_block_cc;
        l_create_user             create_user_cc;
        l_create_time             create_time_cc;
        l_create_institution      create_institution_cc;
        l_update_user             update_user_cc;
        l_update_time             update_time_cc;
        l_update_institution      update_institution_cc;
        l_desc_pn_soap_block      desc_pn_soap_block_cc;
        l_flg_type                flg_type_cc;
        l_rank                    rank_cc;
        l_sample_text_code        sample_text_code_cc;
        l_code_message_dn         code_message_dn_cc;
        l_code_message_ti         code_message_ti_cc;
        l_code_pn_soap_block_hist code_pn_soap_block_hist_cc;
        l_id_swf_file_viewer      id_swf_file_viewer_cc;
        l_id_sys_button_viewer    id_sys_button_viewer_cc;
        l_flg_wf_viewer           flg_wf_viewer_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_pn_soap_block(i) := col_in(i).id_pn_soap_block;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_desc_pn_soap_block(i) := col_in(i).desc_pn_soap_block;
            l_flg_type(i) := col_in(i).flg_type;
            l_rank(i) := col_in(i).rank;
            l_sample_text_code(i) := col_in(i).sample_text_code;
            l_code_message_dn(i) := col_in(i).code_message_dn;
            l_code_message_ti(i) := col_in(i).code_message_ti;
            l_code_pn_soap_block_hist(i) := col_in(i).code_pn_soap_block_hist;
            l_id_swf_file_viewer(i) := col_in(i).id_swf_file_viewer;
            l_id_sys_button_viewer(i) := col_in(i).id_sys_button_viewer;
            l_flg_wf_viewer(i) := col_in(i).flg_wf_viewer;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE pn_soap_block
                   SET create_user             = nvl(l_create_user(i), create_user),
                       create_time             = nvl(l_create_time(i), create_time),
                       create_institution      = nvl(l_create_institution(i), create_institution),
                       update_user             = nvl(l_update_user(i), update_user),
                       update_time             = nvl(l_update_time(i), update_time),
                       update_institution      = nvl(l_update_institution(i), update_institution),
                       desc_pn_soap_block      = nvl(l_desc_pn_soap_block(i), desc_pn_soap_block),
                       flg_type                = nvl(l_flg_type(i), flg_type),
                       rank                    = nvl(l_rank(i), rank),
                       sample_text_code        = nvl(l_sample_text_code(i), sample_text_code),
                       code_message_dn         = nvl(l_code_message_dn(i), code_message_dn),
                       code_message_ti         = nvl(l_code_message_ti(i), code_message_ti),
                       code_pn_soap_block_hist = nvl(l_code_pn_soap_block_hist(i), code_pn_soap_block_hist),
                       id_swf_file_viewer      = nvl(l_id_swf_file_viewer(i), id_swf_file_viewer),
                       id_sys_button_viewer    = nvl(l_id_sys_button_viewer(i), id_sys_button_viewer),
                       flg_wf_viewer           = nvl(l_flg_wf_viewer(i), flg_wf_viewer)
                 WHERE id_pn_soap_block = l_id_pn_soap_block(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE pn_soap_block
                   SET create_user             = l_create_user(i),
                       create_time             = l_create_time(i),
                       create_institution      = l_create_institution(i),
                       update_user             = l_update_user(i),
                       update_time             = l_update_time(i),
                       update_institution      = l_update_institution(i),
                       desc_pn_soap_block      = l_desc_pn_soap_block(i),
                       flg_type                = l_flg_type(i),
                       rank                    = l_rank(i),
                       sample_text_code        = l_sample_text_code(i),
                       code_message_dn         = l_code_message_dn(i),
                       code_message_ti         = l_code_message_ti(i),
                       code_pn_soap_block_hist = l_code_pn_soap_block_hist(i),
                       id_swf_file_viewer      = l_id_swf_file_viewer(i),
                       id_sys_button_viewer    = l_id_sys_button_viewer(i),
                       flg_wf_viewer           = l_flg_wf_viewer(i)
                 WHERE id_pn_soap_block = l_id_pn_soap_block(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pn_soap_block_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PN_SOAP_BLOCK
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PN_SOAP_BLOCK
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PN_SOAP_BLOCK set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PN_SOAP_BLOCK set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_pn_soap_block_in IN pn_soap_block.id_pn_soap_block%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_soap_block
         WHERE id_pn_soap_block = id_pn_soap_block_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_pn_soap_block_in IN pn_soap_block.id_pn_soap_block%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_pn_soap_block_in => id_pn_soap_block_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PN_SOAP_BLOCK
    PROCEDURE del_id_pn_soap_block
    (
        id_pn_soap_block_in IN pn_soap_block.id_pn_soap_block%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_soap_block
         WHERE id_pn_soap_block = id_pn_soap_block_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_pn_soap_block;

    -- Delete all rows for primary key column ID_PN_SOAP_BLOCK
    PROCEDURE del_id_pn_soap_block
    (
        id_pn_soap_block_in IN pn_soap_block.id_pn_soap_block%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_pn_soap_block(id_pn_soap_block_in => id_pn_soap_block_in,
                             handle_error_in     => handle_error_in,
                             rows_out            => rows_out);
    END del_id_pn_soap_block;

    PROCEDURE del_psb_appf_fk
    (
        id_swf_file_viewer_in IN pn_soap_block.id_swf_file_viewer%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_soap_block
         WHERE id_swf_file_viewer = del_psb_appf_fk.id_swf_file_viewer_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_psb_appf_fk;

    PROCEDURE del_psb_appf_fk
    (
        id_swf_file_viewer_in IN pn_soap_block.id_swf_file_viewer%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_psb_appf_fk(id_swf_file_viewer_in => id_swf_file_viewer_in,
                        handle_error_in       => handle_error_in,
                        rows_out              => rows_out);
    END del_psb_appf_fk;

    PROCEDURE del_psb_sb_fk
    (
        id_sys_button_viewer_in IN pn_soap_block.id_sys_button_viewer%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_soap_block
         WHERE id_sys_button_viewer = del_psb_sb_fk.id_sys_button_viewer_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_psb_sb_fk;

    PROCEDURE del_psb_sb_fk
    (
        id_sys_button_viewer_in IN pn_soap_block.id_sys_button_viewer%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_psb_sb_fk(id_sys_button_viewer_in => id_sys_button_viewer_in,
                      handle_error_in         => handle_error_in,
                      rows_out                => rows_out);
    END del_psb_sb_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PN_SOAP_BLOCK';
        ELSE
            RETURN 'DELETE FROM PN_SOAP_BLOCK WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PN_SOAP_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PN_SOAP_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pn_soap_block_inout IN OUT pn_soap_block%ROWTYPE) IS
    BEGIN
        pn_soap_block_inout.id_pn_soap_block        := NULL;
        pn_soap_block_inout.create_user             := NULL;
        pn_soap_block_inout.create_time             := NULL;
        pn_soap_block_inout.create_institution      := NULL;
        pn_soap_block_inout.update_user             := NULL;
        pn_soap_block_inout.update_time             := NULL;
        pn_soap_block_inout.update_institution      := NULL;
        pn_soap_block_inout.desc_pn_soap_block      := NULL;
        pn_soap_block_inout.flg_type                := NULL;
        pn_soap_block_inout.rank                    := NULL;
        pn_soap_block_inout.sample_text_code        := NULL;
        pn_soap_block_inout.code_message_dn         := NULL;
        pn_soap_block_inout.code_message_ti         := NULL;
        pn_soap_block_inout.code_pn_soap_block_hist := NULL;
        pn_soap_block_inout.id_swf_file_viewer      := NULL;
        pn_soap_block_inout.id_sys_button_viewer    := NULL;
        pn_soap_block_inout.flg_wf_viewer           := NULL;
    END initrec;

    FUNCTION initrec RETURN pn_soap_block%ROWTYPE IS
        l_pn_soap_block pn_soap_block%ROWTYPE;
    BEGIN
        RETURN l_pn_soap_block;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pn_soap_block_tc IS
        data pn_soap_block_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pn_soap_block
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pn_soap_block_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pn_soap_block_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pn_soap_block;
/
