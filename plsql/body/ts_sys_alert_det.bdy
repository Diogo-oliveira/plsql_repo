/*-- Last Change Revision: $Rev: 2028401 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:33 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_sys_alert_det
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Junho 4, 2010 9:12:2
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_sys_alert_det_in    IN sys_alert_det.id_sys_alert_det%TYPE,
        id_reg_in              IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_episode_in          IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_institution_in      IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_prof_in             IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        replace1_in            IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace2_in            IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        id_schedule_in         IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_sys_alert_in        IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_reg_det_in          IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_clinical_service_in IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_room_in             IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        dt_req_tstz_in         IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        create_user_in         IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        id_patient_in          IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO sys_alert_det
            (id_reg,
             id_episode,
             id_institution,
             id_prof,
             replace1,
             replace2,
             id_schedule,
             id_sys_alert,
             id_reg_det,
             id_clinical_service,
             id_room,
             id_sys_alert_det,
             dt_req_tstz,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_patient)
        VALUES
            (id_reg_in,
             id_episode_in,
             id_institution_in,
             id_prof_in,
             replace1_in,
             replace2_in,
             id_schedule_in,
             id_sys_alert_in,
             id_reg_det_in,
             id_clinical_service_in,
             id_room_in,
             id_sys_alert_det_in,
             dt_req_tstz_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_patient_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'SYS_ALERT_DET');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    IF l_name = 'AT_CLIN_SERV_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CLINICAL_SERVICE',
                                                        value_in           => id_clinical_service_in);
                    END IF;
                    IF l_name = 'AT_IDE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'AT_II_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'AT_IP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF',
                                                        value_in           => id_prof_in);
                    END IF;
                    IF l_name = 'AT_IS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE',
                                                        value_in           => id_schedule_in);
                    END IF;
                    IF l_name = 'AT_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'AT_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'AT_SYS_ALERT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SYS_ALERT',
                                                        value_in           => id_sys_alert_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_sys_alert_det_in    IN sys_alert_det.id_sys_alert_det%TYPE,
        id_reg_in              IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_episode_in          IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_institution_in      IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_prof_in             IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        replace1_in            IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace2_in            IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        id_schedule_in         IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_sys_alert_in        IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_reg_det_in          IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_clinical_service_in IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_room_in             IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        dt_req_tstz_in         IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        create_user_in         IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        id_patient_in          IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_sys_alert_det_in    => id_sys_alert_det_in,
            id_reg_in              => id_reg_in,
            id_episode_in          => id_episode_in,
            id_institution_in      => id_institution_in,
            id_prof_in             => id_prof_in,
            replace1_in            => replace1_in,
            replace2_in            => replace2_in,
            id_schedule_in         => id_schedule_in,
            id_sys_alert_in        => id_sys_alert_in,
            id_reg_det_in          => id_reg_det_in,
            id_clinical_service_in => id_clinical_service_in,
            id_room_in             => id_room_in,
            dt_req_tstz_in         => dt_req_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_patient_in          => id_patient_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN sys_alert_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec sys_alert_det%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_sys_alert_det := next_key(sequence_in);
        END IF;
        ins(id_sys_alert_det_in    => l_rec.id_sys_alert_det,
            id_reg_in              => l_rec.id_reg,
            id_episode_in          => l_rec.id_episode,
            id_institution_in      => l_rec.id_institution,
            id_prof_in             => l_rec.id_prof,
            replace1_in            => l_rec.replace1,
            replace2_in            => l_rec.replace2,
            id_schedule_in         => l_rec.id_schedule,
            id_sys_alert_in        => l_rec.id_sys_alert,
            id_reg_det_in          => l_rec.id_reg_det,
            id_clinical_service_in => l_rec.id_clinical_service,
            id_room_in             => l_rec.id_room,
            dt_req_tstz_in         => l_rec.dt_req_tstz,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            id_patient_in          => l_rec.id_patient,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN sys_alert_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN sys_alert_det.id_sys_alert_det%TYPE
    
     IS
        retval sys_alert_det.id_sys_alert_det%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_sys_alert_det.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_SYS_ALERT_DET'));
    END next_key;

    PROCEDURE ins
    (
        id_reg_in              IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_episode_in          IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_institution_in      IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_prof_in             IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        replace1_in            IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace2_in            IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        id_schedule_in         IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_sys_alert_in        IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_reg_det_in          IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_clinical_service_in IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_room_in             IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        dt_req_tstz_in         IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        create_user_in         IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        id_patient_in          IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        id_sys_alert_det_out   IN OUT sys_alert_det.id_sys_alert_det%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky sys_alert_det.id_sys_alert_det%TYPE := next_key;
    BEGIN
        ins(id_sys_alert_det_in    => l_pky,
            id_reg_in              => id_reg_in,
            id_episode_in          => id_episode_in,
            id_institution_in      => id_institution_in,
            id_prof_in             => id_prof_in,
            replace1_in            => replace1_in,
            replace2_in            => replace2_in,
            id_schedule_in         => id_schedule_in,
            id_sys_alert_in        => id_sys_alert_in,
            id_reg_det_in          => id_reg_det_in,
            id_clinical_service_in => id_clinical_service_in,
            id_room_in             => id_room_in,
            dt_req_tstz_in         => dt_req_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_patient_in          => id_patient_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_sys_alert_det_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_reg_in              IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_episode_in          IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_institution_in      IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_prof_in             IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        replace1_in            IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace2_in            IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        id_schedule_in         IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_sys_alert_in        IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_reg_det_in          IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_clinical_service_in IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_room_in             IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        dt_req_tstz_in         IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        create_user_in         IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        id_patient_in          IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        id_sys_alert_det_out   IN OUT sys_alert_det.id_sys_alert_det%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_reg_in              => id_reg_in,
            id_episode_in          => id_episode_in,
            id_institution_in      => id_institution_in,
            id_prof_in             => id_prof_in,
            replace1_in            => replace1_in,
            replace2_in            => replace2_in,
            id_schedule_in         => id_schedule_in,
            id_sys_alert_in        => id_sys_alert_in,
            id_reg_det_in          => id_reg_det_in,
            id_clinical_service_in => id_clinical_service_in,
            id_room_in             => id_room_in,
            dt_req_tstz_in         => dt_req_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_patient_in          => id_patient_in,
            id_sys_alert_det_out   => id_sys_alert_det_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    FUNCTION ins
    (
        id_reg_in              IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_episode_in          IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_institution_in      IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_prof_in             IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        replace1_in            IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace2_in            IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        id_schedule_in         IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_sys_alert_in        IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_reg_det_in          IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_clinical_service_in IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_room_in             IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        dt_req_tstz_in         IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        create_user_in         IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        id_patient_in          IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) RETURN sys_alert_det.id_sys_alert_det%TYPE IS
        l_pky sys_alert_det.id_sys_alert_det%TYPE := next_key;
    BEGIN
        ins(id_sys_alert_det_in    => l_pky,
            id_reg_in              => id_reg_in,
            id_episode_in          => id_episode_in,
            id_institution_in      => id_institution_in,
            id_prof_in             => id_prof_in,
            replace1_in            => replace1_in,
            replace2_in            => replace2_in,
            id_schedule_in         => id_schedule_in,
            id_sys_alert_in        => id_sys_alert_in,
            id_reg_det_in          => id_reg_det_in,
            id_clinical_service_in => id_clinical_service_in,
            id_room_in             => id_room_in,
            dt_req_tstz_in         => dt_req_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_patient_in          => id_patient_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_reg_in              IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_episode_in          IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_institution_in      IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_prof_in             IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        replace1_in            IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace2_in            IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        id_schedule_in         IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_sys_alert_in        IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_reg_det_in          IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_clinical_service_in IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_room_in             IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        dt_req_tstz_in         IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        create_user_in         IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        id_patient_in          IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) RETURN sys_alert_det.id_sys_alert_det%TYPE IS
        l_pky    sys_alert_det.id_sys_alert_det%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_sys_alert_det_in    => l_pky,
            id_reg_in              => id_reg_in,
            id_episode_in          => id_episode_in,
            id_institution_in      => id_institution_in,
            id_prof_in             => id_prof_in,
            replace1_in            => replace1_in,
            replace2_in            => replace2_in,
            id_schedule_in         => id_schedule_in,
            id_sys_alert_in        => id_sys_alert_in,
            id_reg_det_in          => id_reg_det_in,
            id_clinical_service_in => id_clinical_service_in,
            id_room_in             => id_room_in,
            dt_req_tstz_in         => dt_req_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_patient_in          => id_patient_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_reg_in              IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_episode_in          IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_institution_in      IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_prof_in             IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        replace1_in            IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace2_in            IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        id_schedule_in         IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_sys_alert_in        IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_reg_det_in          IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_clinical_service_in IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_room_in             IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        dt_req_tstz_in         IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        create_user_in         IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        id_patient_in          IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky sys_alert_det.id_sys_alert_det%TYPE := next_key;
    BEGIN
        ins(id_sys_alert_det_in    => l_pky,
            id_reg_in              => id_reg_in,
            id_episode_in          => id_episode_in,
            id_institution_in      => id_institution_in,
            id_prof_in             => id_prof_in,
            replace1_in            => replace1_in,
            replace2_in            => replace2_in,
            id_schedule_in         => id_schedule_in,
            id_sys_alert_in        => id_sys_alert_in,
            id_reg_det_in          => id_reg_det_in,
            id_clinical_service_in => id_clinical_service_in,
            id_room_in             => id_room_in,
            dt_req_tstz_in         => dt_req_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_patient_in          => id_patient_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_reg_in              IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_episode_in          IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_institution_in      IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_prof_in             IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        replace1_in            IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace2_in            IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        id_schedule_in         IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_sys_alert_in        IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_reg_det_in          IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_clinical_service_in IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_room_in             IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        dt_req_tstz_in         IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        create_user_in         IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        id_patient_in          IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        l_pky    sys_alert_det.id_sys_alert_det%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_sys_alert_det_in    => l_pky,
            id_reg_in              => id_reg_in,
            id_episode_in          => id_episode_in,
            id_institution_in      => id_institution_in,
            id_prof_in             => id_prof_in,
            replace1_in            => replace1_in,
            replace2_in            => replace2_in,
            id_schedule_in         => id_schedule_in,
            id_sys_alert_in        => id_sys_alert_in,
            id_reg_det_in          => id_reg_det_in,
            id_clinical_service_in => id_clinical_service_in,
            id_room_in             => id_room_in,
            dt_req_tstz_in         => dt_req_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_patient_in          => id_patient_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN sys_alert_det_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO sys_alert_det
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REG _' || indx,
                                                        value_in           => rows_in(indx).id_reg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF _' || indx,
                                                        value_in           => rows_in(indx).id_prof,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'REPLACE1 _' || indx,
                                                        value_in           => rows_in(indx).replace1,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'REPLACE2 _' || indx,
                                                        value_in           => rows_in(indx).replace2,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHEDULE _' || indx,
                                                        value_in           => rows_in(indx).id_schedule,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SYS_ALERT _' || indx,
                                                        value_in           => rows_in(indx).id_sys_alert,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REG_DET _' || indx,
                                                        value_in           => rows_in(indx).id_reg_det,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CLINICAL_SERVICE _' || indx,
                                                        value_in           => rows_in(indx).id_clinical_service,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROOM _' || indx,
                                                        value_in           => rows_in(indx).id_room,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SYS_ALERT_DET _' || indx,
                                                        value_in           => rows_in(indx).id_sys_alert_det,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REQ_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_req_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'SYS_ALERT_DET',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN sys_alert_det_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_sys_alert_det_in     IN sys_alert_det.id_sys_alert_det%TYPE,
        id_reg_in               IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_reg_nin              IN BOOLEAN := TRUE,
        id_episode_in           IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_institution_in       IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_prof_in              IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        id_prof_nin             IN BOOLEAN := TRUE,
        replace1_in             IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace1_nin            IN BOOLEAN := TRUE,
        replace2_in             IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        replace2_nin            IN BOOLEAN := TRUE,
        id_schedule_in          IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin         IN BOOLEAN := TRUE,
        id_sys_alert_in         IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_sys_alert_nin        IN BOOLEAN := TRUE,
        id_reg_det_in           IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_reg_det_nin          IN BOOLEAN := TRUE,
        id_clinical_service_in  IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin IN BOOLEAN := TRUE,
        id_room_in              IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        id_room_nin             IN BOOLEAN := TRUE,
        dt_req_tstz_in          IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin         IN BOOLEAN := TRUE,
        create_user_in          IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_patient_in           IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_reg_n              NUMBER(1);
        l_id_episode_n          NUMBER(1);
        l_id_institution_n      NUMBER(1);
        l_id_prof_n             NUMBER(1);
        l_replace1_n            NUMBER(1);
        l_replace2_n            NUMBER(1);
        l_id_schedule_n         NUMBER(1);
        l_id_sys_alert_n        NUMBER(1);
        l_id_reg_det_n          NUMBER(1);
        l_id_clinical_service_n NUMBER(1);
        l_id_room_n             NUMBER(1);
        l_dt_req_tstz_n         NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_id_patient_n          NUMBER(1);
    BEGIN
    
        l_id_reg_n              := sys.diutil.bool_to_int(id_reg_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_id_institution_n      := sys.diutil.bool_to_int(id_institution_nin);
        l_id_prof_n             := sys.diutil.bool_to_int(id_prof_nin);
        l_replace1_n            := sys.diutil.bool_to_int(replace1_nin);
        l_replace2_n            := sys.diutil.bool_to_int(replace2_nin);
        l_id_schedule_n         := sys.diutil.bool_to_int(id_schedule_nin);
        l_id_sys_alert_n        := sys.diutil.bool_to_int(id_sys_alert_nin);
        l_id_reg_det_n          := sys.diutil.bool_to_int(id_reg_det_nin);
        l_id_clinical_service_n := sys.diutil.bool_to_int(id_clinical_service_nin);
        l_id_room_n             := sys.diutil.bool_to_int(id_room_nin);
        l_dt_req_tstz_n         := sys.diutil.bool_to_int(dt_req_tstz_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
    
        UPDATE sys_alert_det
           SET id_reg              = decode(l_id_reg_n, 0, id_reg_in, nvl(id_reg_in, id_reg)),
               id_episode          = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_institution      = decode(l_id_institution_n,
                                            0,
                                            id_institution_in,
                                            nvl(id_institution_in, id_institution)),
               id_prof             = decode(l_id_prof_n, 0, id_prof_in, nvl(id_prof_in, id_prof)),
               replace1            = decode(l_replace1_n, 0, replace1_in, nvl(replace1_in, replace1)),
               replace2            = decode(l_replace2_n, 0, replace2_in, nvl(replace2_in, replace2)),
               id_schedule         = decode(l_id_schedule_n, 0, id_schedule_in, nvl(id_schedule_in, id_schedule)),
               id_sys_alert        = decode(l_id_sys_alert_n, 0, id_sys_alert_in, nvl(id_sys_alert_in, id_sys_alert)),
               id_reg_det          = decode(l_id_reg_det_n, 0, id_reg_det_in, nvl(id_reg_det_in, id_reg_det)),
               id_clinical_service = decode(l_id_clinical_service_n,
                                            0,
                                            id_clinical_service_in,
                                            nvl(id_clinical_service_in, id_clinical_service)),
               id_room             = decode(l_id_room_n, 0, id_room_in, nvl(id_room_in, id_room)),
               dt_req_tstz         = decode(l_dt_req_tstz_n, 0, dt_req_tstz_in, nvl(dt_req_tstz_in, dt_req_tstz)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution)),
               id_patient          = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient))
         WHERE id_sys_alert_det = id_sys_alert_det_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'SYS_ALERT_DET');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    IF l_name = 'AT_CLIN_SERV_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CLINICAL_SERVICE',
                                                        value_in           => id_clinical_service_in);
                    END IF;
                    IF l_name = 'AT_IDE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'AT_II_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'AT_IP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF',
                                                        value_in           => id_prof_in);
                    END IF;
                    IF l_name = 'AT_IS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE',
                                                        value_in           => id_schedule_in);
                    END IF;
                    IF l_name = 'AT_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'AT_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'AT_SYS_ALERT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SYS_ALERT',
                                                        value_in           => id_sys_alert_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_sys_alert_det_in     IN sys_alert_det.id_sys_alert_det%TYPE,
        id_reg_in               IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_reg_nin              IN BOOLEAN := TRUE,
        id_episode_in           IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_institution_in       IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_prof_in              IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        id_prof_nin             IN BOOLEAN := TRUE,
        replace1_in             IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace1_nin            IN BOOLEAN := TRUE,
        replace2_in             IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        replace2_nin            IN BOOLEAN := TRUE,
        id_schedule_in          IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin         IN BOOLEAN := TRUE,
        id_sys_alert_in         IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_sys_alert_nin        IN BOOLEAN := TRUE,
        id_reg_det_in           IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_reg_det_nin          IN BOOLEAN := TRUE,
        id_clinical_service_in  IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin IN BOOLEAN := TRUE,
        id_room_in              IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        id_room_nin             IN BOOLEAN := TRUE,
        dt_req_tstz_in          IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin         IN BOOLEAN := TRUE,
        create_user_in          IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_patient_in           IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_sys_alert_det_in     => id_sys_alert_det_in,
            id_reg_in               => id_reg_in,
            id_reg_nin              => id_reg_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            id_institution_in       => id_institution_in,
            id_institution_nin      => id_institution_nin,
            id_prof_in              => id_prof_in,
            id_prof_nin             => id_prof_nin,
            replace1_in             => replace1_in,
            replace1_nin            => replace1_nin,
            replace2_in             => replace2_in,
            replace2_nin            => replace2_nin,
            id_schedule_in          => id_schedule_in,
            id_schedule_nin         => id_schedule_nin,
            id_sys_alert_in         => id_sys_alert_in,
            id_sys_alert_nin        => id_sys_alert_nin,
            id_reg_det_in           => id_reg_det_in,
            id_reg_det_nin          => id_reg_det_nin,
            id_clinical_service_in  => id_clinical_service_in,
            id_clinical_service_nin => id_clinical_service_nin,
            id_room_in              => id_room_in,
            id_room_nin             => id_room_nin,
            dt_req_tstz_in          => dt_req_tstz_in,
            dt_req_tstz_nin         => dt_req_tstz_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_reg_in               IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_reg_nin              IN BOOLEAN := TRUE,
        id_episode_in           IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_institution_in       IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_prof_in              IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        id_prof_nin             IN BOOLEAN := TRUE,
        replace1_in             IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace1_nin            IN BOOLEAN := TRUE,
        replace2_in             IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        replace2_nin            IN BOOLEAN := TRUE,
        id_schedule_in          IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin         IN BOOLEAN := TRUE,
        id_sys_alert_in         IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_sys_alert_nin        IN BOOLEAN := TRUE,
        id_reg_det_in           IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_reg_det_nin          IN BOOLEAN := TRUE,
        id_clinical_service_in  IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin IN BOOLEAN := TRUE,
        id_room_in              IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        id_room_nin             IN BOOLEAN := TRUE,
        dt_req_tstz_in          IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin         IN BOOLEAN := TRUE,
        create_user_in          IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_patient_in           IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_reg_n              NUMBER(1);
        l_id_episode_n          NUMBER(1);
        l_id_institution_n      NUMBER(1);
        l_id_prof_n             NUMBER(1);
        l_replace1_n            NUMBER(1);
        l_replace2_n            NUMBER(1);
        l_id_schedule_n         NUMBER(1);
        l_id_sys_alert_n        NUMBER(1);
        l_id_reg_det_n          NUMBER(1);
        l_id_clinical_service_n NUMBER(1);
        l_id_room_n             NUMBER(1);
        l_dt_req_tstz_n         NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_id_patient_n          NUMBER(1);
        id_sys_alert_det_in     sys_alert_det.id_sys_alert_det%TYPE;
    BEGIN
    
        l_id_reg_n              := sys.diutil.bool_to_int(id_reg_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_id_institution_n      := sys.diutil.bool_to_int(id_institution_nin);
        l_id_prof_n             := sys.diutil.bool_to_int(id_prof_nin);
        l_replace1_n            := sys.diutil.bool_to_int(replace1_nin);
        l_replace2_n            := sys.diutil.bool_to_int(replace2_nin);
        l_id_schedule_n         := sys.diutil.bool_to_int(id_schedule_nin);
        l_id_sys_alert_n        := sys.diutil.bool_to_int(id_sys_alert_nin);
        l_id_reg_det_n          := sys.diutil.bool_to_int(id_reg_det_nin);
        l_id_clinical_service_n := sys.diutil.bool_to_int(id_clinical_service_nin);
        l_id_room_n             := sys.diutil.bool_to_int(id_room_nin);
        l_dt_req_tstz_n         := sys.diutil.bool_to_int(dt_req_tstz_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
    
        l_sql := 'UPDATE SYS_ALERT_DET SET ' || ' ID_REG = decode (' || l_id_reg_n ||
                 ',0,:id_reg_in, NVL (:id_reg_in, ID_REG)) ' || ',' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                 ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' || ' ID_INSTITUTION = decode (' ||
                 l_id_institution_n || ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' ID_PROF = decode (' || l_id_prof_n || ',0,:id_prof_in, NVL (:id_prof_in, ID_PROF)) ' || ',' ||
                 ' REPLACE1 = decode (' || l_replace1_n || ',0,:replace1_in, NVL (:replace1_in, REPLACE1)) ' || ',' ||
                 ' REPLACE2 = decode (' || l_replace2_n || ',0,:replace2_in, NVL (:replace2_in, REPLACE2)) ' || ',' ||
                 ' ID_SCHEDULE = decode (' || l_id_schedule_n ||
                 ',0,:id_schedule_in, NVL (:id_schedule_in, ID_SCHEDULE)) ' || ',' || ' ID_SYS_ALERT = decode (' ||
                 l_id_sys_alert_n || ',0,:id_sys_alert_in, NVL (:id_sys_alert_in, ID_SYS_ALERT)) ' || ',' ||
                 ' ID_REG_DET = decode (' || l_id_reg_det_n || ',0,:id_reg_det_in, NVL (:id_reg_det_in, ID_REG_DET)) ' || ',' ||
                 ' ID_CLINICAL_SERVICE = decode (' || l_id_clinical_service_n ||
                 ',0,:id_clinical_service_in, NVL (:id_clinical_service_in, ID_CLINICAL_SERVICE)) ' || ',' ||
                 ' ID_ROOM = decode (' || l_id_room_n || ',0,:id_room_in, NVL (:id_room_in, ID_ROOM)) ' || ',' ||
                 ' DT_REQ_TSTZ = decode (' || l_dt_req_tstz_n ||
                 ',0,:dt_req_tstz_in, NVL (:dt_req_tstz_in, DT_REQ_TSTZ)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_reg_in, id_episode_in, id_institution_in, id_prof_in, replace1_in, replace2_in, id_schedule_in, id_sys_alert_in, id_reg_det_in, id_clinical_service_in, id_room_in, dt_req_tstz_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_patient_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'SYS_ALERT_DET');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
    BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
        THEN
                RAISE;
        ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    IF l_name = 'AT_CLIN_SERV_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CLINICAL_SERVICE',
                                                        value_in           => id_clinical_service_in);
                    END IF;
                    IF l_name = 'AT_IDE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'AT_II_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'AT_IP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF',
                                                        value_in           => id_prof_in);
                    END IF;
                    IF l_name = 'AT_IS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE',
                                                        value_in           => id_schedule_in);
                    END IF;
                    IF l_name = 'AT_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'AT_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'AT_SYS_ALERT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SYS_ALERT',
                                                        value_in           => id_sys_alert_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
        END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                    
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;
                    
    PROCEDURE upd
    (
        id_reg_in               IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_reg_nin              IN BOOLEAN := TRUE,
        id_episode_in           IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_institution_in       IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_prof_in              IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        id_prof_nin             IN BOOLEAN := TRUE,
        replace1_in             IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace1_nin            IN BOOLEAN := TRUE,
        replace2_in             IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        replace2_nin            IN BOOLEAN := TRUE,
        id_schedule_in          IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin         IN BOOLEAN := TRUE,
        id_sys_alert_in         IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_sys_alert_nin        IN BOOLEAN := TRUE,
        id_reg_det_in           IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_reg_det_nin          IN BOOLEAN := TRUE,
        id_clinical_service_in  IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin IN BOOLEAN := TRUE,
        id_room_in              IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        id_room_nin             IN BOOLEAN := TRUE,
        dt_req_tstz_in          IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin         IN BOOLEAN := TRUE,
        create_user_in          IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_patient_in           IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_reg_in               => id_reg_in,
            id_reg_nin              => id_reg_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            id_institution_in       => id_institution_in,
            id_institution_nin      => id_institution_nin,
            id_prof_in              => id_prof_in,
            id_prof_nin             => id_prof_nin,
            replace1_in             => replace1_in,
            replace1_nin            => replace1_nin,
            replace2_in             => replace2_in,
            replace2_nin            => replace2_nin,
            id_schedule_in          => id_schedule_in,
            id_schedule_nin         => id_schedule_nin,
            id_sys_alert_in         => id_sys_alert_in,
            id_sys_alert_nin        => id_sys_alert_nin,
            id_reg_det_in           => id_reg_det_in,
            id_reg_det_nin          => id_reg_det_nin,
            id_clinical_service_in  => id_clinical_service_in,
            id_clinical_service_nin => id_clinical_service_nin,
            id_room_in              => id_room_in,
            id_room_nin             => id_room_nin,
            dt_req_tstz_in          => dt_req_tstz_in,
            dt_req_tstz_nin         => dt_req_tstz_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;
                    
    PROCEDURE upd
    (
        rec_in          IN sys_alert_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_reg_in              => rec_in.id_reg,
            id_episode_in          => rec_in.id_episode,
            id_institution_in      => rec_in.id_institution,
            id_prof_in             => rec_in.id_prof,
            replace1_in            => rec_in.replace1,
            replace2_in            => rec_in.replace2,
            id_schedule_in         => rec_in.id_schedule,
            id_sys_alert_in        => rec_in.id_sys_alert,
            id_reg_det_in          => rec_in.id_reg_det,
            id_clinical_service_in => rec_in.id_clinical_service,
            id_room_in             => rec_in.id_room,
            id_sys_alert_det_in    => rec_in.id_sys_alert_det,
            dt_req_tstz_in         => rec_in.dt_req_tstz,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            id_patient_in          => rec_in.id_patient
                    
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;
                    
    PROCEDURE upd
    (
        rec_in          IN sys_alert_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_reg_in              => rec_in.id_reg,
            id_episode_in          => rec_in.id_episode,
            id_institution_in      => rec_in.id_institution,
            id_prof_in             => rec_in.id_prof,
            replace1_in            => rec_in.replace1,
            replace2_in            => rec_in.replace2,
            id_schedule_in         => rec_in.id_schedule,
            id_sys_alert_in        => rec_in.id_sys_alert,
            id_reg_det_in          => rec_in.id_reg_det,
            id_clinical_service_in => rec_in.id_clinical_service,
            id_room_in             => rec_in.id_room,
            id_sys_alert_det_in    => rec_in.id_sys_alert_det,
            dt_req_tstz_in         => rec_in.dt_req_tstz,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            id_patient_in          => rec_in.id_patient
                    
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;
                    
    PROCEDURE upd_ins
    (
        id_sys_alert_det_in    IN sys_alert_det.id_sys_alert_det%TYPE,
        id_reg_in              IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_episode_in          IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_institution_in      IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_prof_in             IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        replace1_in            IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace2_in            IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        id_schedule_in         IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_sys_alert_in        IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_reg_det_in          IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_clinical_service_in IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_room_in             IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        dt_req_tstz_in         IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        create_user_in         IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        id_patient_in          IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        upd(id_sys_alert_det_in    => id_sys_alert_det_in,
            id_reg_in              => id_reg_in,
            id_episode_in          => id_episode_in,
            id_institution_in      => id_institution_in,
            id_prof_in             => id_prof_in,
            replace1_in            => replace1_in,
            replace2_in            => replace2_in,
            id_schedule_in         => id_schedule_in,
            id_sys_alert_in        => id_sys_alert_in,
            id_reg_det_in          => id_reg_det_in,
            id_clinical_service_in => id_clinical_service_in,
            id_room_in             => id_room_in,
            dt_req_tstz_in         => dt_req_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_patient_in          => id_patient_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_sys_alert_det_in    => id_sys_alert_det_in,
                id_reg_in              => id_reg_in,
                id_episode_in          => id_episode_in,
                id_institution_in      => id_institution_in,
                id_prof_in             => id_prof_in,
                replace1_in            => replace1_in,
                replace2_in            => replace2_in,
                id_schedule_in         => id_schedule_in,
                id_sys_alert_in        => id_sys_alert_in,
                id_reg_det_in          => id_reg_det_in,
                id_clinical_service_in => id_clinical_service_in,
                id_room_in             => id_room_in,
                dt_req_tstz_in         => dt_req_tstz_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                id_patient_in          => id_patient_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;
                    
    PROCEDURE upd_ins
    (
        id_sys_alert_det_in    IN sys_alert_det.id_sys_alert_det%TYPE,
        id_reg_in              IN sys_alert_det.id_reg%TYPE DEFAULT NULL,
        id_episode_in          IN sys_alert_det.id_episode%TYPE DEFAULT NULL,
        id_institution_in      IN sys_alert_det.id_institution%TYPE DEFAULT NULL,
        id_prof_in             IN sys_alert_det.id_prof%TYPE DEFAULT NULL,
        replace1_in            IN sys_alert_det.replace1%TYPE DEFAULT NULL,
        replace2_in            IN sys_alert_det.replace2%TYPE DEFAULT NULL,
        id_schedule_in         IN sys_alert_det.id_schedule%TYPE DEFAULT NULL,
        id_sys_alert_in        IN sys_alert_det.id_sys_alert%TYPE DEFAULT NULL,
        id_reg_det_in          IN sys_alert_det.id_reg_det%TYPE DEFAULT NULL,
        id_clinical_service_in IN sys_alert_det.id_clinical_service%TYPE DEFAULT NULL,
        id_room_in             IN sys_alert_det.id_room%TYPE DEFAULT NULL,
        dt_req_tstz_in         IN sys_alert_det.dt_req_tstz%TYPE DEFAULT NULL,
        create_user_in         IN sys_alert_det.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sys_alert_det.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sys_alert_det.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sys_alert_det.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sys_alert_det.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sys_alert_det.update_institution%TYPE DEFAULT NULL,
        id_patient_in          IN sys_alert_det.id_patient%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_sys_alert_det_in,
                id_reg_in,
                id_episode_in,
                id_institution_in,
                id_prof_in,
                replace1_in,
                replace2_in,
                id_schedule_in,
                id_sys_alert_in,
                id_reg_det_in,
                id_clinical_service_in,
                id_room_in,
                dt_req_tstz_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_patient_in,
                handle_error_in,
                rows_out);
    END upd_ins;
                    
    PROCEDURE upd
    (
        col_in            IN sys_alert_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_reg              id_reg_cc;
        l_id_episode          id_episode_cc;
        l_id_institution      id_institution_cc;
        l_id_prof             id_prof_cc;
        l_replace1            replace1_cc;
        l_replace2            replace2_cc;
        l_id_schedule         id_schedule_cc;
        l_id_sys_alert        id_sys_alert_cc;
        l_id_reg_det          id_reg_det_cc;
        l_id_clinical_service id_clinical_service_cc;
        l_id_room             id_room_cc;
        l_id_sys_alert_det    id_sys_alert_det_cc;
        l_dt_req_tstz         dt_req_tstz_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
        l_id_patient          id_patient_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_reg(i) := col_in(i).id_reg;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_prof(i) := col_in(i).id_prof;
            l_replace1(i) := col_in(i).replace1;
            l_replace2(i) := col_in(i).replace2;
            l_id_schedule(i) := col_in(i).id_schedule;
            l_id_sys_alert(i) := col_in(i).id_sys_alert;
            l_id_reg_det(i) := col_in(i).id_reg_det;
            l_id_clinical_service(i) := col_in(i).id_clinical_service;
            l_id_room(i) := col_in(i).id_room;
            l_id_sys_alert_det(i) := col_in(i).id_sys_alert_det;
            l_dt_req_tstz(i) := col_in(i).dt_req_tstz;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_patient(i) := col_in(i).id_patient;
                    END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
            THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE sys_alert_det
                   SET id_reg              = nvl(l_id_reg(i), id_reg),
                       id_episode          = nvl(l_id_episode(i), id_episode),
                       id_institution      = nvl(l_id_institution(i), id_institution),
                       id_prof             = nvl(l_id_prof(i), id_prof),
                       replace1            = nvl(l_replace1(i), replace1),
                       replace2            = nvl(l_replace2(i), replace2),
                       id_schedule         = nvl(l_id_schedule(i), id_schedule),
                       id_sys_alert        = nvl(l_id_sys_alert(i), id_sys_alert),
                       id_reg_det          = nvl(l_id_reg_det(i), id_reg_det),
                       id_clinical_service = nvl(l_id_clinical_service(i), id_clinical_service),
                       id_room             = nvl(l_id_room(i), id_room),
                       dt_req_tstz         = nvl(l_dt_req_tstz(i), dt_req_tstz),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution),
                       id_patient          = nvl(l_id_patient(i), id_patient)
                 WHERE id_sys_alert_det = l_id_sys_alert_det(i);
            ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE sys_alert_det
                   SET id_reg              = l_id_reg(i),
                       id_episode          = l_id_episode(i),
                       id_institution      = l_id_institution(i),
                       id_prof             = l_id_prof(i),
                       replace1            = l_replace1(i),
                       replace2            = l_replace2(i),
                       id_schedule         = l_id_schedule(i),
                       id_sys_alert        = l_id_sys_alert(i),
                       id_reg_det          = l_id_reg_det(i),
                       id_clinical_service = l_id_clinical_service(i),
                       id_room             = l_id_room(i),
                       dt_req_tstz         = l_dt_req_tstz(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i),
                       id_patient          = l_id_patient(i)
                 WHERE id_sys_alert_det = l_id_sys_alert_det(i);
            END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN sys_alert_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE SYS_ALERT_DET
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE SYS_ALERT_DET
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE SYS_ALERT_DET set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE SYS_ALERT_DET set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_sys_alert_det_in IN sys_alert_det.id_sys_alert_det%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sys_alert_det
         WHERE id_sys_alert_det = id_sys_alert_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_sys_alert_det_in IN sys_alert_det.id_sys_alert_det%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_sys_alert_det_in => id_sys_alert_det_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_SYS_ALERT_DET
    PROCEDURE del_id_sys_alert_det
    (
        id_sys_alert_det_in IN sys_alert_det.id_sys_alert_det%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sys_alert_det
         WHERE id_sys_alert_det = id_sys_alert_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_sys_alert_det;

    -- Delete all rows for primary key column ID_SYS_ALERT_DET
    PROCEDURE del_id_sys_alert_det
    (
        id_sys_alert_det_in IN sys_alert_det.id_sys_alert_det%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_sys_alert_det(id_sys_alert_det_in => id_sys_alert_det_in,
                             handle_error_in     => handle_error_in,
                             rows_out            => rows_out);
    END del_id_sys_alert_det;

    PROCEDURE del_at_clin_serv_fk
    (
        id_clinical_service_in IN sys_alert_det.id_clinical_service%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sys_alert_det
         WHERE id_clinical_service = del_at_clin_serv_fk.id_clinical_service_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_at_clin_serv_fk;

    PROCEDURE del_at_clin_serv_fk
    (
        id_clinical_service_in IN sys_alert_det.id_clinical_service%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_at_clin_serv_fk(id_clinical_service_in => id_clinical_service_in,
                            handle_error_in        => handle_error_in,
                            rows_out               => rows_out);
    END del_at_clin_serv_fk;

    PROCEDURE del_at_ide_fk
    (
        id_episode_in   IN sys_alert_det.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sys_alert_det
         WHERE id_episode = del_at_ide_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_at_ide_fk;

    PROCEDURE del_at_ide_fk
    (
        id_episode_in   IN sys_alert_det.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_at_ide_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_at_ide_fk;

    PROCEDURE del_at_ii_fk
    (
        id_institution_in IN sys_alert_det.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sys_alert_det
         WHERE id_institution = del_at_ii_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_at_ii_fk;

    PROCEDURE del_at_ii_fk
    (
        id_institution_in IN sys_alert_det.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_at_ii_fk(id_institution_in => id_institution_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_at_ii_fk;

    PROCEDURE del_at_ip_fk
    (
        id_prof_in      IN sys_alert_det.id_prof%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sys_alert_det
         WHERE id_prof = del_at_ip_fk.id_prof_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_at_ip_fk;

    PROCEDURE del_at_ip_fk
    (
        id_prof_in      IN sys_alert_det.id_prof%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_at_ip_fk(id_prof_in => id_prof_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_at_ip_fk;

    PROCEDURE del_at_is_fk
    (
        id_schedule_in  IN sys_alert_det.id_schedule%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sys_alert_det
         WHERE id_schedule = del_at_is_fk.id_schedule_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_at_is_fk;

    PROCEDURE del_at_is_fk
    (
        id_schedule_in  IN sys_alert_det.id_schedule%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_at_is_fk(id_schedule_in => id_schedule_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_at_is_fk;

    PROCEDURE del_at_pat_fk
    (
        id_patient_in   IN sys_alert_det.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sys_alert_det
         WHERE id_patient = del_at_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_at_pat_fk;

    PROCEDURE del_at_pat_fk
    (
        id_patient_in   IN sys_alert_det.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_at_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_at_pat_fk;

    PROCEDURE del_at_room_fk
    (
        id_room_in      IN sys_alert_det.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sys_alert_det
         WHERE id_room = del_at_room_fk.id_room_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_at_room_fk;

    PROCEDURE del_at_room_fk
    (
        id_room_in      IN sys_alert_det.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_at_room_fk(id_room_in => id_room_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_at_room_fk;

    PROCEDURE del_at_sys_alert_fk
    (
        id_sys_alert_in IN sys_alert_det.id_sys_alert%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sys_alert_det
         WHERE id_sys_alert = del_at_sys_alert_fk.id_sys_alert_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_at_sys_alert_fk;

    PROCEDURE del_at_sys_alert_fk
    (
        id_sys_alert_in IN sys_alert_det.id_sys_alert%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_at_sys_alert_fk(id_sys_alert_in => id_sys_alert_in,
                            handle_error_in => handle_error_in,
                            rows_out        => rows_out);
    END del_at_sys_alert_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM SYS_ALERT_DET';
        ELSE
            RETURN 'DELETE FROM SYS_ALERT_DET WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SYS_ALERT_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SYS_ALERT_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(sys_alert_det_inout IN OUT sys_alert_det%ROWTYPE) IS
    BEGIN
        sys_alert_det_inout.id_reg              := NULL;
        sys_alert_det_inout.id_episode          := NULL;
        sys_alert_det_inout.id_institution      := NULL;
        sys_alert_det_inout.id_prof             := NULL;
        sys_alert_det_inout.replace1            := NULL;
        sys_alert_det_inout.replace2            := NULL;
        sys_alert_det_inout.id_schedule         := NULL;
        sys_alert_det_inout.id_sys_alert        := NULL;
        sys_alert_det_inout.id_reg_det          := NULL;
        sys_alert_det_inout.id_clinical_service := NULL;
        sys_alert_det_inout.id_room             := NULL;
        sys_alert_det_inout.id_sys_alert_det    := NULL;
        sys_alert_det_inout.dt_req_tstz         := NULL;
        sys_alert_det_inout.create_user         := NULL;
        sys_alert_det_inout.create_time         := NULL;
        sys_alert_det_inout.create_institution  := NULL;
        sys_alert_det_inout.update_user         := NULL;
        sys_alert_det_inout.update_time         := NULL;
        sys_alert_det_inout.update_institution  := NULL;
        sys_alert_det_inout.id_patient          := NULL;
    END initrec;

    FUNCTION initrec RETURN sys_alert_det%ROWTYPE IS
        l_sys_alert_det sys_alert_det%ROWTYPE;
    BEGIN
        RETURN l_sys_alert_det;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN sys_alert_det_tc IS
        data sys_alert_det_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM sys_alert_det
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN sys_alert_det_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data sys_alert_det_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_sys_alert_det;
/
