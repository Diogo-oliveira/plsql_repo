/*-- Last Change Revision: $Rev: 1589205 $*/
/*-- Last Change by: $Author: rui.gomes $*/
/*-- Date of last change: $Date: 2014-05-13 12:47:15 +0100 (ter, 13 mai 2014) $*/
CREATE OR REPLACE PACKAGE BODY ts_cda_req_det
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Maio 8, 2014 11:7:14
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_cda_req_det_in     IN cda_req_det.id_cda_req_det%TYPE,
        id_cda_req_in         IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        flg_status_in         IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        id_report_in          IN cda_req_det.id_report%TYPE DEFAULT NULL,
        qrda_type_in          IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        dt_status_start_in    IN cda_req_det.dt_status_start%TYPE DEFAULT current_timestamp,
        dt_status_end_in      IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        create_user_in        IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_time_in        IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_institution_in IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_time_in        IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_institution_in IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO cda_req_det
            (id_cda_req_det,
             id_cda_req,
             flg_status,
             id_report,
             qrda_type,
             dt_status_start,
             dt_status_end,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_cda_req_det_in,
             id_cda_req_in,
             flg_status_in,
             id_report_in,
             qrda_type_in,
             dt_status_start_in,
             dt_status_end_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'CDARD_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "CDARD_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'CDA_REQ_DET',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CDA_REQ',
                                                        value_in           => id_cda_req_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS',
                                                        value_in           => flg_status_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'CDA_REQ_DET');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    IF l_name = 'CDARD_CDAR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CDA_REQ',
                                                        value_in           => id_cda_req_in);
                    END IF;
                    IF l_name = 'CDARD_REP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REPORT',
                                                        value_in           => id_report_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_cda_req_det_in     IN cda_req_det.id_cda_req_det%TYPE,
        id_cda_req_in         IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        flg_status_in         IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        id_report_in          IN cda_req_det.id_report%TYPE DEFAULT NULL,
        qrda_type_in          IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        dt_status_start_in    IN cda_req_det.dt_status_start%TYPE DEFAULT current_timestamp,
        dt_status_end_in      IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        create_user_in        IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_time_in        IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_institution_in IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_time_in        IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_institution_in IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_cda_req_det_in     => id_cda_req_det_in,
            id_cda_req_in         => id_cda_req_in,
            flg_status_in         => flg_status_in,
            id_report_in          => id_report_in,
            qrda_type_in          => qrda_type_in,
            dt_status_start_in    => dt_status_start_in,
            dt_status_end_in      => dt_status_end_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN cda_req_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec cda_req_det%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_cda_req_det := next_key(sequence_in);
        END IF;
        ins(id_cda_req_det_in     => l_rec.id_cda_req_det,
            id_cda_req_in         => l_rec.id_cda_req,
            flg_status_in         => l_rec.flg_status,
            id_report_in          => l_rec.id_report,
            qrda_type_in          => l_rec.qrda_type,
            dt_status_start_in    => l_rec.dt_status_start,
            dt_status_end_in      => l_rec.dt_status_end,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_time_in        => l_rec.update_time,
            update_institution_in => l_rec.update_institution,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN cda_req_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN cda_req_det.id_cda_req_det%TYPE
    
     IS
        retval cda_req_det.id_cda_req_det%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_cda_req_det.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_CDA_REQ_DET'));
    END next_key;

    PROCEDURE ins
    (
        id_cda_req_in         IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        flg_status_in         IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        id_report_in          IN cda_req_det.id_report%TYPE DEFAULT NULL,
        qrda_type_in          IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        dt_status_start_in    IN cda_req_det.dt_status_start%TYPE DEFAULT current_timestamp,
        dt_status_end_in      IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        create_user_in        IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_time_in        IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_institution_in IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_time_in        IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_institution_in IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        id_cda_req_det_out    IN OUT cda_req_det.id_cda_req_det%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky cda_req_det.id_cda_req_det%TYPE := next_key;
    BEGIN
        ins(id_cda_req_det_in     => l_pky,
            id_cda_req_in         => id_cda_req_in,
            flg_status_in         => flg_status_in,
            id_report_in          => id_report_in,
            qrda_type_in          => qrda_type_in,
            dt_status_start_in    => dt_status_start_in,
            dt_status_end_in      => dt_status_end_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        id_cda_req_det_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_cda_req_in         IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        flg_status_in         IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        id_report_in          IN cda_req_det.id_report%TYPE DEFAULT NULL,
        qrda_type_in          IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        dt_status_start_in    IN cda_req_det.dt_status_start%TYPE DEFAULT current_timestamp,
        dt_status_end_in      IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        create_user_in        IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_time_in        IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_institution_in IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_time_in        IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_institution_in IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        id_cda_req_det_out    IN OUT cda_req_det.id_cda_req_det%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_cda_req_in         => id_cda_req_in,
            flg_status_in         => flg_status_in,
            id_report_in          => id_report_in,
            qrda_type_in          => qrda_type_in,
            dt_status_start_in    => dt_status_start_in,
            dt_status_end_in      => dt_status_end_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_cda_req_det_out    => id_cda_req_det_out,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    FUNCTION ins
    (
        id_cda_req_in         IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        flg_status_in         IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        id_report_in          IN cda_req_det.id_report%TYPE DEFAULT NULL,
        qrda_type_in          IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        dt_status_start_in    IN cda_req_det.dt_status_start%TYPE DEFAULT current_timestamp,
        dt_status_end_in      IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        create_user_in        IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_time_in        IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_institution_in IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_time_in        IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_institution_in IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) RETURN cda_req_det.id_cda_req_det%TYPE IS
        l_pky cda_req_det.id_cda_req_det%TYPE := next_key;
    BEGIN
        ins(id_cda_req_det_in     => l_pky,
            id_cda_req_in         => id_cda_req_in,
            flg_status_in         => flg_status_in,
            id_report_in          => id_report_in,
            qrda_type_in          => qrda_type_in,
            dt_status_start_in    => dt_status_start_in,
            dt_status_end_in      => dt_status_end_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_cda_req_in         IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        flg_status_in         IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        id_report_in          IN cda_req_det.id_report%TYPE DEFAULT NULL,
        qrda_type_in          IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        dt_status_start_in    IN cda_req_det.dt_status_start%TYPE DEFAULT current_timestamp,
        dt_status_end_in      IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        create_user_in        IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_time_in        IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_institution_in IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_time_in        IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_institution_in IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) RETURN cda_req_det.id_cda_req_det%TYPE IS
        l_pky    cda_req_det.id_cda_req_det%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_cda_req_det_in     => l_pky,
            id_cda_req_in         => id_cda_req_in,
            flg_status_in         => flg_status_in,
            id_report_in          => id_report_in,
            qrda_type_in          => qrda_type_in,
            dt_status_start_in    => dt_status_start_in,
            dt_status_end_in      => dt_status_end_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_cda_req_in         IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        flg_status_in         IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        id_report_in          IN cda_req_det.id_report%TYPE DEFAULT NULL,
        qrda_type_in          IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        dt_status_start_in    IN cda_req_det.dt_status_start%TYPE DEFAULT current_timestamp,
        dt_status_end_in      IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        create_user_in        IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_time_in        IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_institution_in IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_time_in        IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_institution_in IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky cda_req_det.id_cda_req_det%TYPE := next_key;
    BEGIN
        ins(id_cda_req_det_in     => l_pky,
            id_cda_req_in         => id_cda_req_in,
            flg_status_in         => flg_status_in,
            id_report_in          => id_report_in,
            qrda_type_in          => qrda_type_in,
            dt_status_start_in    => dt_status_start_in,
            dt_status_end_in      => dt_status_end_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_cda_req_in         IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        flg_status_in         IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        id_report_in          IN cda_req_det.id_report%TYPE DEFAULT NULL,
        qrda_type_in          IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        dt_status_start_in    IN cda_req_det.dt_status_start%TYPE DEFAULT current_timestamp,
        dt_status_end_in      IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        create_user_in        IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_time_in        IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_institution_in IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_time_in        IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_institution_in IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        l_pky    cda_req_det.id_cda_req_det%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_cda_req_det_in     => l_pky,
            id_cda_req_in         => id_cda_req_in,
            flg_status_in         => flg_status_in,
            id_report_in          => id_report_in,
            qrda_type_in          => qrda_type_in,
            dt_status_start_in    => dt_status_start_in,
            dt_status_end_in      => dt_status_end_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN cda_req_det_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO cda_req_det
                    (id_cda_req_det,
                     id_cda_req,
                     flg_status,
                     id_report,
                     qrda_type,
                     dt_status_start,
                     dt_status_end,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution)
                VALUES
                    (rows_in(indx).id_cda_req_det,
                     rows_in(indx).id_cda_req,
                     rows_in(indx).flg_status,
                     rows_in(indx).id_report,
                     rows_in(indx).qrda_type,
                     rows_in(indx).dt_status_start,
                     rows_in(indx).dt_status_end,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CDA_REQ_DET _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_cda_req_det,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CDA_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_cda_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REPORT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_report,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'QRDA_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .qrda_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_STATUS_START _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_status_start,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_STATUS_END _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_status_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'CDA_REQ_DET',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN cda_req_det_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_cda_req_det_in      IN cda_req_det.id_cda_req_det%TYPE,
        id_cda_req_in          IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        id_cda_req_nin         IN BOOLEAN := TRUE,
        flg_status_in          IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_report_in           IN cda_req_det.id_report%TYPE DEFAULT NULL,
        id_report_nin          IN BOOLEAN := TRUE,
        qrda_type_in           IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        qrda_type_nin          IN BOOLEAN := TRUE,
        dt_status_start_in     IN cda_req_det.dt_status_start%TYPE DEFAULT NULL,
        dt_status_start_nin    IN BOOLEAN := TRUE,
        dt_status_end_in       IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        dt_status_end_nin      IN BOOLEAN := TRUE,
        create_user_in         IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_cda_req_n         NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_id_report_n          NUMBER(1);
        l_qrda_type_n          NUMBER(1);
        l_dt_status_start_n    NUMBER(1);
        l_dt_status_end_n      NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
    BEGIN
    
        l_id_cda_req_n         := sys.diutil.bool_to_int(id_cda_req_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_id_report_n          := sys.diutil.bool_to_int(id_report_nin);
        l_qrda_type_n          := sys.diutil.bool_to_int(qrda_type_nin);
        l_dt_status_start_n    := sys.diutil.bool_to_int(dt_status_start_nin);
        l_dt_status_end_n      := sys.diutil.bool_to_int(dt_status_end_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE cda_req_det
           SET id_cda_req         = decode(l_id_cda_req_n, 0, id_cda_req_in, nvl(id_cda_req_in, id_cda_req)),
               flg_status         = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_report          = decode(l_id_report_n, 0, id_report_in, nvl(id_report_in, id_report)),
               qrda_type          = decode(l_qrda_type_n, 0, qrda_type_in, nvl(qrda_type_in, qrda_type)),
               dt_status_start    = decode(l_dt_status_start_n,
                                           0,
                                           dt_status_start_in,
                                           nvl(dt_status_start_in, dt_status_start)),
               dt_status_end      = decode(l_dt_status_end_n, 0, dt_status_end_in, nvl(dt_status_end_in, dt_status_end)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution))
         WHERE id_cda_req_det = id_cda_req_det_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'CDARD_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "CDARD_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'CDA_REQ_DET',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CDA_REQ',
                                                        value_in           => id_cda_req_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS',
                                                        value_in           => flg_status_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'CDA_REQ_DET');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    IF l_name = 'CDARD_CDAR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CDA_REQ',
                                                        value_in           => id_cda_req_in);
                    END IF;
                    IF l_name = 'CDARD_REP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REPORT',
                                                        value_in           => id_report_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_cda_req_det_in      IN cda_req_det.id_cda_req_det%TYPE,
        id_cda_req_in          IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        id_cda_req_nin         IN BOOLEAN := TRUE,
        flg_status_in          IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_report_in           IN cda_req_det.id_report%TYPE DEFAULT NULL,
        id_report_nin          IN BOOLEAN := TRUE,
        qrda_type_in           IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        qrda_type_nin          IN BOOLEAN := TRUE,
        dt_status_start_in     IN cda_req_det.dt_status_start%TYPE DEFAULT NULL,
        dt_status_start_nin    IN BOOLEAN := TRUE,
        dt_status_end_in       IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        dt_status_end_nin      IN BOOLEAN := TRUE,
        create_user_in         IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_cda_req_det_in      => id_cda_req_det_in,
            id_cda_req_in          => id_cda_req_in,
            id_cda_req_nin         => id_cda_req_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            id_report_in           => id_report_in,
            id_report_nin          => id_report_nin,
            qrda_type_in           => qrda_type_in,
            qrda_type_nin          => qrda_type_nin,
            dt_status_start_in     => dt_status_start_in,
            dt_status_start_nin    => dt_status_start_nin,
            dt_status_end_in       => dt_status_end_in,
            dt_status_end_nin      => dt_status_end_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_cda_req_in          IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        id_cda_req_nin         IN BOOLEAN := TRUE,
        flg_status_in          IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_report_in           IN cda_req_det.id_report%TYPE DEFAULT NULL,
        id_report_nin          IN BOOLEAN := TRUE,
        qrda_type_in           IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        qrda_type_nin          IN BOOLEAN := TRUE,
        dt_status_start_in     IN cda_req_det.dt_status_start%TYPE DEFAULT NULL,
        dt_status_start_nin    IN BOOLEAN := TRUE,
        dt_status_end_in       IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        dt_status_end_nin      IN BOOLEAN := TRUE,
        create_user_in         IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_id_cda_req_n         NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_id_report_n          NUMBER(1);
        l_qrda_type_n          NUMBER(1);
        l_dt_status_start_n    NUMBER(1);
        l_dt_status_end_n      NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        id_cda_req_det_in      cda_req_det.id_cda_req_det%TYPE;
    BEGIN
    
        l_id_cda_req_n         := sys.diutil.bool_to_int(id_cda_req_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_id_report_n          := sys.diutil.bool_to_int(id_report_nin);
        l_qrda_type_n          := sys.diutil.bool_to_int(qrda_type_nin);
        l_dt_status_start_n    := sys.diutil.bool_to_int(dt_status_start_nin);
        l_dt_status_end_n      := sys.diutil.bool_to_int(dt_status_end_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE CDA_REQ_DET SET ' || ' ID_CDA_REQ = decode (' || l_id_cda_req_n ||
                 ',0,:id_cda_req_in, NVL (:id_cda_req_in, ID_CDA_REQ)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_REPORT = decode (' || l_id_report_n || ',0,:id_report_in, NVL (:id_report_in, ID_REPORT)) ' || ',' ||
                 ' QRDA_TYPE = decode (' || l_qrda_type_n || ',0,:qrda_type_in, NVL (:qrda_type_in, QRDA_TYPE)) ' || ',' ||
                 ' DT_STATUS_START = decode (' || l_dt_status_start_n ||
                 ',0,:dt_status_start_in, NVL (:dt_status_start_in, DT_STATUS_START)) ' || ',' ||
                 ' DT_STATUS_END = decode (' || l_dt_status_end_n ||
                 ',0,:dt_status_end_in, NVL (:dt_status_end_in, DT_STATUS_END)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_cda_req_in, flg_status_in, id_report_in, qrda_type_in, dt_status_start_in, dt_status_end_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'CDARD_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "CDARD_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'CDA_REQ_DET',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CDA_REQ',
                                                        value_in           => id_cda_req_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS',
                                                        value_in           => flg_status_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'CDA_REQ_DET');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    IF l_name = 'CDARD_CDAR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CDA_REQ',
                                                        value_in           => id_cda_req_in);
                    END IF;
                    IF l_name = 'CDARD_REP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REPORT',
                                                        value_in           => id_report_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_cda_req_in          IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        id_cda_req_nin         IN BOOLEAN := TRUE,
        flg_status_in          IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_report_in           IN cda_req_det.id_report%TYPE DEFAULT NULL,
        id_report_nin          IN BOOLEAN := TRUE,
        qrda_type_in           IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        qrda_type_nin          IN BOOLEAN := TRUE,
        dt_status_start_in     IN cda_req_det.dt_status_start%TYPE DEFAULT NULL,
        dt_status_start_nin    IN BOOLEAN := TRUE,
        dt_status_end_in       IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        dt_status_end_nin      IN BOOLEAN := TRUE,
        create_user_in         IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_cda_req_in          => id_cda_req_in,
            id_cda_req_nin         => id_cda_req_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            id_report_in           => id_report_in,
            id_report_nin          => id_report_nin,
            qrda_type_in           => qrda_type_in,
            qrda_type_nin          => qrda_type_nin,
            dt_status_start_in     => dt_status_start_in,
            dt_status_start_nin    => dt_status_start_nin,
            dt_status_end_in       => dt_status_end_in,
            dt_status_end_nin      => dt_status_end_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN cda_req_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_cda_req_det_in     => rec_in.id_cda_req_det,
            id_cda_req_in         => rec_in.id_cda_req,
            flg_status_in         => rec_in.flg_status,
            id_report_in          => rec_in.id_report,
            qrda_type_in          => rec_in.qrda_type,
            dt_status_start_in    => rec_in.dt_status_start,
            dt_status_end_in      => rec_in.dt_status_end,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN cda_req_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_cda_req_det_in     => rec_in.id_cda_req_det,
            id_cda_req_in         => rec_in.id_cda_req,
            flg_status_in         => rec_in.flg_status,
            id_report_in          => rec_in.id_report,
            qrda_type_in          => rec_in.qrda_type,
            dt_status_start_in    => rec_in.dt_status_start,
            dt_status_end_in      => rec_in.dt_status_end,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_cda_req_det_in     IN cda_req_det.id_cda_req_det%TYPE,
        id_cda_req_in         IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        flg_status_in         IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        id_report_in          IN cda_req_det.id_report%TYPE DEFAULT NULL,
        qrda_type_in          IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        dt_status_start_in    IN cda_req_det.dt_status_start%TYPE DEFAULT NULL,
        dt_status_end_in      IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        create_user_in        IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_time_in        IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_institution_in IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_time_in        IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_institution_in IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        upd(id_cda_req_det_in     => id_cda_req_det_in,
            id_cda_req_in         => id_cda_req_in,
            flg_status_in         => flg_status_in,
            id_report_in          => id_report_in,
            qrda_type_in          => qrda_type_in,
            dt_status_start_in    => dt_status_start_in,
            dt_status_end_in      => dt_status_end_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_cda_req_det_in     => id_cda_req_det_in,
                id_cda_req_in         => id_cda_req_in,
                flg_status_in         => flg_status_in,
                id_report_in          => id_report_in,
                qrda_type_in          => qrda_type_in,
                dt_status_start_in    => dt_status_start_in,
                dt_status_end_in      => dt_status_end_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_time_in        => update_time_in,
                update_institution_in => update_institution_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_cda_req_det_in     IN cda_req_det.id_cda_req_det%TYPE,
        id_cda_req_in         IN cda_req_det.id_cda_req%TYPE DEFAULT NULL,
        flg_status_in         IN cda_req_det.flg_status%TYPE DEFAULT NULL,
        id_report_in          IN cda_req_det.id_report%TYPE DEFAULT NULL,
        qrda_type_in          IN cda_req_det.qrda_type%TYPE DEFAULT NULL,
        dt_status_start_in    IN cda_req_det.dt_status_start%TYPE DEFAULT NULL,
        dt_status_end_in      IN cda_req_det.dt_status_end%TYPE DEFAULT NULL,
        create_user_in        IN cda_req_det.create_user%TYPE DEFAULT NULL,
        create_time_in        IN cda_req_det.create_time%TYPE DEFAULT NULL,
        create_institution_in IN cda_req_det.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN cda_req_det.update_user%TYPE DEFAULT NULL,
        update_time_in        IN cda_req_det.update_time%TYPE DEFAULT NULL,
        update_institution_in IN cda_req_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_cda_req_det_in,
                id_cda_req_in,
                flg_status_in,
                id_report_in,
                qrda_type_in,
                dt_status_start_in,
                dt_status_end_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN cda_req_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_cda_req_det     id_cda_req_det_cc;
        l_id_cda_req         id_cda_req_cc;
        l_flg_status         flg_status_cc;
        l_id_report          id_report_cc;
        l_qrda_type          qrda_type_cc;
        l_dt_status_start    dt_status_start_cc;
        l_dt_status_end      dt_status_end_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_time        update_time_cc;
        l_update_institution update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_cda_req_det(i) := col_in(i).id_cda_req_det;
            l_id_cda_req(i) := col_in(i).id_cda_req;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_report(i) := col_in(i).id_report;
            l_qrda_type(i) := col_in(i).qrda_type;
            l_dt_status_start(i) := col_in(i).dt_status_start;
            l_dt_status_end(i) := col_in(i).dt_status_end;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE cda_req_det
                   SET id_cda_req         = nvl(l_id_cda_req(i), id_cda_req),
                       flg_status         = nvl(l_flg_status(i), flg_status),
                       id_report          = nvl(l_id_report(i), id_report),
                       qrda_type          = nvl(l_qrda_type(i), qrda_type),
                       dt_status_start    = nvl(l_dt_status_start(i), dt_status_start),
                       dt_status_end      = nvl(l_dt_status_end(i), dt_status_end),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution)
                 WHERE id_cda_req_det = l_id_cda_req_det(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE cda_req_det
                   SET id_cda_req         = l_id_cda_req(i),
                       flg_status         = l_flg_status(i),
                       id_report          = l_id_report(i),
                       qrda_type          = l_qrda_type(i),
                       dt_status_start    = l_dt_status_start(i),
                       dt_status_end      = l_dt_status_end(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i)
                 WHERE id_cda_req_det = l_id_cda_req_det(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN cda_req_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE CDA_REQ_DET
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE CDA_REQ_DET
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE CDA_REQ_DET set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE CDA_REQ_DET set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_cda_req_det_in IN cda_req_det.id_cda_req_det%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM cda_req_det
         WHERE id_cda_req_det = id_cda_req_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_cda_req_det_in IN cda_req_det.id_cda_req_det%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_cda_req_det_in => id_cda_req_det_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_CDA_REQ_DET
    PROCEDURE del_id_cda_req_det
    (
        id_cda_req_det_in IN cda_req_det.id_cda_req_det%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM cda_req_det
         WHERE id_cda_req_det = id_cda_req_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_cda_req_det;

    -- Delete all rows for primary key column ID_CDA_REQ_DET
    PROCEDURE del_id_cda_req_det
    (
        id_cda_req_det_in IN cda_req_det.id_cda_req_det%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_cda_req_det(id_cda_req_det_in => id_cda_req_det_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_id_cda_req_det;

    -- Delete for unique value of CDARD_UK
    PROCEDURE del_cdard_uk
    (
        id_cda_req_in   IN cda_req_det.id_cda_req%TYPE,
        flg_status_in   IN cda_req_det.flg_status%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM cda_req_det
         WHERE id_cda_req = id_cda_req_in
           AND flg_status = flg_status_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cdard_uk;

    -- Delete for unique value of CDARD_UK
    PROCEDURE del_cdard_uk
    (
        id_cda_req_in   IN cda_req_det.id_cda_req%TYPE,
        flg_status_in   IN cda_req_det.flg_status%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cdard_uk(id_cda_req_in   => id_cda_req_in,
                     flg_status_in   => flg_status_in,
                     handle_error_in => handle_error_in,
                     rows_out        => rows_out);
    END del_cdard_uk;

    PROCEDURE del_cdard_cdar_fk
    (
        id_cda_req_in   IN cda_req_det.id_cda_req%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM cda_req_det
         WHERE id_cda_req = del_cdard_cdar_fk.id_cda_req_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cdard_cdar_fk;

    PROCEDURE del_cdard_cdar_fk
    (
        id_cda_req_in   IN cda_req_det.id_cda_req%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cdard_cdar_fk(id_cda_req_in => id_cda_req_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_cdard_cdar_fk;

    PROCEDURE del_cdard_rep_fk
    (
        id_report_in    IN cda_req_det.id_report%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM cda_req_det
         WHERE id_report = del_cdard_rep_fk.id_report_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cdard_rep_fk;

    PROCEDURE del_cdard_rep_fk
    (
        id_report_in    IN cda_req_det.id_report%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cdard_rep_fk(id_report_in => id_report_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_cdard_rep_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM CDA_REQ_DET';
        ELSE
            RETURN 'DELETE FROM CDA_REQ_DET WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CDA_REQ_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CDA_REQ_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(cda_req_det_inout IN OUT cda_req_det%ROWTYPE) IS
    BEGIN
        cda_req_det_inout.id_cda_req_det     := NULL;
        cda_req_det_inout.id_cda_req         := NULL;
        cda_req_det_inout.flg_status         := NULL;
        cda_req_det_inout.id_report          := NULL;
        cda_req_det_inout.qrda_type          := NULL;
        cda_req_det_inout.dt_status_start    := current_timestamp;
        cda_req_det_inout.dt_status_end      := NULL;
        cda_req_det_inout.create_user        := NULL;
        cda_req_det_inout.create_time        := NULL;
        cda_req_det_inout.create_institution := NULL;
        cda_req_det_inout.update_user        := NULL;
        cda_req_det_inout.update_time        := NULL;
        cda_req_det_inout.update_institution := NULL;
    END initrec;

    FUNCTION initrec RETURN cda_req_det%ROWTYPE IS
        l_cda_req_det cda_req_det%ROWTYPE;
    BEGIN
        l_cda_req_det.dt_status_start := current_timestamp;
        RETURN l_cda_req_det;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN cda_req_det_tc IS
        data cda_req_det_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM cda_req_det
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN cda_req_det_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data cda_req_det_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_cda_req_det;
/
