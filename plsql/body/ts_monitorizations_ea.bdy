/*-- Last Change Revision: $Rev: 2028262 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:44 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_monitorizations_ea
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Setembro 8, 2011 9:56:39
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_monitorization_vs_in      IN monitorizations_ea.id_monitorization_vs%TYPE,
        id_monitorization_in         IN monitorizations_ea.id_monitorization%TYPE DEFAULT NULL,
        id_monitorization_vs_plan_in IN monitorizations_ea.id_monitorization_vs_plan%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorizations_ea.id_vital_sign%TYPE DEFAULT NULL,
        flg_status_in                IN monitorizations_ea.flg_status%TYPE DEFAULT NULL,
        flg_status_det_in            IN monitorizations_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_status_plan_in           IN monitorizations_ea.flg_status_plan%TYPE DEFAULT NULL,
        flg_time_in                  IN monitorizations_ea.flg_time%TYPE DEFAULT NULL,
        dt_monitorization_in         IN monitorizations_ea.dt_monitorization%TYPE DEFAULT NULL,
        dt_plan_in                   IN monitorizations_ea.dt_plan%TYPE DEFAULT NULL,
        interval_in                  IN monitorizations_ea.interval%TYPE DEFAULT NULL,
        id_episode_origin_in         IN monitorizations_ea.id_episode_origin%TYPE DEFAULT NULL,
        dt_begin_in                  IN monitorizations_ea.dt_begin%TYPE DEFAULT NULL,
        dt_end_in                    IN monitorizations_ea.dt_end%TYPE DEFAULT NULL,
        num_monit_in                 IN monitorizations_ea.num_monit%TYPE DEFAULT NULL,
        id_visit_in                  IN monitorizations_ea.id_visit%TYPE DEFAULT NULL,
        status_str_in                IN monitorizations_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in                IN monitorizations_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in               IN monitorizations_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in                IN monitorizations_ea.status_flg%TYPE DEFAULT NULL,
        flg_notes_in                 IN monitorizations_ea.flg_notes%TYPE DEFAULT NULL,
        id_episode_in                IN monitorizations_ea.id_episode%TYPE DEFAULT NULL,
        id_prev_episode_in           IN monitorizations_ea.id_prev_episode%TYPE DEFAULT NULL,
        id_patient_in                IN monitorizations_ea.id_patient%TYPE DEFAULT NULL,
        id_professional_in           IN monitorizations_ea.id_professional%TYPE DEFAULT NULL,
        dt_dg_last_update_in         IN monitorizations_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        create_user_in               IN monitorizations_ea.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorizations_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorizations_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorizations_ea.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorizations_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorizations_ea.update_institution%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorizations_ea.dt_order%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO monitorizations_ea
            (id_monitorization,
             id_monitorization_vs,
             id_monitorization_vs_plan,
             id_vital_sign,
             flg_status,
             flg_status_det,
             flg_status_plan,
             flg_time,
             dt_monitorization,
             dt_plan,
             INTERVAL,
             id_episode_origin,
             dt_begin,
             dt_end,
             num_monit,
             id_visit,
             status_str,
             status_msg,
             status_icon,
             status_flg,
             flg_notes,
             id_episode,
             id_prev_episode,
             id_patient,
             id_professional,
             dt_dg_last_update,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             dt_order)
        VALUES
            (id_monitorization_in,
             id_monitorization_vs_in,
             id_monitorization_vs_plan_in,
             id_vital_sign_in,
             flg_status_in,
             flg_status_det_in,
             flg_status_plan_in,
             flg_time_in,
             dt_monitorization_in,
             dt_plan_in,
             interval_in,
             id_episode_origin_in,
             dt_begin_in,
             dt_end_in,
             num_monit_in,
             id_visit_in,
             status_str_in,
             status_msg_in,
             status_icon_in,
             status_flg_in,
             flg_notes_in,
             id_episode_in,
             id_prev_episode_in,
             id_patient_in,
             id_professional_in,
             dt_dg_last_update_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             dt_order_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MONITORIZATIONS_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    IF l_name = 'MEA_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'MEA_EPIS_ORIGIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'MEA_EPIS_PREV_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PREV_EPISODE',
                                                        value_in           => id_prev_episode_in);
                    END IF;
                    IF l_name = 'MEA_MONT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MONITORIZATION',
                                                        value_in           => id_monitorization_in);
                    END IF;
                    IF l_name = 'MEA_MVS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MONITORIZATION_VS',
                                                        value_in           => id_monitorization_vs_in);
                    END IF;
                    IF l_name = 'MEA_MVSP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MONITORIZATION_VS_PLAN',
                                                        value_in           => id_monitorization_vs_plan_in);
                    END IF;
                    IF l_name = 'MEA_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'MEA_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'MEA_VIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    IF l_name = 'MEA_VS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VITAL_SIGN',
                                                        value_in           => id_vital_sign_in);
                    END IF;
                    IF l_name = 'TMP$$_MEA_VIS_FK0'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_monitorization_vs_in      IN monitorizations_ea.id_monitorization_vs%TYPE,
        id_monitorization_in         IN monitorizations_ea.id_monitorization%TYPE DEFAULT NULL,
        id_monitorization_vs_plan_in IN monitorizations_ea.id_monitorization_vs_plan%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorizations_ea.id_vital_sign%TYPE DEFAULT NULL,
        flg_status_in                IN monitorizations_ea.flg_status%TYPE DEFAULT NULL,
        flg_status_det_in            IN monitorizations_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_status_plan_in           IN monitorizations_ea.flg_status_plan%TYPE DEFAULT NULL,
        flg_time_in                  IN monitorizations_ea.flg_time%TYPE DEFAULT NULL,
        dt_monitorization_in         IN monitorizations_ea.dt_monitorization%TYPE DEFAULT NULL,
        dt_plan_in                   IN monitorizations_ea.dt_plan%TYPE DEFAULT NULL,
        interval_in                  IN monitorizations_ea.interval%TYPE DEFAULT NULL,
        id_episode_origin_in         IN monitorizations_ea.id_episode_origin%TYPE DEFAULT NULL,
        dt_begin_in                  IN monitorizations_ea.dt_begin%TYPE DEFAULT NULL,
        dt_end_in                    IN monitorizations_ea.dt_end%TYPE DEFAULT NULL,
        num_monit_in                 IN monitorizations_ea.num_monit%TYPE DEFAULT NULL,
        id_visit_in                  IN monitorizations_ea.id_visit%TYPE DEFAULT NULL,
        status_str_in                IN monitorizations_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in                IN monitorizations_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in               IN monitorizations_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in                IN monitorizations_ea.status_flg%TYPE DEFAULT NULL,
        flg_notes_in                 IN monitorizations_ea.flg_notes%TYPE DEFAULT NULL,
        id_episode_in                IN monitorizations_ea.id_episode%TYPE DEFAULT NULL,
        id_prev_episode_in           IN monitorizations_ea.id_prev_episode%TYPE DEFAULT NULL,
        id_patient_in                IN monitorizations_ea.id_patient%TYPE DEFAULT NULL,
        id_professional_in           IN monitorizations_ea.id_professional%TYPE DEFAULT NULL,
        dt_dg_last_update_in         IN monitorizations_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        create_user_in               IN monitorizations_ea.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorizations_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorizations_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorizations_ea.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorizations_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorizations_ea.update_institution%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorizations_ea.dt_order%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_monitorization_vs_in      => id_monitorization_vs_in,
            id_monitorization_in         => id_monitorization_in,
            id_monitorization_vs_plan_in => id_monitorization_vs_plan_in,
            id_vital_sign_in             => id_vital_sign_in,
            flg_status_in                => flg_status_in,
            flg_status_det_in            => flg_status_det_in,
            flg_status_plan_in           => flg_status_plan_in,
            flg_time_in                  => flg_time_in,
            dt_monitorization_in         => dt_monitorization_in,
            dt_plan_in                   => dt_plan_in,
            interval_in                  => interval_in,
            id_episode_origin_in         => id_episode_origin_in,
            dt_begin_in                  => dt_begin_in,
            dt_end_in                    => dt_end_in,
            num_monit_in                 => num_monit_in,
            id_visit_in                  => id_visit_in,
            status_str_in                => status_str_in,
            status_msg_in                => status_msg_in,
            status_icon_in               => status_icon_in,
            status_flg_in                => status_flg_in,
            flg_notes_in                 => flg_notes_in,
            id_episode_in                => id_episode_in,
            id_prev_episode_in           => id_prev_episode_in,
            id_patient_in                => id_patient_in,
            id_professional_in           => id_professional_in,
            dt_dg_last_update_in         => dt_dg_last_update_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            dt_order_in                  => dt_order_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN monitorizations_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec monitorizations_ea%ROWTYPE := rec_in;
    BEGIN
        ins(id_monitorization_vs_in      => l_rec.id_monitorization_vs,
            id_monitorization_in         => l_rec.id_monitorization,
            id_monitorization_vs_plan_in => l_rec.id_monitorization_vs_plan,
            id_vital_sign_in             => l_rec.id_vital_sign,
            flg_status_in                => l_rec.flg_status,
            flg_status_det_in            => l_rec.flg_status_det,
            flg_status_plan_in           => l_rec.flg_status_plan,
            flg_time_in                  => l_rec.flg_time,
            dt_monitorization_in         => l_rec.dt_monitorization,
            dt_plan_in                   => l_rec.dt_plan,
            interval_in                  => l_rec.interval,
            id_episode_origin_in         => l_rec.id_episode_origin,
            dt_begin_in                  => l_rec.dt_begin,
            dt_end_in                    => l_rec.dt_end,
            num_monit_in                 => l_rec.num_monit,
            id_visit_in                  => l_rec.id_visit,
            status_str_in                => l_rec.status_str,
            status_msg_in                => l_rec.status_msg,
            status_icon_in               => l_rec.status_icon,
            status_flg_in                => l_rec.status_flg,
            flg_notes_in                 => l_rec.flg_notes,
            id_episode_in                => l_rec.id_episode,
            id_prev_episode_in           => l_rec.id_prev_episode,
            id_patient_in                => l_rec.id_patient,
            id_professional_in           => l_rec.id_professional,
            dt_dg_last_update_in         => l_rec.dt_dg_last_update,
            create_user_in               => l_rec.create_user,
            create_time_in               => l_rec.create_time,
            create_institution_in        => l_rec.create_institution,
            update_user_in               => l_rec.update_user,
            update_time_in               => l_rec.update_time,
            update_institution_in        => l_rec.update_institution,
            dt_order_in                  => l_rec.dt_order,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN monitorizations_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN monitorizations_ea_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO monitorizations_ea
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MONITORIZATION _' || indx,
                                                        value_in           => rows_in(indx).id_monitorization,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MONITORIZATION_VS _' || indx,
                                                        value_in           => rows_in(indx).id_monitorization_vs,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MONITORIZATION_VS_PLAN _' || indx,
                                                        value_in           => rows_in(indx).id_monitorization_vs_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VITAL_SIGN _' || indx,
                                                        value_in           => rows_in(indx).id_vital_sign,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS_DET _' || indx,
                                                        value_in           => rows_in(indx).flg_status_det,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS_PLAN _' || indx,
                                                        value_in           => rows_in(indx).flg_status_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TIME _' || indx,
                                                        value_in           => rows_in(indx).flg_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_MONITORIZATION _' || indx,
                                                        value_in           => rows_in(indx).dt_monitorization,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PLAN _' || indx,
                                                        value_in           => rows_in(indx).dt_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'INTERVAL _' || indx,
                                                        value_in           => rows_in(indx).interval,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN _' || indx,
                                                        value_in           => rows_in(indx).id_episode_origin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BEGIN _' || indx,
                                                        value_in           => rows_in(indx).dt_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_END _' || indx,
                                                        value_in           => rows_in(indx).dt_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_MONIT _' || indx,
                                                        value_in           => rows_in(indx).num_monit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VISIT _' || indx,
                                                        value_in           => rows_in(indx).id_visit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_STR _' || indx,
                                                        value_in           => rows_in(indx).status_str,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_MSG _' || indx,
                                                        value_in           => rows_in(indx).status_msg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_ICON _' || indx,
                                                        value_in           => rows_in(indx).status_icon,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_FLG _' || indx,
                                                        value_in           => rows_in(indx).status_flg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_NOTES _' || indx,
                                                        value_in           => rows_in(indx).flg_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PREV_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_prev_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_DG_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).dt_dg_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ORDER _' || indx,
                                                        value_in           => rows_in(indx).dt_order,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'MONITORIZATIONS_EA',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN monitorizations_ea_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_monitorization_vs_in       IN monitorizations_ea.id_monitorization_vs%TYPE,
        id_monitorization_in          IN monitorizations_ea.id_monitorization%TYPE DEFAULT NULL,
        id_monitorization_nin         IN BOOLEAN := TRUE,
        id_monitorization_vs_plan_in  IN monitorizations_ea.id_monitorization_vs_plan%TYPE DEFAULT NULL,
        id_monitorization_vs_plan_nin IN BOOLEAN := TRUE,
        id_vital_sign_in              IN monitorizations_ea.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_nin             IN BOOLEAN := TRUE,
        flg_status_in                 IN monitorizations_ea.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        flg_status_det_in             IN monitorizations_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_status_det_nin            IN BOOLEAN := TRUE,
        flg_status_plan_in            IN monitorizations_ea.flg_status_plan%TYPE DEFAULT NULL,
        flg_status_plan_nin           IN BOOLEAN := TRUE,
        flg_time_in                   IN monitorizations_ea.flg_time%TYPE DEFAULT NULL,
        flg_time_nin                  IN BOOLEAN := TRUE,
        dt_monitorization_in          IN monitorizations_ea.dt_monitorization%TYPE DEFAULT NULL,
        dt_monitorization_nin         IN BOOLEAN := TRUE,
        dt_plan_in                    IN monitorizations_ea.dt_plan%TYPE DEFAULT NULL,
        dt_plan_nin                   IN BOOLEAN := TRUE,
        interval_in                   IN monitorizations_ea.interval%TYPE DEFAULT NULL,
        interval_nin                  IN BOOLEAN := TRUE,
        id_episode_origin_in          IN monitorizations_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin         IN BOOLEAN := TRUE,
        dt_begin_in                   IN monitorizations_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin                  IN BOOLEAN := TRUE,
        dt_end_in                     IN monitorizations_ea.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                    IN BOOLEAN := TRUE,
        num_monit_in                  IN monitorizations_ea.num_monit%TYPE DEFAULT NULL,
        num_monit_nin                 IN BOOLEAN := TRUE,
        id_visit_in                   IN monitorizations_ea.id_visit%TYPE DEFAULT NULL,
        id_visit_nin                  IN BOOLEAN := TRUE,
        status_str_in                 IN monitorizations_ea.status_str%TYPE DEFAULT NULL,
        status_str_nin                IN BOOLEAN := TRUE,
        status_msg_in                 IN monitorizations_ea.status_msg%TYPE DEFAULT NULL,
        status_msg_nin                IN BOOLEAN := TRUE,
        status_icon_in                IN monitorizations_ea.status_icon%TYPE DEFAULT NULL,
        status_icon_nin               IN BOOLEAN := TRUE,
        status_flg_in                 IN monitorizations_ea.status_flg%TYPE DEFAULT NULL,
        status_flg_nin                IN BOOLEAN := TRUE,
        flg_notes_in                  IN monitorizations_ea.flg_notes%TYPE DEFAULT NULL,
        flg_notes_nin                 IN BOOLEAN := TRUE,
        id_episode_in                 IN monitorizations_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        id_prev_episode_in            IN monitorizations_ea.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin           IN BOOLEAN := TRUE,
        id_patient_in                 IN monitorizations_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        id_professional_in            IN monitorizations_ea.id_professional%TYPE DEFAULT NULL,
        id_professional_nin           IN BOOLEAN := TRUE,
        dt_dg_last_update_in          IN monitorizations_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin         IN BOOLEAN := TRUE,
        create_user_in                IN monitorizations_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN monitorizations_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN monitorizations_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN monitorizations_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN monitorizations_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN monitorizations_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        dt_order_in                   IN monitorizations_ea.dt_order%TYPE DEFAULT NULL,
        dt_order_nin                  IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
        l_rows_out                    table_varchar;
        l_id_monitorization_n         NUMBER(1);
        l_id_monitorization_vs_plan_n NUMBER(1);
        l_id_vital_sign_n             NUMBER(1);
        l_flg_status_n                NUMBER(1);
        l_flg_status_det_n            NUMBER(1);
        l_flg_status_plan_n           NUMBER(1);
        l_flg_time_n                  NUMBER(1);
        l_dt_monitorization_n         NUMBER(1);
        l_dt_plan_n                   NUMBER(1);
        l_interval_n                  NUMBER(1);
        l_id_episode_origin_n         NUMBER(1);
        l_dt_begin_n                  NUMBER(1);
        l_dt_end_n                    NUMBER(1);
        l_num_monit_n                 NUMBER(1);
        l_id_visit_n                  NUMBER(1);
        l_status_str_n                NUMBER(1);
        l_status_msg_n                NUMBER(1);
        l_status_icon_n               NUMBER(1);
        l_status_flg_n                NUMBER(1);
        l_flg_notes_n                 NUMBER(1);
        l_id_episode_n                NUMBER(1);
        l_id_prev_episode_n           NUMBER(1);
        l_id_patient_n                NUMBER(1);
        l_id_professional_n           NUMBER(1);
        l_dt_dg_last_update_n         NUMBER(1);
        l_create_user_n               NUMBER(1);
        l_create_time_n               NUMBER(1);
        l_create_institution_n        NUMBER(1);
        l_update_user_n               NUMBER(1);
        l_update_time_n               NUMBER(1);
        l_update_institution_n        NUMBER(1);
        l_dt_order_n                  NUMBER(1);
    BEGIN
    
        l_id_monitorization_n         := sys.diutil.bool_to_int(id_monitorization_nin);
        l_id_monitorization_vs_plan_n := sys.diutil.bool_to_int(id_monitorization_vs_plan_nin);
        l_id_vital_sign_n             := sys.diutil.bool_to_int(id_vital_sign_nin);
        l_flg_status_n                := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_status_det_n            := sys.diutil.bool_to_int(flg_status_det_nin);
        l_flg_status_plan_n           := sys.diutil.bool_to_int(flg_status_plan_nin);
        l_flg_time_n                  := sys.diutil.bool_to_int(flg_time_nin);
        l_dt_monitorization_n         := sys.diutil.bool_to_int(dt_monitorization_nin);
        l_dt_plan_n                   := sys.diutil.bool_to_int(dt_plan_nin);
        l_interval_n                  := sys.diutil.bool_to_int(interval_nin);
        l_id_episode_origin_n         := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_dt_begin_n                  := sys.diutil.bool_to_int(dt_begin_nin);
        l_dt_end_n                    := sys.diutil.bool_to_int(dt_end_nin);
        l_num_monit_n                 := sys.diutil.bool_to_int(num_monit_nin);
        l_id_visit_n                  := sys.diutil.bool_to_int(id_visit_nin);
        l_status_str_n                := sys.diutil.bool_to_int(status_str_nin);
        l_status_msg_n                := sys.diutil.bool_to_int(status_msg_nin);
        l_status_icon_n               := sys.diutil.bool_to_int(status_icon_nin);
        l_status_flg_n                := sys.diutil.bool_to_int(status_flg_nin);
        l_flg_notes_n                 := sys.diutil.bool_to_int(flg_notes_nin);
        l_id_episode_n                := sys.diutil.bool_to_int(id_episode_nin);
        l_id_prev_episode_n           := sys.diutil.bool_to_int(id_prev_episode_nin);
        l_id_patient_n                := sys.diutil.bool_to_int(id_patient_nin);
        l_id_professional_n           := sys.diutil.bool_to_int(id_professional_nin);
        l_dt_dg_last_update_n         := sys.diutil.bool_to_int(dt_dg_last_update_nin);
        l_create_user_n               := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n               := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n        := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n               := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n               := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n        := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_order_n                  := sys.diutil.bool_to_int(dt_order_nin);
    
        UPDATE monitorizations_ea
           SET id_monitorization         = decode(l_id_monitorization_n,
                                                  0,
                                                  id_monitorization_in,
                                                  nvl(id_monitorization_in, id_monitorization)),
               id_monitorization_vs_plan = decode(l_id_monitorization_vs_plan_n,
                                                  0,
                                                  id_monitorization_vs_plan_in,
                                                  nvl(id_monitorization_vs_plan_in, id_monitorization_vs_plan)),
               id_vital_sign             = decode(l_id_vital_sign_n,
                                                  0,
                                                  id_vital_sign_in,
                                                  nvl(id_vital_sign_in, id_vital_sign)),
               flg_status                = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               flg_status_det            = decode(l_flg_status_det_n,
                                                  0,
                                                  flg_status_det_in,
                                                  nvl(flg_status_det_in, flg_status_det)),
               flg_status_plan           = decode(l_flg_status_plan_n,
                                                  0,
                                                  flg_status_plan_in,
                                                  nvl(flg_status_plan_in, flg_status_plan)),
               flg_time                  = decode(l_flg_time_n, 0, flg_time_in, nvl(flg_time_in, flg_time)),
               dt_monitorization         = decode(l_dt_monitorization_n,
                                                  0,
                                                  dt_monitorization_in,
                                                  nvl(dt_monitorization_in, dt_monitorization)),
               dt_plan                   = decode(l_dt_plan_n, 0, dt_plan_in, nvl(dt_plan_in, dt_plan)),
               INTERVAL                  = decode(l_interval_n, 0, interval_in, nvl(interval_in, INTERVAL)),
               id_episode_origin         = decode(l_id_episode_origin_n,
                                                  0,
                                                  id_episode_origin_in,
                                                  nvl(id_episode_origin_in, id_episode_origin)),
               dt_begin                  = decode(l_dt_begin_n, 0, dt_begin_in, nvl(dt_begin_in, dt_begin)),
               dt_end                    = decode(l_dt_end_n, 0, dt_end_in, nvl(dt_end_in, dt_end)),
               num_monit                 = decode(l_num_monit_n, 0, num_monit_in, nvl(num_monit_in, num_monit)),
               id_visit                  = decode(l_id_visit_n, 0, id_visit_in, nvl(id_visit_in, id_visit)),
               status_str                = decode(l_status_str_n, 0, status_str_in, nvl(status_str_in, status_str)),
               status_msg                = decode(l_status_msg_n, 0, status_msg_in, nvl(status_msg_in, status_msg)),
               status_icon               = decode(l_status_icon_n, 0, status_icon_in, nvl(status_icon_in, status_icon)),
               status_flg                = decode(l_status_flg_n, 0, status_flg_in, nvl(status_flg_in, status_flg)),
               flg_notes                 = decode(l_flg_notes_n, 0, flg_notes_in, nvl(flg_notes_in, flg_notes)),
               id_episode                = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_prev_episode           = decode(l_id_prev_episode_n,
                                                  0,
                                                  id_prev_episode_in,
                                                  nvl(id_prev_episode_in, id_prev_episode)),
               id_patient                = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_professional           = decode(l_id_professional_n,
                                                  0,
                                                  id_professional_in,
                                                  nvl(id_professional_in, id_professional)),
               dt_dg_last_update         = nvl(dt_dg_last_update_in, current_timestamp),
               create_user               = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time               = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution        = decode(l_create_institution_n,
                                                  0,
                                                  create_institution_in,
                                                  nvl(create_institution_in, create_institution)),
               update_user               = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time               = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution        = decode(l_update_institution_n,
                                                  0,
                                                  update_institution_in,
                                                  nvl(update_institution_in, update_institution)),
               dt_order                  = decode(l_dt_order_n, 0, dt_order_in, nvl(dt_order_in, dt_order))
         WHERE id_monitorization_vs = id_monitorization_vs_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MONITORIZATIONS_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    IF l_name = 'MEA_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'MEA_EPIS_ORIGIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'MEA_EPIS_PREV_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PREV_EPISODE',
                                                        value_in           => id_prev_episode_in);
                    END IF;
                    IF l_name = 'MEA_MONT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MONITORIZATION',
                                                        value_in           => id_monitorization_in);
                    END IF;
                    IF l_name = 'MEA_MVS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MONITORIZATION_VS',
                                                        value_in           => id_monitorization_vs_in);
                    END IF;
                    IF l_name = 'MEA_MVSP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MONITORIZATION_VS_PLAN',
                                                        value_in           => id_monitorization_vs_plan_in);
                    END IF;
                    IF l_name = 'MEA_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'MEA_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'MEA_VIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    IF l_name = 'MEA_VS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VITAL_SIGN',
                                                        value_in           => id_vital_sign_in);
                    END IF;
                    IF l_name = 'TMP$$_MEA_VIS_FK0'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_monitorization_vs_in       IN monitorizations_ea.id_monitorization_vs%TYPE,
        id_monitorization_in          IN monitorizations_ea.id_monitorization%TYPE DEFAULT NULL,
        id_monitorization_nin         IN BOOLEAN := TRUE,
        id_monitorization_vs_plan_in  IN monitorizations_ea.id_monitorization_vs_plan%TYPE DEFAULT NULL,
        id_monitorization_vs_plan_nin IN BOOLEAN := TRUE,
        id_vital_sign_in              IN monitorizations_ea.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_nin             IN BOOLEAN := TRUE,
        flg_status_in                 IN monitorizations_ea.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        flg_status_det_in             IN monitorizations_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_status_det_nin            IN BOOLEAN := TRUE,
        flg_status_plan_in            IN monitorizations_ea.flg_status_plan%TYPE DEFAULT NULL,
        flg_status_plan_nin           IN BOOLEAN := TRUE,
        flg_time_in                   IN monitorizations_ea.flg_time%TYPE DEFAULT NULL,
        flg_time_nin                  IN BOOLEAN := TRUE,
        dt_monitorization_in          IN monitorizations_ea.dt_monitorization%TYPE DEFAULT NULL,
        dt_monitorization_nin         IN BOOLEAN := TRUE,
        dt_plan_in                    IN monitorizations_ea.dt_plan%TYPE DEFAULT NULL,
        dt_plan_nin                   IN BOOLEAN := TRUE,
        interval_in                   IN monitorizations_ea.interval%TYPE DEFAULT NULL,
        interval_nin                  IN BOOLEAN := TRUE,
        id_episode_origin_in          IN monitorizations_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin         IN BOOLEAN := TRUE,
        dt_begin_in                   IN monitorizations_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin                  IN BOOLEAN := TRUE,
        dt_end_in                     IN monitorizations_ea.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                    IN BOOLEAN := TRUE,
        num_monit_in                  IN monitorizations_ea.num_monit%TYPE DEFAULT NULL,
        num_monit_nin                 IN BOOLEAN := TRUE,
        id_visit_in                   IN monitorizations_ea.id_visit%TYPE DEFAULT NULL,
        id_visit_nin                  IN BOOLEAN := TRUE,
        status_str_in                 IN monitorizations_ea.status_str%TYPE DEFAULT NULL,
        status_str_nin                IN BOOLEAN := TRUE,
        status_msg_in                 IN monitorizations_ea.status_msg%TYPE DEFAULT NULL,
        status_msg_nin                IN BOOLEAN := TRUE,
        status_icon_in                IN monitorizations_ea.status_icon%TYPE DEFAULT NULL,
        status_icon_nin               IN BOOLEAN := TRUE,
        status_flg_in                 IN monitorizations_ea.status_flg%TYPE DEFAULT NULL,
        status_flg_nin                IN BOOLEAN := TRUE,
        flg_notes_in                  IN monitorizations_ea.flg_notes%TYPE DEFAULT NULL,
        flg_notes_nin                 IN BOOLEAN := TRUE,
        id_episode_in                 IN monitorizations_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        id_prev_episode_in            IN monitorizations_ea.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin           IN BOOLEAN := TRUE,
        id_patient_in                 IN monitorizations_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        id_professional_in            IN monitorizations_ea.id_professional%TYPE DEFAULT NULL,
        id_professional_nin           IN BOOLEAN := TRUE,
        dt_dg_last_update_in          IN monitorizations_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin         IN BOOLEAN := TRUE,
        create_user_in                IN monitorizations_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN monitorizations_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN monitorizations_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN monitorizations_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN monitorizations_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN monitorizations_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        dt_order_in                   IN monitorizations_ea.dt_order%TYPE DEFAULT NULL,
        dt_order_nin                  IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_monitorization_vs_in       => id_monitorization_vs_in,
            id_monitorization_in          => id_monitorization_in,
            id_monitorization_nin         => id_monitorization_nin,
            id_monitorization_vs_plan_in  => id_monitorization_vs_plan_in,
            id_monitorization_vs_plan_nin => id_monitorization_vs_plan_nin,
            id_vital_sign_in              => id_vital_sign_in,
            id_vital_sign_nin             => id_vital_sign_nin,
            flg_status_in                 => flg_status_in,
            flg_status_nin                => flg_status_nin,
            flg_status_det_in             => flg_status_det_in,
            flg_status_det_nin            => flg_status_det_nin,
            flg_status_plan_in            => flg_status_plan_in,
            flg_status_plan_nin           => flg_status_plan_nin,
            flg_time_in                   => flg_time_in,
            flg_time_nin                  => flg_time_nin,
            dt_monitorization_in          => dt_monitorization_in,
            dt_monitorization_nin         => dt_monitorization_nin,
            dt_plan_in                    => dt_plan_in,
            dt_plan_nin                   => dt_plan_nin,
            interval_in                   => interval_in,
            interval_nin                  => interval_nin,
            id_episode_origin_in          => id_episode_origin_in,
            id_episode_origin_nin         => id_episode_origin_nin,
            dt_begin_in                   => dt_begin_in,
            dt_begin_nin                  => dt_begin_nin,
            dt_end_in                     => dt_end_in,
            dt_end_nin                    => dt_end_nin,
            num_monit_in                  => num_monit_in,
            num_monit_nin                 => num_monit_nin,
            id_visit_in                   => id_visit_in,
            id_visit_nin                  => id_visit_nin,
            status_str_in                 => status_str_in,
            status_str_nin                => status_str_nin,
            status_msg_in                 => status_msg_in,
            status_msg_nin                => status_msg_nin,
            status_icon_in                => status_icon_in,
            status_icon_nin               => status_icon_nin,
            status_flg_in                 => status_flg_in,
            status_flg_nin                => status_flg_nin,
            flg_notes_in                  => flg_notes_in,
            flg_notes_nin                 => flg_notes_nin,
            id_episode_in                 => id_episode_in,
            id_episode_nin                => id_episode_nin,
            id_prev_episode_in            => id_prev_episode_in,
            id_prev_episode_nin           => id_prev_episode_nin,
            id_patient_in                 => id_patient_in,
            id_patient_nin                => id_patient_nin,
            id_professional_in            => id_professional_in,
            id_professional_nin           => id_professional_nin,
            dt_dg_last_update_in          => dt_dg_last_update_in,
            dt_dg_last_update_nin         => dt_dg_last_update_nin,
            create_user_in                => create_user_in,
            create_user_nin               => create_user_nin,
            create_time_in                => create_time_in,
            create_time_nin               => create_time_nin,
            create_institution_in         => create_institution_in,
            create_institution_nin        => create_institution_nin,
            update_user_in                => update_user_in,
            update_user_nin               => update_user_nin,
            update_time_in                => update_time_in,
            update_time_nin               => update_time_nin,
            update_institution_in         => update_institution_in,
            update_institution_nin        => update_institution_nin,
            dt_order_in                   => dt_order_in,
            dt_order_nin                  => dt_order_nin,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_monitorization_in          IN monitorizations_ea.id_monitorization%TYPE DEFAULT NULL,
        id_monitorization_nin         IN BOOLEAN := TRUE,
        id_monitorization_vs_plan_in  IN monitorizations_ea.id_monitorization_vs_plan%TYPE DEFAULT NULL,
        id_monitorization_vs_plan_nin IN BOOLEAN := TRUE,
        id_vital_sign_in              IN monitorizations_ea.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_nin             IN BOOLEAN := TRUE,
        flg_status_in                 IN monitorizations_ea.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        flg_status_det_in             IN monitorizations_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_status_det_nin            IN BOOLEAN := TRUE,
        flg_status_plan_in            IN monitorizations_ea.flg_status_plan%TYPE DEFAULT NULL,
        flg_status_plan_nin           IN BOOLEAN := TRUE,
        flg_time_in                   IN monitorizations_ea.flg_time%TYPE DEFAULT NULL,
        flg_time_nin                  IN BOOLEAN := TRUE,
        dt_monitorization_in          IN monitorizations_ea.dt_monitorization%TYPE DEFAULT NULL,
        dt_monitorization_nin         IN BOOLEAN := TRUE,
        dt_plan_in                    IN monitorizations_ea.dt_plan%TYPE DEFAULT NULL,
        dt_plan_nin                   IN BOOLEAN := TRUE,
        interval_in                   IN monitorizations_ea.interval%TYPE DEFAULT NULL,
        interval_nin                  IN BOOLEAN := TRUE,
        id_episode_origin_in          IN monitorizations_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin         IN BOOLEAN := TRUE,
        dt_begin_in                   IN monitorizations_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin                  IN BOOLEAN := TRUE,
        dt_end_in                     IN monitorizations_ea.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                    IN BOOLEAN := TRUE,
        num_monit_in                  IN monitorizations_ea.num_monit%TYPE DEFAULT NULL,
        num_monit_nin                 IN BOOLEAN := TRUE,
        id_visit_in                   IN monitorizations_ea.id_visit%TYPE DEFAULT NULL,
        id_visit_nin                  IN BOOLEAN := TRUE,
        status_str_in                 IN monitorizations_ea.status_str%TYPE DEFAULT NULL,
        status_str_nin                IN BOOLEAN := TRUE,
        status_msg_in                 IN monitorizations_ea.status_msg%TYPE DEFAULT NULL,
        status_msg_nin                IN BOOLEAN := TRUE,
        status_icon_in                IN monitorizations_ea.status_icon%TYPE DEFAULT NULL,
        status_icon_nin               IN BOOLEAN := TRUE,
        status_flg_in                 IN monitorizations_ea.status_flg%TYPE DEFAULT NULL,
        status_flg_nin                IN BOOLEAN := TRUE,
        flg_notes_in                  IN monitorizations_ea.flg_notes%TYPE DEFAULT NULL,
        flg_notes_nin                 IN BOOLEAN := TRUE,
        id_episode_in                 IN monitorizations_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        id_prev_episode_in            IN monitorizations_ea.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin           IN BOOLEAN := TRUE,
        id_patient_in                 IN monitorizations_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        id_professional_in            IN monitorizations_ea.id_professional%TYPE DEFAULT NULL,
        id_professional_nin           IN BOOLEAN := TRUE,
        dt_dg_last_update_in          IN monitorizations_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin         IN BOOLEAN := TRUE,
        create_user_in                IN monitorizations_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN monitorizations_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN monitorizations_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN monitorizations_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN monitorizations_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN monitorizations_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        dt_order_in                   IN monitorizations_ea.dt_order%TYPE DEFAULT NULL,
        dt_order_nin                  IN BOOLEAN := TRUE,
        where_in                      VARCHAR2 DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
        l_sql                         VARCHAR2(32767);
        l_rows_out                    table_varchar;
        l_id_monitorization_n         NUMBER(1);
        l_id_monitorization_vs_plan_n NUMBER(1);
        l_id_vital_sign_n             NUMBER(1);
        l_flg_status_n                NUMBER(1);
        l_flg_status_det_n            NUMBER(1);
        l_flg_status_plan_n           NUMBER(1);
        l_flg_time_n                  NUMBER(1);
        l_dt_monitorization_n         NUMBER(1);
        l_dt_plan_n                   NUMBER(1);
        l_interval_n                  NUMBER(1);
        l_id_episode_origin_n         NUMBER(1);
        l_dt_begin_n                  NUMBER(1);
        l_dt_end_n                    NUMBER(1);
        l_num_monit_n                 NUMBER(1);
        l_id_visit_n                  NUMBER(1);
        l_status_str_n                NUMBER(1);
        l_status_msg_n                NUMBER(1);
        l_status_icon_n               NUMBER(1);
        l_status_flg_n                NUMBER(1);
        l_flg_notes_n                 NUMBER(1);
        l_id_episode_n                NUMBER(1);
        l_id_prev_episode_n           NUMBER(1);
        l_id_patient_n                NUMBER(1);
        l_id_professional_n           NUMBER(1);
        l_dt_dg_last_update_n         NUMBER(1);
        l_create_user_n               NUMBER(1);
        l_create_time_n               NUMBER(1);
        l_create_institution_n        NUMBER(1);
        l_update_user_n               NUMBER(1);
        l_update_time_n               NUMBER(1);
        l_update_institution_n        NUMBER(1);
        l_dt_order_n                  NUMBER(1);
        id_monitorization_vs_in       monitorizations_ea.id_monitorization_vs%TYPE;
    BEGIN
    
        l_id_monitorization_n         := sys.diutil.bool_to_int(id_monitorization_nin);
        l_id_monitorization_vs_plan_n := sys.diutil.bool_to_int(id_monitorization_vs_plan_nin);
        l_id_vital_sign_n             := sys.diutil.bool_to_int(id_vital_sign_nin);
        l_flg_status_n                := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_status_det_n            := sys.diutil.bool_to_int(flg_status_det_nin);
        l_flg_status_plan_n           := sys.diutil.bool_to_int(flg_status_plan_nin);
        l_flg_time_n                  := sys.diutil.bool_to_int(flg_time_nin);
        l_dt_monitorization_n         := sys.diutil.bool_to_int(dt_monitorization_nin);
        l_dt_plan_n                   := sys.diutil.bool_to_int(dt_plan_nin);
        l_interval_n                  := sys.diutil.bool_to_int(interval_nin);
        l_id_episode_origin_n         := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_dt_begin_n                  := sys.diutil.bool_to_int(dt_begin_nin);
        l_dt_end_n                    := sys.diutil.bool_to_int(dt_end_nin);
        l_num_monit_n                 := sys.diutil.bool_to_int(num_monit_nin);
        l_id_visit_n                  := sys.diutil.bool_to_int(id_visit_nin);
        l_status_str_n                := sys.diutil.bool_to_int(status_str_nin);
        l_status_msg_n                := sys.diutil.bool_to_int(status_msg_nin);
        l_status_icon_n               := sys.diutil.bool_to_int(status_icon_nin);
        l_status_flg_n                := sys.diutil.bool_to_int(status_flg_nin);
        l_flg_notes_n                 := sys.diutil.bool_to_int(flg_notes_nin);
        l_id_episode_n                := sys.diutil.bool_to_int(id_episode_nin);
        l_id_prev_episode_n           := sys.diutil.bool_to_int(id_prev_episode_nin);
        l_id_patient_n                := sys.diutil.bool_to_int(id_patient_nin);
        l_id_professional_n           := sys.diutil.bool_to_int(id_professional_nin);
        l_dt_dg_last_update_n         := sys.diutil.bool_to_int(dt_dg_last_update_nin);
        l_create_user_n               := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n               := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n        := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n               := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n               := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n        := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_order_n                  := sys.diutil.bool_to_int(dt_order_nin);
    
        l_sql := 'UPDATE MONITORIZATIONS_EA SET ' || ' ID_MONITORIZATION = decode (' || l_id_monitorization_n ||
                 ',0,:id_monitorization_in, NVL (:id_monitorization_in, ID_MONITORIZATION)) ' || ',' ||
                 ' ID_MONITORIZATION_VS_PLAN = decode (' || l_id_monitorization_vs_plan_n ||
                 ',0,:id_monitorization_vs_plan_in, NVL (:id_monitorization_vs_plan_in, ID_MONITORIZATION_VS_PLAN)) ' || ',' ||
                 ' ID_VITAL_SIGN = decode (' || l_id_vital_sign_n ||
                 ',0,:id_vital_sign_in, NVL (:id_vital_sign_in, ID_VITAL_SIGN)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' FLG_STATUS_DET = decode (' || l_flg_status_det_n ||
                 ',0,:flg_status_det_in, NVL (:flg_status_det_in, FLG_STATUS_DET)) ' || ',' ||
                 ' FLG_STATUS_PLAN = decode (' || l_flg_status_plan_n ||
                 ',0,:flg_status_plan_in, NVL (:flg_status_plan_in, FLG_STATUS_PLAN)) ' || ',' ||
                 ' FLG_TIME = decode (' || l_flg_time_n || ',0,:flg_time_in, NVL (:flg_time_in, FLG_TIME)) ' || ',' ||
                 ' DT_MONITORIZATION = decode (' || l_dt_monitorization_n ||
                 ',0,:dt_monitorization_in, NVL (:dt_monitorization_in, DT_MONITORIZATION)) ' || ',' ||
                 ' DT_PLAN = decode (' || l_dt_plan_n || ',0,:dt_plan_in, NVL (:dt_plan_in, DT_PLAN)) ' || ',' ||
                 ' INTERVAL = decode (' || l_interval_n || ',0,:interval_in, NVL (:interval_in, INTERVAL)) ' || ',' ||
                 ' ID_EPISODE_ORIGIN = decode (' || l_id_episode_origin_n ||
                 ',0,:id_episode_origin_in, NVL (:id_episode_origin_in, ID_EPISODE_ORIGIN)) ' || ',' ||
                 ' DT_BEGIN = decode (' || l_dt_begin_n || ',0,:dt_begin_in, NVL (:dt_begin_in, DT_BEGIN)) ' || ',' ||
                 ' DT_END = decode (' || l_dt_end_n || ',0,:dt_end_in, NVL (:dt_end_in, DT_END)) ' || ',' ||
                 ' NUM_MONIT = decode (' || l_num_monit_n || ',0,:num_monit_in, NVL (:num_monit_in, NUM_MONIT)) ' || ',' ||
                 ' ID_VISIT = decode (' || l_id_visit_n || ',0,:id_visit_in, NVL (:id_visit_in, ID_VISIT)) ' || ',' ||
                 ' STATUS_STR = decode (' || l_status_str_n || ',0,:status_str_in, NVL (:status_str_in, STATUS_STR)) ' || ',' ||
                 ' STATUS_MSG = decode (' || l_status_msg_n || ',0,:status_msg_in, NVL (:status_msg_in, STATUS_MSG)) ' || ',' ||
                 ' STATUS_ICON = decode (' || l_status_icon_n ||
                 ',0,:status_icon_in, NVL (:status_icon_in, STATUS_ICON)) ' || ',' || ' STATUS_FLG = decode (' ||
                 l_status_flg_n || ',0,:status_flg_in, NVL (:status_flg_in, STATUS_FLG)) ' || ',' ||
                 ' FLG_NOTES = decode (' || l_flg_notes_n || ',0,:flg_notes_in, NVL (:flg_notes_in, FLG_NOTES)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_PREV_EPISODE = decode (' || l_id_prev_episode_n ||
                 ',0,:id_prev_episode_in, NVL (:id_prev_episode_in, ID_PREV_EPISODE)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' DT_DG_LAST_UPDATE = nvl(:dt_dg_last_update_in,current_timestamp) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' DT_ORDER = decode (' || l_dt_order_n || ',0,:dt_order_in, NVL (:dt_order_in, DT_ORDER)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_monitorization_in, id_monitorization_vs_plan_in, id_vital_sign_in, flg_status_in, flg_status_det_in, flg_status_plan_in, flg_time_in, dt_monitorization_in, dt_plan_in, interval_in, id_episode_origin_in, dt_begin_in, dt_end_in, num_monit_in, id_visit_in, status_str_in, status_msg_in, status_icon_in, status_flg_in, flg_notes_in, id_episode_in, id_prev_episode_in, id_patient_in, id_professional_in, dt_dg_last_update_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, dt_order_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MONITORIZATIONS_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    IF l_name = 'MEA_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'MEA_EPIS_ORIGIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'MEA_EPIS_PREV_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PREV_EPISODE',
                                                        value_in           => id_prev_episode_in);
                    END IF;
                    IF l_name = 'MEA_MONT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MONITORIZATION',
                                                        value_in           => id_monitorization_in);
                    END IF;
                    IF l_name = 'MEA_MVS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MONITORIZATION_VS',
                                                        value_in           => id_monitorization_vs_in);
                    END IF;
                    IF l_name = 'MEA_MVSP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MONITORIZATION_VS_PLAN',
                                                        value_in           => id_monitorization_vs_plan_in);
                    END IF;
                    IF l_name = 'MEA_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'MEA_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'MEA_VIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    IF l_name = 'MEA_VS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VITAL_SIGN',
                                                        value_in           => id_vital_sign_in);
                    END IF;
                    IF l_name = 'TMP$$_MEA_VIS_FK0'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_monitorization_in          IN monitorizations_ea.id_monitorization%TYPE DEFAULT NULL,
        id_monitorization_nin         IN BOOLEAN := TRUE,
        id_monitorization_vs_plan_in  IN monitorizations_ea.id_monitorization_vs_plan%TYPE DEFAULT NULL,
        id_monitorization_vs_plan_nin IN BOOLEAN := TRUE,
        id_vital_sign_in              IN monitorizations_ea.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_nin             IN BOOLEAN := TRUE,
        flg_status_in                 IN monitorizations_ea.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        flg_status_det_in             IN monitorizations_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_status_det_nin            IN BOOLEAN := TRUE,
        flg_status_plan_in            IN monitorizations_ea.flg_status_plan%TYPE DEFAULT NULL,
        flg_status_plan_nin           IN BOOLEAN := TRUE,
        flg_time_in                   IN monitorizations_ea.flg_time%TYPE DEFAULT NULL,
        flg_time_nin                  IN BOOLEAN := TRUE,
        dt_monitorization_in          IN monitorizations_ea.dt_monitorization%TYPE DEFAULT NULL,
        dt_monitorization_nin         IN BOOLEAN := TRUE,
        dt_plan_in                    IN monitorizations_ea.dt_plan%TYPE DEFAULT NULL,
        dt_plan_nin                   IN BOOLEAN := TRUE,
        interval_in                   IN monitorizations_ea.interval%TYPE DEFAULT NULL,
        interval_nin                  IN BOOLEAN := TRUE,
        id_episode_origin_in          IN monitorizations_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin         IN BOOLEAN := TRUE,
        dt_begin_in                   IN monitorizations_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin                  IN BOOLEAN := TRUE,
        dt_end_in                     IN monitorizations_ea.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                    IN BOOLEAN := TRUE,
        num_monit_in                  IN monitorizations_ea.num_monit%TYPE DEFAULT NULL,
        num_monit_nin                 IN BOOLEAN := TRUE,
        id_visit_in                   IN monitorizations_ea.id_visit%TYPE DEFAULT NULL,
        id_visit_nin                  IN BOOLEAN := TRUE,
        status_str_in                 IN monitorizations_ea.status_str%TYPE DEFAULT NULL,
        status_str_nin                IN BOOLEAN := TRUE,
        status_msg_in                 IN monitorizations_ea.status_msg%TYPE DEFAULT NULL,
        status_msg_nin                IN BOOLEAN := TRUE,
        status_icon_in                IN monitorizations_ea.status_icon%TYPE DEFAULT NULL,
        status_icon_nin               IN BOOLEAN := TRUE,
        status_flg_in                 IN monitorizations_ea.status_flg%TYPE DEFAULT NULL,
        status_flg_nin                IN BOOLEAN := TRUE,
        flg_notes_in                  IN monitorizations_ea.flg_notes%TYPE DEFAULT NULL,
        flg_notes_nin                 IN BOOLEAN := TRUE,
        id_episode_in                 IN monitorizations_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        id_prev_episode_in            IN monitorizations_ea.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin           IN BOOLEAN := TRUE,
        id_patient_in                 IN monitorizations_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        id_professional_in            IN monitorizations_ea.id_professional%TYPE DEFAULT NULL,
        id_professional_nin           IN BOOLEAN := TRUE,
        dt_dg_last_update_in          IN monitorizations_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin         IN BOOLEAN := TRUE,
        create_user_in                IN monitorizations_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN monitorizations_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN monitorizations_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN monitorizations_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN monitorizations_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN monitorizations_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        dt_order_in                   IN monitorizations_ea.dt_order%TYPE DEFAULT NULL,
        dt_order_nin                  IN BOOLEAN := TRUE,
        where_in                      VARCHAR2 DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_monitorization_in          => id_monitorization_in,
            id_monitorization_nin         => id_monitorization_nin,
            id_monitorization_vs_plan_in  => id_monitorization_vs_plan_in,
            id_monitorization_vs_plan_nin => id_monitorization_vs_plan_nin,
            id_vital_sign_in              => id_vital_sign_in,
            id_vital_sign_nin             => id_vital_sign_nin,
            flg_status_in                 => flg_status_in,
            flg_status_nin                => flg_status_nin,
            flg_status_det_in             => flg_status_det_in,
            flg_status_det_nin            => flg_status_det_nin,
            flg_status_plan_in            => flg_status_plan_in,
            flg_status_plan_nin           => flg_status_plan_nin,
            flg_time_in                   => flg_time_in,
            flg_time_nin                  => flg_time_nin,
            dt_monitorization_in          => dt_monitorization_in,
            dt_monitorization_nin         => dt_monitorization_nin,
            dt_plan_in                    => dt_plan_in,
            dt_plan_nin                   => dt_plan_nin,
            interval_in                   => interval_in,
            interval_nin                  => interval_nin,
            id_episode_origin_in          => id_episode_origin_in,
            id_episode_origin_nin         => id_episode_origin_nin,
            dt_begin_in                   => dt_begin_in,
            dt_begin_nin                  => dt_begin_nin,
            dt_end_in                     => dt_end_in,
            dt_end_nin                    => dt_end_nin,
            num_monit_in                  => num_monit_in,
            num_monit_nin                 => num_monit_nin,
            id_visit_in                   => id_visit_in,
            id_visit_nin                  => id_visit_nin,
            status_str_in                 => status_str_in,
            status_str_nin                => status_str_nin,
            status_msg_in                 => status_msg_in,
            status_msg_nin                => status_msg_nin,
            status_icon_in                => status_icon_in,
            status_icon_nin               => status_icon_nin,
            status_flg_in                 => status_flg_in,
            status_flg_nin                => status_flg_nin,
            flg_notes_in                  => flg_notes_in,
            flg_notes_nin                 => flg_notes_nin,
            id_episode_in                 => id_episode_in,
            id_episode_nin                => id_episode_nin,
            id_prev_episode_in            => id_prev_episode_in,
            id_prev_episode_nin           => id_prev_episode_nin,
            id_patient_in                 => id_patient_in,
            id_patient_nin                => id_patient_nin,
            id_professional_in            => id_professional_in,
            id_professional_nin           => id_professional_nin,
            dt_dg_last_update_in          => dt_dg_last_update_in,
            dt_dg_last_update_nin         => dt_dg_last_update_nin,
            create_user_in                => create_user_in,
            create_user_nin               => create_user_nin,
            create_time_in                => create_time_in,
            create_time_nin               => create_time_nin,
            create_institution_in         => create_institution_in,
            create_institution_nin        => create_institution_nin,
            update_user_in                => update_user_in,
            update_user_nin               => update_user_nin,
            update_time_in                => update_time_in,
            update_time_nin               => update_time_nin,
            update_institution_in         => update_institution_in,
            update_institution_nin        => update_institution_nin,
            dt_order_in                   => dt_order_in,
            dt_order_nin                  => dt_order_nin,
            where_in                      => where_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN monitorizations_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_monitorization_in         => rec_in.id_monitorization,
            id_monitorization_vs_in      => rec_in.id_monitorization_vs,
            id_monitorization_vs_plan_in => rec_in.id_monitorization_vs_plan,
            id_vital_sign_in             => rec_in.id_vital_sign,
            flg_status_in                => rec_in.flg_status,
            flg_status_det_in            => rec_in.flg_status_det,
            flg_status_plan_in           => rec_in.flg_status_plan,
            flg_time_in                  => rec_in.flg_time,
            dt_monitorization_in         => rec_in.dt_monitorization,
            dt_plan_in                   => rec_in.dt_plan,
            interval_in                  => rec_in.interval,
            id_episode_origin_in         => rec_in.id_episode_origin,
            dt_begin_in                  => rec_in.dt_begin,
            dt_end_in                    => rec_in.dt_end,
            num_monit_in                 => rec_in.num_monit,
            id_visit_in                  => rec_in.id_visit,
            status_str_in                => rec_in.status_str,
            status_msg_in                => rec_in.status_msg,
            status_icon_in               => rec_in.status_icon,
            status_flg_in                => rec_in.status_flg,
            flg_notes_in                 => rec_in.flg_notes,
            id_episode_in                => rec_in.id_episode,
            id_prev_episode_in           => rec_in.id_prev_episode,
            id_patient_in                => rec_in.id_patient,
            id_professional_in           => rec_in.id_professional,
            dt_dg_last_update_in         => rec_in.dt_dg_last_update,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution,
            dt_order_in                  => rec_in.dt_order
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN monitorizations_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_monitorization_in         => rec_in.id_monitorization,
            id_monitorization_vs_in      => rec_in.id_monitorization_vs,
            id_monitorization_vs_plan_in => rec_in.id_monitorization_vs_plan,
            id_vital_sign_in             => rec_in.id_vital_sign,
            flg_status_in                => rec_in.flg_status,
            flg_status_det_in            => rec_in.flg_status_det,
            flg_status_plan_in           => rec_in.flg_status_plan,
            flg_time_in                  => rec_in.flg_time,
            dt_monitorization_in         => rec_in.dt_monitorization,
            dt_plan_in                   => rec_in.dt_plan,
            interval_in                  => rec_in.interval,
            id_episode_origin_in         => rec_in.id_episode_origin,
            dt_begin_in                  => rec_in.dt_begin,
            dt_end_in                    => rec_in.dt_end,
            num_monit_in                 => rec_in.num_monit,
            id_visit_in                  => rec_in.id_visit,
            status_str_in                => rec_in.status_str,
            status_msg_in                => rec_in.status_msg,
            status_icon_in               => rec_in.status_icon,
            status_flg_in                => rec_in.status_flg,
            flg_notes_in                 => rec_in.flg_notes,
            id_episode_in                => rec_in.id_episode,
            id_prev_episode_in           => rec_in.id_prev_episode,
            id_patient_in                => rec_in.id_patient,
            id_professional_in           => rec_in.id_professional,
            dt_dg_last_update_in         => rec_in.dt_dg_last_update,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution,
            dt_order_in                  => rec_in.dt_order
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_monitorization_vs_in      IN monitorizations_ea.id_monitorization_vs%TYPE,
        id_monitorization_in         IN monitorizations_ea.id_monitorization%TYPE DEFAULT NULL,
        id_monitorization_vs_plan_in IN monitorizations_ea.id_monitorization_vs_plan%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorizations_ea.id_vital_sign%TYPE DEFAULT NULL,
        flg_status_in                IN monitorizations_ea.flg_status%TYPE DEFAULT NULL,
        flg_status_det_in            IN monitorizations_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_status_plan_in           IN monitorizations_ea.flg_status_plan%TYPE DEFAULT NULL,
        flg_time_in                  IN monitorizations_ea.flg_time%TYPE DEFAULT NULL,
        dt_monitorization_in         IN monitorizations_ea.dt_monitorization%TYPE DEFAULT NULL,
        dt_plan_in                   IN monitorizations_ea.dt_plan%TYPE DEFAULT NULL,
        interval_in                  IN monitorizations_ea.interval%TYPE DEFAULT NULL,
        id_episode_origin_in         IN monitorizations_ea.id_episode_origin%TYPE DEFAULT NULL,
        dt_begin_in                  IN monitorizations_ea.dt_begin%TYPE DEFAULT NULL,
        dt_end_in                    IN monitorizations_ea.dt_end%TYPE DEFAULT NULL,
        num_monit_in                 IN monitorizations_ea.num_monit%TYPE DEFAULT NULL,
        id_visit_in                  IN monitorizations_ea.id_visit%TYPE DEFAULT NULL,
        status_str_in                IN monitorizations_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in                IN monitorizations_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in               IN monitorizations_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in                IN monitorizations_ea.status_flg%TYPE DEFAULT NULL,
        flg_notes_in                 IN monitorizations_ea.flg_notes%TYPE DEFAULT NULL,
        id_episode_in                IN monitorizations_ea.id_episode%TYPE DEFAULT NULL,
        id_prev_episode_in           IN monitorizations_ea.id_prev_episode%TYPE DEFAULT NULL,
        id_patient_in                IN monitorizations_ea.id_patient%TYPE DEFAULT NULL,
        id_professional_in           IN monitorizations_ea.id_professional%TYPE DEFAULT NULL,
        dt_dg_last_update_in         IN monitorizations_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        create_user_in               IN monitorizations_ea.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorizations_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorizations_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorizations_ea.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorizations_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorizations_ea.update_institution%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorizations_ea.dt_order%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        upd(id_monitorization_vs_in      => id_monitorization_vs_in,
            id_monitorization_in         => id_monitorization_in,
            id_monitorization_vs_plan_in => id_monitorization_vs_plan_in,
            id_vital_sign_in             => id_vital_sign_in,
            flg_status_in                => flg_status_in,
            flg_status_det_in            => flg_status_det_in,
            flg_status_plan_in           => flg_status_plan_in,
            flg_time_in                  => flg_time_in,
            dt_monitorization_in         => dt_monitorization_in,
            dt_plan_in                   => dt_plan_in,
            interval_in                  => interval_in,
            id_episode_origin_in         => id_episode_origin_in,
            dt_begin_in                  => dt_begin_in,
            dt_end_in                    => dt_end_in,
            num_monit_in                 => num_monit_in,
            id_visit_in                  => id_visit_in,
            status_str_in                => status_str_in,
            status_msg_in                => status_msg_in,
            status_icon_in               => status_icon_in,
            status_flg_in                => status_flg_in,
            flg_notes_in                 => flg_notes_in,
            id_episode_in                => id_episode_in,
            id_prev_episode_in           => id_prev_episode_in,
            id_patient_in                => id_patient_in,
            id_professional_in           => id_professional_in,
            dt_dg_last_update_in         => dt_dg_last_update_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            dt_order_in                  => dt_order_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_monitorization_vs_in      => id_monitorization_vs_in,
                id_monitorization_in         => id_monitorization_in,
                id_monitorization_vs_plan_in => id_monitorization_vs_plan_in,
                id_vital_sign_in             => id_vital_sign_in,
                flg_status_in                => flg_status_in,
                flg_status_det_in            => flg_status_det_in,
                flg_status_plan_in           => flg_status_plan_in,
                flg_time_in                  => flg_time_in,
                dt_monitorization_in         => dt_monitorization_in,
                dt_plan_in                   => dt_plan_in,
                interval_in                  => interval_in,
                id_episode_origin_in         => id_episode_origin_in,
                dt_begin_in                  => dt_begin_in,
                dt_end_in                    => dt_end_in,
                num_monit_in                 => num_monit_in,
                id_visit_in                  => id_visit_in,
                status_str_in                => status_str_in,
                status_msg_in                => status_msg_in,
                status_icon_in               => status_icon_in,
                status_flg_in                => status_flg_in,
                flg_notes_in                 => flg_notes_in,
                id_episode_in                => id_episode_in,
                id_prev_episode_in           => id_prev_episode_in,
                id_patient_in                => id_patient_in,
                id_professional_in           => id_professional_in,
                dt_dg_last_update_in         => dt_dg_last_update_in,
                create_user_in               => create_user_in,
                create_time_in               => create_time_in,
                create_institution_in        => create_institution_in,
                update_user_in               => update_user_in,
                update_time_in               => update_time_in,
                update_institution_in        => update_institution_in,
                dt_order_in                  => dt_order_in,
                handle_error_in              => handle_error_in,
                rows_out                     => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_monitorization_vs_in      IN monitorizations_ea.id_monitorization_vs%TYPE,
        id_monitorization_in         IN monitorizations_ea.id_monitorization%TYPE DEFAULT NULL,
        id_monitorization_vs_plan_in IN monitorizations_ea.id_monitorization_vs_plan%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorizations_ea.id_vital_sign%TYPE DEFAULT NULL,
        flg_status_in                IN monitorizations_ea.flg_status%TYPE DEFAULT NULL,
        flg_status_det_in            IN monitorizations_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_status_plan_in           IN monitorizations_ea.flg_status_plan%TYPE DEFAULT NULL,
        flg_time_in                  IN monitorizations_ea.flg_time%TYPE DEFAULT NULL,
        dt_monitorization_in         IN monitorizations_ea.dt_monitorization%TYPE DEFAULT NULL,
        dt_plan_in                   IN monitorizations_ea.dt_plan%TYPE DEFAULT NULL,
        interval_in                  IN monitorizations_ea.interval%TYPE DEFAULT NULL,
        id_episode_origin_in         IN monitorizations_ea.id_episode_origin%TYPE DEFAULT NULL,
        dt_begin_in                  IN monitorizations_ea.dt_begin%TYPE DEFAULT NULL,
        dt_end_in                    IN monitorizations_ea.dt_end%TYPE DEFAULT NULL,
        num_monit_in                 IN monitorizations_ea.num_monit%TYPE DEFAULT NULL,
        id_visit_in                  IN monitorizations_ea.id_visit%TYPE DEFAULT NULL,
        status_str_in                IN monitorizations_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in                IN monitorizations_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in               IN monitorizations_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in                IN monitorizations_ea.status_flg%TYPE DEFAULT NULL,
        flg_notes_in                 IN monitorizations_ea.flg_notes%TYPE DEFAULT NULL,
        id_episode_in                IN monitorizations_ea.id_episode%TYPE DEFAULT NULL,
        id_prev_episode_in           IN monitorizations_ea.id_prev_episode%TYPE DEFAULT NULL,
        id_patient_in                IN monitorizations_ea.id_patient%TYPE DEFAULT NULL,
        id_professional_in           IN monitorizations_ea.id_professional%TYPE DEFAULT NULL,
        dt_dg_last_update_in         IN monitorizations_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        create_user_in               IN monitorizations_ea.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorizations_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorizations_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorizations_ea.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorizations_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorizations_ea.update_institution%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorizations_ea.dt_order%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_monitorization_vs_in,
                id_monitorization_in,
                id_monitorization_vs_plan_in,
                id_vital_sign_in,
                flg_status_in,
                flg_status_det_in,
                flg_status_plan_in,
                flg_time_in,
                dt_monitorization_in,
                dt_plan_in,
                interval_in,
                id_episode_origin_in,
                dt_begin_in,
                dt_end_in,
                num_monit_in,
                id_visit_in,
                status_str_in,
                status_msg_in,
                status_icon_in,
                status_flg_in,
                flg_notes_in,
                id_episode_in,
                id_prev_episode_in,
                id_patient_in,
                id_professional_in,
                dt_dg_last_update_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                dt_order_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN monitorizations_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_monitorization         id_monitorization_cc;
        l_id_monitorization_vs      id_monitorization_vs_cc;
        l_id_monitorization_vs_plan id_monitorization_vs_plan_cc;
        l_id_vital_sign             id_vital_sign_cc;
        l_flg_status                flg_status_cc;
        l_flg_status_det            flg_status_det_cc;
        l_flg_status_plan           flg_status_plan_cc;
        l_flg_time                  flg_time_cc;
        l_dt_monitorization         dt_monitorization_cc;
        l_dt_plan                   dt_plan_cc;
        l_interval                  interval_cc;
        l_id_episode_origin         id_episode_origin_cc;
        l_dt_begin                  dt_begin_cc;
        l_dt_end                    dt_end_cc;
        l_num_monit                 num_monit_cc;
        l_id_visit                  id_visit_cc;
        l_status_str                status_str_cc;
        l_status_msg                status_msg_cc;
        l_status_icon               status_icon_cc;
        l_status_flg                status_flg_cc;
        l_flg_notes                 flg_notes_cc;
        l_id_episode                id_episode_cc;
        l_id_prev_episode           id_prev_episode_cc;
        l_id_patient                id_patient_cc;
        l_id_professional           id_professional_cc;
        l_dt_dg_last_update         dt_dg_last_update_cc;
        l_create_user               create_user_cc;
        l_create_time               create_time_cc;
        l_create_institution        create_institution_cc;
        l_update_user               update_user_cc;
        l_update_time               update_time_cc;
        l_update_institution        update_institution_cc;
        l_dt_order                  dt_order_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_monitorization(i) := col_in(i).id_monitorization;
            l_id_monitorization_vs(i) := col_in(i).id_monitorization_vs;
            l_id_monitorization_vs_plan(i) := col_in(i).id_monitorization_vs_plan;
            l_id_vital_sign(i) := col_in(i).id_vital_sign;
            l_flg_status(i) := col_in(i).flg_status;
            l_flg_status_det(i) := col_in(i).flg_status_det;
            l_flg_status_plan(i) := col_in(i).flg_status_plan;
            l_flg_time(i) := col_in(i).flg_time;
            l_dt_monitorization(i) := col_in(i).dt_monitorization;
            l_dt_plan(i) := col_in(i).dt_plan;
            l_interval(i) := col_in(i).interval;
            l_id_episode_origin(i) := col_in(i).id_episode_origin;
            l_dt_begin(i) := col_in(i).dt_begin;
            l_dt_end(i) := col_in(i).dt_end;
            l_num_monit(i) := col_in(i).num_monit;
            l_id_visit(i) := col_in(i).id_visit;
            l_status_str(i) := col_in(i).status_str;
            l_status_msg(i) := col_in(i).status_msg;
            l_status_icon(i) := col_in(i).status_icon;
            l_status_flg(i) := col_in(i).status_flg;
            l_flg_notes(i) := col_in(i).flg_notes;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_prev_episode(i) := col_in(i).id_prev_episode;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_professional(i) := col_in(i).id_professional;
            l_dt_dg_last_update(i) := col_in(i).dt_dg_last_update;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_dt_order(i) := col_in(i).dt_order;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE monitorizations_ea
                   SET id_monitorization         = nvl(l_id_monitorization(i), id_monitorization),
                       id_monitorization_vs_plan = nvl(l_id_monitorization_vs_plan(i), id_monitorization_vs_plan),
                       id_vital_sign             = nvl(l_id_vital_sign(i), id_vital_sign),
                       flg_status                = nvl(l_flg_status(i), flg_status),
                       flg_status_det            = nvl(l_flg_status_det(i), flg_status_det),
                       flg_status_plan           = nvl(l_flg_status_plan(i), flg_status_plan),
                       flg_time                  = nvl(l_flg_time(i), flg_time),
                       dt_monitorization         = nvl(l_dt_monitorization(i), dt_monitorization),
                       dt_plan                   = nvl(l_dt_plan(i), dt_plan),
                       INTERVAL                  = nvl(l_interval(i), INTERVAL),
                       id_episode_origin         = nvl(l_id_episode_origin(i), id_episode_origin),
                       dt_begin                  = nvl(l_dt_begin(i), dt_begin),
                       dt_end                    = nvl(l_dt_end(i), dt_end),
                       num_monit                 = nvl(l_num_monit(i), num_monit),
                       id_visit                  = nvl(l_id_visit(i), id_visit),
                       status_str                = nvl(l_status_str(i), status_str),
                       status_msg                = nvl(l_status_msg(i), status_msg),
                       status_icon               = nvl(l_status_icon(i), status_icon),
                       status_flg                = nvl(l_status_flg(i), status_flg),
                       flg_notes                 = nvl(l_flg_notes(i), flg_notes),
                       id_episode                = nvl(l_id_episode(i), id_episode),
                       id_prev_episode           = nvl(l_id_prev_episode(i), id_prev_episode),
                       id_patient                = nvl(l_id_patient(i), id_patient),
                       id_professional           = nvl(l_id_professional(i), id_professional),
                       dt_dg_last_update         = nvl(l_dt_dg_last_update(i), current_timestamp),
                       create_user               = nvl(l_create_user(i), create_user),
                       create_time               = nvl(l_create_time(i), create_time),
                       create_institution        = nvl(l_create_institution(i), create_institution),
                       update_user               = nvl(l_update_user(i), update_user),
                       update_time               = nvl(l_update_time(i), update_time),
                       update_institution        = nvl(l_update_institution(i), update_institution),
                       dt_order                  = nvl(l_dt_order(i), dt_order)
                 WHERE id_monitorization_vs = l_id_monitorization_vs(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE monitorizations_ea
                   SET id_monitorization         = l_id_monitorization(i),
                       id_monitorization_vs_plan = l_id_monitorization_vs_plan(i),
                       id_vital_sign             = l_id_vital_sign(i),
                       flg_status                = l_flg_status(i),
                       flg_status_det            = l_flg_status_det(i),
                       flg_status_plan           = l_flg_status_plan(i),
                       flg_time                  = l_flg_time(i),
                       dt_monitorization         = l_dt_monitorization(i),
                       dt_plan                   = l_dt_plan(i),
                       INTERVAL                  = l_interval(i),
                       id_episode_origin         = l_id_episode_origin(i),
                       dt_begin                  = l_dt_begin(i),
                       dt_end                    = l_dt_end(i),
                       num_monit                 = l_num_monit(i),
                       id_visit                  = l_id_visit(i),
                       status_str                = l_status_str(i),
                       status_msg                = l_status_msg(i),
                       status_icon               = l_status_icon(i),
                       status_flg                = l_status_flg(i),
                       flg_notes                 = l_flg_notes(i),
                       id_episode                = l_id_episode(i),
                       id_prev_episode           = l_id_prev_episode(i),
                       id_patient                = l_id_patient(i),
                       id_professional           = l_id_professional(i),
                       dt_dg_last_update         = nvl(l_dt_dg_last_update(i), current_timestamp),
                       create_user               = l_create_user(i),
                       create_time               = l_create_time(i),
                       create_institution        = l_create_institution(i),
                       update_user               = l_update_user(i),
                       update_time               = l_update_time(i),
                       update_institution        = l_update_institution(i),
                       dt_order                  = l_dt_order(i)
                 WHERE id_monitorization_vs = l_id_monitorization_vs(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN monitorizations_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE MONITORIZATIONS_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE MONITORIZATIONS_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE MONITORIZATIONS_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE MONITORIZATIONS_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_monitorization_vs_in IN monitorizations_ea.id_monitorization_vs%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorizations_ea
         WHERE id_monitorization_vs = id_monitorization_vs_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_monitorization_vs_in IN monitorizations_ea.id_monitorization_vs%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_monitorization_vs_in => id_monitorization_vs_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_MONITORIZATION_VS
    PROCEDURE del_id_monitorization_vs
    (
        id_monitorization_vs_in IN monitorizations_ea.id_monitorization_vs%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorizations_ea
         WHERE id_monitorization_vs = id_monitorization_vs_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_monitorization_vs;

    -- Delete all rows for primary key column ID_MONITORIZATION_VS
    PROCEDURE del_id_monitorization_vs
    (
        id_monitorization_vs_in IN monitorizations_ea.id_monitorization_vs%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_monitorization_vs(id_monitorization_vs_in => id_monitorization_vs_in,
                                 handle_error_in         => handle_error_in,
                                 rows_out                => rows_out);
    END del_id_monitorization_vs;

    PROCEDURE del_mea_epis_fk
    (
        id_episode_in   IN monitorizations_ea.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorizations_ea
         WHERE id_episode = del_mea_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mea_epis_fk;

    PROCEDURE del_mea_epis_fk
    (
        id_episode_in   IN monitorizations_ea.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mea_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_mea_epis_fk;

    PROCEDURE del_mea_epis_origin_fk
    (
        id_episode_origin_in IN monitorizations_ea.id_episode_origin%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorizations_ea
         WHERE id_episode_origin = del_mea_epis_origin_fk.id_episode_origin_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mea_epis_origin_fk;

    PROCEDURE del_mea_epis_origin_fk
    (
        id_episode_origin_in IN monitorizations_ea.id_episode_origin%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mea_epis_origin_fk(id_episode_origin_in => id_episode_origin_in,
                               handle_error_in      => handle_error_in,
                               rows_out             => rows_out);
    END del_mea_epis_origin_fk;

    PROCEDURE del_mea_epis_prev_fk
    (
        id_prev_episode_in IN monitorizations_ea.id_prev_episode%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorizations_ea
         WHERE id_prev_episode = del_mea_epis_prev_fk.id_prev_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mea_epis_prev_fk;

    PROCEDURE del_mea_epis_prev_fk
    (
        id_prev_episode_in IN monitorizations_ea.id_prev_episode%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mea_epis_prev_fk(id_prev_episode_in => id_prev_episode_in,
                             handle_error_in    => handle_error_in,
                             rows_out           => rows_out);
    END del_mea_epis_prev_fk;

    PROCEDURE del_mea_mont_fk
    (
        id_monitorization_in IN monitorizations_ea.id_monitorization%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorizations_ea
         WHERE id_monitorization = del_mea_mont_fk.id_monitorization_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mea_mont_fk;

    PROCEDURE del_mea_mont_fk
    (
        id_monitorization_in IN monitorizations_ea.id_monitorization%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mea_mont_fk(id_monitorization_in => id_monitorization_in,
                        handle_error_in      => handle_error_in,
                        rows_out             => rows_out);
    END del_mea_mont_fk;

    PROCEDURE del_mea_mvs_fk
    (
        id_monitorization_vs_in IN monitorizations_ea.id_monitorization_vs%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorizations_ea
         WHERE id_monitorization_vs = del_mea_mvs_fk.id_monitorization_vs_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mea_mvs_fk;

    PROCEDURE del_mea_mvs_fk
    (
        id_monitorization_vs_in IN monitorizations_ea.id_monitorization_vs%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mea_mvs_fk(id_monitorization_vs_in => id_monitorization_vs_in,
                       handle_error_in         => handle_error_in,
                       rows_out                => rows_out);
    END del_mea_mvs_fk;

    PROCEDURE del_mea_mvsp_fk
    (
        id_monitorization_vs_plan_in IN monitorizations_ea.id_monitorization_vs_plan%TYPE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorizations_ea
         WHERE id_monitorization_vs_plan = del_mea_mvsp_fk.id_monitorization_vs_plan_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mea_mvsp_fk;

    PROCEDURE del_mea_mvsp_fk
    (
        id_monitorization_vs_plan_in IN monitorizations_ea.id_monitorization_vs_plan%TYPE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mea_mvsp_fk(id_monitorization_vs_plan_in => id_monitorization_vs_plan_in,
                        handle_error_in              => handle_error_in,
                        rows_out                     => rows_out);
    END del_mea_mvsp_fk;

    PROCEDURE del_mea_pat_fk
    (
        id_patient_in   IN monitorizations_ea.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorizations_ea
         WHERE id_patient = del_mea_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mea_pat_fk;

    PROCEDURE del_mea_pat_fk
    (
        id_patient_in   IN monitorizations_ea.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mea_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_mea_pat_fk;

    PROCEDURE del_mea_prof_fk
    (
        id_professional_in IN monitorizations_ea.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorizations_ea
         WHERE id_professional = del_mea_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mea_prof_fk;

    PROCEDURE del_mea_prof_fk
    (
        id_professional_in IN monitorizations_ea.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mea_prof_fk(id_professional_in => id_professional_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_mea_prof_fk;

    PROCEDURE del_mea_vis_fk
    (
        id_visit_in     IN monitorizations_ea.id_visit%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorizations_ea
         WHERE id_visit = del_mea_vis_fk.id_visit_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mea_vis_fk;

    PROCEDURE del_mea_vis_fk
    (
        id_visit_in     IN monitorizations_ea.id_visit%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mea_vis_fk(id_visit_in => id_visit_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_mea_vis_fk;

    PROCEDURE del_mea_vs_fk
    (
        id_vital_sign_in IN monitorizations_ea.id_vital_sign%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorizations_ea
         WHERE id_vital_sign = del_mea_vs_fk.id_vital_sign_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mea_vs_fk;

    PROCEDURE del_mea_vs_fk
    (
        id_vital_sign_in IN monitorizations_ea.id_vital_sign%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mea_vs_fk(id_vital_sign_in => id_vital_sign_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_mea_vs_fk;

    PROCEDURE del_tmp$$_mea_vis_fk0
    (
        id_visit_in     IN monitorizations_ea.id_visit%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorizations_ea
         WHERE id_visit = del_tmp$$_mea_vis_fk0.id_visit_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_tmp$$_mea_vis_fk0;

    PROCEDURE del_tmp$$_mea_vis_fk0
    (
        id_visit_in     IN monitorizations_ea.id_visit%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_tmp$$_mea_vis_fk0(id_visit_in => id_visit_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_tmp$$_mea_vis_fk0;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM MONITORIZATIONS_EA';
        ELSE
            RETURN 'DELETE FROM MONITORIZATIONS_EA WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATIONS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATIONS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(monitorizations_ea_inout IN OUT monitorizations_ea%ROWTYPE) IS
    BEGIN
        monitorizations_ea_inout.id_monitorization         := NULL;
        monitorizations_ea_inout.id_monitorization_vs      := NULL;
        monitorizations_ea_inout.id_monitorization_vs_plan := NULL;
        monitorizations_ea_inout.id_vital_sign             := NULL;
        monitorizations_ea_inout.flg_status                := NULL;
        monitorizations_ea_inout.flg_status_det            := NULL;
        monitorizations_ea_inout.flg_status_plan           := NULL;
        monitorizations_ea_inout.flg_time                  := NULL;
        monitorizations_ea_inout.dt_monitorization         := NULL;
        monitorizations_ea_inout.dt_plan                   := NULL;
        monitorizations_ea_inout.interval                  := NULL;
        monitorizations_ea_inout.id_episode_origin         := NULL;
        monitorizations_ea_inout.dt_begin                  := NULL;
        monitorizations_ea_inout.dt_end                    := NULL;
        monitorizations_ea_inout.num_monit                 := NULL;
        monitorizations_ea_inout.id_visit                  := NULL;
        monitorizations_ea_inout.status_str                := NULL;
        monitorizations_ea_inout.status_msg                := NULL;
        monitorizations_ea_inout.status_icon               := NULL;
        monitorizations_ea_inout.status_flg                := NULL;
        monitorizations_ea_inout.flg_notes                 := NULL;
        monitorizations_ea_inout.id_episode                := NULL;
        monitorizations_ea_inout.id_prev_episode           := NULL;
        monitorizations_ea_inout.id_patient                := NULL;
        monitorizations_ea_inout.id_professional           := NULL;
        monitorizations_ea_inout.dt_dg_last_update         := current_timestamp;
        monitorizations_ea_inout.create_user               := NULL;
        monitorizations_ea_inout.create_time               := NULL;
        monitorizations_ea_inout.create_institution        := NULL;
        monitorizations_ea_inout.update_user               := NULL;
        monitorizations_ea_inout.update_time               := NULL;
        monitorizations_ea_inout.update_institution        := NULL;
        monitorizations_ea_inout.dt_order                  := NULL;
    END initrec;

    FUNCTION initrec RETURN monitorizations_ea%ROWTYPE IS
        l_monitorizations_ea monitorizations_ea%ROWTYPE;
    BEGIN
        l_monitorizations_ea.dt_dg_last_update := current_timestamp;
        RETURN l_monitorizations_ea;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN monitorizations_ea_tc IS
        data monitorizations_ea_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM monitorizations_ea
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN monitorizations_ea_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data monitorizations_ea_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_monitorizations_ea;
/
