/*-- Last Change Revision: $Rev: 2028325 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:07 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_pat_vaccine
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 21, 2008 18:26:9
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_pat_vaccine_in      IN pat_vaccine.id_pat_vaccine%TYPE,
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pat_vaccine
            (id_pat_vaccine,
             id_patient,
             id_institution,
             id_vaccine,
             id_professional,
             flg_take_type,
             lab,
             lote,
             notes,
             tuberculin_type,
             dt_pat_vaccine_tstz,
             dt_take_tstz,
             id_episode)
        VALUES
            (id_pat_vaccine_in,
             id_patient_in,
             id_institution_in,
             id_vaccine_in,
             id_professional_in,
             flg_take_type_in,
             lab_in,
             lote_in,
             notes_in,
             tuberculin_type_in,
             dt_pat_vaccine_tstz_in,
             dt_take_tstz_in,
             id_episode_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_VACCINE');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    IF l_name = 'PVE_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PVE_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PVE_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PVE_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'PVE_VCC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VACCINE',
                                                        value_in           => id_vaccine_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_pat_vaccine_in      IN pat_vaccine.id_pat_vaccine%TYPE,
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_pat_vaccine_in      => id_pat_vaccine_in,
            id_patient_in          => id_patient_in,
            id_institution_in      => id_institution_in,
            id_vaccine_in          => id_vaccine_in,
            id_professional_in     => id_professional_in,
            flg_take_type_in       => flg_take_type_in,
            lab_in                 => lab_in,
            lote_in                => lote_in,
            notes_in               => notes_in,
            tuberculin_type_in     => tuberculin_type_in,
            dt_pat_vaccine_tstz_in => dt_pat_vaccine_tstz_in,
            dt_take_tstz_in        => dt_take_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_vaccine%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pat_vaccine%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_pat_vaccine := next_key(sequence_in);
        END IF;
        ins(id_pat_vaccine_in      => l_rec.id_pat_vaccine,
            id_patient_in          => l_rec.id_patient,
            id_institution_in      => l_rec.id_institution,
            id_vaccine_in          => l_rec.id_vaccine,
            id_professional_in     => l_rec.id_professional,
            flg_take_type_in       => l_rec.flg_take_type,
            lab_in                 => l_rec.lab,
            lote_in                => l_rec.lote,
            notes_in               => l_rec.notes,
            tuberculin_type_in     => l_rec.tuberculin_type,
            dt_pat_vaccine_tstz_in => l_rec.dt_pat_vaccine_tstz,
            dt_take_tstz_in        => l_rec.dt_take_tstz,
            id_episode_in          => l_rec.id_episode,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_vaccine%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN pat_vaccine.id_pat_vaccine%TYPE
    
     IS
        retval pat_vaccine.id_pat_vaccine%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_pat_vaccine.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PAT_VACCINE'));
    END next_key;

    PROCEDURE ins
    (
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        id_pat_vaccine_out     IN OUT pat_vaccine.id_pat_vaccine%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky pat_vaccine.id_pat_vaccine%TYPE := next_key;
    BEGIN
        ins(id_pat_vaccine_in      => l_pky,
            id_patient_in          => id_patient_in,
            id_institution_in      => id_institution_in,
            id_vaccine_in          => id_vaccine_in,
            id_professional_in     => id_professional_in,
            flg_take_type_in       => flg_take_type_in,
            lab_in                 => lab_in,
            lote_in                => lote_in,
            notes_in               => notes_in,
            tuberculin_type_in     => tuberculin_type_in,
            dt_pat_vaccine_tstz_in => dt_pat_vaccine_tstz_in,
            dt_take_tstz_in        => dt_take_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_pat_vaccine_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        id_pat_vaccine_out     IN OUT pat_vaccine.id_pat_vaccine%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_patient_in          => id_patient_in,
            id_institution_in      => id_institution_in,
            id_vaccine_in          => id_vaccine_in,
            id_professional_in     => id_professional_in,
            flg_take_type_in       => flg_take_type_in,
            lab_in                 => lab_in,
            lote_in                => lote_in,
            notes_in               => notes_in,
            tuberculin_type_in     => tuberculin_type_in,
            dt_pat_vaccine_tstz_in => dt_pat_vaccine_tstz_in,
            dt_take_tstz_in        => dt_take_tstz_in,
            id_episode_in          => id_episode_in,
            id_pat_vaccine_out     => id_pat_vaccine_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    FUNCTION ins
    (
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) RETURN pat_vaccine.id_pat_vaccine%TYPE IS
        l_pky pat_vaccine.id_pat_vaccine%TYPE := next_key;
    BEGIN
        ins(id_pat_vaccine_in      => l_pky,
            id_patient_in          => id_patient_in,
            id_institution_in      => id_institution_in,
            id_vaccine_in          => id_vaccine_in,
            id_professional_in     => id_professional_in,
            flg_take_type_in       => flg_take_type_in,
            lab_in                 => lab_in,
            lote_in                => lote_in,
            notes_in               => notes_in,
            tuberculin_type_in     => tuberculin_type_in,
            dt_pat_vaccine_tstz_in => dt_pat_vaccine_tstz_in,
            dt_take_tstz_in        => dt_take_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) RETURN pat_vaccine.id_pat_vaccine%TYPE IS
        l_pky    pat_vaccine.id_pat_vaccine%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_vaccine_in      => l_pky,
            id_patient_in          => id_patient_in,
            id_institution_in      => id_institution_in,
            id_vaccine_in          => id_vaccine_in,
            id_professional_in     => id_professional_in,
            flg_take_type_in       => flg_take_type_in,
            lab_in                 => lab_in,
            lote_in                => lote_in,
            notes_in               => notes_in,
            tuberculin_type_in     => tuberculin_type_in,
            dt_pat_vaccine_tstz_in => dt_pat_vaccine_tstz_in,
            dt_take_tstz_in        => dt_take_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky pat_vaccine.id_pat_vaccine%TYPE := next_key;
    BEGIN
        ins(id_pat_vaccine_in      => l_pky,
            id_patient_in          => id_patient_in,
            id_institution_in      => id_institution_in,
            id_vaccine_in          => id_vaccine_in,
            id_professional_in     => id_professional_in,
            flg_take_type_in       => flg_take_type_in,
            lab_in                 => lab_in,
            lote_in                => lote_in,
            notes_in               => notes_in,
            tuberculin_type_in     => tuberculin_type_in,
            dt_pat_vaccine_tstz_in => dt_pat_vaccine_tstz_in,
            dt_take_tstz_in        => dt_take_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        l_pky    pat_vaccine.id_pat_vaccine%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_vaccine_in      => l_pky,
            id_patient_in          => id_patient_in,
            id_institution_in      => id_institution_in,
            id_vaccine_in          => id_vaccine_in,
            id_professional_in     => id_professional_in,
            flg_take_type_in       => flg_take_type_in,
            lab_in                 => lab_in,
            lote_in                => lote_in,
            notes_in               => notes_in,
            tuberculin_type_in     => tuberculin_type_in,
            dt_pat_vaccine_tstz_in => dt_pat_vaccine_tstz_in,
            dt_take_tstz_in        => dt_take_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_vaccine_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO pat_vaccine
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_VACCINE _' || indx,
                                                        value_in           => rows_in(indx).id_pat_vaccine,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VACCINE _' || indx,
                                                        value_in           => rows_in(indx).id_vaccine,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TAKE_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_take_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAB _' || indx,
                                                        value_in           => rows_in(indx).lab,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LOTE _' || indx,
                                                        value_in           => rows_in(indx).lote,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TUBERCULIN_TYPE _' || indx,
                                                        value_in           => rows_in(indx).tuberculin_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PAT_VACCINE_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_pat_vaccine_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_TAKE_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_take_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PAT_VACCINE',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_vaccine_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_pat_vaccine_in       IN pat_vaccine.id_pat_vaccine%TYPE,
        id_patient_in           IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_institution_in       IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_vaccine_in           IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_vaccine_nin          IN BOOLEAN := TRUE,
        id_professional_in      IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        flg_take_type_in        IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        flg_take_type_nin       IN BOOLEAN := TRUE,
        lab_in                  IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lab_nin                 IN BOOLEAN := TRUE,
        lote_in                 IN pat_vaccine.lote%TYPE DEFAULT NULL,
        lote_nin                IN BOOLEAN := TRUE,
        notes_in                IN pat_vaccine.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        tuberculin_type_in      IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        tuberculin_type_nin     IN BOOLEAN := TRUE,
        dt_pat_vaccine_tstz_in  IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_nin IN BOOLEAN := TRUE,
        dt_take_tstz_in         IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_nin        IN BOOLEAN := TRUE,
        id_episode_in           IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_patient_n          NUMBER(1);
        l_id_institution_n      NUMBER(1);
        l_id_vaccine_n          NUMBER(1);
        l_id_professional_n     NUMBER(1);
        l_flg_take_type_n       NUMBER(1);
        l_lab_n                 NUMBER(1);
        l_lote_n                NUMBER(1);
        l_notes_n               NUMBER(1);
        l_tuberculin_type_n     NUMBER(1);
        l_dt_pat_vaccine_tstz_n NUMBER(1);
        l_dt_take_tstz_n        NUMBER(1);
        l_id_episode_n          NUMBER(1);
    BEGIN
    
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_id_institution_n      := sys.diutil.bool_to_int(id_institution_nin);
        l_id_vaccine_n          := sys.diutil.bool_to_int(id_vaccine_nin);
        l_id_professional_n     := sys.diutil.bool_to_int(id_professional_nin);
        l_flg_take_type_n       := sys.diutil.bool_to_int(flg_take_type_nin);
        l_lab_n                 := sys.diutil.bool_to_int(lab_nin);
        l_lote_n                := sys.diutil.bool_to_int(lote_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_tuberculin_type_n     := sys.diutil.bool_to_int(tuberculin_type_nin);
        l_dt_pat_vaccine_tstz_n := sys.diutil.bool_to_int(dt_pat_vaccine_tstz_nin);
        l_dt_take_tstz_n        := sys.diutil.bool_to_int(dt_take_tstz_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
    
        UPDATE pat_vaccine
           SET id_patient          = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_institution      = decode(l_id_institution_n,
                                            0,
                                            id_institution_in,
                                            nvl(id_institution_in, id_institution)),
               id_vaccine          = decode(l_id_vaccine_n, 0, id_vaccine_in, nvl(id_vaccine_in, id_vaccine)),
               id_professional     = decode(l_id_professional_n,
                                            0,
                                            id_professional_in,
                                            nvl(id_professional_in, id_professional)),
               flg_take_type       = decode(l_flg_take_type_n, 0, flg_take_type_in, nvl(flg_take_type_in, flg_take_type)),
               lab                 = decode(l_lab_n, 0, lab_in, nvl(lab_in, lab)),
               lote                = decode(l_lote_n, 0, lote_in, nvl(lote_in, lote)),
               notes               = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               tuberculin_type     = decode(l_tuberculin_type_n,
                                            0,
                                            tuberculin_type_in,
                                            nvl(tuberculin_type_in, tuberculin_type)),
               dt_pat_vaccine_tstz = decode(l_dt_pat_vaccine_tstz_n,
                                            0,
                                            dt_pat_vaccine_tstz_in,
                                            nvl(dt_pat_vaccine_tstz_in, dt_pat_vaccine_tstz)),
               dt_take_tstz        = decode(l_dt_take_tstz_n, 0, dt_take_tstz_in, nvl(dt_take_tstz_in, dt_take_tstz)),
               id_episode          = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode))
         WHERE id_pat_vaccine = id_pat_vaccine_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_VACCINE');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    IF l_name = 'PVE_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PVE_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PVE_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PVE_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'PVE_VCC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VACCINE',
                                                        value_in           => id_vaccine_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pat_vaccine_in       IN pat_vaccine.id_pat_vaccine%TYPE,
        id_patient_in           IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_institution_in       IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_vaccine_in           IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_vaccine_nin          IN BOOLEAN := TRUE,
        id_professional_in      IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        flg_take_type_in        IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        flg_take_type_nin       IN BOOLEAN := TRUE,
        lab_in                  IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lab_nin                 IN BOOLEAN := TRUE,
        lote_in                 IN pat_vaccine.lote%TYPE DEFAULT NULL,
        lote_nin                IN BOOLEAN := TRUE,
        notes_in                IN pat_vaccine.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        tuberculin_type_in      IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        tuberculin_type_nin     IN BOOLEAN := TRUE,
        dt_pat_vaccine_tstz_in  IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_nin IN BOOLEAN := TRUE,
        dt_take_tstz_in         IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_nin        IN BOOLEAN := TRUE,
        id_episode_in           IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_vaccine_in       => id_pat_vaccine_in,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            id_institution_in       => id_institution_in,
            id_institution_nin      => id_institution_nin,
            id_vaccine_in           => id_vaccine_in,
            id_vaccine_nin          => id_vaccine_nin,
            id_professional_in      => id_professional_in,
            id_professional_nin     => id_professional_nin,
            flg_take_type_in        => flg_take_type_in,
            flg_take_type_nin       => flg_take_type_nin,
            lab_in                  => lab_in,
            lab_nin                 => lab_nin,
            lote_in                 => lote_in,
            lote_nin                => lote_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            tuberculin_type_in      => tuberculin_type_in,
            tuberculin_type_nin     => tuberculin_type_nin,
            dt_pat_vaccine_tstz_in  => dt_pat_vaccine_tstz_in,
            dt_pat_vaccine_tstz_nin => dt_pat_vaccine_tstz_nin,
            dt_take_tstz_in         => dt_take_tstz_in,
            dt_take_tstz_nin        => dt_take_tstz_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_patient_in           IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_institution_in       IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_vaccine_in           IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_vaccine_nin          IN BOOLEAN := TRUE,
        id_professional_in      IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        flg_take_type_in        IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        flg_take_type_nin       IN BOOLEAN := TRUE,
        lab_in                  IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lab_nin                 IN BOOLEAN := TRUE,
        lote_in                 IN pat_vaccine.lote%TYPE DEFAULT NULL,
        lote_nin                IN BOOLEAN := TRUE,
        notes_in                IN pat_vaccine.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        tuberculin_type_in      IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        tuberculin_type_nin     IN BOOLEAN := TRUE,
        dt_pat_vaccine_tstz_in  IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_nin IN BOOLEAN := TRUE,
        dt_take_tstz_in         IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_nin        IN BOOLEAN := TRUE,
        id_episode_in           IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_patient_n          NUMBER(1);
        l_id_institution_n      NUMBER(1);
        l_id_vaccine_n          NUMBER(1);
        l_id_professional_n     NUMBER(1);
        l_flg_take_type_n       NUMBER(1);
        l_lab_n                 NUMBER(1);
        l_lote_n                NUMBER(1);
        l_notes_n               NUMBER(1);
        l_tuberculin_type_n     NUMBER(1);
        l_dt_pat_vaccine_tstz_n NUMBER(1);
        l_dt_take_tstz_n        NUMBER(1);
        l_id_episode_n          NUMBER(1);
        id_pat_vaccine_in       pat_vaccine.id_pat_vaccine%TYPE;
    BEGIN
    
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_id_institution_n      := sys.diutil.bool_to_int(id_institution_nin);
        l_id_vaccine_n          := sys.diutil.bool_to_int(id_vaccine_nin);
        l_id_professional_n     := sys.diutil.bool_to_int(id_professional_nin);
        l_flg_take_type_n       := sys.diutil.bool_to_int(flg_take_type_nin);
        l_lab_n                 := sys.diutil.bool_to_int(lab_nin);
        l_lote_n                := sys.diutil.bool_to_int(lote_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_tuberculin_type_n     := sys.diutil.bool_to_int(tuberculin_type_nin);
        l_dt_pat_vaccine_tstz_n := sys.diutil.bool_to_int(dt_pat_vaccine_tstz_nin);
        l_dt_take_tstz_n        := sys.diutil.bool_to_int(dt_take_tstz_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
    
        l_sql := 'UPDATE PAT_VACCINE SET ' || ' ID_PATIENT = decode (' || l_id_patient_n ||
                 ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' || ' ID_INSTITUTION = decode (' ||
                 l_id_institution_n || ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' ID_VACCINE = decode (' || l_id_vaccine_n || ',0,:id_vaccine_in, NVL (:id_vaccine_in, ID_VACCINE)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' FLG_TAKE_TYPE = decode (' || l_flg_take_type_n ||
                 ',0,:flg_take_type_in, NVL (:flg_take_type_in, FLG_TAKE_TYPE)) ' || ',' || ' LAB = decode (' ||
                 l_lab_n || ',0,:lab_in, NVL (:lab_in, LAB)) ' || ',' || ' LOTE = decode (' || l_lote_n ||
                 ',0,:lote_in, NVL (:lote_in, LOTE)) ' || ',' || ' NOTES = decode (' || l_notes_n ||
                 ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' || ' TUBERCULIN_TYPE = decode (' ||
                 l_tuberculin_type_n || ',0,:tuberculin_type_in, NVL (:tuberculin_type_in, TUBERCULIN_TYPE)) ' || ',' ||
                 ' DT_PAT_VACCINE_TSTZ = decode (' || l_dt_pat_vaccine_tstz_n ||
                 ',0,:dt_pat_vaccine_tstz_in, NVL (:dt_pat_vaccine_tstz_in, DT_PAT_VACCINE_TSTZ)) ' || ',' ||
                 ' DT_TAKE_TSTZ = decode (' || l_dt_take_tstz_n ||
                 ',0,:dt_take_tstz_in, NVL (:dt_take_tstz_in, DT_TAKE_TSTZ)) ' || ',' || ' ID_EPISODE = decode (' ||
                 l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_patient_in, id_institution_in, id_vaccine_in, id_professional_in, flg_take_type_in, lab_in, lote_in, notes_in, tuberculin_type_in, dt_pat_vaccine_tstz_in, dt_take_tstz_in, id_episode_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_VACCINE');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    IF l_name = 'PVE_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PVE_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PVE_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PVE_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'PVE_VCC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VACCINE',
                                                        value_in           => id_vaccine_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_patient_in           IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_institution_in       IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_vaccine_in           IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_vaccine_nin          IN BOOLEAN := TRUE,
        id_professional_in      IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        flg_take_type_in        IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        flg_take_type_nin       IN BOOLEAN := TRUE,
        lab_in                  IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lab_nin                 IN BOOLEAN := TRUE,
        lote_in                 IN pat_vaccine.lote%TYPE DEFAULT NULL,
        lote_nin                IN BOOLEAN := TRUE,
        notes_in                IN pat_vaccine.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        tuberculin_type_in      IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        tuberculin_type_nin     IN BOOLEAN := TRUE,
        dt_pat_vaccine_tstz_in  IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_nin IN BOOLEAN := TRUE,
        dt_take_tstz_in         IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_nin        IN BOOLEAN := TRUE,
        id_episode_in           IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            id_institution_in       => id_institution_in,
            id_institution_nin      => id_institution_nin,
            id_vaccine_in           => id_vaccine_in,
            id_vaccine_nin          => id_vaccine_nin,
            id_professional_in      => id_professional_in,
            id_professional_nin     => id_professional_nin,
            flg_take_type_in        => flg_take_type_in,
            flg_take_type_nin       => flg_take_type_nin,
            lab_in                  => lab_in,
            lab_nin                 => lab_nin,
            lote_in                 => lote_in,
            lote_nin                => lote_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            tuberculin_type_in      => tuberculin_type_in,
            tuberculin_type_nin     => tuberculin_type_nin,
            dt_pat_vaccine_tstz_in  => dt_pat_vaccine_tstz_in,
            dt_pat_vaccine_tstz_nin => dt_pat_vaccine_tstz_nin,
            dt_take_tstz_in         => dt_take_tstz_in,
            dt_take_tstz_nin        => dt_take_tstz_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_vaccine%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_vaccine_in      => rec_in.id_pat_vaccine,
            id_patient_in          => rec_in.id_patient,
            id_institution_in      => rec_in.id_institution,
            id_vaccine_in          => rec_in.id_vaccine,
            id_professional_in     => rec_in.id_professional,
            flg_take_type_in       => rec_in.flg_take_type,
            lab_in                 => rec_in.lab,
            lote_in                => rec_in.lote,
            notes_in               => rec_in.notes,
            tuberculin_type_in     => rec_in.tuberculin_type,
            dt_pat_vaccine_tstz_in => rec_in.dt_pat_vaccine_tstz,
            dt_take_tstz_in        => rec_in.dt_take_tstz,
            id_episode_in          => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_vaccine%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_vaccine_in      => rec_in.id_pat_vaccine,
            id_patient_in          => rec_in.id_patient,
            id_institution_in      => rec_in.id_institution,
            id_vaccine_in          => rec_in.id_vaccine,
            id_professional_in     => rec_in.id_professional,
            flg_take_type_in       => rec_in.flg_take_type,
            lab_in                 => rec_in.lab,
            lote_in                => rec_in.lote,
            notes_in               => rec_in.notes,
            tuberculin_type_in     => rec_in.tuberculin_type,
            dt_pat_vaccine_tstz_in => rec_in.dt_pat_vaccine_tstz,
            dt_take_tstz_in        => rec_in.dt_take_tstz,
            id_episode_in          => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_pat_vaccine_in      IN pat_vaccine.id_pat_vaccine%TYPE,
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_vaccine_in      => id_pat_vaccine_in,
            id_patient_in          => id_patient_in,
            id_institution_in      => id_institution_in,
            id_vaccine_in          => id_vaccine_in,
            id_professional_in     => id_professional_in,
            flg_take_type_in       => flg_take_type_in,
            lab_in                 => lab_in,
            lote_in                => lote_in,
            notes_in               => notes_in,
            tuberculin_type_in     => tuberculin_type_in,
            dt_pat_vaccine_tstz_in => dt_pat_vaccine_tstz_in,
            dt_take_tstz_in        => dt_take_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_pat_vaccine_in      => id_pat_vaccine_in,
                id_patient_in          => id_patient_in,
                id_institution_in      => id_institution_in,
                id_vaccine_in          => id_vaccine_in,
                id_professional_in     => id_professional_in,
                flg_take_type_in       => flg_take_type_in,
                lab_in                 => lab_in,
                lote_in                => lote_in,
                notes_in               => notes_in,
                tuberculin_type_in     => tuberculin_type_in,
                dt_pat_vaccine_tstz_in => dt_pat_vaccine_tstz_in,
                dt_take_tstz_in        => dt_take_tstz_in,
                id_episode_in          => id_episode_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_pat_vaccine_in      IN pat_vaccine.id_pat_vaccine%TYPE,
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_pat_vaccine_in,
                id_patient_in,
                id_institution_in,
                id_vaccine_in,
                id_professional_in,
                flg_take_type_in,
                lab_in,
                lote_in,
                notes_in,
                tuberculin_type_in,
                dt_pat_vaccine_tstz_in,
                dt_take_tstz_in,
                id_episode_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pat_vaccine_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_pat_vaccine      id_pat_vaccine_cc;
        l_id_patient          id_patient_cc;
        l_id_institution      id_institution_cc;
        l_id_vaccine          id_vaccine_cc;
        l_id_professional     id_professional_cc;
        l_flg_take_type       flg_take_type_cc;
        l_lab                 lab_cc;
        l_lote                lote_cc;
        l_notes               notes_cc;
        l_tuberculin_type     tuberculin_type_cc;
        l_dt_pat_vaccine_tstz dt_pat_vaccine_tstz_cc;
        l_dt_take_tstz        dt_take_tstz_cc;
        l_id_episode          id_episode_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_pat_vaccine(i) := col_in(i).id_pat_vaccine;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_vaccine(i) := col_in(i).id_vaccine;
            l_id_professional(i) := col_in(i).id_professional;
            l_flg_take_type(i) := col_in(i).flg_take_type;
            l_lab(i) := col_in(i).lab;
            l_lote(i) := col_in(i).lote;
            l_notes(i) := col_in(i).notes;
            l_tuberculin_type(i) := col_in(i).tuberculin_type;
            l_dt_pat_vaccine_tstz(i) := col_in(i).dt_pat_vaccine_tstz;
            l_dt_take_tstz(i) := col_in(i).dt_take_tstz;
            l_id_episode(i) := col_in(i).id_episode;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_vaccine
                   SET id_patient          = nvl(l_id_patient(i), id_patient),
                       id_institution      = nvl(l_id_institution(i), id_institution),
                       id_vaccine          = nvl(l_id_vaccine(i), id_vaccine),
                       id_professional     = nvl(l_id_professional(i), id_professional),
                       flg_take_type       = nvl(l_flg_take_type(i), flg_take_type),
                       lab                 = nvl(l_lab(i), lab),
                       lote                = nvl(l_lote(i), lote),
                       notes               = nvl(l_notes(i), notes),
                       tuberculin_type     = nvl(l_tuberculin_type(i), tuberculin_type),
                       dt_pat_vaccine_tstz = nvl(l_dt_pat_vaccine_tstz(i), dt_pat_vaccine_tstz),
                       dt_take_tstz        = nvl(l_dt_take_tstz(i), dt_take_tstz),
                       id_episode          = nvl(l_id_episode(i), id_episode)
                 WHERE id_pat_vaccine = l_id_pat_vaccine(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_vaccine
                   SET id_patient          = l_id_patient(i),
                       id_institution      = l_id_institution(i),
                       id_vaccine          = l_id_vaccine(i),
                       id_professional     = l_id_professional(i),
                       flg_take_type       = l_flg_take_type(i),
                       lab                 = l_lab(i),
                       lote                = l_lote(i),
                       notes               = l_notes(i),
                       tuberculin_type     = l_tuberculin_type(i),
                       dt_pat_vaccine_tstz = l_dt_pat_vaccine_tstz(i),
                       dt_take_tstz        = l_dt_take_tstz(i),
                       id_episode          = l_id_episode(i)
                 WHERE id_pat_vaccine = l_id_pat_vaccine(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pat_vaccine_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PAT_VACCINE
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PAT_VACCINE
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_VACCINE set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PAT_VACCINE set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_pat_vaccine_in IN pat_vaccine.id_pat_vaccine%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vaccine
         WHERE id_pat_vaccine = id_pat_vaccine_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_pat_vaccine_in IN pat_vaccine.id_pat_vaccine%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_pat_vaccine_in => id_pat_vaccine_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PAT_VACCINE
    PROCEDURE del_id_pat_vaccine
    (
        id_pat_vaccine_in IN pat_vaccine.id_pat_vaccine%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vaccine
         WHERE id_pat_vaccine = id_pat_vaccine_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_pat_vaccine;

    -- Delete all rows for primary key column ID_PAT_VACCINE
    PROCEDURE del_id_pat_vaccine
    (
        id_pat_vaccine_in IN pat_vaccine.id_pat_vaccine%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_pat_vaccine(id_pat_vaccine_in => id_pat_vaccine_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_id_pat_vaccine;

    PROCEDURE del_pve_epis_fk
    (
        id_episode_in   IN pat_vaccine.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vaccine
         WHERE id_episode = del_pve_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pve_epis_fk;

    PROCEDURE del_pve_epis_fk
    (
        id_episode_in   IN pat_vaccine.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pve_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pve_epis_fk;

    PROCEDURE del_pve_inst_fk
    (
        id_institution_in IN pat_vaccine.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vaccine
         WHERE id_institution = del_pve_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pve_inst_fk;

    PROCEDURE del_pve_inst_fk
    (
        id_institution_in IN pat_vaccine.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pve_inst_fk(id_institution_in => id_institution_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_pve_inst_fk;

    PROCEDURE del_pve_pat_fk
    (
        id_patient_in   IN pat_vaccine.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vaccine
         WHERE id_patient = del_pve_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pve_pat_fk;

    PROCEDURE del_pve_pat_fk
    (
        id_patient_in   IN pat_vaccine.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pve_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pve_pat_fk;

    PROCEDURE del_pve_prof_fk
    (
        id_professional_in IN pat_vaccine.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vaccine
         WHERE id_professional = del_pve_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pve_prof_fk;

    PROCEDURE del_pve_prof_fk
    (
        id_professional_in IN pat_vaccine.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pve_prof_fk(id_professional_in => id_professional_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_pve_prof_fk;

    PROCEDURE del_pve_vcc_fk
    (
        id_vaccine_in   IN pat_vaccine.id_vaccine%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vaccine
         WHERE id_vaccine = del_pve_vcc_fk.id_vaccine_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pve_vcc_fk;

    PROCEDURE del_pve_vcc_fk
    (
        id_vaccine_in   IN pat_vaccine.id_vaccine%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pve_vcc_fk(id_vaccine_in => id_vaccine_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pve_vcc_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PAT_VACCINE';
        ELSE
            RETURN 'DELETE FROM PAT_VACCINE WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACCINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACCINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pat_vaccine_inout IN OUT pat_vaccine%ROWTYPE) IS
    BEGIN
        pat_vaccine_inout.id_pat_vaccine      := NULL;
        pat_vaccine_inout.id_patient          := NULL;
        pat_vaccine_inout.id_institution      := NULL;
        pat_vaccine_inout.id_vaccine          := NULL;
        pat_vaccine_inout.id_professional     := NULL;
        pat_vaccine_inout.flg_take_type       := NULL;
        pat_vaccine_inout.lab                 := NULL;
        pat_vaccine_inout.lote                := NULL;
        pat_vaccine_inout.notes               := NULL;
        pat_vaccine_inout.tuberculin_type     := NULL;
        pat_vaccine_inout.dt_pat_vaccine_tstz := NULL;
        pat_vaccine_inout.dt_take_tstz        := NULL;
        pat_vaccine_inout.id_episode          := NULL;
    END initrec;

    FUNCTION initrec RETURN pat_vaccine%ROWTYPE IS
        l_pat_vaccine pat_vaccine%ROWTYPE;
    BEGIN
        RETURN l_pat_vaccine;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pat_vaccine_tc IS
        data pat_vaccine_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pat_vaccine
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pat_vaccine_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pat_vaccine_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pat_vaccine;
/
