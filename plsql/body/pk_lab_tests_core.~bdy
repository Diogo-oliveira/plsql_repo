CREATE OR REPLACE PACKAGE BODY pk_lab_tests_core IS

    FUNCTION create_lab_test_order
    (
        i_lang                    IN language.id_language%TYPE, --1
        i_prof                    IN profissional,
        i_patient                 IN patient.id_patient%TYPE,
        i_episode                 IN episode.id_episode%TYPE,
        i_analysis_req            IN analysis_req.id_analysis_req%TYPE, --5
        i_analysis_req_det        IN table_number,
        i_analysis_req_det_parent IN table_number,
        i_harvest                 IN harvest.id_harvest%TYPE,
        i_analysis                IN table_number,
        i_analysis_group          IN table_table_varchar, --10
        i_flg_type                IN table_varchar,
        i_dt_req                  IN table_varchar,
        i_flg_time                IN table_varchar,
        i_dt_begin                IN table_varchar,
        i_dt_begin_limit          IN table_varchar, --15
        i_episode_destination     IN table_number,
        i_order_recurrence        IN table_number,
        i_priority                IN table_varchar,
        i_flg_prn                 IN table_varchar,
        i_notes_prn               IN table_varchar, --20
        i_specimen                IN table_number,
        i_body_location           IN table_table_number,
        i_laterality              IN table_table_varchar,
        i_collection_room         IN table_number,
        i_notes                   IN table_varchar, --25
        i_notes_scheduler         IN table_varchar,
        i_notes_technician        IN table_varchar,
        i_notes_patient           IN table_varchar,
        i_diagnosis_notes         IN table_varchar,
        i_diagnosis               IN pk_edis_types.table_in_epis_diagnosis, --30
        i_exec_institution        IN table_number,
        i_clinical_purpose        IN table_number,
        i_clinical_purpose_notes  IN table_varchar,
        i_flg_col_inst            IN table_varchar,
        i_flg_fasting             IN table_varchar, --35
        i_lab_req                 IN table_number,
        i_prof_cc                 IN table_table_varchar,
        i_prof_bcc                IN table_table_varchar,
        i_codification            IN table_number,
        i_health_plan             IN table_number, --40
        i_exemption               IN table_number,
        i_prof_order              IN table_number,
        i_dt_order                IN table_varchar,
        i_order_type              IN table_number,
        i_clinical_question       IN table_table_number, --45
        i_response                IN table_table_varchar,
        i_clinical_question_notes IN table_table_varchar,
        i_clinical_decision_rule  IN table_number,
        i_flg_origin_req          IN analysis_req_det.flg_req_origin_module%TYPE DEFAULT 'D',
        i_task_dependency         IN table_number, --50
        i_flg_task_depending      IN table_varchar,
        i_episode_followup_app    IN table_number,
        i_schedule_followup_app   IN table_number,
        i_event_followup_app      IN table_number,
        i_test                    IN VARCHAR2, --55
        o_flg_show                OUT VARCHAR2,
        o_msg_title               OUT VARCHAR2,
        o_msg_req                 OUT VARCHAR2,
        o_button                  OUT VARCHAR2,
        o_analysis_req_array      OUT NOCOPY table_number,
        o_analysis_req_det_array  OUT NOCOPY table_number,
        o_analysis_req_par_array  OUT NOCOPY table_number,
        o_error                   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_continue BOOLEAN := TRUE;
    
        l_patient patient.id_patient%TYPE;
        l_visit   visit.id_visit%TYPE;
    
        l_desc_analysis     VARCHAR2(1000 CHAR);
        l_num_max_req_order sys_config.value%TYPE := pk_sysconfig.get_config('NUM_MAX_REQ_ORDER', i_prof);
    
        l_analysis table_number := table_number();
        l_specimen table_number := table_number();
    
        l_order_criteria        sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_CRITERIA', i_prof);
        l_order_limit           sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_LIMIT', i_prof);
        l_order_filter_interval sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_FILTER_INTERVAL',
                                                                                 i_prof);
        l_order_aggregate       sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_AGGREGATE', i_prof);
        l_order_exam_cat_parent sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_EXAM_CAT_PARENT',
                                                                                 i_prof);
    
        l_analysis_req_array     table_number := table_number();
        l_analysis_req_det_array table_number := table_number();
    
        l_analysis_order analysis_req.id_analysis_req%TYPE;
        l_dt_begin       VARCHAR2(100 CHAR);
        l_exam_cat       exam_cat.id_exam_cat%TYPE;
        l_room           room.id_room%TYPE;
    
        l_body_location table_number := table_number();
        l_laterality    table_varchar := table_varchar();
    
        l_prof_cc  table_varchar := table_varchar();
        l_prof_bcc table_varchar := table_varchar();
    
        l_clinical_question       table_number := table_number();
        l_response                table_varchar := table_varchar();
        l_clinical_question_notes table_varchar := table_varchar();
    
        l_count_out_reqs NUMBER := 0;
    
        TYPE t_record_analysis_req_map IS TABLE OF NUMBER INDEX BY VARCHAR2(200 CHAR);
        ibt_analysis_req_map t_record_analysis_req_map;
    
        l_analysis_req     analysis_req.id_analysis_req%TYPE;
        l_analysis_req_det analysis_req_det.id_analysis_req_det%TYPE;
        l_analysis_req_par table_number := table_number();
    
        l_order_recurrence         order_recurr_plan.id_order_recurr_plan%TYPE;
        l_order_recurrence_option  order_recurr_plan.id_order_recurr_option%TYPE;
        l_order_recurr_final_array table_number := table_number();
    
        l_order_plan      t_tbl_order_recurr_plan;
        l_order_plan_aux  t_tbl_order_recurr_plan;
        l_exec_to_process t_tbl_order_recurr_plan_sts;
    
        l_order_recurrence_prepare VARCHAR2(1 CHAR) := pk_lab_tests_constant.g_no;
    
        TYPE t_order_recurr_plan_map IS TABLE OF NUMBER INDEX BY VARCHAR2(200 CHAR);
        ibt_order_recurr_plan_map t_order_recurr_plan_map;
    
        CURSOR c_epis_soft IS
            SELECT pk_episode.get_soft_by_epis_type(e.id_epis_type, e.id_institution) id_software
              FROM episode e
             WHERE e.id_episode = i_episode;
    
        CURSOR c_alert_read(l_soft software.id_software%TYPE) IS
            SELECT sae.id_sys_alert_event, sae.id_record
              FROM sys_alert_event sae
             WHERE sae.id_sys_alert = 210
               AND sae.id_episode = i_episode
               AND sae.id_record = i_analysis_req
               AND sae.id_institution = i_prof.institution
               AND sae.id_software = l_soft
               AND EXISTS (SELECT 1
                      FROM sys_alert_read sar
                     WHERE sar.id_sys_alert_event = sae.id_sys_alert_event
                       AND sar.id_professional = sae.id_professional);
    
        l_epis_soft       c_epis_soft%ROWTYPE;
        l_alert_read      c_alert_read%ROWTYPE;
        l_alert_exists    NUMBER;
        l_sys_alert_event sys_alert_event%ROWTYPE;
        l_dt_alert        sys_alert_event.dt_record%TYPE;
        l_prof_writes     analysis_req.id_prof_writes%TYPE;
    
    BEGIN
    
        g_sysdate_char := pk_date_utils.date_send_tsz(i_lang, current_timestamp, i_prof);
    
        o_analysis_req_array     := table_number();
        o_analysis_req_det_array := table_number();
        o_analysis_req_par_array := table_number();
    
        IF i_episode IS NOT NULL
        THEN
            l_patient := pk_episode.get_id_patient(i_episode => i_episode);
        
            l_visit := pk_visit.get_visit(i_episode => i_episode, o_error => o_error);
        
            g_error := 'PATIENT / EPISODE DON''T MATCH';
            IF l_patient != i_patient
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        IF i_test = pk_lab_tests_constant.g_yes
        THEN
            -- Verificar se as análises já tinham sido requisitadas recentemente e se têm resultados
            g_error    := 'CALL TO GET_LAB_TEST_REQUEST';
            o_flg_show := pk_lab_tests_utils.get_lab_test_request(i_lang     => i_lang,
                                                                  i_prof     => i_prof,
                                                                  i_patient  => i_patient,
                                                                  i_analysis => i_analysis,
                                                                  o_msg_req  => o_msg_req,
                                                                  o_button   => o_button);
        
        END IF;
    
        IF l_continue
        THEN
            FOR i IN 1 .. i_analysis.count
            LOOP
                IF i_order_recurrence(i) IS NOT NULL
                   AND i_flg_origin_req != pk_alert_constant.g_task_origin_order_set
                THEN
                    BEGIN
                    
                        -- check if this order recurrence plan was already set as finished
                        l_order_recurrence := ibt_order_recurr_plan_map(i_order_recurrence(i));
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                        
                            -- set order recurrence plan as finished
                            g_error := 'CALL PK_ORDER_RECURRENCE_API_DB.SET_ORDER_RECURR_PLAN';
                            IF NOT
                                pk_order_recurrence_api_db.set_order_recurr_plan(i_lang                    => i_lang,
                                                                                 i_prof                    => i_prof,
                                                                                 i_order_recurr_plan       => i_order_recurrence(i),
                                                                                 o_order_recurr_option     => l_order_recurrence_option,
                                                                                 o_final_order_recurr_plan => l_order_recurrence,
                                                                                 o_error                   => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        
                            -- add new order recurrence plan to map collection
                            ibt_order_recurr_plan_map(i_order_recurrence(i)) := l_order_recurrence;
                        
                            IF l_order_recurrence IS NOT NULL
                            THEN
                                l_order_recurr_final_array.extend;
                                l_order_recurr_final_array(l_order_recurr_final_array.count) := l_order_recurrence;
                            END IF;
                        
                            IF l_order_recurr_final_array IS NOT NULL
                               OR l_order_recurr_final_array.count > 0
                            THEN
                                g_error := 'CALL PK_ORDER_RECURRENCE_API_DB.PREPARE_ORDER_RECURR_PLAN';
                                IF NOT
                                    pk_order_recurrence_api_db.prepare_order_recurr_plan(i_lang            => i_lang,
                                                                                         i_prof            => i_prof,
                                                                                         i_order_plan      => l_order_recurr_final_array,
                                                                                         o_order_plan_exec => l_order_plan,
                                                                                         o_error           => o_error)
                                THEN
                                    RAISE g_other_exception;
                                END IF;
                            
                                l_order_recurrence_prepare := pk_lab_tests_constant.g_yes;
                            
                                -- removing first element (first req was already created)
                                SELECT t_rec_order_recurr_plan(t.id_order_recurrence_plan,
                                                               t.exec_number,
                                                               t.exec_timestamp)
                                  BULK COLLECT
                                  INTO l_order_plan_aux
                                  FROM TABLE(CAST(l_order_plan AS t_tbl_order_recurr_plan)) t
                                 WHERE t.exec_number > 1;
                            END IF;
                        
                            IF i_test = pk_lab_tests_constant.g_yes
                               AND (o_flg_show = pk_lab_tests_constant.g_yes OR
                               l_order_plan_aux.count > l_num_max_req_order)
                            THEN
                                IF l_order_plan_aux.count > l_num_max_req_order
                                THEN
                                
                                    SELECT CASE
                                               WHEN i_flg_type(i) = 'A' THEN
                                                pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                         i_prof,
                                                                                         pk_lab_tests_constant.g_analysis_alias,
                                                                                         'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                         i_analysis(i),
                                                                                         'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                         i_specimen(i),
                                                                                         NULL)
                                               ELSE
                                                pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                         i_prof,
                                                                                         pk_lab_tests_constant.g_analysis_group_alias,
                                                                                         'ANALYSIS_GROUP.CODE_ANALYSIS_GROUP.' ||
                                                                                         i_analysis(i),
                                                                                         NULL,
                                                                                         NULL)
                                           END
                                      INTO l_desc_analysis
                                      FROM dual;
                                
                                    o_flg_show  := pk_lab_tests_constant.g_yes;
                                    o_msg_title := pk_message.get_message(i_lang, 'COMMON_M080');
                                    o_msg_req   := REPLACE(pk_message.get_message(i_lang, 'MCDT_T009'),
                                                           '@1',
                                                           l_num_max_req_order);
                                    o_msg_req   := REPLACE(o_msg_req, '@2', l_desc_analysis);
                                END IF;
                            
                                RETURN TRUE;
                            
                            END IF;
                    END;
                
                ELSIF i_order_recurrence(i) IS NOT NULL
                      AND i_flg_origin_req = pk_alert_constant.g_task_origin_order_set
                THEN
                    l_order_recurrence := i_order_recurrence(i);
                END IF;
            
                l_analysis := table_number();
                l_specimen := table_number();
                IF i_flg_type(i) = 'A'
                THEN
                    l_analysis.extend;
                    l_analysis(1) := i_analysis(i);
                
                    l_specimen.extend;
                    l_specimen(1) := i_specimen(i);
                ELSE
                    IF i_analysis_group(i).count > 0
                    THEN
                        FOR j IN i_analysis_group(i).first .. i_analysis_group(i).last
                        LOOP
                            l_analysis.extend;
                            l_analysis(j) := pk_utils.str_token(i_analysis_group(i) (j), 1, '|');
                        
                            l_specimen.extend;
                            l_specimen(j) := pk_utils.str_token(i_analysis_group(i) (j), 2, '|');
                        END LOOP;
                    END IF;
                END IF;
            
                l_body_location := table_number();
                IF i_body_location(i).count > 0
                THEN
                    FOR j IN i_body_location(i).first .. i_body_location(i).last
                    LOOP
                        l_body_location.extend;
                        l_body_location(j) := i_body_location(i) (j);
                    END LOOP;
                END IF;
            
                l_laterality := table_varchar();
                IF i_laterality(i).count > 0
                THEN
                    FOR j IN i_laterality(i).first .. i_laterality(i).last
                    LOOP
                        l_laterality.extend;
                        l_laterality(j) := i_laterality(i) (j);
                    END LOOP;
                END IF;
            
                l_prof_cc := table_varchar();
                IF i_prof_cc(i).count > 0
                THEN
                    FOR j IN i_prof_cc(i).first .. i_prof_cc(i).last
                    LOOP
                        l_prof_cc.extend;
                        l_prof_cc(j) := i_prof_cc(i) (j);
                    END LOOP;
                END IF;
            
                l_prof_bcc := table_varchar();
                IF i_prof_bcc(i).count > 0
                THEN
                    FOR j IN i_prof_bcc(i).first .. i_prof_bcc(i).last
                    LOOP
                        l_prof_bcc.extend;
                        l_prof_bcc(j) := i_prof_bcc(i) (j);
                    END LOOP;
                END IF;
            
                l_clinical_question := table_number();
                IF i_clinical_question(i).count > 0
                THEN
                    FOR j IN i_clinical_question(i).first .. i_clinical_question(i).last
                    LOOP
                        l_clinical_question.extend;
                        l_clinical_question(j) := i_clinical_question(i) (j);
                    END LOOP;
                END IF;
            
                l_response := table_varchar();
                IF i_response(i).count > 0
                THEN
                    FOR j IN i_response(i).first .. i_response(i).last
                    LOOP
                        l_response.extend;
                        l_response(j) := i_response(i) (j);
                    END LOOP;
                END IF;
            
                l_clinical_question_notes := table_varchar();
                IF i_clinical_question_notes(i).count > 0
                THEN
                    FOR j IN i_clinical_question_notes(i).first .. i_clinical_question_notes(i).last
                    LOOP
                        l_clinical_question_notes.extend;
                        l_clinical_question_notes(j) := i_clinical_question_notes(i) (j);
                    END LOOP;
                END IF;
            
                FOR j IN 1 .. l_analysis.count
                LOOP
                    IF i_flg_origin_req != pk_alert_constant.g_task_origin_order_set
                    THEN
                        IF l_analysis_req IS NULL
                        THEN
                            IF l_order_aggregate = pk_lab_tests_constant.g_yes
                            THEN
                                g_error := 'Selects available requests';
                                SELECT ar.id_analysis_req, ard.id_analysis_req_det
                                  BULK COLLECT
                                  INTO l_analysis_req_array, l_analysis_req_det_array
                                  FROM analysis_req ar, analysis_req_det ard
                                 WHERE ar.id_patient = i_patient
                                   AND ar.id_visit = l_visit
                                   AND ard.id_analysis_req = ar.id_analysis_req
                                   AND ar.flg_time != pk_lab_tests_constant.g_flg_time_r
                                   AND ar.flg_status IN (pk_lab_tests_constant.g_analysis_sched,
                                                         pk_lab_tests_constant.g_analysis_pending,
                                                         pk_lab_tests_constant.g_analysis_tosched,
                                                         pk_lab_tests_constant.g_analysis_req,
                                                         pk_lab_tests_constant.g_analysis_sos,
                                                         pk_lab_tests_constant.g_analysis_exterior)
                                   AND ((instr(l_order_criteria, 'D') != 0 AND
                                       (nvl(pk_date_utils.add_days_to_tstz(ard.dt_target_tstz,
                                                                             l_order_filter_interval),
                                              g_sysdate_tstz) >=
                                       pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin(i), NULL)) AND
                                       (nvl(pk_date_utils.add_days_to_tstz(ard.dt_target_tstz,
                                                                             l_order_filter_interval * -1),
                                              g_sysdate_tstz) <=
                                       pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin(i), NULL))) OR
                                       (instr(l_order_criteria, 'D') = 0 AND
                                       nvl(ard.dt_target_tstz, g_sysdate_tstz) >=
                                       pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin(i), NULL)))
                                 ORDER BY ar.dt_begin_tstz DESC;
                            END IF;
                        
                            IF i_analysis_req IS NULL
                               AND l_analysis_req_det_array.count > 0
                            THEN
                                l_analysis_req := -1;
                            ELSE
                                l_analysis_req := i_analysis_req;
                            END IF;
                        END IF;
                    
                        IF l_analysis_req IS NULL
                        THEN
                            l_analysis_req := ts_analysis_req.next_key();
                        ELSE
                            IF i_analysis_req IS NOT NULL
                            THEN
                                l_analysis_req := i_analysis_req;
                            
                                SELECT pk_date_utils.date_send_tsz(i_lang, ar.dt_begin_tstz, i_prof)
                                  INTO l_dt_begin
                                  FROM analysis_req ar
                                 WHERE ar.id_analysis_req = i_analysis_req;
                            
                            ELSE
                                IF i_collection_room(i) IS NULL
                                   AND i_flg_col_inst(i) IS NULL
                                   AND instr(l_order_criteria, 'R') != 0
                                THEN
                                    g_error := 'GET LAB ROOM';
                                    SELECT ar.id_room
                                      INTO l_room
                                      FROM analysis_room ar, room r, department d
                                     WHERE ar.id_analysis = l_analysis(j)
                                       AND ar.id_sample_type = l_specimen(j)
                                       AND ar.flg_type = pk_lab_tests_constant.g_arm_flg_type_room_pat
                                       AND ar.flg_default = pk_lab_tests_constant.g_yes
                                       AND ar.id_institution = i_prof.institution
                                       AND ar.flg_available = pk_lab_tests_constant.g_available
                                       AND (ar.id_analysis_instit_soft IS NULL OR EXISTS
                                            (SELECT 1
                                               FROM analysis_instit_soft ais
                                              WHERE ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                AND ais.id_software = i_prof.software
                                                AND ais.id_institution = i_prof.institution
                                                AND ais.flg_available = pk_lab_tests_constant.g_available
                                                AND ais.id_analysis_instit_soft = ar.id_analysis_instit_soft))
                                       AND ar.id_room = r.id_room
                                       AND r.id_department = d.id_department
                                       AND d.id_institution = i_prof.institution;
                                ELSE
                                    l_room := i_collection_room(i);
                                END IF;
                            
                                g_error := 'GET LAB EXAM_CAT';
                                SELECT decode(l_order_exam_cat_parent,
                                              pk_lab_tests_constant.g_yes,
                                              (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                               i_prof,
                                                                                               ais.id_exam_cat)
                                                 FROM dual),
                                              ais.id_exam_cat) id_exam_cat
                                  INTO l_exam_cat
                                  FROM analysis_instit_soft ais
                                 WHERE ais.id_analysis = l_analysis(j)
                                   AND ais.id_sample_type = l_specimen(j)
                                   AND ais.id_institution = i_prof.institution
                                   AND ais.id_software = i_prof.software
                                   AND ais.flg_available = pk_lab_tests_constant.g_yes;
                            
                                IF i_dt_begin(i) < g_sysdate_char
                                THEN
                                    l_dt_begin := g_sysdate_char;
                                ELSE
                                    l_dt_begin := i_dt_begin(i);
                                END IF;
                            
                                BEGIN
                                    g_error := 'GET L_ANALYSIS_ORDER 1';
                                    SELECT a.id_analysis_req
                                      INTO l_analysis_order
                                      FROM (SELECT ard.id_analysis_req,
                                                   CASE
                                                        WHEN ard.dt_begin < g_sysdate_char THEN
                                                         g_sysdate_char
                                                        ELSE
                                                         ard.dt_begin
                                                    END dt_begin
                                              FROM (SELECT ard.id_analysis_req,
                                                           pk_date_utils.trunc_insttimezone_str(i_prof,
                                                                                                ard.dt_target_tstz,
                                                                                                'MI') dt_begin
                                                      FROM analysis_req_det ard
                                                     WHERE ard.id_analysis_req_det IN
                                                           (SELECT /*+opt_estimate (table t rows=1)*/
                                                             *
                                                              FROM TABLE(o_analysis_req_det_array) t
                                                            UNION
                                                            SELECT /*+opt_estimate (table t1 rows=2)*/
                                                             *
                                                              FROM TABLE(l_analysis_req_det_array) t1)) ard,
                                                   (SELECT first_value(ard.id_analysis_req) over(ORDER BY ard.dt_target_tstz) id_analysis_req
                                                      FROM analysis_req_det ard
                                                     WHERE ard.id_analysis_req IN
                                                           (SELECT /*+opt_estimate (table t rows=1)*/
                                                             *
                                                              FROM TABLE(o_analysis_req_array) t
                                                            UNION
                                                            SELECT /*+opt_estimate (table t1 rows=2)*/
                                                             *
                                                              FROM TABLE(l_analysis_req_array) t1)
                                                       AND ard.flg_time_harvest = i_flg_time(i)
                                                       AND ard.flg_urgency = i_priority(i)
                                                       AND (ard.id_exec_institution = i_exec_institution(i) OR
                                                           (ard.id_exec_institution IS NULL AND
                                                           i_exec_institution(i) IS NULL))
                                                       AND ((ard.flg_status = pk_lab_tests_constant.g_analysis_sos AND
                                                           i_flg_prn(i) = pk_lab_tests_constant.g_yes) OR
                                                           (ard.flg_status != pk_lab_tests_constant.g_analysis_sos AND
                                                           i_flg_prn(i) = pk_lab_tests_constant.g_no))
                                                       AND ((ard.id_sample_type = l_specimen(j) AND
                                                           instr(l_order_criteria, 'S') != 0) OR
                                                           instr(l_order_criteria, 'S') = 0)
                                                       AND ((decode(l_order_exam_cat_parent,
                                                                    pk_lab_tests_constant.g_yes,
                                                                    (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                     i_prof,
                                                                                                                     ard.id_exam_cat)
                                                                       FROM dual),
                                                                    ard.id_exam_cat) = l_exam_cat AND
                                                           instr(l_order_criteria, 'C') != 0) OR
                                                           instr(l_order_criteria, 'C') = 0)
                                                       AND (((l_room IS NOT NULL AND ard.id_room = l_room AND
                                                           instr(l_order_criteria, 'R') != 0) OR
                                                           (l_room IS NULL AND ard.flg_col_inst = i_flg_col_inst(i) AND
                                                           instr(l_order_criteria, 'R') != 0)) OR
                                                           instr(l_order_criteria, 'R') = 0) HAVING
                                                     l_order_limit = 0
                                                        OR COUNT(*) < l_order_limit
                                                     GROUP BY ard.id_analysis_req, ard.dt_target_tstz) ar
                                             WHERE ard.id_analysis_req = ar.id_analysis_req) a
                                     WHERE ((l_dt_begin IS NOT NULL AND l_order_aggregate = pk_lab_tests_constant.g_no AND
                                           a.dt_begin = l_dt_begin) OR
                                           (l_dt_begin IS NOT NULL AND l_order_aggregate = pk_lab_tests_constant.g_yes) OR
                                           (l_dt_begin IS NULL AND i_flg_time(i) != pk_lab_tests_constant.g_flg_time_e))
                                       AND rownum = 1;
                                
                                    l_analysis_req := l_analysis_order;
                                
                                EXCEPTION
                                    WHEN no_data_found THEN
                                        IF i_flg_type(i) = 'A'
                                        THEN
                                            l_analysis_req := ts_analysis_req.next_key();
                                        ELSE
                                            BEGIN
                                                g_error := 'GET L_ANALYSIS_ORDER 2';
                                                SELECT id_analysis_req
                                                  INTO l_analysis_order
                                                  FROM (SELECT first_value(ard.id_analysis_req) over(ORDER BY ard.id_analysis_req DESC) id_analysis_req
                                                          FROM analysis_req_det ard
                                                         WHERE ard.id_analysis_req_det IN
                                                               (SELECT /*+opt_estimate (table t rows=1)*/
                                                                 *
                                                                  FROM TABLE(o_analysis_req_det_array) t)
                                                           AND ard.id_analysis_group = i_analysis(i) HAVING
                                                         l_order_limit = 0
                                                            OR COUNT(*) < l_order_limit
                                                         GROUP BY ard.id_analysis_req) t
                                                 WHERE rownum = 1;
                                            
                                                l_analysis_req := l_analysis_order;
                                            
                                            EXCEPTION
                                                WHEN no_data_found THEN
                                                    l_analysis_req := ts_analysis_req.next_key();
                                            END;
                                        END IF;
                                END;
                            END IF;
                        END IF;
                    ELSE
                        IF i_flg_type(i) = 'A'
                        THEN
                            l_analysis_req := NULL;
                        ELSE
                            BEGIN
                                g_error := 'GET L_ANALYSIS_ORDER 3';
                                SELECT id_analysis_req
                                  INTO l_analysis_order
                                  FROM (SELECT first_value(ard.id_analysis_req) over(ORDER BY ard.id_analysis_req DESC) id_analysis_req
                                          FROM analysis_req_det ard
                                         WHERE ard.id_analysis_req_det IN
                                               (SELECT /*+opt_estimate (table t rows=1)*/
                                                 *
                                                  FROM TABLE(o_analysis_req_det_array) t)
                                           AND ard.id_analysis_group = i_analysis(i)
                                         GROUP BY ard.id_analysis_req) t
                                 WHERE rownum = 1;
                            
                                l_analysis_req := l_analysis_order;
                            
                            EXCEPTION
                                WHEN no_data_found THEN
                                    l_analysis_req := NULL;
                            END;
                        END IF;
                    END IF;
                
                    IF NOT pk_lab_tests_core.create_lab_test_request(i_lang                    => i_lang,
                                                                i_prof                    => i_prof,
                                                                i_patient                 => i_patient,
                                                                i_episode                 => i_episode,
                                                                i_analysis_req            => l_analysis_req,
                                                                i_analysis_req_det        => CASE
                                                                                                 WHEN i_analysis_req_det IS NOT NULL
                                                                                                      AND i_analysis_req_det.count > 0 THEN
                                                                                                  i_analysis_req_det(i)
                                                                                                 ELSE
                                                                                                  NULL
                                                                                             END,
                                                                i_analysis_req_det_parent => CASE
                                                                                                 WHEN i_analysis_req_det_parent IS NOT NULL
                                                                                                      AND i_analysis_req_det_parent.count > 0 THEN
                                                                                                  i_analysis_req_det_parent(i)
                                                                                                 ELSE
                                                                                                  NULL
                                                                                             END,
                                                                i_harvest                 => i_harvest,
                                                                i_analysis                => l_analysis(j),
                                                                i_analysis_group          => CASE
                                                                                                 WHEN i_flg_type(i) = 'A' THEN
                                                                                                  NULL
                                                                                                 ELSE
                                                                                                  i_analysis(i)
                                                                                             END,
                                                                i_dt_req                  => CASE
                                                                                                 WHEN i_dt_req IS NOT NULL
                                                                                                      AND i_dt_req.count > 0 THEN
                                                                                                  i_dt_req(i)
                                                                                                 ELSE
                                                                                                  NULL
                                                                                             END,
                                                                i_flg_time                => i_flg_time(i),
                                                                i_dt_begin                => nvl(l_dt_begin, i_dt_begin(i)),
                                                                i_dt_begin_limit          => i_dt_begin_limit(i),
                                                                i_episode_destination     => i_episode_destination(i),
                                                                i_order_recurrence        => l_order_recurrence,
                                                                i_priority                => i_priority(i),
                                                                i_flg_prn                 => i_flg_prn(i),
                                                                i_notes_prn               => i_notes_prn(i),
                                                                i_specimen                => l_specimen(j),
                                                                i_body_location           => l_body_location,
                                                                i_laterality              => l_laterality,
                                                                i_collection_room         => i_collection_room(i),
                                                                i_notes                   => i_notes(i),
                                                                i_notes_scheduler         => i_notes_scheduler(i),
                                                                i_notes_technician        => i_notes_technician(i),
                                                                i_notes_patient           => i_notes_patient(i),
                                                                i_diagnosis_notes         => CASE
                                                                                                 WHEN i_diagnosis_notes.exists(i) THEN
                                                                                                  i_diagnosis_notes(i)
                                                                                                 ELSE
                                                                                                  NULL
                                                                                             END,
                                                                i_diagnosis               => CASE
                                                                                                 WHEN i_diagnosis IS NOT NULL
                                                                                                      AND i_diagnosis.count > 0 THEN
                                                                                                  i_diagnosis(i)
                                                                                                 ELSE
                                                                                                  NULL
                                                                                             END,
                                                                i_exec_institution        => i_exec_institution(i),
                                                                i_clinical_purpose        => i_clinical_purpose(i),
                                                                i_clinical_purpose_notes  => i_clinical_purpose_notes(i),
                                                                i_flg_col_inst            => i_flg_col_inst(i),
                                                                i_flg_fasting             => i_flg_fasting(i),
                                                                i_lab_req                 => i_lab_req(i),
                                                                i_prof_cc                 => l_prof_cc,
                                                                i_prof_bcc                => l_prof_bcc,
                                                                i_codification            => i_codification(i),
                                                                i_health_plan             => i_health_plan(i),
                                                                i_exemption               => i_exemption(i),
                                                                i_prof_order              => i_prof_order(i),
                                                                i_dt_order                => i_dt_order(i),
                                                                i_order_type              => i_order_type(i),
                                                                i_clinical_question       => l_clinical_question,
                                                                i_response                => l_response,
                                                                i_clinical_question_notes => l_clinical_question_notes,
                                                                i_clinical_decision_rule  => i_clinical_decision_rule(i),
                                                                i_flg_origin_req          => i_flg_origin_req,
                                                                i_task_dependency         => i_task_dependency(i),
                                                                i_flg_task_depending      => i_flg_task_depending(i),
                                                                i_episode_followup_app    => i_episode_followup_app(i),
                                                                i_schedule_followup_app   => i_schedule_followup_app(i),
                                                                i_event_followup_app      => i_event_followup_app(i),
                                                                o_analysis_req            => l_analysis_req,
                                                                o_analysis_req_det        => l_analysis_req_det,
                                                                o_analysis_req_par        => l_analysis_req_par,
                                                                o_error                   => o_error)
                    THEN
                        IF o_error.err_desc IS NOT NULL
                        THEN
                            g_error_code := o_error.ora_sqlcode;
                            g_error      := o_error.ora_sqlerrm;
                        
                            RAISE g_user_exception;
                        ELSE
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                
                    -- check if analysis_req not exists
                    g_error := 'OUT VARIABLES';
                    IF NOT ibt_analysis_req_map.exists(to_char(l_analysis_req))
                    THEN
                        o_analysis_req_array.extend;
                        l_count_out_reqs := l_count_out_reqs + 1;
                    
                        -- set mapping between analysis_req and its position in the output array
                        ibt_analysis_req_map(to_char(l_analysis_req)) := l_count_out_reqs;
                    
                        -- set analysis_req output 
                        o_analysis_req_array(l_count_out_reqs) := l_analysis_req;
                    END IF;
                
                    o_analysis_req_det_array.extend;
                    o_analysis_req_det_array(o_analysis_req_det_array.count) := l_analysis_req_det;
                
                    FOR j IN 1 .. l_analysis_req_par.count
                    LOOP
                        o_analysis_req_par_array.extend;
                        o_analysis_req_par_array(o_analysis_req_par_array.count) := l_analysis_req_par(j);
                    END LOOP;
                END LOOP;
            END LOOP;
        
            IF l_order_recurr_final_array IS NOT NULL
               OR l_order_recurr_final_array.count > 0
            THEN
                IF l_order_recurrence_prepare = pk_lab_tests_constant.g_no
                THEN
                    g_error := 'CALL PK_ORDER_RECURRENCE_API_DB.PREPARE_ORDER_RECURR_PLAN';
                    IF NOT pk_order_recurrence_api_db.prepare_order_recurr_plan(i_lang            => i_lang,
                                                                                i_prof            => i_prof,
                                                                                i_order_plan      => l_order_recurr_final_array,
                                                                                o_order_plan_exec => l_order_plan,
                                                                                o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    -- removing first element (first req was already created)
                    SELECT t_rec_order_recurr_plan(t.id_order_recurrence_plan, t.exec_number, t.exec_timestamp)
                      BULK COLLECT
                      INTO l_order_plan_aux
                      FROM TABLE(CAST(l_order_plan AS t_tbl_order_recurr_plan)) t
                     WHERE t.exec_number > 1;
                
                    l_order_recurrence_prepare := pk_lab_tests_constant.g_yes;
                END IF;
            
                g_error := 'CALL PK_LAB_TESTS_CORE.CREATE_LAB_TEST_RECURRENCE';
                IF NOT pk_lab_tests_core.create_lab_test_recurrence(i_lang            => i_lang,
                                                                    i_prof            => i_prof,
                                                                    i_exec_tab        => l_order_plan_aux,
                                                                    o_exec_to_process => l_exec_to_process,
                                                                    o_error           => o_error)
                THEN
                    IF o_error.err_desc IS NOT NULL
                    THEN
                        g_error_code := o_error.ora_sqlcode;
                        g_error      := o_error.ora_sqlerrm;
                    
                        RAISE g_user_exception;
                    ELSE
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        
            IF i_analysis_req IS NOT NULL
            THEN
                g_error := 'GET EPISODE SOFTWARE';
                OPEN c_epis_soft;
                FETCH c_epis_soft
                    INTO l_epis_soft;
                CLOSE c_epis_soft;
            
                g_error := 'CHECK IF SYS_ALERT IS READ';
                OPEN c_alert_read(l_epis_soft.id_software);
                FETCH c_alert_read
                    INTO l_alert_read;
                g_found := c_alert_read%FOUND;
                CLOSE c_alert_read;
            
                IF g_found
                THEN
                    g_error := 'DELETE SYS_ALERT_READ';
                    IF NOT pk_alerts.delete_sys_alert_event(i_lang         => i_lang,
                                                            i_prof         => i_prof,
                                                            i_id_sys_alert => 210,
                                                            i_id_record    => l_alert_read.id_record,
                                                            o_error        => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                g_error := 'CHECK IF SYS_ALERT EXISTS';
                BEGIN
                    SELECT 1
                      INTO l_alert_exists
                      FROM sys_alert_event sae
                     WHERE sae.id_sys_alert = 210
                       AND sae.id_episode = i_episode
                       AND sae.id_record = i_analysis_req
                       AND sae.id_institution = i_prof.institution
                       AND sae.id_software = l_epis_soft.id_software
                       AND rownum = 1;
                EXCEPTION
                    WHEN no_data_found THEN
                        l_alert_exists := 0;
                END;
            
                IF l_alert_exists = 0
                THEN
                    l_sys_alert_event.id_sys_alert    := 210;
                    l_sys_alert_event.id_professional := l_prof_writes;
                    l_sys_alert_event.id_institution  := i_prof.institution;
                    l_sys_alert_event.id_software     := l_epis_soft.id_software;
                    l_sys_alert_event.id_episode      := i_episode;
                    l_sys_alert_event.id_record       := i_analysis_req;
                    l_sys_alert_event.replace1        := i_analysis_req;
                    l_sys_alert_event.dt_record       := l_dt_alert;
                
                    g_error := 'INSERT INTO SYS_ALERT_EVENT';
                    IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            i_flg_type_dest   => 'C',
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              g_error_code,
                                              g_error,
                                              '',
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_LAB_TEST_ORDER',
                                              'U',
                                              '',
                                              o_error);
        
            o_analysis_req_array     := table_number();
            o_analysis_req_det_array := table_number();
            o_analysis_req_par_array := table_number();
        
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_LAB_TEST_ORDER',
                                              o_error);
            RETURN FALSE;
    END create_lab_test_order;

    FUNCTION create_lab_test_request
    (
        i_lang                    IN language.id_language%TYPE, --1
        i_prof                    IN profissional,
        i_patient                 IN patient.id_patient%TYPE,
        i_episode                 IN episode.id_episode%TYPE,
        i_analysis_req            IN analysis_req.id_analysis_req%TYPE, --5
        i_analysis_req_det        IN analysis_req_det.id_analysis_req_det%TYPE,
        i_analysis_req_det_parent IN analysis_req_det.id_ard_parent%TYPE,
        i_harvest                 IN harvest.id_harvest%TYPE,
        i_analysis                IN analysis.id_analysis%TYPE,
        i_analysis_group          IN analysis_group.id_analysis_group%TYPE, --10
        i_dt_req                  IN VARCHAR2,
        i_flg_time                IN analysis_req_det.flg_time_harvest%TYPE,
        i_dt_begin                IN VARCHAR2,
        i_dt_begin_limit          IN VARCHAR2,
        i_episode_destination     IN analysis_req_det.id_episode_destination%TYPE DEFAULT NULL, --15
        i_order_recurrence        IN analysis_req_det.id_order_recurrence%TYPE,
        i_priority                IN analysis_req_det.flg_urgency%TYPE,
        i_flg_prn                 IN analysis_req_det.flg_prn%TYPE,
        i_notes_prn               IN analysis_req_det.notes_prn%TYPE,
        i_specimen                IN analysis_req_det.id_sample_type%TYPE, --20
        i_body_location           IN table_number,
        i_laterality              IN table_varchar,
        i_collection_room         IN analysis_req_det.id_room%TYPE,
        i_notes                   IN analysis_req_det.notes%TYPE,
        i_notes_scheduler         IN analysis_req_det.notes_scheduler%TYPE, --25
        i_notes_technician        IN analysis_req_det.notes_tech%TYPE,
        i_notes_patient           IN analysis_req_det.notes_patient%TYPE,
        i_diagnosis_notes         IN analysis_req_det.diagnosis_notes%TYPE,
        i_diagnosis               IN pk_edis_types.rec_in_epis_diagnosis,
        i_exec_institution        IN analysis_req_det.id_exec_institution%TYPE, --30
        i_clinical_purpose        IN analysis_req_det.id_clinical_purpose%TYPE,
        i_clinical_purpose_notes  IN analysis_req_det.clinical_purpose_notes%TYPE,
        i_flg_col_inst            IN analysis_req_det.flg_col_inst%TYPE,
        i_flg_fasting             IN analysis_req_det.flg_fasting%TYPE,
        i_lab_req                 IN analysis_req_det.id_room_req%TYPE, --35
        i_prof_cc                 IN table_varchar,
        i_prof_bcc                IN table_varchar,
        i_codification            IN codification.id_codification%TYPE,
        i_health_plan             IN analysis_req_det.id_pat_health_plan%TYPE,
        i_exemption               IN analysis_req_det.id_pat_exemption%TYPE, --40
        i_prof_order              IN co_sign.id_prof_ordered_by%TYPE,
        i_dt_order                IN VARCHAR2,
        i_order_type              IN co_sign.id_order_type%TYPE,
        i_clinical_question       IN table_number,
        i_response                IN table_varchar, --45
        i_clinical_question_notes IN table_varchar,
        i_clinical_decision_rule  IN analysis_req_det.id_cdr%TYPE,
        i_flg_origin_req          IN analysis_req_det.flg_req_origin_module%TYPE DEFAULT 'D',
        i_task_dependency         IN analysis_req_det.id_task_dependency%TYPE DEFAULT NULL,
        i_flg_task_depending      IN VARCHAR2 DEFAULT pk_alert_constant.g_no, --50
        i_episode_followup_app    IN episode.id_episode%TYPE DEFAULT NULL,
        i_schedule_followup_app   IN schedule.id_schedule%TYPE DEFAULT NULL,
        i_event_followup_app      IN consult_req.id_consult_req%TYPE DEFAULT NULL,
        o_analysis_req            OUT analysis_req.id_analysis_req%TYPE,
        o_analysis_req_det        OUT analysis_req_det.id_analysis_req_det%TYPE,
        o_analysis_req_par        OUT NOCOPY table_number,
        o_error                   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_analysis_req IS
            SELECT ar.*
              FROM analysis_req ar
             WHERE ar.id_analysis_req = i_analysis_req;
    
        CURSOR c_lab IS
            SELECT ar.id_room
              FROM analysis_room ar, room r, department d
             WHERE ar.id_analysis = i_analysis
               AND ar.id_sample_type = i_specimen
               AND ar.flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
               AND ar.flg_default = pk_lab_tests_constant.g_yes
               AND ar.id_institution = i_prof.institution
               AND ar.flg_available = pk_lab_tests_constant.g_available
               AND (ar.id_analysis_instit_soft IS NULL OR EXISTS
                    (SELECT 1
                       FROM analysis_instit_soft ais
                      WHERE ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                        AND ais.id_software = i_prof.software
                        AND ais.id_institution = i_prof.institution
                        AND ais.flg_available = pk_lab_tests_constant.g_available
                        AND ais.id_analysis_instit_soft = ar.id_analysis_instit_soft))
               AND ar.id_room = r.id_room
               AND r.id_department = d.id_department
               AND d.id_institution = i_prof.institution;
    
        CURSOR c_analysis_instit_soft IS
            SELECT ais.id_exam_cat, ais.flg_execute, ais.flg_harvest
              FROM analysis_instit_soft ais
             WHERE ais.id_analysis = i_analysis
               AND ais.id_sample_type = i_specimen
               AND ais.id_software = i_prof.software
               AND ais.id_institution = i_prof.institution
               AND ais.flg_available = pk_lab_tests_constant.g_available;
    
        TYPE request_movement IS RECORD(
            id_room room.id_room%TYPE,
            id_mov  analysis_req_det.id_movement%TYPE);
    
        TYPE rm IS TABLE OF request_movement INDEX BY BINARY_INTEGER;
        req_mov rm;
        k       NUMBER := 0;
    
        l_harvest_pending_req sys_config.value%TYPE := pk_sysconfig.get_config('HARVEST_PENDING_REQ', i_prof);
    
        l_analysis_req c_analysis_req%ROWTYPE;
    
        l_analysis_instit_soft c_analysis_instit_soft%ROWTYPE;
    
        l_next_req analysis_req.id_analysis_req%TYPE;
        l_next_det analysis_req_det.id_analysis_req_det%TYPE;
    
        l_status     analysis_req.flg_status%TYPE;
        l_status_det analysis_req_det.flg_status%TYPE;
    
        l_dt_req          analysis_req.dt_req_tstz%TYPE;
        l_dt_begin        analysis_req.dt_begin_tstz%TYPE;
        l_dt_schedule     analysis_req_det.dt_schedule%TYPE;
        l_dt_final_target analysis_req_det.dt_final_target_tstz%TYPE;
    
        l_analysis_codification   analysis_codification.id_analysis_codification%TYPE;
        l_id_combination_spec     combination_spec.id_combination_spec%TYPE;
        l_task_dependency_from    tde_task_dependency.id_task_dependency%TYPE;
        l_task_dependency_to      tde_task_dependency.id_task_dependency%TYPE;
        l_create_epis_combination VARCHAR2(1 CHAR) := pk_alert_constant.g_no;
        l_dt_first_analysis_req   VARCHAR2(50 CHAR);
        l_id_co_sign              co_sign.id_co_sign%TYPE;
        l_id_co_sign_hist         co_sign_hist.id_co_sign_hist%TYPE;
        l_analysis_result_send    analysis_result_send.id_analysis_result_send%TYPE;
        l_id_mov                  movement.id_movement%TYPE;
        l_req_mov                 BOOLEAN;
        l_room_req                room.id_room%TYPE;
        l_new_room                analysis_room.id_room%TYPE;
        l_flg_mov_pat             analysis_instit_soft.flg_mov_pat%TYPE;
        l_barcode                 analysis_req.barcode%TYPE;
        l_id_icnp_sug_interv      table_number;
        l_aux                     table_varchar2;
    
        l_flg_profile     profile_template.flg_profile%TYPE;
        l_sys_alert_event sys_alert_event%ROWTYPE;
    
        l_flg_show  VARCHAR2(1 CHAR);
        l_msg_text  VARCHAR2(1000 CHAR);
        l_msg_title VARCHAR2(1000 CHAR);
        l_button    VARCHAR2(6 CHAR);
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        l_dt_req          := nvl(pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_req, NULL), g_sysdate_tstz);
        l_dt_begin        := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin, NULL);
        l_dt_final_target := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin_limit, NULL);
    
        --Check if is necessary create task combinations    
        IF i_episode_followup_app IS NOT NULL
           OR i_schedule_followup_app IS NOT NULL
           OR i_event_followup_app IS NOT NULL
        THEN
            l_create_epis_combination := pk_alert_constant.g_yes;
        END IF;
    
        g_error := 'GET C_ANALYSIS_INSTIT_SOFT';
        OPEN c_analysis_instit_soft;
        FETCH c_analysis_instit_soft
            INTO l_analysis_instit_soft;
        g_found := c_analysis_instit_soft%FOUND;
        CLOSE c_analysis_instit_soft;
    
        IF NOT g_found
        THEN
            g_error := pk_message.get_message(i_lang, 'COMMON_M001') || chr(10) ||
                       'PK_LAB_TESTS.CREATE_LAB_TEST_REQUEST / i_analysis: ' || i_analysis || ' / i_analysis_group: ' ||
                       i_analysis_group || ' / i_specimen: ' || i_specimen;
            RAISE g_user_exception;
        END IF;
    
        g_error := 'GET STATUS';
        IF i_flg_time != pk_lab_tests_constant.g_flg_time_e
        THEN
            -- future exacution
            l_status                := pk_lab_tests_constant.g_analysis_pending;
            l_status_det            := pk_lab_tests_constant.g_analysis_pending;
            l_dt_first_analysis_req := NULL;
            l_dt_begin              := NULL;
        
            IF i_flg_time IN (pk_lab_tests_constant.g_flg_time_b, pk_lab_tests_constant.g_flg_time_d)
            THEN
                OPEN c_analysis_req;
                FETCH c_analysis_req
                    INTO l_analysis_req;
                g_found := c_analysis_req%FOUND;
                CLOSE c_analysis_req;
            
                IF NOT g_found
                   OR l_analysis_req.flg_status != pk_lab_tests_constant.g_analysis_sched
                THEN
                    IF i_prof.software != pk_sysconfig.get_config('SOFTWARE_ID_CARE', i_prof)
                    THEN
                        -- execution between appointments
                        l_status     := pk_lab_tests_constant.g_analysis_tosched;
                        l_status_det := pk_lab_tests_constant.g_analysis_tosched;
                        IF i_dt_begin IS NOT NULL
                        THEN
                            -- suggested scheduling
                            l_dt_begin    := NULL;
                            l_dt_schedule := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin, NULL);
                        ELSE
                            l_dt_begin    := NULL;
                            l_dt_schedule := NULL;
                        END IF;
                    ELSE
                        l_status     := pk_lab_tests_constant.g_analysis_tosched;
                        l_status_det := pk_lab_tests_constant.g_analysis_tosched;
                        l_dt_begin   := NULL;
                    END IF;
                ELSE
                    IF i_dt_begin IS NOT NULL
                    THEN
                        l_status     := l_analysis_req.flg_status;
                        l_status_det := l_analysis_req.flg_status;
                    
                        -- scheduling date
                        l_dt_begin := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin, NULL);
                    END IF;
                END IF;
            END IF;
        ELSE
            -- execution in the current episode
            IF i_episode IS NOT NULL
            THEN
                IF pk_sysconfig.get_config('REQ_NEXT_DAY', i_prof) = pk_lab_tests_constant.g_no
                THEN
                    IF pk_date_utils.trunc_insttimezone(i_prof, nvl(l_dt_begin, g_sysdate_tstz), 'DD') !=
                       pk_date_utils.trunc_insttimezone(i_prof, g_sysdate_tstz, 'DD')
                    THEN
                        g_error_code := 'ANALYSIS_M012';
                        g_error      := pk_message.get_message(i_lang, i_prof, 'ANALYSIS_M012');
                        RAISE g_user_exception;
                    END IF;
                END IF;
            END IF;
        
            IF nvl(l_dt_begin, g_sysdate_tstz) > g_sysdate_tstz
            THEN
                -- pending
                l_dt_first_analysis_req := pk_date_utils.date_send_tsz(i_lang, g_sysdate_tstz, i_prof);
            
                l_status     := pk_lab_tests_constant.g_analysis_pending;
                l_status_det := pk_lab_tests_constant.g_analysis_pending;
            ELSE
                OPEN c_analysis_req;
                FETCH c_analysis_req
                    INTO l_analysis_req;
                g_found := c_analysis_req%FOUND;
                CLOSE c_analysis_req;
            
                IF NOT g_found
                THEN
                    l_dt_begin              := nvl(pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin, NULL),
                                                   g_sysdate_tstz);
                    l_dt_first_analysis_req := pk_date_utils.date_send_tsz(i_lang, g_sysdate_tstz, i_prof);
                END IF;
            
                l_status     := pk_lab_tests_constant.g_analysis_req;
                l_status_det := pk_lab_tests_constant.g_analysis_req;
            END IF;
        END IF;
    
        IF (l_analysis_instit_soft.flg_execute = pk_lab_tests_constant.g_no AND
           (l_analysis_instit_soft.flg_harvest = pk_lab_tests_constant.g_no OR
           i_flg_col_inst = pk_lab_tests_constant.g_no))
           OR (i_exec_institution IS NOT NULL AND i_flg_col_inst = pk_lab_tests_constant.g_no)
        THEN
            l_status     := pk_lab_tests_constant.g_analysis_exterior;
            l_status_det := pk_lab_tests_constant.g_analysis_exterior;
        END IF;
    
        IF i_flg_task_depending = pk_lab_tests_constant.g_yes
        THEN
            l_status     := pk_lab_tests_constant.g_analysis_wtg_tde;
            l_status_det := pk_lab_tests_constant.g_analysis_wtg_tde;
        END IF;
    
        IF i_flg_prn = pk_lab_tests_constant.g_yes
        THEN
            IF (l_analysis_instit_soft.flg_execute = pk_lab_tests_constant.g_no AND
               (l_analysis_instit_soft.flg_harvest = pk_lab_tests_constant.g_no OR
               i_flg_col_inst = pk_lab_tests_constant.g_no))
               OR (i_exec_institution IS NOT NULL AND i_flg_col_inst = pk_lab_tests_constant.g_no)
            THEN
                l_status     := pk_lab_tests_constant.g_analysis_exterior;
                l_status_det := pk_lab_tests_constant.g_analysis_exterior;
            ELSE
                l_status     := pk_lab_tests_constant.g_analysis_sos;
                l_status_det := pk_lab_tests_constant.g_analysis_sos;
            END IF;
        END IF;
    
        IF i_flg_origin_req = pk_alert_constant.g_task_origin_order_set
        THEN
            l_status     := pk_lab_tests_constant.g_analysis_predefined;
            l_status_det := pk_lab_tests_constant.g_analysis_predefined;
        ELSIF i_flg_origin_req = pk_alert_constant.g_task_origin_cpoe
        THEN
            l_status     := pk_lab_tests_constant.g_analysis_draft;
            l_status_det := pk_lab_tests_constant.g_analysis_draft;
        END IF;
    
        OPEN c_analysis_req;
        FETCH c_analysis_req
            INTO l_analysis_req;
        g_found := c_analysis_req%FOUND;
        CLOSE c_analysis_req;
    
        IF i_analysis_req IS NOT NULL
        THEN
            l_next_req     := i_analysis_req;
            o_analysis_req := i_analysis_req;
        ELSE
            l_next_req := ts_analysis_req.next_key();
        END IF;
    
        IF NOT g_found
        THEN
            --New validation for ADW
            IF l_dt_begin IS NOT NULL
            THEN
                IF l_dt_begin < l_dt_req
                THEN
                    l_dt_begin := l_dt_req;
                END IF;
            END IF;
        
            IF i_flg_time != pk_lab_tests_constant.g_flg_time_r
            THEN
                IF pk_sysconfig.get_config('GENERATE_BARCODE_LAB_TEST_ORDER', i_prof) = pk_lab_tests_constant.g_yes
                THEN
                    g_error := 'CALL TO PK_BARCODE.GENERATE_BARCODE';
                    IF NOT pk_barcode.generate_barcode(i_lang         => i_lang,
                                                       i_barcode_type => 'LTO',
                                                       i_institution  => i_prof.institution,
                                                       i_software     => i_prof.software,
                                                       o_barcode      => l_barcode,
                                                       o_error        => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        
            g_error := 'INSERT INTO ANALYSIS_REQ';
            ts_analysis_req.ins(id_analysis_req_in        => l_next_req,
                                id_patient_in             => i_patient,
                                id_episode_in             => CASE
                                                                 WHEN i_flg_time = pk_lab_tests_constant.g_flg_time_e THEN
                                                                  i_episode
                                                                 ELSE
                                                                  NULL
                                                             END,
                                id_episode_origin_in      => CASE
                                                                 WHEN i_flg_time = pk_lab_tests_constant.g_flg_time_e THEN
                                                                  NULL
                                                                 ELSE
                                                                  i_episode
                                                             END,
                                id_episode_destination_in => CASE
                                                                 WHEN i_flg_time = pk_lab_tests_constant.g_flg_time_n THEN
                                                                  i_episode_destination
                                                                 ELSE
                                                                  NULL
                                                             END,
                                id_visit_in               => CASE
                                                                 WHEN i_flg_time = pk_lab_tests_constant.g_flg_time_e THEN
                                                                  pk_visit.get_visit(i_episode, o_error)
                                                                 ELSE
                                                                  NULL
                                                             END,
                                id_institution_in         => i_prof.institution,
                                flg_time_in               => i_flg_time,
                                flg_status_in             => l_status,
                                id_prof_writes_in         => i_prof.id,
                                dt_req_tstz_in            => l_dt_req,
                                dt_begin_tstz_in          => l_dt_begin,
                                flg_priority_in           => i_priority,
                                id_exec_institution_in    => i_exec_institution,
                                notes_in                  => NULL,
                                notes_tech_in             => NULL,
                                id_analysis_group_in      => i_analysis_group,
                                barcode_in                => l_barcode,
                                id_prof_last_update_in    => i_prof.id,
                                dt_last_update_tstz_in    => g_sysdate_tstz,
                                rows_out                  => l_rows_out);
        
            t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'ANALYSIS_REQ',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            o_analysis_req := l_next_req;
        
            IF l_status != pk_lab_tests_constant.g_analysis_predefined
            THEN
                g_error := 'CALL TO PK_IA_EVENT_LAB.ANALYSIS_ORDER_NEW';
                pk_ia_event_lab.analysis_order_new(i_id_analysis_req => l_next_req,
                                                   i_id_institution  => i_prof.institution);
            END IF;
        
            IF i_episode IS NOT NULL
            THEN
                -- inserir em log de estados
                IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                        i_prof       => i_prof,
                                        i_id_episode => i_episode,
                                        i_flg_status => l_status,
                                        i_id_record  => l_next_req,
                                        i_flg_type   => pk_lab_tests_constant.g_analysis_type_req,
                                        o_error      => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
        END IF;
    
        IF i_episode IS NOT NULL
        THEN
            IF i_flg_time = pk_lab_tests_constant.g_flg_time_e
               AND -- Só se requisição é para o epis actual
               l_status = pk_lab_tests_constant.g_analysis_req
            THEN
                IF i_flg_col_inst IS NULL
                THEN
                    -- e ñ está pendente                    
                    -- Verifica se o exame exige transporte do doente
                    SELECT nvl(ais.flg_mov_pat, pk_lab_tests_constant.g_yes)
                      INTO l_flg_mov_pat
                      FROM analysis_instit_soft ais
                     WHERE ais.id_analysis = i_analysis
                       AND ais.id_sample_type = i_specimen
                       AND ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                       AND ais.id_institution = i_prof.institution
                       AND ais.id_software = i_prof.software
                       AND ais.flg_available = pk_lab_tests_constant.g_available;
                
                    -- análise exige transporte do doente
                    IF l_flg_mov_pat = pk_lab_tests_constant.g_yes
                    THEN
                        IF g_found
                        THEN
                            g_error_code := 'ANALYSIS_M009';
                            g_error      := REPLACE(pk_message.get_message(i_lang, i_prof, 'ANALYSIS_M009'),
                                                    '@1',
                                                    pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                             i_prof,
                                                                                             pk_lab_tests_constant.g_analysis_alias,
                                                                                             'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                             i_analysis,
                                                                                             'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                             i_specimen,
                                                                                             NULL));
                            RAISE g_user_exception;
                        END IF;
                    
                        -- Verificar se já foi requisitado mov para essa sala, nesta mesma requisição
                        -- (se um detalhe já registado tem é realizado na mm sala)
                        g_error   := 'LOOP PREVIOUS REQ';
                        l_req_mov := TRUE; -- Inicialização
                        l_id_mov  := NULL;
                        IF k != 0
                        THEN
                            FOR j IN 1 .. k
                            LOOP
                                IF req_mov(j).id_room = nvl(i_collection_room, l_new_room)
                                THEN
                                    -- Já foi requisitado mov p/ esta sala
                                    l_req_mov := FALSE;
                                    l_id_mov  := req_mov(j).id_mov;
                                    EXIT;
                                END IF;
                            END LOOP;
                        END IF;
                    
                        IF l_req_mov
                        THEN
                            g_error := 'CALL TO PK_MOVEMENT.CREATE_MOVEMENT';
                            IF NOT
                                pk_movement.create_movement_no_commit(i_lang          => i_lang,
                                                                      i_prof          => i_prof,
                                                                      i_episode       => i_episode,
                                                                      i_room          => nvl(i_collection_room, l_new_room),
                                                                      i_necessity     => NULL,
                                                                      i_dt_req_str    => pk_date_utils.date_send_tsz(i_lang,
                                                                                                                     l_dt_begin,
                                                                                                                     i_prof),
                                                                      i_prof_cat_type => pk_prof_utils.get_category(i_lang,
                                                                                                                    i_prof),
                                                                      o_id_mov        => l_id_mov,
                                                                      o_flg_show      => l_flg_show,
                                                                      o_msg           => l_msg_text,
                                                                      o_msg_title     => l_msg_title,
                                                                      o_button        => l_button,
                                                                      o_error         => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        
                            g_error := 'CALL TO PK_MOVEMENT.INSERT_MOVEMENT_TASK';
                            IF NOT pk_movement.insert_movement_task(i_lang          => i_lang,
                                                                    i_prof          => i_prof,
                                                                    i_episode       => i_episode,
                                                                    i_prof_cat_type => pk_prof_utils.get_category(i_lang,
                                                                                                                  i_prof),
                                                                    o_error         => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        
                            -- Guarda-se os IDs dos movimentos p/ associar a outros detalhes c/ a
                            -- mesma sala de realização de exame
                            g_error := 'SET MOV VECTOR';
                            k := k + 1;
                            req_mov(k).id_room := nvl(i_collection_room, l_new_room);
                            req_mov(k).id_mov := l_id_mov;
                        
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;
    
        IF i_analysis_req_det IS NULL
        THEN
            g_error    := 'GET SEQ_ANALYSIS_REQ_DET.NEXTVAL';
            l_next_det := ts_analysis_req_det.next_key(sequence_in => 'SEQ_ANALYSIS_REQ_DET');
        ELSE
            l_next_det := i_analysis_req_det;
        END IF;
    
        -- Get default lab room when exec_institution is also NULL
        IF i_lab_req IS NULL
           AND i_exec_institution IS NULL
           AND i_flg_col_inst != pk_alert_constant.g_no
           AND nvl(pk_sysconfig.get_config('ANALYSIS_GET_DEFAULT_LAB', i_prof), pk_lab_tests_constant.g_yes) =
           pk_lab_tests_constant.g_yes
        THEN
            g_error := 'GET C_LAB';
            OPEN c_lab;
            FETCH c_lab
                INTO l_room_req;
            CLOSE c_lab;
        ELSE
            l_room_req := i_lab_req;
        END IF;
    
        BEGIN
            SELECT ac.id_analysis_codification
              INTO l_analysis_codification
              FROM analysis_codification ac
             WHERE ac.id_codification = i_codification
               AND ac.id_analysis = i_analysis
               AND ac.id_sample_type = i_specimen
               AND ac.flg_available = pk_lab_tests_constant.g_available;
        EXCEPTION
            WHEN no_data_found THEN
                l_analysis_codification := NULL;
        END;
    
        IF i_order_type IS NOT NULL
        THEN
            g_error := 'CALL PK_CO_SIGN_API.SET_PENDING_CO_SIGN_TASK';
            IF NOT pk_co_sign_api.set_pending_co_sign_task(i_lang                   => i_lang,
                                                           i_prof                   => i_prof,
                                                           i_episode                => i_episode,
                                                           i_id_co_sign             => NULL,
                                                           i_id_task_type           => pk_alert_constant.g_task_lab_tests,
                                                           i_cosign_def_action_type => pk_co_sign_api.g_cosign_action_def_add,
                                                           i_id_task                => l_next_det,
                                                           i_id_task_group          => l_next_det,
                                                           i_id_order_type          => i_order_type,
                                                           i_id_prof_created        => i_prof.id,
                                                           i_id_prof_ordered_by     => i_prof_order,
                                                           i_dt_created             => g_sysdate_tstz,
                                                           i_dt_ordered_by          => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                     i_prof,
                                                                                                                     i_dt_order,
                                                                                                                     NULL),
                                                           o_id_co_sign             => l_id_co_sign,
                                                           o_id_co_sign_hist        => l_id_co_sign_hist,
                                                           o_error                  => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        l_rows_out := NULL;
    
        g_error := 'INSERT INTO ANALYSIS_REQ_DET';
        ts_analysis_req_det.ins(id_analysis_req_det_in      => l_next_det,
                                id_analysis_req_in          => l_next_req,
                                id_ard_parent_in            => i_analysis_req_det_parent,
                                id_analysis_in              => i_analysis,
                                id_sample_type_in           => i_specimen,
                                id_analysis_group_in        => i_analysis_group,
                                id_exam_cat_in              => l_analysis_instit_soft.id_exam_cat,
                                flg_time_harvest_in         => i_flg_time,
                                flg_status_in               => l_status_det,
                                dt_target_tstz_in           => l_dt_begin,
                                dt_final_target_tstz_in     => l_dt_final_target,
                                dt_schedule_in              => l_dt_schedule,
                                id_order_recurrence_in      => i_order_recurrence,
                                flg_urgency_in              => i_priority,
                                flg_prn_in                  => i_flg_prn,
                                notes_prn_in                => i_notes_prn,
                                flg_fasting_in              => i_flg_fasting,
                                id_clinical_purpose_in      => i_clinical_purpose,
                                clinical_purpose_notes_in   => i_clinical_purpose_notes,
                                flg_col_inst_in             => nvl(nvl(i_flg_col_inst, l_analysis_instit_soft.flg_harvest),
                                                                   pk_lab_tests_constant.g_yes),
                                flg_exec_result_in          => l_analysis_instit_soft.flg_execute,
                                id_room_in                  => nvl(i_collection_room, l_new_room),
                                id_exec_institution_in      => i_exec_institution,
                                id_room_req_in              => l_room_req,
                                id_movement_in              => l_id_mov,
                                notes_in                    => i_notes,
                                notes_scheduler_in          => i_notes_scheduler,
                                notes_tech_in               => i_notes_technician,
                                notes_patient_in            => i_notes_patient,
                                id_analysis_codification_in => l_analysis_codification,
                                id_pat_health_plan_in       => i_health_plan,
                                id_pat_exemption_in         => i_exemption,
                                id_task_dependency_in       => i_task_dependency,
                                id_cdr_in                   => i_clinical_decision_rule,
                                id_co_sign_order_in         => l_id_co_sign_hist,
                                flg_req_origin_module_in    => i_flg_origin_req,
                                id_episode_origin_in        => CASE
                                                                   WHEN i_flg_time = pk_lab_tests_constant.g_flg_time_e THEN
                                                                    NULL
                                                                   ELSE
                                                                    i_episode
                                                               END,
                                id_episode_destination_in   => CASE
                                                                   WHEN i_flg_time = pk_lab_tests_constant.g_flg_time_n THEN
                                                                    i_episode_destination
                                                                   ELSE
                                                                    NULL
                                                               END,
                                id_prof_last_update_in      => i_prof.id,
                                dt_last_update_tstz_in      => g_sysdate_tstz,
                                diagnosis_notes_in          => i_diagnosis_notes,
                                rows_out                    => l_rows_out);
    
        g_error := 'CALL TO PROCESS_INSERT';
        t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'ANALYSIS_REQ_DET',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        o_analysis_req_det := l_next_det;
    
        IF i_episode IS NOT NULL
        THEN
            -- inserir em log de estados
            IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                    i_prof       => i_prof,
                                    i_id_episode => i_episode,
                                    i_flg_status => l_status_det,
                                    i_id_record  => l_next_det,
                                    i_flg_type   => pk_lab_tests_constant.g_analysis_type_det,
                                    o_error      => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        IF l_status_det != pk_lab_tests_constant.g_analysis_predefined
        THEN
            IF l_status_det = pk_lab_tests_constant.g_analysis_exterior
            THEN
                g_error := 'CALL TO PK_IA_EVENT_LAB.ANALYSIS_REQUEST_EXTERNAL_NEW';
                pk_ia_event_lab.analysis_request_external_new(i_id_analysis_req_det => l_next_det,
                                                              i_id_institution      => i_prof.institution,
                                                              i_flg_old_status      => NULL);
            ELSE
                g_error := 'CALL TO PK_IA_EVENT_LAB.ANALYSIS_REQUEST_NEW';
                pk_ia_event_lab.analysis_request_new(i_id_analysis_req_det => l_next_det,
                                                     i_id_institution      => i_prof.institution);
            END IF;
        END IF;
    
        IF i_prof_cc.count != 0
           OR i_prof_bcc.count != 0
        THEN
            FOR i IN 1 .. i_prof_cc.count
            LOOP
                IF i_prof_cc(i) IS NOT NULL
                THEN
                    g_error := 'INSERT ANALYSIS_RESULT_SEND 1';
                    ts_analysis_result_send.ins(id_analysis_result_send_out => l_analysis_result_send,
                                                id_analysis_req_det_in      => l_next_det,
                                                id_prof_cc_in               => CASE
                                                                                   WHEN pk_utils.is_number(i_prof_cc(i)) =
                                                                                        pk_lab_tests_constant.g_yes THEN
                                                                                    to_number(i_prof_cc(i))
                                                                                   ELSE
                                                                                    NULL
                                                                               END,
                                                email_cc_in                 => CASE
                                                                                   WHEN pk_utils.is_number(i_prof_cc(i)) =
                                                                                        pk_lab_tests_constant.g_no THEN
                                                                                    i_prof_cc(i)
                                                                                   ELSE
                                                                                    NULL
                                                                               END,
                                                flg_status_in               => pk_lab_tests_constant.g_analysis_pending);
                END IF;
            END LOOP;
        
            FOR i IN 1 .. i_prof_bcc.count
            LOOP
                IF i_prof_bcc(i) IS NOT NULL
                THEN
                    g_error := 'INSERT ANALYSIS_RESULT_SEND 2';
                    ts_analysis_result_send.ins(id_analysis_result_send_out => l_analysis_result_send,
                                                id_analysis_req_det_in      => l_next_det,
                                                id_prof_bcc_in              => CASE
                                                                                   WHEN pk_utils.is_number(i_prof_bcc(i)) =
                                                                                        pk_lab_tests_constant.g_yes THEN
                                                                                    to_number(i_prof_bcc(i))
                                                                                   ELSE
                                                                                    NULL
                                                                               END,
                                                email_bcc_in                => CASE
                                                                                   WHEN pk_utils.is_number(i_prof_bcc(i)) =
                                                                                        pk_lab_tests_constant.g_no THEN
                                                                                    i_prof_bcc(i)
                                                                                   ELSE
                                                                                    NULL
                                                                               END,
                                                flg_status_in               => pk_lab_tests_constant.g_analysis_pending);
                END IF;
            END LOOP;
        END IF;
    
        IF i_flg_time != pk_lab_tests_constant.g_flg_time_r
        THEN
            IF i_clinical_question.count != 0
            THEN
                FOR i IN 1 .. i_clinical_question.count
                LOOP
                    IF i_clinical_question(i) IS NOT NULL
                    THEN
                        IF i_response(i) IS NOT NULL
                        THEN
                            l_aux := pk_utils.str_split(i_response(i), '|');
                        
                            FOR j IN 1 .. l_aux.count
                            LOOP
                                g_error := 'INSERT INTO ANALYSIS_QUESTION_RESPONSE';
                                INSERT INTO analysis_question_response
                                    (id_analysis_question_response,
                                     id_episode,
                                     id_analysis_req_det,
                                     id_questionnaire,
                                     id_response,
                                     notes,
                                     id_prof_last_update,
                                     dt_last_update_tstz)
                                VALUES
                                    (seq_analysis_question_response.nextval,
                                     i_episode,
                                     l_next_det,
                                     i_clinical_question(i),
                                     to_number(l_aux(j)),
                                     i_clinical_question_notes(i),
                                     i_prof.id,
                                     g_sysdate_tstz);
                            END LOOP;
                        ELSE
                            g_error := 'INSERT INTO ANALYSIS_QUESTION_RESPONSE';
                            INSERT INTO analysis_question_response
                                (id_analysis_question_response,
                                 id_episode,
                                 id_analysis_req_det,
                                 id_questionnaire,
                                 id_response,
                                 notes,
                                 id_prof_last_update,
                                 dt_last_update_tstz)
                            VALUES
                                (seq_analysis_question_response.nextval,
                                 i_episode,
                                 l_next_det,
                                 i_clinical_question(i),
                                 NULL,
                                 i_clinical_question_notes(i),
                                 i_prof.id,
                                 g_sysdate_tstz);
                        END IF;
                    END IF;
                END LOOP;
            END IF;
        END IF;
    
        IF i_episode IS NOT NULL
        THEN
            g_error := 'SAVE DIAGNOSIS';
            IF i_diagnosis.tbl_diagnosis IS NOT NULL
               AND i_diagnosis.tbl_diagnosis.count > 0
            THEN
                g_error := 'CALL TO PK_DIAGNOSIS.SET_MCDT_REQ_DIAGNOSIS';
                IF NOT pk_diagnosis.set_mcdt_req_diag_no_commit(i_lang             => i_lang,
                                                                i_prof             => i_prof,
                                                                i_epis             => i_episode,
                                                                i_diag             => i_diagnosis,
                                                                i_exam_req         => NULL,
                                                                i_analysis_req     => l_next_req,
                                                                i_interv_presc     => NULL,
                                                                i_exam_req_det     => NULL,
                                                                i_analysis_req_det => l_next_det,
                                                                i_interv_presc_det => NULL,
                                                                o_error            => o_error)
                THEN
                    IF o_error.err_desc IS NOT NULL
                    THEN
                        g_error_code := o_error.ora_sqlerrm;
                        g_error      := o_error.err_action;
                    
                        RAISE g_user_exception;
                    ELSE
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        
            IF i_flg_time IN (pk_lab_tests_constant.g_flg_time_b, pk_lab_tests_constant.g_flg_time_d)
               AND l_create_epis_combination = pk_lab_tests_constant.g_yes
            THEN
                IF NOT pk_events.create_task_epis_combination(i_lang                 => i_lang,
                                                              i_prof                 => i_prof,
                                                              i_patient              => i_patient,
                                                              i_task_suggest_date    => l_dt_begin,
                                                              i_task_type_from       => pk_order_sets.g_odst_task_analysis,
                                                              i_task_request_from    => l_next_det,
                                                              i_id_event             => i_event_followup_app,
                                                              i_id_schedule          => i_schedule_followup_app,
                                                              i_id_episode           => i_episode_followup_app,
                                                              o_id_combination_spec  => l_id_combination_spec,
                                                              o_task_dependency_from => l_task_dependency_from,
                                                              o_task_dependency_to   => l_task_dependency_to,
                                                              o_error                => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            l_sys_alert_event.id_software     := i_prof.software;
            l_sys_alert_event.id_institution  := i_prof.institution;
            l_sys_alert_event.id_episode      := i_episode;
            l_sys_alert_event.id_record       := l_next_det;
            l_sys_alert_event.dt_record       := l_dt_req;
            l_sys_alert_event.id_professional := i_prof.id;
            l_sys_alert_event.id_room         := NULL;
            l_sys_alert_event.replace1        := 'ANALYSIS.CODE_ANALYSIS.' || i_analysis;
            l_sys_alert_event.id_prof_order   := nvl(i_prof_order, i_prof.id);
        
            --Verifica se o evento é passível de gerar alertas
            IF ((l_harvest_pending_req = pk_lab_tests_constant.g_yes AND
               l_status_det IN (pk_lab_tests_constant.g_analysis_req, pk_lab_tests_constant.g_analysis_pending)) OR
               (l_harvest_pending_req = pk_lab_tests_constant.g_no AND
               l_status_det = pk_lab_tests_constant.g_analysis_req))
               AND (i_flg_col_inst = pk_lab_tests_constant.g_yes OR i_collection_room IS NOT NULL)
               AND i_flg_time = pk_lab_tests_constant.g_flg_time_e
               AND l_next_det IS NOT NULL
               AND nvl(l_dt_begin, l_dt_req) IS NOT NULL
            THEN
                l_sys_alert_event.id_sys_alert := 4;
            
                g_error := 'CALL PK_ALERTS.INSERT_SYS_ALERT_EVENT - ALERTA 4';
                IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                        i_prof            => i_prof,
                                                        i_sys_alert_event => l_sys_alert_event,
                                                        i_flg_type_dest   => 'C',
                                                        o_error           => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            ELSE
                l_sys_alert_event.id_sys_alert := 4;
            
                g_error := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT - ALERTA 4';
                IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                        i_prof            => i_prof,
                                                        i_sys_alert_event => l_sys_alert_event,
                                                        o_error           => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            --Verifica se o evento é passível de gerar alertas
            IF l_status_det IN (pk_lab_tests_constant.g_analysis_req, pk_lab_tests_constant.g_analysis_pending)
               AND l_next_det IS NOT NULL
               AND nvl(l_dt_begin, l_dt_req) IS NOT NULL
            THEN
            
                l_sys_alert_event.id_sys_alert := 40;
                l_sys_alert_event.replace2     := pk_date_utils.get_timestamp_str(i_lang, i_prof, l_dt_begin, NULL);
                --Insere evento na tabela de alertas
                g_error := 'INSERT INTO SYS_ALERT_EVENT';
                IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                        i_prof            => i_prof,
                                                        i_sys_alert_event => l_sys_alert_event,
                                                        i_flg_type_dest   => 'C',
                                                        o_error           => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            ELSE
                l_sys_alert_event.id_sys_alert := 40;
            
                g_error := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT - ALERTA 40';
                IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                        i_prof            => i_prof,
                                                        i_sys_alert_event => l_sys_alert_event,
                                                        o_error           => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            l_flg_profile := nvl(pk_hand_off_core.get_flg_profile(i_lang, i_prof, NULL), '#');
        
            IF l_flg_profile = pk_prof_utils.g_flg_profile_template_student
               AND
               l_status NOT IN (pk_lab_tests_constant.g_analysis_predefined, pk_lab_tests_constant.g_analysis_draft)
            THEN
            
                l_sys_alert_event.id_sys_alert    := pk_alert_constant.g_alert_cpoe_draft;
                l_sys_alert_event.id_patient      := i_patient;
                l_sys_alert_event.id_record       := i_episode;
                l_sys_alert_event.id_visit        := pk_visit.get_visit(i_episode => i_episode, o_error => o_error);
                l_sys_alert_event.dt_record       := g_sysdate_tstz;
                l_sys_alert_event.id_professional := pk_hand_off.get_episode_responsible(i_lang       => i_lang,
                                                                                         i_prof       => i_prof,
                                                                                         i_id_episode => i_episode,
                                                                                         o_error      => o_error);
            
                g_error := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT - ALERTA 320';
                IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                        i_prof            => i_prof,
                                                        i_sys_alert_event => l_sys_alert_event,
                                                        o_error           => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        o_analysis_req_det := l_next_det;
        o_analysis_req_par := table_number();
    
        g_error := 'CALL TO PK_LAB_TESTS_UTILS.CREATE_LAB_TEST_REQ_PAR';
        IF NOT pk_lab_tests_utils.create_lab_test_req_par(i_lang             => i_lang,
                                                          i_prof             => i_prof,
                                                          i_analysis_req_det => l_next_det,
                                                          o_analysis_req_par => o_analysis_req_par,
                                                          o_error            => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        IF l_status = pk_lab_tests_constant.g_analysis_toexec
        THEN
            g_error := 'UPDATE ANALYSIS_REQ';
            ts_analysis_req.upd(id_analysis_req_in => l_next_req, flg_status_in => l_status, rows_out => l_rows_out);
        
            t_data_gov_mnt.process_update(i_lang         => i_lang,
                                          i_prof         => i_prof,
                                          i_table_name   => 'ANALYSIS_REQ',
                                          i_list_columns => table_varchar('FLG_STATUS'),
                                          i_rowids       => l_rows_out,
                                          o_error        => o_error);
        
            IF i_episode IS NOT NULL
            THEN
                -- inserir em log de estados
                IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                        i_prof       => i_prof,
                                        i_id_episode => i_episode,
                                        i_flg_status => l_status,
                                        i_id_record  => l_next_req,
                                        i_flg_type   => pk_lab_tests_constant.g_analysis_type_req,
                                        o_error      => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        --Add a lab test to a collected specimen
        IF i_harvest IS NOT NULL
        THEN
            g_error := 'CALL PK_LAB_TESTS_HARVEST_CORE.SET_HARVEST';
            IF NOT pk_lab_tests_harvest_core.set_harvest(i_lang             => i_lang,
                                                         i_prof             => i_prof,
                                                         i_analysis_req_det => l_next_det,
                                                         i_harvest          => i_harvest,
                                                         o_error            => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        ELSE
            IF l_status != pk_lab_tests_constant.g_analysis_wtg_tde
            THEN
                IF i_body_location.count > 0
                THEN
                    FOR i IN 1 .. i_body_location.count
                    LOOP
                        -- Create Pending Harvest
                        g_error := 'CALL PK_LAB_TESTS_HARVEST_CORE.CREATE_HARVEST_PENDING';
                        IF NOT pk_lab_tests_harvest_core.create_harvest_pending(i_lang             => i_lang,
                                                                                i_prof             => i_prof,
                                                                                i_patient          => i_patient,
                                                                                i_episode          => i_episode,
                                                                                i_analysis_req     => l_next_req,
                                                                                i_analysis_req_det => l_next_det,
                                                                                i_body_location    => i_body_location(i),
                                                                                i_laterality       => i_laterality(i),
                                                                                o_error            => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END LOOP;
                ELSE
                    -- Create Pending Harvest
                    g_error := 'CALL PK_LAB_TESTS_HARVEST_CORE.CREATE_HARVEST_PENDING';
                    IF NOT pk_lab_tests_harvest_core.create_harvest_pending(i_lang             => i_lang,
                                                                            i_prof             => i_prof,
                                                                            i_patient          => i_patient,
                                                                            i_episode          => i_episode,
                                                                            i_analysis_req     => l_next_req,
                                                                            i_analysis_req_det => l_next_det,
                                                                            i_body_location    => NULL,
                                                                            i_laterality       => NULL,
                                                                            o_error            => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        END IF;
    
        IF i_episode IS NOT NULL
        THEN
            g_error := 'CALL TO PK_VISIT.UPDATE_EPIS_INFO';
            IF NOT pk_visit.upd_epis_info_analysis(i_lang                   => i_lang,
                                                   i_id_episode             => i_episode,
                                                   i_id_prof                => i_prof,
                                                   i_dt_first_analysis_exec => NULL,
                                                   i_dt_first_analysis_req  => l_dt_first_analysis_req,
                                                   i_prof_cat_type          => pk_prof_utils.get_category(i_lang, i_prof),
                                                   o_error                  => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            g_error := 'CALL TO pk_icnp_fo_api_db.CREATE_SUGG';
            pk_icnp_fo_api_db.create_sugg(i_lang               => i_lang,
                                          i_prof               => i_prof,
                                          i_id_episode         => i_episode,
                                          i_request_id         => l_next_det,
                                          i_task_id            => i_analysis,
                                          i_task_type_id       => pk_alert_constant.g_task_lab_tests,
                                          i_sysdate_tstz       => g_sysdate_tstz,
                                          o_id_icnp_sug_interv => l_id_icnp_sug_interv);
        END IF;
    
        IF l_status NOT IN (pk_lab_tests_constant.g_analysis_predefined, pk_lab_tests_constant.g_analysis_draft)
        THEN
            g_error := 'PK_LAB_TESTS_API_DB.SET_LAB_TEST_GRID_TASK';
            IF NOT pk_lab_tests_api_db.set_lab_test_grid_task(i_lang             => i_lang,
                                                              i_prof             => i_prof,
                                                              i_patient          => i_patient,
                                                              i_episode          => i_episode,
                                                              i_analysis_req     => l_next_req,
                                                              i_analysis_req_det => l_next_det,
                                                              o_error            => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        IF i_episode IS NOT NULL
        THEN
        
            IF l_status != pk_lab_tests_constant.g_analysis_draft
            THEN
                g_error := 'CALL PK_CPOE.SYNC_TASK';
                IF NOT pk_cpoe.sync_task(i_lang                 => i_lang,
                                         i_prof                 => i_prof,
                                         i_episode              => i_episode,
                                         i_task_type            => pk_alert_constant.g_task_type_analysis,
                                         i_task_request         => l_next_det,
                                         i_task_start_timestamp => l_dt_begin,
                                         o_error                => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            g_error := 'CALL TO PK_VISIT.SET_FIRST_OBS';
            IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                          i_id_episode          => i_episode,
                                          i_pat                 => NULL,
                                          i_prof                => i_prof,
                                          i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                          i_dt_last_interaction => l_dt_req,
                                          i_dt_first_obs        => l_dt_req,
                                          o_error               => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            g_error := 'CALL SET_CODING_ELEMENT_MDM';
            IF NOT pk_medical_decision.set_cod_elem_mdm_1_no_commit(i_lang   => i_lang,
                                                                    i_prof   => i_prof,
                                                                    i_epis   => i_episode,
                                                                    i_origin => 'L',
                                                                    o_error  => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              g_error_code,
                                              g_error,
                                              '',
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_LAB_TEST_ORDER',
                                              'U',
                                              '',
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_LAB_TEST_REQUEST',
                                              o_error);
            RETURN FALSE;
    END create_lab_test_request;

    FUNCTION create_lab_test_recurrence
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_exec_tab        IN t_tbl_order_recurr_plan,
        o_exec_to_process OUT t_tbl_order_recurr_plan_sts,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        -- get all order_plan info and one id_analysis_req associated to this plan
        CURSOR c_lab_tests(x_exec_tab IN t_tbl_order_recurr_plan) IS
            SELECT /*+opt_estimate(table t rows=1)*/
             t.id_order_recurrence_plan,
             t.exec_number,
             t.exec_timestamp,
             r.id_analysis_req,
             r.id_analysis_req_det,
             r.flg_type,
             r.flg_time,
             r.id_analysis,
             r.id_sample_type,
             r.id_analysis_group,
             r.flg_priority,
             r.flg_prn,
             r.id_room,
             r.flg_col_inst,
             r.id_exec_institution,
             r.id_prof_writes,
             r.id_software,
             r.id_institution
              FROM TABLE(CAST(x_exec_tab AS t_tbl_order_recurr_plan)) t,
                   (SELECT DISTINCT id_analysis_req,
                                    id_order_recurrence,
                                    id_analysis_req_det,
                                    flg_type,
                                    flg_time,
                                    id_analysis,
                                    id_sample_type,
                                    id_analysis_group,
                                    flg_priority,
                                    flg_prn,
                                    id_room,
                                    flg_col_inst,
                                    id_exec_institution,
                                    id_prof_writes,
                                    id_software,
                                    id_institution
                      FROM (SELECT ar.id_analysis_req,
                                   ar.flg_time,
                                   ard.id_order_recurrence,
                                   ard.id_analysis_req_det,
                                   ard.id_analysis,
                                   ard.id_sample_type,
                                   ard.id_analysis_group,
                                   ar.flg_priority,
                                   ard.flg_prn,
                                   ard.id_room,
                                   ard.flg_col_inst,
                                   ar.id_exec_institution,
                                   ar.id_prof_writes,
                                   pk_episode.get_soft_by_epis_type(e.id_epis_type, e.id_institution) id_software,
                                   e.id_institution,
                                   decode(ard.id_analysis_group, NULL, 'A', 'G') flg_type,
                                   row_number() over(PARTITION BY ard.id_analysis ORDER BY ard.dt_target_tstz DESC NULLS LAST) rn
                              FROM analysis_req ar, analysis_req_det ard, visit v, episode e
                             WHERE ar.id_analysis_req = ard.id_analysis_req
                               AND ar.id_visit = v.id_visit
                               AND nvl(ar.id_episode, ar.id_episode_origin) = e.id_episode
                               AND v.flg_status = pk_visit.g_active
                               AND ard.id_order_recurrence IN
                                   (SELECT /*+opt_estimate(table o rows=1)*/
                                    DISTINCT o.id_order_recurrence_plan
                                      FROM TABLE(CAST(x_exec_tab AS t_tbl_order_recurr_plan)) o)
                               AND NOT (ard.flg_time_harvest IN
                                    (pk_lab_tests_constant.g_flg_time_b, pk_lab_tests_constant.g_flg_time_d) AND
                                    ard.flg_status != pk_lab_tests_constant.g_analysis_tosched)
                               AND ard.flg_status != pk_lab_tests_constant.g_analysis_cancel)
                     WHERE rn = 1) r
             WHERE t.id_order_recurrence_plan = r.id_order_recurrence(+)
             ORDER BY t.exec_timestamp;
    
        TYPE t_lab_tests IS TABLE OF c_lab_tests%ROWTYPE;
        l_lab_tests_tab t_lab_tests;
    
        CURSOR c_visit(x_exec_tab IN t_tbl_order_recurr_plan) IS
            SELECT DISTINCT v.flg_status
              FROM analysis_req ar, analysis_req_det ard, visit v
             WHERE ar.id_analysis_req = ard.id_analysis_req
               AND ar.id_visit = v.id_visit
               AND v.flg_status = pk_visit.g_active
               AND ard.id_order_recurrence IN
                   (SELECT /*+opt_estimate(table o rows=1)*/
                    DISTINCT o.id_order_recurrence_plan
                      FROM TABLE(CAST(x_exec_tab AS t_tbl_order_recurr_plan)) o)
               AND NOT (ard.flg_time_harvest IN (pk_lab_tests_constant.g_flg_time_b, pk_lab_tests_constant.g_flg_time_d) AND
                    ard.flg_status != pk_lab_tests_constant.g_analysis_tosched)
               AND ard.flg_status != pk_lab_tests_constant.g_analysis_cancel;
    
        l_prev_analysis_req analysis_req.id_analysis_req%TYPE;
        CURSOR c_analysis_req(x_id_analysis_req IN analysis_req.id_analysis_req%TYPE) IS
            SELECT *
              FROM analysis_req ar
             WHERE ar.id_analysis_req = x_id_analysis_req;
        l_analysis_req_data analysis_req%ROWTYPE;
    
        CURSOR c_analysis_req_det(x_id_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE) IS
            SELECT *
              FROM analysis_req_det ard
             WHERE ard.id_analysis_req_det = x_id_analysis_req_det
               AND rownum = 1;
    
        TYPE t_analysis_req_det IS TABLE OF c_analysis_req_det%ROWTYPE;
        l_analysis_req_det_data t_analysis_req_det;
    
        CURSOR c_diagnosis_list(l_analysis_req_det analysis_req_det.id_analysis_req_det%TYPE) IS
            SELECT mrd.id_diagnosis, ed.desc_epis_diagnosis desc_diagnosis
              FROM mcdt_req_diagnosis mrd, epis_diagnosis ed
             WHERE mrd.id_analysis_req_det = l_analysis_req_det
               AND nvl(mrd.flg_status, '@') != pk_alert_constant.g_cancelled
               AND mrd.id_epis_diagnosis = ed.id_epis_diagnosis;
    
        l_prof profissional;
    
        l_id_analysis_req analysis_req.id_analysis_req%TYPE;
    
        l_data     NUMBER;
        l_data_det NUMBER;
    
        l_table_data table_number := table_number();
    
        l_diagnosis       table_number := table_number();
        l_diagnosis_desc  table_varchar := table_varchar();
        l_diagnosis_group pk_edis_types.rec_in_epis_diagnosis;
        l_codification    codification.id_codification%TYPE;
        l_prof_order      co_sign.id_prof_ordered_by%TYPE;
        l_dt_order        VARCHAR2(200 CHAR);
        l_order_type      co_sign.id_order_type%TYPE;
    
        l_exec_to_process t_tbl_order_recurr_plan_sts;
    
        l_prof_1 profissional;
    
        l_order_criteria        sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_CRITERIA', i_prof);
        l_order_limit           sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_LIMIT', i_prof);
        l_order_filter_interval sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_FILTER_INTERVAL',
                                                                                 i_prof);
        l_order_aggregate       sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_AGGREGATE', i_prof);
        l_order_exam_cat_parent sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_EXAM_CAT_PARENT',
                                                                                 i_prof);
    
        l_analysis_req_array     table_number := table_number();
        l_analysis_req_det_array table_number := table_number();
    
        l_patient patient.id_patient%TYPE;
        l_visit   visit.id_visit%TYPE;
    
        l_status_visit visit.flg_status%TYPE;
    
        l_analysis       table_number := table_number();
        l_specimen       table_number := table_number();
        l_dt_begin       VARCHAR2(100 CHAR);
        l_exam_cat       exam_cat.id_exam_cat%TYPE;
        l_room           room.id_room%TYPE;
        l_analysis_order analysis_req.id_analysis_req%TYPE;
    
        l_rows_out                 table_varchar := table_varchar();
        l_analysis_req_det_array_f table_number := table_number();
    
    BEGIN
    
        g_error := 'Init create_lab_test_recurrence / i_exec_tab.COUNT=' || i_exec_tab.count;
        pk_alertlog.log_init(g_error);
    
        g_sysdate_tstz := current_timestamp;
    
        l_exec_to_process := t_tbl_order_recurr_plan_sts();
    
        OPEN c_visit(i_exec_tab);
        FETCH c_visit
            INTO l_status_visit;
        CLOSE c_visit;
    
        IF l_status_visit != pk_visit.g_active
        THEN
            RETURN TRUE;
        END IF;
    
        -- Getting all analysis_reqs related to this order recurr plan
        g_error := 'OPEN c_lab_tests';
        OPEN c_lab_tests(i_exec_tab);
        FETCH c_lab_tests BULK COLLECT
            INTO l_lab_tests_tab;
        CLOSE c_lab_tests;
    
        <<exec>>
        FOR exec_idx IN 1 .. l_lab_tests_tab.count
        LOOP
        
            l_prof := profissional(l_lab_tests_tab(exec_idx).id_prof_writes,
                                   l_lab_tests_tab(exec_idx).id_institution,
                                   l_lab_tests_tab(exec_idx).id_software);
        
            IF l_lab_tests_tab(exec_idx).id_analysis_req IS NULL
            THEN
                -- plan outdated
                g_error := 'l_exec_to_process 1';
                l_exec_to_process.extend;
                l_exec_to_process(l_exec_to_process.count) := t_rec_order_recurr_plan_sts(l_lab_tests_tab(exec_idx).id_order_recurrence_plan,
                                                                                          pk_alert_constant.get_no);
            ELSE
            
                IF l_prev_analysis_req IS NULL
                   OR l_prev_analysis_req != l_lab_tests_tab(exec_idx).id_analysis_req
                THEN
                    l_analysis_req_data     := NULL;
                    l_analysis_req_det_data := NULL;
                
                    -- getting analysis_req info
                    g_error := 'OPEN c_analysis_req(' || l_lab_tests_tab(exec_idx).id_analysis_req || ')';
                    OPEN c_analysis_req(l_lab_tests_tab(exec_idx).id_analysis_req);
                    FETCH c_analysis_req
                        INTO l_analysis_req_data;
                    CLOSE c_analysis_req;
                
                    -- getting analysis_req_det info
                    g_error := 'OPEN c_analysis_req_det(' || l_lab_tests_tab(exec_idx).id_analysis_req || ')';
                    OPEN c_analysis_req_det(l_lab_tests_tab(exec_idx).id_analysis_req_det);
                    FETCH c_analysis_req_det BULK COLLECT
                        INTO l_analysis_req_det_data;
                    CLOSE c_analysis_req_det;
                END IF;
            
                g_error   := 'GET L_ID_ANALYSIS_REQ';
                l_patient := pk_episode.get_id_patient(i_episode => l_analysis_req_data.id_episode);
            
                l_visit := pk_visit.get_visit(i_episode => l_analysis_req_data.id_episode, o_error => o_error);
            
                IF l_order_aggregate = pk_lab_tests_constant.g_yes
                THEN
                    g_error := 'Selects available requests';
                    SELECT ar.id_analysis_req, ard.id_analysis_req_det
                      BULK COLLECT
                      INTO l_analysis_req_array, l_analysis_req_det_array
                      FROM analysis_req ar, analysis_req_det ard
                     WHERE ar.id_patient = l_patient
                       AND ar.id_visit = l_visit
                       AND ard.id_analysis_req = ar.id_analysis_req
                       AND ar.flg_time != pk_lab_tests_constant.g_flg_time_r
                       AND ar.flg_status IN (pk_lab_tests_constant.g_analysis_sched,
                                             pk_lab_tests_constant.g_analysis_pending,
                                             pk_lab_tests_constant.g_analysis_tosched,
                                             pk_lab_tests_constant.g_analysis_req,
                                             pk_lab_tests_constant.g_analysis_sos,
                                             pk_lab_tests_constant.g_analysis_exterior)
                       AND ((instr(l_order_criteria, 'D') != 0 AND
                           (nvl(pk_date_utils.add_days_to_tstz(ard.dt_target_tstz, l_order_filter_interval),
                                  g_sysdate_tstz) >= l_lab_tests_tab(exec_idx).exec_timestamp)
                           
                           AND (nvl(pk_date_utils.add_days_to_tstz(ard.dt_target_tstz, l_order_filter_interval * -1),
                                      g_sysdate_tstz) <= l_lab_tests_tab(exec_idx).exec_timestamp)) OR
                           (instr(l_order_criteria, 'D') = 0 AND
                           nvl(ard.dt_target_tstz, g_sysdate_tstz) >= l_lab_tests_tab(exec_idx).exec_timestamp))
                     ORDER BY ar.dt_begin_tstz DESC;
                END IF;
            
                IF l_analysis_req_det_array.count > 0
                THEN
                    l_id_analysis_req := -1;
                END IF;
            
                l_analysis := table_number();
                l_specimen := table_number();
                IF l_lab_tests_tab(exec_idx).flg_type = 'A'
                THEN
                    l_analysis.extend;
                    l_analysis(1) := l_lab_tests_tab(exec_idx).id_analysis;
                
                    l_specimen.extend;
                    l_specimen(1) := l_lab_tests_tab(exec_idx).id_sample_type;
                ELSE
                    IF l_lab_tests_tab(exec_idx).id_analysis_group IS NOT NULL
                    THEN
                    
                        l_analysis.extend;
                        l_analysis(1) := pk_utils.str_token(l_lab_tests_tab(exec_idx).id_analysis_group, 1, '|');
                    
                        l_specimen.extend;
                        l_specimen(1) := pk_utils.str_token(l_lab_tests_tab(exec_idx).id_analysis_group, 2, '|');
                    
                    END IF;
                END IF;
            
                IF l_lab_tests_tab(exec_idx).id_room IS NULL
                    AND l_lab_tests_tab(exec_idx).flg_col_inst IS NULL
                    AND instr(l_order_criteria, 'R') != 0
                THEN
                    g_error := 'GET LAB ROOM';
                    SELECT ar.id_room
                      INTO l_room
                      FROM analysis_room ar, room r, department d
                     WHERE ar.id_analysis = l_lab_tests_tab(exec_idx).id_analysis
                       AND ar.id_sample_type = l_lab_tests_tab(exec_idx).id_sample_type
                       AND ar.flg_type = pk_lab_tests_constant.g_arm_flg_type_room_pat
                       AND ar.flg_default = pk_lab_tests_constant.g_yes
                       AND ar.id_institution = l_prof.institution
                       AND ar.flg_available = pk_lab_tests_constant.g_available
                       AND (ar.id_analysis_instit_soft IS NULL OR EXISTS
                            (SELECT 1
                               FROM analysis_instit_soft ais
                              WHERE ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                                AND ais.id_software = l_prof.software
                                AND ais.id_institution = l_prof.institution
                                AND ais.flg_available = pk_lab_tests_constant.g_available
                                AND ais.id_analysis_instit_soft = ar.id_analysis_instit_soft))
                       AND ar.id_room = r.id_room
                       AND r.id_department = d.id_department
                       AND d.id_institution = l_prof.institution;
                ELSE
                    l_room := l_lab_tests_tab(exec_idx).id_room;
                END IF;
            
                g_error := 'GET LAB EXAM_CAT';
                SELECT decode(l_order_exam_cat_parent,
                              pk_lab_tests_constant.g_yes,
                              (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang, l_prof, ais.id_exam_cat)
                                 FROM dual),
                              ais.id_exam_cat) id_exam_cat
                  INTO l_exam_cat
                  FROM analysis_instit_soft ais
                 WHERE ais.id_analysis = l_lab_tests_tab(exec_idx).id_analysis
                   AND ais.id_sample_type = l_lab_tests_tab(exec_idx).id_sample_type
                   AND ais.id_institution = l_prof.institution
                   AND ais.id_software = l_prof.software
                   AND ais.flg_available = pk_lab_tests_constant.g_yes;
            
                IF pk_date_utils.date_send_tsz(i_lang, l_lab_tests_tab(exec_idx).exec_timestamp, l_prof) <
                   g_sysdate_char
                THEN
                    l_dt_begin := g_sysdate_char;
                ELSE
                    l_dt_begin := pk_date_utils.date_send_tsz(i_lang, l_lab_tests_tab(exec_idx).exec_timestamp, l_prof);
                END IF;
            
                BEGIN
                    g_error := 'GET L_ANALYSIS_ORDER 1';
                    SELECT a.id_analysis_req
                      INTO l_analysis_order
                      FROM (SELECT ard.id_analysis_req,
                                   CASE
                                        WHEN ard.dt_begin < g_sysdate_char THEN
                                         g_sysdate_char
                                        ELSE
                                         ard.dt_begin
                                    END dt_begin
                              FROM (SELECT ard.id_analysis_req,
                                           pk_date_utils.trunc_insttimezone_str(l_prof, ard.dt_target_tstz, 'MI') dt_begin
                                      FROM analysis_req_det ard
                                     WHERE ard.id_analysis_req_det IN
                                           (SELECT /*+opt_estimate (table t1 rows=2)*/
                                             *
                                              FROM TABLE(l_analysis_req_det_array) t1)) ard,
                                   (SELECT first_value(ard.id_analysis_req) over(ORDER BY ard.dt_target_tstz) id_analysis_req
                                      FROM analysis_req_det ard
                                     WHERE ard.id_analysis_req IN
                                           (SELECT /*+opt_estimate (table t1 rows=2)*/
                                             *
                                              FROM TABLE(l_analysis_req_array) t1)
                                       AND ard.flg_time_harvest = l_lab_tests_tab(exec_idx).flg_time
                                       AND ard.flg_urgency = l_lab_tests_tab(exec_idx).flg_priority
                                       AND (ard.id_exec_institution = l_lab_tests_tab(exec_idx).id_exec_institution OR
                                           (ard.id_exec_institution IS NULL AND l_lab_tests_tab(exec_idx).id_exec_institution IS NULL))
                                       AND ((ard.flg_status = pk_lab_tests_constant.g_analysis_sos AND l_lab_tests_tab(exec_idx)
                                           .flg_prn = pk_lab_tests_constant.g_yes) OR
                                           (ard.flg_status != pk_lab_tests_constant.g_analysis_sos AND l_lab_tests_tab(exec_idx)
                                           .flg_prn = pk_lab_tests_constant.g_no))
                                       AND ((ard.id_sample_type = l_specimen(1) AND instr(l_order_criteria, 'S') != 0) OR
                                           instr(l_order_criteria, 'S') = 0)
                                       AND ((decode(l_order_exam_cat_parent,
                                                    pk_lab_tests_constant.g_yes,
                                                    (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                     l_prof,
                                                                                                     ard.id_exam_cat)
                                                       FROM dual),
                                                    ard.id_exam_cat) = l_exam_cat AND instr(l_order_criteria, 'C') != 0) OR
                                           instr(l_order_criteria, 'C') = 0)
                                       AND (((l_room IS NOT NULL AND ard.id_room = l_room AND
                                           instr(l_order_criteria, 'R') != 0) OR (l_room IS NULL AND
                                           ard.flg_col_inst = l_lab_tests_tab(exec_idx).flg_col_inst AND
                                           instr(l_order_criteria, 'R') != 0)) OR instr(l_order_criteria, 'R') = 0)
                                     HAVING l_order_limit = 0
                                        OR COUNT(*) < l_order_limit
                                     GROUP BY ard.id_analysis_req, ard.dt_target_tstz) ar
                             WHERE ard.id_analysis_req = ar.id_analysis_req) a
                     WHERE ((l_dt_begin IS NOT NULL AND l_order_aggregate = pk_alert_constant.g_no AND
                           a.dt_begin = l_dt_begin) OR
                           (l_dt_begin IS NOT NULL AND l_order_aggregate = pk_alert_constant.g_yes) OR
                           (l_dt_begin IS NULL AND l_lab_tests_tab(exec_idx)
                           .flg_time != pk_lab_tests_constant.g_flg_time_e))
                       AND rownum = 1;
                
                    l_id_analysis_req := l_analysis_order;
                
                EXCEPTION
                    WHEN no_data_found THEN
                        IF l_lab_tests_tab(exec_idx).flg_type = 'A'
                        THEN
                            l_id_analysis_req := ts_analysis_req.next_key();
                        ELSE
                            BEGIN
                                g_error := 'GET L_ANALYSIS_ORDER 2';
                                SELECT id_analysis_req
                                  INTO l_analysis_order
                                  FROM (SELECT first_value(ard.id_analysis_req) over(ORDER BY ard.id_analysis_req DESC) id_analysis_req
                                          FROM analysis_req_det ard
                                         WHERE ard.id_analysis_req_det IN
                                               (SELECT /*+opt_estimate (table t rows=1)*/
                                                 *
                                                  FROM TABLE(l_analysis_req_det_array_f) t)
                                           AND ard.id_analysis_group = l_lab_tests_tab(exec_idx).id_analysis_group
                                           AND ard.dt_target_tstz = l_lab_tests_tab(exec_idx).exec_timestamp
                                         HAVING l_order_limit = 0
                                            OR COUNT(*) < l_order_limit
                                         GROUP BY ard.id_analysis_req) t
                                 WHERE rownum = 1;
                            
                                l_id_analysis_req := l_analysis_order;
                            
                            EXCEPTION
                                WHEN no_data_found THEN
                                    l_id_analysis_req := ts_analysis_req.next_key();
                            END;
                        END IF;
                    
                END;
            
                -- creating analysis_req_det
                <<req_det>>
                FOR req_det_idx IN 1 .. l_analysis_req_det_data.count
                LOOP
                
                    g_error := 'ID_PLAN=' || l_lab_tests_tab(exec_idx).id_order_recurrence_plan ||
                               ' ANALYSIS_REQ_DET_PLAN=' || l_analysis_req_det_data(req_det_idx).id_order_recurrence;
                    IF l_lab_tests_tab(exec_idx).id_order_recurrence_plan = l_analysis_req_det_data(req_det_idx).id_order_recurrence
                    THEN
                        IF l_prof.id IS NULL
                        THEN
                            l_prof_1 := profissional(l_analysis_req_data.id_prof_writes,
                                                     i_prof.institution,
                                                     i_prof.software);
                        
                            IF NOT pk_episode.get_episode_software(i_lang        => i_lang,
                                                                   i_prof        => l_prof_1,
                                                                   i_id_episode  => l_analysis_req_data.id_episode,
                                                                   o_id_software => l_prof.software,
                                                                   o_error       => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        END IF;
                    
                        IF l_diagnosis IS NULL
                           OR l_diagnosis.count = 0
                        THEN
                            FOR l_diagnosis_list IN c_diagnosis_list(l_analysis_req_det_data(req_det_idx).id_analysis_req_det)
                            LOOP
                                l_diagnosis.extend;
                                l_diagnosis(l_diagnosis.count) := l_diagnosis_list.id_diagnosis;
                            
                                l_diagnosis_desc.extend;
                                l_diagnosis_desc(l_diagnosis.count) := l_diagnosis_list.desc_diagnosis;
                            END LOOP;
                        END IF;
                    
                        l_diagnosis_group := pk_diagnosis.get_diag_rec(i_lang      => i_lang,
                                                                       i_prof      => l_prof,
                                                                       i_patient   => NULL,
                                                                       i_episode   => NULL,
                                                                       i_diagnosis => l_diagnosis,
                                                                       i_desc_diag => l_diagnosis_desc);
                    
                        BEGIN
                            SELECT ac.id_codification
                              INTO l_codification
                              FROM analysis_codification ac
                             WHERE ac.id_analysis_codification = l_analysis_req_det_data(req_det_idx).id_analysis_codification;
                        EXCEPTION
                            WHEN no_data_found THEN
                                l_codification := NULL;
                        END;
                    
                        IF l_analysis_req_det_data(req_det_idx).id_co_sign_order IS NOT NULL
                        THEN
                            SELECT cs.id_prof_ordered_by,
                                   pk_date_utils.date_send_tsz(i_lang, cs.dt_ordered_by, l_prof),
                                   cs.id_order_type
                              INTO l_prof_order, l_dt_order, l_order_type
                              FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                                  l_prof,
                                                                                  l_analysis_req_data.id_episode,
                                                                                  NULL,
                                                                                  NULL,
                                                                                  NULL,
                                                                                  l_analysis_req_det_data(req_det_idx).id_analysis_req_det)) cs
                             WHERE cs.id_co_sign_hist = l_analysis_req_det_data(req_det_idx).id_co_sign_order;
                        END IF;
                    
                        g_error := 'CALL CREATE_LAB_TEST_REQUEST';
                        IF NOT pk_lab_tests_core.create_lab_test_request(i_lang                    => i_lang,
                                                                    i_prof                    => l_prof,
                                                                    i_patient                 => l_analysis_req_data.id_patient,
                                                                    i_episode                 => CASE
                                                                                                     WHEN l_analysis_req_det_data(req_det_idx).flg_time_harvest =
                                                                                                           pk_lab_tests_constant.g_flg_time_e THEN
                                                                                                      l_analysis_req_data.id_episode
                                                                                                     ELSE
                                                                                                      l_analysis_req_data.id_episode_origin
                                                                                                 END,
                                                                    i_analysis_req            => l_id_analysis_req,
                                                                    i_analysis_req_det        => NULL,
                                                                    i_analysis_req_det_parent => NULL,
                                                                    i_harvest                 => NULL,
                                                                    i_analysis                => l_lab_tests_tab(exec_idx).id_analysis,
                                                                    i_analysis_group          => l_lab_tests_tab(exec_idx).id_analysis_group,
                                                                    i_dt_req                  => pk_date_utils.date_send_tsz(i_lang,
                                                                                                                             l_lab_tests_tab(exec_idx).exec_timestamp,
                                                                                                                             l_prof),
                                                                    i_flg_time                => l_analysis_req_det_data(req_det_idx).flg_time_harvest,
                                                                    i_dt_begin                => pk_date_utils.date_send_tsz(i_lang,
                                                                                                                             l_lab_tests_tab(exec_idx).exec_timestamp,
                                                                                                                             l_prof),
                                                                    i_dt_begin_limit          => pk_date_utils.date_send_tsz(i_lang,
                                                                                                                             l_analysis_req_det_data(req_det_idx).dt_final_target_tstz,
                                                                                                                             l_prof),
                                                                    i_episode_destination     => l_analysis_req_data.id_episode_destination,
                                                                    i_order_recurrence        => l_lab_tests_tab(exec_idx).id_order_recurrence_plan,
                                                                    i_priority                => l_analysis_req_det_data(req_det_idx).flg_urgency,
                                                                    i_flg_prn                 => l_analysis_req_det_data(req_det_idx).flg_prn,
                                                                    i_notes_prn               => l_analysis_req_det_data(req_det_idx).notes_prn,
                                                                    i_specimen                => l_lab_tests_tab(exec_idx).id_sample_type,
                                                                    i_body_location           => table_number(NULL),
                                                                    i_laterality              => table_varchar(NULL),
                                                                    i_collection_room         => l_analysis_req_det_data(req_det_idx).id_room,
                                                                    i_notes                   => l_analysis_req_det_data(req_det_idx).notes,
                                                                    i_notes_scheduler         => l_analysis_req_det_data(req_det_idx).notes_scheduler,
                                                                    i_notes_technician        => l_analysis_req_det_data(req_det_idx).notes_tech,
                                                                    i_notes_patient           => l_analysis_req_det_data(req_det_idx).notes_patient,
                                                                    i_diagnosis_notes         => l_analysis_req_det_data(req_det_idx).diagnosis_notes,
                                                                    i_diagnosis               => l_diagnosis_group,
                                                                    i_exec_institution        => l_analysis_req_det_data(req_det_idx).id_exec_institution,
                                                                    i_clinical_purpose        => l_analysis_req_det_data(req_det_idx).id_clinical_purpose,
                                                                    i_clinical_purpose_notes  => l_analysis_req_det_data(req_det_idx).clinical_purpose_notes,
                                                                    i_flg_col_inst            => l_analysis_req_det_data(req_det_idx).flg_col_inst,
                                                                    i_flg_fasting             => l_analysis_req_det_data(req_det_idx).flg_fasting,
                                                                    i_lab_req                 => l_analysis_req_det_data(req_det_idx).id_room_req,
                                                                    i_prof_cc                 => table_varchar(NULL),
                                                                    i_prof_bcc                => table_varchar(NULL),
                                                                    i_codification            => l_codification,
                                                                    i_health_plan             => l_analysis_req_det_data(req_det_idx).id_pat_health_plan,
                                                                    i_exemption               => l_analysis_req_det_data(req_det_idx).id_pat_exemption,
                                                                    i_prof_order              => l_prof_order,
                                                                    i_dt_order                => l_dt_order,
                                                                    i_order_type              => l_order_type,
                                                                    i_clinical_question       => table_number(NULL),
                                                                    i_response                => table_varchar(NULL),
                                                                    i_clinical_question_notes => table_varchar(NULL),
                                                                    i_clinical_decision_rule  => l_analysis_req_det_data(req_det_idx).id_cdr,
                                                                    i_task_dependency         => l_analysis_req_det_data(req_det_idx).id_task_dependency,
                                                                    i_flg_task_depending      => NULL,
                                                                    i_episode_followup_app    => NULL,
                                                                    i_schedule_followup_app   => NULL,
                                                                    i_event_followup_app      => NULL,
                                                                    o_analysis_req            => l_data,
                                                                    o_analysis_req_det        => l_data_det,
                                                                    o_analysis_req_par        => l_table_data,
                                                                    o_error                   => o_error)
                        THEN
                            RAISE g_user_exception;
                        END IF;
                    
                        l_analysis_req_det_array_f.extend;
                        l_analysis_req_det_array_f(l_analysis_req_det_array_f.count) := l_data_det;
                    
                        g_error := 'UPDATE ANALYSIS_REQ_DET';
                        ts_analysis_req_det.upd(id_analysis_req_det_in   => l_data_det,
                                                flg_req_origin_module_in => l_analysis_req_det_data(req_det_idx).flg_req_origin_module,
                                                rows_out                 => l_rows_out);
                    
                        /*--create_lab_test_recurrence was calling pk_ia_event_lab.analysis_order_new, however, this function
                        --is already called by pk_lab_tests_core.create_lab_test_request, which has just been called.
                        g_error := 'CALL TO PK_IA_EVENT_LAB.ANALYSIS_ORDER_NEW';
                        pk_ia_event_lab.analysis_order_new(i_id_analysis_req => l_id_analysis_req,
                                                           i_id_institution  => l_prof.institution);*/
                    END IF;
                END LOOP req_det;
            
                -- plan not outdated
                g_error := 'l_exec_to_process 2';
                l_exec_to_process.extend;
                l_exec_to_process(l_exec_to_process.count) := t_rec_order_recurr_plan_sts(l_lab_tests_tab(exec_idx).id_order_recurrence_plan,
                                                                                          pk_alert_constant.get_yes);
            
            END IF;
        
            g_error             := 'l_prev_analysis_req=' || l_lab_tests_tab(exec_idx).id_analysis_req;
            l_prev_analysis_req := l_lab_tests_tab(exec_idx).id_analysis_req;
        END LOOP exec;
    
        g_error := 'CALL TO PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => l_prof,
                                      i_table_name => 'ANALYSIS_REQ_DET',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        -- removing duplicates
        g_error := 'o_exec_to_process';
        SELECT t_rec_order_recurr_plan_sts(id_order_recurrence_plan, flg_status)
          BULK COLLECT
          INTO o_exec_to_process
          FROM (SELECT DISTINCT t.id_order_recurrence_plan, t.flg_status
                  FROM TABLE(CAST(l_exec_to_process AS t_tbl_order_recurr_plan_sts)) t);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              g_error_code,
                                              g_error,
                                              '',
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_LAB_TEST_ORDER',
                                              'U',
                                              '',
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_LAB_TEST_RECURRENCE',
                                              o_error);
            RETURN FALSE;
    END create_lab_test_recurrence;

    FUNCTION create_lab_test_visit
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_patient          IN patient.id_patient%TYPE,
        i_episode          IN episode.id_episode%TYPE,
        i_schedule         IN schedule_exam.id_schedule%TYPE,
        i_analysis_req_det IN table_number,
        i_dt_begin         IN VARCHAR2 DEFAULT NULL,
        i_transaction_id   IN VARCHAR2 DEFAULT NULL,
        o_episode          OUT episode.id_episode%TYPE,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_analysis_req(l_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE) IS
            SELECT ar.id_analysis_req, ard.id_analysis, ard.flg_time_harvest
              FROM analysis_req_det ard, analysis_req ar
             WHERE ard.id_analysis_req_det = l_analysis_req_det
               AND ard.id_analysis_req = ar.id_analysis_req;
    
        CURSOR c_analysis_schedule(l_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE) IS
            SELECT DISTINCT s.id_schedule
              FROM analysis_req_det ard,
                   analysis_req ar,
                   (SELECT *
                      FROM TABLE(pk_schedule_lab.get_today_lab_appoints(i_lang, i_prof))) s
             WHERE ard.id_analysis_req_det = l_analysis_req_det
               AND ard.id_analysis_req = ar.id_analysis_req
               AND ar.id_analysis_req = s.id_analysis_req(+);
    
        l_analysis_req      c_analysis_req%ROWTYPE;
        l_analysis_schedule c_analysis_schedule%ROWTYPE;
    
        l_episode        episode.id_episode%TYPE;
        l_episode_origin episode.id_episode%TYPE;
        l_visit          visit.id_visit%TYPE;
    
        l_dt_begin visit.dt_begin_tstz%TYPE;
    
        l_id_external_system epis_ext_sys.id_epis_ext_sys%TYPE;
        l_value              epis_ext_sys.value%TYPE;
        l_cod_epis_type_ext  epis_ext_sys.cod_epis_type_ext%TYPE;
    
        l_rows_out table_varchar;
    
        l_transaction_id VARCHAR2(1000 CHAR);
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        -- gets a new transaction ID and begins the transaction (for the Scheduler 3.0 transactions)
        g_error          := 'CALL PK_SCHEDULE_API_UPSTREAM.BEGIN_NEW_TRANSACTION';
        l_transaction_id := pk_schedule_api_upstream.begin_new_transaction(i_transaction_id, i_prof);
    
        l_dt_begin := nvl(pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin, NULL), g_sysdate_tstz);
    
        BEGIN
            g_error := 'OPEN C_EXAM_SCHEDULE';
            OPEN c_analysis_schedule(i_analysis_req_det(1));
            FETCH c_analysis_schedule
                INTO l_analysis_schedule;
            CLOSE c_analysis_schedule;
        EXCEPTION
            WHEN OTHERS THEN
                l_analysis_schedule := NULL;
        END;
    
        IF i_episode IS NULL
        THEN
            g_error := 'CALL TO PK_VISIT.CREATE_VISIT';
            IF NOT pk_visit.call_create_visit(i_lang                 => i_lang,
                                              i_id_pat               => i_patient,
                                              i_id_institution       => i_prof.institution,
                                              i_id_sched             => nvl(i_schedule, l_analysis_schedule.id_schedule),
                                              i_id_professional      => i_prof,
                                              i_id_episode           => i_episode,
                                              i_external_cause       => NULL,
                                              i_health_plan          => NULL,
                                              i_epis_type            => pk_lab_tests_constant.g_episode_type_lab,
                                              i_dep_clin_serv        => NULL,
                                              i_origin               => NULL,
                                              i_flg_ehr              => pk_lab_tests_constant.g_no,
                                              i_dt_begin             => l_dt_begin,
                                              i_flg_appointment_type => NULL,
                                              i_transaction_id       => l_transaction_id,
                                              i_ext_value            => NULL,
                                              i_id_prof_in_charge    => NULL,
                                              o_episode              => l_episode,
                                              o_error                => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            o_episode := l_episode;
        
            g_error := 'I_ANALYSIS_REQ_DET IS NOT NULL';
            IF i_analysis_req_det IS NOT NULL
               AND i_analysis_req_det.count > 0
            THEN
                SELECT ar.id_episode_origin
                  INTO l_episode_origin
                  FROM analysis_req_det ard, analysis_req ar
                 WHERE ard.id_analysis_req_det = i_analysis_req_det(1)
                   AND ard.id_analysis_req = ar.id_analysis_req;
            
                BEGIN
                    SELECT ees.id_external_sys, ees.value, ees.cod_epis_type_ext
                      INTO l_id_external_system, l_value, l_cod_epis_type_ext
                      FROM epis_ext_sys ees
                     WHERE ees.id_episode = l_episode_origin;
                EXCEPTION
                    WHEN no_data_found THEN
                        l_id_external_system := NULL;
                        l_value              := NULL;
                        l_cod_epis_type_ext  := NULL;
                END;
            
                IF l_id_external_system IS NOT NULL
                THEN
                
                    DELETE FROM epis_ext_sys
                     WHERE id_episode = l_episode
                       AND id_external_sys = l_id_external_system
                       AND id_epis_type = pk_lab_tests_constant.g_episode_type_lab
                       AND VALUE IS NULL;
                
                    INSERT INTO epis_ext_sys
                        (id_epis_ext_sys,
                         id_external_sys,
                         id_episode,
                         VALUE,
                         id_institution,
                         id_epis_type,
                         cod_epis_type_ext)
                    VALUES
                        (seq_epis_ext_sys.nextval,
                         l_id_external_system,
                         l_episode,
                         l_value,
                         i_prof.institution,
                         pk_lab_tests_constant.g_episode_type_lab,
                         l_cod_epis_type_ext);
                END IF;
            
                SELECT e.id_visit
                  INTO l_visit
                  FROM episode e
                 WHERE e.id_episode = l_episode;
            
                FOR i IN 1 .. i_analysis_req_det.count
                LOOP
                
                    g_error := 'OPEN C_LAB_TEST_REQ';
                    OPEN c_analysis_req(i_analysis_req_det(i));
                    FETCH c_analysis_req
                        INTO l_analysis_req;
                    CLOSE c_analysis_req;
                
                    g_error := 'UPDATE ANALYSIS_REQ';
                    ts_analysis_req.upd(id_analysis_req_in => l_analysis_req.id_analysis_req,
                                        id_episode_in      => l_episode,
                                        id_visit_in        => l_visit,
                                        flg_status_in      => pk_lab_tests_constant.g_analysis_pending,
                                        rows_out           => l_rows_out);
                
                    g_error := 'CALL PROCESS_UPDATE';
                    t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'ANALYSIS_REQ',
                                                  i_rowids     => l_rows_out,
                                                  o_error      => o_error);
                
                    -- inserir em log de estados
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => l_episode,
                                            i_flg_status => pk_lab_tests_constant.g_analysis_pending,
                                            i_id_record  => l_analysis_req.id_analysis_req,
                                            i_flg_type   => pk_lab_tests_constant.g_analysis_type_req,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    l_rows_out := NULL;
                
                    g_error := 'UPDATE ANALYSIS_REQ_DET';
                    ts_analysis_req_det.upd(id_analysis_req_det_in => i_analysis_req_det(i),
                                            flg_status_in          => pk_lab_tests_constant.g_analysis_pending,
                                            id_prof_last_update_in => i_prof.id,
                                            dt_last_update_tstz_in => g_sysdate_tstz,
                                            rows_out               => l_rows_out);
                
                    g_error := 'CALL PROCESS_UPDATE';
                    t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'ANALYSIS_REQ_DET',
                                                  i_rowids     => l_rows_out,
                                                  o_error      => o_error);
                
                    -- inserir em log de estados
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => l_episode,
                                            i_flg_status => pk_lab_tests_constant.g_analysis_pending,
                                            i_id_record  => i_analysis_req_det(i),
                                            i_flg_type   => pk_lab_tests_constant.g_analysis_type_det,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    g_error := 'CALL PK_LAB_TESTS_HARVEST_CORE.CREATE_HARVEST_SUSPENDED';
                    IF NOT pk_lab_tests_harvest_core.create_harvest_suspended(i_lang             => i_lang,
                                                                              i_prof             => i_prof,
                                                                              i_analysis_req_det => i_analysis_req_det(i),
                                                                              o_error            => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    g_error := 'CALL TO PK_VISIT.UPDATE_EPIS_INFO';
                    IF NOT pk_visit.upd_epis_info_analysis(i_lang                   => i_lang,
                                                           i_id_episode             => l_episode,
                                                           i_id_prof                => i_prof,
                                                           i_dt_first_analysis_exec => NULL,
                                                           i_dt_first_analysis_req  => nvl(i_dt_begin,
                                                                                           pk_date_utils.date_send_tsz(i_lang,
                                                                                                                       g_sysdate_tstz,
                                                                                                                       i_prof)),
                                                           i_prof_cat_type          => pk_prof_utils.get_category(i_lang,
                                                                                                                  i_prof),
                                                           o_error                  => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    g_error := 'PK_LAB_TESTS_API_DB.SET_LAB_TEST_GRID_TASK';
                    IF NOT pk_lab_tests_api_db.set_lab_test_grid_task(i_lang             => i_lang,
                                                                      i_prof             => i_prof,
                                                                      i_patient          => i_patient,
                                                                      i_episode          => l_episode,
                                                                      i_analysis_req     => l_analysis_req.id_analysis_req,
                                                                      i_analysis_req_det => i_analysis_req_det(i),
                                                                      o_error            => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    g_error := 'CALL TO PK_VISIT.SET_FIRST_OBS';
                    IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                                  i_id_episode          => l_episode,
                                                  i_pat                 => i_patient,
                                                  i_prof                => i_prof,
                                                  i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                                  i_dt_last_interaction => l_dt_begin,
                                                  i_dt_first_obs        => l_dt_begin,
                                                  o_error               => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    g_error := 'CALL SET_CODING_ELEMENT_MDM';
                    IF NOT pk_medical_decision.set_cod_elem_mdm_1_no_commit(i_lang   => i_lang,
                                                                            i_prof   => i_prof,
                                                                            i_epis   => l_episode,
                                                                            i_origin => 'L',
                                                                            o_error  => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END LOOP;
            END IF;
        END IF;
    
        --remote scheduler commit. Doesn't affect PFH.
        IF i_transaction_id IS NULL
        THEN
            pk_schedule_api_upstream.do_commit(l_transaction_id, i_prof);
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_LAB_TEST_VISIT',
                                              o_error);
            pk_schedule_api_upstream.do_rollback(l_transaction_id, i_prof);
            RETURN FALSE;
    END create_lab_test_visit;

    FUNCTION set_lab_test_order
    (
        i_lang                    IN language.id_language%TYPE, --1
        i_prof                    IN profissional,
        i_patient                 IN patient.id_patient%TYPE,
        i_episode                 IN episode.id_episode%TYPE,
        i_analysis_req            IN analysis_req.id_analysis_req%TYPE, --5
        i_analysis_req_det        IN table_number,
        i_analysis                IN table_number,
        i_analysis_group          IN table_table_varchar,
        i_flg_type                IN table_varchar,
        i_flg_time                IN table_varchar, --10
        i_dt_begin                IN table_varchar,
        i_dt_begin_limit          IN table_varchar,
        i_order_recurrence        IN table_number,
        i_priority                IN table_varchar,
        i_flg_prn                 IN table_varchar, --15
        i_notes_prn               IN table_varchar,
        i_specimen                IN table_number,
        i_body_location           IN table_table_number,
        i_laterality              IN table_table_varchar,
        i_collection_room         IN table_number, --20
        i_notes                   IN table_varchar,
        i_notes_scheduler         IN table_varchar,
        i_notes_technician        IN table_varchar,
        i_notes_patient           IN table_varchar,
        i_diagnosis               IN table_clob, --25
        i_exec_institution        IN table_number,
        i_clinical_purpose        IN table_number,
        i_clinical_purpose_notes  IN table_varchar,
        i_flg_col_inst            IN table_varchar,
        i_flg_fasting             IN table_varchar, --30
        i_lab_req                 IN table_number,
        i_prof_cc                 IN table_table_varchar,
        i_prof_bcc                IN table_table_varchar,
        i_codification            IN table_number,
        i_health_plan             IN table_number, --35
        i_exemption               IN table_number,
        i_prof_order              IN table_number,
        i_dt_order                IN table_varchar,
        i_order_type              IN table_number,
        i_clinical_question       IN table_table_number, --40
        i_response                IN table_table_varchar,
        i_clinical_question_notes IN table_table_varchar,
        i_clinical_decision_rule  IN table_number,
        i_flg_origin_req          IN analysis_req_det.flg_req_origin_module%TYPE DEFAULT 'D',
        i_task_dependency         IN table_number, --45
        i_flg_task_depending      IN table_varchar,
        i_episode_followup_app    IN table_number,
        i_schedule_followup_app   IN table_number,
        i_event_followup_app      IN table_number,
        o_error                   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_analysis table_number := table_number();
        l_specimen table_number := table_number();
    
        l_body_location table_number := table_number();
        l_laterality    table_varchar := table_varchar();
    
        l_prof_cc  table_varchar := table_varchar();
        l_prof_bcc table_varchar := table_varchar();
    
        l_clinical_question       table_number := table_number();
        l_response                table_varchar := table_varchar();
        l_clinical_question_notes table_varchar := table_varchar();
    
        l_analysis_req     analysis_req.id_analysis_req%TYPE;
        l_analysis_req_det analysis_req_det.id_analysis_req_det%TYPE;
        l_analysis_req_par table_number := table_number();
    
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        g_error := 'CALL PK_LAB_TESTS_CORE.UPDATE_LAB_TEST_ORDER';
        IF NOT pk_lab_tests_core.update_lab_test_order(i_lang                    => i_lang,
                                                       i_prof                    => i_prof,
                                                       i_episode                 => i_episode,
                                                       i_analysis_req            => i_analysis_req,
                                                       i_analysis_req_det        => i_analysis_req_det,
                                                       i_flg_time                => NULL,
                                                       i_dt_begin                => i_dt_begin,
                                                       i_priority                => i_priority,
                                                       i_flg_prn                 => i_flg_prn,
                                                       i_notes_prn               => i_notes_prn,
                                                       i_specimen                => i_specimen,
                                                       i_body_location           => i_body_location,
                                                       i_laterality              => i_laterality,
                                                       i_collection_room         => i_collection_room,
                                                       i_notes                   => i_notes,
                                                       i_notes_scheduler         => i_notes_scheduler,
                                                       i_notes_technician        => i_notes_technician,
                                                       i_notes_patient           => i_notes_patient,
                                                       i_diagnosis_notes         => NULL,
                                                       i_diagnosis               => pk_diagnosis.get_diag_rec(i_lang   => i_lang,
                                                                                                              i_prof   => i_prof,
                                                                                                              i_params => i_diagnosis),
                                                       i_exec_institution        => i_exec_institution,
                                                       i_clinical_purpose        => i_clinical_purpose,
                                                       i_clinical_purpose_notes  => i_clinical_purpose_notes,
                                                       i_flg_col_inst            => i_flg_col_inst,
                                                       i_flg_fasting             => i_flg_fasting,
                                                       i_lab_req                 => i_lab_req,
                                                       i_prof_cc                 => i_prof_cc,
                                                       i_prof_bcc                => i_prof_bcc,
                                                       i_codification            => i_codification,
                                                       i_health_plan             => i_health_plan,
                                                       i_exemption               => i_exemption,
                                                       i_prof_order              => i_prof_order,
                                                       i_dt_order                => i_dt_order,
                                                       i_order_type              => i_order_type,
                                                       i_clinical_question       => i_clinical_question,
                                                       i_response                => i_response,
                                                       i_clinical_question_notes => i_clinical_question_notes,
                                                       o_error                   => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'OPEN LOOP';
        FOR i IN 1 .. i_analysis_req_det.count
        LOOP
            IF i_analysis_req_det(i) IS NULL
            THEN
                l_analysis := table_number();
                l_specimen := table_number();
                IF i_flg_type(i) = 'A'
                THEN
                    l_analysis.extend;
                    l_analysis(1) := i_analysis(i);
                
                    l_specimen.extend;
                    l_specimen(1) := i_specimen(i);
                ELSE
                    IF i_analysis_group(i).count > 0
                    THEN
                        FOR j IN i_analysis_group(i).first .. i_analysis_group(i).last
                        LOOP
                            l_analysis.extend;
                            l_analysis(j) := pk_utils.str_token(i_analysis_group(i) (j), 1, '|');
                        
                            l_specimen.extend;
                            l_specimen(j) := pk_utils.str_token(i_analysis_group(i) (j), 2, '|');
                        END LOOP;
                    END IF;
                END IF;
            
                l_body_location := table_number();
                IF i_body_location(i).count > 0
                THEN
                    FOR j IN i_body_location(i).first .. i_body_location(i).last
                    LOOP
                        l_body_location.extend;
                        l_body_location(j) := i_body_location(i) (j);
                    END LOOP;
                END IF;
            
                l_laterality := table_varchar();
                IF i_laterality(i).count > 0
                THEN
                    FOR j IN i_laterality(i).first .. i_laterality(i).last
                    LOOP
                        l_laterality.extend;
                        l_laterality(j) := i_laterality(i) (j);
                    END LOOP;
                END IF;
            
                l_prof_cc := table_varchar();
                IF i_prof_cc(i).count > 0
                THEN
                    FOR j IN i_prof_cc(i).first .. i_prof_cc(i).last
                    LOOP
                        l_prof_cc.extend;
                        l_prof_cc(j) := i_prof_cc(i) (j);
                    END LOOP;
                END IF;
            
                l_prof_bcc := table_varchar();
                IF i_prof_bcc(i).count > 0
                THEN
                    FOR j IN i_prof_bcc(i).first .. i_prof_bcc(i).last
                    LOOP
                        l_prof_bcc.extend;
                        l_prof_bcc(j) := i_prof_bcc(i) (j);
                    END LOOP;
                END IF;
            
                l_clinical_question := table_number();
                IF i_clinical_question(i).count > 0
                THEN
                    FOR j IN i_clinical_question(i).first .. i_clinical_question(i).last
                    LOOP
                        l_clinical_question.extend;
                        l_clinical_question(j) := i_clinical_question(i) (j);
                    END LOOP;
                END IF;
            
                l_response := table_varchar();
                IF i_response(i).count > 0
                THEN
                    FOR j IN i_response(i).first .. i_response(i).last
                    LOOP
                        l_response.extend;
                        l_response(j) := i_response(i) (j);
                    END LOOP;
                END IF;
            
                l_clinical_question_notes := table_varchar();
                IF i_clinical_question_notes(i).count > 0
                THEN
                    FOR j IN i_clinical_question_notes(i).first .. i_clinical_question_notes(i).last
                    LOOP
                        l_clinical_question_notes.extend;
                        l_clinical_question_notes(j) := i_clinical_question_notes(i) (j);
                    END LOOP;
                END IF;
            
                FOR j IN 1 .. l_analysis.count
                LOOP
                    IF NOT pk_lab_tests_core.create_lab_test_request(i_lang                    => i_lang,
                                                                     i_prof                    => i_prof,
                                                                     i_patient                 => i_patient,
                                                                     i_episode                 => i_episode,
                                                                     i_analysis_req            => i_analysis_req,
                                                                     i_analysis_req_det        => NULL,
                                                                     i_analysis_req_det_parent => NULL,
                                                                     i_harvest                 => NULL,
                                                                     i_analysis                => l_analysis(j),
                                                                     i_analysis_group          => CASE
                                                                                                      WHEN i_flg_type(i) = 'A' THEN
                                                                                                       NULL
                                                                                                      ELSE
                                                                                                       i_analysis(i)
                                                                                                  END,
                                                                     i_dt_req                  => NULL,
                                                                     i_flg_time                => i_flg_time(i),
                                                                     i_dt_begin                => i_dt_begin(i),
                                                                     i_dt_begin_limit          => i_dt_begin_limit(i),
                                                                     i_episode_destination     => NULL,
                                                                     i_order_recurrence        => i_order_recurrence(i),
                                                                     i_priority                => i_priority(i),
                                                                     i_flg_prn                 => i_flg_prn(i),
                                                                     i_notes_prn               => i_notes_prn(i),
                                                                     i_specimen                => l_specimen(j),
                                                                     i_body_location           => l_body_location,
                                                                     i_laterality              => l_laterality,
                                                                     i_collection_room         => i_collection_room(i),
                                                                     i_notes                   => i_notes(i),
                                                                     i_notes_scheduler         => i_notes_scheduler(i),
                                                                     i_notes_technician        => i_notes_technician(i),
                                                                     i_notes_patient           => i_notes_patient(i),
                                                                     i_diagnosis_notes         => NULL,
                                                                     i_diagnosis               => pk_diagnosis.get_diag_rec(i_lang   => i_lang,
                                                                                                                            i_prof   => i_prof,
                                                                                                                            i_params => i_diagnosis(i)),
                                                                     i_exec_institution        => i_exec_institution(i),
                                                                     i_clinical_purpose        => i_clinical_purpose(i),
                                                                     i_clinical_purpose_notes  => i_clinical_purpose_notes(i),
                                                                     i_flg_col_inst            => i_flg_col_inst(i),
                                                                     i_flg_fasting             => i_flg_fasting(i),
                                                                     i_lab_req                 => i_lab_req(i),
                                                                     i_prof_cc                 => l_prof_cc,
                                                                     i_prof_bcc                => l_prof_bcc,
                                                                     i_codification            => i_codification(i),
                                                                     i_health_plan             => i_health_plan(i),
                                                                     i_exemption               => i_exemption(i),
                                                                     i_prof_order              => i_prof_order(i),
                                                                     i_dt_order                => i_dt_order(i),
                                                                     i_order_type              => i_order_type(i),
                                                                     i_clinical_question       => l_clinical_question,
                                                                     i_response                => l_response,
                                                                     i_clinical_question_notes => l_clinical_question_notes,
                                                                     i_clinical_decision_rule  => i_clinical_decision_rule(i),
                                                                     i_flg_origin_req          => i_flg_origin_req,
                                                                     i_task_dependency         => i_task_dependency(i),
                                                                     i_flg_task_depending      => i_flg_task_depending(i),
                                                                     i_episode_followup_app    => i_episode_followup_app(i),
                                                                     i_schedule_followup_app   => i_schedule_followup_app(i),
                                                                     i_event_followup_app      => i_event_followup_app(i),
                                                                     o_analysis_req            => l_analysis_req,
                                                                     o_analysis_req_det        => l_analysis_req_det,
                                                                     o_analysis_req_par        => l_analysis_req_par,
                                                                     o_error                   => o_error)
                    THEN
                        IF o_error.err_desc IS NOT NULL
                        THEN
                            g_error_code := o_error.ora_sqlcode;
                            g_error      := o_error.ora_sqlerrm;
                        
                            RAISE g_user_exception;
                        ELSE
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              g_error_code,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_LAB_TEST_ORDER',
                                              'U',
                                              g_error,
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_LAB_TEST_ORDER',
                                              o_error);
            RETURN FALSE;
    END set_lab_test_order;

    FUNCTION set_lab_test_result
    (
        i_lang                       IN language.id_language%TYPE, --1
        i_prof                       IN profissional,
        i_patient                    IN analysis_result.id_patient%TYPE,
        i_episode                    IN analysis_result.id_episode%TYPE,
        i_analysis                   IN analysis.id_analysis%TYPE, --5
        i_sample_type                IN sample_type.id_sample_type%TYPE,
        i_analysis_parameter         IN table_number,
        i_analysis_param             IN table_number,
        i_analysis_req_det           IN analysis_req_det.id_analysis_req_det%TYPE,
        i_analysis_req_par           IN table_number, --10
        i_analysis_result_par        IN table_number,
        i_analysis_result_par_parent IN table_number,
        i_flg_type                   IN table_varchar,
        i_harvest                    IN harvest.id_harvest%TYPE,
        i_dt_sample                  IN VARCHAR2, --15
        i_prof_req                   IN analysis_result.id_prof_req%TYPE,
        i_dt_analysis_result         IN VARCHAR2,
        i_flg_result_origin          IN analysis_result.flg_result_origin%TYPE,
        i_result_origin_notes        IN analysis_result.result_origin_notes%TYPE,
        i_result_notes               IN analysis_result.notes%TYPE, --20
        i_loinc_code                 IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        i_dt_ext_registry            IN table_varchar DEFAULT NULL,
        i_instit_origin              IN table_number DEFAULT NULL,
        i_result_value_1             IN table_varchar,
        i_result_value_2             IN table_number DEFAULT NULL, --25
        i_analysis_desc              IN table_number,
        i_doc_external               IN table_table_number DEFAULT NULL,
        i_doc_type                   IN table_table_number DEFAULT NULL,
        i_doc_ori_type               IN table_table_number DEFAULT NULL,
        i_title                      IN table_table_varchar DEFAULT NULL, --30
        i_comparator                 IN table_varchar DEFAULT NULL,
        i_separator                  IN table_varchar DEFAULT NULL,
        i_standard_code              IN table_varchar DEFAULT NULL,
        i_unit_measure               IN table_number,
        i_desc_unit_measure          IN table_varchar DEFAULT NULL, --35
        i_result_status              IN table_number,
        i_ref_val                    IN table_varchar DEFAULT NULL,
        i_ref_val_min                IN table_varchar,
        i_ref_val_max                IN table_varchar,
        i_parameter_notes            IN table_varchar, --40
        i_interface_notes            IN table_varchar DEFAULT NULL,
        i_laboratory                 IN table_number DEFAULT NULL,
        i_laboratory_desc            IN table_varchar DEFAULT NULL,
        i_laboratory_short_desc      IN table_varchar DEFAULT NULL,
        i_coding_system              IN table_varchar DEFAULT NULL, --45
        i_method                     IN table_varchar DEFAULT NULL,
        i_equipment                  IN table_varchar DEFAULT NULL,
        i_abnormality                IN table_number DEFAULT NULL,
        i_abnormality_nature         IN table_number DEFAULT NULL,
        i_prof_validation            IN table_number DEFAULT NULL, --50
        i_dt_validation              IN table_varchar DEFAULT NULL,
        i_flg_intf_orig              IN analysis_result_par.flg_intf_orig%TYPE DEFAULT 'N',
        i_flg_orig_analysis          IN analysis_result.flg_orig_analysis%TYPE,
        i_clinical_decision_rule     IN NUMBER,
        o_result                     OUT VARCHAR2,
        o_error                      OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_analysis_calculator IS
            SELECT arpc.id_analysis_res_calc, arc.id_analysis_parameter
              FROM analysis_res_par_calc arpc, analysis_res_calculator arc
             WHERE arpc.id_analysis_parameter IN (SELECT id_analysis_parameter
                                                    FROM (SELECT arp.id_analysis_parameter,
                                                                 row_number() over(PARTITION BY arp.id_analysis_req_par ORDER BY arp.dt_analysis_result_par_tstz) rn
                                                            FROM analysis_result_par arp, analysis_result ar
                                                           WHERE ar.id_analysis_req_det = i_analysis_req_det
                                                             AND arp.id_analysis_result = ar.id_analysis_result)
                                                   WHERE rn = 1)
               AND arpc.id_analysis_res_calc = arc.id_analysis_res_calc;
    
        CURSOR c_analysis_parameter IS
            SELECT arp.id_analysis_req_par, arp.id_analysis_parameter
              FROM analysis_req_det ard, analysis_req_par arp
             WHERE ard.id_analysis_req_det = i_analysis_req_det
               AND ard.id_analysis_req_det = arp.id_analysis_req_det;
    
        l_analysis_calculator c_analysis_calculator%ROWTYPE;
    
        l_set_lab_test_result NUMBER := 1;
    
        l_episode episode.id_episode%TYPE;
    
        l_harvest harvest.id_harvest%TYPE;
    
        l_analysis_req_det            analysis_req_det%ROWTYPE;
        l_analysis_result_par_default analysis_result_par%ROWTYPE;
        l_analysis_req_par            analysis_req_par.id_analysis_req_par%TYPE;
        l_analysis_result_par         analysis_result_par.id_analysis_result_par%TYPE;
        l_analysis_parameter          analysis_parameter.id_analysis_parameter%TYPE;
        l_analysis_param              analysis_param.id_analysis_param%TYPE;
    
        l_analysis_result_par_array table_number := table_number();
        l_result                    table_number := table_number();
    
        l_result_calculated VARCHAR2(1000 CHAR);
    
        l_lab_tests_calculator sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_CALCULATOR', i_prof);
    
        l_doc_external table_number := table_number();
        l_doc_type     table_number := table_number();
        l_doc_ori_type table_number := table_number();
        l_title        table_varchar := table_varchar();
    
        l_rows_out table_varchar := table_varchar();
    
        l_id_result analysis_result.id_analysis_result%TYPE;
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        IF i_flg_type.count > 0
        THEN
            FOR i IN 1 .. i_flg_type.count
            LOOP
                IF i_flg_intf_orig = pk_lab_tests_constant.g_yes
                THEN
                    IF i_flg_type(i) IS NULL
                    THEN
                        BEGIN
                            SELECT 1
                              INTO l_set_lab_test_result
                              FROM analysis_req_par arp, analysis_result_par aresp, analysis_result ar
                             WHERE arp.id_analysis_req_det = i_analysis_req_det
                               AND arp.id_analysis_parameter = i_analysis_parameter(i)
                               AND arp.id_analysis_req_par = aresp.id_analysis_req_par
                               AND aresp.id_analysis_result = ar.id_analysis_result;
                        
                        EXCEPTION
                            WHEN no_data_found THEN
                                l_set_lab_test_result := 0;
                            WHEN too_many_rows THEN
                                g_error := 'In case of multiple values for the same result, the lab_test has more than one result for the same unit_measure and parameter: i_analysis_parameter ' ||
                                           i_analysis_parameter(i);
                                RAISE g_other_exception;
                        END;
                    
                        BEGIN
                            SELECT arp.id_analysis_result_par
                              INTO l_analysis_result_par
                              FROM analysis_result_par arp, analysis_result ar
                             WHERE ar.id_analysis_req_det = i_analysis_req_det
                               AND ar.id_analysis_result = arp.id_analysis_result
                               AND arp.id_analysis_parameter = i_analysis_parameter(i);
                        EXCEPTION
                            WHEN no_data_found THEN
                                l_analysis_result_par := NULL;
                            WHEN too_many_rows THEN
                                g_error := 'In case of multiple values for the same result, the lab_test has more than one result for the same unit_measure and parameter: i_analysis_parameter ' ||
                                           i_analysis_parameter(i);
                                RAISE g_other_exception;
                            
                        END;
                    END IF;
                
                    BEGIN
                        SELECT arp.id_analysis_req_par
                          INTO l_analysis_req_par
                          FROM analysis_req_par arp
                         WHERE arp.id_analysis_req_det = i_analysis_req_det
                           AND arp.id_analysis_parameter = i_analysis_parameter(i);
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_analysis_req_par := NULL;
                    END;
                
                    IF i_harvest IS NULL
                    THEN
                        BEGIN
                            g_error := 'GET ANALYSIS HARVEST COUNT';
                            SELECT ah.id_harvest
                              INTO l_harvest
                              FROM analysis_harvest ah, harvest h
                             WHERE ah.id_analysis_req_det = i_analysis_req_det
                               AND ah.flg_status = pk_lab_tests_constant.g_active
                               AND ah.id_harvest = h.id_harvest
                               AND h.flg_status != pk_lab_tests_constant.g_harvest_cancel;
                        EXCEPTION
                            WHEN too_many_rows THEN
                                g_error := 'Analysis has more than one harvest, please specify which harvest to use.';
                                RAISE g_other_exception;
                            WHEN no_data_found THEN
                                g_error := 'Given harvest is cancelled';
                                RAISE g_other_exception;
                        END;
                    ELSE
                        BEGIN
                            g_error := 'GET ANALYSIS HARVEST COUNT';
                            SELECT h.id_harvest
                              INTO l_harvest
                              FROM harvest h
                             WHERE h.id_harvest = i_harvest
                               AND h.flg_status NOT IN
                                   (pk_lab_tests_constant.g_harvest_pending, pk_lab_tests_constant.g_harvest_waiting);
                        EXCEPTION
                            WHEN no_data_found THEN
                                g_error := 'Given harvest is not completed';
                                RAISE g_other_exception;
                        END;
                    
                        BEGIN
                            g_error := 'GET ANALYSIS HARVEST COUNT';
                            SELECT h.id_harvest
                              INTO l_harvest
                              FROM harvest h
                             WHERE h.id_harvest = i_harvest
                               AND h.flg_status != pk_lab_tests_constant.g_harvest_cancel;
                        EXCEPTION
                            WHEN no_data_found THEN
                                g_error := 'Given harvest is cancelled';
                                RAISE g_other_exception;
                        END;
                    END IF;
                END IF;
            
                IF i_doc_external IS NOT NULL
                THEN
                    l_doc_external := table_number();
                    IF i_doc_external(i).count > 0
                    THEN
                        FOR j IN i_doc_external(i).first .. i_doc_external(i).last
                        LOOP
                            l_doc_external.extend;
                            l_doc_external(j) := i_doc_external(i) (j);
                        END LOOP;
                    END IF;
                END IF;
            
                IF i_doc_type IS NOT NULL
                THEN
                    l_doc_type := table_number();
                    IF i_doc_type(i).count > 0
                    THEN
                        FOR j IN i_doc_type(i).first .. i_doc_type(i).last
                        LOOP
                            l_doc_type.extend;
                            l_doc_type(j) := i_doc_type(i) (j);
                        END LOOP;
                    END IF;
                END IF;
            
                IF i_doc_ori_type IS NOT NULL
                THEN
                    l_doc_ori_type := table_number();
                    IF i_doc_ori_type(i).count > 0
                    THEN
                        FOR j IN i_doc_ori_type(i).first .. i_doc_ori_type(i).last
                        LOOP
                            l_doc_ori_type.extend;
                            l_doc_ori_type(j) := i_doc_ori_type(i) (j);
                        END LOOP;
                    END IF;
                END IF;
            
                IF i_title IS NOT NULL
                THEN
                    l_title := table_varchar();
                    IF i_title(i).count > 0
                    THEN
                        FOR j IN i_title(i).first .. i_title(i).last
                        LOOP
                            l_title.extend;
                            l_title(j) := i_title(i) (j);
                        END LOOP;
                    END IF;
                END IF;
            
                IF i_flg_type(i) = 'N'
                   OR l_set_lab_test_result = 0
                THEN
                    g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_RESULT';
                    IF NOT pk_lab_tests_core.set_lab_test_result(i_lang                       => i_lang,
                                                            i_prof                       => i_prof,
                                                            i_patient                    => i_patient,
                                                            i_episode                    => i_episode,
                                                            i_analysis                   => i_analysis,
                                                            i_sample_type                => i_sample_type,
                                                            i_analysis_parameter         => i_analysis_parameter(i),
                                                            i_analysis_param             => CASE
                                                                                                WHEN i_flg_intf_orig =
                                                                                                     pk_lab_tests_constant.g_yes THEN
                                                                                                 CASE
                                                                                                     WHEN i_analysis_param IS NOT NULL
                                                                                                          AND i_analysis_param.count > 0 THEN
                                                                                                      i_analysis_param(i)
                                                                                                     ELSE
                                                                                                      NULL
                                                                                                 END
                                                                                                ELSE
                                                                                                 i_analysis_param(i)
                                                                                            END,
                                                            i_analysis_req_det           => i_analysis_req_det,
                                                            i_analysis_req_par           => nvl(i_analysis_req_par(i), l_analysis_req_par),
                                                            i_analysis_result_par_parent => CASE
                                                                                                WHEN i_analysis_result_par_parent IS NOT NULL
                                                                                                     AND i_analysis_result_par_parent.count > 0 THEN
                                                                                                 i_analysis_result_par_parent(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_harvest                    => nvl(i_harvest, l_harvest),
                                                            i_dt_sample                  => i_dt_sample,
                                                            i_prof_req                   => i_prof_req,
                                                            i_dt_analysis_result         => i_dt_analysis_result,
                                                            i_flg_result_origin          => i_flg_result_origin,
                                                            i_result_origin_notes        => i_result_origin_notes,
                                                            i_result_notes               => i_result_notes,
                                                            i_loinc_code                 => i_loinc_code,
                                                            i_dt_ext_registry            => CASE
                                                                                                WHEN i_dt_ext_registry IS NOT NULL
                                                                                                     AND i_dt_ext_registry.count > 0 THEN
                                                                                                 i_dt_ext_registry(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_instit_origin              => CASE
                                                                                                WHEN i_instit_origin IS NOT NULL
                                                                                                     AND i_instit_origin.count > 0 THEN
                                                                                                 i_instit_origin(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_result_value_1             => i_result_value_1(i),
                                                            i_result_value_2             => CASE
                                                                                                WHEN i_result_value_2 IS NOT NULL
                                                                                                     AND i_result_value_2.count > 0 THEN
                                                                                                 i_result_value_2(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_analysis_desc              => CASE
                                                                                                WHEN i_analysis_desc(i) = -1 THEN
                                                                                                 NULL
                                                                                                ELSE
                                                                                                 i_analysis_desc(i)
                                                                                            END,
                                                            i_doc_external               => l_doc_external,
                                                            i_comparator                 => CASE
                                                                                                WHEN i_comparator IS NOT NULL
                                                                                                     AND i_comparator.count > 0 THEN
                                                                                                 i_comparator(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_separator                  => CASE
                                                                                                WHEN i_separator IS NOT NULL
                                                                                                     AND i_separator.count > 0 THEN
                                                                                                 i_separator(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_standard_code              => CASE
                                                                                                WHEN i_standard_code IS NOT NULL
                                                                                                     AND i_standard_code.count > 0 THEN
                                                                                                 i_standard_code(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_unit_measure               => i_unit_measure(i),
                                                            i_desc_unit_measure          => CASE
                                                                                                WHEN i_desc_unit_measure IS NOT NULL
                                                                                                     AND i_desc_unit_measure.count > 0 THEN
                                                                                                 i_desc_unit_measure(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_result_status              => i_result_status(i),
                                                            i_ref_val                    => CASE
                                                                                                WHEN i_ref_val IS NOT NULL
                                                                                                     AND i_ref_val.count > 0 THEN
                                                                                                 i_ref_val(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_ref_val_min                => i_ref_val_min(i),
                                                            i_ref_val_max                => i_ref_val_max(i),
                                                            i_parameter_notes            => i_parameter_notes(i),
                                                            i_interface_notes            => CASE
                                                                                                WHEN i_interface_notes IS NOT NULL
                                                                                                     AND i_interface_notes.count > 0 THEN
                                                                                                 i_interface_notes(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_laboratory                 => CASE
                                                                                                WHEN i_laboratory IS NOT NULL
                                                                                                     AND i_laboratory.count > 0 THEN
                                                                                                 i_laboratory(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_laboratory_desc            => CASE
                                                                                                WHEN i_laboratory_desc IS NOT NULL
                                                                                                     AND i_laboratory_desc.count > 0 THEN
                                                                                                 i_laboratory_desc(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_laboratory_short_desc      => CASE
                                                                                                WHEN i_laboratory_short_desc IS NOT NULL
                                                                                                     AND i_laboratory_short_desc.count > 0 THEN
                                                                                                 i_laboratory_short_desc(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_coding_system              => CASE
                                                                                                WHEN i_coding_system IS NOT NULL
                                                                                                     AND i_coding_system.count > 0 THEN
                                                                                                 i_coding_system(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_method                     => CASE
                                                                                                WHEN i_method IS NOT NULL
                                                                                                     AND i_method.count > 0 THEN
                                                                                                 i_method(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_equipment                  => CASE
                                                                                                WHEN i_equipment IS NOT NULL
                                                                                                     AND i_equipment.count > 0 THEN
                                                                                                 i_equipment(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_abnormality                => CASE
                                                                                                WHEN i_abnormality IS NOT NULL
                                                                                                     AND i_abnormality.count > 0 THEN
                                                                                                 i_abnormality(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_abnormality_nature         => CASE
                                                                                                WHEN i_abnormality_nature IS NOT NULL
                                                                                                     AND i_abnormality_nature.count > 0 THEN
                                                                                                 i_abnormality_nature(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_prof_validation            => CASE
                                                                                                WHEN i_prof_validation IS NOT NULL
                                                                                                     AND i_prof_validation.count > 0 THEN
                                                                                                 i_prof_validation(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_dt_validation              => CASE
                                                                                                WHEN i_dt_validation IS NOT NULL
                                                                                                     AND i_dt_validation.count > 0 THEN
                                                                                                 i_dt_validation(i)
                                                                                                ELSE
                                                                                                 NULL
                                                                                            END,
                                                            i_flg_intf_orig              => i_flg_intf_orig,
                                                            i_flg_orig_analysis          => i_flg_orig_analysis,
                                                            i_clinical_decision_rule     => i_clinical_decision_rule,
                                                            i_doc_type                   => l_doc_type,
                                                            i_doc_ori_type               => l_doc_ori_type,
                                                            i_title                      => l_title,
                                                            o_result                     => o_result,
                                                            o_id_result                  => l_id_result,
                                                            o_error                      => o_error)
                    
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    IF l_lab_tests_calculator = pk_lab_tests_constant.g_yes
                    THEN
                        g_error := 'OPEN C_ANALYSIS_CALCULATOR';
                        OPEN c_analysis_calculator;
                        FETCH c_analysis_calculator
                            INTO l_analysis_calculator;
                        g_found := c_analysis_calculator%FOUND;
                        CLOSE c_analysis_calculator;
                    
                        IF g_found
                        THEN
                            FOR rec IN c_analysis_calculator
                            LOOP
                                SELECT id_analysis_result_par, analysis_result_value_1
                                  BULK COLLECT
                                  INTO l_analysis_result_par_array, l_result
                                  FROM (SELECT arp.id_analysis_result_par,
                                               arp.analysis_result_value_1,
                                               ar.id_analysis_req_det,
                                               row_number() over(PARTITION BY id_harvest, id_analysis_req_par ORDER BY dt_ins_result_tstz DESC) rn
                                          FROM analysis_result_par arp, analysis_result ar
                                         WHERE arp.id_analysis_result = ar.id_analysis_result
                                           AND ar.id_patient = i_patient) aresp,
                                       analysis_req_det ard
                                 WHERE ard.id_analysis_req =
                                       (SELECT id_analysis_req
                                          FROM analysis_req_det
                                         WHERE id_analysis_req_det = i_analysis_req_det)
                                   AND aresp.id_analysis_req_det = ard.id_analysis_req_det
                                   AND aresp.rn = 1;
                            
                                g_error             := 'CALL PK_LAB_TESTS_UTILS.GET_LAB_TEST_CALCULATED_RESULT';
                                l_result_calculated := pk_lab_tests_utils.get_lab_test_calculated_result(i_lang                => i_lang,
                                                                                                         i_prof                => i_prof,
                                                                                                         i_patient             => i_patient,
                                                                                                         i_analysis_calculator => rec.id_analysis_res_calc,
                                                                                                         i_analysis_result_par => l_analysis_result_par_array,
                                                                                                         i_result              => l_result);
                            
                                IF l_result_calculated IS NOT NULL
                                THEN
                                    l_analysis_parameter := substr(l_result_calculated,
                                                                   0,
                                                                   instr(l_result_calculated, '|') - 1);
                                
                                    BEGIN
                                        SELECT id_analysis_req_par
                                          INTO l_analysis_req_par
                                          FROM analysis_req_par arp
                                         WHERE arp.id_analysis_req_det = i_analysis_req_det
                                           AND arp.id_analysis_parameter = l_analysis_parameter;
                                    
                                        SELECT ard.*
                                          INTO l_analysis_req_det
                                          FROM analysis_req_det ard
                                         WHERE ard.id_analysis_req_det = i_analysis_req_det;
                                    
                                    EXCEPTION
                                        WHEN no_data_found THEN
                                        
                                            SELECT ard.*
                                              INTO l_analysis_req_det
                                              FROM analysis_req_det ard
                                             WHERE ard.id_analysis_req_det = i_analysis_req_det;
                                        
                                            l_analysis_req_det.id_analysis_req_det := ts_analysis_req_det.next_key(sequence_in => 'SEQ_ANALYSIS_REQ_DET');
                                        
                                            SELECT ap.id_analysis_param, ap.id_analysis
                                              INTO l_analysis_param, l_analysis_req_det.id_analysis
                                              FROM analysis_param ap
                                             WHERE ap.id_analysis_parameter = l_analysis_parameter
                                               AND ap.id_institution = i_prof.institution
                                               AND ap.id_software = i_prof.software
                                               AND ap.flg_available = pk_lab_tests_constant.g_yes;
                                        
                                            l_rows_out := NULL;
                                        
                                            g_error := 'INSERT INTO ANALYSIS_REQ_DET';
                                            ts_analysis_req_det.ins(id_analysis_req_det_in      => l_analysis_req_det.id_analysis_req_det,
                                                                    id_analysis_req_in          => l_analysis_req_det.id_analysis_req,
                                                                    id_analysis_in              => l_analysis_req_det.id_analysis,
                                                                    flg_status_in               => l_analysis_req_det.flg_status,
                                                                    id_movement_in              => l_analysis_req_det.id_movement,
                                                                    id_room_in                  => l_analysis_req_det.id_room,
                                                                    flg_time_harvest_in         => l_analysis_req_det.flg_time_harvest,
                                                                    flg_urgency_in              => l_analysis_req_det.flg_urgency,
                                                                    flg_fasting_in              => l_analysis_req_det.flg_fasting,
                                                                    flg_col_inst_in             => l_analysis_req_det.flg_col_inst,
                                                                    flg_exec_result_in          => l_analysis_req_det.flg_exec_result,
                                                                    id_exam_cat_in              => l_analysis_req_det.id_exam_cat,
                                                                    id_episode_origin_in        => l_analysis_req_det.id_episode_origin,
                                                                    dt_target_tstz_in           => l_analysis_req_det.dt_target_tstz,
                                                                    dt_final_target_tstz_in     => l_analysis_req_det.dt_final_target_tstz,
                                                                    id_room_req_in              => l_analysis_req_det.id_room_req,
                                                                    id_prof_last_update_in      => i_prof.id,
                                                                    dt_last_update_tstz_in      => g_sysdate_tstz,
                                                                    id_analysis_codification_in => l_analysis_req_det.id_analysis_codification,
                                                                    id_exec_institution_in      => l_analysis_req_det.id_exec_institution,
                                                                    id_episode_destination_in   => l_analysis_req_det.id_episode_destination,
                                                                    rows_out                    => l_rows_out);
                                        
                                            t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                                                          i_prof       => i_prof,
                                                                          i_table_name => 'ANALYSIS_REQ_DET',
                                                                          i_rowids     => l_rows_out,
                                                                          o_error      => o_error);
                                        
                                            g_error := 'SEQ_ANALYSIS_REQ_PAR.NEXTVAL';
                                            SELECT seq_analysis_req_par.nextval
                                              INTO l_analysis_req_par
                                              FROM dual;
                                        
                                            INSERT INTO analysis_req_par
                                                (id_analysis_req_par, id_analysis_req_det, id_analysis_parameter)
                                            VALUES
                                                (l_analysis_req_par,
                                                 l_analysis_req_det.id_analysis_req_det,
                                                 l_analysis_parameter);
                                        
                                            g_error := 'CALL PK_LAB_TESTS_HARVEST_CORE.SET_HARVEST';
                                            IF NOT
                                                pk_lab_tests_harvest_core.set_harvest(i_lang             => i_lang,
                                                                                      i_prof             => i_prof,
                                                                                      i_analysis_req_det => l_analysis_req_det.id_analysis_req_det,
                                                                                      i_harvest          => nvl(i_harvest,
                                                                                                                l_harvest),
                                                                                      o_error            => o_error)
                                            THEN
                                                RAISE g_other_exception;
                                            END IF;
                                    END;
                                
                                    l_analysis_result_par_default.id_unit_measure := pk_lab_tests_utils.get_lab_test_unit_measure(i_lang               => i_lang,
                                                                                                                                  i_prof               => i_prof,
                                                                                                                                  i_analysis           => l_analysis_req_det.id_analysis,
                                                                                                                                  i_sample_type        => l_analysis_req_det.id_sample_type,
                                                                                                                                  i_analysis_parameter => l_analysis_parameter);
                                
                                    l_analysis_result_par_default.id_result_status := i_result_status(i);
                                
                                    l_analysis_result_par_default.ref_val_min := pk_lab_tests_utils.get_lab_test_reference_value(i_lang               => i_lang,
                                                                                                                                 i_prof               => i_prof,
                                                                                                                                 i_patient            => i_patient,
                                                                                                                                 i_analysis           => l_analysis_req_det.id_analysis,
                                                                                                                                 i_sample_type        => l_analysis_req_det.id_sample_type,
                                                                                                                                 i_analysis_parameter => l_analysis_parameter,
                                                                                                                                 i_flg_type           => 'MIN');
                                
                                    l_analysis_result_par_default.ref_val_max := pk_lab_tests_utils.get_lab_test_reference_value(i_lang               => i_lang,
                                                                                                                                 i_prof               => i_prof,
                                                                                                                                 i_patient            => i_patient,
                                                                                                                                 i_analysis           => l_analysis_req_det.id_analysis,
                                                                                                                                 i_sample_type        => l_analysis_req_det.id_sample_type,
                                                                                                                                 i_analysis_parameter => l_analysis_parameter,
                                                                                                                                 i_flg_type           => 'MAX');
                                
                                    g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_RESULT';
                                    IF NOT
                                        pk_lab_tests_core.set_lab_test_result(i_lang                       => i_lang,
                                                                              i_prof                       => i_prof,
                                                                              i_patient                    => i_patient,
                                                                              i_episode                    => i_episode,
                                                                              i_analysis                   => l_analysis_req_det.id_analysis,
                                                                              i_sample_type                => l_analysis_req_det.id_sample_type,
                                                                              i_analysis_parameter         => l_analysis_parameter,
                                                                              i_analysis_param             => l_analysis_param,
                                                                              i_analysis_req_det           => l_analysis_req_det.id_analysis_req_det,
                                                                              i_analysis_req_par           => l_analysis_req_par,
                                                                              i_analysis_result_par_parent => NULL,
                                                                              i_harvest                    => nvl(i_harvest,
                                                                                                                  l_harvest),
                                                                              i_dt_sample                  => i_dt_sample,
                                                                              i_prof_req                   => NULL,
                                                                              i_dt_analysis_result         => i_dt_analysis_result,
                                                                              i_flg_result_origin          => NULL,
                                                                              i_result_origin_notes        => NULL,
                                                                              i_result_notes               => i_result_notes,
                                                                              i_loinc_code                 => NULL,
                                                                              i_dt_ext_registry            => NULL,
                                                                              i_instit_origin              => NULL,
                                                                              i_result_value_1             => substr(l_result_calculated,
                                                                                                                     instr(l_result_calculated,
                                                                                                                           '|') + 1),
                                                                              i_result_value_2             => NULL,
                                                                              i_analysis_desc              => NULL,
                                                                              i_doc_external               => table_number(NULL),
                                                                              i_comparator                 => NULL,
                                                                              i_separator                  => NULL,
                                                                              i_standard_code              => NULL,
                                                                              i_unit_measure               => l_analysis_result_par_default.id_unit_measure,
                                                                              i_desc_unit_measure          => NULL,
                                                                              i_result_status              => l_analysis_result_par_default.id_result_status,
                                                                              i_ref_val                    => NULL,
                                                                              i_ref_val_min                => l_analysis_result_par_default.ref_val_min,
                                                                              i_ref_val_max                => l_analysis_result_par_default.ref_val_max,
                                                                              i_parameter_notes            => NULL,
                                                                              i_interface_notes            => NULL,
                                                                              i_laboratory                 => NULL,
                                                                              i_laboratory_desc            => NULL,
                                                                              i_laboratory_short_desc      => NULL,
                                                                              i_coding_system              => NULL,
                                                                              i_method                     => NULL,
                                                                              i_equipment                  => NULL,
                                                                              i_abnormality                => NULL,
                                                                              i_abnormality_nature         => NULL,
                                                                              i_prof_validation            => NULL,
                                                                              i_dt_validation              => NULL,
                                                                              i_flg_intf_orig              => NULL,
                                                                              i_flg_orig_analysis          => NULL,
                                                                              i_clinical_decision_rule     => NULL,
                                                                              o_result                     => o_result,
                                                                              o_id_result                  => l_id_result,
                                                                              o_error                      => o_error)
                                    
                                    THEN
                                        RAISE g_other_exception;
                                    END IF;
                                END IF;
                            END LOOP;
                        END IF;
                    END IF;
                ELSE
                    g_error := 'CALL PK_LAB_TESTS_CORE.UPDATE_LAB_TEST_RESULT';
                    IF NOT pk_lab_tests_core.update_lab_test_result(i_lang                   => i_lang,
                                                               i_prof                   => i_prof,
                                                               i_episode                => i_episode,
                                                               i_analysis_result_par    => nvl(i_analysis_result_par(i), l_analysis_result_par),
                                                               i_dt_sample              => i_dt_sample,
                                                               i_prof_req               => i_prof_req,
                                                               i_dt_analysis_result     => i_dt_analysis_result,
                                                               i_flg_result_origin      => i_flg_result_origin,
                                                               i_result_origin_notes    => i_result_origin_notes,
                                                               i_result_notes           => i_result_notes,
                                                               i_dt_ext_registry        => CASE
                                                                                               WHEN i_dt_ext_registry IS NOT NULL
                                                                                                    AND i_dt_ext_registry.count > 0 THEN
                                                                                                i_dt_ext_registry(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_instit_origin          => CASE
                                                                                               WHEN i_instit_origin IS NOT NULL
                                                                                                    AND i_instit_origin.count > 0 THEN
                                                                                                i_instit_origin(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_result_value_1         => i_result_value_1(i),
                                                               i_result_value_2         => CASE
                                                                                               WHEN i_result_value_2 IS NOT NULL
                                                                                                    AND i_result_value_2.count > 0 THEN
                                                                                                i_result_value_2(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_analysis_desc          => CASE
                                                                                               WHEN i_analysis_desc(i) = -1 THEN
                                                                                                NULL
                                                                                               ELSE
                                                                                                i_analysis_desc(i)
                                                                                           END,
                                                               i_doc_external           => l_doc_external,
                                                               i_comparator             => CASE
                                                                                               WHEN i_comparator IS NOT NULL
                                                                                                    AND i_comparator.count > 0 THEN
                                                                                                i_comparator(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_separator              => CASE
                                                                                               WHEN i_separator IS NOT NULL
                                                                                                    AND i_separator.count > 0 THEN
                                                                                                i_separator(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_standard_code          => CASE
                                                                                               WHEN i_standard_code IS NOT NULL
                                                                                                    AND i_standard_code.count > 0 THEN
                                                                                                i_standard_code(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_desc_unit_measure      => CASE
                                                                                               WHEN i_desc_unit_measure IS NOT NULL
                                                                                                    AND i_desc_unit_measure.count > 0 THEN
                                                                                                i_desc_unit_measure(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_unit_measure           => i_unit_measure(i),
                                                               i_result_status          => i_result_status(i),
                                                               i_ref_val                => CASE
                                                                                               WHEN i_ref_val IS NOT NULL
                                                                                                    AND i_ref_val.count > 0 THEN
                                                                                                i_ref_val(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_ref_val_min            => i_ref_val_min(i),
                                                               i_ref_val_max            => i_ref_val_max(i),
                                                               i_parameter_notes        => i_parameter_notes(i),
                                                               i_interface_notes        => CASE
                                                                                               WHEN i_interface_notes IS NOT NULL
                                                                                                    AND i_interface_notes.count > 0 THEN
                                                                                                i_interface_notes(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_laboratory             => CASE
                                                                                               WHEN i_laboratory IS NOT NULL
                                                                                                    AND i_laboratory.count > 0 THEN
                                                                                                i_laboratory(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_laboratory_desc        => CASE
                                                                                               WHEN i_laboratory_desc IS NOT NULL
                                                                                                    AND i_laboratory_desc.count > 0 THEN
                                                                                                i_laboratory_desc(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_laboratory_short_desc  => CASE
                                                                                               WHEN i_laboratory_short_desc IS NOT NULL
                                                                                                    AND i_laboratory_short_desc.count > 0 THEN
                                                                                                i_laboratory_short_desc(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_coding_system          => CASE
                                                                                               WHEN i_coding_system IS NOT NULL
                                                                                                    AND i_coding_system.count > 0 THEN
                                                                                                i_coding_system(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_method                 => CASE
                                                                                               WHEN i_method IS NOT NULL
                                                                                                    AND i_method.count > 0 THEN
                                                                                                i_method(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_equipment              => CASE
                                                                                               WHEN i_equipment IS NOT NULL
                                                                                                    AND i_equipment.count > 0 THEN
                                                                                                i_equipment(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_abnormality            => CASE
                                                                                               WHEN i_abnormality IS NOT NULL
                                                                                                    AND i_abnormality.count > 0 THEN
                                                                                                i_abnormality(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_abnormality_nature     => CASE
                                                                                               WHEN i_abnormality_nature IS NOT NULL
                                                                                                    AND i_abnormality_nature.count > 0 THEN
                                                                                                i_abnormality_nature(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_prof_validation        => CASE
                                                                                               WHEN i_prof_validation IS NOT NULL
                                                                                                    AND i_prof_validation.count > 0 THEN
                                                                                                i_prof_validation(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_dt_validation          => CASE
                                                                                               WHEN i_dt_validation IS NOT NULL
                                                                                                    AND i_dt_validation.count > 0 THEN
                                                                                                i_dt_validation(i)
                                                                                               ELSE
                                                                                                NULL
                                                                                           END,
                                                               i_flg_intf_orig          => i_flg_intf_orig,
                                                               i_clinical_decision_rule => i_clinical_decision_rule,
                                                               i_doc_type               => l_doc_type,
                                                               i_doc_ori_type           => l_doc_ori_type,
                                                               i_title                  => l_title,
                                                               o_result                 => o_result,
                                                               o_id_result              => l_id_result,
                                                               o_error                  => o_error)
                    
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    IF l_lab_tests_calculator = pk_lab_tests_constant.g_yes
                    THEN
                        g_error := 'OPEN C_ANALYSIS_CALCULATOR';
                        OPEN c_analysis_calculator;
                        FETCH c_analysis_calculator
                            INTO l_analysis_calculator;
                        g_found := c_analysis_calculator%FOUND;
                        CLOSE c_analysis_calculator;
                    
                        IF g_found
                        THEN
                            FOR rec IN c_analysis_calculator
                            LOOP
                                SELECT id_analysis_result_par, analysis_result_value_1
                                  BULK COLLECT
                                  INTO l_analysis_result_par_array, l_result
                                  FROM (SELECT arp.id_analysis_result_par,
                                               arp.id_analysis_parameter,
                                               arp.analysis_result_value_1,
                                               ar.id_analysis_req_det,
                                               row_number() over(PARTITION BY id_harvest, id_analysis_req_par ORDER BY dt_ins_result_tstz DESC) rn
                                          FROM analysis_result_par arp, analysis_result ar
                                         WHERE arp.id_analysis_result = ar.id_analysis_result
                                           AND ar.id_patient = i_patient) aresp,
                                       analysis_req_det ard
                                 WHERE ard.id_analysis_req =
                                       (SELECT ard.id_analysis_req
                                          FROM analysis_result_par aresp, analysis_req_par arp, analysis_req_det ard
                                         WHERE aresp.id_analysis_result_par IN
                                               (SELECT /*+opt_estimate(table t rows=1)*/
                                                 *
                                                  FROM TABLE(i_analysis_result_par) t)
                                           AND aresp.id_analysis_req_par = arp.id_analysis_req_par
                                           AND arp.id_analysis_req_det = ard.id_analysis_req_det)
                                   AND aresp.id_analysis_req_det = ard.id_analysis_req_det
                                   AND aresp.id_analysis_parameter != l_analysis_calculator.id_analysis_parameter
                                   AND aresp.rn = 1;
                            
                                g_error             := 'CALL PK_LAB_TESTS_UTILS.GET_LAB_TEST_CALCULATED_RESULT';
                                l_result_calculated := pk_lab_tests_utils.get_lab_test_calculated_result(i_lang                => i_lang,
                                                                                                         i_prof                => i_prof,
                                                                                                         i_patient             => i_patient,
                                                                                                         i_analysis_calculator => rec.id_analysis_res_calc,
                                                                                                         i_analysis_result_par => l_analysis_result_par_array,
                                                                                                         i_result              => l_result);
                            
                                IF l_result_calculated IS NOT NULL
                                THEN
                                    l_analysis_parameter := substr(l_result_calculated,
                                                                   0,
                                                                   instr(l_result_calculated, '|') - 1);
                                
                                    SELECT id_analysis, id_analysis_result_par
                                      INTO l_analysis_req_det.id_analysis, l_analysis_result_par
                                      FROM (SELECT arp.id_analysis_result_par,
                                                   arp.id_analysis_parameter,
                                                   arp.analysis_result_value_1,
                                                   ar.id_analysis_req_det,
                                                   row_number() over(PARTITION BY id_harvest, id_analysis_req_par ORDER BY dt_ins_result_tstz DESC) rn
                                              FROM analysis_result_par arp, analysis_result ar
                                             WHERE arp.id_analysis_result = ar.id_analysis_result
                                               AND ar.id_patient = i_patient) aresp,
                                           analysis_req_det ard
                                     WHERE ard.id_analysis_req =
                                           (SELECT ard.id_analysis_req
                                              FROM analysis_result_par aresp, analysis_req_par arp, analysis_req_det ard
                                             WHERE aresp.id_analysis_result_par IN
                                                   (SELECT /*+opt_estimate(table t rows=1)*/
                                                     *
                                                      FROM TABLE(i_analysis_result_par) t)
                                               AND aresp.id_analysis_req_par = arp.id_analysis_req_par
                                               AND arp.id_analysis_req_det = ard.id_analysis_req_det)
                                       AND aresp.id_analysis_req_det = ard.id_analysis_req_det
                                       AND aresp.id_analysis_parameter = l_analysis_parameter
                                       AND aresp.rn = 1;
                                
                                    g_error := 'CALL PK_LAB_TESTS_CORE.UPDATE_LAB_TEST_RESULT';
                                    IF NOT
                                        pk_lab_tests_core.update_lab_test_result(i_lang                   => i_lang,
                                                                                 i_prof                   => i_prof,
                                                                                 i_episode                => i_episode,
                                                                                 i_analysis_result_par    => l_analysis_result_par,
                                                                                 i_dt_sample              => NULL,
                                                                                 i_prof_req               => NULL,
                                                                                 i_dt_analysis_result     => i_dt_analysis_result,
                                                                                 i_flg_result_origin      => NULL,
                                                                                 i_result_origin_notes    => NULL,
                                                                                 i_result_notes           => NULL,
                                                                                 i_dt_ext_registry        => NULL,
                                                                                 i_instit_origin          => NULL,
                                                                                 i_result_value_1         => substr(l_result_calculated,
                                                                                                                    instr(l_result_calculated,
                                                                                                                          '|') + 1),
                                                                                 i_result_value_2         => NULL,
                                                                                 i_analysis_desc          => NULL,
                                                                                 i_doc_external           => table_number(NULL),
                                                                                 i_comparator             => NULL,
                                                                                 i_separator              => NULL,
                                                                                 i_standard_code          => NULL,
                                                                                 i_desc_unit_measure      => NULL,
                                                                                 i_unit_measure           => NULL,
                                                                                 i_result_status          => NULL,
                                                                                 i_ref_val                => NULL,
                                                                                 i_ref_val_min            => NULL,
                                                                                 i_ref_val_max            => NULL,
                                                                                 i_parameter_notes        => NULL,
                                                                                 i_interface_notes        => NULL,
                                                                                 i_laboratory             => NULL,
                                                                                 i_laboratory_desc        => NULL,
                                                                                 i_laboratory_short_desc  => NULL,
                                                                                 i_coding_system          => NULL,
                                                                                 i_method                 => NULL,
                                                                                 i_equipment              => NULL,
                                                                                 i_abnormality            => NULL,
                                                                                 i_abnormality_nature     => NULL,
                                                                                 i_prof_validation        => NULL,
                                                                                 i_dt_validation          => NULL,
                                                                                 i_flg_intf_orig          => NULL,
                                                                                 i_clinical_decision_rule => NULL,
                                                                                 o_result                 => o_result,
                                                                                 o_id_result              => l_id_result,
                                                                                 o_error                  => o_error)
                                    
                                    THEN
                                        RAISE g_other_exception;
                                    END IF;
                                END IF;
                            END LOOP;
                        END IF;
                    END IF;
                END IF;
            END LOOP;
        ELSE
            SELECT ard.id_analysis, ard.id_sample_type, nvl(ar.id_episode, ar.id_episode_origin) id_episode
              INTO l_analysis_req_det.id_analysis, l_analysis_req_det.id_sample_type, l_episode
              FROM analysis_req_det ard, analysis_req ar
             WHERE ard.id_analysis_req_det = i_analysis_req_det
               AND ar.id_analysis_req = ard.id_analysis_req;
        
            BEGIN
                g_error := 'GET ANALYSIS HARVEST COUNT';
                SELECT ah.id_harvest
                  INTO l_harvest
                  FROM analysis_harvest ah, harvest h
                 WHERE ah.id_analysis_req_det = i_analysis_req_det
                   AND ah.flg_status = pk_lab_tests_constant.g_active
                   AND ah.id_harvest = h.id_harvest
                   AND h.flg_status != pk_lab_tests_constant.g_harvest_cancel;
            EXCEPTION
                WHEN too_many_rows THEN
                    g_error := 'Analysis has more than one harvest, please specify which harvest to use.';
                    RAISE g_other_exception;
                WHEN no_data_found THEN
                    g_error := 'Given harvest is cancelled';
                    RAISE g_other_exception;
            END;
        
            FOR rec IN c_analysis_parameter
            LOOP
                g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_RESULT';
                IF NOT pk_lab_tests_core.set_lab_test_result(i_lang                       => i_lang,
                                                             i_prof                       => i_prof,
                                                             i_patient                    => i_patient,
                                                             i_episode                    => l_episode,
                                                             i_analysis                   => l_analysis_req_det.id_analysis,
                                                             i_sample_type                => l_analysis_req_det.id_sample_type,
                                                             i_analysis_parameter         => rec.id_analysis_parameter,
                                                             i_analysis_param             => NULL,
                                                             i_analysis_req_det           => i_analysis_req_det,
                                                             i_analysis_req_par           => rec.id_analysis_req_par,
                                                             i_analysis_result_par_parent => NULL,
                                                             i_harvest                    => l_harvest,
                                                             i_dt_sample                  => NULL,
                                                             i_prof_req                   => NULL,
                                                             i_dt_analysis_result         => NULL,
                                                             i_flg_result_origin          => NULL,
                                                             i_result_origin_notes        => NULL,
                                                             i_result_notes               => NULL,
                                                             i_result_value_1             => i_result_value_1(1),
                                                             i_analysis_desc              => NULL,
                                                             i_unit_measure               => NULL,
                                                             i_result_status              => NULL,
                                                             i_ref_val_min                => NULL,
                                                             i_ref_val_max                => NULL,
                                                             i_parameter_notes            => NULL,
                                                             i_flg_intf_orig              => i_flg_intf_orig,
                                                             i_flg_orig_analysis          => NULL,
                                                             i_clinical_decision_rule     => NULL,
                                                             o_result                     => o_result,
                                                             o_id_result                  => l_id_result,
                                                             o_error                      => o_error)
                
                THEN
                    RAISE g_other_exception;
                END IF;
            END LOOP;
        END IF;
    
        g_error := 'UPDATE BLOOD GROUP TYPE';
        IF NOT pk_lab_tests_core.update_lab_test_blood_group(i_lang            => i_lang,
                                                             i_prof            => i_prof,
                                                             i_patient         => i_patient,
                                                             i_episode         => i_episode,
                                                             i_analysis_result => l_id_result,
                                                             o_error           => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_LAB_TEST_RESULT',
                                              o_error);
            RETURN FALSE;
    END set_lab_test_result;

    FUNCTION set_lab_test_result
    (
        i_lang                       IN language.id_language%TYPE, --1
        i_prof                       IN profissional,
        i_patient                    IN analysis_result.id_patient%TYPE,
        i_episode                    IN analysis_result.id_episode%TYPE,
        i_analysis                   IN analysis.id_analysis%TYPE, --5
        i_sample_type                IN sample_type.id_sample_type%TYPE,
        i_analysis_parameter         IN analysis_parameter.id_analysis_parameter%TYPE,
        i_analysis_param             IN analysis_param.id_analysis_param%TYPE,
        i_analysis_req_det           IN analysis_req_det.id_analysis_req_det%TYPE,
        i_analysis_req_par           IN analysis_req_par.id_analysis_req_par%TYPE, --10
        i_analysis_result_par_parent IN analysis_result_par.id_arp_parent%TYPE,
        i_harvest                    IN harvest.id_harvest%TYPE,
        i_dt_sample                  IN VARCHAR2,
        i_prof_req                   IN analysis_result.id_prof_req%TYPE,
        i_dt_analysis_result         IN VARCHAR2, --15
        i_flg_result_origin          IN analysis_result.flg_result_origin%TYPE,
        i_result_origin_notes        IN analysis_result.result_origin_notes%TYPE,
        i_result_notes               IN analysis_result.notes%TYPE,
        i_loinc_code                 IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        i_dt_ext_registry            IN VARCHAR2 DEFAULT NULL, --20
        i_instit_origin              IN analysis_result_par.id_instit_origin%TYPE DEFAULT NULL,
        i_result_value_1             IN analysis_result_par.desc_analysis_result%TYPE,
        i_result_value_2             IN analysis_result_par.analysis_result_value_2%TYPE DEFAULT NULL,
        i_analysis_desc              IN analysis_desc.id_analysis_desc%TYPE,
        i_doc_external               IN table_number DEFAULT NULL, --25
        i_doc_type                   IN table_number DEFAULT NULL,
        i_doc_ori_type               IN table_number DEFAULT NULL,
        i_title                      IN table_varchar DEFAULT NULL,
        i_comparator                 IN analysis_result_par.comparator%TYPE DEFAULT NULL,
        i_separator                  IN analysis_result_par.separator%TYPE DEFAULT NULL, --30
        i_standard_code              IN analysis_result_par.standard_code%TYPE DEFAULT NULL,
        i_unit_measure               IN unit_measure.id_unit_measure%TYPE,
        i_desc_unit_measure          IN analysis_result_par.desc_unit_measure%TYPE DEFAULT NULL,
        i_result_status              IN result_status.id_result_status%TYPE,
        i_ref_val                    IN analysis_result_par.ref_val%TYPE DEFAULT NULL, --35
        i_ref_val_min                IN analysis_result_par.ref_val_min_str%TYPE,
        i_ref_val_max                IN analysis_result_par.ref_val_max_str%TYPE,
        i_parameter_notes            IN analysis_result_par.parameter_notes%TYPE,
        i_interface_notes            IN analysis_result_par.interface_notes%TYPE DEFAULT NULL,
        i_laboratory                 IN analysis_result_par.id_laboratory%TYPE DEFAULT NULL, --40
        i_laboratory_desc            IN analysis_result_par.laboratory_desc%TYPE DEFAULT NULL,
        i_laboratory_short_desc      IN analysis_result_par.laboratory_short_desc%TYPE DEFAULT NULL,
        i_coding_system              IN analysis_result_par.coding_system%TYPE DEFAULT NULL,
        i_method                     IN analysis_result_par.method%TYPE DEFAULT NULL,
        i_equipment                  IN analysis_result_par.equipment%TYPE DEFAULT NULL, --45
        i_abnormality                IN analysis_result_par.id_abnormality%TYPE DEFAULT NULL,
        i_abnormality_nature         IN analysis_result_par.id_abnormality_nature%TYPE DEFAULT NULL,
        i_prof_validation            IN analysis_result_par.id_prof_validation%TYPE DEFAULT NULL,
        i_dt_validation              IN VARCHAR2 DEFAULT NULL,
        i_flg_intf_orig              IN analysis_result_par.flg_intf_orig%TYPE DEFAULT 'N', --50
        i_flg_orig_analysis          IN analysis_result.flg_orig_analysis%TYPE,
        i_clinical_decision_rule     IN NUMBER,
        o_result                     OUT VARCHAR2,
        o_id_result                  OUT analysis_result.id_analysis_result%TYPE,
        o_error                      OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_analysis
        (
            l_analysis_req_par IN analysis_req_par.id_analysis_req_par%TYPE,
            l_hand_off_type    sys_config.value%TYPE
        ) IS
            WITH cso_table AS
             (SELECT *
                FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                    i_prof,
                                                                    i_episode,
                                                                    NULL,
                                                                    NULL,
                                                                    NULL,
                                                                    i_analysis_req_det)))
            SELECT ard.id_analysis,
                   ard.id_sample_type,
                   ard.id_analysis_req,
                   ard.flg_status,
                   ard.flg_urgency flg_priority,
                   arp.id_analysis_parameter,
                   ard.id_analysis_req_det,
                   ar.id_episode id_episode,
                   ard.id_episode_origin id_episode_origin,
                   ar.id_prof_writes,
                   cso.id_prof_ordered_by id_prof_order,
                   pk_hand_off_api.get_responsibles_id(i_lang,
                                                       i_prof,
                                                       ar.id_episode,
                                                       pk_alert_constant.g_cat_type_doc,
                                                       l_hand_off_type) id_prof_resp,
                   ard.id_room_req
              FROM analysis_req_det ard, analysis_req_par arp, analysis_req ar, cso_table cso
             WHERE arp.id_analysis_req_par = l_analysis_req_par
               AND ard.id_analysis_req_det = arp.id_analysis_req_det
               AND ar.id_analysis_req = ard.id_analysis_req
               AND l_analysis_req_par IS NOT NULL
               AND ard.id_co_sign_order = cso.id_co_sign_hist(+)
            UNION ALL
            SELECT ard.id_analysis,
                   ard.id_sample_type,
                   ard.id_analysis_req,
                   ard.flg_status,
                   ard.flg_urgency flg_priority,
                   NULL id_analysis_parameter,
                   ard.id_analysis_req_det,
                   ar.id_episode id_episode,
                   ard.id_episode_origin id_episode_origin,
                   ar.id_prof_writes,
                   cso.id_prof_ordered_by id_prof_order,
                   pk_hand_off_api.get_responsibles_id(i_lang,
                                                       i_prof,
                                                       ar.id_episode,
                                                       pk_alert_constant.g_cat_type_doc,
                                                       l_hand_off_type) id_prof_resp,
                   ard.id_room_req
              FROM analysis_req_det ard, analysis_req ar, cso_table cso
             WHERE ard.id_analysis_req_det = i_analysis_req_det
             AND ar.id_analysis_req = ard.id_analysis_req
             AND l_analysis_req_par IS NULL
             AND ard.id_co_sign_order = cso.id_co_sign_hist(+);
    
        CURSOR c_count(l_analysis_req analysis_req.id_analysis_req%TYPE) IS
            SELECT COUNT(*)
              FROM analysis_req_det ard
             WHERE ard.id_analysis_req = l_analysis_req
               AND ard.flg_status IN (pk_lab_tests_constant.g_analysis_pending,
                                      pk_lab_tests_constant.g_analysis_req,
                                      pk_lab_tests_constant.g_analysis_toexec);
    
        CURSOR c_analysis_req_par IS
            SELECT arp.id_analysis_req_par
              FROM analysis_req_par arp
             WHERE arp.id_analysis_req_det = i_analysis_req_det
               AND arp.id_analysis_parameter = i_analysis_parameter;
    
        CURSOR c_exam_cat1 IS
            SELECT ais.id_exam_cat
              FROM analysis_instit_soft ais
             WHERE ais.id_analysis = i_analysis
               AND ais.id_sample_type = i_sample_type
               AND ais.id_institution = i_prof.institution
               AND ais.id_software = i_prof.software
               AND ais.flg_available = pk_lab_tests_constant.g_available;
    
        CURSOR c_exam_cat2 IS
            SELECT ais.id_exam_cat
              FROM analysis_instit_soft ais
             WHERE ais.id_analysis = i_analysis
               AND ais.id_sample_type = i_sample_type
               AND ais.id_institution = i_prof.institution
               AND ais.flg_available = pk_lab_tests_constant.g_available;
    
        CURSOR c_exam_cat3 IS
            SELECT ais.id_exam_cat
              FROM analysis_instit_soft ais
             WHERE ais.id_analysis = i_analysis
               AND ais.id_sample_type = i_sample_type
               AND ais.flg_available = pk_lab_tests_constant.g_available
               AND rownum < 2;
    
        CURSOR c_harvest IS
            SELECT ah.id_harvest, h.dt_harvest_tstz
              FROM analysis_harvest ah, harvest h
             WHERE ah.id_analysis_req_det = i_analysis_req_det
               AND ah.flg_status = pk_lab_tests_constant.g_active
               AND ah.id_harvest = h.id_harvest
               AND h.flg_status NOT IN
                   (pk_lab_tests_constant.g_harvest_inactive, pk_lab_tests_constant.g_harvest_cancel);
    
        CURSOR c_result(l_dt_sample analysis_result.dt_sample%TYPE) IS
            SELECT ar.id_analysis_result
              FROM analysis_result ar
             WHERE ar.id_analysis_req_det = i_analysis_req_det
               AND ar.id_harvest = i_harvest
            UNION
            SELECT DISTINCT ar.id_analysis_result
              FROM analysis_result_par arp, analysis_result ar
             WHERE ar.id_patient = i_patient
               AND ar.dt_sample = l_dt_sample
               AND ar.id_analysis = i_analysis
               AND ar.id_analysis_req_det IS NULL
               AND ar.id_analysis_result = arp.id_analysis_result
               AND EXISTS (SELECT 1
                      FROM analysis_param ap
                     WHERE ap.id_analysis = i_analysis
                       AND ap.id_analysis_parameter = arp.id_analysis_parameter
                       AND ap.id_institution = i_prof.institution
                       AND ap.id_software = i_prof.software)
               AND rownum = 1;
    
        CURSOR c_result_par IS
            SELECT a.count_req - b.count_res count_par_res, a.count_req result_num, c.count_preliminar
              FROM (SELECT COUNT(*) count_req
                      FROM analysis_req_par arp
                     WHERE arp.id_analysis_req_det = i_analysis_req_det) a,
                   (SELECT COUNT(*) count_res
                      FROM (SELECT aresp.*,
                                   row_number() over(PARTITION BY aresp.id_analysis_req_par ORDER BY aresp.dt_analysis_result_par_tstz) rn
                              FROM analysis_result_par aresp, analysis_req_par arp
                             WHERE arp.id_analysis_req_det = i_analysis_req_det
                               AND aresp.id_analysis_req_par = arp.id_analysis_req_par)
                     WHERE rn = 1) b,
                   (SELECT COUNT(*) count_preliminar
                      FROM (SELECT aresp.*,
                                   row_number() over(PARTITION BY aresp.id_analysis_req_par ORDER BY aresp.dt_analysis_result_par_tstz) rn
                              FROM analysis_result_par aresp, analysis_req_par arp
                             WHERE arp.id_analysis_req_det = i_analysis_req_det
                               AND aresp.id_analysis_req_par = arp.id_analysis_req_par) aresp
                     WHERE aresp.id_result_status = 7
                       AND rn = 1) c
             WHERE a.count_req > 1;
    
        CURSOR c_episode(l_episode episode.id_episode%TYPE) IS
            SELECT pk_episode.get_soft_by_epis_type(e.id_epis_type, e.id_institution) id_software
              FROM episode e
             WHERE e.id_episode = l_episode;
    
        CURSOR c_episode_type(l_episode IN episode.id_episode%TYPE) IS
            SELECT e.id_epis_type, e.id_visit
              FROM episode e
             WHERE e.id_episode = l_episode;
    
        CURSOR c_episode_analysis(l_episode IN episode.id_episode%TYPE) IS
            SELECT 'X'
              FROM analysis_req ar, analysis_req_det ard
             WHERE ar.id_episode = l_episode
               AND ar.id_analysis_req = ard.id_analysis_req
               AND ard.flg_status NOT IN (pk_lab_tests_constant.g_analysis_result,
                                          pk_lab_tests_constant.g_analysis_read,
                                          pk_lab_tests_constant.g_analysis_cancel);
    
        CURSOR c_result_mult(l_analysis_result IN analysis_result.id_analysis_result%TYPE) IS
            SELECT DISTINCT arp.id_analysis_result,
                            CASE
                                 WHEN arp.ap_count > 1 THEN
                                  pk_alert_constant.g_yes
                                 ELSE
                                  pk_alert_constant.g_no
                             END flg_multiple_result
              FROM (SELECT arp.*,
                           COUNT(arp.id_analysis_result_par) over(PARTITION BY arp.id_analysis_parameter, arp.id_analysis_result, arp.id_analysis_req_par, arp.dt_analysis_result_par_tstz) ap_count
                      FROM analysis_result_par arp
                     WHERE arp.id_analysis_result = l_analysis_result
                       AND arp.id_analysis_parameter = i_analysis_parameter) arp
             WHERE arp.ap_count > 1;
    
        l_analysis         c_analysis%ROWTYPE;
        l_analysis_req_par c_analysis_req_par%ROWTYPE;
        l_harvest          c_harvest%ROWTYPE;
        l_result_par       c_result_par%ROWTYPE;
        l_result_mult      c_result_mult%ROWTYPE;
    
        l_episode_type     c_episode_type%ROWTYPE;
        l_episode_analysis c_episode_analysis%ROWTYPE;
    
        l_exam_cat analysis_instit_soft.id_exam_cat%TYPE;
    
        l_next            analysis_result.id_analysis_result%TYPE;
        l_next_req_par    analysis_req_par.id_analysis_req_par%TYPE;
        l_next_par        analysis_result_par.id_analysis_result_par%TYPE;
        l_count           PLS_INTEGER;
        l_visit           visit.id_visit%TYPE;
        l_episode         episode.id_episode%TYPE;
        l_alert_exists    NUMBER;
        l_sys_alert_event sys_alert_event%ROWTYPE;
        l_software        software.id_software%TYPE;
    
        l_analysis_parameter analysis_result_par.id_analysis_parameter%TYPE;
    
        l_dt_sample          analysis_result.dt_sample%TYPE;
        l_dt_analysis_result analysis_result.dt_analysis_result_tstz%TYPE;
    
        l_status        analysis_result.flg_status%TYPE;
        l_status_result result_status.id_result_status%TYPE;
    
        l_ref_val_min           analysis_result_par.ref_val_min%TYPE;
        l_ref_val_max           analysis_result_par.ref_val_max%TYPE;
        l_analysis_result_value analysis_result_par.analysis_result_value_1%TYPE;
    
        l_nls_numeric_param VARCHAR2(32 CHAR) := 'NLS_NUMERIC_CHARACTERS='', ''';
    
        l_hand_off_type sys_config.value%TYPE;
    
        l_doc_type     doc_external.id_doc_type%TYPE;
        l_doc_ori_type doc_external.id_doc_ori_type%TYPE;
        l_title        doc_external.title%TYPE;
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        IF g_sysdate_tstz IS NOT NULL
        THEN
            g_sysdate_tstz := current_timestamp;
        END IF;
    
        IF i_dt_sample IS NULL
        THEN
            l_dt_sample := g_sysdate_tstz;
        ELSE
            l_dt_sample := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_sample, NULL);
        END IF;
    
        IF i_dt_analysis_result IS NULL
        THEN
            l_dt_analysis_result := current_timestamp;
        ELSE
            l_dt_analysis_result := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_analysis_result, NULL);
        END IF;
    
        l_next_req_par := i_analysis_req_par;
    
        pk_hand_off_core.get_hand_off_type(i_lang, i_prof, l_hand_off_type);
    
        g_error := 'GET C_ANALYSIS';
        OPEN c_analysis(i_analysis_req_par, l_hand_off_type);
        FETCH c_analysis
            INTO l_analysis;
        CLOSE c_analysis;
    
        g_error := 'UPDATE ANALYSIS_REQ';
        ts_analysis_req.upd(id_analysis_req_in => l_analysis.id_analysis_req,
                            id_episode_in      => CASE
                                                      WHEN l_analysis.id_episode IS NULL THEN
                                                       l_analysis.id_episode_origin
                                                  END,
                            id_visit_in        => CASE
                                                      WHEN l_analysis.id_episode IS NULL THEN
                                                       pk_visit.get_visit(l_analysis.id_episode_origin, o_error)
                                                  END,
                            rows_out           => l_rows_out);
    
        g_error := 'GET C_ANALYSIS';
        OPEN c_analysis(i_analysis_req_par, l_hand_off_type);
        FETCH c_analysis
            INTO l_analysis;
        CLOSE c_analysis;
    
        g_error := 'OPEN C_RESULT';
        OPEN c_result(l_dt_sample);
        FETCH c_result
            INTO l_next;
        g_found := c_result%NOTFOUND;
        CLOSE c_result;
    
        IF g_found
        THEN
            g_error := 'GET VISIT';
            l_visit := pk_visit.get_visit(l_analysis.id_episode, o_error);
        
            IF o_error IS NOT NULL
            THEN
                RAISE g_other_exception;
            END IF;
        
            g_error := 'GET C_EXAM_CAT';
            OPEN c_exam_cat1;
            FETCH c_exam_cat1
                INTO l_exam_cat;
            g_found := c_exam_cat1%FOUND;
            CLOSE c_exam_cat1;
        
            IF NOT g_found
            THEN
                IF i_analysis_req_det IS NULL
                THEN
                    g_error := 'GET C_EXAM_CAT2';
                    OPEN c_exam_cat2;
                    FETCH c_exam_cat2
                        INTO l_exam_cat;
                    g_found := c_exam_cat2%FOUND;
                    CLOSE c_exam_cat2;
                
                    IF NOT g_found
                    THEN
                        g_error := 'GET C_EXAM_CAT3';
                        OPEN c_exam_cat3;
                        FETCH c_exam_cat3
                            INTO l_exam_cat;
                        g_found := c_exam_cat3%FOUND;
                        CLOSE c_exam_cat3;
                    
                        IF NOT g_found
                        THEN
                            g_error := pk_message.get_message(i_lang, 'COMMON_M001') || chr(10) ||
                                       'PK_LAB_TESTS_CORE.SET_LAB_TEST_RESULT / ' || g_error || ' / ' || SQLERRM;
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                ELSE
                    g_error := pk_message.get_message(i_lang, 'COMMON_M001') || chr(10) ||
                               'PK_LAB_TESTS_CORE.SET_LAB_TEST_RESULT / ' || g_error || ' / ' || SQLERRM;
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            g_error := 'OPEN C_HARVEST';
            OPEN c_harvest;
            FETCH c_harvest
                INTO l_harvest;
            g_found := c_harvest%NOTFOUND;
            CLOSE c_harvest;
        
            --New validation for ADW
            IF l_dt_analysis_result IS NOT NULL
               AND l_harvest.dt_harvest_tstz IS NOT NULL
            THEN
                IF l_dt_analysis_result < l_harvest.dt_harvest_tstz
                THEN
                    l_dt_analysis_result := l_harvest.dt_harvest_tstz;
                END IF;
            END IF;
        
            g_error := 'INSERT ANALYSIS_RESULT';
            ts_analysis_result.ins(id_analysis_result_out     => l_next,
                                   id_analysis_in             => i_analysis,
                                   id_sample_type_in          => nvl(i_sample_type, l_analysis.id_sample_type),
                                   id_analysis_req_det_in     => i_analysis_req_det,
                                   id_professional_in         => i_prof.id,
                                   id_patient_in              => i_patient,
                                   flg_type_in                => pk_prof_utils.get_category(i_lang, i_prof),
                                   id_institution_in          => i_prof.institution,
                                   dt_analysis_result_tstz_in => l_dt_analysis_result,
                                   dt_sample_in               => CASE
                                                                     WHEN g_found THEN
                                                                      l_dt_sample
                                                                     ELSE
                                                                      NULL
                                                                 END,
                                   id_visit_in                => l_visit,
                                   id_episode_orig_in         => CASE
                                                                     WHEN i_analysis_req_det IS NULL THEN
                                                                      i_episode
                                                                     ELSE
                                                                      l_analysis.id_episode
                                                                 END,
                                   id_exam_cat_in             => l_exam_cat,
                                   loinc_code_in              => i_loinc_code,
                                   flg_status_in              => pk_lab_tests_constant.g_active,
                                   flg_orig_analysis_in       => i_flg_orig_analysis,
                                   notes_in                   => i_result_notes,
                                   flg_result_origin_in       => i_flg_result_origin,
                                   result_origin_notes_in     => i_result_origin_notes,
                                   id_prof_req_in             => i_prof_req,
                                   id_result_status_in        => i_result_status,
                                   id_harvest_in              => nvl(i_harvest, l_harvest.id_harvest),
                                   rows_out                   => l_rows_out);
        
            g_error := 'CALL PROCESS_INSERT';
            t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'ANALYSIS_RESULT',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        ELSE
            g_error := 'INSERT ANALYSIS_RESULT';
            ts_analysis_result.upd(id_analysis_result_in => l_next,
                                   id_result_status_in   => i_result_status,
                                   id_result_status_nin  => FALSE,
                                   notes_in              => i_result_notes,
                                   rows_out              => l_rows_out);
        
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'ANALYSIS_RESULT',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        END IF;
    
        o_id_result := l_next;
    
        IF i_result_value_1 IS NOT NULL
        THEN
            l_rows_out := NULL;
        
            IF i_analysis_req_det IS NULL
            THEN
                SELECT ap.id_analysis_parameter
                  INTO l_analysis_parameter
                  FROM analysis_param ap
                 WHERE ap.id_analysis_param = i_analysis_param;
            
                g_error := 'INSERT ANALYSIS_RESULT_PAR';
                ts_analysis_result_par.ins(id_analysis_result_par_out     => l_next_par,
                                           id_analysis_result_in          => l_next,
                                           id_arp_parent_in               => i_analysis_result_par_parent,
                                           id_professional_in             => i_prof.id,
                                           desc_analysis_result_in        => i_result_value_1,
                                           id_analysis_parameter_in       => l_analysis_parameter,
                                           dt_analysis_result_par_tstz_in => l_dt_analysis_result,
                                           id_unit_measure_in             => i_unit_measure,
                                           ref_val_min_in                 => CASE
                                                                                 WHEN pk_utils.is_number(i_ref_val_min) =
                                                                                      pk_lab_tests_constant.g_yes THEN
                                                                                  CASE
                                                                                      WHEN instr(TRIM(REPLACE(i_ref_val_min, '.', ',')),
                                                                                                 ',',
                                                                                                 1) = 1 THEN
                                                                                       to_number('0' ||
                                                                                                 TRIM(REPLACE(i_ref_val_min, '.', ',')),
                                                                                                 pk_lab_tests_constant.g_format_mask,
                                                                                                 l_nls_numeric_param)
                                                                                      ELSE
                                                                                       to_number(TRIM(REPLACE(i_ref_val_min, '.', ',')),
                                                                                                 pk_lab_tests_constant.g_format_mask,
                                                                                                 l_nls_numeric_param)
                                                                                  END
                                                                                 ELSE
                                                                                  NULL
                                                                             END,
                                           ref_val_max_in                 => CASE
                                                                                 WHEN pk_utils.is_number(i_ref_val_max) =
                                                                                      pk_lab_tests_constant.g_yes THEN
                                                                                  CASE
                                                                                      WHEN instr(TRIM(REPLACE(i_ref_val_max, '.', ',')),
                                                                                                 ',',
                                                                                                 1) = 1 THEN
                                                                                       to_number('0' ||
                                                                                                 TRIM(REPLACE(i_ref_val_max, '.', ',')),
                                                                                                 pk_lab_tests_constant.g_format_mask,
                                                                                                 l_nls_numeric_param)
                                                                                      ELSE
                                                                                       to_number(TRIM(REPLACE(i_ref_val_max, '.', ',')),
                                                                                                 pk_lab_tests_constant.g_format_mask,
                                                                                                 l_nls_numeric_param)
                                                                                  END
                                                                                 ELSE
                                                                                  NULL
                                                                             END,
                                           ref_val_min_str_in             => i_ref_val_min,
                                           ref_val_max_str_in             => i_ref_val_max,
                                           analysis_result_value_1_in     => CASE
                                                                                 WHEN pk_utils.is_number(i_result_value_1) =
                                                                                      pk_lab_tests_constant.g_yes THEN
                                                                                  CASE
                                                                                      WHEN instr(TRIM(REPLACE(i_result_value_1, '.', ',')),
                                                                                                 ',',
                                                                                                 1) = 1 THEN
                                                                                       to_number('0' ||
                                                                                                 TRIM(REPLACE(i_result_value_1, '.', ',')),
                                                                                                 pk_lab_tests_constant.g_format_mask,
                                                                                                 l_nls_numeric_param)
                                                                                      ELSE
                                                                                       to_number(TRIM(REPLACE(i_result_value_1, '.', ',')),
                                                                                                 pk_lab_tests_constant.g_format_mask,
                                                                                                 l_nls_numeric_param)
                                                                                  END
                                                                                 ELSE
                                                                                  NULL
                                                                             END,
                                           analysis_result_value_2_in     => CASE
                                                                                 WHEN instr(TRIM(REPLACE(i_result_value_2, '.', ',')),
                                                                                            ',',
                                                                                            1) = 1 THEN
                                                                                  to_number('0' ||
                                                                                            TRIM(REPLACE(i_result_value_2, '.', ',')),
                                                                                            pk_lab_tests_constant.g_format_mask,
                                                                                            l_nls_numeric_param)
                                                                                 ELSE
                                                                                  to_number(TRIM(REPLACE(i_result_value_2, '.', ',')),
                                                                                            pk_lab_tests_constant.g_format_mask,
                                                                                            l_nls_numeric_param)
                                                                             END,
                                           dt_ins_result_tstz_in          => g_sysdate_tstz,
                                           parameter_notes_in             => i_parameter_notes,
                                           id_result_status_in            => i_result_status,
                                           id_analysis_desc_in            => i_analysis_desc,
                                           id_cdr_in                      => i_clinical_decision_rule,
                                           rows_out                       => l_rows_out);
            ELSE
                IF i_flg_intf_orig = pk_lab_tests_constant.g_yes
                THEN
                    g_error := 'OPEN C_ANALYSIS_REQ_PAR';
                    OPEN c_analysis_req_par;
                    FETCH c_analysis_req_par
                        INTO l_analysis_req_par;
                    CLOSE c_analysis_req_par;
                
                    IF l_analysis_req_par.id_analysis_req_par IS NULL
                    THEN
                        g_error := 'GET SEQ_ANALYSIS_REQ_PAR.NEXTVAL';
                        SELECT seq_analysis_req_par.nextval
                          INTO l_next_req_par
                          FROM dual;
                    
                        INSERT INTO analysis_req_par
                            (id_analysis_req_par, id_analysis_req_det, id_analysis_parameter)
                        VALUES
                            (l_next_req_par, i_analysis_req_det, i_analysis_parameter);
                    END IF;
                
                    --Process ANALYSIS_PARAMETER_LOINC
                    IF l_analysis_parameter IS NOT NULL
                       AND l_analysis.id_room_req IS NOT NULL
                       AND i_loinc_code IS NOT NULL
                    THEN
                        MERGE INTO lab_test_parameter_loinc apl
                        USING (SELECT l_analysis_parameter id_analysis_parameter,
                                      l_analysis.id_room_req id_room,
                                      i_loinc_code loinc_code,
                                      i_coding_system coding_system,
                                      nvl(i_laboratory_desc, i_laboratory_short_desc) lab_desc
                                 FROM dual) t
                        ON (apl.id_analysis_parameter = t.id_analysis_parameter AND apl.id_room = t.id_room AND apl.loinc_code = t.loinc_code)
                        WHEN NOT MATCHED THEN
                            INSERT
                                (id_analysis_parameter, id_room, loinc_code, coding_system, lab_desc)
                            VALUES
                                (t.id_analysis_parameter, t.id_room, t.loinc_code, t.coding_system, t.lab_desc);
                    END IF;
                END IF;
            
                g_error := 'INSERT ANALYSIS_RESULT_PAR';
                ts_analysis_result_par.ins(id_analysis_result_par_out     => l_next_par,
                                           id_analysis_result_in          => l_next,
                                           id_arp_parent_in               => i_analysis_result_par_parent,
                                           id_analysis_req_par_in         => l_next_req_par,
                                           id_professional_in             => i_prof.id,
                                           id_professional_upd_in         => i_prof.id,
                                           analysis_result_value_1_in     => CASE
                                                                                 WHEN pk_utils.is_number(i_result_value_1) =
                                                                                      pk_lab_tests_constant.g_yes THEN
                                                                                  CASE
                                                                                      WHEN instr(TRIM(REPLACE(i_result_value_1, '.', ',')),
                                                                                                 ',',
                                                                                                 1) = 1 THEN
                                                                                       to_number('0' ||
                                                                                                 TRIM(REPLACE(i_result_value_1, '.', ',')),
                                                                                                 pk_lab_tests_constant.g_format_mask,
                                                                                                 l_nls_numeric_param)
                                                                                      ELSE
                                                                                       to_number(TRIM(REPLACE(i_result_value_1, '.', ',')),
                                                                                                 pk_lab_tests_constant.g_format_mask,
                                                                                                 l_nls_numeric_param)
                                                                                  END
                                                                                 ELSE
                                                                                  NULL
                                                                             END,
                                           analysis_result_value_2_in     => CASE
                                                                                 WHEN instr(TRIM(REPLACE(i_result_value_2, '.', ',')),
                                                                                            ',',
                                                                                            1) = 1 THEN
                                                                                  to_number('0' ||
                                                                                            TRIM(REPLACE(i_result_value_2, '.', ',')),
                                                                                            pk_lab_tests_constant.g_format_mask,
                                                                                            l_nls_numeric_param)
                                                                                 ELSE
                                                                                  to_number(TRIM(REPLACE(i_result_value_2, '.', ',')),
                                                                                            pk_lab_tests_constant.g_format_mask,
                                                                                            l_nls_numeric_param)
                                                                             END,
                                           desc_analysis_result_in        => i_result_value_1,
                                           id_analysis_desc_in            => i_analysis_desc,
                                           comparator_in                  => i_comparator,
                                           separator_in                   => i_separator,
                                           standard_code_in               => i_standard_code,
                                           id_analysis_parameter_in       => nvl(i_analysis_parameter, l_analysis_parameter),
                                           dt_analysis_result_par_tstz_in => l_dt_analysis_result,
                                           dt_analysis_result_par_upd_in  => g_sysdate_tstz,
                                           dt_ins_result_tstz_in          => g_sysdate_tstz,
                                           dt_ext_registry_in             => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_ext_registry,
                                                                                                           NULL),
                                           id_unit_measure_in             => i_unit_measure,
                                           desc_unit_measure_in           => i_desc_unit_measure,
                                           ref_val_in                     => i_ref_val,
                                           ref_val_min_in                 => CASE
                                                                                 WHEN pk_utils.is_number(i_ref_val_min) =
                                                                                      pk_lab_tests_constant.g_yes THEN
                                                                                  CASE
                                                                                      WHEN instr(TRIM(REPLACE(i_ref_val_min, '.', ',')),
                                                                                                 ',',
                                                                                                 1) = 1 THEN
                                                                                       to_number('0' ||
                                                                                                 TRIM(REPLACE(i_ref_val_min, '.', ',')),
                                                                                                 pk_lab_tests_constant.g_format_mask,
                                                                                                 l_nls_numeric_param)
                                                                                      ELSE
                                                                                       to_number(TRIM(REPLACE(i_ref_val_min, '.', ',')),
                                                                                                 pk_lab_tests_constant.g_format_mask,
                                                                                                 l_nls_numeric_param)
                                                                                  END
                                                                                 ELSE
                                                                                  NULL
                                                                             END,
                                           ref_val_max_in                 => CASE
                                                                                 WHEN pk_utils.is_number(i_ref_val_max) =
                                                                                      pk_lab_tests_constant.g_yes THEN
                                                                                  CASE
                                                                                      WHEN instr(TRIM(REPLACE(i_ref_val_max, '.', ',')),
                                                                                                 ',',
                                                                                                 1) = 1 THEN
                                                                                       to_number('0' ||
                                                                                                 TRIM(REPLACE(i_ref_val_max, '.', ',')),
                                                                                                 pk_lab_tests_constant.g_format_mask,
                                                                                                 l_nls_numeric_param)
                                                                                      ELSE
                                                                                       to_number(TRIM(REPLACE(i_ref_val_max, '.', ',')),
                                                                                                 pk_lab_tests_constant.g_format_mask,
                                                                                                 l_nls_numeric_param)
                                                                                  END
                                                                                 ELSE
                                                                                  NULL
                                                                             END,
                                           ref_val_min_str_in             => i_ref_val_min,
                                           ref_val_max_str_in             => i_ref_val_max,
                                           parameter_notes_in             => i_parameter_notes,
                                           interface_notes_in             => i_interface_notes,
                                           id_result_status_in            => i_result_status,
                                           coding_system_in               => i_coding_system,
                                           id_abnormality_in              => i_abnormality,
                                           id_abnormality_nature_in       => i_abnormality_nature,
                                           method_in                      => i_method,
                                           equipment_in                   => i_equipment,
                                           id_prof_validation_in          => i_prof_validation,
                                           flg_validation_type_in         => pk_prof_utils.get_category(i_lang,
                                                                                                        profissional(i_prof_validation,
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)),
                                           dt_validation_tstz_in          => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_validation,
                                                                                                           NULL),
                                           id_instit_origin_in            => nvl(i_instit_origin, i_prof.institution),
                                           id_laboratory_in               => i_laboratory,
                                           laboratory_desc_in             => i_laboratory_desc,
                                           laboratory_short_desc_in       => i_laboratory_short_desc,
                                           flg_intf_orig_in               => i_flg_intf_orig,
                                           id_cdr_in                      => i_clinical_decision_rule,
                                           rows_out                       => l_rows_out);
            END IF;
        
        END IF;
    
        g_error := 'CALL PROCESS_INSERT';
        t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'ANALYSIS_RESULT_PAR',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        IF i_doc_external.count > 0
        THEN
            FOR i IN 1 .. i_doc_external.count
            LOOP
                IF i_doc_external.exists(i)
                   AND i_doc_external(i) IS NOT NULL
                THEN
                    IF i_doc_type.exists(i)
                       AND i_doc_type IS NOT NULL
                    THEN
                        l_doc_type := nvl(i_doc_type(i), 1044);
                    ELSE
                        --By default, documentation type is 'Lab test result'
                        l_doc_type := 1044;
                    END IF;
                
                    IF i_doc_ori_type.exists(i)
                       AND i_doc_ori_type(i) IS NOT NULL
                    THEN
                        l_doc_ori_type := i_doc_ori_type(i);
                    ELSE
                        --By default, doc_ori_type is 'Lab tests'
                        l_doc_ori_type := 15;
                    END IF;
                
                    IF i_title.exists(i)
                       AND i_title(i) IS NOT NULL
                    THEN
                        l_title := i_title(i);
                    ELSE
                        l_title := NULL;
                    END IF;
                
                    g_error := 'CALL TO PK_DOC.CREATE_SAVEDOC_INTERNAL';
                    IF NOT pk_doc.create_savedoc_internal(i_id_doc             => i_doc_external(i),
                                                          i_lang               => i_lang,
                                                          i_prof               => i_prof,
                                                          i_patient            => i_patient,
                                                          i_episode            => i_episode,
                                                          i_ext_req            => NULL,
                                                          i_doc_type           => l_doc_type,
                                                          i_desc_doc_type      => NULL,
                                                          i_num_doc            => NULL,
                                                          i_dt_doc             => l_dt_analysis_result,
                                                          i_dt_expire          => NULL,
                                                          i_dest               => 1,
                                                          i_desc_dest          => NULL,
                                                          i_ori_doc_type       => l_doc_ori_type,
                                                          i_desc_ori_doc_type  => NULL,
                                                          i_original           => 4,
                                                          i_desc_original      => NULL,
                                                          i_btn                => NULL,
                                                          i_title              => l_title,
                                                          i_flg_sent_by        => NULL,
                                                          i_flg_received       => NULL,
                                                          i_prof_perf_by       => i_prof.id,
                                                          i_desc_perf_by       => pk_prof_utils.get_name_signature(i_lang,
                                                                                                                   i_prof,
                                                                                                                   i_prof.id),
                                                          i_author             => NULL,
                                                          i_specialty          => NULL,
                                                          i_doc_language       => NULL,
                                                          i_flg_publish        => NULL,
                                                          i_conf_code          => table_varchar(),
                                                          i_desc_conf_code     => table_varchar(),
                                                          i_code_coding_schema => table_varchar(),
                                                          i_conf_code_set      => table_varchar(),
                                                          i_desc_conf_code_set => table_varchar(),
                                                          o_error              => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    l_rows_out := NULL;
                
                    ts_analysis_media_archive.ins(id_analysis_req_det_in    => i_analysis_req_det,
                                                  id_analysis_result_in     => l_next,
                                                  id_analysis_result_par_in => l_next_par,
                                                  id_doc_external_in        => i_doc_external(i),
                                                  flg_type_in               => pk_lab_tests_constant.g_media_archive_analysis_res,
                                                  flg_status_in             => pk_lab_tests_constant.g_active,
                                                  id_prof_last_update_in    => i_prof.id,
                                                  dt_last_update_tstz_in    => g_sysdate_tstz,
                                                  rows_out                  => l_rows_out);
                END IF;
            END LOOP;
        
            g_error := 'CALL PROCESS_INSERT';
            t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'ANALYSIS_MEDIA_ARCHIVE',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            SELECT ar.flg_status
              INTO l_status
              FROM analysis_result ar
             WHERE ar.id_analysis_result = l_next;
        
            IF l_status = pk_lab_tests_constant.g_analysis_cancel
            THEN
                l_rows_out := NULL;
            
                ts_analysis_result.upd(id_analysis_result_in => l_next,
                                       flg_status_in         => pk_lab_tests_constant.g_active,
                                       rows_out              => l_rows_out);
            
                g_error := 'CALL PROCESS_UPDATE';
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'ANALYSIS_RESULT',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
            END IF;
        END IF;
    
        OPEN c_result_par;
        FETCH c_result_par
            INTO l_result_par;
        CLOSE c_result_par;
    
        IF nvl(l_result_par.result_num, 0) > 1
        THEN
            IF nvl(l_result_par.count_preliminar, 0) > 0
            THEN
                -- se encontra, o resultado fica com o estado 'parcial' e cada parametro fica como "final"
                l_status_result := 7;
            ELSE
                l_status_result := 3;
            END IF;
        END IF;
    
        l_rows_out := NULL;
    
        ts_analysis_result.upd(id_analysis_result_in => l_next,
                               id_result_status_in   => l_status_result,
                               rows_out              => l_rows_out);
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'ANALYSIS_RESULT',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        OPEN c_result_mult(l_next);
        FETCH c_result_mult
            INTO l_result_mult;
        g_found := c_result_mult%FOUND;
        CLOSE c_result_mult;
    
        IF g_found
        THEN
            l_rows_out := NULL;
            ts_analysis_result.upd(id_analysis_result_in => l_next,
                                   flg_mult_result_in    => l_result_mult.flg_multiple_result,
                                   rows_out              => l_rows_out);
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'ANALYSIS_RESULT',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
        END IF;
    
        g_error := 'CALL TO PK_VISIT.GET_ACTIVE_VIS_EPIS';
        IF NOT pk_visit.get_active_vis_epis(i_lang           => i_lang,
                                            i_id_pat         => i_patient,
                                            i_id_institution => i_prof.institution,
                                            i_prof           => i_prof,
                                            o_id_visit       => l_visit,
                                            o_id_episode     => l_episode,
                                            o_error          => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        IF l_analysis.id_analysis_req_det IS NOT NULL
        THEN
            IF l_analysis.flg_status IN
               (pk_lab_tests_constant.g_analysis_result, pk_lab_tests_constant.g_analysis_read)
               AND l_result_mult.flg_multiple_result = pk_lab_tests_constant.g_yes
            THEN
                g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_HISTORY';
                IF NOT pk_lab_tests_core.set_lab_test_history(i_lang             => i_lang,
                                                              i_prof             => i_prof,
                                                              i_analysis_req     => NULL,
                                                              i_analysis_req_det => table_number(l_analysis.id_analysis_req_det),
                                                              o_error            => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            g_error := 'UPDATE ANALYSIS_REQ_DET';
            IF pk_prof_utils.get_category(i_lang, i_prof) = pk_alert_constant.g_cat_type_doc
               AND i_result_status = 3
               AND i_flg_intf_orig = pk_lab_tests_constant.g_no
               OR nvl(i_flg_orig_analysis, '#') IN
               (pk_lab_tests_constant.g_apf_type_maternal_health,
                   pk_periodic_observation.g_flg_type_reg,
                   pk_lab_tests_constant.g_apf_type_history)
            THEN
                IF l_analysis.flg_status != pk_lab_tests_constant.g_analysis_oncollection
                THEN
                    -- se for médico, fica logo lido
                    ts_analysis_result.upd(id_analysis_result_in => l_next,
                                           id_episode_in         => i_episode,
                                           id_episode_nin        => FALSE,
                                           id_visit_in           => pk_visit.get_visit(i_episode, o_error),
                                           id_visit_nin          => FALSE,
                                           rows_out              => l_rows_out);
                
                    t_data_gov_mnt.process_update(i_lang         => i_lang,
                                                  i_prof         => i_prof,
                                                  i_table_name   => 'ANALYSIS_RESULT',
                                                  i_list_columns => table_varchar('ID_EPISODE', 'ID_VISIT'),
                                                  i_rowids       => l_rows_out,
                                                  o_error        => o_error);
                
                    l_rows_out := NULL;
                
                    g_error := 'UPDATE ANALYSIS_REQ_DET';
                    ts_analysis_req_det.upd(id_analysis_req_det_in => l_analysis.id_analysis_req_det,
                                            flg_status_in          => pk_lab_tests_constant.g_analysis_read,
                                            id_prof_last_update_in => i_prof.id,
                                            dt_last_update_tstz_in => g_sysdate_tstz,
                                            rows_out               => l_rows_out);
                
                    t_data_gov_mnt.process_update(i_lang         => i_lang,
                                                  i_prof         => i_prof,
                                                  i_table_name   => 'ANALYSIS_REQ_DET',
                                                  i_list_columns => table_varchar('FLG_STATUS',
                                                                                  'ID_PROF_LAST_UPDATE',
                                                                                  'DT_LAST_UPDATE_TSTZ'),
                                                  i_rowids       => l_rows_out,
                                                  o_error        => o_error);
                
                    -- inserir em log de estados
                    IF l_analysis.id_episode IS NOT NULL
                    THEN
                        IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                                i_prof       => i_prof,
                                                i_id_episode => l_analysis.id_episode,
                                                i_flg_status => pk_lab_tests_constant.g_analysis_read,
                                                i_id_record  => l_analysis.id_analysis_req_det,
                                                i_flg_type   => pk_lab_tests_constant.g_analysis_type_det,
                                                o_error      => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                
                    g_error := 'CALL PK_LAB_TESTS_EXTERNAL_API_DB.UPDATE_TDE_TASK_STATE';
                    IF NOT pk_lab_tests_external_api_db.update_tde_task_state(i_lang         => i_lang,
                                                                              i_prof         => i_prof,
                                                                              i_lab_test_req => l_analysis.id_analysis_req_det,
                                                                              i_flg_action   => pk_lab_tests_constant.g_analysis_read,
                                                                              o_error        => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            ELSE
                IF l_analysis.flg_status != pk_lab_tests_constant.g_analysis_oncollection
                THEN
                    l_rows_out := NULL;
                
                    g_error := 'UPDATE ANALYSIS_REQ_DET';
                    ts_analysis_req_det.upd(id_analysis_req_det_in => l_analysis.id_analysis_req_det,
                                            flg_status_in          => pk_lab_tests_constant.g_analysis_result,
                                            id_prof_last_update_in => i_prof.id,
                                            dt_last_update_tstz_in => g_sysdate_tstz,
                                            rows_out               => l_rows_out);
                
                    t_data_gov_mnt.process_update(i_lang         => i_lang,
                                                  i_prof         => i_prof,
                                                  i_table_name   => 'ANALYSIS_REQ_DET',
                                                  i_list_columns => table_varchar('FLG_STATUS',
                                                                                  'ID_PROF_LAST_UPDATE',
                                                                                  'DT_LAST_UPDATE_TSTZ'),
                                                  i_rowids       => l_rows_out,
                                                  o_error        => o_error);
                
                    g_error := 'CALL PK_LAB_TESTS_EXTERNAL_API_DB.UPDATE_TDE_TASK_STATE';
                    IF NOT pk_lab_tests_external_api_db.update_tde_task_state(i_lang         => i_lang,
                                                                              i_prof         => i_prof,
                                                                              i_lab_test_req => l_analysis.id_analysis_req_det,
                                                                              i_flg_action   => pk_lab_tests_constant.g_analysis_result,
                                                                              o_error        => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    -- inserir em log de estados
                    IF l_analysis.id_episode IS NOT NULL
                    THEN
                        IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                                i_prof       => i_prof,
                                                i_id_episode => l_analysis.id_episode,
                                                i_flg_status => pk_lab_tests_constant.g_analysis_result,
                                                i_id_record  => l_analysis.id_analysis_req_det,
                                                i_flg_type   => pk_lab_tests_constant.g_analysis_type_det,
                                                o_error      => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                END IF;
            
                g_error := 'GET EPISODE SOFTWARE';
                OPEN c_episode(l_analysis.id_episode);
                FETCH c_episode
                    INTO l_software;
                g_found := c_episode%FOUND;
                CLOSE c_episode;
            
                IF NOT g_found
                THEN
                    g_error := pk_message.get_message(i_lang, 'COMMON_M001') || chr(10) ||
                               'PK_LAB_TESTS_CORE.SET_LAB_TEST_RESULT / ' || g_error || ' / ' || SQLERRM;
                    RAISE g_other_exception;
                END IF;
            
                BEGIN
                    SELECT 1
                      INTO l_alert_exists
                      FROM sys_alert_event sae
                     WHERE sae.id_sys_alert = 15
                       AND sae.id_episode = l_analysis.id_episode
                       AND sae.id_record = l_next
                       AND sae.id_institution = i_prof.institution
                       AND sae.flg_visible = pk_alert_constant.g_yes
                       AND rownum = 1;
                EXCEPTION
                    WHEN no_data_found THEN
                        l_alert_exists := 0;
                END;
            
                IF l_alert_exists = 0
                THEN
                    l_sys_alert_event.id_sys_alert    := 15;
                    l_sys_alert_event.id_software     := l_software;
                    l_sys_alert_event.id_institution  := i_prof.institution;
                    l_sys_alert_event.id_episode      := i_episode;
                    l_sys_alert_event.id_record       := l_next;
                    l_sys_alert_event.dt_record       := l_dt_analysis_result;
                    l_sys_alert_event.id_professional := nvl(l_analysis.id_prof_writes, i_prof.id);
                    l_sys_alert_event.replace2        := l_analysis.flg_priority;
                    l_sys_alert_event.id_prof_order   := nvl(l_analysis.id_prof_order, l_analysis.id_prof_writes);
                
                    --Insere evento na tabela de alertas
                    g_error := 'INSERT INTO SYS_ALERT_EVENT';
                    IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => profissional(l_sys_alert_event.id_prof_order,
                                                                                              i_prof.institution,
                                                                                              l_software),
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            i_flg_type_dest   => 'C',
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    IF l_analysis.id_prof_order != l_analysis.id_prof_writes
                    THEN
                        l_sys_alert_event.id_professional := l_analysis.id_prof_order;
                    
                        --Insere evento na tabela de alertas
                        IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                                i_prof            => profissional(l_analysis.id_prof_order,
                                                                                                  i_prof.institution,
                                                                                                  l_software),
                                                                i_sys_alert_event => l_sys_alert_event,
                                                                i_flg_type_dest   => 'C',
                                                                o_error           => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                
                    FOR i IN 1 .. l_analysis.id_prof_resp.count
                    LOOP
                        IF l_analysis.id_prof_resp(i) != l_analysis.id_prof_writes
                           AND l_analysis.id_prof_resp(i) != nvl(l_analysis.id_prof_order, -1)
                        THEN
                        
                            l_sys_alert_event.id_professional := l_analysis.id_prof_resp(i);
                        
                            --Insere evento na tabela de alertas
                            IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                                    i_prof            => i_prof,
                                                                    i_sys_alert_event => l_sys_alert_event,
                                                                    i_flg_type_dest   => 'C',
                                                                    o_error           => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        END IF;
                    END LOOP;
                END IF;
            
                IF pk_utils.is_number(i_ref_val_min) = pk_lab_tests_constant.g_yes
                THEN
                    IF instr(TRIM(REPLACE(i_ref_val_min, '.', ',')), ',', 1) = 1
                    THEN
                        l_ref_val_min := to_number('0' || TRIM(REPLACE(i_ref_val_min, '.', ',')),
                                                   pk_lab_tests_constant.g_format_mask,
                                                   l_nls_numeric_param);
                    ELSE
                        l_ref_val_min := to_number(TRIM(REPLACE(i_ref_val_min, '.', ',')),
                                                   pk_lab_tests_constant.g_format_mask,
                                                   l_nls_numeric_param);
                    END IF;
                END IF;
            
                IF pk_utils.is_number(i_ref_val_max) = pk_lab_tests_constant.g_yes
                THEN
                    IF instr(TRIM(REPLACE(i_ref_val_max, '.', ',')), ',', 1) = 1
                    THEN
                        l_ref_val_max := to_number('0' || TRIM(REPLACE(i_ref_val_max, '.', ',')),
                                                   pk_lab_tests_constant.g_format_mask,
                                                   l_nls_numeric_param);
                    ELSE
                        l_ref_val_max := to_number(TRIM(REPLACE(i_ref_val_max, '.', ',')),
                                                   pk_lab_tests_constant.g_format_mask,
                                                   l_nls_numeric_param);
                    END IF;
                END IF;
            
                IF pk_utils.is_number(i_result_value_1) = pk_lab_tests_constant.g_yes
                   AND i_result_value_2 IS NULL
                THEN
                    IF instr(TRIM(REPLACE(i_result_value_1, '.', ',')), ',', 1) = 1
                    THEN
                        l_analysis_result_value := to_number('0' || TRIM(REPLACE(i_result_value_1, '.', ',')),
                                                             pk_lab_tests_constant.g_format_mask,
                                                             l_nls_numeric_param);
                    ELSE
                        l_analysis_result_value := to_number(TRIM(REPLACE(i_result_value_1, '.', ',')),
                                                             pk_lab_tests_constant.g_format_mask,
                                                             l_nls_numeric_param);
                    END IF;
                END IF;
            
                IF (l_ref_val_min IS NOT NULL)
                   AND (l_ref_val_max IS NOT NULL)
                   AND (l_analysis_result_value IS NOT NULL)
                THEN
                    IF l_analysis_result_value < l_ref_val_min
                       OR l_analysis_result_value > l_ref_val_max
                    THEN
                        BEGIN
                            SELECT 1
                              INTO l_alert_exists
                              FROM sys_alert_event sae
                             WHERE sae.id_sys_alert = 201
                               AND sae.id_episode = l_analysis.id_episode
                               AND sae.id_record = l_next
                               AND sae.id_institution = i_prof.institution
                               AND sae.id_software = l_software
                               AND rownum = 1;
                        EXCEPTION
                            WHEN no_data_found THEN
                                l_alert_exists := 0;
                        END;
                    
                        IF l_alert_exists = 0
                        THEN
                        
                            l_sys_alert_event.id_sys_alert    := 201;
                            l_sys_alert_event.id_software     := i_prof.software;
                            l_sys_alert_event.id_institution  := i_prof.institution;
                            l_sys_alert_event.id_episode      := i_episode;
                            l_sys_alert_event.id_record       := l_next;
                            l_sys_alert_event.dt_record       := l_dt_analysis_result;
                            l_sys_alert_event.id_professional := nvl(l_analysis.id_prof_writes, i_prof.id);
                            l_sys_alert_event.replace1        := 'ANALYSIS.CODE_ANALYSIS.' || l_analysis.id_analysis;
                            l_sys_alert_event.id_prof_order   := nvl(l_analysis.id_prof_order,
                                                                     l_analysis.id_prof_writes);
                        
                            g_error := 'INSERT INTO SYS_ALERT_EVENT REF OUT';
                            IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                                    i_prof            => i_prof,
                                                                    i_sys_alert_event => l_sys_alert_event,
                                                                    i_flg_type_dest   => 'C',
                                                                    o_error           => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        
            g_error := 'CALL TO PK_IA_EVENT_LAB.ANALYSIS_REQUEST_RESULTS';
            pk_ia_event_lab.analysis_request_results(i_id_analysis_req_det => i_analysis_req_det,
                                                     i_id_institution      => i_prof.institution,
                                                     i_flg_old_status      => l_analysis.flg_status);
        
            -- Procurar detalhes do mm cabeçalho ainda sem resultado
            g_error := 'GET DETAIL STATUS';
            OPEN c_count(l_analysis.id_analysis_req);
            FETCH c_count
                INTO l_count;
            CLOSE c_count;
        
            IF l_analysis.flg_status != pk_lab_tests_constant.g_analysis_oncollection
            THEN
                IF nvl(l_count, 0) > 0
                THEN
                    -- se encontra, cabeçalho fica 'parcial'
                    l_analysis.flg_status := pk_lab_tests_constant.g_analysis_partial;
                ELSE
                    l_analysis.flg_status := pk_lab_tests_constant.g_analysis_result; -- senão, fica 'com resultado'
                END IF;
            
                l_rows_out := NULL;
            
                g_error := 'UPDATE ANALYSIS_REQ';
                ts_analysis_req.upd(id_analysis_req_in => l_analysis.id_analysis_req,
                                    flg_status_in      => l_analysis.flg_status,
                                    rows_out           => l_rows_out);
            
                t_data_gov_mnt.process_update(i_lang         => i_lang,
                                              i_prof         => i_prof,
                                              i_table_name   => 'ANALYSIS_REQ',
                                              i_list_columns => table_varchar('FLG_STATUS'),
                                              i_rowids       => l_rows_out,
                                              o_error        => o_error);
            
                -- inserir em log de estados
                IF l_analysis.id_episode IS NOT NULL
                THEN
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => l_analysis.id_episode,
                                            i_flg_status => l_analysis.flg_status,
                                            i_id_record  => l_analysis.id_analysis_req,
                                            i_flg_type   => pk_lab_tests_constant.g_analysis_type_req,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        
            g_error := 'OPEN C_EPISODE_TYPE';
            OPEN c_episode_type(l_analysis.id_episode);
            FETCH c_episode_type
                INTO l_episode_type;
            CLOSE c_episode_type;
        
            IF l_episode_type.id_epis_type = pk_lab_tests_constant.g_episode_type_lab
            THEN
                g_error := 'OPEN C_EPISODE_ANALYSIS';
                OPEN c_episode_analysis(l_analysis.id_episode);
                FETCH c_episode_analysis
                    INTO l_episode_analysis;
                g_found := c_episode_analysis%FOUND;
                CLOSE c_episode_analysis;
            
                IF NOT g_found
                THEN
                    IF NOT pk_visit.set_visit_end(i_lang          => i_lang,
                                                  i_prof          => i_prof,
                                                  i_prof_cat_type => pk_prof_utils.get_category(i_lang, i_prof),
                                                  i_id_visit      => l_episode_type.id_visit,
                                                  o_error         => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        
            g_error := 'PK_LAB_TESTS_API_DB.SET_LAB_TEST_GRID_TASK';
            IF NOT pk_lab_tests_api_db.set_lab_test_grid_task(i_lang             => i_lang,
                                                              i_prof             => i_prof,
                                                              i_patient          => i_patient,
                                                              i_episode          => l_analysis.id_episode,
                                                              i_analysis_req     => l_analysis.id_analysis_req,
                                                              i_analysis_req_det => l_analysis.id_analysis_req_det,
                                                              o_error            => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        g_error := 'CALL TO PK_VISIT.SET_FIRST_OBS';
        IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                      i_id_episode          => l_analysis.id_episode,
                                      i_pat                 => NULL,
                                      i_prof                => i_prof,
                                      i_prof_cat_type       => NULL,
                                      i_dt_last_interaction => l_dt_analysis_result,
                                      i_dt_first_obs        => l_dt_analysis_result,
                                      o_error               => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        IF l_next_par IS NOT NULL
        THEN
            g_error := 'Missing parametrizations/values. i_analysis_result_par = ' || l_next_par;
            SELECT arp.id_analysis_result_par || '|' ||
                   decode(arp.dt_cancel, NULL, pk_lab_tests_constant.g_active, pk_lab_tests_constant.g_analysis_cancel) || '|' ||
                   nvl(TRIM(dbms_lob.substr(arp.desc_analysis_result, 3800)), arp.analysis_result_value_1) || '|' ||
                   decode(arp.id_unit_measure,
                          NULL,
                          arp.desc_unit_measure,
                          pk_translation.get_translation(i_lang,
                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' || arp.id_unit_measure)) || '|' ||
                   decode(pk_utils.is_number(dbms_lob.substr(arp.desc_analysis_result, 3800)),
                          pk_lab_tests_constant.g_no,
                          decode(to_char(dbms_lob.substr(arp.desc_analysis_result, 3800)),
                                 ad.value,
                                 ad.icon,
                                 'ExaminationsResultIcon'),
                          'X') || '|' ||
                   decode(arp.notes_cancel, '', pk_lab_tests_constant.g_no, pk_lab_tests_constant.g_yes) || '|' ||
                   arp.id_unit_measure VALUE
              INTO o_result
              FROM analysis_result_par arp, analysis_desc ad
             WHERE arp.id_analysis_result_par = l_next_par
               AND arp.id_analysis_desc = ad.id_analysis_desc(+)
               AND to_char(dbms_lob.substr(arp.desc_analysis_result, 3800)) = ad.value(+);
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_LAB_TEST_RESULT',
                                              o_error);
            RETURN FALSE;
    END set_lab_test_result;

    FUNCTION set_lab_test_doc_associated
    (
        i_lang                 IN language.id_language%TYPE,
        i_prof                 IN profissional,
        i_patient              IN exam_result.id_patient%TYPE,
        i_episode              IN exam_result.id_episode%TYPE,
        i_analysis_req_det     IN analysis_req_det.id_analysis_req_det%TYPE,
        i_flg_import           IN table_varchar,
        i_id_doc               IN table_number,
        i_tbl_ds_internal_name IN table_varchar DEFAULT NULL,
        i_tbl_val              IN table_table_varchar DEFAULT NULL,
        i_tbl_real_val         IN table_table_varchar DEFAULT NULL,
        o_error                OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        IF i_flg_import.count > 0
        THEN
            FOR i IN 1 .. i_flg_import.count
            LOOP
                IF i_flg_import(i) = pk_lab_tests_constant.g_yes
                THEN
                    g_error := 'CALL TO PK_DOC.CREATE_SAVEDOC_INTERNAL';
                    IF NOT pk_doc_ux.create_savedoc(i_lang                 => i_lang,
                                                    i_prof                 => i_prof,
                                                    i_id_episode           => i_episode,
                                                    i_id_patient           => i_patient,
                                                    i_id_doc               => i_id_doc(i),
                                                    i_ext_req              => NULL,
                                                    i_tbl_ds_internal_name => i_tbl_ds_internal_name,
                                                    i_tbl_val              => i_tbl_val,
                                                    i_tbl_real_val         => i_tbl_real_val,
                                                    o_error                => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    ts_analysis_media_archive.ins(id_analysis_req_det_in => i_analysis_req_det,
                                                  id_analysis_result_in  => NULL,
                                                  id_doc_external_in     => i_id_doc(i),
                                                  flg_type_in            => pk_lab_tests_constant.g_media_archive_analysis_doc,
                                                  flg_status_in          => pk_lab_tests_constant.g_active,
                                                  id_prof_last_update_in => i_prof.id,
                                                  dt_last_update_tstz_in => g_sysdate_tstz,
                                                  rows_out               => l_rows_out);
                
                ELSE
                    ts_analysis_media_archive.ins(id_analysis_req_det_in => i_analysis_req_det,
                                                  id_analysis_result_in  => NULL,
                                                  id_doc_external_in     => i_id_doc(i),
                                                  flg_type_in            => pk_lab_tests_constant.g_media_archive_analysis_doc,
                                                  flg_status_in          => pk_lab_tests_constant.g_active,
                                                  id_prof_last_update_in => i_prof.id,
                                                  dt_last_update_tstz_in => g_sysdate_tstz,
                                                  rows_out               => l_rows_out);
                END IF;
            END LOOP;
        
            g_error := 'CALL PROCESS_INSERT';
            t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'ANALYSIS_MEDIA_ARCHIVE',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            ts_analysis_req_det.upd(id_analysis_req_det_in => i_analysis_req_det,
                                    id_prof_last_update_in => i_prof.id,
                                    dt_last_update_tstz_in => g_sysdate_tstz,
                                    rows_out               => l_rows_out);
        
            g_error := 'CALL TO PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'ANALYSIS_REQ_DET',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_LAB_TEST_DOC_ASSOCIATED',
                                              o_error);
            RETURN FALSE;
    END set_lab_test_doc_associated;

    FUNCTION set_lab_test_status
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_analysis_req_det IN table_number,
        i_status           IN analysis_req_det.flg_status%TYPE,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_analysis_req(i_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE) IS
            SELECT ar.id_analysis_req,
                   ard.id_analysis,
                   ard.flg_time_harvest flg_time,
                   ard.flg_status,
                   ar.id_prof_writes,
                   ard.dt_target_tstz,
                   decode(ard.id_movement,
                          NULL,
                          decode(ais.flg_mov_pat, pk_lab_tests_constant.g_no, NULL, ard.id_room),
                          NULL) id_room,
                   nvl(ar.id_episode, ar.id_episode_origin) id_episode,
                   ar.id_patient,
                   arst.id_analysis_result,
                   aresp.id_analysis_result_par
              FROM analysis_req_det ard,
                   analysis_req ar,
                   (SELECT *
                      FROM analysis_instit_soft
                     WHERE flg_available = pk_lab_tests_constant.g_available
                       AND id_institution = i_prof.institution
                       AND id_software = i_prof.software) ais,
                   analysis_result arst,
                   analysis_result_par aresp
             WHERE ard.id_analysis_req_det = i_analysis_req_det
               AND ard.id_analysis_req = ar.id_analysis_req
               AND ard.id_analysis = ais.id_analysis(+)
               AND ard.id_analysis_req_det = arst.id_analysis_req_det(+)
               AND arst.id_analysis_result = aresp.id_analysis_result(+)
               AND ard.id_sample_type = ais.id_sample_type(+);
    
        TYPE request_movement IS RECORD(
            id_room room.id_room%TYPE,
            id_mov  analysis_req_det.id_movement%TYPE);
    
        TYPE rm IS TABLE OF request_movement INDEX BY BINARY_INTEGER;
        req_mov rm;
        k       NUMBER := 0;
    
        l_analysis_req c_analysis_req%ROWTYPE;
    
        l_flg_profile profile_template.flg_profile%TYPE := nvl(pk_hand_off_core.get_flg_profile(i_lang, i_prof, NULL),
                                                               '#');
    
        l_id_mov  movement.id_movement%TYPE;
        l_req_mov BOOLEAN;
    
        l_flg_show  VARCHAR2(1 CHAR);
        l_msg_text  VARCHAR2(1000 CHAR);
        l_msg_title VARCHAR2(1000 CHAR);
        l_button    VARCHAR2(6 CHAR);
    
        l_sys_alert_event sys_alert_event%ROWTYPE;
    
        l_rows_out table_varchar;
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        FOR i IN 1 .. i_analysis_req_det.count
        LOOP
        
            g_error := 'OPEN C_STATUS';
            OPEN c_analysis_req(i_analysis_req_det(i));
            FETCH c_analysis_req
                INTO l_analysis_req;
            CLOSE c_analysis_req;
        
            IF l_analysis_req.flg_status != pk_lab_tests_constant.g_analysis_cancel
            THEN
                IF i_status = pk_lab_tests_constant.g_analysis_req
                THEN
                    IF l_analysis_req.id_room IS NOT NULL
                    THEN
                        g_error   := 'LOOP PREVIOUS REQ';
                        l_req_mov := TRUE;
                        l_id_mov  := NULL;
                    
                        IF k != 0
                        THEN
                            FOR j IN 1 .. k
                            LOOP
                                IF req_mov(j).id_room = l_analysis_req.id_room
                                THEN
                                    -- Já foi requisitado mov p/ esta sala
                                    l_req_mov := FALSE;
                                    l_id_mov  := req_mov(j).id_mov;
                                    EXIT;
                                END IF;
                            END LOOP;
                        END IF;
                    
                        IF l_req_mov
                        THEN
                            g_error := 'CALL TO PK_MOVEMENT.CREATE_MOVEMENT';
                            IF NOT pk_movement.call_create_movement(i_lang          => i_lang,
                                                                    i_episode       => l_analysis_req.id_episode,
                                                                    i_prof          => i_prof,
                                                                    i_room          => l_analysis_req.id_room,
                                                                    i_necessity     => NULL,
                                                                    i_dt_req_str    => pk_date_utils.date_send_tsz(i_lang,
                                                                                                                   g_sysdate_tstz,
                                                                                                                   i_prof),
                                                                    i_prof_cat_type => pk_prof_utils.get_category(i_lang,
                                                                                                                  i_prof),
                                                                    o_id_mov        => l_id_mov,
                                                                    o_flg_show      => l_flg_show,
                                                                    o_msg           => l_msg_text,
                                                                    o_msg_title     => l_msg_title,
                                                                    o_button        => l_button,
                                                                    o_error         => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        
                            -- Guarda-se os IDs dos movimentos p/ associar a outros detalhes c/ a
                            -- mesma sala de realização de exame
                            g_error := 'SET MOV VECTOR';
                            k := k + 1;
                            req_mov(k).id_room := l_analysis_req.id_room;
                            req_mov(k).id_mov := l_id_mov;
                        END IF;
                    
                        g_error := 'UPDATE ANALYSIS_REQ_DET';
                        ts_analysis_req_det.upd(id_analysis_req_det_in => i_analysis_req_det(i),
                                                id_movement_in         => l_id_mov,
                                                id_movement_nin        => FALSE,
                                                rows_out               => l_rows_out);
                    END IF;
                
                    IF l_analysis_req.flg_time = pk_lab_tests_constant.g_flg_time_n
                    THEN
                        g_error := 'CALL PK_LAB_TESTS_HARVEST_CORE.CREATE_HARVEST_SUSPENDED';
                        IF NOT pk_lab_tests_harvest_core.create_harvest_suspended(i_lang             => i_lang,
                                                                                  i_prof             => i_prof,
                                                                                  i_analysis_req_det => i_analysis_req_det(i),
                                                                                  o_error            => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                
                    --Verifica se o evento é passível de gerar alertas
                    l_sys_alert_event.id_software     := i_prof.software;
                    l_sys_alert_event.id_institution  := i_prof.institution;
                    l_sys_alert_event.id_episode      := l_analysis_req.id_episode;
                    l_sys_alert_event.id_record       := i_analysis_req_det(i);
                    l_sys_alert_event.dt_record       := nvl(l_analysis_req.dt_target_tstz, g_sysdate_tstz);
                    l_sys_alert_event.id_professional := l_analysis_req.id_prof_writes;
                    l_sys_alert_event.id_room         := NULL;
                    l_sys_alert_event.replace1        := 'ANALYSIS.CODE_ANALYSIS.' || l_analysis_req.id_analysis;
                    l_sys_alert_event.id_prof_order   := l_analysis_req.id_prof_writes;
                
                    l_sys_alert_event.id_sys_alert := 4;
                    --Insere evento na tabela de alertas
                    g_error := 'INSERT INTO SYS_ALERT_EVENT';
                    IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            i_flg_type_dest   => 'C',
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    l_sys_alert_event.id_sys_alert := 40;
                    l_sys_alert_event.replace2     := nvl(pk_date_utils.get_timestamp_str(i_lang,
                                                                                          i_prof,
                                                                                          l_analysis_req.dt_target_tstz,
                                                                                          NULL),
                                                          pk_date_utils.get_timestamp_str(i_lang,
                                                                                          i_prof,
                                                                                          g_sysdate_tstz,
                                                                                          NULL));
                    --Insere evento na tabela de alertas
                    g_error := 'INSERT INTO SYS_ALERT_EVENT';
                    IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            i_flg_type_dest   => 'C',
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_HISTORY';
                IF NOT pk_lab_tests_core.set_lab_test_history(i_lang             => i_lang,
                                                              i_prof             => i_prof,
                                                              i_analysis_req     => l_analysis_req.id_analysis_req,
                                                              i_analysis_req_det => i_analysis_req_det,
                                                              o_error            => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'UPDATE ANALYSIS_REQ';
                ts_analysis_req.upd(id_analysis_req_in     => l_analysis_req.id_analysis_req,
                                    flg_status_in          => i_status,
                                    dt_pend_req_tstz_in    => CASE i_status
                                                                  WHEN pk_lab_tests_constant.g_analysis_pending THEN
                                                                   g_sysdate_tstz
                                                                  ELSE
                                                                   CASE l_analysis_req.flg_status
                                                                       WHEN pk_lab_tests_constant.g_analysis_wtg_tde THEN
                                                                        g_sysdate_tstz
                                                                       ELSE
                                                                        NULL
                                                                   END
                                                              END,
                                    dt_pend_req_tstz_nin   => FALSE,
                                    id_prof_last_update_in => CASE l_flg_profile
                                                                  WHEN pk_prof_utils.g_flg_profile_template_student THEN
                                                                   CASE i_status
                                                                       WHEN pk_lab_tests_constant.g_analysis_draft THEN
                                                                        i_prof.id
                                                                       ELSE
                                                                        NULL
                                                                   END
                                                                  ELSE
                                                                   i_prof.id
                                                              END,
                                    dt_last_update_tstz_in => CASE l_flg_profile
                                                                  WHEN pk_prof_utils.g_flg_profile_template_student THEN
                                                                   CASE i_status
                                                                       WHEN pk_lab_tests_constant.g_analysis_draft THEN
                                                                        g_sysdate_tstz
                                                                       ELSE
                                                                        NULL
                                                                   END
                                                                  ELSE
                                                                   g_sysdate_tstz
                                                              END,
                                    rows_out               => l_rows_out);
            
                IF l_analysis_req.id_episode IS NOT NULL
                THEN
                    -- inserir em log de estados
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => l_analysis_req.id_episode,
                                            i_flg_status => i_status,
                                            i_id_record  => l_analysis_req.id_analysis_req,
                                            i_flg_type   => pk_lab_tests_constant.g_analysis_type_req,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                g_error := 'CALL PROCESS_UPDATE';
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'ANALYSIS_REQ',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
            
                l_rows_out := NULL;
            
                g_error := 'UPDATE ANALYSIS_REQ_DET';
                ts_analysis_req_det.upd(id_analysis_req_det_in => i_analysis_req_det(i),
                                        flg_status_in          => i_status,
                                        dt_pend_req_tstz_in    => CASE i_status
                                                                      WHEN pk_lab_tests_constant.g_analysis_pending THEN
                                                                       g_sysdate_tstz
                                                                      ELSE
                                                                       CASE l_analysis_req.flg_status
                                                                           WHEN pk_lab_tests_constant.g_analysis_wtg_tde THEN
                                                                            g_sysdate_tstz
                                                                           ELSE
                                                                            NULL
                                                                       END
                                                                  END,
                                        dt_pend_req_tstz_nin   => FALSE,
                                        id_prof_last_update_in => CASE l_flg_profile
                                                                      WHEN pk_prof_utils.g_flg_profile_template_student THEN
                                                                       CASE i_status
                                                                           WHEN pk_lab_tests_constant.g_analysis_draft THEN
                                                                            i_prof.id
                                                                           ELSE
                                                                            NULL
                                                                       END
                                                                      ELSE
                                                                       i_prof.id
                                                                  END,
                                        dt_last_update_tstz_in => CASE l_flg_profile
                                                                      WHEN pk_prof_utils.g_flg_profile_template_student THEN
                                                                       CASE i_status
                                                                           WHEN pk_lab_tests_constant.g_analysis_draft THEN
                                                                            g_sysdate_tstz
                                                                           ELSE
                                                                            NULL
                                                                       END
                                                                      ELSE
                                                                       g_sysdate_tstz
                                                                  END,
                                        rows_out               => l_rows_out);
            
                IF l_analysis_req.id_episode IS NOT NULL
                THEN
                    -- inserir em log de estados
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => l_analysis_req.id_episode,
                                            i_flg_status => i_status,
                                            i_id_record  => l_analysis_req.id_analysis_req,
                                            i_flg_type   => pk_lab_tests_constant.g_analysis_type_det,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                g_error := 'CALL PROCESS_UPDATE';
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'ANALYSIS_REQ_DET',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
            
                g_error := 'CALL PK_LAB_TESTS_EXTERNAL_API_DB.UPDATE_TDE_TASK_STATE';
                IF NOT pk_lab_tests_external_api_db.update_tde_task_state(i_lang         => i_lang,
                                                                          i_prof         => i_prof,
                                                                          i_lab_test_req => i_analysis_req_det(i),
                                                                          i_flg_action   => i_status,
                                                                          o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'PK_LAB_TESTS_API_DB.SET_LAB_TEST_GRID_TASK';
                IF NOT pk_lab_tests_api_db.set_lab_test_grid_task(i_lang             => i_lang,
                                                                  i_prof             => i_prof,
                                                                  i_patient          => l_analysis_req.id_patient,
                                                                  i_episode          => l_analysis_req.id_episode,
                                                                  i_analysis_req     => l_analysis_req.id_analysis_req,
                                                                  i_analysis_req_det => i_analysis_req_det(i),
                                                                  o_error            => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                IF l_analysis_req.id_episode IS NOT NULL
                THEN
                    g_error := 'CALL TO SET_FIRST_OBS';
                    IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                                  i_id_episode          => l_analysis_req.id_episode,
                                                  i_pat                 => NULL,
                                                  i_prof                => i_prof,
                                                  i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                                  i_dt_last_interaction => g_sysdate_tstz,
                                                  i_dt_first_obs        => g_sysdate_tstz,
                                                  o_error               => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    IF i_status = pk_lab_tests_constant.g_analysis_req
                    THEN
                        g_error := 'CALL TO PK_VISIT.UPDATE_EPIS_TASK';
                        IF NOT pk_visit.upd_epis_info_analysis(i_lang                   => i_lang,
                                                               i_id_episode             => l_analysis_req.id_episode,
                                                               i_id_prof                => i_prof,
                                                               i_dt_first_analysis_exec => NULL,
                                                               i_dt_first_analysis_req  => pk_date_utils.date_send_tsz(i_lang,
                                                                                                                       g_sysdate_tstz,
                                                                                                                       i_prof),
                                                               i_prof_cat_type          => pk_prof_utils.get_category(i_lang,
                                                                                                                      i_prof),
                                                               o_error                  => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_LAB_TEST_STATUS',
                                              o_error);
            RETURN FALSE;
    END set_lab_test_status;

    FUNCTION set_lab_test_status_read
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_analysis_result_par IN table_number,
        i_flg_relevant        IN table_varchar,
        i_notes               IN table_varchar,
        i_cancel_reason       IN cancel_reason.id_cancel_reason%TYPE DEFAULT NULL,
        o_error               OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_analysis(l_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE) IS
            SELECT ard.id_analysis_req,
                   ard.flg_status,
                   ard.flg_time_harvest,
                   ar.id_prof_writes,
                   cso.id_prof_ordered_by id_prof_order,
                   ar.id_patient,
                   ar.id_episode,
                   ar.id_visit,
                   (SELECT pk_hand_off_core.is_prof_responsible_current(i_lang,
                                                                        i_prof,
                                                                        ar.id_episode,
                                                                        pk_prof_utils.get_category(i_lang, i_prof),
                                                                        NULL)
                      FROM dual) id_prof_resp
              FROM analysis_req_det ard,
                   analysis_req ar,
                   TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                  i_prof,
                                                                  ar.id_episode,
                                                                  NULL,
                                                                  NULL,
                                                                  NULL,
                                                                  l_analysis_req_det)) cso
             WHERE ard.id_analysis_req_det = l_analysis_req_det
               AND ar.id_analysis_req = ard.id_analysis_req
               AND ard.id_co_sign_order = cso.id_co_sign_hist(+);
    
        CURSOR c_count(l_analysis_req analysis_req.id_analysis_req%TYPE) IS
            SELECT COUNT(*)
              FROM analysis_req_det ard
             WHERE ard.id_analysis_req = l_analysis_req
               AND ard.flg_status NOT IN
                   (pk_lab_tests_constant.g_analysis_read, pk_lab_tests_constant.g_analysis_cancel);
    
        l_analysis c_analysis%ROWTYPE;
    
        l_count NUMBER;
    
        l_analysis_req_det analysis_req_det.id_analysis_req_det%TYPE;
        l_analysis_result  analysis_result.id_analysis_result%TYPE;
    
        l_sys_alert_event sys_alert_event%ROWTYPE;
        l_analysis_alert  table_number := table_number(15, 201, 210);
    
        l_rows_out table_varchar := table_varchar();
    
        l_char                      VARCHAR2(1);
        l_permission_read_prof_temp BOOLEAN := TRUE;
        l_id_prof                   professional.id_professional%TYPE;
    
        l_reading_permission table_varchar := pk_string_utils.str_split(pk_sysconfig.get_config('LAB_TESTS_READING_PERMISSION_BY_PROFILE_TEMPLATE',
                                                                                                profissional(l_id_prof,
                                                                                                             i_prof.institution,
                                                                                                             i_prof.software)),
                                                                        '|');
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        -- Checks if the professional has reading permissions even if he isn't responsible, and didn't ordered the lab test
        -- UK - Brighton NHS Trust request 
        BEGIN
        
            SELECT /*+opt_estimate (table t rows=1)*/
            DISTINCT 'X'
              INTO l_char
              FROM TABLE(l_reading_permission)
             WHERE column_value = pk_prof_utils.get_prof_profile_template(i_prof);
        
            l_permission_read_prof_temp := TRUE;
        
        EXCEPTION
            WHEN no_data_found THEN
                l_permission_read_prof_temp := FALSE;
        END;
    
        FOR i IN 1 .. i_analysis_result_par.count
        LOOP
        
            IF i_analysis_result_par(i) IS NOT NULL
            THEN
                SELECT ares.id_analysis_req_det, ares.id_analysis_result
                  INTO l_analysis_req_det, l_analysis_result
                  FROM analysis_result_par aresp
                  JOIN analysis_result ares
                    ON ares.id_analysis_result = aresp.id_analysis_result
                 WHERE aresp.id_analysis_result_par = i_analysis_result_par(i);
            
                g_error := 'OPEN C_STATUS';
                OPEN c_analysis(l_analysis_req_det);
                FETCH c_analysis
                    INTO l_analysis;
                CLOSE c_analysis;
            
                IF ((l_analysis.flg_status = pk_lab_tests_constant.g_analysis_result OR
                   l_analysis.flg_status = pk_lab_tests_constant.g_analysis_read)
                   -- Marcar como lido só se
                   AND (i_prof.id IN (l_analysis.id_prof_writes, l_analysis.id_prof_order, l_analysis.id_prof_resp) OR
                   l_permission_read_prof_temp))
                   OR i_cancel_reason IS NOT NULL
                THEN
                
                    g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_HISTORY';
                    IF NOT pk_lab_tests_core.set_lab_test_history(i_lang             => i_lang,
                                                                  i_prof             => i_prof,
                                                                  i_analysis_req     => NULL,
                                                                  i_analysis_req_det => table_number(l_analysis_req_det),
                                                                  o_error            => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    g_error := 'UPDATE ANALYSIS_REQ_DET';
                    ts_analysis_req_det.upd(id_analysis_req_det_in => l_analysis_req_det,
                                            flg_status_in          => pk_lab_tests_constant.g_analysis_read,
                                            id_prof_last_update_in => i_prof.id,
                                            dt_last_update_tstz_in => g_sysdate_tstz,
                                            id_cancel_reason_in    => i_cancel_reason,
                                            id_cancel_reason_nin   => FALSE,
                                            rows_out               => l_rows_out);
                
                    g_error := 'PROCESS_UPDATE ANALYSIS_REQ_DET';
                    t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'ANALYSIS_REQ_DET',
                                                  i_rowids     => l_rows_out,
                                                  o_error      => o_error);
                
                    -- inserir em log de estados
                    IF l_analysis_req_det IS NOT NULL
                    THEN
                        IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                                i_prof       => i_prof,
                                                i_id_episode => l_analysis.id_episode,
                                                i_flg_status => pk_lab_tests_constant.g_analysis_read,
                                                i_id_record  => l_analysis_req_det,
                                                i_flg_type   => pk_lab_tests_constant.g_analysis_type_det,
                                                o_error      => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                
                    g_error := 'CALL PK_LAB_TESTS_EXTERNAL_API_DB.UPDATE_TDE_TASK_STATE';
                    IF NOT pk_lab_tests_external_api_db.update_tde_task_state(i_lang         => i_lang,
                                                                              i_prof         => i_prof,
                                                                              i_lab_test_req => l_analysis_req_det,
                                                                              i_flg_action   => pk_alert_constant.g_analysis_det_read,
                                                                              o_error        => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    -- Procurar detalhes da mm requisição não lidos
                    g_error := 'GET DETAIL STATUS';
                    OPEN c_count(l_analysis.id_analysis_req);
                    FETCH c_count
                        INTO l_count;
                    CLOSE c_count;
                
                    l_rows_out := NULL;
                
                    g_error := 'UPDATE ANALYSIS_REQ';
                    ts_analysis_req.upd(id_analysis_req_in     => l_analysis.id_analysis_req,
                                        flg_status_in          => CASE
                                                                      WHEN nvl(l_count, 0) > 0 THEN
                                                                       pk_lab_tests_constant.g_analysis_read_partial -- 'parcialmente lido'
                                                                      ELSE
                                                                       pk_lab_tests_constant.g_analysis_read -- 'lido'
                                                                  END,
                                        id_prof_last_update_in => i_prof.id,
                                        dt_last_update_tstz_in => g_sysdate_tstz,
                                        rows_out               => l_rows_out);
                
                    g_error := 'PROCESS_UPDATE ANALYSIS_REQ';
                    t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'ANALYSIS_REQ',
                                                  i_rowids     => l_rows_out,
                                                  o_error      => o_error);
                
                    -- inserir em log de estados
                    IF l_analysis_req_det IS NOT NULL
                    THEN
                        IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                           i_prof       => i_prof,
                                           i_id_episode => l_analysis.id_episode,
                                           i_flg_status => CASE
                                                               WHEN nvl(l_count, 0) > 0 THEN
                                                                pk_lab_tests_constant.g_analysis_read_partial -- 'parcialmente lido'
                                                               ELSE
                                                                pk_lab_tests_constant.g_analysis_read -- 'lido'
                                                           END,
                                           i_id_record  => l_analysis.id_analysis_req,
                                           i_flg_type   => pk_lab_tests_constant.g_analysis_type_req,
                                           o_error      => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                
                    l_rows_out := NULL;
                
                    g_error := 'UPDATE ANALYSIS_RESULT';
                    ts_analysis_result.upd(id_analysis_result_in => l_analysis_result,
                                           id_episode_in         => l_analysis.id_episode,
                                           id_episode_nin        => FALSE,
                                           id_visit_in           => l_analysis.id_visit,
                                           id_visit_nin          => FALSE,
                                           rows_out              => l_rows_out);
                
                    g_error := 'PROCESS_UPDATE ANALYSIS_RESULT';
                    t_data_gov_mnt.process_update(i_lang         => i_lang,
                                                  i_prof         => i_prof,
                                                  i_table_name   => 'ANALYSIS_RESULT',
                                                  i_rowids       => l_rows_out,
                                                  o_error        => o_error,
                                                  i_list_columns => table_varchar('ID_EPISODE', 'ID_VISIT'));
                
                    -- Before the update, insert current analysis result on history table
                    g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_RESULT_HISTORY';
                    IF NOT pk_lab_tests_core.set_lab_test_result_history(i_lang                => i_lang,
                                                                         i_prof                => i_prof,
                                                                         i_analysis_result     => l_analysis_result,
                                                                         i_analysis_result_par => table_number(i_analysis_result_par(i)),
                                                                         o_error               => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    l_rows_out := NULL;
                
                    g_error := 'UPDATE ANALYSIS_RESULT_PAR';
                    ts_analysis_result_par.upd(id_analysis_result_par_in     => i_analysis_result_par(i),
                                               id_episode_in                 => l_analysis.id_episode,
                                               id_prof_read_in               => i_prof.id,
                                               flg_relevant_in               => i_flg_relevant(i),
                                               notes_doctor_registry_in      => i_notes(i),
                                               notes_doctor_registry_nin     => FALSE,
                                               dt_doctor_registry_tstz_in    => g_sysdate_tstz,
                                               id_professional_upd_in        => i_prof.id,
                                               dt_analysis_result_par_upd_in => g_sysdate_tstz,
                                               rows_out                      => l_rows_out);
                
                    g_error := 'PROCESS_UPDATE ANALYSIS_RESULT_PAR';
                    t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'ANALYSIS_RESULT_PAR',
                                                  i_rowids     => l_rows_out,
                                                  o_error      => o_error);
                
                    g_error := 'PK_LAB_TESTS_API_DB.SET_LAB_TEST_GRID_TASK';
                    IF NOT pk_lab_tests_api_db.set_lab_test_grid_task(i_lang             => i_lang,
                                                                      i_prof             => i_prof,
                                                                      i_patient          => l_analysis.id_patient,
                                                                      i_episode          => l_analysis.id_episode,
                                                                      i_analysis_req     => l_analysis.id_analysis_req,
                                                                      i_analysis_req_det => l_analysis_req_det,
                                                                      o_error            => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    l_sys_alert_event.id_episode := l_analysis.id_episode;
                    l_sys_alert_event.id_record  := l_analysis_result;
                
                    FOR i IN 1 .. l_analysis_alert.count
                    LOOP
                        l_sys_alert_event.id_sys_alert := l_analysis_alert(i);
                    
                        g_error := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT - ALERT ' || l_analysis_alert(i);
                        IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                                i_prof            => i_prof,
                                                                i_sys_alert_event => l_sys_alert_event,
                                                                o_error           => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END LOOP;
                
                    g_error := 'CALL TO PK_VISIT.SET_FIRST_OBS';
                    IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                                  i_id_episode          => l_analysis.id_episode,
                                                  i_pat                 => NULL,
                                                  i_prof                => i_prof,
                                                  i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                                  i_dt_last_interaction => g_sysdate_tstz,
                                                  i_dt_first_obs        => g_sysdate_tstz,
                                                  o_error               => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                ELSE
                    -- Before the update, insert current analysis result on history table
                    g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_RESULT_HISTORY';
                    IF NOT pk_lab_tests_core.set_lab_test_result_history(i_lang                => i_lang,
                                                                         i_prof                => i_prof,
                                                                         i_analysis_result     => l_analysis_result,
                                                                         i_analysis_result_par => table_number(i_analysis_result_par(i)),
                                                                         o_error               => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    l_rows_out := NULL;
                
                    g_error := 'UPDATE ANALYSIS_RESULT_PAR';
                    ts_analysis_result_par.upd(id_analysis_result_par_in     => i_analysis_result_par(i),
                                               id_episode_in                 => l_analysis.id_episode,
                                               id_prof_read_in               => i_prof.id,
                                               flg_relevant_in               => i_flg_relevant(i),
                                               notes_doctor_registry_in      => i_notes(i),
                                               notes_doctor_registry_nin     => FALSE,
                                               dt_doctor_registry_tstz_in    => g_sysdate_tstz,
                                               id_professional_upd_in        => i_prof.id,
                                               dt_analysis_result_par_upd_in => g_sysdate_tstz,
                                               rows_out                      => l_rows_out);
                
                    g_error := 'PROCESS_UPDATE ANALYSIS_RESULT_PAR';
                    t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'ANALYSIS_RESULT_PAR',
                                                  i_rowids     => l_rows_out,
                                                  o_error      => o_error);
                END IF;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_LAB_TEST_STATUS_READ',
                                              o_error);
            RETURN FALSE;
    END set_lab_test_status_read;

    FUNCTION set_lab_test_history
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_analysis_req     IN analysis_req.id_analysis_req%TYPE,
        i_analysis_req_det IN table_number,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_diagnosis_list(l_analysis_req_det analysis_req_det.id_analysis_req_det%TYPE) IS
            SELECT mrd.id_mcdt_req_diagnosis
              FROM mcdt_req_diagnosis mrd
             WHERE mrd.id_analysis_req_det = l_analysis_req_det
               AND nvl(mrd.flg_status, '@') != pk_alert_constant.g_cancelled;
    
        l_analysis_req     analysis_req%ROWTYPE;
        l_analysis_req_det analysis_req_det%ROWTYPE;
    
        l_analysis_req_hist     analysis_req_hist%ROWTYPE;
        l_analysis_req_det_hist analysis_req_det_hist%ROWTYPE;
    
        l_diagnosis_list analysis_req_det_hist.id_diagnosis_list%TYPE;
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        IF i_analysis_req IS NOT NULL
        THEN
            g_error := 'GET ANALYSIS_REQ';
            SELECT ar.*
              INTO l_analysis_req
              FROM analysis_req ar
             WHERE ar.id_analysis_req = i_analysis_req;
        
            --Duplicate row to history
            l_analysis_req_hist.dt_analysis_req_hist   := g_sysdate_tstz;
            l_analysis_req_hist.id_analysis_req        := l_analysis_req.id_analysis_req;
            l_analysis_req_hist.id_patient             := l_analysis_req.id_patient;
            l_analysis_req_hist.id_episode             := l_analysis_req.id_episode;
            l_analysis_req_hist.id_episode_origin      := l_analysis_req.id_episode_origin;
            l_analysis_req_hist.id_episode_destination := l_analysis_req.id_episode_destination;
            l_analysis_req_hist.id_prev_episode        := l_analysis_req.id_prev_episode;
            l_analysis_req_hist.id_visit               := l_analysis_req.id_visit;
            l_analysis_req_hist.id_institution         := l_analysis_req.id_institution;
            l_analysis_req_hist.flg_time               := l_analysis_req.flg_time;
            l_analysis_req_hist.flg_status             := l_analysis_req.flg_status;
            l_analysis_req_hist.id_prof_writes         := l_analysis_req.id_prof_writes;
            l_analysis_req_hist.dt_req_tstz            := l_analysis_req.dt_req_tstz;
            l_analysis_req_hist.dt_begin_tstz          := l_analysis_req.dt_begin_tstz;
            l_analysis_req_hist.dt_pend_req_tstz       := l_analysis_req.dt_pend_req_tstz;
            l_analysis_req_hist.flg_priority           := l_analysis_req.flg_priority;
            l_analysis_req_hist.id_exec_institution    := l_analysis_req.id_exec_institution;
            l_analysis_req_hist.barcode                := l_analysis_req.barcode;
            l_analysis_req_hist.id_prof_authorize      := l_analysis_req.id_prof_authorize;
            l_analysis_req_hist.id_prof_approve        := l_analysis_req.id_prof_approve;
            l_analysis_req_hist.id_schedule            := l_analysis_req.id_schedule;
            l_analysis_req_hist.id_sched_consult       := l_analysis_req.id_sched_consult;
            l_analysis_req_hist.notes                  := l_analysis_req.notes;
            l_analysis_req_hist.notes_tech             := l_analysis_req.notes_tech;
            l_analysis_req_hist.id_prof_cancel         := l_analysis_req.id_prof_cancel;
            l_analysis_req_hist.dt_cancel_tstz         := l_analysis_req.dt_cancel_tstz;
            l_analysis_req_hist.id_cancel_reason       := l_analysis_req.id_cancel_reason;
            l_analysis_req_hist.notes_cancel           := l_analysis_req.notes_cancel;
            l_analysis_req_hist.id_analysis_group      := l_analysis_req.id_analysis_group;
            l_analysis_req_hist.id_prof_last_update    := l_analysis_req.id_prof_last_update;
            l_analysis_req_hist.dt_last_update_tstz    := l_analysis_req.dt_last_update_tstz;
        
            g_error := 'INSERT ANALYSIS_REQ_HIST';
            ts_analysis_req_hist.ins(rec_in => l_analysis_req_hist);
        END IF;
    
        g_error := 'OPEN LOOP';
        FOR i IN 1 .. i_analysis_req_det.count
        LOOP
            IF i_analysis_req_det(i) IS NOT NULL
            THEN
                g_error := 'GET ANALYSIS_REQ_DET';
                SELECT ard.*
                  INTO l_analysis_req_det
                  FROM analysis_req_det ard
                 WHERE ard.id_analysis_req_det = i_analysis_req_det(i);
            
                IF l_analysis_req_det.flg_status != pk_lab_tests_constant.g_analysis_predefined
                THEN
                    l_diagnosis_list := NULL;
                    g_error          := 'CREATE DIAGNOSIS LIST';
                    FOR rec IN c_diagnosis_list(i_analysis_req_det(i))
                    LOOP
                        IF l_diagnosis_list IS NULL
                        THEN
                            l_diagnosis_list := rec.id_mcdt_req_diagnosis;
                        ELSE
                            l_diagnosis_list := l_diagnosis_list || ';' || rec.id_mcdt_req_diagnosis;
                        END IF;
                    END LOOP;
                
                    l_analysis_req_det_hist.dt_analysis_req_det_hist := g_sysdate_tstz;
                    l_analysis_req_det_hist.id_analysis_req_det      := l_analysis_req_det.id_analysis_req_det;
                    l_analysis_req_det_hist.id_analysis_req          := l_analysis_req_det.id_analysis_req;
                    l_analysis_req_det_hist.id_analysis              := l_analysis_req_det.id_analysis;
                    l_analysis_req_det_hist.id_sample_type           := l_analysis_req_det.id_sample_type;
                    l_analysis_req_det_hist.id_analysis_group        := l_analysis_req_det.id_analysis_group;
                    l_analysis_req_det_hist.id_ard_parent            := l_analysis_req_det.id_ard_parent;
                    l_analysis_req_det_hist.id_exam_cat              := l_analysis_req_det.id_exam_cat;
                    l_analysis_req_det_hist.flg_time_harvest         := l_analysis_req_det.flg_time_harvest;
                    l_analysis_req_det_hist.flg_status               := l_analysis_req_det.flg_status;
                    l_analysis_req_det_hist.flg_referral             := l_analysis_req_det.flg_referral;
                    l_analysis_req_det_hist.dt_target_tstz           := l_analysis_req_det.dt_target_tstz;
                    l_analysis_req_det_hist.dt_schedule              := l_analysis_req_det.dt_schedule;
                    l_analysis_req_det_hist.dt_final_target_tstz     := l_analysis_req_det.dt_final_target_tstz;
                    l_analysis_req_det_hist.dt_final_result_tstz     := l_analysis_req_det.dt_final_result_tstz;
                    l_analysis_req_det_hist.dt_pend_req_tstz         := l_analysis_req_det.dt_pend_req_tstz;
                    l_analysis_req_det_hist.dt_begin_harvest         := l_analysis_req_det.dt_begin_harvest;
                    l_analysis_req_det_hist.dt_begin_result          := l_analysis_req_det.dt_begin_result;
                    l_analysis_req_det_hist.id_order_recurrence      := l_analysis_req_det.id_order_recurrence;
                    l_analysis_req_det_hist.flg_urgency              := l_analysis_req_det.flg_urgency;
                    l_analysis_req_det_hist.flg_prn                  := l_analysis_req_det.flg_prn;
                    l_analysis_req_det_hist.notes_prn                := l_analysis_req_det.notes_prn;
                    l_analysis_req_det_hist.flg_fasting              := l_analysis_req_det.flg_fasting;
                    l_analysis_req_det_hist.id_clinical_purpose      := l_analysis_req_det.id_clinical_purpose;
                    l_analysis_req_det_hist.clinical_purpose_notes   := l_analysis_req_det.clinical_purpose_notes;
                    l_analysis_req_det_hist.flg_col_inst             := l_analysis_req_det.flg_col_inst;
                    l_analysis_req_det_hist.flg_exec_result          := l_analysis_req_det.flg_exec_result;
                    l_analysis_req_det_hist.flg_pre_req              := l_analysis_req_det.flg_pre_req;
                    l_analysis_req_det_hist.id_room                  := l_analysis_req_det.id_room;
                    l_analysis_req_det_hist.id_exec_institution      := l_analysis_req_det.id_exec_institution;
                    l_analysis_req_det_hist.id_room_req              := l_analysis_req_det.id_room_req;
                    l_analysis_req_det_hist.id_movement              := l_analysis_req_det.id_movement;
                    l_analysis_req_det_hist.barcode                  := l_analysis_req_det.barcode;
                    l_analysis_req_det_hist.notes                    := l_analysis_req_det.notes;
                    l_analysis_req_det_hist.notes_tech               := l_analysis_req_det.notes_tech;
                    l_analysis_req_det_hist.notes_patient            := l_analysis_req_det.notes_patient;
                    l_analysis_req_det_hist.notes_justify            := l_analysis_req_det.notes_justify;
                    l_analysis_req_det_hist.id_analysis_codification := l_analysis_req_det.id_analysis_codification;
                    l_analysis_req_det_hist.id_pat_health_plan       := l_analysis_req_det.id_pat_health_plan;
                    l_analysis_req_det_hist.id_pat_exemption         := l_analysis_req_det.id_pat_exemption;
                    l_analysis_req_det_hist.id_task_dependency       := l_analysis_req_det.id_task_dependency;
                    l_analysis_req_det_hist.id_cdr                   := l_analysis_req_det.id_cdr;
                    l_analysis_req_det_hist.id_co_sign_order         := l_analysis_req_det.id_co_sign_order;
                    l_analysis_req_det_hist.id_prof_cancel           := l_analysis_req_det.id_prof_cancel;
                    l_analysis_req_det_hist.dt_cancel_tstz           := l_analysis_req_det.dt_cancel_tstz;
                    l_analysis_req_det_hist.id_cancel_reason         := l_analysis_req_det.id_cancel_reason;
                    l_analysis_req_det_hist.notes_cancel             := l_analysis_req_det.notes_cancel;
                    l_analysis_req_det_hist.id_co_sign_cancel        := l_analysis_req_det.id_co_sign_cancel;
                    l_analysis_req_det_hist.flg_req_origin_module    := l_analysis_req_det.flg_req_origin_module;
                    l_analysis_req_det_hist.id_episode_origin        := l_analysis_req_det.id_episode_origin;
                    l_analysis_req_det_hist.id_episode_destination   := l_analysis_req_det.id_episode_destination;
                    l_analysis_req_det_hist.id_diagnosis_list        := l_diagnosis_list;
                    l_analysis_req_det_hist.id_prof_last_update      := l_analysis_req_det.id_prof_last_update;
                    l_analysis_req_det_hist.dt_last_update_tstz      := l_analysis_req_det.dt_last_update_tstz;
                    l_analysis_req_det_hist.diagnosis_notes          := l_analysis_req_det.diagnosis_notes;
                
                    --Duplicate row to history
                    g_error := 'INSERT ANALYSIS_REQ_DET_HIST';
                    ts_analysis_req_det_hist.ins(rec_in => l_analysis_req_det_hist);
                END IF;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_LAB_TEST_HISTORY',
                                              o_error);
            RETURN FALSE;
    END set_lab_test_history;

    FUNCTION set_lab_test_result_history
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_analysis_result     IN analysis_result.id_analysis_result%TYPE,
        i_analysis_result_par IN table_number,
        o_error               OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_analysis_result     analysis_result%ROWTYPE;
        l_analysis_result_par analysis_result_par%ROWTYPE;
    
        l_analysis_result_hist     analysis_result_hist%ROWTYPE;
        l_analysis_result_par_hist analysis_result_par_hist%ROWTYPE;
    
        l_count NUMBER;
    
    BEGIN
    
        g_error := 'GET ANALYSIS_RESULT';
        SELECT ar.*
          INTO l_analysis_result
          FROM analysis_result ar
         WHERE ar.id_analysis_result = i_analysis_result;
    
        SELECT COUNT(*)
          INTO l_count
          FROM analysis_result_hist arh
         WHERE arh.dt_analysis_result_tstz = l_analysis_result.dt_analysis_result_tstz
           AND arh.id_analysis_result = i_analysis_result;
    
        IF l_count = 0
        THEN
            --Duplicate row to history
            l_analysis_result_hist.dt_analysis_result_hist := g_sysdate_tstz;
            l_analysis_result_hist.id_analysis_result      := l_analysis_result.id_analysis_result;
            l_analysis_result_hist.id_analysis_req_det     := l_analysis_result.id_analysis_req_det;
            l_analysis_result_hist.id_harvest              := l_analysis_result.id_harvest;
            l_analysis_result_hist.id_analysis             := l_analysis_result.id_analysis;
            l_analysis_result_hist.id_sample_type          := l_analysis_result.id_sample_type;
            l_analysis_result_hist.loinc_code              := l_analysis_result.loinc_code;
            l_analysis_result_hist.id_exam_cat             := l_analysis_result.id_exam_cat;
            l_analysis_result_hist.id_patient              := l_analysis_result.id_patient;
            l_analysis_result_hist.id_episode_orig         := l_analysis_result.id_episode_orig;
            l_analysis_result_hist.id_episode              := l_analysis_result.id_episode;
            l_analysis_result_hist.id_visit                := l_analysis_result.id_visit;
            l_analysis_result_hist.id_institution          := l_analysis_result.id_institution;
            l_analysis_result_hist.dt_analysis_result_tstz := l_analysis_result.dt_analysis_result_tstz;
            l_analysis_result_hist.dt_sample               := l_analysis_result.dt_sample;
            l_analysis_result_hist.id_professional         := l_analysis_result.id_professional;
            l_analysis_result_hist.flg_type                := l_analysis_result.flg_type;
            l_analysis_result_hist.flg_status              := l_analysis_result.flg_status;
            l_analysis_result_hist.id_result_status        := l_analysis_result.id_result_status;
            l_analysis_result_hist.id_prof_req             := l_analysis_result.id_prof_req;
            l_analysis_result_hist.flg_result_origin       := l_analysis_result.flg_result_origin;
            l_analysis_result_hist.result_origin_notes     := l_analysis_result.result_origin_notes;
            l_analysis_result_hist.notes                   := l_analysis_result.notes;
            l_analysis_result_hist.flg_orig_analysis       := l_analysis_result.flg_orig_analysis;
        
            g_error := 'INSERT ANALYSIS_RESULT_HIST';
            ts_analysis_result_hist.ins(rec_in => l_analysis_result_hist);
        END IF;
    
        g_error := 'OPEN LOOP';
        FOR i IN 1 .. i_analysis_result_par.count
        LOOP
            g_error := 'GET ANALYSIS_RESULT_PAR';
            SELECT arp.*
              INTO l_analysis_result_par
              FROM analysis_result_par arp
             WHERE arp.id_analysis_result_par = i_analysis_result_par(i);
        
            l_analysis_result_par_hist.dt_analysis_res_par_hist    := g_sysdate_tstz;
            l_analysis_result_par_hist.id_analysis_result_par      := l_analysis_result_par.id_analysis_result_par;
            l_analysis_result_par_hist.id_analysis_result          := l_analysis_result_par.id_analysis_result;
            l_analysis_result_par_hist.id_analysis_req_par         := l_analysis_result_par.id_analysis_req_par;
            l_analysis_result_par_hist.id_analysis_parameter       := l_analysis_result_par.id_analysis_parameter;
            l_analysis_result_par_hist.id_episode                  := l_analysis_result_par.id_episode;
            l_analysis_result_par_hist.id_instit_origin            := l_analysis_result_par.id_instit_origin;
            l_analysis_result_par_hist.id_professional             := l_analysis_result_par.id_professional;
            l_analysis_result_par_hist.dt_analysis_result_par_tstz := l_analysis_result_par.dt_analysis_result_par_tstz;
            l_analysis_result_par_hist.dt_ins_result_tstz          := l_analysis_result_par.dt_ins_result_tstz;
            l_analysis_result_par_hist.analysis_result_value_1     := l_analysis_result_par.analysis_result_value_1;
            l_analysis_result_par_hist.analysis_result_value_2     := l_analysis_result_par.analysis_result_value_2;
            l_analysis_result_par_hist.desc_analysis_result        := l_analysis_result_par.desc_analysis_result;
            l_analysis_result_par_hist.id_analysis_desc            := l_analysis_result_par.id_analysis_desc;
            l_analysis_result_par_hist.comparator                  := l_analysis_result_par.comparator;
            l_analysis_result_par_hist.separator                   := l_analysis_result_par.separator;
            l_analysis_result_par_hist.standard_code               := l_analysis_result_par.standard_code;
            l_analysis_result_par_hist.id_result_status            := l_analysis_result_par.id_result_status;
            l_analysis_result_par_hist.id_unit_measure             := l_analysis_result_par.id_unit_measure;
            l_analysis_result_par_hist.desc_unit_measure           := l_analysis_result_par.desc_unit_measure;
            l_analysis_result_par_hist.ref_val_min                 := l_analysis_result_par.ref_val_min;
            l_analysis_result_par_hist.ref_val_max                 := l_analysis_result_par.ref_val_max;
            l_analysis_result_par_hist.ref_val                     := l_analysis_result_par.ref_val;
            l_analysis_result_par_hist.ref_val_min_str             := l_analysis_result_par.ref_val_min_str;
            l_analysis_result_par_hist.ref_val_max_str             := l_analysis_result_par.ref_val_max_str;
            l_analysis_result_par_hist.id_abnormality              := l_analysis_result_par.id_abnormality;
            l_analysis_result_par_hist.id_abnormality_nature       := l_analysis_result_par.id_abnormality_nature;
            l_analysis_result_par_hist.id_cdr                      := l_analysis_result_par.id_cdr;
            l_analysis_result_par_hist.parameter_notes             := l_analysis_result_par.parameter_notes;
            l_analysis_result_par_hist.interface_notes             := l_analysis_result_par.interface_notes;
            l_analysis_result_par_hist.coding_system               := l_analysis_result_par.coding_system;
            l_analysis_result_par_hist.method                      := l_analysis_result_par.method;
            l_analysis_result_par_hist.equipment                   := l_analysis_result_par.equipment;
            l_analysis_result_par_hist.laboratory_desc             := l_analysis_result_par.laboratory_desc;
            l_analysis_result_par_hist.laboratory_short_desc       := l_analysis_result_par.laboratory_short_desc;
            l_analysis_result_par_hist.id_prof_validation          := l_analysis_result_par.id_prof_validation;
            l_analysis_result_par_hist.dt_validation_tstz          := l_analysis_result_par.dt_validation_tstz;
            l_analysis_result_par_hist.flg_validation_type         := l_analysis_result_par.flg_validation_type;
            l_analysis_result_par_hist.dt_ext_registry             := l_analysis_result_par.dt_ext_registry;
            l_analysis_result_par_hist.flg_intf_orig               := l_analysis_result_par.flg_intf_orig;
            l_analysis_result_par_hist.id_prof_read                := l_analysis_result_par.id_prof_read;
            l_analysis_result_par_hist.dt_doctor_registry_tstz     := l_analysis_result_par.dt_doctor_registry_tstz;
            l_analysis_result_par_hist.flg_relevant                := l_analysis_result_par.flg_relevant;
            l_analysis_result_par_hist.notes_doctor_registry       := l_analysis_result_par.notes_doctor_registry;
            l_analysis_result_par_hist.id_professional_cancel      := l_analysis_result_par.id_professional_cancel;
            l_analysis_result_par_hist.dt_cancel                   := l_analysis_result_par.dt_cancel;
            l_analysis_result_par_hist.id_cancel_reason            := l_analysis_result_par.id_cancel_reason;
            l_analysis_result_par_hist.notes_cancel                := l_analysis_result_par.notes_cancel;
            l_analysis_result_par_hist.id_professional_upd         := l_analysis_result_par.id_professional_upd;
            l_analysis_result_par_hist.dt_analysis_result_par_upd  := l_analysis_result_par.dt_analysis_result_par_upd;
        
            --Duplicate row to history
            g_error := 'INSERT ANALYSIS_RESULT_PAR_HIST';
            ts_analysis_result_par_hist.ins(rec_in          => l_analysis_result_par_hist,
                                            gen_pky_in      => TRUE,
                                            sequence_in     => 'SEQ_ANALYSIS_RESULT_PAR_HIST',
                                            handle_error_in => TRUE);
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_LAB_TEST_RESULT_HISTORY',
                                              o_error);
            RETURN FALSE;
    END set_lab_test_result_history;

    FUNCTION set_lab_test_date
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_analysis_req_det IN table_number,
        i_dt_begin         IN VARCHAR2,
        i_notes_scheduler  IN VARCHAR2,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_analysis(l_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE) IS
            SELECT nvl(ar.id_episode, ar.id_episode_origin) id_episode,
                   ar.id_analysis_req,
                   ar.id_patient,
                   ar.dt_req_tstz
              FROM analysis_req_det ard
             INNER JOIN analysis_req ar
                ON ar.id_analysis_req = ard.id_analysis_req
             WHERE ard.id_analysis_req_det = l_analysis_req_det
               AND ard.flg_status != pk_lab_tests_constant.g_analysis_cancel;
    
        l_analysis c_analysis%ROWTYPE;
    
        l_dt_begin analysis_req_det.dt_target_tstz%TYPE;
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        l_dt_begin := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin, NULL);
        FOR i IN 1 .. i_analysis_req_det.count
        LOOP
            IF l_dt_begin IS NOT NULL
            THEN
                g_error := 'OPEN C_ANALYSIS';
                OPEN c_analysis(i_analysis_req_det(i));
                FETCH c_analysis
                    INTO l_analysis;
                CLOSE c_analysis;
            
                IF l_dt_begin >= l_analysis.dt_req_tstz
                THEN
                    g_error := 'UPDATE ANALYSIS_REQ_DET';
                    ts_analysis_req_det.upd(id_analysis_req_det_in => i_analysis_req_det(i),
                                            flg_status_in          => pk_lab_tests_constant.g_analysis_sched,
                                            dt_target_tstz_in      => l_dt_begin,
                                            notes_scheduler_in     => i_notes_scheduler,
                                            id_prof_last_update_in => i_prof.id,
                                            dt_last_update_tstz_in => g_sysdate_tstz,
                                            rows_out               => l_rows_out);
                
                    t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'ANALYSIS_REQ_DET',
                                                  i_rowids     => l_rows_out,
                                                  o_error      => o_error);
                
                    l_rows_out := NULL;
                
                    g_error := 'UPDATE ANALYSIS_REQ';
                    ts_analysis_req.upd(id_analysis_req_in     => l_analysis.id_analysis_req,
                                        dt_begin_tstz_in       => l_dt_begin,
                                        flg_status_in          => pk_lab_tests_constant.g_analysis_sched,
                                        id_prof_last_update_in => i_prof.id,
                                        dt_last_update_tstz_in => g_sysdate_tstz,
                                        rows_out               => l_rows_out);
                
                    t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'ANALYSIS_REQ',
                                                  i_rowids     => l_rows_out,
                                                  o_error      => o_error);
                
                    g_error := 'PK_LAB_TESTS_API_DB.SET_LAB_TEST_GRID_TASK';
                    IF NOT pk_lab_tests_api_db.set_lab_test_grid_task(i_lang             => i_lang,
                                                                      i_prof             => i_prof,
                                                                      i_patient          => l_analysis.id_patient,
                                                                      i_episode          => l_analysis.id_episode,
                                                                      i_analysis_req     => l_analysis.id_analysis_req,
                                                                      i_analysis_req_det => i_analysis_req_det(i),
                                                                      o_error            => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            ELSE
                g_error_code := 'EXAM_M011';
                g_error      := pk_message.get_message(i_lang, i_prof, 'EXAM_M011');
                RAISE g_user_exception;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              g_error_code,
                                              g_error,
                                              '',
                                              g_package_owner,
                                              g_package_name,
                                              'SET_LAB_TEST_DATE',
                                              'U',
                                              '',
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_LAB_TEST_DATE',
                                              o_error);
            RETURN FALSE;
    END set_lab_test_date;

    FUNCTION set_lab_test_timeline
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        i_analysis_param IN table_number,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_next analysis_param_funcionality.id_analysis_param_funcionality%TYPE;
    
    BEGIN
    
        FOR i IN 1 .. i_analysis_param.count
        LOOP
            SELECT seq_analysis_param_func.nextval
              INTO l_next
              FROM dual;
        
            g_error := 'INSERT INTO ANALYSIS_PARAM_FUNCIONALITY';
            INSERT INTO analysis_param_funcionality
                (id_analysis_param_funcionality, flg_type, adw_last_update, id_analysis_param)
            VALUES
                (l_next, pk_lab_tests_constant.g_apf_type_history, SYSDATE, i_analysis_param(i));
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_LAB_TEST_TIMELINE',
                                              o_error);
            RETURN FALSE;
    END set_lab_test_timeline;

    FUNCTION update_lab_test_order
    (
        i_lang                    IN language.id_language%TYPE, --1
        i_prof                    IN profissional,
        i_episode                 IN episode.id_episode%TYPE,
        i_analysis_req            IN analysis_req.id_analysis_req%TYPE,
        i_analysis_req_det        IN table_number, --5
        i_flg_time                IN table_varchar,
        i_dt_begin                IN table_varchar,
        i_priority                IN table_varchar,
        i_flg_prn                 IN table_varchar,
        i_notes_prn               IN table_varchar, --10
        i_specimen                IN table_number,
        i_body_location           IN table_table_number,
        i_laterality              IN table_table_varchar,
        i_collection_room         IN table_number,
        i_notes                   IN table_varchar, --15
        i_notes_scheduler         IN table_varchar,
        i_notes_technician        IN table_varchar,
        i_notes_patient           IN table_varchar,
        i_diagnosis_notes         IN table_varchar,
        i_diagnosis               IN pk_edis_types.table_in_epis_diagnosis, --20
        i_exec_institution        IN table_number,
        i_clinical_purpose        IN table_number,
        i_clinical_purpose_notes  IN table_varchar,
        i_flg_col_inst            IN table_varchar,
        i_flg_fasting             IN table_varchar, --25
        i_lab_req                 IN table_number,
        i_prof_cc                 IN table_table_varchar,
        i_prof_bcc                IN table_table_varchar,
        i_codification            IN table_number,
        i_health_plan             IN table_number, --30
        i_exemption               IN table_number,
        i_prof_order              IN table_number,
        i_dt_order                IN table_varchar,
        i_order_type              IN table_number,
        i_clinical_question       IN table_table_number, --35
        i_response                IN table_table_varchar,
        i_clinical_question_notes IN table_table_varchar,
        o_error                   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_analysis_instit_soft
        (
            l_analysis    IN analysis.id_analysis%TYPE,
            l_sample_type IN sample_type.id_sample_type%TYPE
        ) IS
            SELECT ais.id_exam_cat, ais.flg_execute, ais.flg_harvest
              FROM analysis_instit_soft ais
             WHERE ais.id_analysis = l_analysis
               AND ais.id_sample_type = l_sample_type
               AND ais.id_software = i_prof.software
               AND ais.id_institution = i_prof.institution
               AND ais.flg_available = pk_lab_tests_constant.g_available;
    
        l_harvest_pending_req sys_config.value%TYPE := pk_sysconfig.get_config('HARVEST_PENDING_REQ', i_prof);
    
        l_analysis_req_det           analysis_req_det%ROWTYPE;
        l_analysis_question_response analysis_question_response%ROWTYPE;
        l_analysis_instit_soft       c_analysis_instit_soft%ROWTYPE;
    
        l_status_det            analysis_req_det.flg_status%TYPE;
        l_dt_begin              analysis_req_det.dt_target_tstz%TYPE;
        l_dt_schedule           analysis_req_det.dt_schedule%TYPE;
        l_id_prof_writes        analysis_req.id_prof_writes%TYPE;
        l_analysis_codification analysis_req_det.id_analysis_codification%TYPE;
        l_analysis_result_send  analysis_result_send.id_analysis_result_send%TYPE;
    
        l_id_co_sign      co_sign.id_co_sign%TYPE;
        l_id_co_sign_hist co_sign_hist.id_co_sign_hist%TYPE;
    
        l_count PLS_INTEGER := 0;
    
        l_diagnosis           table_number := table_number();
        l_tbl_alert_diagnosis table_number := table_number();
        l_diagnosis_new       table_number := table_number();
        l_epis_diagnosis      table_varchar := table_varchar();
        l_tbl_diag_desc       table_varchar := table_varchar();
    
        l_prof_cc  table_varchar := table_varchar();
        l_prof_bcc table_varchar := table_varchar();
    
        l_clinical_question       table_number := table_number();
        l_response                table_varchar := table_varchar();
        l_clinical_question_notes table_varchar := table_varchar();
        l_aux                     table_varchar2;
    
        l_sys_alert_event sys_alert_event%ROWTYPE;
    
        l_rows_out table_varchar := table_varchar();
    
        FUNCTION get_sub_diag_table
        (
            i_tbl_diagnosis IN pk_edis_types.rec_in_epis_diagnosis,
            i_sub_diag_list IN table_number
        ) RETURN pk_edis_types.rec_in_epis_diagnosis IS
            l_ret      pk_edis_types.rec_in_epis_diagnosis;
            l_tbl_diag pk_edis_types.table_in_diagnosis;
        BEGIN
            l_ret := i_tbl_diagnosis;
        
            IF i_sub_diag_list.exists(1)
            THEN
                l_tbl_diag          := l_ret.tbl_diagnosis;
                l_ret.tbl_diagnosis := pk_edis_types.table_in_diagnosis();
            
                IF l_tbl_diag.exists(1)
                THEN
                    FOR j IN i_sub_diag_list.first .. i_sub_diag_list.last
                    LOOP
                        FOR i IN l_tbl_diag.first .. l_tbl_diag.last
                        LOOP
                            IF l_tbl_diag(i).id_diagnosis = i_sub_diag_list(j)
                            THEN
                                l_ret.tbl_diagnosis.extend;
                                l_ret.tbl_diagnosis(l_ret.tbl_diagnosis.count) := l_tbl_diag(i);
                                EXIT;
                            END IF;
                        END LOOP;
                    END LOOP;
                END IF;
            END IF;
        
            RETURN l_ret;
        END get_sub_diag_table;
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_HISTORY';
        IF NOT pk_lab_tests_core.set_lab_test_history(i_lang             => i_lang,
                                                      i_prof             => i_prof,
                                                      i_analysis_req     => i_analysis_req,
                                                      i_analysis_req_det => i_analysis_req_det,
                                                      o_error            => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'OPEN LOOP';
        FOR i IN 1 .. i_analysis_req_det.count
        LOOP
            IF i_analysis_req_det(i) IS NOT NULL
            THEN
                g_error := 'GET ANALYSIS_REQ_DET';
                SELECT ard.*
                  INTO l_analysis_req_det
                  FROM analysis_req_det ard
                 WHERE ard.id_analysis_req_det = i_analysis_req_det(i);
            
                l_dt_begin := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin(i), NULL);
            
                -- Analysis_req_det status
                IF l_analysis_req_det.flg_time_harvest != pk_lab_tests_constant.g_flg_time_e
                THEN
                    IF l_analysis_req_det.flg_status NOT IN
                       (pk_lab_tests_constant.g_analysis_req,
                        pk_lab_tests_constant.g_analysis_pending,
                        pk_lab_tests_constant.g_analysis_sched)
                    THEN
                        -- realização futura
                        l_status_det := pk_lab_tests_constant.g_analysis_pending;
                        l_dt_begin   := NULL;
                    
                        IF l_analysis_req_det.flg_time_harvest IN
                           (pk_lab_tests_constant.g_flg_time_b, pk_lab_tests_constant.g_flg_time_d)
                           AND i_prof.software != pk_sysconfig.get_config('SOFTWARE_ID_CARE', i_prof)
                        THEN
                            -- realização entre consultas
                            l_status_det := pk_lab_tests_constant.g_analysis_tosched;
                            IF i_dt_begin(i) IS NOT NULL
                            THEN
                                -- sugestão do agendamento
                                l_dt_begin := NULL;
                                IF l_analysis_req_det.flg_time_harvest = pk_exam_constant.g_flg_time_b
                                THEN
                                    l_dt_schedule := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin(i), NULL);
                                END IF;
                            ELSE
                                l_dt_begin    := NULL;
                                l_dt_schedule := NULL;
                            END IF;
                        ELSE
                            l_dt_begin := NULL;
                        END IF;
                    END IF;
                ELSE
                    -- realização neste epis.
                    IF i_episode IS NOT NULL
                    THEN
                        IF pk_date_utils.trunc_insttimezone_str(i_prof, l_analysis_req_det.dt_target_tstz, 'MI') !=
                           pk_date_utils.trunc_insttimezone_str(i_prof, l_dt_begin, 'MI')
                        THEN
                            IF pk_sysconfig.get_config('REQ_NEXT_DAY', i_prof) = pk_lab_tests_constant.g_no
                            THEN
                                IF pk_date_utils.trunc_insttimezone(i_prof, nvl(l_dt_begin, g_sysdate_tstz), 'DD') !=
                                   pk_date_utils.trunc_insttimezone(i_prof, g_sysdate_tstz, 'DD')
                                THEN
                                    g_error_code := 'ANALYSIS_M012';
                                    g_error      := pk_message.get_message(i_lang, i_prof, 'ANALYSIS_M012');
                                    RAISE g_user_exception;
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                
                    IF nvl(l_dt_begin, g_sysdate_tstz) > g_sysdate_tstz
                    THEN
                        -- pendente
                        l_status_det := pk_lab_tests_constant.g_analysis_pending;
                    ELSE
                        IF pk_date_utils.trunc_insttimezone_str(i_prof, l_analysis_req_det.dt_target_tstz, 'MI') !=
                           pk_date_utils.trunc_insttimezone_str(i_prof, l_dt_begin, 'MI')
                        THEN
                            l_dt_begin := g_sysdate_tstz;
                        END IF;
                    
                        l_status_det := pk_lab_tests_constant.g_analysis_req;
                    END IF;
                END IF;
            
                g_error := 'GET C_ANALYSIS_INSTIT_SOFT';
                OPEN c_analysis_instit_soft(l_analysis_req_det.id_analysis, l_analysis_req_det.id_sample_type);
                FETCH c_analysis_instit_soft
                    INTO l_analysis_instit_soft;
                g_found := c_analysis_instit_soft%FOUND;
                CLOSE c_analysis_instit_soft;
            
                IF (l_analysis_instit_soft.flg_execute = pk_lab_tests_constant.g_no AND
                   (l_analysis_instit_soft.flg_harvest = pk_lab_tests_constant.g_no OR
                   i_flg_col_inst(i) = pk_lab_tests_constant.g_no))
                   OR (i_exec_institution(i) IS NOT NULL AND i_flg_col_inst(i) = pk_lab_tests_constant.g_no)
                THEN
                    l_status_det := pk_lab_tests_constant.g_analysis_exterior;
                END IF;
            
                IF i_flg_prn(i) = pk_lab_tests_constant.g_yes
                THEN
                    IF (l_analysis_instit_soft.flg_execute = pk_lab_tests_constant.g_no AND
                       (l_analysis_instit_soft.flg_harvest = pk_lab_tests_constant.g_no OR
                       i_flg_col_inst(i) = pk_lab_tests_constant.g_no))
                       OR (i_exec_institution(i) IS NOT NULL AND i_flg_col_inst(i) = pk_lab_tests_constant.g_no)
                    THEN
                        l_status_det := pk_lab_tests_constant.g_analysis_exterior;
                    ELSE
                        l_status_det := pk_lab_tests_constant.g_analysis_sos;
                    END IF;
                END IF;
            
                IF l_analysis_req_det.flg_status IN
                   (pk_lab_tests_constant.g_analysis_predefined, pk_lab_tests_constant.g_analysis_draft)
                   OR l_status_det IS NULL
                THEN
                    l_status_det := l_analysis_req_det.flg_status;
                END IF;
            
                --If the round is null but l_dt_target is available the the information of the round must be cleaned
                IF pk_date_utils.trunc_insttimezone_str(i_prof, l_analysis_req_det.dt_target_tstz, 'MI') =
                   pk_date_utils.trunc_insttimezone_str(i_prof, l_dt_begin, 'MI')
                THEN
                    l_dt_begin := NULL;
                END IF;
            
                IF i_analysis_req IS NOT NULL
                THEN
                    g_error := 'UPDATE ANALYSIS_REQ';
                    ts_analysis_req.upd(id_analysis_req_in      => i_analysis_req,
                                        flg_status_in           => l_status_det,
                                        dt_begin_tstz_in        => l_dt_begin,
                                        flg_priority_in         => i_priority(i),
                                        id_exec_institution_in  => i_exec_institution(i),
                                        id_exec_institution_nin => FALSE,
                                        id_prof_last_update_in  => i_prof.id,
                                        dt_last_update_tstz_in  => g_sysdate_tstz,
                                        rows_out                => l_rows_out);
                
                    t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'ANALYSIS_REQ',
                                                  i_rowids     => l_rows_out,
                                                  o_error      => o_error);
                
                    IF i_episode IS NOT NULL
                    THEN
                        --Insert log of statuses
                        g_error := 'CALL INS.TI_LOG';
                        IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                                i_prof       => i_prof,
                                                i_id_episode => i_episode,
                                                i_flg_status => l_status_det,
                                                i_id_record  => i_analysis_req,
                                                i_flg_type   => pk_lab_tests_constant.g_analysis_type_req,
                                                o_error      => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                
                    l_rows_out := NULL;
                END IF;
            
                BEGIN
                    SELECT ac.id_analysis_codification
                      INTO l_analysis_codification
                      FROM analysis_codification ac
                     WHERE ac.id_codification = i_codification(i)
                       AND ac.id_analysis = l_analysis_req_det.id_analysis
                       AND ac.id_sample_type = l_analysis_req_det.id_sample_type
                       AND ac.flg_available = pk_lab_tests_constant.g_available;
                EXCEPTION
                    WHEN no_data_found THEN
                        l_analysis_codification := NULL;
                END;
            
                IF l_analysis_req_det.id_co_sign_order IS NOT NULL
                   OR i_order_type(i) IS NOT NULL
                THEN
                    IF i_order_type(i) IS NOT NULL
                    THEN
                        g_error := 'CALL PK_CO_SIGN_API.SET_TASK_PENDING';
                        IF NOT pk_co_sign_api.set_pending_co_sign_task(i_lang                   => i_lang,
                                                                       i_prof                   => i_prof,
                                                                       i_episode                => i_episode,
                                                                       i_id_co_sign_hist        => l_analysis_req_det.id_co_sign_order,
                                                                       i_id_task_type           => pk_alert_constant.g_task_lab_tests,
                                                                       i_cosign_def_action_type => pk_co_sign_api.g_cosign_action_def_add,
                                                                       i_id_task                => i_analysis_req_det(i),
                                                                       i_id_task_group          => i_analysis_req_det(i),
                                                                       i_id_order_type          => i_order_type(i),
                                                                       i_id_prof_created        => i_prof.id,
                                                                       i_id_prof_ordered_by     => i_prof_order(i),
                                                                       i_dt_created             => g_sysdate_tstz,
                                                                       i_dt_ordered_by          => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                                 i_prof,
                                                                                                                                 i_dt_order(i),
                                                                                                                                 NULL),
                                                                       o_id_co_sign             => l_id_co_sign,
                                                                       o_id_co_sign_hist        => l_id_co_sign_hist,
                                                                       o_error                  => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    ELSE
                        g_error := 'CALL PK_CO_SIGN_API.SET_TASK_OUTDATED';
                        IF NOT pk_co_sign_api.set_task_outdated(i_lang            => i_lang,
                                                                i_prof            => i_prof,
                                                                i_episode         => i_episode,
                                                                i_id_co_sign      => NULL,
                                                                i_id_co_sign_hist => l_analysis_req_det.id_co_sign_order,
                                                                i_dt_update       => g_sysdate_tstz,
                                                                o_id_co_sign_hist => l_id_co_sign_hist,
                                                                o_error           => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                END IF;
            
                g_error := 'UPDATE ANALYSIS_REQ_DET';
                ts_analysis_req_det.upd(id_analysis_req_det_in       => i_analysis_req_det(i),
                                        id_sample_type_in            => i_specimen(i),
                                        flg_time_harvest_in          => CASE
                                                                            WHEN i_flg_time IS NOT NULL
                                                                                 AND i_flg_time.count > 0
                                                                                 AND l_status_det IN
                                                                                 (pk_lab_tests_constant.g_analysis_predefined,
                                                                                      pk_lab_tests_constant.g_analysis_draft) THEN
                                                                             i_flg_time(i)
                                                                            ELSE
                                                                             l_analysis_req_det.flg_time_harvest
                                                                        END,
                                        flg_status_in                => l_status_det,
                                        dt_target_tstz_in            => l_dt_begin,
                                        dt_pend_req_tstz_in          => CASE
                                                                            WHEN l_status_det =
                                                                                 pk_lab_tests_constant.g_analysis_pending THEN
                                                                             NULL
                                                                            ELSE
                                                                             l_analysis_req_det.dt_pend_req_tstz
                                                                        END,
                                        flg_urgency_in               => i_priority(i),
                                        flg_prn_in                   => i_flg_prn(i),
                                        flg_prn_nin                  => FALSE,
                                        notes_prn_in                 => i_notes_prn(i),
                                        notes_prn_nin                => FALSE,
                                        flg_fasting_in               => i_flg_fasting(i),
                                        id_clinical_purpose_in       => i_clinical_purpose(i),
                                        id_clinical_purpose_nin      => FALSE,
                                        clinical_purpose_notes_in    => i_clinical_purpose_notes(i),
                                        clinical_purpose_notes_nin   => FALSE,
                                        flg_col_inst_in              => CASE
                                                                            WHEN i_collection_room(i) IS NOT NULL THEN
                                                                             pk_lab_tests_constant.g_yes
                                                                            ELSE
                                                                             i_flg_col_inst(i)
                                                                        END,
                                        id_room_in                   => i_collection_room(i),
                                        id_room_nin                  => FALSE,
                                        id_exec_institution_in       => i_exec_institution(i),
                                        id_exec_institution_nin      => FALSE,
                                        id_room_req_in               => i_lab_req(i),
                                        id_room_req_nin              => FALSE,
                                        notes_in                     => i_notes(i),
                                        notes_scheduler_in           => i_notes_scheduler(i),
                                        notes_tech_in                => i_notes_technician(i),
                                        notes_patient_in             => i_notes_patient(i),
                                        id_analysis_codification_in  => l_analysis_codification,
                                        id_analysis_codification_nin => FALSE,
                                        id_pat_health_plan_in        => i_health_plan(i),
                                        id_pat_health_plan_nin       => FALSE,
                                        id_pat_exemption_in          => i_exemption(i),
                                        id_pat_exemption_nin         => FALSE,
                                        id_co_sign_order_in          => l_id_co_sign_hist,
                                        id_co_sign_order_nin         => FALSE,
                                        id_prof_last_update_in       => i_prof.id,
                                        id_prof_last_update_nin      => FALSE,
                                        dt_last_update_tstz_in       => g_sysdate_tstz,
                                        dt_last_update_tstz_nin      => FALSE,
                                        dt_schedule_in               => l_dt_schedule,
                                        dt_schedule_nin              => FALSE,
                                        diagnosis_notes_in           => CASE
                                                                            WHEN i_diagnosis_notes.exists(i) THEN
                                                                             i_diagnosis_notes(i)
                                                                            ELSE
                                                                             NULL
                                                                        END,
                                        diagnosis_notes_nin          => FALSE,
                                        rows_out                     => l_rows_out);
            
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'ANALYSIS_REQ_DET',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
            
                g_error := 'CALL PK_LAB_TESTS_EXTERNAL_API_DB.UPDATE_TDE_TASK_STATE';
                IF NOT pk_lab_tests_external_api_db.update_tde_task_state(i_lang         => i_lang,
                                                                          i_prof         => i_prof,
                                                                          i_lab_test_req => i_analysis_req_det(i),
                                                                          i_flg_action   => l_status_det,
                                                                          o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                IF i_episode IS NOT NULL
                THEN
                    --Insert log of statuses
                    g_error := 'CALL INS. TI_LOG';
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => i_episode,
                                            i_flg_status => l_status_det,
                                            i_id_record  => i_analysis_req_det(i),
                                            i_flg_type   => pk_lab_tests_constant.g_analysis_type_det,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                g_error := 'CALL TO PK_IA_EVENT_LAB.ANALYSIS_REQUEST_UPDATE';
                pk_ia_event_lab.analysis_request_update(i_id_analysis_req_det => i_analysis_req_det(i),
                                                        i_id_institution      => i_prof.institution,
                                                        i_flg_old_status      => l_analysis_req_det.flg_status);
            
                g_error     := 'VALIDATE DIAGNOSIS';
                l_diagnosis := table_number();
                IF i_diagnosis(i).tbl_diagnosis.count > 0
                THEN
                    FOR j IN i_diagnosis(i).tbl_diagnosis.first .. i_diagnosis(i).tbl_diagnosis.last
                    LOOP
                        IF i_diagnosis(i).tbl_diagnosis(j).id_diagnosis IS NOT NULL
                            OR i_diagnosis(i).tbl_diagnosis(j).id_diagnosis != -1
                        THEN
                            l_diagnosis.extend;
                            l_diagnosis(l_diagnosis.count) := i_diagnosis(i).tbl_diagnosis(j).id_diagnosis;
                        
                            l_tbl_alert_diagnosis.extend;
                            l_tbl_alert_diagnosis(l_tbl_alert_diagnosis.count) := i_diagnosis(i).tbl_diagnosis(j).id_alert_diagnosis;
                        
                            l_tbl_diag_desc.extend();
                            l_tbl_diag_desc(l_tbl_diag_desc.count) := i_diagnosis(i).tbl_diagnosis(j).desc_diagnosis;
                        END IF;
                    END LOOP;
                END IF;
            
                --Counts not null records
                g_error := 'COUNT EPIS_DIAGNOSIS';
                SELECT COUNT(*)
                  INTO l_count
                  FROM (SELECT /*+opt_estimate(table t rows=1)*/
                         *
                          FROM TABLE(l_diagnosis) t);
            
                --Cancels previously associated diagnosis that don't apply
                IF l_count > 0
                THEN
                    g_error := 'CANCEL MCTD_REQ_DIAGNOSIS 1';
                    UPDATE mcdt_req_diagnosis
                       SET flg_status     = pk_alert_constant.g_cancelled,
                           id_prof_cancel = i_prof.id,
                           dt_cancel_tstz = g_sysdate_tstz
                     WHERE (id_mcdt_req_diagnosis IN
                           (SELECT mrd.id_mcdt_req_diagnosis
                               FROM mcdt_req_diagnosis mrd
                               JOIN epis_diagnosis ed
                                 ON ed.id_epis_diagnosis = mrd.id_epis_diagnosis
                               LEFT JOIN (SELECT /*+ opt_estimate(table t rows=1) */
                                          column_value, rownum AS rn
                                           FROM TABLE(l_tbl_diag_desc) t) t_desc
                                 ON t_desc.column_value = ed.desc_epis_diagnosis
                              WHERE mrd.id_analysis_req_det = i_analysis_req_det(i)
                                AND mrd.flg_status != pk_alert_constant.g_cancelled
                                AND ((t_desc.column_value IS NULL AND ed.desc_epis_diagnosis IS NOT NULL) OR
                                    (mrd.id_alert_diagnosis NOT IN
                                    (SELECT /*+ opt_estimate(table t rows=1) */
                                        *
                                         FROM TABLE(l_tbl_alert_diagnosis)) AND ed.desc_epis_diagnosis IS NULL))));
                ELSE
                    g_error := 'CANCEL MCTD_REQ_DIAGNOSIS 2';
                    UPDATE mcdt_req_diagnosis
                       SET flg_status     = pk_alert_constant.g_cancelled,
                           id_prof_cancel = i_prof.id,
                           dt_cancel_tstz = g_sysdate_tstz
                     WHERE id_analysis_req_det = i_analysis_req_det(i)
                       AND flg_status != pk_alert_constant.g_cancelled;
                END IF;
            
                g_error := 'I_DIAGNOSIS LOOP';
                IF i_diagnosis(i).tbl_diagnosis IS NOT NULL
                THEN
                    IF i_diagnosis(i).tbl_diagnosis.count > 0
                    THEN
                        g_error := 'CALL PK_DIAGNOSIS.CONCAT_DIAG_ID';
                        l_epis_diagnosis.extend;
                        l_epis_diagnosis := pk_diagnosis.concat_diag_id(i_lang             => i_lang,
                                                                        i_prof             => i_prof,
                                                                        i_exam_req_det     => NULL,
                                                                        i_analysis_req_det => i_analysis_req_det(i),
                                                                        i_interv_presc_det => NULL,
                                                                        i_type             => 'E');
                    
                        l_count := 0;
                        IF l_epis_diagnosis IS NOT NULL
                           AND l_epis_diagnosis.count > 0
                        THEN
                            --Verifies if diagnosis exist
                            g_error := 'SELECT COUNT(*)';
                            SELECT COUNT(*)
                              INTO l_count
                              FROM mcdt_req_diagnosis mrd
                             WHERE mrd.id_analysis_req_det = i_analysis_req_det(i)
                               AND nvl(mrd.flg_status, '@') != pk_alert_constant.g_cancelled
                               AND mrd.id_diagnosis IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                         *
                                                          FROM TABLE(l_diagnosis) t)
                               AND mrd.id_epis_diagnosis IN (SELECT /*+opt_estimate (table t rows=1)*/
                                                              *
                                                               FROM TABLE(l_epis_diagnosis) t);
                        END IF;
                    
                        IF l_count = 0
                        THEN
                            --Inserts new diagnosis code
                            g_error := 'CALL TO PK_DIAGNOSIS.SET_MCDT_REQ_DIAGNOSIS';
                            IF NOT pk_diagnosis.set_mcdt_req_diag_no_commit(i_lang             => i_lang,
                                                                            i_prof             => i_prof,
                                                                            i_epis             => i_episode,
                                                                            i_diag             => get_sub_diag_table(i_tbl_diagnosis => i_diagnosis(i),
                                                                                                                     i_sub_diag_list => l_diagnosis_new),
                                                                            i_exam_req         => NULL,
                                                                            i_analysis_req     => l_analysis_req_det.id_analysis_req,
                                                                            i_interv_presc     => NULL,
                                                                            i_exam_req_det     => NULL,
                                                                            i_analysis_req_det => i_analysis_req_det(i),
                                                                            i_interv_presc_det => NULL,
                                                                            o_error            => o_error)
                            THEN
                                IF o_error.err_desc IS NOT NULL
                                THEN
                                    g_error_code := o_error.ora_sqlerrm;
                                    g_error      := o_error.err_action;
                                
                                    RAISE g_user_exception;
                                ELSE
                                    RAISE g_other_exception;
                                END IF;
                            END IF;
                        ELSIF l_count > 0
                              AND l_count < i_diagnosis(i).tbl_diagnosis.count
                        THEN
                            SELECT DISTINCT t.column_value
                              BULK COLLECT
                              INTO l_diagnosis_new
                              FROM (SELECT /*+opt_estimate(table t rows=1)*/
                                     *
                                      FROM TABLE(l_diagnosis) t) t
                             WHERE t.column_value NOT IN
                                   (SELECT mrd.id_diagnosis
                                      FROM mcdt_req_diagnosis mrd
                                     WHERE mrd.id_analysis_req_det = i_analysis_req_det(i)
                                       AND mrd.id_epis_diagnosis IN
                                           (SELECT /*+opt_estimate (table t rows=1)*/
                                             *
                                              FROM TABLE(l_epis_diagnosis) t)
                                       AND nvl(mrd.flg_status, '@') != pk_alert_constant.g_cancelled);
                        
                            --Inserts new diagnosis code
                            g_error := 'CALL TO PK_DIAGNOSIS.SET_MCDT_REQ_DIAGNOSIS';
                            IF NOT pk_diagnosis.set_mcdt_req_diag_no_commit(i_lang             => i_lang,
                                                                            i_prof             => i_prof,
                                                                            i_epis             => i_episode,
                                                                            i_diag             => get_sub_diag_table(i_tbl_diagnosis => i_diagnosis(i),
                                                                                                                     i_sub_diag_list => l_diagnosis_new),
                                                                            i_exam_req         => NULL,
                                                                            i_analysis_req     => l_analysis_req_det.id_analysis_req,
                                                                            i_interv_presc     => NULL,
                                                                            i_exam_req_det     => NULL,
                                                                            i_analysis_req_det => i_analysis_req_det(i),
                                                                            i_interv_presc_det => NULL,
                                                                            o_error            => o_error)
                            THEN
                                IF o_error.err_desc IS NOT NULL
                                THEN
                                    g_error_code := o_error.ora_sqlerrm;
                                    g_error      := o_error.err_action;
                                
                                    RAISE g_user_exception;
                                ELSE
                                    RAISE g_other_exception;
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            
                l_prof_cc := table_varchar();
                IF i_prof_cc(i).count > 0
                THEN
                    FOR j IN i_prof_cc(i).first .. i_prof_cc(i).last
                    LOOP
                        l_prof_cc.extend;
                        l_prof_cc(j) := i_prof_cc(i) (j);
                    END LOOP;
                END IF;
            
                l_prof_bcc := table_varchar();
                IF i_prof_bcc(i).count > 0
                THEN
                    FOR j IN i_prof_bcc(i).first .. i_prof_bcc(i).last
                    LOOP
                        l_prof_bcc.extend;
                        l_prof_bcc(j) := i_prof_bcc(i) (j);
                    END LOOP;
                END IF;
            
                IF l_prof_cc.count != 0
                   OR l_prof_bcc.count != 0
                THEN
                    g_error := 'UPDATE ANALYSIS_RESULT_SEND 1';
                    ts_analysis_result_send.upd(flg_status_in => pk_lab_tests_constant.g_analysis_cancel,
                                                where_in      => 'id_analysis_req_det = ' || i_analysis_req_det(i) ||
                                                                 ' AND (id_prof_cc IS NOT NULL OR email_cc IS NOT NULL)' ||
                                                                 ' AND flg_status != ''' ||
                                                                 pk_lab_tests_constant.g_analysis_cancel || '''');
                
                    FOR k IN 1 .. l_prof_cc.count
                    LOOP
                        IF l_prof_cc(k) IS NOT NULL
                        THEN
                            g_error := 'INSERT ANALYSIS_RESULT_SEND 1';
                            ts_analysis_result_send.ins(id_analysis_result_send_out => l_analysis_result_send,
                                                        id_analysis_req_det_in      => i_analysis_req_det(i),
                                                        id_prof_cc_in               => CASE
                                                                                           WHEN pk_utils.is_number(l_prof_cc(k)) =
                                                                                                pk_lab_tests_constant.g_yes THEN
                                                                                            to_number(l_prof_cc(k))
                                                                                           ELSE
                                                                                            NULL
                                                                                       END,
                                                        email_cc_in                 => CASE
                                                                                           WHEN pk_utils.is_number(l_prof_cc(k)) =
                                                                                                pk_lab_tests_constant.g_no THEN
                                                                                            l_prof_cc(k)
                                                                                           ELSE
                                                                                            NULL
                                                                                       END,
                                                        flg_status_in               => pk_lab_tests_constant.g_analysis_pending);
                        END IF;
                    END LOOP;
                
                    g_error := 'UPDATE ANALYSIS_RESULT_SEND 1';
                    ts_analysis_result_send.upd(flg_status_in => pk_lab_tests_constant.g_analysis_cancel,
                                                where_in      => 'id_analysis_req_det = ' || i_analysis_req_det(i) ||
                                                                 ' AND (id_prof_bcc IS NOT NULL OR email_bcc IS NOT NULL)' ||
                                                                 ' AND flg_status != ''' ||
                                                                 pk_lab_tests_constant.g_analysis_cancel || '''');
                
                    FOR k IN 1 .. l_prof_bcc.count
                    LOOP
                        IF l_prof_bcc(k) IS NOT NULL
                        THEN
                            g_error := 'INSERT ANALYSIS_RESULT_SEND 2';
                            ts_analysis_result_send.ins(id_analysis_result_send_out => l_analysis_result_send,
                                                        id_analysis_req_det_in      => i_analysis_req_det(i),
                                                        id_prof_bcc_in              => CASE
                                                                                           WHEN pk_utils.is_number(l_prof_bcc(k)) =
                                                                                                pk_lab_tests_constant.g_yes THEN
                                                                                            to_number(l_prof_bcc(k))
                                                                                           ELSE
                                                                                            NULL
                                                                                       END,
                                                        email_bcc_in                => CASE
                                                                                           WHEN pk_utils.is_number(l_prof_bcc(k)) =
                                                                                                pk_lab_tests_constant.g_no THEN
                                                                                            l_prof_bcc(k)
                                                                                           ELSE
                                                                                            NULL
                                                                                       END,
                                                        flg_status_in               => pk_lab_tests_constant.g_analysis_pending);
                        END IF;
                    END LOOP;
                END IF;
            
                g_error             := 'VALIDATE CLINICAL QUESTIONS';
                l_clinical_question := table_number();
                IF i_clinical_question(i).count > 0
                THEN
                    FOR j IN i_clinical_question(i).first .. i_clinical_question(i).last
                    LOOP
                        l_clinical_question.extend;
                        l_clinical_question(j) := i_clinical_question(i) (j);
                    END LOOP;
                END IF;
            
                l_response := table_varchar();
                IF i_response(i).count > 0
                THEN
                    FOR j IN i_response(i).first .. i_response(i).last
                    LOOP
                        l_response.extend;
                        l_response(j) := i_response(i) (j);
                    END LOOP;
                END IF;
            
                l_clinical_question_notes := table_varchar();
                IF i_clinical_question_notes(i).count > 0
                THEN
                    FOR j IN i_clinical_question_notes(i).first .. i_clinical_question_notes(i).last
                    LOOP
                        l_clinical_question_notes.extend;
                        l_clinical_question_notes(j) := i_clinical_question_notes(i) (j);
                    END LOOP;
                END IF;
            
                IF l_clinical_question.count != 0
                THEN
                    FOR k IN 1 .. l_clinical_question.count
                    LOOP
                        IF l_clinical_question(k) IS NOT NULL
                        THEN
                            IF l_response(k) IS NOT NULL
                            THEN
                                l_aux := pk_utils.str_split(l_response(k), '|');
                            
                                FOR j IN 1 .. l_aux.count
                                LOOP
                                    SELECT COUNT(*)
                                      INTO l_count
                                      FROM analysis_question_response aqr
                                     WHERE aqr.id_analysis_req_det = i_analysis_req_det(i)
                                       AND aqr.id_questionnaire = l_clinical_question(k)
                                       AND (aqr.id_response = to_number(l_aux(j)) OR
                                           aqr.notes = l_clinical_question_notes(k));
                                
                                    IF l_count = 0
                                    THEN
                                        g_error := 'INSERT INTO ANALYSIS_QUESTION_RESPONSE';
                                        INSERT INTO analysis_question_response
                                            (id_analysis_question_response,
                                             id_episode,
                                             id_analysis_req_det,
                                             id_questionnaire,
                                             id_response,
                                             notes,
                                             id_prof_last_update,
                                             dt_last_update_tstz)
                                        VALUES
                                            (seq_analysis_question_response.nextval,
                                             i_episode,
                                             i_analysis_req_det(i),
                                             l_clinical_question(k),
                                             to_number(l_aux(j)),
                                             l_clinical_question_notes(k),
                                             i_prof.id,
                                             g_sysdate_tstz);
                                    ELSE
                                        SELECT *
                                          INTO l_analysis_question_response
                                          FROM analysis_question_response aqr
                                         WHERE aqr.id_analysis_req_det = i_analysis_req_det(i)
                                           AND aqr.id_questionnaire = l_clinical_question(k)
                                           AND (aqr.id_response = to_number(l_aux(j)) OR
                                               aqr.notes = l_clinical_question_notes(k));
                                    
                                        g_error := 'INSERT INTO ANALYSIS_QUESTION_RESP_HIST';
                                        INSERT INTO analysis_question_resp_hist
                                            (dt_analysis_question_resp_hist,
                                             id_analysis_question_resp_hist,
                                             id_analysis_question_response,
                                             id_episode,
                                             id_analysis_req_det,
                                             id_questionnaire,
                                             id_response,
                                             notes,
                                             id_prof_last_update,
                                             dt_last_update_tstz)
                                        VALUES
                                            (g_sysdate_tstz,
                                             seq_analysis_question_res_hist.nextval,
                                             l_analysis_question_response.id_analysis_question_response,
                                             l_analysis_question_response.id_episode,
                                             l_analysis_question_response.id_analysis_req_det,
                                             l_analysis_question_response.id_questionnaire,
                                             l_analysis_question_response.id_response,
                                             l_analysis_question_response.notes,
                                             l_analysis_question_response.id_prof_last_update,
                                             l_analysis_question_response.dt_last_update_tstz);
                                    
                                        g_error := 'INSERT INTO ANALYSIS_QUESTION_RESPONSE';
                                        INSERT INTO analysis_question_response
                                            (id_analysis_question_response,
                                             id_analysis_req_det,
                                             id_episode,
                                             id_questionnaire,
                                             id_response,
                                             notes,
                                             id_prof_last_update,
                                             dt_last_update_tstz)
                                        VALUES
                                            (seq_analysis_question_response.nextval,
                                             i_episode,
                                             i_analysis_req_det(i),
                                             l_clinical_question(k),
                                             to_number(l_aux(j)),
                                             l_clinical_question_notes(k),
                                             i_prof.id,
                                             g_sysdate_tstz);
                                    END IF;
                                END LOOP;
                            ELSE
                                SELECT COUNT(*)
                                  INTO l_count
                                  FROM analysis_question_response aqr
                                 WHERE aqr.id_analysis_req_det = i_analysis_req_det(i)
                                   AND aqr.id_questionnaire = l_clinical_question(k)
                                   AND (aqr.id_response IS NULL OR aqr.notes = l_clinical_question_notes(k));
                            
                                IF l_count = 0
                                THEN
                                    g_error := 'INSERT INTO ANALYSIS_QUESTION_RESPONSE';
                                    INSERT INTO analysis_question_response
                                        (id_analysis_question_response,
                                         id_episode,
                                         id_analysis_req_det,
                                         id_questionnaire,
                                         id_response,
                                         notes,
                                         id_prof_last_update,
                                         dt_last_update_tstz)
                                    VALUES
                                        (seq_analysis_question_response.nextval,
                                         i_episode,
                                         i_analysis_req_det(i),
                                         l_clinical_question(k),
                                         NULL,
                                         l_clinical_question_notes(k),
                                         i_prof.id,
                                         g_sysdate_tstz);
                                ELSE
                                    SELECT *
                                      INTO l_analysis_question_response
                                      FROM analysis_question_response aqr
                                     WHERE aqr.id_analysis_req_det = i_analysis_req_det(i)
                                       AND aqr.id_questionnaire = l_clinical_question(k)
                                       AND (aqr.id_response IS NULL OR aqr.notes = l_clinical_question_notes(k));
                                
                                    g_error := 'INSERT INTO ANALYSIS_QUESTION_RESP_HIST';
                                    INSERT INTO analysis_question_resp_hist
                                        (dt_analysis_question_resp_hist,
                                         id_analysis_question_resp_hist,
                                         id_analysis_question_response,
                                         id_episode,
                                         id_analysis_req_det,
                                         id_questionnaire,
                                         id_response,
                                         notes,
                                         id_prof_last_update,
                                         dt_last_update_tstz)
                                    VALUES
                                        (g_sysdate_tstz,
                                         seq_analysis_question_res_hist.nextval,
                                         l_analysis_question_response.id_analysis_question_response,
                                         l_analysis_question_response.id_episode,
                                         l_analysis_question_response.id_analysis_req_det,
                                         l_analysis_question_response.id_questionnaire,
                                         l_analysis_question_response.id_response,
                                         l_analysis_question_response.notes,
                                         l_analysis_question_response.id_prof_last_update,
                                         l_analysis_question_response.dt_last_update_tstz);
                                
                                    g_error := 'INSERT INTO ANALYSIS_QUESTION_RESPONSE';
                                    INSERT INTO analysis_question_response
                                        (id_analysis_question_response,
                                         id_episode,
                                         id_analysis_req_det,
                                         id_questionnaire,
                                         id_response,
                                         notes,
                                         id_prof_last_update,
                                         dt_last_update_tstz)
                                    VALUES
                                        (seq_analysis_question_response.nextval,
                                         i_episode,
                                         i_analysis_req_det(i),
                                         l_clinical_question(k),
                                         NULL,
                                         l_clinical_question_notes(k),
                                         i_prof.id,
                                         g_sysdate_tstz);
                                END IF;
                            END IF;
                        END IF;
                    END LOOP;
                END IF;
            
                IF i_body_location(i).count > 0
                THEN
                    UPDATE harvest
                       SET flg_status = pk_lab_tests_constant.g_harvest_inactive
                     WHERE id_harvest IN (SELECT id_harvest
                                            FROM analysis_harvest
                                           WHERE id_analysis_req_det = i_analysis_req_det(i));
                
                    UPDATE analysis_harvest
                       SET flg_status = pk_lab_tests_constant.g_harvest_inactive
                     WHERE id_analysis_req_det = i_analysis_req_det(i);
                
                    FOR j IN i_body_location(i).first .. i_body_location(i).last
                    LOOP
                        -- Create Pending Harvest
                        g_error := 'CALL PK_LAB_TESTS_HARVEST_CORE.CREATE_HARVEST_PENDING';
                        IF NOT pk_lab_tests_harvest_core.create_harvest_pending(i_lang             => i_lang,
                                                                           i_prof             => i_prof,
                                                                           i_patient          => pk_episode.get_id_patient(i_episode),
                                                                           i_episode          => i_episode,
                                                                           i_analysis_req     => l_analysis_req_det.id_analysis_req,
                                                                           i_analysis_req_det => i_analysis_req_det(i),
                                                                           i_body_location    => i_body_location(i) (j),
                                                                           i_laterality       => CASE
                                                                                                     WHEN i_laterality(i) IS NOT NULL
                                                                                                          AND i_laterality(i).count > 0 THEN
                                                                                                      i_laterality(i) (j)
                                                                                                     ELSE
                                                                                                      NULL
                                                                                                 END,
                                                                           o_error            => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END LOOP;
                END IF;
            
                --Get requesting professional
                g_error := 'SELECT ID_PROF_WRITES FROM ANALYSIS_REQ';
                SELECT id_prof_writes
                  INTO l_id_prof_writes
                  FROM analysis_req
                 WHERE id_analysis_req = l_analysis_req_det.id_analysis_req;
            
                l_sys_alert_event.id_software     := i_prof.software;
                l_sys_alert_event.id_institution  := i_prof.institution;
                l_sys_alert_event.id_episode      := i_episode;
                l_sys_alert_event.id_record       := i_analysis_req_det(i);
                l_sys_alert_event.dt_record       := g_sysdate_tstz;
                l_sys_alert_event.id_professional := i_prof.id;
                l_sys_alert_event.id_room         := NULL;
                l_sys_alert_event.replace1        := 'ANALYSIS.CODE_ANALYSIS.' || l_analysis_req_det.id_analysis;
                l_sys_alert_event.id_prof_order   := nvl(i_prof_order(i), i_prof.id);
            
                --Verifica se o evento é passível de gerar alertas
                IF ((l_harvest_pending_req = pk_lab_tests_constant.g_yes AND
                   l_status_det IN (pk_lab_tests_constant.g_analysis_req, pk_lab_tests_constant.g_analysis_pending)) OR
                   (l_harvest_pending_req = pk_lab_tests_constant.g_no AND
                   l_status_det = pk_lab_tests_constant.g_analysis_req))
                   AND (i_flg_col_inst(i) = pk_lab_tests_constant.g_yes OR i_collection_room(i) IS NOT NULL)
                   AND l_analysis_req_det.flg_time_harvest = pk_lab_tests_constant.g_flg_time_e
                   AND l_dt_begin IS NOT NULL
                THEN
                    l_sys_alert_event.id_sys_alert := 4;
                    --Insere evento na tabela de alertas
                    g_error := 'INSERT INTO SYS_ALERT_EVENT';
                    IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            i_flg_type_dest   => 'C',
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                ELSE
                    l_sys_alert_event.id_sys_alert := 4;
                
                    g_error := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT - ALERTA 4';
                    IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                --Verifica se o evento é passível de gerar alertas
                IF l_status_det IN (pk_lab_tests_constant.g_analysis_req, pk_lab_tests_constant.g_analysis_pending)
                   AND l_dt_begin IS NOT NULL
                THEN
                
                    l_sys_alert_event.id_sys_alert := 40;
                    --Insere evento na tabela de alertas
                    g_error := 'INSERT INTO SYS_ALERT_EVENT';
                    IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            i_flg_type_dest   => 'C',
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                ELSE
                    l_sys_alert_event.id_sys_alert := 40;
                
                    g_error := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT - ALERTA 40';
                    IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                IF l_status_det NOT IN
                   (pk_lab_tests_constant.g_analysis_predefined, pk_lab_tests_constant.g_analysis_draft)
                THEN
                    -- Updating lab technician grid
                    g_error := 'PK_LAB_TESTS_API_DB.SET_LAB_TEST_GRID_TASK';
                    IF NOT pk_lab_tests_api_db.set_lab_test_grid_task(i_lang             => i_lang,
                                                                      i_prof             => i_prof,
                                                                      i_patient          => NULL,
                                                                      i_episode          => i_episode,
                                                                      i_analysis_req     => l_analysis_req_det.id_analysis_req,
                                                                      i_analysis_req_det => i_analysis_req_det(i),
                                                                      o_error            => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              g_error_code,
                                              g_error,
                                              '',
                                              g_package_owner,
                                              g_package_name,
                                              'UPDATE_LAB_TEST_ORDER',
                                              'U',
                                              '',
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'UPDATE_LAB_TEST_ORDER',
                                              o_error);
            RETURN FALSE;
    END update_lab_test_order;

    FUNCTION update_lab_test_result
    (
        i_lang                   IN language.id_language%TYPE,
        i_prof                   IN profissional,
        i_episode                IN analysis_req.id_episode%TYPE,
        i_analysis_result_par    IN analysis_result_par.id_analysis_result_par%TYPE,
        i_dt_sample              IN VARCHAR2,
        i_prof_req               IN analysis_result.id_prof_req%TYPE,
        i_dt_analysis_result     IN VARCHAR2,
        i_flg_result_origin      IN analysis_result.flg_result_origin%TYPE,
        i_result_origin_notes    IN analysis_result.result_origin_notes%TYPE,
        i_result_notes           IN VARCHAR2,
        i_dt_ext_registry        IN VARCHAR2 DEFAULT NULL,
        i_instit_origin          IN analysis_result_par.id_instit_origin%TYPE DEFAULT NULL,
        i_result_value_1         IN analysis_result_par.desc_analysis_result%TYPE,
        i_result_value_2         IN analysis_result_par.analysis_result_value_2%TYPE DEFAULT NULL,
        i_analysis_desc          IN analysis_desc.id_analysis_desc%TYPE,
        i_doc_external           IN table_number DEFAULT NULL,
        i_doc_type               IN table_number DEFAULT NULL,
        i_doc_ori_type           IN table_number DEFAULT NULL,
        i_title                  IN table_varchar DEFAULT NULL,
        i_comparator             IN analysis_result_par.comparator%TYPE DEFAULT NULL,
        i_separator              IN analysis_result_par.separator%TYPE DEFAULT NULL,
        i_standard_code          IN analysis_result_par.standard_code%TYPE DEFAULT NULL,
        i_unit_measure           IN analysis_result_par.id_unit_measure%TYPE,
        i_desc_unit_measure      IN analysis_result_par.desc_unit_measure%TYPE DEFAULT NULL,
        i_result_status          IN analysis_result_par.id_result_status%TYPE,
        i_ref_val                IN analysis_result_par.ref_val%TYPE DEFAULT NULL,
        i_ref_val_min            IN analysis_result_par.ref_val_min_str%TYPE,
        i_ref_val_max            IN analysis_result_par.ref_val_max_str%TYPE,
        i_parameter_notes        IN analysis_result_par.parameter_notes%TYPE,
        i_interface_notes        IN analysis_result_par.interface_notes%TYPE DEFAULT NULL,
        i_laboratory             IN analysis_result_par.id_laboratory%TYPE DEFAULT NULL,
        i_laboratory_desc        IN analysis_result_par.laboratory_desc%TYPE DEFAULT NULL,
        i_laboratory_short_desc  IN analysis_result_par.laboratory_short_desc%TYPE DEFAULT NULL,
        i_coding_system          IN analysis_result_par.coding_system%TYPE DEFAULT NULL,
        i_method                 IN analysis_result_par.method%TYPE DEFAULT NULL,
        i_equipment              IN analysis_result_par.equipment%TYPE DEFAULT NULL,
        i_abnormality            IN analysis_result_par.id_abnormality%TYPE DEFAULT NULL,
        i_abnormality_nature     IN analysis_result_par.id_abnormality_nature%TYPE DEFAULT NULL,
        i_prof_validation        IN analysis_result_par.id_prof_validation%TYPE DEFAULT NULL,
        i_dt_validation          IN VARCHAR2 DEFAULT NULL,
        i_flg_intf_orig          IN analysis_result_par.flg_intf_orig%TYPE DEFAULT 'N',
        i_clinical_decision_rule IN analysis_result_par.id_cdr%TYPE,
        o_result                 OUT VARCHAR2,
        o_id_result              OUT analysis_result.id_analysis_result%TYPE,
        o_error                  OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_patient IS
            SELECT e.id_patient, e.id_visit
              FROM episode e
             WHERE e.id_episode = i_episode;
    
        CURSOR c_analysis_result(l_analysis_result IN analysis_result.id_analysis_result%TYPE) IS
            SELECT ar.*
              FROM analysis_result ar
             WHERE ar.id_analysis_result = l_analysis_result;
    
        CURSOR c_analysis_result_par IS
            SELECT arp.*
              FROM analysis_result_par arp
             WHERE arp.id_analysis_result_par = i_analysis_result_par;
    
        CURSOR c_analysis(l_analysis_result_par IN analysis_result_par.id_analysis_result_par%TYPE) IS
            SELECT ard.id_analysis,
                   arp.id_analysis_result,
                   ar.id_prof_writes,
                   nvl(ar.id_episode, ard.id_episode_origin) id_episode,
                   ard.flg_urgency flg_priority
              FROM analysis_result_par arp, analysis_req_par areq, analysis_req_det ard, analysis_req ar
             WHERE arp.id_analysis_result_par = l_analysis_result_par
               AND arp.id_analysis_req_par = areq.id_analysis_req_par
               AND ard.id_analysis_req_det = areq.id_analysis_req_det
               AND ar.id_analysis_req = ard.id_analysis_req;
    
        CURSOR c_episode(l_episode episode.id_episode%TYPE) IS
            SELECT pk_episode.get_soft_by_epis_type(e.id_epis_type, e.id_institution) id_software
              FROM episode e
             WHERE e.id_episode = l_episode;
    
        l_patient             c_patient%ROWTYPE;
        l_analysis_result     c_analysis_result%ROWTYPE;
        l_analysis_result_par c_analysis_result_par%ROWTYPE;
        l_analysis            c_analysis%ROWTYPE;
    
        l_id_analysis_result_par analysis_result_par.id_analysis_result_par%TYPE;
        l_analysis_req_det       analysis_req_det.id_analysis_req_det%TYPE;
        l_analysis_req           analysis_req.id_analysis_req%TYPE;
        l_alert_exists           NUMBER;
        l_sys_alert_event        sys_alert_event%ROWTYPE;
        l_software               software.id_software%TYPE;
    
        l_dt_analysis_result analysis_result.dt_analysis_result_tstz%TYPE;
        l_dt_sample          analysis_result.dt_sample%TYPE;
    
        l_status analysis_req_det.flg_status%TYPE;
    
        l_ref_val_min           analysis_result_par.ref_val_min%TYPE;
        l_ref_val_max           analysis_result_par.ref_val_max%TYPE;
        l_analysis_result_value analysis_result_par.analysis_result_value_1%TYPE;
    
        l_nls_numeric_param VARCHAR2(32 CHAR) := 'NLS_NUMERIC_CHARACTERS='', ''';
    
        l_doc_type                     doc_external.id_doc_type%TYPE;
        l_doc_ori_type                 doc_external.id_doc_ori_type%TYPE;
        l_title                        doc_external.title%TYPE;
        l_id_doc_external_updated      doc_external.id_doc_external%TYPE;
        l_count_analysis_media_archive NUMBER := 0;
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        IF g_sysdate_tstz IS NULL
        THEN
            g_sysdate_tstz := current_timestamp;
        END IF;
    
        l_dt_sample := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_sample, NULL);
    
        IF i_dt_analysis_result IS NULL
        THEN
            l_dt_analysis_result := g_sysdate_tstz;
        ELSE
            l_dt_analysis_result := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_analysis_result, NULL);
        END IF;
    
        g_error := 'GET CURSOR';
        OPEN c_analysis_result_par;
        FETCH c_analysis_result_par
            INTO l_analysis_result_par;
        CLOSE c_analysis_result_par;
    
        g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_RESULT_HISTORY';
        IF NOT pk_lab_tests_core.set_lab_test_result_history(i_lang                => i_lang,
                                                             i_prof                => i_prof,
                                                             i_analysis_result     => l_analysis_result_par.id_analysis_result,
                                                             i_analysis_result_par => table_number(i_analysis_result_par),
                                                             o_error               => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'GET CURSOR';
        OPEN c_patient;
        FETCH c_patient
            INTO l_patient;
        CLOSE c_patient;
    
        g_error := 'UPDATE ANALYSIS_RESULT_PAR';
        ts_analysis_result_par.upd(id_analysis_result_par_in     => i_analysis_result_par,
                                   analysis_result_value_1_in    => CASE
                                                                        WHEN pk_utils.is_number(i_result_value_1) =
                                                                             pk_lab_tests_constant.g_yes THEN
                                                                         CASE
                                                                             WHEN instr(TRIM(REPLACE(i_result_value_1, '.', ',')),
                                                                                        ',',
                                                                                        1) = 1 THEN
                                                                              to_number('0' ||
                                                                                        TRIM(REPLACE(i_result_value_1, '.', ',')),
                                                                                        pk_lab_tests_constant.g_format_mask,
                                                                                        l_nls_numeric_param)
                                                                             ELSE
                                                                              to_number(TRIM(REPLACE(i_result_value_1, '.', ',')),
                                                                                        pk_lab_tests_constant.g_format_mask,
                                                                                        l_nls_numeric_param)
                                                                         END
                                                                        ELSE
                                                                         NULL
                                                                    END,
                                   analysis_result_value_1_nin   => FALSE,
                                   analysis_result_value_2_in    => CASE
                                                                        WHEN instr(TRIM(REPLACE(i_result_value_2, '.', ',')),
                                                                                   ',',
                                                                                   1) = 1 THEN
                                                                         to_number('0' ||
                                                                                   TRIM(REPLACE(i_result_value_2, '.', ',')),
                                                                                   pk_lab_tests_constant.g_format_mask,
                                                                                   l_nls_numeric_param)
                                                                        ELSE
                                                                         to_number(TRIM(REPLACE(i_result_value_2, '.', ',')),
                                                                                   pk_lab_tests_constant.g_format_mask,
                                                                                   l_nls_numeric_param)
                                                                    END,
                                   analysis_result_value_2_nin   => FALSE,
                                   desc_analysis_result_in       => i_result_value_1,
                                   desc_analysis_result_nin      => TRUE,
                                   id_analysis_desc_in           => i_analysis_desc,
                                   id_analysis_desc_nin          => FALSE,
                                   comparator_in                 => i_comparator,
                                   comparator_nin                => FALSE,
                                   separator_in                  => i_separator,
                                   separator_nin                 => FALSE,
                                   standard_code_in              => i_standard_code,
                                   standard_code_nin             => FALSE,
                                   dt_ext_registry_in            => pk_date_utils.get_string_tstz(i_lang,
                                                                                                  i_prof,
                                                                                                  i_dt_ext_registry,
                                                                                                  NULL),
                                   dt_ext_registry_nin           => FALSE,
                                   id_unit_measure_in            => CASE i_unit_measure
                                                                        WHEN -1 THEN
                                                                         NULL
                                                                        ELSE
                                                                         i_unit_measure
                                                                    END,
                                   id_unit_measure_nin           => FALSE,
                                   desc_unit_measure_in          => i_desc_unit_measure,
                                   desc_unit_measure_nin         => FALSE,
                                   ref_val_in                    => i_ref_val,
                                   ref_val_min_in                => CASE
                                                                        WHEN pk_utils.is_number(i_ref_val_min) =
                                                                             pk_lab_tests_constant.g_yes THEN
                                                                         CASE
                                                                             WHEN instr(TRIM(REPLACE(i_ref_val_min, '.', ',')),
                                                                                        ',',
                                                                                        1) = 1 THEN
                                                                              to_number('0' ||
                                                                                        TRIM(REPLACE(i_ref_val_min, '.', ',')),
                                                                                        pk_lab_tests_constant.g_format_mask,
                                                                                        l_nls_numeric_param)
                                                                             ELSE
                                                                              to_number(TRIM(REPLACE(i_ref_val_min, '.', ',')),
                                                                                        pk_lab_tests_constant.g_format_mask,
                                                                                        l_nls_numeric_param)
                                                                         END
                                                                        ELSE
                                                                         NULL
                                                                    END,
                                   ref_val_max_in                => CASE
                                                                        WHEN pk_utils.is_number(i_ref_val_max) =
                                                                             pk_lab_tests_constant.g_yes THEN
                                                                         CASE
                                                                             WHEN instr(TRIM(REPLACE(i_ref_val_max, '.', ',')),
                                                                                        ',',
                                                                                        1) = 1 THEN
                                                                              to_number('0' ||
                                                                                        TRIM(REPLACE(i_ref_val_max, '.', ',')),
                                                                                        pk_lab_tests_constant.g_format_mask,
                                                                                        l_nls_numeric_param)
                                                                             ELSE
                                                                              to_number(TRIM(REPLACE(i_ref_val_max, '.', ',')),
                                                                                        pk_lab_tests_constant.g_format_mask,
                                                                                        l_nls_numeric_param)
                                                                         END
                                                                        ELSE
                                                                         NULL
                                                                    END,
                                   ref_val_min_str_in            => i_ref_val_min,
                                   ref_val_max_str_in            => i_ref_val_max,
                                   id_professional_cancel_nin    => FALSE,
                                   id_cancel_reason_nin          => FALSE,
                                   dt_cancel_nin                 => FALSE,
                                   notes_cancel_nin              => FALSE,
                                   dt_analysis_result_par_upd_in => g_sysdate_tstz,
                                   id_professional_upd_in        => nvl(i_prof_req, i_prof.id),
                                   parameter_notes_in            => i_parameter_notes,
                                   parameter_notes_nin           => FALSE,
                                   interface_notes_in            => i_interface_notes,
                                   interface_notes_nin           => FALSE,
                                   id_result_status_in           => i_result_status,
                                   id_result_status_nin          => FALSE,
                                   coding_system_in              => i_coding_system,
                                   id_abnormality_in             => i_abnormality,
                                   id_abnormality_nin            => FALSE,
                                   id_abnormality_nature_in      => i_abnormality_nature,
                                   id_abnormality_nature_nin     => FALSE,
                                   method_in                     => i_method,
                                   equipment_in                  => i_equipment,
                                   id_prof_validation_in         => i_prof_validation,
                                   flg_validation_type_in        => pk_prof_utils.get_category(i_lang,
                                                                                               profissional(i_prof_validation,
                                                                                                            i_prof.institution,
                                                                                                            i_prof.software)),
                                   dt_validation_tstz_in         => pk_date_utils.get_string_tstz(i_lang,
                                                                                                  i_prof,
                                                                                                  i_dt_validation,
                                                                                                  NULL),
                                   id_instit_origin_in           => nvl(i_instit_origin, i_prof.institution),
                                   id_laboratory_in              => i_laboratory,
                                   laboratory_desc_in            => i_laboratory_desc,
                                   laboratory_short_desc_in      => i_laboratory_short_desc,
                                   id_cdr_in                     => i_clinical_decision_rule,
                                   rows_out                      => l_rows_out);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'ANALYSIS_RESULT_PAR',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        g_error := 'GET CURSOR';
        OPEN c_analysis_result(l_analysis_result_par.id_analysis_result);
        FETCH c_analysis_result
            INTO l_analysis_result;
        CLOSE c_analysis_result;
    
        o_id_result := l_analysis_result.id_analysis_result;
    
        BEGIN
            SELECT arp.id_analysis_result_par
              INTO l_id_analysis_result_par
              FROM analysis_result_par arp
             WHERE arp.id_analysis_result = l_analysis_result_par.id_analysis_result
               AND arp.id_result_status != i_result_status
               AND rownum = 1;
        
            -- If analysis result flag was 'C', should be updated to 'A'
            g_error := 'UPDATE ANALYSIS_RESULT';
            ts_analysis_result.upd(flg_status_in => pk_lab_tests_constant.g_active,
                                   where_in      => 'flg_status = ''' || pk_lab_tests_constant.g_analysis_cancel ||
                                                    ''' AND id_analysis_result = ' ||
                                                    l_analysis_result_par.id_analysis_result,
                                   rows_out      => l_rows_out);
        
            g_error := 'UPDATE ANALYSIS_RESULT';
            ts_analysis_result.upd(id_analysis_result_in       => l_analysis_result_par.id_analysis_result,
                                   dt_analysis_result_tstz_in  => l_dt_analysis_result,
                                   dt_analysis_result_tstz_nin => FALSE,
                                   dt_sample_in                => l_dt_sample,
                                   dt_sample_nin               => FALSE,
                                   notes_in                    => i_result_notes,
                                   notes_nin                   => FALSE,
                                   id_prof_req_in              => i_prof_req,
                                   flg_result_origin_in        => i_flg_result_origin,
                                   result_origin_notes_in      => i_result_origin_notes,
                                   rows_out                    => l_rows_out);
        
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'ANALYSIS_RESULT',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
        EXCEPTION
            WHEN no_data_found THEN
            
                g_error := 'UPDATE ANALYSIS_RESULT';
                ts_analysis_result.upd(id_analysis_result_in       => l_analysis_result_par.id_analysis_result,
                                       dt_analysis_result_tstz_in  => l_dt_analysis_result,
                                       dt_analysis_result_tstz_nin => FALSE,
                                       dt_sample_in                => l_dt_sample,
                                       dt_sample_nin               => FALSE,
                                       notes_in                    => i_result_notes,
                                       notes_nin                   => FALSE,
                                       id_prof_req_in              => i_prof_req,
                                       flg_result_origin_in        => i_flg_result_origin,
                                       result_origin_notes_in      => i_result_origin_notes,
                                       id_result_status_in         => i_result_status,
                                       rows_out                    => l_rows_out);
            
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'ANALYSIS_RESULT',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
        END;
    
        SELECT ard.id_analysis_req, ard.id_analysis_req_det, ard.flg_status
          INTO l_analysis_req, l_analysis_req_det, l_status
          FROM analysis_result ar, analysis_req_det ard
         WHERE ar.id_analysis_result = l_analysis_result_par.id_analysis_result
           AND ar.id_analysis_req_det = ard.id_analysis_req_det(+);
    
        IF l_analysis_req_det IS NOT NULL
        THEN
            g_error := 'UPDATE ANALYSIS_REQ_DET';
            IF pk_prof_utils.get_category(i_lang, i_prof) = pk_alert_constant.g_cat_type_doc
               AND i_result_status = 3
               AND l_status = pk_lab_tests_constant.g_analysis_result
               AND i_flg_intf_orig = pk_lab_tests_constant.g_no
            THEN
            
                -- se for médico, fica logo lido
                ts_analysis_result.upd(id_analysis_result_in => l_analysis_result_par.id_analysis_result,
                                       id_episode_in         => i_episode,
                                       id_episode_nin        => FALSE,
                                       id_visit_in           => l_patient.id_visit,
                                       id_visit_nin          => FALSE,
                                       rows_out              => l_rows_out);
            
                t_data_gov_mnt.process_update(i_lang         => i_lang,
                                              i_prof         => i_prof,
                                              i_table_name   => 'ANALYSIS_RESULT',
                                              i_list_columns => table_varchar('ID_EPISODE', 'ID_VISIT'),
                                              i_rowids       => l_rows_out,
                                              o_error        => o_error);
            
                l_rows_out := NULL;
            
                g_error := 'UPDATE ANALYSIS_REQ_DET';
                ts_analysis_req_det.upd(id_analysis_req_det_in => l_analysis_req_det,
                                        flg_status_in          => pk_lab_tests_constant.g_analysis_read,
                                        id_prof_last_update_in => i_prof.id,
                                        dt_last_update_tstz_in => g_sysdate_tstz,
                                        rows_out               => l_rows_out);
            
                t_data_gov_mnt.process_update(i_lang         => i_lang,
                                              i_prof         => i_prof,
                                              i_table_name   => 'ANALYSIS_REQ_DET',
                                              i_list_columns => table_varchar('FLG_STATUS',
                                                                              'ID_PROF_LAST_UPDATE',
                                                                              'DT_LAST_UPDATE_TSTZ'),
                                              i_rowids       => l_rows_out,
                                              o_error        => o_error);
            
                -- inserir em log de estados
                IF i_episode IS NOT NULL
                THEN
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => i_episode,
                                            i_flg_status => pk_lab_tests_constant.g_analysis_read,
                                            i_id_record  => l_analysis_req_det,
                                            i_flg_type   => pk_lab_tests_constant.g_analysis_type_det,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                g_error := 'CALL PK_LAB_TESTS_EXTERNAL_API_DB.UPDATE_TDE_TASK_STATE';
                IF NOT pk_lab_tests_external_api_db.update_tde_task_state(i_lang         => i_lang,
                                                                          i_prof         => i_prof,
                                                                          i_lab_test_req => l_analysis_req_det,
                                                                          i_flg_action   => pk_lab_tests_constant.g_analysis_read,
                                                                          o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
            ELSE
                l_rows_out := NULL;
            
                g_error := 'UPDATE ANALYSIS_REQ_DET';
                ts_analysis_req_det.upd(id_analysis_req_det_in => l_analysis_req_det,
                                        flg_status_in          => pk_lab_tests_constant.g_analysis_result,
                                        id_prof_last_update_in => i_prof.id,
                                        dt_last_update_tstz_in => g_sysdate_tstz,
                                        rows_out               => l_rows_out);
            
                t_data_gov_mnt.process_update(i_lang         => i_lang,
                                              i_prof         => i_prof,
                                              i_table_name   => 'ANALYSIS_REQ_DET',
                                              i_list_columns => table_varchar('FLG_STATUS',
                                                                              'ID_PROF_LAST_UPDATE',
                                                                              'DT_LAST_UPDATE_TSTZ'),
                                              i_rowids       => l_rows_out,
                                              o_error        => o_error);
            
                g_error := 'CALL PK_LAB_TESTS_EXTERNAL_API_DB.UPDATE_TDE_TASK_STATE';
                IF NOT pk_lab_tests_external_api_db.update_tde_task_state(i_lang         => i_lang,
                                                                          i_prof         => i_prof,
                                                                          i_lab_test_req => l_analysis_req_det,
                                                                          i_flg_action   => pk_lab_tests_constant.g_analysis_result,
                                                                          o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'GET C_ANALYSIS';
                OPEN c_analysis(i_analysis_result_par);
                FETCH c_analysis
                    INTO l_analysis;
                CLOSE c_analysis;
            
                -- inserir em log de estados
                IF l_analysis.id_episode IS NOT NULL
                THEN
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => l_analysis.id_episode,
                                            i_flg_status => pk_lab_tests_constant.g_analysis_result,
                                            i_id_record  => l_analysis_req_det,
                                            i_flg_type   => pk_lab_tests_constant.g_analysis_type_det,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                g_error := 'GET EPISODE SOFTWARE - ' || l_analysis.id_episode;
                OPEN c_episode(l_analysis.id_episode);
                FETCH c_episode
                    INTO l_software;
                g_found := c_episode%FOUND;
                CLOSE c_episode;
            
                IF NOT g_found
                THEN
                    g_error := pk_message.get_message(i_lang, 'COMMON_M001') || chr(10) ||
                               'PK_LAB_TESTS_CORE.SET_LAB_TEST_RESULT / ' || g_error || ' / ' || SQLERRM;
                    RAISE g_other_exception;
                END IF;
            
                BEGIN
                    SELECT 1
                      INTO l_alert_exists
                      FROM sys_alert_event sae
                     WHERE sae.id_sys_alert = 15
                       AND sae.id_episode = l_analysis.id_episode
                       AND sae.id_record = l_analysis_result.id_analysis_result
                       AND sae.id_institution = i_prof.institution
                       AND sae.id_software = l_software
                       AND rownum = 1;
                EXCEPTION
                    WHEN no_data_found THEN
                        l_alert_exists := 0;
                END;
            
                IF l_alert_exists = 0
                THEN
                    l_sys_alert_event.id_sys_alert    := 15;
                    l_sys_alert_event.id_software     := l_software;
                    l_sys_alert_event.id_institution  := i_prof.institution;
                    l_sys_alert_event.id_episode      := i_episode;
                    l_sys_alert_event.id_record       := l_analysis_result.id_analysis_result;
                    l_sys_alert_event.dt_record       := l_dt_analysis_result;
                    l_sys_alert_event.id_professional := nvl(l_analysis.id_prof_writes, i_prof.id);
                    l_sys_alert_event.replace2        := l_analysis.flg_priority;
                    l_sys_alert_event.id_prof_order   := l_analysis.id_prof_writes;
                
                    --Insere evento na tabela de alertas
                    g_error := 'INSERT INTO SYS_ALERT_EVENT';
                    IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => profissional(l_analysis.id_prof_writes,
                                                                                              i_prof.institution,
                                                                                              l_software),
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            i_flg_type_dest   => 'C',
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                IF l_analysis.id_episode IS NOT NULL
                THEN
                    IF pk_utils.is_number(i_ref_val_min) = pk_lab_tests_constant.g_yes
                    THEN
                        IF instr(TRIM(REPLACE(i_ref_val_min, '.', ',')), ',', 1) = 1
                        THEN
                            l_ref_val_min := to_number('0' || TRIM(REPLACE(i_ref_val_min, '.', ',')),
                                                       pk_lab_tests_constant.g_format_mask,
                                                       l_nls_numeric_param);
                        ELSE
                            l_ref_val_min := to_number(TRIM(REPLACE(i_ref_val_min, '.', ',')),
                                                       pk_lab_tests_constant.g_format_mask,
                                                       l_nls_numeric_param);
                        END IF;
                    END IF;
                
                    IF pk_utils.is_number(i_ref_val_max) = pk_lab_tests_constant.g_yes
                    THEN
                        IF instr(TRIM(REPLACE(i_ref_val_max, '.', ',')), ',', 1) = 1
                        THEN
                            l_ref_val_max := to_number('0' || TRIM(REPLACE(i_ref_val_max, '.', ',')),
                                                       pk_lab_tests_constant.g_format_mask,
                                                       l_nls_numeric_param);
                        ELSE
                            l_ref_val_max := to_number(TRIM(REPLACE(i_ref_val_max, '.', ',')),
                                                       pk_lab_tests_constant.g_format_mask,
                                                       l_nls_numeric_param);
                        END IF;
                    END IF;
                
                    IF pk_utils.is_number(i_result_value_1) = pk_lab_tests_constant.g_yes
                       AND i_result_value_2 IS NULL
                    THEN
                        IF instr(TRIM(REPLACE(i_result_value_1, '.', ',')), ',', 1) = 1
                        THEN
                            l_analysis_result_value := to_number('0' || TRIM(REPLACE(i_result_value_1, '.', ',')),
                                                                 pk_lab_tests_constant.g_format_mask,
                                                                 l_nls_numeric_param);
                        ELSE
                            l_analysis_result_value := to_number(TRIM(REPLACE(i_result_value_1, '.', ',')),
                                                                 pk_lab_tests_constant.g_format_mask,
                                                                 l_nls_numeric_param);
                        END IF;
                    END IF;
                
                    IF (l_ref_val_min IS NOT NULL)
                       AND (l_ref_val_max IS NOT NULL)
                       AND (l_analysis_result_value IS NOT NULL)
                    THEN
                        IF l_analysis_result_value < l_ref_val_min
                           OR l_analysis_result_value > l_ref_val_max
                        THEN
                            BEGIN
                                SELECT 1
                                  INTO l_alert_exists
                                  FROM sys_alert_event sae
                                 WHERE sae.id_sys_alert = 201
                                   AND sae.id_episode = l_analysis.id_episode
                                   AND sae.id_record = l_analysis.id_analysis_result
                                   AND sae.id_institution = i_prof.institution
                                   AND sae.id_software = l_software
                                   AND rownum = 1;
                            EXCEPTION
                                WHEN no_data_found THEN
                                    l_alert_exists := 0;
                            END;
                        
                            IF l_alert_exists = 0
                            THEN
                            
                                l_sys_alert_event.id_sys_alert    := 201;
                                l_sys_alert_event.id_software     := i_prof.software;
                                l_sys_alert_event.id_institution  := i_prof.institution;
                                l_sys_alert_event.id_episode      := i_episode;
                                l_sys_alert_event.id_record       := l_analysis.id_analysis_result;
                                l_sys_alert_event.dt_record       := l_dt_analysis_result;
                                l_sys_alert_event.id_professional := nvl(l_analysis.id_prof_writes, i_prof.id);
                                l_sys_alert_event.replace1        := 'ANALYSIS.CODE_ANALYSIS.' ||
                                                                     l_analysis.id_analysis;
                                l_sys_alert_event.id_prof_order   := l_analysis.id_prof_writes;
                            
                                g_error := 'INSERT INTO SYS_ALERT_EVENT REF OUT';
                                IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                                        i_prof            => i_prof,
                                                                        i_sys_alert_event => l_sys_alert_event,
                                                                        i_flg_type_dest   => 'C',
                                                                        o_error           => o_error)
                                THEN
                                    RAISE g_other_exception;
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                END IF;
                g_error := 'PK_LAB_TESTS_API_DB.SET_LAB_TEST_GRID_TASK';
                IF NOT pk_lab_tests_api_db.set_lab_test_grid_task(i_lang             => i_lang,
                                                                  i_prof             => i_prof,
                                                                  i_patient          => l_patient.id_patient,
                                                                  i_episode          => l_analysis.id_episode,
                                                                  i_analysis_req     => l_analysis_req,
                                                                  i_analysis_req_det => l_analysis_req_det,
                                                                  o_error            => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
        g_error := 'CALL TO PK_VISIT.SET_FIRST_OBS';
        IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                      i_id_episode          => i_episode,
                                      i_pat                 => NULL,
                                      i_prof                => i_prof,
                                      i_prof_cat_type       => NULL,
                                      i_dt_last_interaction => g_sysdate_tstz,
                                      i_dt_first_obs        => g_sysdate_tstz,
                                      o_error               => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'Missing parametrizations/values. i_analysis_result_par = ' || i_analysis_result_par;
        SELECT arp.id_analysis_result_par || '|' ||
               decode(arp.dt_cancel, NULL, pk_lab_tests_constant.g_active, pk_lab_tests_constant.g_analysis_cancel) || '|' ||
               nvl(TRIM(dbms_lob.substr(arp.desc_analysis_result, 3800)), arp.analysis_result_value_1) || '|' ||
               decode(arp.id_unit_measure,
                      NULL,
                      arp.desc_unit_measure,
                      pk_translation.get_translation(i_lang, 'UNIT_MEASURE.CODE_UNIT_MEASURE.' || arp.id_unit_measure)) || '|' ||
               decode(pk_utils.is_number(dbms_lob.substr(arp.desc_analysis_result, 3800)),
                      pk_lab_tests_constant.g_no,
                      decode(to_char(dbms_lob.substr(arp.desc_analysis_result, 3800)),
                             ad.value,
                             ad.icon,
                             'ExaminationsResultIcon'),
                      'X') || '|' ||
               decode(arp.notes_cancel, '', pk_lab_tests_constant.g_no, pk_lab_tests_constant.g_yes) || '|' ||
               arp.id_unit_measure VALUE
          INTO o_result
          FROM analysis_result_par arp, analysis_desc ad
         WHERE arp.id_analysis_result_par = i_analysis_result_par
           AND arp.id_analysis_desc = ad.id_analysis_desc(+)
           AND to_char(dbms_lob.substr(arp.desc_analysis_result, 3800)) = ad.value(+);
    
        IF i_doc_external.count > 0
        THEN
            FOR i IN 1 .. i_doc_external.count
            LOOP
                IF i_doc_external.exists(i)
                   AND i_doc_external(i) IS NOT NULL
                THEN
                    IF i_doc_type.exists(i)
                       AND i_doc_type IS NOT NULL
                    THEN
                        l_doc_type := nvl(i_doc_type(i), 1044);
                    ELSE
                        --By default, documentation type is 'Lab test result'
                        l_doc_type := 1044;
                    END IF;
                
                    IF i_doc_ori_type.exists(i)
                       AND i_doc_ori_type(i) IS NOT NULL
                    THEN
                        l_doc_ori_type := i_doc_ori_type(i);
                    ELSE
                        --By default, doc_ori_type is 'Lab tests'
                        l_doc_ori_type := 15;
                    END IF;
                
                    IF i_title.exists(i)
                       AND i_title(i) IS NOT NULL
                    THEN
                        l_title := i_title(i);
                    ELSE
                        l_title := NULL;
                    END IF;
                
                    SELECT COUNT(*)
                      INTO l_count_analysis_media_archive
                      FROM analysis_media_archive ama
                     WHERE ama.id_doc_external = i_doc_external(i)
                       AND ama.flg_status = pk_alert_constant.g_active;
                
                    IF l_count_analysis_media_archive > 0
                    THEN
                        g_error := 'CALL TO PK_DOC.UPDATE_DOC__INTERNAL';
                        IF NOT pk_doc.update_doc_internal(i_lang              => i_lang,
                                                          i_prof              => i_prof,
                                                          i_id_doc            => i_doc_external(i),
                                                          i_doc_type          => l_doc_type,
                                                          i_desc_doc_type     => NULL,
                                                          i_num_doc           => NULL,
                                                          i_dt_doc            => l_dt_analysis_result,
                                                          i_dt_expire         => NULL,
                                                          i_orig_dest         => 1,
                                                          i_desc_ori_dest     => NULL,
                                                          i_orig_type         => l_doc_ori_type,
                                                          i_desc_ori_doc_type => NULL,
                                                          i_notes             => NULL,
                                                          i_sent_by           => NULL,
                                                          i_received          => NULL,
                                                          i_original          => 4,
                                                          i_desc_original     => NULL,
                                                          i_btn               => NULL,
                                                          i_title             => l_title,
                                                          i_prof_perf_by      => i_prof.id,
                                                          i_desc_perf_by      => pk_prof_utils.get_name_signature(i_lang,
                                                                                                                  i_prof,
                                                                                                                  i_prof.id),
                                                          o_id_doc_external   => l_id_doc_external_updated,
                                                          o_error             => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    
                    ELSE
                    
                        g_error := 'CALL TO PK_DOC.CREATE_SAVEDOC_INTERNAL';
                        IF NOT pk_doc.create_savedoc_internal(i_id_doc             => i_doc_external(i),
                                                              i_lang               => i_lang,
                                                              i_prof               => i_prof,
                                                              i_patient            => l_patient.id_patient,
                                                              i_episode            => i_episode,
                                                              i_ext_req            => NULL,
                                                              i_doc_type           => l_doc_type,
                                                              i_desc_doc_type      => NULL,
                                                              i_num_doc            => NULL,
                                                              i_dt_doc             => l_dt_analysis_result,
                                                              i_dt_expire          => NULL,
                                                              i_dest               => 1,
                                                              i_desc_dest          => NULL,
                                                              i_ori_doc_type       => l_doc_ori_type,
                                                              i_desc_ori_doc_type  => NULL,
                                                              i_original           => 4,
                                                              i_desc_original      => NULL,
                                                              i_btn                => NULL,
                                                              i_title              => l_title,
                                                              i_flg_sent_by        => NULL,
                                                              i_flg_received       => NULL,
                                                              i_prof_perf_by       => i_prof.id,
                                                              i_desc_perf_by       => pk_prof_utils.get_name_signature(i_lang,
                                                                                                                       i_prof,
                                                                                                                       i_prof.id),
                                                              i_author             => NULL,
                                                              i_specialty          => NULL,
                                                              i_doc_language       => NULL,
                                                              i_flg_publish        => NULL,
                                                              i_conf_code          => table_varchar(),
                                                              i_desc_conf_code     => table_varchar(),
                                                              i_code_coding_schema => table_varchar(),
                                                              i_conf_code_set      => table_varchar(),
                                                              i_desc_conf_code_set => table_varchar(),
                                                              o_error              => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    
                        l_rows_out := NULL;
                    
                        ts_analysis_media_archive.ins(id_analysis_req_det_in    => l_analysis_req_det,
                                                      id_analysis_result_in     => l_analysis_result.id_analysis_result,
                                                      id_analysis_result_par_in => i_analysis_result_par,
                                                      id_doc_external_in        => i_doc_external(i),
                                                      flg_type_in               => pk_lab_tests_constant.g_media_archive_analysis_res,
                                                      flg_status_in             => pk_lab_tests_constant.g_active,
                                                      id_prof_last_update_in    => i_prof.id,
                                                      dt_last_update_tstz_in    => g_sysdate_tstz,
                                                      rows_out                  => l_rows_out);
                    
                    END IF;
                    l_count_analysis_media_archive := 0;
                END IF;
            END LOOP;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'UPDATE_LAB_TEST_RESULT',
                                              o_error);
            RETURN FALSE;
    END update_lab_test_result;

    FUNCTION update_lab_test_date
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_analysis_req_det IN table_number,
        i_dt_begin         IN table_varchar,
        i_notes_scheduler  IN table_varchar,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_analysis(l_analysis_req_det NUMBER) IS
            SELECT ard.id_analysis_req,
                   ard.id_analysis,
                   ar.id_patient,
                   nvl(ar.id_episode, ar.id_episode_origin) id_episode,
                   ard.dt_target_tstz dt_begin_tstz
              FROM analysis_req_det ard, analysis_req ar
             WHERE ard.id_analysis_req_det = l_analysis_req_det
               AND ard.id_analysis_req = ar.id_analysis_req;
    
        l_analysis c_analysis%ROWTYPE;
        l_dt_begin TIMESTAMP WITH LOCAL TIME ZONE;
    
        l_rows_out_req table_varchar := table_varchar();
        l_rows_out_det table_varchar := table_varchar();
    
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_HISTORY';
        IF NOT pk_lab_tests_core.set_lab_test_history(i_lang             => i_lang,
                                                      i_prof             => i_prof,
                                                      i_analysis_req     => NULL,
                                                      i_analysis_req_det => i_analysis_req_det,
                                                      o_error            => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        FOR i IN 1 .. i_analysis_req_det.count
        LOOP
        
            l_dt_begin := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin(i), NULL);
        
            OPEN c_analysis(i_analysis_req_det(i));
            FETCH c_analysis
                INTO l_analysis;
            CLOSE c_analysis;
        
            IF l_dt_begin > g_sysdate_tstz
            THEN
                g_error := 'SET NEW DATE';
                ts_analysis_req.upd(id_analysis_req_in => l_analysis.id_analysis_req,
                                    flg_status_in      => pk_lab_tests_constant.g_analysis_pending,
                                    rows_out           => l_rows_out_req);
            
                g_error := 'SET NEW DATE';
                ts_analysis_req_det.upd(id_analysis_req_det_in => i_analysis_req_det(i),
                                        flg_status_in          => pk_lab_tests_constant.g_analysis_pending,
                                        dt_target_tstz_in      => l_dt_begin,
                                        notes_scheduler_in     => i_notes_scheduler(i),
                                        rows_out               => l_rows_out_det);
            
            ELSE
                g_error := 'SET NEW DATE';
                ts_analysis_req_det.upd(id_analysis_req_det_in => i_analysis_req_det(i),
                                        dt_target_tstz_in      => l_dt_begin,
                                        notes_scheduler_in     => i_notes_scheduler(i),
                                        rows_out               => l_rows_out_det);
            END IF;
        
            g_error := 'PK_LAB_TESTS_API_DB.SET_LAB_TEST_GRID_TASK';
            IF NOT pk_lab_tests_api_db.set_lab_test_grid_task(i_lang             => i_lang,
                                                              i_prof             => i_prof,
                                                              i_patient          => l_analysis.id_patient,
                                                              i_episode          => l_analysis.id_episode,
                                                              i_analysis_req     => l_analysis.id_analysis_req,
                                                              i_analysis_req_det => i_analysis_req_det(i),
                                                              o_error            => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END LOOP;
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'ANALYSIS_REQ',
                                      i_rowids     => l_rows_out_req,
                                      o_error      => o_error);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'ANALYSIS_REQ_DET',
                                      i_rowids     => l_rows_out_det,
                                      o_error      => o_error);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'UPDATE_LAB_TEST_DATE',
                                              o_error);
            RETURN FALSE;
    END update_lab_test_date;

    FUNCTION update_lab_test_blood_group
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_patient         IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_analysis_result IN analysis_result.id_analysis_result%TYPE,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_result table_varchar;
    
        l_flg_blood_rhesus VARCHAR2(10 CHAR) := NULL;
        l_flg_blood_group  VARCHAR2(10 CHAR) := NULL;
    
    BEGIN
    
        SELECT nvl(pk_translation.get_translation(i_lang, 'ANALYSIS_DESC.CODE_ANALYSIS_DESC.' || aresp.id_analysis_desc),
                   pk_string_utils.clob_to_varchar2(aresp.desc_analysis_result, 3800)) RESULT
          BULK COLLECT
          INTO l_result
          FROM analysis_result_par aresp, analysis_result ar
         WHERE aresp.id_analysis_result = ar.id_analysis_result
           AND ar.id_analysis_result = i_analysis_result
           AND i_analysis_result IS NOT NULL
           AND EXISTS (SELECT 1
                  FROM analysis_instit_soft ais
                 WHERE ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                   AND ais.flg_category_type = 'BT'
                   AND ais.id_software = i_prof.software
                   AND ais.id_institution = i_prof.institution
                   AND ais.id_analysis = ar.id_analysis
                   AND ais.id_sample_type = ar.id_sample_type);
    
        FOR i IN 1 .. l_result.count
        LOOP
            IF l_flg_blood_group IS NULL
            THEN
                CASE
                    WHEN upper(l_result(i)) LIKE '%A%B%' THEN
                        l_flg_blood_group := 'AB';
                    WHEN upper(l_result(i)) LIKE '%A%' THEN
                        l_flg_blood_group := 'A';
                    WHEN upper(l_result(i)) LIKE '%B%' THEN
                        l_flg_blood_group := 'B';
                    WHEN upper(l_result(i)) LIKE '%O%' THEN
                        l_flg_blood_group := 'O';
                    ELSE
                        l_flg_blood_group := NULL;
                END CASE;
            END IF;
        
            IF l_flg_blood_rhesus IS NULL
            THEN
                CASE
                    WHEN upper(l_result(i)) LIKE '%RH%+%' THEN
                        l_flg_blood_rhesus := 'P';
                    WHEN upper(l_result(i)) LIKE '%RH%-%' THEN
                        l_flg_blood_rhesus := 'N';
                    ELSE
                        l_flg_blood_rhesus := NULL;
                END CASE;
            END IF;
        END LOOP;
    
        IF l_flg_blood_rhesus IS NOT NULL
           AND l_flg_blood_group IS NOT NULL
        THEN
            g_error := 'UPDATE PAT_BLOOD_GROUP';
            UPDATE pat_blood_group pbg
               SET pbg.flg_blood_group    = l_flg_blood_group,
                   pbg.flg_blood_rhesus   = l_flg_blood_rhesus,
                   pbg.id_analysis_result = i_analysis_result
             WHERE pbg.id_patient = i_patient
               AND pbg.flg_blood_group IS NULL
               AND pbg.flg_blood_rhesus IS NULL;
        
            IF SQL%ROWCOUNT = 0
            THEN
                --if there was no update, insert the new result
                g_error := 'PK_PATIENT.SET_PAT_BLOOD';
                IF NOT pk_patient.set_pat_blood_int(i_lang            => i_lang,
                                                    i_epis            => i_episode,
                                                    i_id_pat          => i_patient,
                                                    i_flg_group       => l_flg_blood_group,
                                                    i_flg_rh          => l_flg_blood_rhesus,
                                                    i_desc_other      => NULL,
                                                    i_prof            => i_prof,
                                                    i_prof_cat_type   => pk_tools.get_prof_cat(i_prof),
                                                    i_analysis_result => i_analysis_result,
                                                    o_error           => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'UPDATE_LAB_TEST_BLOOD_GROUP',
                                              o_error);
            RETURN FALSE;
    END update_lab_test_blood_group;

    FUNCTION cancel_lab_test_order
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_analysis_req  IN table_number,
        i_cancel_reason IN analysis_req.id_cancel_reason%TYPE,
        i_cancel_notes  IN analysis_req.notes_cancel%TYPE,
        i_prof_order    IN co_sign.id_prof_ordered_by%TYPE,
        i_dt_order      IN VARCHAR2,
        i_order_type    IN co_sign.id_order_type%TYPE,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_analysis_req_det table_number;
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        FOR i IN 1 .. i_analysis_req.count
        LOOP
            g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_HISTORY';
            IF NOT pk_lab_tests_core.set_lab_test_history(i_lang             => i_lang,
                                                          i_prof             => i_prof,
                                                          i_analysis_req     => i_analysis_req(i),
                                                          i_analysis_req_det => table_number(NULL),
                                                          o_error            => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            SELECT ard.id_analysis_req_det
              BULK COLLECT
              INTO l_analysis_req_det
              FROM analysis_req_det ard
             WHERE ard.id_analysis_req = i_analysis_req(i)
               AND ard.flg_status NOT IN (pk_lab_tests_constant.g_analysis_cancel,
                                          pk_lab_tests_constant.g_analysis_partial,
                                          pk_lab_tests_constant.g_analysis_result);
        
            g_error := 'CALL PK_LAB_TESTS_CORE.CANCEL_LAB_TEST_REQUEST';
            IF NOT pk_lab_tests_core.cancel_lab_test_request(i_lang             => i_lang,
                                                             i_prof             => i_prof,
                                                             i_analysis_req_det => l_analysis_req_det,
                                                             i_dt_cancel        => NULL,
                                                             i_cancel_reason    => i_cancel_reason,
                                                             i_cancel_notes     => i_cancel_notes,
                                                             i_prof_order       => i_prof_order,
                                                             i_dt_order         => i_dt_order,
                                                             i_order_type       => i_order_type,
                                                             i_flg_schedule     => pk_lab_tests_constant.g_yes,
                                                             i_transaction_id   => NULL,
                                                             o_error            => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CANCEL_LAB_TEST_ORDER',
                                              o_error);
            RETURN FALSE;
    END cancel_lab_test_order;

    FUNCTION cancel_lab_test_request
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_analysis_req_det IN table_number,
        i_dt_cancel        IN VARCHAR2,
        i_cancel_reason    IN analysis_req_det.id_cancel_reason%TYPE,
        i_cancel_notes     IN analysis_req_det.notes_cancel%TYPE,
        i_prof_order       IN co_sign.id_prof_ordered_by%TYPE,
        i_dt_order         IN VARCHAR2,
        i_order_type       IN co_sign.id_order_type%TYPE,
        i_flg_schedule     IN VARCHAR2 DEFAULT pk_lab_tests_constant.g_yes,
        i_transaction_id   IN VARCHAR2 DEFAULT NULL,
        i_flg_cancel_event IN VARCHAR2 DEFAULT 'Y',
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_analysis_req(i_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE) IS
            SELECT ard.id_analysis_req,
                   ar.dt_req_tstz dt_req,
                   ard.flg_time_harvest,
                   ard.flg_status,
                   ard.flg_col_inst,
                   ar.id_prof_writes,
                   ard.id_movement,
                   ard.id_co_sign_order,
                   ar.id_patient,
                   nvl(ar.id_episode, ar.id_episode_origin) id_episode
              FROM analysis_req_det ard, analysis_req ar
             WHERE ard.id_analysis_req_det = i_analysis_req_det
               AND ar.id_analysis_req = ard.id_analysis_req;
    
        CURSOR c_req_det_harvest(i_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE) IS
            SELECT ah.id_harvest
              FROM analysis_req_det ard, analysis_harvest ah
             WHERE ard.id_analysis_req_det = i_analysis_req_det
               AND ah.id_analysis_req_det(+) = ard.id_analysis_req_det
               AND (ah.flg_status != pk_lab_tests_constant.g_harvest_inactive OR ah.flg_status IS NULL);
    
        CURSOR c_harvest_count(i_id_harvest IN analysis_harvest.id_harvest%TYPE) IS
            SELECT COUNT(1)
              FROM analysis_harvest ah, harvest h
             WHERE ah.id_harvest = i_id_harvest
               AND ah.id_harvest = h.id_harvest
               AND (h.flg_status IN (pk_lab_tests_constant.g_harvest_waiting,
                                     pk_lab_tests_constant.g_harvest_pending,
                                     pk_lab_tests_constant.g_harvest_suspended) OR
                   (h.flg_status = pk_lab_tests_constant.g_harvest_collected AND
                   pk_sysconfig.get_config('LABTEST_EXECUTION_CANCEL', i_prof) = pk_lab_tests_constant.g_yes));
    
        CURSOR c_harvest(i_id_harvest IN analysis_harvest.id_harvest%TYPE) IS
            SELECT h.*
              FROM harvest h
             WHERE h.id_harvest = i_id_harvest
               AND (h.flg_status IN (pk_lab_tests_constant.g_harvest_waiting,
                                     pk_lab_tests_constant.g_harvest_pending,
                                     pk_lab_tests_constant.g_harvest_suspended) OR
                   (h.flg_status = pk_lab_tests_constant.g_harvest_collected AND
                   pk_sysconfig.get_config('LABTEST_EXECUTION_CANCEL', i_prof) = pk_lab_tests_constant.g_yes));
    
        CURSOR c_episode_analysis(l_episode IN episode.id_episode%TYPE) IS
            SELECT 'X'
              FROM analysis_req ar, analysis_req_det ard
             WHERE ar.id_episode = l_episode
               AND ar.id_analysis_req = ard.id_analysis_req
               AND ard.flg_status NOT IN (pk_lab_tests_constant.g_analysis_result,
                                          pk_lab_tests_constant.g_analysis_read,
                                          pk_lab_tests_constant.g_analysis_cancel);
    
        CURSOR c_episode_type(l_episode IN episode.id_episode%TYPE) IS
            SELECT e.id_epis_type, e.id_visit
              FROM episode e
             WHERE e.id_episode = l_episode;
    
        l_analysis_req c_analysis_req%ROWTYPE;
    
        l_char  VARCHAR2(1);
        l_count NUMBER := 0;
    
        l_dt_cancel       TIMESTAMP WITH LOCAL TIME ZONE;
        l_cancel_notes    analysis_req_det.notes_cancel%TYPE;
        l_id_co_sign      co_sign.id_co_sign%TYPE;
        l_id_co_sign_hist co_sign_hist.id_co_sign_hist%TYPE;
    
        l_harvest                   harvest%ROWTYPE;
        l_analysis_harvest          analysis_harvest%ROWTYPE;
        l_analysis_harvest_in       table_number := table_number();
        l_analysis_harvest_array    table_table_number := table_table_number();
        l_collection_method         table_varchar := table_varchar();
        l_collection_room           table_varchar := table_varchar();
        l_lab                       table_number := table_number();
        l_exec_institution          table_number := table_number();
        l_sample_recipient          table_number := table_number();
        l_num_recipient             table_number := table_number();
        l_collection_time           table_varchar := table_varchar();
        l_collection_amount         table_varchar := table_varchar();
        l_collection_transportation table_varchar := table_varchar();
    
        l_print_list_jobs        table_number;
        l_print_list_jobs_out    table_number;
        l_print_job_context_data print_list_job.context_data%TYPE;
        l_print_args             table_varchar;
        l_json                   json_object_t;
        l_context_data           VARCHAR2(1000 CHAR);
        l_json_analysis_req_det  VARCHAR2(1000 CHAR);
    
        l_sys_alert_event sys_alert_event%ROWTYPE;
    
        l_episode_analysis c_episode_analysis%ROWTYPE;
        l_episode_type     c_episode_type%ROWTYPE;
    
        l_analysis_order_collected table_number;
    
        l_transaction_id VARCHAR2(1000 CHAR);
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        FOR i IN 1 .. i_analysis_req_det.count
        LOOP
            g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_HISTORY';
            IF NOT pk_lab_tests_core.set_lab_test_history(i_lang             => i_lang,
                                                          i_prof             => i_prof,
                                                          i_analysis_req     => NULL,
                                                          i_analysis_req_det => table_number(i_analysis_req_det(i)),
                                                          o_error            => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            g_error := 'OPEN C_STATUS';
            OPEN c_analysis_req(i_analysis_req_det(i));
            FETCH c_analysis_req
                INTO l_analysis_req;
            CLOSE c_analysis_req;
        
            IF i_dt_cancel IS NOT NULL
            THEN
                IF i_dt_cancel IS NULL
                THEN
                    l_dt_cancel := g_sysdate_tstz;
                ELSE
                    l_dt_cancel := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_cancel, NULL);
                END IF;
            ELSE
                l_dt_cancel := g_sysdate_tstz;
            END IF;
        
            -- New validation for ADW
            IF l_dt_cancel < l_analysis_req.dt_req
            THEN
                l_dt_cancel := l_analysis_req.dt_req;
            END IF;
        
            --IF no notes are provided and the cancel reason 
            --is the patient death then, fullfills the cancel notes.  
            IF i_cancel_notes IS NULL
               AND i_cancel_reason = pk_cancel_reason.c_reason_patient_death
            THEN
                l_cancel_notes := pk_message.get_message(i_lang, i_prof, pk_death_registry.c_code_msg_death);
            ELSE
                l_cancel_notes := i_cancel_notes;
            END IF;
        
            -- Só pode cancelar detalhe se ñ estiver já cancelado, ou tiver resultados (lidos ou ñ)
            IF l_analysis_req.flg_status NOT IN
               (pk_lab_tests_constant.g_analysis_read,
                pk_lab_tests_constant.g_analysis_result,
                pk_lab_tests_constant.g_analysis_cancel)
            THEN
                IF l_analysis_req.id_co_sign_order IS NOT NULL
                THEN
                    g_error := 'CALL PK_CO_SIGN_API.SET_TASK_OUTDATED';
                    IF NOT pk_co_sign_api.set_task_outdated(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_episode         => l_analysis_req.id_episode,
                                                            i_id_co_sign      => NULL,
                                                            i_id_co_sign_hist => l_analysis_req.id_co_sign_order,
                                                            i_dt_update       => g_sysdate_tstz,
                                                            o_id_co_sign_hist => l_id_co_sign_hist,
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                IF i_order_type IS NOT NULL
                THEN
                    g_error := 'CALL PK_CO_SIGN_API.SET_PENDING_CO_SIGN_TASK';
                    IF NOT pk_co_sign_api.set_pending_co_sign_task(i_lang                   => i_lang,
                                                                   i_prof                   => i_prof,
                                                                   i_episode                => l_analysis_req.id_episode,
                                                                   i_id_task_type           => pk_alert_constant.g_task_lab_tests,
                                                                   i_cosign_def_action_type => pk_co_sign_api.g_cosign_action_def_cancel,
                                                                   i_id_task                => i_analysis_req_det(i),
                                                                   i_id_task_group          => i_analysis_req_det(i),
                                                                   i_id_order_type          => i_order_type,
                                                                   i_id_prof_created        => i_prof.id,
                                                                   i_id_prof_ordered_by     => i_prof_order,
                                                                   i_dt_created             => g_sysdate_tstz,
                                                                   i_dt_ordered_by          => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                             i_prof,
                                                                                                                             i_dt_order,
                                                                                                                             NULL),
                                                                   o_id_co_sign             => l_id_co_sign,
                                                                   o_id_co_sign_hist        => l_id_co_sign_hist,
                                                                   o_error                  => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                g_error := 'UPDATE ANALYSIS_REQ_DET';
                ts_analysis_req_det.upd(id_analysis_req_det_in => i_analysis_req_det(i),
                                        flg_status_in          => pk_lab_tests_constant.g_analysis_cancel,
                                        id_prof_cancel_in      => i_prof.id,
                                        notes_cancel_in        => l_cancel_notes,
                                        notes_cancel_nin       => FALSE,
                                        dt_cancel_tstz_in      => l_dt_cancel,
                                        dt_cancel_tstz_nin     => FALSE,
                                        id_cancel_reason_in    => i_cancel_reason,
                                        id_cancel_reason_nin   => FALSE,
                                        id_co_sign_cancel_in   => CASE
                                                                      WHEN i_order_type IS NOT NULL THEN
                                                                       l_id_co_sign_hist
                                                                      ELSE
                                                                       NULL
                                                                  END,
                                        id_prof_last_update_in => i_prof.id,
                                        dt_last_update_tstz_in => g_sysdate_tstz,
                                        rows_out               => l_rows_out);
            
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'ANALYSIS_REQ_DET',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
            
                g_error := 'CALL PK_LAB_TESTS_EXTERNAL_API_DB.UPDATE_TDE_TASK_STATE';
                IF NOT pk_lab_tests_external_api_db.update_tde_task_state(i_lang         => i_lang,
                                                                          i_prof         => i_prof,
                                                                          i_lab_test_req => i_analysis_req_det(i),
                                                                          i_flg_action   => pk_lab_tests_constant.g_analysis_cancel,
                                                                          i_reason       => i_cancel_reason,
                                                                          i_reason_notes => l_cancel_notes,
                                                                          o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                -- inserir em log de estados
                IF l_analysis_req.id_episode IS NOT NULL
                THEN
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => l_analysis_req.id_episode,
                                            i_flg_status => pk_lab_tests_constant.g_analysis_cancel,
                                            i_id_record  => i_analysis_req_det(i),
                                            i_flg_type   => pk_lab_tests_constant.g_analysis_type_det,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                -- Ñ existem outros detalhes ñ cancelados desta req,
                -- associados ao mov da q se pretende cancelar
                IF l_analysis_req.id_movement IS NOT NULL
                THEN
                    BEGIN
                        SELECT 'X'
                          INTO l_char
                          FROM analysis_req_det ard
                         WHERE ard.id_analysis_req_det != i_analysis_req_det(i)
                           AND ard.id_movement = l_analysis_req.id_movement
                           AND ard.flg_status != pk_lab_tests_constant.g_analysis_cancel
                           AND rownum = 1;
                    EXCEPTION
                        WHEN no_data_found THEN
                        
                            g_error := 'CALL PK_MOVEMENT.CANCEL_MOVEMENT_REQUEST';
                            IF NOT pk_movement.cancel_movement_request(i_lang     => i_lang,
                                                                       i_prof     => i_prof,
                                                                       i_movement => l_analysis_req.id_movement,
                                                                       i_notes    => l_cancel_notes,
                                                                       o_error    => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                    END;
                END IF;
            
                BEGIN
                    SELECT 'X'
                      INTO l_char
                      FROM analysis_req_det
                     WHERE id_analysis_req_det != i_analysis_req_det(i)
                       AND id_analysis_req = l_analysis_req.id_analysis_req
                       AND flg_status != pk_lab_tests_constant.g_analysis_cancel
                       AND rownum = 1;
                
                    -- Pesquisa a existência de outros detalhes do mm cabeçalho, ñ concluídos
                    BEGIN
                        SELECT 'X'
                          INTO l_char
                          FROM analysis_req_det
                         WHERE id_analysis_req_det != i_analysis_req_det(i)
                           AND id_analysis_req = l_analysis_req.id_analysis_req
                           AND flg_status NOT IN
                               (pk_lab_tests_constant.g_analysis_result, pk_lab_tests_constant.g_analysis_read)
                           AND rownum = 1;
                    EXCEPTION
                        WHEN no_data_found THEN
                        
                            l_rows_out := NULL;
                        
                            -- Se ñ há + detalhes ñ finalizados, o cabeçalho fica concluído
                            g_error := 'UPDATE ANALYSIS_REQ(2)';
                            ts_analysis_req.upd(id_analysis_req_in => l_analysis_req.id_analysis_req,
                                                flg_status_in      => pk_lab_tests_constant.g_analysis_result,
                                                rows_out           => l_rows_out);
                        
                            t_data_gov_mnt.process_update(i_lang         => i_lang,
                                                          i_prof         => i_prof,
                                                          i_table_name   => 'ANALYSIS_REQ',
                                                          i_list_columns => table_varchar('FLG_STATUS'),
                                                          i_rowids       => l_rows_out,
                                                          o_error        => o_error);
                        
                            IF l_analysis_req.id_analysis_req IS NOT NULL
                            THEN
                                -- inserir em log de estados
                                IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                                        i_prof       => i_prof,
                                                        i_id_episode => l_analysis_req.id_episode,
                                                        i_flg_status => pk_lab_tests_constant.g_analysis_result,
                                                        i_id_record  => l_analysis_req.id_analysis_req,
                                                        i_flg_type   => pk_lab_tests_constant.g_analysis_type_req,
                                                        o_error      => o_error)
                                THEN
                                    RAISE g_other_exception;
                                END IF;
                            END IF;
                    END;
                EXCEPTION
                    WHEN no_data_found THEN
                        l_rows_out := NULL;
                    
                        -- Se ñ há + detalhes ñ cancelados, pode-se cancelar o cabeçalho
                        g_error := 'UPDATE ANALYSIS_REQ(1)';
                        ts_analysis_req.upd(flg_status_in     => pk_lab_tests_constant.g_analysis_cancel,
                                            id_prof_cancel_in => i_prof.id,
                                            dt_cancel_tstz_in => l_dt_cancel,
                                            where_in          => 'id_analysis_req = ' || l_analysis_req.id_analysis_req ||
                                                                 ' AND flg_status != ''' ||
                                                                 pk_lab_tests_constant.g_analysis_cancel || '''',
                                            rows_out          => l_rows_out);
                    
                        t_data_gov_mnt.process_update(i_lang         => i_lang,
                                                      i_prof         => i_prof,
                                                      i_table_name   => 'ANALYSIS_REQ',
                                                      i_list_columns => table_varchar('FLG_STATUS',
                                                                                      'ID_PROF_CANCEL',
                                                                                      'DT_CANCEL_TSTZ'),
                                                      i_rowids       => l_rows_out,
                                                      o_error        => o_error);
                    
                        -- inserir em log de estados
                        IF l_analysis_req.id_analysis_req IS NOT NULL
                           AND l_analysis_req.id_episode IS NOT NULL
                        THEN
                            IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                                    i_prof       => i_prof,
                                                    i_id_episode => l_analysis_req.id_episode,
                                                    i_flg_status => pk_lab_tests_constant.g_analysis_cancel,
                                                    i_id_record  => l_analysis_req.id_analysis_req,
                                                    i_flg_type   => pk_lab_tests_constant.g_analysis_type_req,
                                                    o_error      => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        END IF;
                END;
            
                FOR rec IN c_req_det_harvest(i_analysis_req_det(i))
                LOOP
                    -- Pesquisa a existência de outros detalhes do mm cabeçalho, ñ cancelados, associados
                    -- à mesma colheita
                    g_error := 'OPEN C_HARVEST_COUNT';
                    OPEN c_harvest_count(rec.id_harvest);
                    FETCH c_harvest_count
                        INTO l_count;
                    CLOSE c_harvest_count;
                
                    l_analysis_harvest_in       := table_number();
                    l_analysis_harvest_array    := table_table_number();
                    l_collection_method         := table_varchar();
                    l_collection_room           := table_varchar();
                    l_lab                       := table_number();
                    l_exec_institution          := table_number();
                    l_sample_recipient          := table_number();
                    l_num_recipient             := table_number();
                    l_collection_time           := table_varchar();
                    l_collection_amount         := table_varchar();
                    l_collection_transportation := table_varchar();
                
                    IF l_count > 1
                    THEN
                        SELECT ah.*
                          INTO l_analysis_harvest
                          FROM analysis_harvest ah
                         WHERE ah.id_analysis_req_det = i_analysis_req_det(i)
                           AND ah.id_harvest = rec.id_harvest
                           AND ah.flg_status = pk_lab_tests_constant.g_active;
                    
                        l_analysis_harvest_array.extend;
                        l_analysis_harvest_array(1) := table_number();
                        l_analysis_harvest_array(1).extend;
                        l_analysis_harvest_array(1)(1) := l_analysis_harvest.id_analysis_harvest;
                    
                        g_error := 'OPEN C_HARVEST 1';
                        OPEN c_harvest(rec.id_harvest);
                        FETCH c_harvest
                            INTO l_harvest;
                        g_found := c_harvest%FOUND;
                        CLOSE c_harvest;
                    
                        l_collection_method.extend;
                        l_collection_method(1) := l_harvest.flg_collection_method;
                    
                        l_collection_room.extend;
                        l_collection_room(1) := l_harvest.id_room_harvest;
                    
                        l_lab.extend;
                        l_lab(1) := l_harvest.id_room_receive_tube;
                    
                        l_exec_institution.extend;
                        l_exec_institution(1) := l_harvest.id_institution;
                    
                        l_sample_recipient.extend;
                        l_sample_recipient(1) := l_analysis_harvest.id_sample_recipient;
                    
                        l_num_recipient.extend;
                        l_num_recipient(1) := l_analysis_harvest.num_recipient;
                    
                        l_collection_time.extend;
                        l_collection_time(1) := l_harvest.dt_harvest_tstz;
                    
                        l_collection_amount.extend;
                        l_collection_amount(1) := l_harvest.amount;
                    
                        l_collection_transportation.extend;
                        l_collection_transportation(1) := l_harvest.flg_mov_tube;
                    
                        SELECT ah.id_analysis_harvest
                          BULK COLLECT
                          INTO l_analysis_harvest_in
                          FROM analysis_harvest ah
                         WHERE ah.id_harvest = rec.id_harvest
                           AND ah.id_analysis_req_det != i_analysis_req_det(i);
                    
                        l_analysis_harvest_array.extend;
                        l_analysis_harvest_array(2) := table_number();
                        FOR i IN 1 .. l_analysis_harvest_in.count
                        LOOP
                            l_analysis_harvest_array(2).extend;
                            l_analysis_harvest_array(2)(i) := l_analysis_harvest_in(i);
                        END LOOP;
                    
                        SELECT ah.*
                          INTO l_analysis_harvest
                          FROM analysis_harvest ah
                         WHERE ah.id_harvest = rec.id_harvest
                           AND ah.id_analysis_req_det != i_analysis_req_det(i)
                           AND rownum = 1;
                    
                        g_error := 'OPEN C_HARVEST 2';
                        OPEN c_harvest(rec.id_harvest);
                        FETCH c_harvest
                            INTO l_harvest;
                        g_found := c_harvest%FOUND;
                        CLOSE c_harvest;
                    
                        l_collection_method.extend;
                        l_collection_method(2) := l_harvest.flg_collection_method;
                    
                        l_collection_room.extend;
                        l_collection_room(2) := l_harvest.id_room_harvest;
                    
                        l_lab.extend;
                        l_lab(2) := l_harvest.id_room_receive_tube;
                    
                        l_exec_institution.extend;
                        l_exec_institution(2) := l_harvest.id_institution;
                    
                        l_sample_recipient.extend;
                        l_sample_recipient(2) := l_analysis_harvest.id_sample_recipient;
                    
                        l_num_recipient.extend;
                        l_num_recipient(2) := l_analysis_harvest.num_recipient;
                    
                        l_collection_time.extend;
                        l_collection_time(2) := l_harvest.dt_harvest_tstz;
                    
                        l_collection_amount.extend;
                        l_collection_amount(2) := l_harvest.amount;
                    
                        l_collection_transportation.extend;
                        l_collection_transportation(2) := l_harvest.flg_mov_tube;
                    
                        g_error := 'CALL PK_LAB_TESTS_HARVEST_CORE.SET_HARVEST_DIVIDE';
                        IF NOT pk_lab_tests_harvest_core.set_harvest_divide(i_lang                      => i_lang,
                                                                            i_prof                      => i_prof,
                                                                            i_patient                   => l_analysis_req.id_patient,
                                                                            i_episode                   => l_analysis_req.id_episode,
                                                                            i_analysis_harvest          => l_analysis_harvest_array,
                                                                            i_flg_divide                => table_varchar('Y',
                                                                                                                         'N'),
                                                                            i_collection_method         => l_collection_method,
                                                                            i_collection_room           => l_collection_room,
                                                                            i_lab                       => l_lab,
                                                                            i_exec_institution          => l_exec_institution,
                                                                            i_sample_recipient          => l_sample_recipient,
                                                                            i_num_recipient             => l_num_recipient,
                                                                            i_collection_time           => l_collection_time,
                                                                            i_collection_amount         => l_collection_amount,
                                                                            i_collection_transportation => l_collection_transportation,
                                                                            i_notes                     => table_varchar(NULL,
                                                                                                                         NULL),
                                                                            o_error                     => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                END LOOP;
            
                FOR rec IN c_req_det_harvest(i_analysis_req_det(i))
                LOOP
                    g_error := 'OPEN C_HARVEST 3';
                    OPEN c_harvest(rec.id_harvest);
                    FETCH c_harvest
                        INTO l_harvest;
                    g_found := c_harvest%FOUND;
                    CLOSE c_harvest;
                
                    IF g_found
                    THEN
                        l_rows_out := NULL;
                    
                        -- Se a colheita estiver no estado 
                        -- pendente poderá ser cancelada.
                        g_error := 'UPDATE HARVEST';
                        ts_harvest.upd(flg_status_in        => pk_lab_tests_constant.g_harvest_cancel,
                                       id_prof_cancels_in   => i_prof.id,
                                       id_prof_cancels_nin  => FALSE,
                                       dt_cancel_tstz_in    => l_dt_cancel,
                                       dt_cancel_tstz_nin   => FALSE,
                                       id_cancel_reason_in  => i_cancel_reason,
                                       id_cancel_reason_nin => FALSE,
                                       where_in             => 'id_harvest = ' || CASE
                                                                   WHEN rec.id_harvest IS NULL THEN
                                                                    'NULL'
                                                                   ELSE
                                                                    to_char(rec.id_harvest)
                                                               END || '
                        AND flg_status != ''' ||
                                                               pk_lab_tests_constant.g_harvest_cancel || '''',
                                       rows_out             => l_rows_out);
                    
                        t_data_gov_mnt.process_update(i_lang         => i_lang,
                                                      i_prof         => i_prof,
                                                      i_table_name   => 'HARVEST',
                                                      i_list_columns => table_varchar('FLG_STATUS',
                                                                                      'ID_PROF_CANCELS',
                                                                                      'DT_CANCEL_TSTZ'),
                                                      i_rowids       => l_rows_out,
                                                      o_error        => o_error);
                    
                        -- inserir em log de estados
                        pk_utils.put_line(g_error);
                        IF rec.id_harvest IS NOT NULL
                        THEN
                            IF l_analysis_req.id_episode IS NOT NULL
                            THEN
                                IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                                        i_prof       => i_prof,
                                                        i_id_episode => l_analysis_req.id_episode,
                                                        i_flg_status => pk_lab_tests_constant.g_harvest_cancel,
                                                        i_id_record  => rec.id_harvest,
                                                        i_flg_type   => pk_lab_tests_constant.g_analysis_type_harv,
                                                        o_error      => o_error)
                                THEN
                                    RAISE g_other_exception;
                                END IF;
                            END IF;
                            g_error := 'CALL TO PK_IA_EVENT_LAB.HARVEST_CANCEL';
                        
                            IF i_flg_cancel_event = pk_alert_constant.g_yes
                            THEN
                                pk_ia_event_lab.harvest_cancel(i_id_harvest     => rec.id_harvest,
                                                               i_id_institution => i_prof.institution,
                                                               i_flg_old_status => l_harvest.flg_status);
                            END IF;
                        
                        END IF;
                    END IF;
                
                    --Insere evento na tabela de alertas
                    l_sys_alert_event.id_sys_alert := 4;
                    l_sys_alert_event.id_episode   := l_analysis_req.id_episode;
                    l_sys_alert_event.id_record    := i_analysis_req_det(i);
                
                    g_error := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT - 4';
                    IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    l_sys_alert_event.id_sys_alert := 40;
                    g_error                        := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT - 40';
                    IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    l_sys_alert_event.id_sys_alert := 5;
                    l_sys_alert_event.id_record    := rec.id_harvest;
                
                    g_error := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT - 5';
                    IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END LOOP;
            
                -- remove from print list (if exists)
                -- getting id_print_list_job related to this referral
                g_error           := 'CALL PK_PRINT_LIST_DB.GET_SIMILAR_PRINT_LIST_JOBS';
                l_print_list_jobs := pk_print_list_db.get_similar_print_list_jobs(i_lang                   => i_lang,
                                                                                  i_prof                   => i_prof,
                                                                                  i_patient                => l_analysis_req.id_patient,
                                                                                  i_episode                => l_analysis_req.id_episode,
                                                                                  i_print_list_area        => pk_print_list_db.g_print_list_area_lab_test,
                                                                                  i_print_job_context_data => to_clob(i_analysis_req_det(i) || '|'));
            
                IF l_print_list_jobs IS NOT NULL
                   AND l_print_list_jobs.count > 0
                THEN
                    FOR j IN 1 .. l_print_list_jobs.count
                    LOOP
                        g_error                  := 'CALL PK_LAB_TESTS_EXTERNAL_API_DB.GET_LAB_TEST_IN_PRINT_LIST';
                        l_print_job_context_data := pk_lab_tests_external_api_db.get_lab_test_in_print_list(i_lang           => i_lang,
                                                                                                            i_prof           => i_prof,
                                                                                                            i_print_list_job => l_print_list_jobs(j));
                    
                        IF dbms_lob.compare(l_print_job_context_data, to_clob(i_analysis_req_det(i) || '|')) = 0
                        THEN
                            g_error := 'CALL PK_PRINT_LIST_DB.SET_PRINT_JOBS_CANCEL';
                            IF NOT pk_print_list_db.set_print_jobs_cancel(i_lang              => i_lang,
                                                                          i_prof              => i_prof,
                                                                          i_id_print_list_job => table_number(l_print_list_jobs(j)),
                                                                          o_id_print_list_job => l_print_list_jobs_out,
                                                                          o_error             => o_error)
                            
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        ELSE
                            g_error := 'CALL PK_PRINT_LIST_DB.GET_PRINT_LIST_JOBS_ARGS';
                            IF NOT pk_print_list_db.get_print_list_jobs_args(i_lang               => i_lang,
                                                                             i_prof               => i_prof,
                                                                             i_id_print_list_jobs => table_number(l_print_list_jobs(j)),
                                                                             o_print_args         => l_print_args,
                                                                             o_error              => o_error)
                            
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        
                            l_context_data          := REPLACE(to_char(l_print_job_context_data),
                                                               i_analysis_req_det(i) || '|');
                            l_json_analysis_req_det := substr(REPLACE(to_char(l_context_data), '|', ','),
                                                              1,
                                                              length(REPLACE(to_char(l_context_data), '|', ',')) - 1);
                        
                            IF l_json_analysis_req_det IS NOT NULL
                            THEN
                                IF l_print_args.exists(1)
                                   AND l_print_args(1) IS NOT NULL
                                THEN
                                    l_json := json_object_t(l_print_args(1));
                                END IF;
                            
                                IF l_json.has('ID_REQ_DET')
                                THEN
                                    -- if found, replace value of parameter ID_REQ_DET without the i_analysis_req_det
                                    g_error := 'Set ID_REQ_DET';
                                    l_json.put('ID_REQ_DET', l_json_analysis_req_det);
                                
                                    g_error := 'CALL PK_PRINT_LIST_DB.UPDATE_PRINT_LIST_JOBS';
                                    IF NOT pk_print_list_db.update_print_list_jobs(i_lang            => i_lang,
                                                                                   i_prof            => i_prof,
                                                                                   i_print_list_jobs => table_number(l_print_list_jobs(j)),
                                                                                   i_context_data    => table_clob(l_context_data),
                                                                                   i_print_arguments => table_varchar(l_json.to_string()),
                                                                                   o_print_list_jobs => l_print_list_jobs_out,
                                                                                   o_error           => o_error)
                                    
                                    THEN
                                        RAISE g_other_exception;
                                    END IF;
                                END IF;
                            ELSE
                                g_error := 'CALL PK_PRINT_LIST_DB.SET_PRINT_JOBS_CANCEL';
                                IF NOT pk_print_list_db.set_print_jobs_cancel(i_lang              => i_lang,
                                                                              i_prof              => i_prof,
                                                                              i_id_print_list_job => table_number(l_print_list_jobs(j)),
                                                                              o_id_print_list_job => l_print_list_jobs_out,
                                                                              o_error             => o_error)
                                
                                THEN
                                    RAISE g_other_exception;
                                END IF;
                            END IF;
                        END IF;
                    END LOOP;
                END IF;
            
                IF i_flg_schedule = pk_lab_tests_constant.g_yes
                THEN
                    -- gets a new transaction ID and begins the transaction (for the Scheduler 3.0 transactions)
                    g_error          := 'CALL PK_SCHEDULE_API_UPSTREAM.BEGIN_NEW_TRANSACTION';
                    l_transaction_id := pk_schedule_api_upstream.begin_new_transaction(i_transaction_id, i_prof);
                
                    g_error := 'CALL PK_SCHEDULE_LAB.CANCEL_REQ_SCHEDULES';
                    IF NOT pk_schedule_lab.cancel_req_schedules(i_lang             => i_lang,
                                                                i_prof             => i_prof,
                                                                i_id_req           => l_analysis_req.id_analysis_req,
                                                                i_id_cancel_reason => 28,
                                                                i_cancel_notes     => l_cancel_notes,
                                                                i_transaction_id   => l_transaction_id,
                                                                o_error            => o_error)
                    
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    --remote commit on the new SCH 3.0 Doesn't affect PFH.
                    IF i_transaction_id IS NULL
                    THEN
                        pk_schedule_api_upstream.do_commit(l_transaction_id, i_prof);
                    END IF;
                END IF;
            
                g_error := 'CALL TO PK_ICNP_FO_API_DB.SET_SUGG_STATUS_CANCEL';
                pk_icnp_fo_api_db.set_sugg_status_cancel(i_lang         => i_lang,
                                                         i_prof         => i_prof,
                                                         i_request_id   => i_analysis_req_det(i),
                                                         i_task_type_id => pk_alert_constant.g_task_lab_tests,
                                                         i_sysdate_tstz => g_sysdate_tstz);
            
                g_error := 'CALL TO SET_FIRST_OBS';
                IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                              i_id_episode          => l_analysis_req.id_episode,
                                              i_pat                 => l_analysis_req.id_patient,
                                              i_prof                => i_prof,
                                              i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                              i_dt_last_interaction => g_sysdate_tstz,
                                              i_dt_first_obs        => g_sysdate_tstz,
                                              o_error               => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'PK_LAB_TESTS_API_DB.SET_LAB_TEST_GRID_TASK';
                IF NOT pk_lab_tests_api_db.set_lab_test_grid_task(i_lang             => i_lang,
                                                                  i_prof             => i_prof,
                                                                  i_patient          => l_analysis_req.id_patient,
                                                                  i_episode          => l_analysis_req.id_episode,
                                                                  i_analysis_req     => l_analysis_req.id_analysis_req,
                                                                  i_analysis_req_det => i_analysis_req_det(i),
                                                                  o_error            => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                IF i_flg_cancel_event = pk_alert_constant.g_yes
                THEN
                    IF l_analysis_req.flg_status = pk_lab_tests_constant.g_analysis_exterior
                    THEN
                        g_error := 'CALL TO PK_IA_EVENT_LAB.ANALYSIS_REQUEST_EXTERNAL_CANC';
                        pk_ia_event_lab.analysis_request_external_canc(i_id_analysis_req_det => i_analysis_req_det(i),
                                                                       i_id_institution      => i_prof.institution,
                                                                       i_flg_old_status      => l_analysis_req.flg_status);
                    ELSE
                        g_error := 'CALL TO PK_IA_EVENT_LAB.ANALYSIS_REQUEST_CANCEL';
                        pk_ia_event_lab.analysis_request_cancel(i_id_analysis_req_det => i_analysis_req_det(i),
                                                                i_id_institution      => i_prof.institution,
                                                                i_flg_old_status      => l_analysis_req.flg_status);
                    END IF;
                END IF;
                g_error := 'OPEN C_EPISODE_TYPE';
                OPEN c_episode_type(l_analysis_req.id_episode);
                FETCH c_episode_type
                    INTO l_episode_type;
                CLOSE c_episode_type;
            
                IF l_episode_type.id_epis_type = pk_lab_tests_constant.g_episode_type_lab
                THEN
                    g_error := 'OPEN C_EPISODE_ANALYSIS';
                    OPEN c_episode_analysis(l_analysis_req.id_episode);
                    FETCH c_episode_analysis
                        INTO l_episode_analysis;
                    g_found := c_episode_analysis%FOUND;
                    CLOSE c_episode_analysis;
                
                    IF NOT g_found
                    THEN
                        g_error := 'CALL PK_VISIT.SET_VISIT_END';
                        IF NOT pk_visit.set_visit_end(i_lang          => i_lang,
                                                      i_prof          => i_prof,
                                                      i_prof_cat_type => pk_prof_utils.get_category(i_lang, i_prof),
                                                      i_id_visit      => l_episode_type.id_visit,
                                                      o_error         => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                END IF;
            END IF;
        
            SELECT t1.id_analysis_req
              BULK COLLECT
              INTO l_analysis_order_collected
              FROM (SELECT COUNT(1) id_analysis_req_det_count, ard.id_analysis_req
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req_det = i_analysis_req_det(i)
                       AND ard.flg_status IN
                           (pk_lab_tests_constant.g_analysis_toexec, pk_lab_tests_constant.g_analysis_collected)
                     GROUP BY ard.id_analysis_req) t1,
                   (SELECT COUNT(1) id_analysis_req_det_count, ard.id_analysis_req
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req_det = i_analysis_req_det(i)
                       AND ard.flg_status != pk_lab_tests_constant.g_analysis_cancel
                     GROUP BY ard.id_analysis_req) t2
             WHERE t1.id_analysis_req_det_count = t2.id_analysis_req_det_count
               AND t1.id_analysis_req = t2.id_analysis_req;
        
            IF l_analysis_order_collected IS NOT NULL
               AND l_analysis_order_collected.count > 0
            THEN
                g_error := 'CALL TO PK_IA_EVENT_LAB.ANALYSIS_ORDER_COLLECTED';
                pk_ia_event_lab.analysis_order_collected(i_id_analysis_req => l_analysis_order_collected(1),
                                                         i_id_institution  => i_prof.institution);
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CANCEL_LAB_TEST_REQUEST',
                                              o_error);
            RETURN FALSE;
    END cancel_lab_test_request;

    FUNCTION cancel_lab_test_result
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_analysis_result_par IN analysis_result_par.id_analysis_result_par%TYPE,
        i_cancel_reason       IN analysis_result_par.id_cancel_reason%TYPE,
        i_notes_cancel        IN analysis_result_par.notes_cancel%TYPE,
        o_error               OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_analysis_media_archive(i_analysis_result_par IN analysis_result_par.id_analysis_result_par%TYPE) IS
            SELECT ama.id_analysis_media_archive, ama.id_doc_external
              FROM analysis_media_archive ama
             WHERE ama.id_analysis_result_par = i_analysis_result_par
               AND ama.flg_status = pk_lab_tests_constant.g_active;
    
        l_analysis_result analysis_result.id_analysis_result%TYPE;
        l_count_cancel    NUMBER;
    
        l_analysis_media_archive c_analysis_media_archive%ROWTYPE;
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        -- Get analysis result par to be inserted on analysis_result_par_hist table
        g_error := 'GET ANALYSIS_RESULT_PAR';
        SELECT arp.id_analysis_result
          INTO l_analysis_result
          FROM analysis_result_par arp
         WHERE arp.id_analysis_result_par = i_analysis_result_par;
    
        g_error := 'CALL PK_LAB_TESTS_CORE.SET_LAB_TEST_RESULT_HISTORY';
        IF NOT pk_lab_tests_core.set_lab_test_result_history(i_lang                => i_lang,
                                                             i_prof                => i_prof,
                                                             i_analysis_result     => l_analysis_result,
                                                             i_analysis_result_par => table_number(i_analysis_result_par),
                                                             o_error               => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        -- Update Cancel columns
        g_error := 'UPDATE ANALYSIS_RESULT_PAR';
        ts_analysis_result_par.upd(id_analysis_result_par_in => i_analysis_result_par,
                                   id_result_status_in       => 2,
                                   id_professional_cancel_in => i_prof.id,
                                   notes_cancel_in           => i_notes_cancel,
                                   dt_cancel_in              => g_sysdate_tstz,
                                   id_cancel_reason_in       => i_cancel_reason,
                                   rows_out                  => l_rows_out);
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'ANALYSIS_RESULT_PAR',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        -- Check if all analysis results are cancelled
        SELECT COUNT(*)
          INTO l_count_cancel
          FROM analysis_result_par arp
         WHERE arp.id_analysis_result = l_analysis_result
           AND arp.dt_cancel IS NULL;
    
        -- All analysis results are cancelled, thus analysis result flag should be updated to 'C'
        IF l_count_cancel = 0
        THEN
            l_rows_out := NULL;
        
            g_error := 'UPDATE ANALYSIS_RESULT';
            ts_analysis_result.upd(id_analysis_result_in => l_analysis_result,
                                   flg_status_in         => pk_lab_tests_constant.g_analysis_cancel,
                                   id_result_status_in   => 2,
                                   rows_out              => l_rows_out);
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'ANALYSIS_RESULT',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        END IF;
    
        g_error := 'OPEN C_ANALYSIS_MEDIA_ARCHIVE';
        OPEN c_analysis_media_archive(i_analysis_result_par);
        LOOP
            FETCH c_analysis_media_archive
                INTO l_analysis_media_archive;
            EXIT WHEN c_analysis_media_archive%NOTFOUND;
        
            IF l_analysis_media_archive.id_analysis_media_archive IS NOT NULL
               AND l_analysis_media_archive.id_doc_external IS NOT NULL
            THEN
                g_error := 'CANCEL ANALYSIS_MEDIA_ARCHIVE';
                ts_analysis_media_archive.upd(id_analysis_media_archive_in => l_analysis_media_archive.id_analysis_media_archive,
                                              flg_status_in                => pk_alert_constant.g_inactive,
                                              id_prof_last_update_in       => i_prof.id,
                                              dt_last_update_tstz_in       => g_sysdate_tstz);
            
                g_error := 'CALL TO PK_DOC.CANCEL_DOC';
                IF NOT pk_doc.cancel_doc(i_lang   => i_lang,
                                         i_prof   => i_prof,
                                         i_id_doc => l_analysis_media_archive.id_doc_external,
                                         o_error  => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END LOOP;
        CLOSE c_analysis_media_archive;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CANCEL_LAB_TEST_RESULT',
                                              o_error);
            RETURN FALSE;
    END cancel_lab_test_result;

    FUNCTION cancel_lab_test_doc_associated
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE,
        i_doc_external     IN doc_external.id_doc_external%TYPE,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        g_error := 'UPDATE ANALYSIS_MEDIA_ARCHIVE';
        ts_analysis_media_archive.upd(flg_status_in          => pk_lab_tests_constant.g_inactive,
                                      id_prof_last_update_in => i_prof.id,
                                      dt_last_update_tstz_in => g_sysdate_tstz,
                                      where_in               => 'id_analysis_req_det = ' || i_analysis_req_det ||
                                                                ' AND id_doc_external = ' || i_doc_external,
                                      rows_out               => l_rows_out);
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'ANALYSIS_MEDIA_ARCHIVE',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CANCEL_LAB_TEST_RESULT',
                                              o_error);
            RETURN FALSE;
    END cancel_lab_test_doc_associated;

    FUNCTION cancel_lab_test_schedule
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_analysis_req IN analysis_req.id_analysis_req%TYPE,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_analysis_req IS
            SELECT ard.id_analysis_req_det
              FROM analysis_req_det ard
             WHERE ard.id_analysis_req = i_analysis_req;
    
        l_analysis_req_det table_number;
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        g_error := 'UPDATE ANALYSIS_REQ';
        ts_analysis_req.upd(id_analysis_req_in => i_analysis_req,
                            dt_begin_tstz_in   => NULL,
                            dt_begin_tstz_nin  => FALSE,
                            rows_out           => l_rows_out);
    
        g_error := 'OPEN C_ANALYSIS_REQ';
        OPEN c_analysis_req;
        FETCH c_analysis_req BULK COLLECT
            INTO l_analysis_req_det;
        CLOSE c_analysis_req;
    
        g_error := 'CALL TO PK_LAB_TESTS_CORE.SET_LAB_TEST_STATUS';
        IF NOT pk_lab_tests_core.set_lab_test_status(i_lang             => i_lang,
                                                     i_prof             => i_prof,
                                                     i_analysis_req_det => l_analysis_req_det,
                                                     i_status           => pk_lab_tests_constant.g_analysis_tosched,
                                                     o_error            => o_error)
        
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'ANALYSIS_REQ',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CANCEL_LAB_TEST_SCHEDULE',
                                              o_error);
            RETURN FALSE;
    END cancel_lab_test_schedule;

    FUNCTION get_lab_test_selection_list
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_patient      IN patient.id_patient%TYPE,
        i_episode      IN episode.id_episode%TYPE,
        i_flg_type     IN VARCHAR2 DEFAULT pk_lab_tests_constant.g_analysis_institution,
        i_codification IN codification.id_codification%TYPE,
        i_analysis_req IN analysis_req.id_analysis_req%TYPE,
        i_harvest      IN harvest.id_harvest%TYPE
    ) RETURN t_tbl_lab_tests_for_selection IS
    
        CURSOR c_pat IS
            SELECT gender, months_between(SYSDATE, dt_birth) / 12 age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_pat       c_pat%ROWTYPE;
        l_complaint table_number;
    
        l_sample_type sample_type.id_sample_type%TYPE;
        l_exam_cat    exam_cat.id_exam_cat%TYPE;
    
        l_prof_access PLS_INTEGER;
    
        l_order_criteria        sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_CRITERIA', i_prof);
        l_order_exam_cat_parent sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_EXAM_CAT_PARENT',
                                                                                 i_prof);
    
        l_msg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T117');
    
        l_tbl_lab_tests_for_selection t_tbl_lab_tests_for_selection;
    
        l_error t_error_out;
    
    BEGIN
    
        IF i_patient IS NOT NULL
        THEN
            g_error := 'OPEN C_PAT';
            OPEN c_pat;
            FETCH c_pat
                INTO l_pat;
            CLOSE c_pat;
        
            IF NOT pk_complaint.get_epis_act_complaint(i_lang         => i_lang,
                                                       i_prof         => i_prof,
                                                       i_episode      => i_episode,
                                                       o_id_complaint => l_complaint,
                                                       o_error        => l_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        g_error := 'I_ANALYSIS_REQ CONDITION';
        IF i_analysis_req IS NOT NULL
        THEN
            IF instr(l_order_criteria, 'S') != 0
            THEN
                BEGIN
                    SELECT DISTINCT ard.id_sample_type
                      INTO l_sample_type
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error       := 'MORE THEN ONE SAMPLE';
                        l_sample_type := NULL;
                END;
            END IF;
        
            IF instr(l_order_criteria, 'C') != 0
            THEN
                BEGIN
                    SELECT DISTINCT decode(l_order_exam_cat_parent,
                                           pk_lab_tests_constant.g_yes,
                                           (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                            i_prof,
                                                                                            ard.id_exam_cat)
                                              FROM dual),
                                           ard.id_exam_cat) id_exam_cat
                      INTO l_exam_cat
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error    := 'MORE THEN ONE EXAM_CAT';
                        l_exam_cat := NULL;
                END;
            END IF;
        END IF;
    
        g_error := 'I_HARVEST CONDITION';
        IF i_harvest IS NOT NULL
        THEN
            SELECT DISTINCT ard.id_sample_type
              INTO l_sample_type
              FROM analysis_harvest ah, analysis_req_det ard
             WHERE ah.id_harvest = i_harvest
               AND ah.id_analysis_req_det = ard.id_analysis_req_det;
        END IF;
    
        g_error := 'GET PROF ACCESS';
        BEGIN
            SELECT COUNT(1)
              INTO l_prof_access
              FROM group_access_prof gaf
             INNER JOIN group_access ga
                ON gaf.id_group_access = ga.id_group_access
             WHERE gaf.id_professional = i_prof.id
               AND gaf.flg_available = pk_lab_tests_constant.g_available
               AND ga.id_institution IN (i_prof.institution, 0)
               AND ga.id_software IN (i_prof.software, 0)
               AND ga.flg_available = pk_lab_tests_constant.g_available
               AND ga.flg_type = 'A';
        EXCEPTION
            WHEN no_data_found THEN
                l_prof_access := 0;
        END;
    
        IF i_flg_type = pk_lab_tests_constant.g_analysis_institution
        THEN
            g_error := 'GET CURSOR';
            SELECT t_lab_tests_for_selection(id_analysis,
                                             desc_analysis,
                                             id_sample_type,
                                             desc_sample_type,
                                             id_analysis_instit_soft,
                                             desc_perform,
                                             flg_clinical_question,
                                             TYPE,
                                             rank)
              BULK COLLECT
              INTO l_tbl_lab_tests_for_selection
              FROM (SELECT id_analysis,
                           decode(TYPE,
                                  'A',
                                  (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                   i_prof,
                                                                                   pk_lab_tests_constant.g_analysis_alias,
                                                                                   'ANALYSIS.CODE_ANALYSIS.' || id_analysis,
                                                                                   'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                   id_sample_type,
                                                                                   NULL)
                                     FROM dual) || (SELECT pk_lab_tests_utils.get_lab_test_with_codification(i_lang,
                                                                                                             i_prof,
                                                                                                             id_analysis,
                                                                                                             id_sample_type)
                                                      FROM dual),
                                  (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                   i_prof,
                                                                                   pk_lab_tests_constant.g_analysis_group_alias,
                                                                                   'ANALYSIS_GROUP.CODE_ANALYSIS_GROUP.' ||
                                                                                   id_analysis,
                                                                                   NULL)
                                     FROM dual)) desc_analysis,
                           id_sample_type,
                           (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                            i_prof,
                                                                            pk_lab_tests_constant.g_analysis_sample_alias,
                                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                            id_sample_type,
                                                                            NULL)
                              FROM dual) desc_sample_type,
                           id_analysis_instit_soft,
                           desc_perform,
                           flg_clinical_question,
                           TYPE,
                           rank
                      FROM (SELECT id_analysis,
                                   id_sample_type,
                                   id_analysis_instit_soft,
                                   desc_perform,
                                   flg_clinical_question,
                                   TYPE,
                                   rank,
                                   row_number() over(PARTITION BY id_analysis, id_sample_type, TYPE ORDER BY rank DESC) rn
                              FROM (SELECT id_analysis,
                                           id_sample_type,
                                           id_analysis_instit_soft,
                                           desc_perform,
                                           flg_clinical_question,
                                           TYPE,
                                           decode(TYPE,
                                                  'A',
                                                  (SELECT pk_lab_tests_utils.get_lab_test_rank(i_lang,
                                                                                               i_prof,
                                                                                               id_analysis,
                                                                                               NULL)
                                                     FROM dual),
                                                  (SELECT pk_lab_tests_utils.get_lab_test_group_rank(i_lang,
                                                                                                     i_prof,
                                                                                                     id_analysis,
                                                                                                     NULL)
                                                     FROM dual)) rank
                                      FROM (SELECT DISTINCT ais.id_analysis,
                                                            ais.id_sample_type,
                                                            ais.id_analysis_instit_soft,
                                                            decode(ais.flg_execute, pk_lab_tests_constant.g_no, l_msg, NULL) desc_perform,
                                                            CASE
                                                                 WHEN aq.id_analysis IS NOT NULL
                                                                      AND aq.id_sample_type IS NOT NULL
                                                                      AND aq.id_sample_type = ast.id_sample_type THEN
                                                                  CASE
                                                                      WHEN instr(nvl(aq.flg_mandatory, pk_lab_tests_constant.g_no),
                                                                                 pk_lab_tests_constant.g_yes) = 0 THEN
                                                                       pk_lab_tests_constant.g_yes
                                                                      ELSE
                                                                       'M'
                                                                  END
                                                                 ELSE
                                                                  pk_lab_tests_constant.g_no
                                                             END flg_clinical_question,
                                                            'A' TYPE
                                              FROM analysis a,
                                                   (SELECT *
                                                      FROM analysis_sample_type
                                                     WHERE flg_available = pk_lab_tests_constant.g_available
                                                       AND (i_analysis_req IS NULL OR ((id_sample_type = l_sample_type AND
                                                           instr(l_order_criteria, 'S') != 0) OR
                                                           instr(l_order_criteria, 'S') = 0))) ast,
                                                   (SELECT *
                                                      FROM analysis_instit_soft
                                                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                       AND id_software = i_prof.software
                                                       AND id_institution = i_prof.institution
                                                       AND flg_available = pk_lab_tests_constant.g_available
                                                       AND (i_analysis_req IS NULL OR
                                                           ((decode(l_order_exam_cat_parent,
                                                                     pk_lab_tests_constant.g_yes,
                                                                     (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                      i_prof,
                                                                                                                      id_exam_cat)
                                                                        FROM dual),
                                                                     id_exam_cat) = l_exam_cat AND
                                                           instr(l_order_criteria, 'C') != 0) OR
                                                           instr(l_order_criteria, 'C') = 0))) ais,
                                                   analysis_instit_recipient air,
                                                   (SELECT *
                                                      FROM analysis_room
                                                     WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                       AND id_institution = i_prof.institution
                                                       AND flg_available = pk_lab_tests_constant.g_yes
                                                       AND flg_default = pk_lab_tests_constant.g_yes) ar,
                                                   (SELECT id_analysis,
                                                           id_sample_type,
                                                           concatenate(flg_mandatory) flg_mandatory
                                                      FROM (SELECT DISTINCT aq.id_analysis,
                                                                            aq.id_sample_type,
                                                                            aq.flg_mandatory
                                                              FROM analysis_questionnaire aq
                                                             WHERE aq.id_institution = i_prof.institution
                                                               AND aq.flg_available = pk_lab_tests_constant.g_available
                                                               AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                                                     GROUP BY id_analysis, id_sample_type) aq,
                                                   (SELECT DISTINCT gar.id_record id_analysis
                                                      FROM group_access ga
                                                     INNER JOIN group_access_prof gaf
                                                        ON gaf.id_group_access = ga.id_group_access
                                                     INNER JOIN group_access_record gar
                                                        ON gar.id_group_access = ga.id_group_access
                                                     WHERE gaf.id_professional = i_prof.id
                                                       AND ga.id_institution IN (i_prof.institution, 0)
                                                       AND ga.id_software IN (i_prof.software, 0)
                                                       AND ga.flg_type = 'A'
                                                       AND gar.flg_type = 'A'
                                                       AND ga.flg_available = pk_lab_tests_constant.g_available
                                                       AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                       AND gar.flg_available = pk_lab_tests_constant.g_available) acs,
                                                   (SELECT DISTINCT gar.id_record id_analysis
                                                      FROM group_access ga
                                                     INNER JOIN group_access_prof gaf
                                                        ON gaf.id_group_access = ga.id_group_access
                                                     INNER JOIN group_access_record gar
                                                        ON gar.id_group_access = ga.id_group_access
                                                     WHERE ga.id_institution IN (i_prof.institution)
                                                       AND ga.id_software IN (i_prof.software)
                                                       AND ga.flg_type = pk_lab_tests_constant.g_infectious_diseases_orders
                                                       AND gar.flg_type = 'A'
                                                       AND ga.flg_available = pk_lab_tests_constant.g_available
                                                       AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                       AND gar.flg_available = pk_lab_tests_constant.g_available) a_infect
                                             WHERE a.flg_available = pk_lab_tests_constant.g_available
                                               AND a.id_analysis = ast.id_analysis
                                               AND ast.id_analysis = ais.id_analysis
                                               AND ast.id_sample_type = ais.id_sample_type
                                               AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                               AND (i_harvest IS NULL OR
                                                   (ast.id_sample_type = l_sample_type AND EXISTS
                                                    (SELECT 1
                                                        FROM analysis_harvest ah
                                                       WHERE ah.id_harvest = i_harvest
                                                         AND ah.id_sample_recipient = air.id_sample_recipient)))
                                               AND ast.id_analysis = ar.id_analysis
                                               AND ast.id_sample_type = ar.id_sample_type
                                               AND a.id_analysis = a_infect.id_analysis(+)
                                               AND EXISTS
                                             (SELECT 1
                                                      FROM analysis_param ap
                                                     WHERE ap.id_software = i_prof.software
                                                       AND ap.id_institution = i_prof.institution
                                                       AND ap.flg_available = pk_lab_tests_constant.g_available
                                                       AND ap.id_analysis = ast.id_analysis
                                                       AND ap.id_sample_type = ast.id_sample_type)
                                               AND ar.id_analysis = aq.id_analysis(+)
                                               AND ar.id_sample_type = aq.id_sample_type(+)
                                               AND a.id_analysis = acs.id_analysis(+)
                                               AND ((l_prof_access = 0 AND a_infect.id_analysis IS NULL) OR
                                                   (l_prof_access = 0 AND a_infect.id_analysis IS NOT NULL AND EXISTS
                                                    (SELECT 1
                                                        FROM group_access ga
                                                       INNER JOIN group_access_prof gaf
                                                          ON gaf.id_group_access = ga.id_group_access
                                                       INNER JOIN group_access_record gar
                                                          ON gar.id_group_access = ga.id_group_access
                                                       WHERE gaf.id_professional = i_prof.id
                                                         AND ga.id_institution IN (i_prof.institution)
                                                         AND ga.id_software IN (i_prof.software)
                                                         AND ga.flg_type = pk_lab_tests_constant.g_infectious_diseases_orders
                                                         AND gar.flg_type = 'A'
                                                         AND ga.flg_available = pk_lab_tests_constant.g_available
                                                         AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                         AND gar.flg_available = pk_lab_tests_constant.g_available)) OR
                                                   (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                                               AND (i_patient IS NULL OR
                                                   (((l_pat.gender IS NOT NULL AND
                                                   coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                                   ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                                   l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                                   (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                                                   nvl(a.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                                               AND rownum > 0
                                            UNION ALL
                                            SELECT DISTINCT ag.id_analysis_group id_analysis,
                                                            NULL id_sample_type,
                                                            ais.id_analysis_instit_soft,
                                                            decode(ais.flg_execute, pk_lab_tests_constant.g_no, l_msg, NULL) desc_perform,
                                                            decode(aq.id_analysis_group,
                                                                   NULL,
                                                                   pk_lab_tests_constant.g_no,
                                                                   decode(instr(nvl(aq.flg_mandatory,
                                                                                    pk_lab_tests_constant.g_no),
                                                                                pk_lab_tests_constant.g_yes),
                                                                          0,
                                                                          pk_lab_tests_constant.g_yes,
                                                                          'M')) flg_clinical_question,
                                                            'G' TYPE
                                              FROM analysis_group ag,
                                                   analysis_agp aa,
                                                   (SELECT *
                                                      FROM analysis_instit_soft
                                                     WHERE flg_type IN (pk_lab_tests_constant.g_analysis_can_req,
                                                                        pk_lab_tests_constant.g_analysis_exec)
                                                       AND id_software = i_prof.software
                                                       AND id_institution = i_prof.institution
                                                       AND flg_available = pk_lab_tests_constant.g_available) ais,
                                                   (SELECT id_analysis_group, concatenate(flg_mandatory) flg_mandatory
                                                      FROM (SELECT DISTINCT aq.id_analysis_group, aq.flg_mandatory
                                                              FROM analysis_questionnaire aq
                                                             WHERE aq.id_institution = i_prof.institution
                                                               AND aq.flg_available = pk_lab_tests_constant.g_available
                                                               AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                                                     GROUP BY id_analysis_group) aq
                                             WHERE ag.id_analysis_group = aa.id_analysis_group
                                               AND ag.flg_available = pk_lab_tests_constant.g_available
                                               AND aa.flg_available = pk_lab_tests_constant.g_available
                                               AND ag.id_analysis_group = ais.id_analysis_group
                                               AND ag.id_analysis_group = aq.id_analysis_group(+)
                                               AND EXISTS
                                             (SELECT 1
                                                      FROM analysis a,
                                                           (SELECT *
                                                              FROM analysis_sample_type
                                                             WHERE flg_available = pk_lab_tests_constant.g_available) ast,
                                                           (SELECT *
                                                              FROM analysis_instit_soft
                                                             WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                               AND id_software = i_prof.software
                                                               AND id_institution = i_prof.institution
                                                               AND flg_available = pk_lab_tests_constant.g_available) ais,
                                                           analysis_instit_recipient air,
                                                           (SELECT *
                                                              FROM analysis_room
                                                             WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                               AND id_institution = i_prof.institution
                                                               AND flg_available = pk_lab_tests_constant.g_yes
                                                               AND flg_default = pk_lab_tests_constant.g_yes) ar
                                                     WHERE a.flg_available = pk_lab_tests_constant.g_available
                                                       AND a.id_analysis = ast.id_analysis
                                                       AND ast.id_analysis = ais.id_analysis
                                                       AND ast.id_sample_type = ais.id_sample_type
                                                       AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                                       AND a.id_analysis = ar.id_analysis
                                                       AND EXISTS
                                                     (SELECT 1
                                                              FROM analysis_param ap
                                                             WHERE ap.id_software = i_prof.software
                                                               AND ap.id_institution = i_prof.institution
                                                               AND ap.flg_available = pk_lab_tests_constant.g_available
                                                               AND ap.id_analysis = ast.id_analysis
                                                               AND ap.id_sample_type = ast.id_sample_type)
                                                       AND ast.id_analysis = aa.id_analysis
                                                       AND ast.id_sample_type = aa.id_sample_type)
                                               AND (l_prof_access = 0 OR
                                                   (l_prof_access != 0 AND EXISTS
                                                    (SELECT 1
                                                        FROM analysis_group ag1,
                                                             analysis_agp agp,
                                                             (SELECT DISTINCT gar.id_record id_analysis
                                                                FROM group_access ga
                                                               INNER JOIN group_access_prof gaf
                                                                  ON gaf.id_group_access = ga.id_group_access
                                                               INNER JOIN group_access_record gar
                                                                  ON gar.id_group_access = ga.id_group_access
                                                               WHERE gaf.id_professional = i_prof.id
                                                                 AND ga.id_institution IN (i_prof.institution, 0)
                                                                 AND ga.id_software IN (i_prof.software, 0)
                                                                 AND ga.flg_type = 'A'
                                                                 AND gar.flg_type = 'A'
                                                                 AND ga.flg_available = pk_lab_tests_constant.g_available
                                                                 AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                                 AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                                       WHERE ag1.id_analysis_group = ag.id_analysis_group
                                                         AND ag1.id_analysis_group = agp.id_analysis_group
                                                         AND agp.id_analysis = acs.id_analysis
                                                         AND agp.id_analysis = aa.id_analysis)))
                                               AND (i_patient IS NULL OR
                                                   (((l_pat.gender IS NOT NULL AND
                                                   coalesce(ag.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                                   ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                                   l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                                   (nvl(l_pat.age, 0) BETWEEN nvl(ag.age_min, 0) AND
                                                   nvl(ag.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                                               AND (i_analysis_req IS NULL OR
                                                   (EXISTS (SELECT 1
                                                               FROM analysis_agp aa
                                                              WHERE aa.id_analysis_group = ag.id_analysis_group
                                                                AND aa.flg_available = pk_lab_tests_constant.g_available
                                                              HAVING COUNT(*) =
                                                                    (SELECT COUNT(*)
                                                                       FROM analysis_agp aa
                                                                      WHERE aa.id_analysis_group = ag.id_analysis_group
                                                                        AND ((aa.id_sample_type = l_sample_type AND
                                                                            instr(l_order_criteria, 'S') != 0) OR
                                                                            instr(l_order_criteria, 'S') = 0)
                                                                        AND aa.flg_available =
                                                                            pk_lab_tests_constant.g_available)
                                                              GROUP BY aa.id_analysis_group)))
                                               AND (i_analysis_req IS NULL OR
                                                   (EXISTS
                                                    (SELECT 1
                                                        FROM analysis_agp aa
                                                       WHERE aa.id_analysis_group = ag.id_analysis_group
                                                         AND aa.flg_available = pk_lab_tests_constant.g_available
                                                       HAVING
                                                       COUNT(*) =
                                                             (SELECT COUNT(*)
                                                                FROM analysis_agp aa,
                                                                     (SELECT *
                                                                        FROM analysis_instit_soft
                                                                       WHERE flg_type =
                                                                             pk_lab_tests_constant.g_analysis_can_req
                                                                         AND id_software = i_prof.software
                                                                         AND id_institution = i_prof.institution
                                                                         AND flg_available = pk_lab_tests_constant.g_available
                                                                         AND ((decode(l_order_exam_cat_parent,
                                                                                      pk_lab_tests_constant.g_yes,
                                                                                      (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                                       i_prof,
                                                                                                                                       id_exam_cat)
                                                                                         FROM dual),
                                                                                      id_exam_cat) = l_exam_cat AND
                                                                             instr(l_order_criteria, 'C') != 0) OR
                                                                             instr(l_order_criteria, 'C') = 0)) ais
                                                               WHERE aa.id_analysis_group = ag.id_analysis_group
                                                                 AND aa.flg_available = pk_lab_tests_constant.g_available
                                                                 AND aa.id_analysis = ais.id_analysis
                                                                 AND aa.id_sample_type = ais.id_sample_type)
                                                       GROUP BY aa.id_analysis_group)))
                                               AND i_harvest IS NULL
                                               AND rownum > 0)))
                     WHERE rn = 1
                     ORDER BY rank, desc_analysis);
        
        ELSIF i_flg_type = pk_lab_tests_constant.g_analysis_clinical_service
        THEN
            g_error := 'GET CURSOR';
            SELECT t_lab_tests_for_selection(id_analysis,
                                             desc_analysis,
                                             id_sample_type,
                                             desc_sample_type,
                                             id_analysis_instit_soft,
                                             desc_perform,
                                             flg_clinical_question,
                                             TYPE,
                                             rank)
              BULK COLLECT
              INTO l_tbl_lab_tests_for_selection
              FROM (SELECT id_analysis,
                           decode(TYPE,
                                  'A',
                                  (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                   i_prof,
                                                                                   pk_lab_tests_constant.g_analysis_alias,
                                                                                   'ANALYSIS.CODE_ANALYSIS.' || id_analysis,
                                                                                   'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                   id_sample_type,
                                                                                   NULL)
                                     FROM dual) || (SELECT pk_lab_tests_utils.get_lab_test_with_codification(i_lang,
                                                                                                             i_prof,
                                                                                                             id_analysis,
                                                                                                             id_sample_type)
                                                      FROM dual),
                                  (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                   i_prof,
                                                                                   pk_lab_tests_constant.g_analysis_group_alias,
                                                                                   'ANALYSIS_GROUP.CODE_ANALYSIS_GROUP.' ||
                                                                                   id_analysis,
                                                                                   NULL)
                                     FROM dual)) desc_analysis,
                           id_sample_type,
                           (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                            i_prof,
                                                                            pk_lab_tests_constant.g_analysis_sample_alias,
                                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                            id_sample_type,
                                                                            NULL)
                              FROM dual) desc_sample_type,
                           id_analysis_instit_soft,
                           desc_perform,
                           flg_clinical_question,
                           TYPE,
                           rank
                      FROM (SELECT id_analysis,
                                   id_sample_type,
                                   id_analysis_instit_soft,
                                   desc_perform,
                                   flg_clinical_question,
                                   TYPE,
                                   rank,
                                   row_number() over(PARTITION BY id_analysis, id_sample_type, TYPE ORDER BY rank DESC) rn
                              FROM (SELECT id_analysis,
                                           id_sample_type,
                                           id_analysis_instit_soft,
                                           desc_perform,
                                           flg_clinical_question,
                                           TYPE,
                                           decode(TYPE,
                                                  'A',
                                                  (SELECT pk_lab_tests_utils.get_lab_test_rank(i_lang,
                                                                                               i_prof,
                                                                                               id_analysis,
                                                                                               id_dep_clin_serv)
                                                     FROM dual),
                                                  (SELECT pk_lab_tests_utils.get_lab_test_group_rank(i_lang,
                                                                                                     i_prof,
                                                                                                     id_analysis,
                                                                                                     id_dep_clin_serv)
                                                     FROM dual)) rank
                                      FROM (SELECT DISTINCT a.id_analysis,
                                                            adcs.id_sample_type,
                                                            ais.id_analysis_instit_soft,
                                                            decode(ais.flg_execute, pk_lab_tests_constant.g_no, l_msg, NULL) desc_perform,
                                                            CASE
                                                                 WHEN aq.id_analysis IS NOT NULL
                                                                      AND aq.id_sample_type IS NOT NULL
                                                                      AND aq.id_sample_type = ast.id_sample_type THEN
                                                                  CASE
                                                                      WHEN instr(nvl(aq.flg_mandatory, pk_lab_tests_constant.g_no),
                                                                                 pk_lab_tests_constant.g_yes) = 0 THEN
                                                                       pk_lab_tests_constant.g_yes
                                                                      ELSE
                                                                       'M'
                                                                  END
                                                                 ELSE
                                                                  pk_lab_tests_constant.g_no
                                                             END flg_clinical_question,
                                                            'A' TYPE,
                                                            adcs.id_dep_clin_serv
                                              FROM analysis a,
                                                   (SELECT *
                                                      FROM analysis_sample_type
                                                     WHERE flg_available = pk_lab_tests_constant.g_available
                                                       AND (i_analysis_req IS NULL OR ((id_sample_type = l_sample_type AND
                                                           instr(l_order_criteria, 'S') != 0) OR
                                                           instr(l_order_criteria, 'S') = 0))) ast,
                                                   (SELECT *
                                                      FROM analysis_instit_soft
                                                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                       AND id_software = i_prof.software
                                                       AND id_institution = i_prof.institution
                                                       AND flg_available = pk_lab_tests_constant.g_available
                                                       AND (i_analysis_req IS NULL OR
                                                           ((decode(l_order_exam_cat_parent,
                                                                     pk_lab_tests_constant.g_yes,
                                                                     (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                      i_prof,
                                                                                                                      id_exam_cat)
                                                                        FROM dual),
                                                                     id_exam_cat) = l_exam_cat AND
                                                           instr(l_order_criteria, 'C') != 0) OR
                                                           instr(l_order_criteria, 'C') = 0))) ais,
                                                   (SELECT *
                                                      FROM analysis_dep_clin_serv adcs
                                                     WHERE id_software = i_prof.software
                                                       AND flg_available = pk_lab_tests_constant.g_available
                                                       AND (EXISTS
                                                            (SELECT 1
                                                               FROM prof_dep_clin_serv pdcs
                                                              WHERE pdcs.id_professional = i_prof.id
                                                                AND pdcs.id_institution = i_prof.institution
                                                                AND pdcs.flg_status = pk_lab_tests_constant.g_selected
                                                                AND pdcs.id_dep_clin_serv = adcs.id_dep_clin_serv))
                                                    UNION ALL
                                                    SELECT *
                                                      FROM analysis_dep_clin_serv adcs
                                                     WHERE id_software = i_prof.software
                                                       AND flg_available = pk_lab_tests_constant.g_available
                                                       AND adcs.id_professional = i_prof.id) adcs,
                                                   analysis_instit_recipient air,
                                                   (SELECT *
                                                      FROM analysis_room
                                                     WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                       AND id_institution = i_prof.institution
                                                       AND flg_available = pk_lab_tests_constant.g_yes
                                                       AND flg_default = pk_lab_tests_constant.g_yes) ar,
                                                   (SELECT id_analysis,
                                                           id_sample_type,
                                                           concatenate(flg_mandatory) flg_mandatory
                                                      FROM (SELECT DISTINCT aq.id_analysis,
                                                                            aq.id_sample_type,
                                                                            aq.flg_mandatory
                                                              FROM analysis_questionnaire aq
                                                             WHERE aq.id_institution = i_prof.institution
                                                               AND aq.flg_available = pk_lab_tests_constant.g_available
                                                               AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                                                     GROUP BY id_analysis, id_sample_type) aq,
                                                   (SELECT DISTINCT gar.id_record id_analysis
                                                      FROM group_access ga
                                                     INNER JOIN group_access_prof gaf
                                                        ON gaf.id_group_access = ga.id_group_access
                                                     INNER JOIN group_access_record gar
                                                        ON gar.id_group_access = ga.id_group_access
                                                     WHERE gaf.id_professional = i_prof.id
                                                       AND ga.id_institution IN (i_prof.institution, 0)
                                                       AND ga.id_software IN (i_prof.software, 0)
                                                       AND ga.flg_type = 'A'
                                                       AND gar.flg_type = 'A'
                                                       AND ga.flg_available = pk_lab_tests_constant.g_available
                                                       AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                       AND gar.flg_available = pk_lab_tests_constant.g_available) acs,
                                                   (SELECT DISTINCT gar.id_record id_analysis
                                                      FROM group_access ga
                                                     INNER JOIN group_access_prof gaf
                                                        ON gaf.id_group_access = ga.id_group_access
                                                     INNER JOIN group_access_record gar
                                                        ON gar.id_group_access = ga.id_group_access
                                                     WHERE ga.id_institution IN (i_prof.institution)
                                                       AND ga.id_software IN (i_prof.software)
                                                       AND ga.flg_type = pk_lab_tests_constant.g_infectious_diseases_orders
                                                       AND gar.flg_type = 'A'
                                                       AND ga.flg_available = pk_lab_tests_constant.g_available
                                                       AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                       AND gar.flg_available = pk_lab_tests_constant.g_available) a_infect
                                             WHERE a.flg_available = pk_lab_tests_constant.g_available
                                               AND a.id_analysis = ast.id_analysis
                                               AND ast.id_analysis = adcs.id_analysis
                                               AND ast.id_sample_type = adcs.id_sample_type
                                               AND ast.id_analysis = ais.id_analysis
                                               AND ast.id_sample_type = ais.id_sample_type
                                               AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                               AND (i_harvest IS NULL OR
                                                   (ast.id_sample_type = l_sample_type AND EXISTS
                                                    (SELECT 1
                                                        FROM analysis_harvest ah
                                                       WHERE ah.id_harvest = i_harvest
                                                         AND ah.id_sample_recipient = air.id_sample_recipient)))
                                               AND ast.id_analysis = ar.id_analysis
                                               AND ast.id_sample_type = ar.id_sample_type
                                               AND a.id_analysis = a_infect.id_analysis(+)
                                               AND EXISTS
                                             (SELECT 1
                                                      FROM analysis_param ap
                                                     WHERE ap.id_software = i_prof.software
                                                       AND ap.id_institution = i_prof.institution
                                                       AND ap.flg_available = pk_lab_tests_constant.g_available
                                                       AND ap.id_analysis = ast.id_analysis
                                                       AND ap.id_sample_type = ast.id_sample_type)
                                               AND ar.id_analysis = aq.id_analysis(+)
                                               AND ar.id_sample_type = aq.id_sample_type(+)
                                               AND a.id_analysis = acs.id_analysis(+)
                                               AND ((l_prof_access = 0 AND a_infect.id_analysis IS NULL) OR
                                                   (l_prof_access = 0 AND a_infect.id_analysis IS NOT NULL AND EXISTS
                                                    (SELECT 1
                                                        FROM group_access ga
                                                       INNER JOIN group_access_prof gaf
                                                          ON gaf.id_group_access = ga.id_group_access
                                                       INNER JOIN group_access_record gar
                                                          ON gar.id_group_access = ga.id_group_access
                                                       WHERE gaf.id_professional = i_prof.id
                                                         AND ga.id_institution IN (i_prof.institution)
                                                         AND ga.id_software IN (i_prof.software)
                                                         AND ga.flg_type = pk_lab_tests_constant.g_infectious_diseases_orders
                                                         AND gar.flg_type = 'A'
                                                         AND ga.flg_available = pk_lab_tests_constant.g_available
                                                         AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                         AND gar.flg_available = pk_lab_tests_constant.g_available)) OR
                                                   (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                                               AND (i_patient IS NULL OR
                                                   (((l_pat.gender IS NOT NULL AND
                                                   coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                                   ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                                   l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                                   (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                                                   nvl(a.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                                               AND rownum > 0
                                            UNION ALL
                                            SELECT DISTINCT ag.id_analysis_group id_analysis,
                                                            NULL id_sample_type,
                                                            ais.id_analysis_instit_soft,
                                                            decode(ais.flg_execute, pk_lab_tests_constant.g_no, l_msg, NULL) desc_perform,
                                                            decode(aq.id_analysis_group,
                                                                   NULL,
                                                                   pk_lab_tests_constant.g_no,
                                                                   decode(instr(nvl(aq.flg_mandatory,
                                                                                    pk_lab_tests_constant.g_no),
                                                                                pk_lab_tests_constant.g_yes),
                                                                          0,
                                                                          pk_lab_tests_constant.g_yes,
                                                                          'M')) flg_clinical_question,
                                                            'G' TYPE,
                                                            adcs.id_dep_clin_serv
                                              FROM analysis_group ag,
                                                   analysis_agp aa,
                                                   (SELECT *
                                                      FROM analysis_instit_soft
                                                     WHERE flg_type IN (pk_lab_tests_constant.g_analysis_can_req,
                                                                        pk_lab_tests_constant.g_analysis_exec)
                                                       AND id_software = i_prof.software
                                                       AND id_institution = i_prof.institution
                                                       AND flg_available = pk_lab_tests_constant.g_available) ais,
                                                   (SELECT *
                                                      FROM analysis_dep_clin_serv adcs
                                                     WHERE id_software = i_prof.software
                                                       AND flg_available = pk_lab_tests_constant.g_available
                                                       AND id_analysis_group IS NOT NULL
                                                       AND (EXISTS
                                                            (SELECT 1
                                                               FROM prof_dep_clin_serv pdcs
                                                              WHERE pdcs.id_professional = i_prof.id
                                                                AND pdcs.id_institution = i_prof.institution
                                                                AND pdcs.flg_status = pk_lab_tests_constant.g_selected
                                                                AND pdcs.id_dep_clin_serv = adcs.id_dep_clin_serv))
                                                    UNION ALL
                                                    SELECT *
                                                      FROM analysis_dep_clin_serv adcs
                                                     WHERE id_software = i_prof.software
                                                       AND flg_available = pk_lab_tests_constant.g_available
                                                       AND id_analysis_group IS NOT NULL
                                                       AND adcs.id_professional = i_prof.id) adcs,
                                                   (SELECT id_analysis_group, concatenate(flg_mandatory) flg_mandatory
                                                      FROM (SELECT DISTINCT aq.id_analysis_group, aq.flg_mandatory
                                                              FROM analysis_questionnaire aq
                                                             WHERE aq.id_institution = i_prof.institution
                                                               AND aq.flg_available = pk_lab_tests_constant.g_available
                                                               AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                                                     GROUP BY id_analysis_group) aq
                                             WHERE ag.id_analysis_group = aa.id_analysis_group
                                               AND ag.flg_available = pk_lab_tests_constant.g_available
                                               AND aa.flg_available = pk_lab_tests_constant.g_available
                                               AND ag.id_analysis_group = ais.id_analysis_group
                                               AND ag.id_analysis_group = adcs.id_analysis_group
                                               AND ag.id_analysis_group = aq.id_analysis_group(+)
                                               AND EXISTS
                                             (SELECT 1
                                                      FROM analysis a,
                                                           (SELECT *
                                                              FROM analysis_sample_type
                                                             WHERE flg_available = pk_lab_tests_constant.g_available) ast,
                                                           (SELECT *
                                                              FROM analysis_instit_soft
                                                             WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                               AND id_software = i_prof.software
                                                               AND id_institution = i_prof.institution
                                                               AND flg_available = pk_lab_tests_constant.g_available) ais,
                                                           analysis_instit_recipient air,
                                                           (SELECT *
                                                              FROM analysis_room
                                                             WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                               AND id_institution = i_prof.institution
                                                               AND flg_available = pk_lab_tests_constant.g_yes
                                                               AND flg_default = pk_lab_tests_constant.g_yes) ar
                                                     WHERE a.flg_available = pk_lab_tests_constant.g_available
                                                       AND a.id_analysis = ast.id_analysis
                                                       AND ast.id_analysis = ais.id_analysis
                                                       AND ast.id_sample_type = ais.id_sample_type
                                                       AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                                       AND a.id_analysis = ar.id_analysis
                                                       AND EXISTS
                                                     (SELECT 1
                                                              FROM analysis_param ap
                                                             WHERE ap.id_software = i_prof.software
                                                               AND ap.id_institution = i_prof.institution
                                                               AND ap.flg_available = pk_lab_tests_constant.g_available
                                                               AND ap.id_analysis = ast.id_analysis
                                                               AND ap.id_sample_type = ast.id_sample_type)
                                                       AND ast.id_analysis = aa.id_analysis
                                                       AND ast.id_sample_type = aa.id_sample_type)
                                               AND (l_prof_access = 0 OR
                                                   (l_prof_access != 0 AND EXISTS
                                                    (SELECT 1
                                                        FROM analysis_group ag1,
                                                             analysis_agp agp,
                                                             (SELECT DISTINCT gar.id_record id_analysis
                                                                FROM group_access ga
                                                               INNER JOIN group_access_prof gaf
                                                                  ON gaf.id_group_access = ga.id_group_access
                                                               INNER JOIN group_access_record gar
                                                                  ON gar.id_group_access = ga.id_group_access
                                                               WHERE gaf.id_professional = i_prof.id
                                                                 AND ga.id_institution IN (i_prof.institution, 0)
                                                                 AND ga.id_software IN (i_prof.software, 0)
                                                                 AND ga.flg_type = 'A'
                                                                 AND gar.flg_type = 'A'
                                                                 AND ga.flg_available = pk_lab_tests_constant.g_available
                                                                 AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                                 AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                                       WHERE ag1.id_analysis_group = ag.id_analysis_group
                                                         AND ag1.id_analysis_group = agp.id_analysis_group
                                                         AND agp.id_analysis = acs.id_analysis
                                                         AND agp.id_analysis = aa.id_analysis)))
                                               AND (i_patient IS NULL OR
                                                   (((l_pat.gender IS NOT NULL AND
                                                   coalesce(ag.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                                   ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                                   l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                                   (nvl(l_pat.age, 0) BETWEEN nvl(ag.age_min, 0) AND
                                                   nvl(ag.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                                               AND (i_analysis_req IS NULL OR
                                                   (EXISTS (SELECT 1
                                                               FROM analysis_agp aa
                                                              WHERE aa.id_analysis_group = ag.id_analysis_group
                                                                AND aa.flg_available = pk_lab_tests_constant.g_available
                                                              HAVING COUNT(*) =
                                                                    (SELECT COUNT(*)
                                                                       FROM analysis_agp aa
                                                                      WHERE aa.id_analysis_group = ag.id_analysis_group
                                                                        AND ((aa.id_sample_type = l_sample_type AND
                                                                            instr(l_order_criteria, 'S') != 0) OR
                                                                            instr(l_order_criteria, 'S') = 0)
                                                                        AND aa.flg_available =
                                                                            pk_lab_tests_constant.g_available)
                                                              GROUP BY aa.id_analysis_group)))
                                               AND (i_analysis_req IS NULL OR
                                                   (EXISTS
                                                    (SELECT 1
                                                        FROM analysis_agp aa
                                                       WHERE aa.id_analysis_group = ag.id_analysis_group
                                                         AND aa.flg_available = pk_lab_tests_constant.g_available
                                                       HAVING
                                                       COUNT(*) =
                                                             (SELECT COUNT(*)
                                                                FROM analysis_agp aa,
                                                                     (SELECT *
                                                                        FROM analysis_instit_soft
                                                                       WHERE flg_type =
                                                                             pk_lab_tests_constant.g_analysis_can_req
                                                                         AND id_software = i_prof.software
                                                                         AND id_institution = i_prof.institution
                                                                         AND flg_available = pk_lab_tests_constant.g_available
                                                                         AND ((decode(l_order_exam_cat_parent,
                                                                                      pk_lab_tests_constant.g_yes,
                                                                                      (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                                       i_prof,
                                                                                                                                       id_exam_cat)
                                                                                         FROM dual),
                                                                                      id_exam_cat) = l_exam_cat AND
                                                                             instr(l_order_criteria, 'C') != 0) OR
                                                                             instr(l_order_criteria, 'C') = 0)) ais
                                                               WHERE aa.id_analysis_group = ag.id_analysis_group
                                                                 AND aa.flg_available = pk_lab_tests_constant.g_available
                                                                 AND aa.id_analysis = ais.id_analysis
                                                                 AND aa.id_sample_type = ais.id_sample_type)
                                                       GROUP BY aa.id_analysis_group)))
                                               AND i_harvest IS NULL
                                               AND rownum > 0)))
                     WHERE rn = 1
                     ORDER BY rank, desc_analysis);
        
        ELSIF i_flg_type = pk_lab_tests_constant.g_analysis_complaint
              AND l_complaint IS NOT NULL
              AND l_complaint.count > 0
        THEN
            g_error := 'GET CURSOR';
            SELECT t_lab_tests_for_selection(id_analysis,
                                             desc_analysis,
                                             id_sample_type,
                                             desc_sample_type,
                                             id_analysis_instit_soft,
                                             desc_perform,
                                             flg_clinical_question,
                                             TYPE,
                                             rank)
              BULK COLLECT
              INTO l_tbl_lab_tests_for_selection
              FROM (SELECT id_analysis,
                           decode(TYPE,
                                  'A',
                                  (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                   i_prof,
                                                                                   pk_lab_tests_constant.g_analysis_alias,
                                                                                   'ANALYSIS.CODE_ANALYSIS.' || id_analysis,
                                                                                   'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                   id_sample_type,
                                                                                   NULL)
                                     FROM dual) || (SELECT pk_lab_tests_utils.get_lab_test_with_codification(i_lang,
                                                                                                             i_prof,
                                                                                                             id_analysis,
                                                                                                             id_sample_type)
                                                      FROM dual),
                                  (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                   i_prof,
                                                                                   pk_lab_tests_constant.g_analysis_group_alias,
                                                                                   'ANALYSIS_GROUP.CODE_ANALYSIS_GROUP.' ||
                                                                                   id_analysis,
                                                                                   NULL)
                                     FROM dual)) desc_analysis,
                           id_sample_type,
                           (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                            i_prof,
                                                                            pk_lab_tests_constant.g_analysis_sample_alias,
                                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                            id_sample_type,
                                                                            NULL)
                              FROM dual) desc_sample_type,
                           id_analysis_instit_soft,
                           desc_perform,
                           flg_clinical_question,
                           TYPE,
                           decode(TYPE,
                                  'A',
                                  (SELECT pk_lab_tests_utils.get_lab_test_rank(i_lang, i_prof, id_analysis, NULL)
                                     FROM dual),
                                  (SELECT pk_lab_tests_utils.get_lab_test_group_rank(i_lang, i_prof, id_analysis, NULL)
                                     FROM dual)) rank
                      FROM (SELECT DISTINCT a.id_analysis,
                                            ltc.id_sample_type,
                                            ais.id_analysis_instit_soft,
                                            decode(ais.flg_execute, pk_lab_tests_constant.g_no, l_msg, NULL) desc_perform,
                                            CASE
                                                 WHEN aq.id_analysis IS NOT NULL
                                                      AND aq.id_sample_type IS NOT NULL
                                                      AND aq.id_sample_type = ast.id_sample_type THEN
                                                  CASE
                                                      WHEN instr(nvl(aq.flg_mandatory, pk_lab_tests_constant.g_no),
                                                                 pk_lab_tests_constant.g_yes) = 0 THEN
                                                       pk_lab_tests_constant.g_yes
                                                      ELSE
                                                       'M'
                                                  END
                                                 ELSE
                                                  pk_lab_tests_constant.g_no
                                             END flg_clinical_question,
                                            'A' TYPE
                              FROM analysis a,
                                   (SELECT *
                                      FROM analysis_sample_type
                                     WHERE flg_available = pk_lab_tests_constant.g_available
                                       AND (i_analysis_req IS NULL OR
                                           ((id_sample_type = l_sample_type AND instr(l_order_criteria, 'S') != 0) OR
                                           instr(l_order_criteria, 'S') = 0))) ast,
                                   (SELECT *
                                      FROM lab_tests_complaint
                                     WHERE id_complaint IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                             *
                                                              FROM TABLE(l_complaint) t)
                                       AND flg_available = pk_lab_tests_constant.g_available) ltc,
                                   (SELECT *
                                      FROM analysis_instit_soft
                                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                       AND id_software = i_prof.software
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_lab_tests_constant.g_available
                                       AND (i_analysis_req IS NULL OR
                                           ((decode(l_order_exam_cat_parent,
                                                     pk_lab_tests_constant.g_yes,
                                                     (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                      i_prof,
                                                                                                      id_exam_cat)
                                                        FROM dual),
                                                     id_exam_cat) = l_exam_cat AND instr(l_order_criteria, 'C') != 0) OR
                                           instr(l_order_criteria, 'C') = 0))) ais,
                                   analysis_instit_recipient air,
                                   (SELECT *
                                      FROM analysis_room
                                     WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_lab_tests_constant.g_yes
                                       AND flg_default = pk_lab_tests_constant.g_yes) ar,
                                   (SELECT id_analysis, id_sample_type, concatenate(flg_mandatory) flg_mandatory
                                      FROM (SELECT DISTINCT aq.id_analysis, aq.id_sample_type, aq.flg_mandatory
                                              FROM analysis_questionnaire aq
                                             WHERE aq.id_institution = i_prof.institution
                                               AND aq.flg_available = pk_lab_tests_constant.g_available
                                               AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                                     GROUP BY id_analysis, id_sample_type) aq,
                                   (SELECT DISTINCT gar.id_record id_analysis
                                      FROM group_access ga
                                     INNER JOIN group_access_prof gaf
                                        ON gaf.id_group_access = ga.id_group_access
                                     INNER JOIN group_access_record gar
                                        ON gar.id_group_access = ga.id_group_access
                                     WHERE gaf.id_professional = i_prof.id
                                       AND ga.id_institution IN (i_prof.institution, 0)
                                       AND ga.id_software IN (i_prof.software, 0)
                                       AND ga.flg_type = 'A'
                                       AND gar.flg_type = 'A'
                                       AND ga.flg_available = pk_lab_tests_constant.g_available
                                       AND gaf.flg_available = pk_lab_tests_constant.g_available
                                       AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                             WHERE a.flg_available = pk_lab_tests_constant.g_available
                               AND a.id_analysis = ast.id_analysis
                               AND ast.id_analysis = ltc.id_analysis
                               AND ast.id_sample_type = ltc.id_sample_type
                               AND ast.id_analysis = ais.id_analysis
                               AND ast.id_sample_type = ais.id_sample_type
                               AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                               AND (i_harvest IS NULL OR
                                   (ast.id_sample_type = l_sample_type AND EXISTS
                                    (SELECT 1
                                        FROM analysis_harvest ah
                                       WHERE ah.id_harvest = i_harvest
                                         AND ah.id_sample_recipient = air.id_sample_recipient)))
                               AND ast.id_analysis = ar.id_analysis
                               AND ast.id_sample_type = ar.id_sample_type
                               AND EXISTS
                             (SELECT 1
                                      FROM analysis_param ap
                                     WHERE ap.id_software = i_prof.software
                                       AND ap.id_institution = i_prof.institution
                                       AND ap.flg_available = pk_lab_tests_constant.g_available
                                       AND ap.id_analysis = ast.id_analysis
                                       AND ap.id_sample_type = ast.id_sample_type)
                               AND ar.id_analysis = aq.id_analysis(+)
                               AND ar.id_sample_type = aq.id_sample_type(+)
                               AND a.id_analysis = acs.id_analysis(+)
                               AND (l_prof_access = 0 OR (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                               AND (i_patient IS NULL OR
                                   (((l_pat.gender IS NOT NULL AND coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                   ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                   l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                   (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND nvl(a.age_max, nvl(l_pat.age, 0)) OR
                                   l_pat.age IS NULL)))
                               AND rownum > 0
                            UNION ALL
                            SELECT DISTINCT ag.id_analysis_group id_analysis,
                                            NULL id_sample_type,
                                            ais.id_analysis_instit_soft,
                                            decode(ais.flg_execute, pk_lab_tests_constant.g_no, l_msg, NULL) desc_perform,
                                            decode(aq.id_analysis_group,
                                                   NULL,
                                                   pk_lab_tests_constant.g_no,
                                                   decode(instr(nvl(aq.flg_mandatory, pk_lab_tests_constant.g_no),
                                                                pk_lab_tests_constant.g_yes),
                                                          0,
                                                          pk_lab_tests_constant.g_yes,
                                                          'M')) flg_clinical_question,
                                            'G' TYPE
                              FROM analysis_group ag,
                                   analysis_agp aa,
                                   analysis a,
                                   (SELECT *
                                      FROM lab_tests_complaint
                                     WHERE id_complaint IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                             *
                                                              FROM TABLE(l_complaint) t)
                                       AND flg_available = pk_lab_tests_constant.g_available) ltc,
                                   (SELECT *
                                      FROM analysis_instit_soft
                                     WHERE flg_type IN (pk_lab_tests_constant.g_analysis_can_req,
                                                        pk_lab_tests_constant.g_analysis_exec)
                                       AND id_software = i_prof.software
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_lab_tests_constant.g_available) ais,
                                   (SELECT id_analysis_group, concatenate(flg_mandatory) flg_mandatory
                                      FROM (SELECT DISTINCT aq.id_analysis_group, aq.flg_mandatory
                                              FROM analysis_questionnaire aq
                                             WHERE aq.id_institution = i_prof.institution
                                               AND aq.flg_available = pk_lab_tests_constant.g_available
                                               AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                                     GROUP BY id_analysis_group) aq
                             WHERE ag.id_analysis_group = aa.id_analysis_group
                               AND ag.flg_available = pk_lab_tests_constant.g_available
                               AND aa.flg_available = pk_lab_tests_constant.g_available
                               AND aa.id_analysis = a.id_analysis
                               AND a.id_analysis = ltc.id_analysis
                               AND ag.id_analysis_group = ais.id_analysis_group
                               AND ag.id_analysis_group = aq.id_analysis_group(+)
                               AND (l_prof_access = 0 OR
                                   (l_prof_access != 0 AND EXISTS
                                    (SELECT 1
                                        FROM analysis_group ag1,
                                             analysis_agp agp,
                                             (SELECT DISTINCT gar.id_record id_analysis
                                                FROM group_access ga
                                               INNER JOIN group_access_prof gaf
                                                  ON gaf.id_group_access = ga.id_group_access
                                               INNER JOIN group_access_record gar
                                                  ON gar.id_group_access = ga.id_group_access
                                               WHERE gaf.id_professional = i_prof.id
                                                 AND ga.id_institution IN (i_prof.institution, 0)
                                                 AND ga.id_software IN (i_prof.software, 0)
                                                 AND ga.flg_type = 'A'
                                                 AND gar.flg_type = 'A'
                                                 AND ga.flg_available = pk_lab_tests_constant.g_available
                                                 AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                 AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                       WHERE ag1.id_analysis_group = ag.id_analysis_group
                                         AND ag1.id_analysis_group = agp.id_analysis_group
                                         AND agp.id_analysis = acs.id_analysis
                                         AND agp.id_analysis = aa.id_analysis)))
                               AND (i_patient IS NULL OR
                                   (((l_pat.gender IS NOT NULL AND coalesce(ag.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                   ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                   l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                   (nvl(l_pat.age, 0) BETWEEN nvl(ag.age_min, 0) AND nvl(ag.age_max, nvl(l_pat.age, 0)) OR
                                   l_pat.age IS NULL)))
                               AND i_harvest IS NULL
                               AND i_analysis_req IS NULL
                               AND rownum > 0)
                     ORDER BY rank, desc_analysis);
        
        ELSIF i_flg_type = pk_lab_tests_constant.g_analysis_codification
              AND i_codification IS NOT NULL
        THEN
            g_error := 'GET CURSOR';
            SELECT t_lab_tests_for_selection(id_analysis,
                                             desc_analysis,
                                             id_sample_type,
                                             desc_sample_type,
                                             id_analysis_instit_soft,
                                             desc_perform,
                                             flg_clinical_question,
                                             TYPE,
                                             rank)
              BULK COLLECT
              INTO l_tbl_lab_tests_for_selection
              FROM (SELECT id_analysis,
                           decode(TYPE,
                                  'A',
                                  (SELECT alert.pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                         i_prof,
                                                                                         pk_lab_tests_constant.g_analysis_alias,
                                                                                         'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                         id_analysis,
                                                                                         'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                         id_sample_type,
                                                                                         NULL)
                                     FROM dual),
                                  (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                   i_prof,
                                                                                   pk_lab_tests_constant.g_analysis_group_alias,
                                                                                   'ANALYSIS_GROUP.CODE_ANALYSIS_GROUP.' ||
                                                                                   id_analysis,
                                                                                   NULL)
                                     FROM dual)) desc_analysis,
                           id_sample_type,
                           (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                            i_prof,
                                                                            pk_lab_tests_constant.g_analysis_sample_alias,
                                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                            id_sample_type,
                                                                            NULL)
                              FROM dual) desc_sample_type,
                           id_analysis_instit_soft,
                           desc_perform,
                           flg_clinical_question,
                           TYPE,
                           (SELECT pk_lab_tests_utils.get_lab_test_rank(i_lang, i_prof, id_analysis, NULL)
                              FROM dual) rank
                      FROM (SELECT DISTINCT a.id_analysis,
                                            ast.id_sample_type,
                                            ais.id_analysis_instit_soft,
                                            decode(ais.flg_execute, pk_lab_tests_constant.g_no, l_msg, NULL) desc_perform,
                                            CASE
                                                 WHEN aq.id_analysis IS NOT NULL
                                                      AND aq.id_sample_type IS NOT NULL
                                                      AND aq.id_sample_type = ast.id_sample_type THEN
                                                  CASE
                                                      WHEN instr(nvl(aq.flg_mandatory, pk_lab_tests_constant.g_no),
                                                                 pk_lab_tests_constant.g_yes) = 0 THEN
                                                       pk_lab_tests_constant.g_yes
                                                      ELSE
                                                       'M'
                                                  END
                                                 ELSE
                                                  pk_lab_tests_constant.g_no
                                             END flg_clinical_question,
                                            'A' TYPE
                              FROM analysis a,
                                   (SELECT *
                                      FROM analysis_sample_type
                                     WHERE flg_available = pk_lab_tests_constant.g_available
                                       AND (i_analysis_req IS NULL OR
                                           ((id_sample_type = l_sample_type AND instr(l_order_criteria, 'S') != 0) OR
                                           instr(l_order_criteria, 'S') = 0))) ast,
                                   (SELECT *
                                      FROM analysis_instit_soft
                                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                       AND id_software = i_prof.software
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_lab_tests_constant.g_available
                                       AND (i_analysis_req IS NULL OR
                                           ((decode(l_order_exam_cat_parent,
                                                     pk_lab_tests_constant.g_yes,
                                                     (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                      i_prof,
                                                                                                      id_exam_cat)
                                                        FROM dual),
                                                     id_exam_cat) = l_exam_cat AND instr(l_order_criteria, 'C') != 0) OR
                                           instr(l_order_criteria, 'C') = 0))) ais,
                                   analysis_instit_recipient air,
                                   (SELECT *
                                      FROM analysis_room
                                     WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_lab_tests_constant.g_yes
                                       AND flg_default = pk_lab_tests_constant.g_yes) ar,
                                   (SELECT id_analysis, id_sample_type, concatenate(flg_mandatory) flg_mandatory
                                      FROM (SELECT DISTINCT aq.id_analysis, aq.id_sample_type, aq.flg_mandatory
                                              FROM analysis_questionnaire aq
                                             WHERE aq.id_institution = i_prof.institution
                                               AND aq.flg_available = pk_lab_tests_constant.g_available
                                               AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                                     GROUP BY id_analysis, id_sample_type) aq,
                                   (SELECT DISTINCT gar.id_record id_analysis
                                      FROM group_access ga
                                     INNER JOIN group_access_prof gaf
                                        ON gaf.id_group_access = ga.id_group_access
                                     INNER JOIN group_access_record gar
                                        ON gar.id_group_access = ga.id_group_access
                                     WHERE gaf.id_professional = i_prof.id
                                       AND ga.id_institution IN (i_prof.institution, 0)
                                       AND ga.id_software IN (i_prof.software, 0)
                                       AND ga.flg_type = 'A'
                                       AND gar.flg_type = 'A'
                                       AND ga.flg_available = pk_lab_tests_constant.g_available
                                       AND gaf.flg_available = pk_lab_tests_constant.g_available
                                       AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                             WHERE a.flg_available = pk_lab_tests_constant.g_available
                               AND a.id_analysis = ast.id_analysis
                               AND ast.id_analysis = ais.id_analysis
                               AND ast.id_sample_type = ais.id_sample_type
                               AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                               AND (i_harvest IS NULL OR
                                   (ast.id_sample_type = l_sample_type AND EXISTS
                                    (SELECT 1
                                        FROM analysis_harvest ah
                                       WHERE ah.id_harvest = i_harvest
                                         AND ah.id_sample_recipient = air.id_sample_recipient)))
                               AND ast.id_analysis = ar.id_analysis
                               AND ast.id_sample_type = ar.id_sample_type
                               AND EXISTS (SELECT 1
                                      FROM analysis_param ap
                                     WHERE ap.id_software = i_prof.software
                                       AND ap.id_institution = i_prof.institution
                                       AND ap.flg_available = pk_lab_tests_constant.g_available
                                       AND ap.id_analysis = ast.id_analysis
                                       AND ap.id_sample_type = ast.id_sample_type)
                               AND EXISTS
                             (SELECT 1
                                      FROM codification_instit_soft cis, analysis_codification ac
                                     WHERE cis.id_codification = i_codification
                                       AND cis.id_institution = i_prof.institution
                                       AND cis.id_software = i_prof.software
                                       AND cis.id_codification = ac.id_codification
                                       AND ac.flg_available = pk_lab_tests_constant.g_available
                                       AND ac.id_analysis = ast.id_analysis
                                       AND ac.id_sample_type = ast.id_sample_type)
                               AND ar.id_analysis = aq.id_analysis(+)
                               AND ar.id_sample_type = aq.id_sample_type(+)
                               AND a.id_analysis = acs.id_analysis(+)
                               AND (l_prof_access = 0 OR (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                               AND (i_patient IS NULL OR
                                   (((l_pat.gender IS NOT NULL AND coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                   ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                   l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                   (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND nvl(a.age_max, nvl(l_pat.age, 0)) OR
                                   l_pat.age IS NULL)))
                            UNION ALL
                            SELECT DISTINCT t.id_analysis_group,
                                            NULL id_sample_type,
                                            t.id_analysis_instit_soft,
                                            decode(t.flg_execute, pk_lab_tests_constant.g_no, l_msg, NULL) desc_perform,
                                            decode(t.id_analysis_group,
                                                   NULL,
                                                   pk_lab_tests_constant.g_no,
                                                   decode(instr(nvl(t.flg_mandatory, pk_lab_tests_constant.g_no),
                                                                pk_lab_tests_constant.g_yes),
                                                          0,
                                                          pk_lab_tests_constant.g_yes,
                                                          'M')) flg_clinical_question,
                                            'G' TYPE
                              FROM (SELECT ag.id_analysis_group,
                                           ais.id_analysis_instit_soft,
                                           ais.flg_execute,
                                           aq.id_analysis_group aq_id_analysis_group,
                                           aq.flg_mandatory,
                                           COUNT(*)
                                      FROM analysis_group ag,
                                           analysis_agp aa,
                                           (SELECT *
                                              FROM analysis_instit_soft
                                             WHERE flg_type IN (pk_lab_tests_constant.g_analysis_can_req,
                                                                pk_lab_tests_constant.g_analysis_exec)
                                               AND id_software = i_prof.software
                                               AND id_institution = i_prof.institution
                                               AND flg_available = pk_lab_tests_constant.g_available) ais,
                                           (SELECT id_analysis_group, concatenate(flg_mandatory) flg_mandatory
                                              FROM (SELECT DISTINCT aq.id_analysis_group, aq.flg_mandatory
                                                      FROM analysis_questionnaire aq
                                                     WHERE aq.id_institution = i_prof.institution
                                                       AND aq.flg_available = pk_lab_tests_constant.g_available
                                                       AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                                             GROUP BY id_analysis_group) aq
                                     WHERE ag.id_analysis_group = aa.id_analysis_group
                                       AND ag.flg_available = pk_lab_tests_constant.g_available
                                       AND aa.flg_available = pk_lab_tests_constant.g_available
                                       AND ag.id_analysis_group = ais.id_analysis_group
                                       AND ag.id_analysis_group = aq.id_analysis_group(+)
                                       AND EXISTS
                                     (SELECT 1
                                              FROM analysis a,
                                                   (SELECT *
                                                      FROM analysis_sample_type
                                                     WHERE flg_available = pk_lab_tests_constant.g_available) ast,
                                                   (SELECT *
                                                      FROM analysis_instit_soft
                                                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                       AND id_software = i_prof.software
                                                       AND id_institution = i_prof.institution
                                                       AND flg_available = pk_lab_tests_constant.g_available) ais,
                                                   analysis_instit_recipient air,
                                                   (SELECT *
                                                      FROM analysis_room
                                                     WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                       AND id_institution = i_prof.institution
                                                       AND flg_available = pk_lab_tests_constant.g_yes
                                                       AND flg_default = pk_lab_tests_constant.g_yes) ar
                                             WHERE a.flg_available = pk_lab_tests_constant.g_available
                                               AND a.id_analysis = ast.id_analysis
                                               AND ast.id_analysis = ais.id_analysis
                                               AND ast.id_sample_type = ais.id_sample_type
                                               AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                               AND a.id_analysis = ar.id_analysis(+)
                                               AND a.id_sample_type = ar.id_sample_type(+)
                                               AND EXISTS (SELECT 1
                                                      FROM analysis_param ap
                                                     WHERE ap.id_software = i_prof.software
                                                       AND ap.id_institution = i_prof.institution
                                                       AND ap.flg_available = pk_lab_tests_constant.g_available
                                                       AND ap.id_analysis = ast.id_analysis
                                                       AND ap.id_sample_type = ast.id_sample_type)
                                               AND EXISTS
                                             (SELECT 1
                                                      FROM codification_instit_soft cis, analysis_codification ac
                                                     WHERE cis.id_codification = i_codification
                                                       AND cis.id_institution = i_prof.institution
                                                       AND cis.id_software = i_prof.software
                                                       AND cis.id_codification = ac.id_codification
                                                       AND ac.flg_available = pk_lab_tests_constant.g_available
                                                       AND ac.id_analysis = ast.id_analysis
                                                       AND ac.id_sample_type = ast.id_sample_type)
                                               AND ast.id_analysis = aa.id_analysis
                                               AND ast.id_sample_type = aa.id_sample_type)
                                       AND (l_prof_access = 0 OR
                                           (l_prof_access != 0 AND EXISTS
                                            (SELECT 1
                                                FROM analysis_group ag1,
                                                     analysis_agp agp,
                                                     (SELECT DISTINCT gar.id_record id_analysis
                                                        FROM group_access ga
                                                       INNER JOIN group_access_prof gaf
                                                          ON gaf.id_group_access = ga.id_group_access
                                                       INNER JOIN group_access_record gar
                                                          ON gar.id_group_access = ga.id_group_access
                                                       WHERE gaf.id_professional = i_prof.id
                                                         AND ga.id_institution IN (i_prof.institution, 0)
                                                         AND ga.id_software IN (i_prof.software, 0)
                                                         AND ga.flg_type = 'A'
                                                         AND gar.flg_type = 'A'
                                                         AND ga.flg_available = pk_lab_tests_constant.g_available
                                                         AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                         AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                               WHERE ag1.id_analysis_group = ag.id_analysis_group
                                                 AND ag1.id_analysis_group = agp.id_analysis_group
                                                 AND agp.id_analysis = acs.id_analysis
                                                 AND agp.id_analysis = aa.id_analysis)))
                                       AND (i_patient IS NULL OR
                                           (((l_pat.gender IS NOT NULL AND
                                           coalesce(ag.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                           ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                           l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                           (nvl(l_pat.age, 0) BETWEEN nvl(ag.age_min, 0) AND
                                           nvl(ag.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                                       AND (i_analysis_req IS NULL OR
                                           (EXISTS
                                            (SELECT 1
                                                FROM analysis_agp aa
                                               WHERE aa.id_analysis_group = ag.id_analysis_group
                                                 AND aa.flg_available = pk_lab_tests_constant.g_available HAVING
                                               COUNT(*) =
                                                     (SELECT COUNT(*)
                                                        FROM analysis_agp aa
                                                       WHERE aa.id_analysis_group = ag.id_analysis_group
                                                         AND ((aa.id_sample_type = l_sample_type AND
                                                             instr(l_order_criteria, 'S') != 0) OR
                                                             instr(l_order_criteria, 'S') = 0)
                                                         AND aa.flg_available = pk_lab_tests_constant.g_available)
                                               GROUP BY aa.id_analysis_group)))
                                       AND (i_analysis_req IS NULL OR
                                           (EXISTS
                                            (SELECT 1
                                                FROM analysis_agp aa
                                               WHERE aa.id_analysis_group = ag.id_analysis_group
                                                 AND aa.flg_available = pk_lab_tests_constant.g_available HAVING
                                               COUNT(*) =
                                                     (SELECT COUNT(*)
                                                        FROM analysis_agp aa,
                                                             (SELECT *
                                                                FROM analysis_instit_soft
                                                               WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                                 AND id_software = i_prof.software
                                                                 AND id_institution = i_prof.institution
                                                                 AND flg_available = pk_lab_tests_constant.g_available
                                                                 AND ((decode(l_order_exam_cat_parent,
                                                                              pk_lab_tests_constant.g_yes,
                                                                              (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                               i_prof,
                                                                                                                               id_exam_cat)
                                                                                 FROM dual),
                                                                              id_exam_cat) = l_exam_cat AND
                                                                     instr(l_order_criteria, 'C') != 0) OR
                                                                     instr(l_order_criteria, 'C') = 0)) ais
                                                       WHERE aa.id_analysis_group = ag.id_analysis_group
                                                         AND aa.flg_available = pk_lab_tests_constant.g_available
                                                         AND aa.id_analysis = ais.id_analysis
                                                         AND aa.id_sample_type = ais.id_sample_type)
                                               GROUP BY aa.id_analysis_group)))
                                     GROUP BY ag.id_analysis_group,
                                              ais.id_analysis_instit_soft,
                                              ais.flg_execute,
                                              aq.id_analysis_group,
                                              aq.flg_mandatory
                                    HAVING COUNT(*) = (SELECT COUNT(*)
                                                        FROM analysis_agp agp1,
                                                             (SELECT *
                                                                FROM analysis_instit_soft
                                                               WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                                 AND id_software = i_prof.software
                                                                 AND id_institution = i_prof.institution
                                                                 AND flg_available = pk_lab_tests_constant.g_available) ais1
                                                       WHERE agp1.id_analysis_group = ag.id_analysis_group
                                                         AND agp1.id_analysis = ais1.id_analysis
                                                         AND agp1.id_sample_type = ais1.id_sample_type)) t
                             WHERE rownum > 0)
                     ORDER BY rank, desc_analysis);
        END IF;
    
        RETURN l_tbl_lab_tests_for_selection;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_SELECTION_LIST',
                                              l_error);
            RETURN NULL;
    END get_lab_test_selection_list;

    FUNCTION get_lab_test_all_search
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_patient         IN patient.id_patient%TYPE,
        i_analysis_req    IN analysis_req.id_analysis_req%TYPE,
        i_sample_type     IN analysis.id_sample_type%TYPE,
        i_exam_cat        IN exam_cat.id_exam_cat%TYPE,
        i_exam_cat_parent IN exam_cat.parent_id%TYPE,
        i_codification    IN codification.id_codification%TYPE,
        i_harvest         IN harvest.id_harvest%TYPE,
        i_flg_search_type IN VARCHAR2,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN AS
    
    BEGIN
    
        IF i_flg_search_type = 'P'
        THEN
        
            IF NOT get_lab_test_group_search(i_lang         => i_lang,
                                             i_prof         => i_prof,
                                             i_patient      => i_patient,
                                             i_analysis_req => i_analysis_req,
                                             o_list         => o_list,
                                             o_error        => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
        ELSIF i_flg_search_type = 'SS'
        THEN
        
            IF NOT get_lab_test_category_search(i_lang            => i_lang,
                                                i_prof            => i_prof,
                                                i_patient         => i_patient,
                                                i_sample_type     => i_sample_type,
                                                i_exam_cat_parent => i_exam_cat_parent,
                                                i_codification    => i_codification,
                                                i_analysis_req    => i_analysis_req,
                                                i_harvest         => i_harvest,
                                                o_list            => o_list,
                                                o_error           => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        ELSE
            IF NOT get_lab_test_sample_search(i_lang         => i_lang,
                                              i_prof         => i_prof,
                                              i_patient      => i_patient,
                                              i_exam_cat     => i_exam_cat,
                                              i_codification => i_codification,
                                              i_analysis_req => i_analysis_req,
                                              i_harvest      => i_harvest,
                                              o_list         => o_list,
                                              o_error        => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_ALL_SEARCH',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_all_search;

    FUNCTION get_lab_test_search
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_patient      IN patient.id_patient%TYPE,
        i_codification IN codification.id_codification%TYPE,
        i_analysis_req IN analysis_req.id_analysis_req%TYPE,
        i_harvest      IN harvest.id_harvest%TYPE,
        i_value        IN VARCHAR2
    ) RETURN t_table_lab_tests_search IS
    
        PRAGMA AUTONOMOUS_TRANSACTION;
    
        CURSOR c_pat IS
            SELECT gender, trunc(months_between(SYSDATE, dt_birth) / 12) age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_pat c_pat%ROWTYPE;
    
        l_sample_type sample_type.id_sample_type%TYPE;
        l_exam_cat    exam_cat.id_exam_cat%TYPE;
    
        l_prof_access PLS_INTEGER;
    
        l_search sys_config.desc_sys_config%TYPE := pk_sysconfig.get_config('SHOW_LAB_TEST_WITHOUT_SAMPLE', i_prof);
    
        l_order_criteria        sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_CRITERIA', i_prof);
        l_order_exam_cat_parent sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_EXAM_CAT_PARENT',
                                                                                 i_prof);
    
        l_msg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T117');
    
        l_table_lab_tests_search t_table_lab_tests_search;
    
        l_error t_error_out;
    
    BEGIN
    
        IF i_patient IS NOT NULL
        THEN
            g_error := 'OPEN C_PAT';
            OPEN c_pat;
            FETCH c_pat
                INTO l_pat;
            CLOSE c_pat;
        END IF;
    
        g_error := 'I_ANALYSIS_REQ CONDITION';
        IF i_analysis_req IS NOT NULL
        THEN
            IF instr(l_order_criteria, 'S') != 0
            THEN
                BEGIN
                    SELECT DISTINCT ard.id_sample_type
                      INTO l_sample_type
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error       := 'MORE THEN ONE SAMPLE';
                        l_sample_type := NULL;
                END;
            END IF;
        
            IF instr(l_order_criteria, 'C') != 0
            THEN
                BEGIN
                    SELECT DISTINCT decode(l_order_exam_cat_parent,
                                           pk_lab_tests_constant.g_yes,
                                           (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                            i_prof,
                                                                                            ard.id_exam_cat)
                                              FROM dual),
                                           ard.id_exam_cat) id_exam_cat
                      INTO l_exam_cat
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error    := 'MORE THEN ONE EXAM_CAT';
                        l_exam_cat := NULL;
                END;
            END IF;
        END IF;
    
        g_error := 'I_HARVEST CONDITION';
        IF i_harvest IS NOT NULL
        THEN
            SELECT DISTINCT ard.id_sample_type
              INTO l_sample_type
              FROM analysis_harvest ah, analysis_req_det ard
             WHERE ah.id_harvest = i_harvest
               AND ah.id_analysis_req_det = ard.id_analysis_req_det;
        END IF;
    
        g_error := 'GET PROF ACCESS';
        BEGIN
            SELECT COUNT(1)
              INTO l_prof_access
              FROM group_access_prof gaf
             INNER JOIN group_access ga
                ON gaf.id_group_access = ga.id_group_access
             WHERE gaf.id_professional = i_prof.id
               AND gaf.flg_available = pk_lab_tests_constant.g_available
               AND ga.id_institution IN (i_prof.institution, 0)
               AND ga.id_software IN (i_prof.software, 0)
               AND ga.flg_available = pk_lab_tests_constant.g_available
               AND ga.flg_type = 'A';
        EXCEPTION
            WHEN OTHERS THEN
                l_prof_access := 0;
        END;
    
        DELETE FROM tbl_temp;
    
        g_error := 'OPEN C_COUNT';
    
        INSERT INTO tbl_temp
            (num_1, num_2, num_3, vc_1, vc_2, vc_3, num_4)
            WITH search AS
             (SELECT /*+materialize opt_estimate(table t rows=1)*/
               t.*, pk_lucene_utils.format_column_name(t.code_translation) table_name
                FROM TABLE(pk_translation.get_search_translation(i_lang,
                                                                 i_value,
                                                                 'ANALYSIS_SAMPLE_TYPE.CODE_ANALYSIS_SAMPLE_TYPE OR ANALYSIS_SAMPLE_TYPE_ALIAS.CODE_AST_ALIAS OR ANALYSIS_GROUP.CODE_ANALYSIS_GROUP OR ANALYSIS_GROUP_ALIAS.CODE_ANALYSIS_GROUP_ALIAS')) t)
            SELECT id_analysis,
                   id_sample_type,
                   id_analysis_instit_soft,
                   desc_perform,
                   flg_clinical_question,
                   TYPE,
                   position
              FROM (SELECT ast.id_analysis,
                           ast.id_sample_type,
                           ais.id_analysis_instit_soft,
                           decode(ais.flg_execute, pk_lab_tests_constant.g_no, l_msg, NULL) desc_perform,
                           CASE
                                WHEN aq.id_analysis IS NOT NULL
                                     AND aq.id_sample_type IS NOT NULL
                                     AND aq.id_sample_type = ast.id_sample_type THEN
                                 CASE
                                     WHEN instr(nvl(aq.flg_mandatory, pk_lab_tests_constant.g_no), pk_lab_tests_constant.g_yes) = 0 THEN
                                      pk_lab_tests_constant.g_yes
                                     ELSE
                                      'M'
                                 END
                                ELSE
                                 pk_lab_tests_constant.g_no
                            END flg_clinical_question,
                           'A' TYPE,
                           t.position
                      FROM analysis_sample_type ast,
                           (SELECT *
                              FROM search
                             WHERE table_name = 'ANALYSIS_SAMPLE_TYPE.CODE_ANALYSIS_SAMPLE_TYPE') t,
                           (SELECT *
                              FROM analysis_instit_soft
                             WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution
                               AND flg_available = pk_lab_tests_constant.g_available
                               AND (i_analysis_req IS NULL OR
                                   ((decode(l_order_exam_cat_parent,
                                             pk_lab_tests_constant.g_yes,
                                             (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang, i_prof, id_exam_cat)
                                                FROM dual),
                                             id_exam_cat) = l_exam_cat AND instr(l_order_criteria, 'C') != 0) OR
                                   instr(l_order_criteria, 'C') = 0))) ais,
                           analysis_instit_recipient air,
                           (SELECT *
                              FROM analysis_room
                             WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                               AND id_institution = i_prof.institution
                               AND flg_available = pk_lab_tests_constant.g_yes
                               AND flg_default = pk_lab_tests_constant.g_yes) ar,
                           (SELECT id_analysis, id_sample_type, concatenate(flg_mandatory) flg_mandatory
                              FROM (SELECT DISTINCT aq.id_analysis, aq.id_sample_type, aq.flg_mandatory
                                      FROM analysis_questionnaire aq
                                     WHERE aq.id_institution = i_prof.institution
                                       AND aq.flg_available = pk_lab_tests_constant.g_available
                                       AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                             GROUP BY id_analysis, id_sample_type) aq,
                           (SELECT DISTINCT gar.id_record id_analysis
                              FROM group_access ga
                             INNER JOIN group_access_prof gaf
                                ON gaf.id_group_access = ga.id_group_access
                             INNER JOIN group_access_record gar
                                ON gar.id_group_access = ga.id_group_access
                             WHERE gaf.id_professional = i_prof.id
                               AND ga.id_institution IN (i_prof.institution, 0)
                               AND ga.id_software IN (i_prof.software, 0)
                               AND ga.flg_type = 'A'
                               AND gar.flg_type = 'A'
                               AND ga.flg_available = pk_lab_tests_constant.g_available
                               AND gaf.flg_available = pk_lab_tests_constant.g_available
                               AND gar.flg_available = pk_lab_tests_constant.g_available) acs,
                           (SELECT DISTINCT gar.id_record id_analysis
                              FROM group_access ga
                             INNER JOIN group_access_prof gaf
                                ON gaf.id_group_access = ga.id_group_access
                             INNER JOIN group_access_record gar
                                ON gar.id_group_access = ga.id_group_access
                             WHERE ga.id_institution IN (i_prof.institution)
                               AND ga.id_software IN (i_prof.software)
                               AND ga.flg_type = pk_lab_tests_constant.g_infectious_diseases_orders
                               AND gar.flg_type = 'A'
                               AND ga.flg_available = pk_lab_tests_constant.g_available
                               AND gaf.flg_available = pk_lab_tests_constant.g_available
                               AND gar.flg_available = pk_lab_tests_constant.g_available) a_infect
                     WHERE t.code_translation = ast.code_analysis_sample_type
                       AND t.desc_translation IS NOT NULL
                       AND ast.flg_available = pk_lab_tests_constant.g_available
                       AND (i_analysis_req IS NULL OR
                           ((ast.id_sample_type = l_sample_type AND instr(l_order_criteria, 'S') != 0) OR
                           instr(l_order_criteria, 'S') = 0))
                       AND ast.id_analysis = ais.id_analysis
                       AND ast.id_sample_type = ais.id_sample_type
                       AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                       AND (i_harvest IS NULL OR
                           (ast.id_sample_type = l_sample_type AND EXISTS
                            (SELECT 1
                                FROM analysis_harvest ah
                               WHERE ah.id_harvest = i_harvest
                                 AND ah.id_sample_recipient = air.id_sample_recipient)))
                       AND ast.id_analysis = ar.id_analysis
                       AND ast.id_sample_type = ar.id_sample_type
                       AND ast.id_analysis = a_infect.id_analysis(+)
                       AND EXISTS
                     (SELECT 1
                              FROM analysis_param ap
                             WHERE ap.id_software = i_prof.software
                               AND ap.id_institution = i_prof.institution
                               AND ap.flg_available = pk_lab_tests_constant.g_available
                               AND ap.id_analysis = ast.id_analysis
                               AND ap.id_sample_type = ast.id_sample_type)
                       AND (i_codification IS NULL OR
                           (i_codification IS NOT NULL AND EXISTS
                            (SELECT 1
                                FROM codification_instit_soft cis, analysis_codification ac
                               WHERE cis.id_codification = i_codification
                                 AND cis.id_institution = i_prof.institution
                                 AND cis.id_software = i_prof.software
                                 AND cis.id_codification = ac.id_codification
                                 AND ac.flg_available = pk_lab_tests_constant.g_available
                                 AND ac.id_analysis = ast.id_analysis
                                 AND ac.id_sample_type = ast.id_sample_type)))
                       AND ar.id_analysis = aq.id_analysis(+)
                       AND ar.id_sample_type = aq.id_sample_type(+)
                       AND ast.id_analysis = acs.id_analysis(+)
                       AND ((l_prof_access = 0 AND a_infect.id_analysis IS NULL) OR
                           (l_prof_access = 0 AND a_infect.id_analysis IS NOT NULL AND EXISTS
                            (SELECT 1
                                FROM group_access ga
                               INNER JOIN group_access_prof gaf
                                  ON gaf.id_group_access = ga.id_group_access
                               INNER JOIN group_access_record gar
                                  ON gar.id_group_access = ga.id_group_access
                               WHERE gaf.id_professional = i_prof.id
                                 AND ga.id_institution IN (i_prof.institution)
                                 AND ga.id_software IN (i_prof.software)
                                 AND ga.flg_type = pk_lab_tests_constant.g_infectious_diseases_orders
                                 AND gar.flg_type = 'A'
                                 AND ga.flg_available = pk_lab_tests_constant.g_available
                                 AND gaf.flg_available = pk_lab_tests_constant.g_available
                                 AND gar.flg_available = pk_lab_tests_constant.g_available)) OR
                           (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                       AND (i_patient IS NULL OR
                           (((l_pat.gender IS NOT NULL AND coalesce(ast.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                           ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                           l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                           (nvl(l_pat.age, 0) BETWEEN nvl(ast.age_min, 0) AND nvl(ast.age_max, nvl(l_pat.age, 0)) OR
                           l_pat.age IS NULL)))
                    UNION -- analysis sample type alias
                    SELECT ast.id_analysis,
                           ast.id_sample_type,
                           ais.id_analysis_instit_soft,
                           decode(ais.flg_execute, pk_lab_tests_constant.g_no, l_msg, NULL) desc_perform,
                           CASE
                               WHEN aq.id_analysis IS NOT NULL
                                    AND aq.id_sample_type IS NOT NULL
                                    AND aq.id_sample_type = ast.id_sample_type THEN
                                CASE
                                    WHEN instr(nvl(aq.flg_mandatory, pk_lab_tests_constant.g_no), pk_lab_tests_constant.g_yes) = 0 THEN
                                     pk_lab_tests_constant.g_yes
                                    ELSE
                                     'M'
                                END
                               ELSE
                                pk_lab_tests_constant.g_no
                           END flg_clinical_question,
                           'A' TYPE,
                           t.position
                      FROM (SELECT *
                              FROM analysis_sample_type
                             WHERE flg_available = pk_lab_tests_constant.g_available
                               AND (i_analysis_req IS NULL OR
                                   ((id_sample_type = l_sample_type AND instr(l_order_criteria, 'S') != 0) OR
                                   instr(l_order_criteria, 'S') = 0))) ast,
                           analysis_sample_type_alias asta,
                           (SELECT *
                              FROM search
                             WHERE table_name = 'ANALYSIS_SAMPLE_TYPE_ALIAS.CODE_AST_ALIAS') t,
                           (SELECT *
                              FROM analysis_instit_soft
                             WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution
                               AND flg_available = pk_lab_tests_constant.g_available
                               AND (i_analysis_req IS NULL OR
                                   ((decode(l_order_exam_cat_parent,
                                             pk_lab_tests_constant.g_yes,
                                             (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang, i_prof, id_exam_cat)
                                                FROM dual),
                                             id_exam_cat) = l_exam_cat AND instr(l_order_criteria, 'C') != 0) OR
                                   instr(l_order_criteria, 'C') = 0))) ais,
                           analysis_instit_recipient air,
                           (SELECT *
                              FROM analysis_room
                             WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                               AND id_institution = i_prof.institution
                               AND flg_available = pk_lab_tests_constant.g_yes
                               AND flg_default = pk_lab_tests_constant.g_yes) ar,
                           (SELECT id_analysis, id_sample_type, concatenate(flg_mandatory) flg_mandatory
                              FROM (SELECT DISTINCT aq.id_analysis, aq.id_sample_type, aq.flg_mandatory
                                      FROM analysis_questionnaire aq
                                     WHERE aq.id_institution = i_prof.institution
                                       AND aq.flg_available = pk_lab_tests_constant.g_available
                                       AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                             GROUP BY id_analysis, id_sample_type) aq,
                           (SELECT DISTINCT gar.id_record id_analysis
                              FROM group_access ga
                             INNER JOIN group_access_prof gaf
                                ON gaf.id_group_access = ga.id_group_access
                             INNER JOIN group_access_record gar
                                ON gar.id_group_access = ga.id_group_access
                             WHERE gaf.id_professional = i_prof.id
                               AND ga.id_institution IN (i_prof.institution, 0)
                               AND ga.id_software IN (i_prof.software, 0)
                               AND ga.flg_type = 'A'
                               AND gar.flg_type = 'A'
                               AND ga.flg_available = pk_lab_tests_constant.g_available
                               AND gaf.flg_available = pk_lab_tests_constant.g_available
                               AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                     WHERE t.code_translation = asta.code_ast_alias
                       AND t.desc_translation IS NOT NULL
                       AND decode(asta.id_institution, 0, nvl(i_prof.institution, 0), asta.id_institution) =
                           nvl(i_prof.institution, 0)
                       AND decode(asta.id_software, 0, nvl(i_prof.software, 0), asta.id_software) =
                           nvl(i_prof.software, 0)
                       AND decode(nvl(asta.id_professional, 0), 0, nvl(i_prof.id, 0), asta.id_professional) =
                           nvl(i_prof.id, 0)
                       AND asta.id_analysis = ast.id_analysis
                       AND asta.id_sample_type = ast.id_sample_type
                       AND ast.flg_available = pk_lab_tests_constant.g_available
                       AND ast.id_analysis = ais.id_analysis
                       AND ast.id_sample_type = ais.id_sample_type
                       AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                       AND (i_harvest IS NULL OR
                           (ast.id_sample_type = l_sample_type AND EXISTS
                            (SELECT 1
                                FROM analysis_harvest ah
                               WHERE ah.id_harvest = i_harvest
                                 AND ah.id_sample_recipient = air.id_sample_recipient)))
                       AND ast.id_analysis = ar.id_analysis
                       AND ast.id_sample_type = ar.id_sample_type
                       AND EXISTS
                     (SELECT 1
                              FROM analysis_param ap
                             WHERE ap.id_software = i_prof.software
                               AND ap.id_institution = i_prof.institution
                               AND ap.flg_available = pk_lab_tests_constant.g_available
                               AND ap.id_analysis = ast.id_analysis
                               AND ap.id_sample_type = ast.id_sample_type)
                       AND (i_codification IS NULL OR
                           (i_codification IS NOT NULL AND EXISTS
                            (SELECT 1
                                FROM codification_instit_soft cis, analysis_codification ac
                               WHERE cis.id_codification = i_codification
                                 AND cis.id_institution = i_prof.institution
                                 AND cis.id_software = i_prof.software
                                 AND cis.id_codification = ac.id_codification
                                 AND ac.flg_available = pk_lab_tests_constant.g_available
                                 AND ac.id_analysis = ast.id_analysis
                                 AND ac.id_sample_type = ast.id_sample_type)))
                       AND ar.id_analysis = aq.id_analysis(+)
                       AND ar.id_sample_type = aq.id_sample_type(+)
                       AND ast.id_analysis = acs.id_analysis(+)
                       AND (l_prof_access = 0 OR (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                       AND (i_patient IS NULL OR
                           (((l_pat.gender IS NOT NULL AND coalesce(ast.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                           ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                           l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                           (nvl(l_pat.age, 0) BETWEEN nvl(ast.age_min, 0) AND nvl(ast.age_max, nvl(l_pat.age, 0)) OR
                           l_pat.age IS NULL)))
                    UNION -- analysis group                    
                    SELECT DISTINCT t.id_analysis_group id_analysis,
                                    NULL id_sample_type,
                                    t.id_analysis_instit_soft,
                                    decode(t.flg_execute, pk_lab_tests_constant.g_no, l_msg, NULL) desc_perform,
                                    decode(t.id_analysis_group,
                                           NULL,
                                           pk_lab_tests_constant.g_no,
                                           decode(instr(nvl(t.flg_mandatory, pk_lab_tests_constant.g_no),
                                                        pk_lab_tests_constant.g_yes),
                                                  0,
                                                  pk_lab_tests_constant.g_yes,
                                                  'M')) flg_clinical_question,
                                    'G' TYPE,
                                    t.position
                      FROM (SELECT ag.id_analysis_group,
                                   ais.flg_execute,
                                   ais.id_analysis_instit_soft,
                                   aq.id_analysis_group aq_id_analysis_group,
                                   aq.flg_mandatory,
                                   t.position,
                                   COUNT(*)
                              FROM analysis_group ag,
                                   analysis_agp aa,
                                   (SELECT *
                                      FROM search
                                     WHERE table_name = 'ANALYSIS_GROUP.CODE_ANALYSIS_GROUP') t,
                                   (SELECT *
                                      FROM analysis_instit_soft
                                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                       AND id_software = i_prof.software
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_lab_tests_constant.g_available) ais,
                                   (SELECT id_analysis_group, concatenate(flg_mandatory) flg_mandatory
                                      FROM (SELECT DISTINCT aq.id_analysis_group, aq.flg_mandatory
                                              FROM analysis_questionnaire aq
                                             WHERE aq.id_institution = i_prof.institution
                                               AND aq.flg_available = pk_lab_tests_constant.g_available
                                               AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                                     GROUP BY id_analysis_group) aq
                             WHERE t.code_translation = ag.code_analysis_group
                               AND t.desc_translation IS NOT NULL
                               AND ag.id_analysis_group = aa.id_analysis_group
                               AND ag.flg_available = pk_lab_tests_constant.g_available
                               AND ag.id_analysis_group = ais.id_analysis_group
                               AND ag.id_analysis_group = aq.id_analysis_group(+)
                               AND EXISTS
                             (SELECT 1
                                      FROM analysis a,
                                           (SELECT *
                                              FROM analysis_sample_type
                                             WHERE flg_available = pk_lab_tests_constant.g_available) ast,
                                           (SELECT *
                                              FROM analysis_instit_soft
                                             WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                               AND id_software = i_prof.software
                                               AND id_institution = i_prof.institution
                                               AND flg_available = pk_lab_tests_constant.g_available) ais,
                                           analysis_instit_recipient air,
                                           (SELECT *
                                              FROM analysis_room
                                             WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                               AND id_institution = i_prof.institution
                                               AND flg_available = pk_lab_tests_constant.g_yes
                                               AND flg_default = pk_lab_tests_constant.g_yes) ar
                                     WHERE a.flg_available = pk_lab_tests_constant.g_available
                                       AND a.id_analysis = ast.id_analysis
                                       AND ast.id_analysis = ais.id_analysis
                                       AND ast.id_sample_type = ais.id_sample_type
                                       AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                       AND ast.id_analysis = ar.id_analysis(+)
                                       AND ast.id_sample_type = ar.id_sample_type(+)
                                       AND EXISTS (SELECT 1
                                              FROM analysis_param ap
                                             WHERE ap.id_software = i_prof.software
                                               AND ap.id_institution = i_prof.institution
                                               AND ap.flg_available = pk_lab_tests_constant.g_available
                                               AND ap.id_analysis = ast.id_analysis
                                               AND ap.id_sample_type = ast.id_sample_type)
                                       AND (i_codification IS NULL OR
                                           (i_codification IS NOT NULL AND EXISTS
                                            (SELECT 1
                                                FROM codification_instit_soft cis, analysis_codification ac
                                               WHERE cis.id_codification = i_codification
                                                 AND cis.id_institution = i_prof.institution
                                                 AND cis.id_software = i_prof.software
                                                 AND cis.id_codification = ac.id_codification
                                                 AND ac.flg_available = pk_lab_tests_constant.g_available
                                                 AND ac.id_analysis = ast.id_analysis
                                                 AND ac.id_sample_type = ast.id_sample_type)))
                                       AND ast.id_analysis = aa.id_analysis
                                       AND ast.id_sample_type = aa.id_sample_type)
                               AND (l_prof_access = 0 OR
                                   (l_prof_access != 0 AND EXISTS
                                    (SELECT 1
                                        FROM analysis_group ag1,
                                             analysis_agp agp,
                                             (SELECT DISTINCT gar.id_record id_analysis
                                                FROM group_access ga
                                               INNER JOIN group_access_prof gaf
                                                  ON gaf.id_group_access = ga.id_group_access
                                               INNER JOIN group_access_record gar
                                                  ON gar.id_group_access = ga.id_group_access
                                               WHERE gaf.id_professional = i_prof.id
                                                 AND ga.id_institution IN (i_prof.institution, 0)
                                                 AND ga.id_software IN (i_prof.software, 0)
                                                 AND ga.flg_type = 'A'
                                                 AND gar.flg_type = 'A'
                                                 AND ga.flg_available = pk_lab_tests_constant.g_available
                                                 AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                 AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                       WHERE ag1.id_analysis_group = ag.id_analysis_group
                                         AND ag1.id_analysis_group = agp.id_analysis_group
                                         AND agp.id_analysis = acs.id_analysis
                                         AND agp.id_analysis = aa.id_analysis)))
                               AND (i_patient IS NULL OR
                                   (((l_pat.gender IS NOT NULL AND coalesce(ag.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                   ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                   l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                   (nvl(l_pat.age, 0) BETWEEN nvl(ag.age_min, 0) AND nvl(ag.age_max, nvl(l_pat.age, 0)) OR
                                   l_pat.age IS NULL)))
                               AND (i_analysis_req IS NULL OR
                                   (EXISTS
                                    (SELECT 1
                                        FROM analysis_agp aa
                                       WHERE aa.id_analysis_group = ag.id_analysis_group
                                         AND aa.flg_available = pk_lab_tests_constant.g_available HAVING
                                       COUNT(*) =
                                             (SELECT COUNT(*)
                                                FROM analysis_agp aa
                                               WHERE aa.id_analysis_group = ag.id_analysis_group
                                                 AND ((aa.id_sample_type = l_sample_type AND
                                                     instr(l_order_criteria, 'S') != 0) OR instr(l_order_criteria, 'S') = 0)
                                                 AND aa.flg_available = pk_lab_tests_constant.g_available)
                                       GROUP BY aa.id_analysis_group)))
                               AND (i_analysis_req IS NULL OR
                                   (EXISTS
                                    (SELECT 1
                                        FROM analysis_agp aa
                                       WHERE aa.id_analysis_group = ag.id_analysis_group
                                         AND aa.flg_available = pk_lab_tests_constant.g_available HAVING
                                       COUNT(*) = (SELECT COUNT(*)
                                                           FROM analysis_agp aa,
                                                                (SELECT *
                                                                   FROM analysis_instit_soft
                                                                  WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                                    AND id_software = i_prof.software
                                                                    AND id_institution = i_prof.institution
                                                                    AND flg_available = pk_lab_tests_constant.g_available
                                                                    AND ((decode(l_order_exam_cat_parent,
                                                                                 pk_lab_tests_constant.g_yes,
                                                                                 (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                                  i_prof,
                                                                                                                                  id_exam_cat)
                                                                                    FROM dual),
                                                                                 id_exam_cat) = l_exam_cat AND
                                                                        instr(l_order_criteria, 'C') != 0) OR
                                                                        instr(l_order_criteria, 'C') = 0)) ais
                                                          WHERE aa.id_analysis_group = ag.id_analysis_group
                                                            AND aa.flg_available = pk_lab_tests_constant.g_available
                                                            AND aa.id_analysis = ais.id_analysis
                                                            AND aa.id_sample_type = ais.id_sample_type)
                                       GROUP BY aa.id_analysis_group)))
                               AND i_harvest IS NULL
                             GROUP BY ag.id_analysis_group,
                                      ais.flg_execute,
                                      ais.id_analysis_instit_soft,
                                      aq.id_analysis_group,
                                      aq.flg_mandatory,
                                      t.position
                            HAVING COUNT(*) = (SELECT COUNT(*)
                                                FROM analysis_agp agp1,
                                                     (SELECT *
                                                        FROM analysis_instit_soft
                                                       WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                         AND id_software = i_prof.software
                                                         AND id_institution = i_prof.institution
                                                         AND flg_available = pk_lab_tests_constant.g_available) ais1
                                               WHERE agp1.id_analysis_group = ag.id_analysis_group
                                                 AND agp1.id_analysis = ais1.id_analysis
                                                 AND agp1.id_sample_type = ais1.id_sample_type)) t
                    UNION -- analysis group alias
                    SELECT ag.id_analysis_group id_analysis,
                           NULL id_sample_type,
                           ais.id_analysis_instit_soft,
                           NULL desc_perform,
                           decode(aq.id_analysis_group,
                                  NULL,
                                  pk_lab_tests_constant.g_no,
                                  decode(instr(nvl(aq.flg_mandatory, pk_lab_tests_constant.g_no),
                                               pk_lab_tests_constant.g_yes),
                                         0,
                                         pk_lab_tests_constant.g_yes,
                                         'M')) flg_clinical_question,
                           'G' TYPE,
                           t.position
                      FROM analysis_group_alias aga,
                           analysis_group ag,
                           analysis_agp aa,
                           (SELECT *
                              FROM search
                             WHERE table_name = 'ANALYSIS_GROUP_ALIAS.CODE_ANALYSIS_GROUP_ALIAS') t,
                           (SELECT *
                              FROM analysis_instit_soft
                             WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution
                               AND flg_available = pk_lab_tests_constant.g_available) ais,
                           (SELECT id_analysis_group, concatenate(flg_mandatory) flg_mandatory
                              FROM (SELECT DISTINCT aq.id_analysis_group, aq.flg_mandatory
                                      FROM analysis_questionnaire aq
                                     WHERE aq.id_institution = i_prof.institution
                                       AND aq.flg_available = pk_lab_tests_constant.g_available
                                       AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                             GROUP BY id_analysis_group) aq
                     WHERE t.code_translation = aga.code_analysis_group_alias
                       AND t.desc_translation IS NOT NULL
                       AND aga.id_analysis_group = ag.id_analysis_group
                       AND ag.flg_available = pk_lab_tests_constant.g_available
                       AND ag.id_analysis_group = ais.id_analysis_group
                       AND ag.id_analysis_group = aa.id_analysis_group
                       AND ag.id_analysis_group = aq.id_analysis_group(+)
                       AND EXISTS
                     (SELECT 1
                              FROM analysis a,
                                   (SELECT *
                                      FROM analysis_sample_type
                                     WHERE flg_available = pk_lab_tests_constant.g_available) ast,
                                   (SELECT *
                                      FROM analysis_instit_soft
                                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                       AND id_software = i_prof.software
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_lab_tests_constant.g_available) ais,
                                   analysis_instit_recipient air,
                                   (SELECT *
                                      FROM analysis_room
                                     WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_lab_tests_constant.g_yes
                                       AND flg_default = pk_lab_tests_constant.g_yes) ar
                             WHERE a.flg_available = pk_lab_tests_constant.g_available
                               AND a.id_analysis = ast.id_analysis
                               AND ast.id_analysis = ais.id_analysis
                               AND ast.id_sample_type = ais.id_sample_type
                               AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                               AND ast.id_analysis = ar.id_analysis
                               AND ast.id_sample_type = ar.id_sample_type
                               AND EXISTS (SELECT 1
                                      FROM analysis_param ap
                                     WHERE ap.id_software = i_prof.software
                                       AND ap.id_institution = i_prof.institution
                                       AND ap.flg_available = pk_lab_tests_constant.g_available
                                       AND ap.id_analysis = ast.id_analysis
                                       AND ap.id_sample_type = ast.id_sample_type)
                               AND ast.id_analysis = aa.id_analysis
                               AND ast.id_sample_type = aa.id_sample_type)
                       AND (l_prof_access = 0 OR (l_prof_access != 0 AND EXISTS
                            (SELECT 1
                                                     FROM analysis_group ag1,
                                                          analysis_agp agp,
                                                          (SELECT DISTINCT gar.id_record id_analysis
                                                             FROM group_access ga
                                                            INNER JOIN group_access_prof gaf
                                                               ON gaf.id_group_access = ga.id_group_access
                                                            INNER JOIN group_access_record gar
                                                               ON gar.id_group_access = ga.id_group_access
                                                            WHERE gaf.id_professional = i_prof.id
                                                              AND ga.id_institution IN (i_prof.institution, 0)
                                                              AND ga.id_software IN (i_prof.software, 0)
                                                              AND ga.flg_type = 'A'
                                                              AND gar.flg_type = 'A'
                                                              AND ga.flg_available = pk_lab_tests_constant.g_available
                                                              AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                              AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                                    WHERE ag1.id_analysis_group = ag.id_analysis_group
                                                      AND ag1.id_analysis_group = agp.id_analysis_group
                                                      AND agp.id_analysis = acs.id_analysis
                                                      AND agp.id_analysis = aa.id_analysis)))
                       AND (i_patient IS NULL OR
                           (((l_pat.gender IS NOT NULL AND coalesce(ag.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                           ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                           l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                           (nvl(l_pat.age, 0) BETWEEN nvl(ag.age_min, 0) AND nvl(ag.age_max, nvl(l_pat.age, 0)) OR
                           l_pat.age IS NULL)))
                       AND (i_analysis_req IS NULL OR
                           (EXISTS (SELECT 1
                                       FROM analysis_agp aa
                                      WHERE aa.id_analysis_group = ag.id_analysis_group
                                        AND aa.flg_available = pk_lab_tests_constant.g_available HAVING
                                      COUNT(*) =
                                            (SELECT COUNT(*)
                                               FROM analysis_agp aa
                                              WHERE aa.id_analysis_group = ag.id_analysis_group
                                                AND ((aa.id_sample_type = l_sample_type AND
                                                    instr(l_order_criteria, 'S') != 0) OR instr(l_order_criteria, 'S') = 0)
                                                AND aa.flg_available = pk_lab_tests_constant.g_available)
                                      GROUP BY aa.id_analysis_group)))
                       AND (i_analysis_req IS NULL OR
                           (EXISTS (SELECT 1
                                       FROM analysis_agp aa
                                      WHERE aa.id_analysis_group = ag.id_analysis_group
                                        AND aa.flg_available = pk_lab_tests_constant.g_available HAVING
                                      COUNT(*) = (SELECT COUNT(*)
                                                          FROM analysis_agp aa,
                                                               (SELECT *
                                                                  FROM analysis_instit_soft
                                                                 WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                                   AND id_software = i_prof.software
                                                                   AND id_institution = i_prof.institution
                                                                   AND flg_available = pk_lab_tests_constant.g_available
                                                                   AND ((decode(l_order_exam_cat_parent,
                                                                                pk_lab_tests_constant.g_yes,
                                                                                (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                                 i_prof,
                                                                                                                                 id_exam_cat)
                                                                                   FROM dual),
                                                                                id_exam_cat) = l_exam_cat AND
                                                                       instr(l_order_criteria, 'C') != 0) OR
                                                                       instr(l_order_criteria, 'C') = 0)) ais
                                                         WHERE aa.id_analysis_group = ag.id_analysis_group
                                                           AND aa.flg_available = pk_lab_tests_constant.g_available
                                                           AND aa.id_analysis = ais.id_analysis
                                                           AND aa.id_sample_type = ais.id_sample_type)
                                      GROUP BY aa.id_analysis_group)))
                       AND i_harvest IS NULL);
    
        SELECT t_rec_lab_tests_search(id_analysis,
                                      desc_analysis,
                                      id_sample_type,
                                      desc_sample_type,
                                      desc_perform,
                                      flg_clinical_question,
                                      id_analysis_instit_soft,
                                      TYPE)
          BULK COLLECT
          INTO l_table_lab_tests_search
          FROM (SELECT num_1 id_analysis,
                       decode(vc_3,
                              'A',
                              pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                       i_prof,
                                                                       pk_lab_tests_constant.g_analysis_alias,
                                                                       'ANALYSIS.CODE_ANALYSIS.' || num_1,
                                                                       'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || num_2,
                                                                       NULL) ||
                              decode(i_codification,
                                     NULL,
                                     pk_lab_tests_utils.get_lab_test_with_codification(i_lang, i_prof, num_1, num_2),
                                     ''),
                              pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                       i_prof,
                                                                       pk_lab_tests_constant.g_analysis_group_alias,
                                                                       'ANALYSIS_GROUP.CODE_ANALYSIS_GROUP.' || num_1,
                                                                       NULL)) desc_analysis,
                       num_2 id_sample_type,
                       pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                i_prof,
                                                                pk_lab_tests_constant.g_analysis_sample_alias,
                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || num_2,
                                                                NULL) desc_sample_type,
                       vc_1 desc_perform,
                       vc_2 flg_clinical_question,
                       num_3 id_analysis_instit_soft,
                       vc_3 TYPE,
                       num_4 position,
                       row_number() over(PARTITION BY num_1, num_2 ORDER BY num_4) rn
                  FROM tbl_temp tt
                UNION ALL
                SELECT /*+materialize opt_estimate(table t rows=1)*/
                 num_1 id_analysis,
                 pk_lab_tests_utils.get_alias_translation(i_lang,
                                                          i_prof,
                                                          pk_lab_tests_constant.g_analysis_alias,
                                                          'ANALYSIS.CODE_ANALYSIS.' || num_1,
                                                          NULL) desc_analysis,
                 NULL id_sample_type,
                 NULL desc_sample_type,
                 vc_1 desc_perform,
                 vc_2 flg_clinical_question,
                 num_3 id_analysis_instit_soft,
                 vc_3 TYPE,
                 num_4 - 0.1 position,
                 row_number() over(PARTITION BY num_1 ORDER BY num_4) rn
                  FROM tbl_temp
                 WHERE vc_3 = 'A'
                   AND i_harvest IS NULL
                   AND i_analysis_req IS NULL
                   AND l_search = pk_lab_tests_constant.g_yes
                   AND EXISTS (SELECT 1
                          FROM analysis a,
                               (SELECT *
                                  FROM TABLE(pk_translation.get_search_translation(i_lang,
                                                                                   i_value,
                                                                                   'ANALYSIS.CODE_ANALYSIS OR ANALYSIS_ALIAS.CODE_ANALYSIS_ALIAS'))) t
                         WHERE t.code_translation = a.code_analysis
                           AND a.id_analysis = num_1))
         WHERE rn = 1
         ORDER BY position, desc_analysis, desc_sample_type;
    
        COMMIT;
    
        RETURN l_table_lab_tests_search;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_SEARCH',
                                              l_error);
            RETURN NULL;
    END get_lab_test_search;

    FUNCTION get_lab_test_search
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_patient      IN patient.id_patient%TYPE,
        i_codification IN codification.id_codification%TYPE,
        i_analysis_req IN analysis_req.id_analysis_req%TYPE,
        i_harvest      IN harvest.id_harvest%TYPE,
        i_value        IN VARCHAR2,
        o_flg_show     OUT VARCHAR2,
        o_msg          OUT VARCHAR2,
        o_msg_title    OUT VARCHAR2,
        o_list         OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_count PLS_INTEGER;
    
        l_limit sys_config.desc_sys_config%TYPE := pk_sysconfig.get_config('NUM_RECORD_SEARCH', i_prof);
    
    BEGIN
    
        o_flg_show := pk_lab_tests_constant.g_no;
    
        g_error := 'GET COUNT';
        SELECT /*+opt_estimate(table t rows=1)*/
         COUNT(0)
          INTO l_count
          FROM TABLE(pk_lab_tests_core.get_lab_test_search(i_lang         => i_lang,
                                                           i_prof         => i_prof,
                                                           i_patient      => i_patient,
                                                           i_codification => i_codification,
                                                           i_analysis_req => i_analysis_req,
                                                           i_harvest      => i_harvest,
                                                           i_value        => i_value)) t;
    
        IF l_count > l_limit
        THEN
            o_flg_show  := pk_lab_tests_constant.g_yes;
            o_msg       := pk_search.get_overlimit_message(i_lang           => i_lang,
                                                           i_prof           => i_prof,
                                                           i_flg_has_action => pk_lab_tests_constant.g_yes,
                                                           i_limit          => l_limit);
            o_msg_title := pk_message.get_message(i_lang, i_prof, 'SEARCH_CRITERIA_T011');
        ELSIF l_count = 0
        THEN
            o_flg_show  := pk_lab_tests_constant.g_yes;
            o_msg       := pk_message.get_message(i_lang, i_prof, 'COMMON_M117');
            o_msg_title := pk_message.get_message(i_lang, i_prof, 'SEARCH_CRITERIA_T011');
        
            pk_types.open_my_cursor(o_list);
            RETURN TRUE;
        END IF;
    
        g_error := 'OPEN O_LIST';
        OPEN o_list FOR
            SELECT /*+opt_estimate(table t rows=1)*/
             id_analysis, desc_analysis, id_sample_type, desc_sample_type, TYPE, desc_perform, flg_clinical_question
              FROM TABLE(pk_lab_tests_core.get_lab_test_search(i_lang         => i_lang,
                                                               i_prof         => i_prof,
                                                               i_patient      => i_patient,
                                                               i_codification => i_codification,
                                                               i_analysis_req => i_analysis_req,
                                                               i_harvest      => i_harvest,
                                                               i_value        => i_value)) t
             WHERE rownum <= l_limit;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_SEARCH',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_search;

    FUNCTION get_lab_test_group_search
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_patient      IN patient.id_patient%TYPE,
        i_analysis_req IN analysis_req.id_analysis_req%TYPE,
        o_list         OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_pat IS
            SELECT gender, months_between(SYSDATE, dt_birth) / 12 age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_pat c_pat%ROWTYPE;
    
        l_sample_type sample_type.id_sample_type%TYPE;
        l_exam_cat    exam_cat.id_exam_cat%TYPE;
    
        l_prof_access PLS_INTEGER;
    
        l_order_criteria        sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_CRITERIA', i_prof);
        l_order_exam_cat_parent sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_EXAM_CAT_PARENT',
                                                                                 i_prof);
    
    BEGIN
    
        IF i_patient IS NOT NULL
        THEN
            g_error := 'OPEN C_PAT';
            OPEN c_pat;
            FETCH c_pat
                INTO l_pat;
            CLOSE c_pat;
        END IF;
    
        g_error := 'I_ANALYSIS_REQ CONDITION';
        IF i_analysis_req IS NOT NULL
        THEN
            IF instr(l_order_criteria, 'S') != 0
            THEN
                BEGIN
                    SELECT DISTINCT ard.id_sample_type
                      INTO l_sample_type
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error       := 'MORE THEN ONE SAMPLE';
                        l_sample_type := NULL;
                END;
            END IF;
        
            IF instr(l_order_criteria, 'C') != 0
            THEN
                BEGIN
                    SELECT DISTINCT decode(l_order_exam_cat_parent,
                                           pk_lab_tests_constant.g_yes,
                                           (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                            i_prof,
                                                                                            ard.id_exam_cat)
                                              FROM dual),
                                           ard.id_exam_cat) id_exam_cat
                      INTO l_exam_cat
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error    := 'MORE THEN ONE EXAM_CAT';
                        l_exam_cat := NULL;
                END;
            END IF;
        END IF;
    
        g_error := 'GET PROF ACCESS';
        BEGIN
            SELECT COUNT(1)
              INTO l_prof_access
              FROM group_access_prof gaf
             INNER JOIN group_access ga
                ON gaf.id_group_access = ga.id_group_access
             WHERE gaf.id_professional = i_prof.id
               AND gaf.flg_available = pk_lab_tests_constant.g_available
               AND ga.id_institution IN (i_prof.institution, 0)
               AND ga.id_software IN (i_prof.software, 0)
               AND ga.flg_available = pk_lab_tests_constant.g_available
               AND ga.flg_type = 'A';
        EXCEPTION
            WHEN no_data_found THEN
                l_prof_access := 0;
        END;
    
        g_error := 'OPEN O_LIST';
        OPEN o_list FOR
            SELECT id_analysis_group,
                   desc_analysis,
                   NULL              id_sample_type,
                   NULL              desc_sample_type,
                   NULL              id_exam_cat,
                   NULL              desc_category,
                   NULL              id_exam_cat_parent
              FROM (SELECT DISTINCT ag.id_analysis_group,
                                    pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                              i_prof,
                                                                              pk_lab_tests_constant.g_analysis_group_alias,
                                                                              ag.code_analysis_group,
                                                                              NULL) desc_analysis,
                                    pk_lab_tests_utils.get_lab_test_group_rank(i_lang,
                                                                               i_prof,
                                                                               ag.id_analysis_group,
                                                                               NULL) rank
                      FROM analysis_group ag, analysis_instit_soft ais, analysis_agp aa
                     WHERE ag.id_analysis_group = ais.id_analysis_group
                       AND ag.id_analysis_group = aa.id_analysis_group
                       AND ag.flg_available = pk_lab_tests_constant.g_available
                       AND ais.id_software = i_prof.software
                       AND ais.id_institution = i_prof.institution
                       AND ais.flg_available = pk_lab_tests_constant.g_yes
                       AND (l_prof_access = 0 OR (l_prof_access != 0 AND EXISTS
                            (SELECT 1
                                                     FROM analysis_group ag1,
                                                          analysis_agp agp,
                                                          (SELECT DISTINCT gar.id_record id_analysis
                                                             FROM group_access ga
                                                            INNER JOIN group_access_prof gaf
                                                               ON gaf.id_group_access = ga.id_group_access
                                                            INNER JOIN group_access_record gar
                                                               ON gar.id_group_access = ga.id_group_access
                                                            WHERE gaf.id_professional = i_prof.id
                                                              AND ga.id_institution IN (i_prof.institution, 0)
                                                              AND ga.id_software IN (i_prof.software, 0)
                                                              AND ga.flg_type = 'A'
                                                              AND gar.flg_type = 'A'
                                                              AND ga.flg_available = pk_lab_tests_constant.g_available
                                                              AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                              AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                                    WHERE ag1.id_analysis_group = ag.id_analysis_group
                                                      AND ag1.id_analysis_group = agp.id_analysis_group
                                                      AND agp.id_analysis = acs.id_analysis
                                                      AND agp.id_analysis = aa.id_analysis)))
                       AND (i_patient IS NULL OR
                           (((l_pat.gender IS NOT NULL AND coalesce(ag.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                           ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                           l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                           (nvl(l_pat.age, 0) BETWEEN nvl(ag.age_min, 0) AND nvl(ag.age_max, nvl(l_pat.age, 0)) OR
                           l_pat.age IS NULL)))
                       AND (i_analysis_req IS NULL OR
                           (EXISTS (SELECT 1
                                       FROM analysis_agp aa
                                      WHERE aa.id_analysis_group = ag.id_analysis_group
                                        AND aa.flg_available = pk_lab_tests_constant.g_available HAVING
                                      COUNT(*) =
                                            (SELECT COUNT(*)
                                               FROM analysis_agp aa
                                              WHERE aa.id_analysis_group = ag.id_analysis_group
                                                AND ((aa.id_sample_type = l_sample_type AND
                                                    instr(l_order_criteria, 'S') != 0) OR instr(l_order_criteria, 'S') = 0)
                                                AND aa.flg_available = pk_lab_tests_constant.g_available)
                                      GROUP BY aa.id_analysis_group)))
                       AND (i_analysis_req IS NULL OR
                           (EXISTS (SELECT 1
                                       FROM analysis_agp aa
                                      WHERE aa.id_analysis_group = ag.id_analysis_group
                                        AND aa.flg_available = pk_lab_tests_constant.g_available HAVING
                                      COUNT(*) = (SELECT COUNT(*)
                                                          FROM analysis_agp aa,
                                                               (SELECT *
                                                                  FROM analysis_instit_soft
                                                                 WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                                   AND id_software = i_prof.software
                                                                   AND id_institution = i_prof.institution
                                                                   AND flg_available = pk_lab_tests_constant.g_available
                                                                   AND ((decode(l_order_exam_cat_parent,
                                                                                pk_lab_tests_constant.g_yes,
                                                                                (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                                 i_prof,
                                                                                                                                 id_exam_cat)
                                                                                   FROM dual),
                                                                                id_exam_cat) = l_exam_cat AND
                                                                       instr(l_order_criteria, 'C') != 0) OR
                                                                       instr(l_order_criteria, 'C') = 0)) ais
                                                         WHERE aa.id_analysis_group = ag.id_analysis_group
                                                           AND aa.flg_available = pk_lab_tests_constant.g_available
                                                           AND aa.id_analysis = ais.id_analysis
                                                           AND aa.id_sample_type = ais.id_sample_type)
                                      GROUP BY aa.id_analysis_group)))
                     ORDER BY rank, desc_analysis);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_GROUP_SEARCH',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_group_search;

    FUNCTION get_lab_test_sample_search
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_patient      IN patient.id_patient%TYPE,
        i_exam_cat     IN exam_cat.id_exam_cat%TYPE,
        i_codification IN codification.id_codification%TYPE,
        i_analysis_req IN analysis_req.id_analysis_req%TYPE,
        i_harvest      IN harvest.id_harvest%TYPE,
        o_list         OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_pat IS
            SELECT gender, months_between(SYSDATE, dt_birth) / 12 age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_pat c_pat%ROWTYPE;
    
        l_sample_type sample_type.id_sample_type%TYPE;
        l_exam_cat    exam_cat.id_exam_cat%TYPE;
    
        l_prof_access PLS_INTEGER;
    
        l_order_criteria        sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_CRITERIA', i_prof);
        l_order_exam_cat_parent sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_EXAM_CAT_PARENT',
                                                                                 i_prof);
    
    BEGIN
    
        IF i_patient IS NOT NULL
        THEN
            g_error := 'OPEN C_PAT';
            OPEN c_pat;
            FETCH c_pat
                INTO l_pat;
            CLOSE c_pat;
        END IF;
    
        g_error := 'I_ANALYSIS_REQ CONDITION';
        IF i_analysis_req IS NOT NULL
        THEN
            IF instr(l_order_criteria, 'S') != 0
            THEN
                BEGIN
                    SELECT DISTINCT decode(l_order_exam_cat_parent,
                                           pk_lab_tests_constant.g_yes,
                                           (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                            i_prof,
                                                                                            ard.id_exam_cat)
                                              FROM dual),
                                           ard.id_exam_cat) id_exam_cat
                      INTO l_sample_type
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error       := 'MORE THEN ONE SAMPLE';
                        l_sample_type := NULL;
                END;
            END IF;
        
            IF instr(l_order_criteria, 'C') != 0
            THEN
                BEGIN
                    SELECT DISTINCT ard.id_exam_cat
                      INTO l_exam_cat
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error    := 'MORE THEN ONE EXAM_CAT';
                        l_exam_cat := NULL;
                END;
            END IF;
        END IF;
    
        g_error := 'I_HARVEST CONDITION';
        IF i_harvest IS NOT NULL
        THEN
            SELECT DISTINCT ard.id_sample_type
              INTO l_sample_type
              FROM analysis_harvest ah, analysis_req_det ard
             WHERE ah.id_harvest = i_harvest
               AND ah.id_analysis_req_det = ard.id_analysis_req_det;
        END IF;
    
        g_error := 'GET PROF ACCESS';
        BEGIN
            SELECT COUNT(1)
              INTO l_prof_access
              FROM group_access_prof gaf
             INNER JOIN group_access ga
                ON gaf.id_group_access = ga.id_group_access
             WHERE gaf.id_professional = i_prof.id
               AND gaf.flg_available = pk_lab_tests_constant.g_available
               AND ga.id_institution IN (i_prof.institution, 0)
               AND ga.id_software IN (i_prof.software, 0)
               AND ga.flg_available = pk_lab_tests_constant.g_available
               AND ga.flg_type = 'A';
        EXCEPTION
            WHEN no_data_found THEN
                l_prof_access := 0;
        END;
    
        IF i_exam_cat IS NULL
        THEN
            g_error := 'OPEN O_LIST';
            OPEN o_list FOR
                SELECT NULL             id_analysis_group,
                       NULL             desc_analysis,
                       id_sample_type,
                       desc_sample_type,
                       NULL             id_exam_cat,
                       NULL             desc_category,
                       NULL             id_exam_cat_parent
                  FROM (SELECT st.id_sample_type,
                               pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                         i_prof,
                                                                         pk_lab_tests_constant.g_analysis_sample_alias,
                                                                         st.code_sample_type,
                                                                         NULL) desc_sample_type,
                               st.rank
                          FROM sample_type st
                         WHERE st.flg_available = pk_lab_tests_constant.g_available
                           AND EXISTS
                         (SELECT 1
                                  FROM analysis_sample_type ast,
                                       analysis a,
                                       (SELECT *
                                          FROM analysis_instit_soft
                                         WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                           AND id_software = i_prof.software
                                           AND id_institution = i_prof.institution
                                           AND flg_available = pk_lab_tests_constant.g_available
                                           AND (i_analysis_req IS NULL OR
                                               ((decode(l_order_exam_cat_parent,
                                                         pk_lab_tests_constant.g_yes,
                                                         (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                          i_prof,
                                                                                                          id_exam_cat)
                                                            FROM dual),
                                                         id_exam_cat) = l_exam_cat AND
                                               instr(l_order_criteria, 'C') != 0) OR instr(l_order_criteria, 'C') = 0))) ais,
                                       analysis_instit_recipient air,
                                       (SELECT *
                                          FROM analysis_room
                                         WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                           AND id_institution = i_prof.institution
                                           AND flg_available = pk_lab_tests_constant.g_available
                                           AND flg_default = pk_lab_tests_constant.g_yes) ar,
                                       (SELECT DISTINCT gar.id_record id_analysis
                                          FROM group_access ga
                                         INNER JOIN group_access_prof gaf
                                            ON gaf.id_group_access = ga.id_group_access
                                         INNER JOIN group_access_record gar
                                            ON gar.id_group_access = ga.id_group_access
                                         WHERE gaf.id_professional = i_prof.id
                                           AND ga.id_institution IN (i_prof.institution, 0)
                                           AND ga.id_software IN (i_prof.software, 0)
                                           AND ga.flg_type = 'A'
                                           AND gar.flg_type = 'A'
                                           AND ga.flg_available = pk_lab_tests_constant.g_available
                                           AND gaf.flg_available = pk_lab_tests_constant.g_available
                                           AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                 WHERE ast.id_sample_type = st.id_sample_type
                                   AND ast.flg_available = pk_lab_tests_constant.g_available
                                   AND (i_analysis_req IS NULL OR
                                       ((ast.id_sample_type = l_sample_type AND instr(l_order_criteria, 'S') != 0) OR
                                       instr(l_order_criteria, 'S') = 0))
                                   AND ast.id_analysis = a.id_analysis
                                   AND a.flg_available = pk_lab_tests_constant.g_available
                                   AND ast.id_analysis = ais.id_analysis
                                   AND ast.id_sample_type = ais.id_sample_type
                                   AND EXISTS
                                 (SELECT 1
                                          FROM analysis_param ap
                                         WHERE ap.id_software = i_prof.software
                                           AND ap.id_institution = i_prof.institution
                                           AND ap.flg_available = pk_lab_tests_constant.g_available
                                           AND ap.id_analysis = ast.id_analysis
                                           AND ap.id_sample_type = ast.id_sample_type)
                                   AND (i_codification IS NULL OR
                                       (i_codification IS NOT NULL AND EXISTS
                                        (SELECT 1
                                            FROM codification_instit_soft cis, analysis_codification ac
                                           WHERE cis.id_codification = i_codification
                                             AND cis.id_institution = i_prof.institution
                                             AND cis.id_software = i_prof.software
                                             AND cis.id_codification = ac.id_codification
                                             AND ac.flg_available = pk_lab_tests_constant.g_available
                                             AND ac.id_analysis = ast.id_analysis
                                             AND ac.id_sample_type = ast.id_sample_type)))
                                   AND ast.id_analysis = ar.id_analysis
                                   AND ast.id_sample_type = ar.id_sample_type
                                   AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                   AND (i_harvest IS NULL OR
                                       (ast.id_sample_type = l_sample_type AND EXISTS
                                        (SELECT 1
                                            FROM analysis_harvest ah
                                           WHERE ah.id_harvest = i_harvest
                                             AND ah.id_sample_recipient = air.id_sample_recipient)))
                                   AND a.id_analysis = acs.id_analysis(+)
                                   AND (l_prof_access = 0 OR (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                                   AND (i_patient IS NULL OR
                                       (((l_pat.gender IS NOT NULL AND coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                       ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                       l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                       (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                                       nvl(a.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL))))
                           AND (i_patient IS NULL OR
                               (((l_pat.gender IS NOT NULL AND coalesce(st.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                               ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                               l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                               (nvl(l_pat.age, 0) BETWEEN nvl(st.age_min, 0) AND nvl(st.age_max, nvl(l_pat.age, 0)) OR
                               l_pat.age IS NULL))))
                 ORDER BY rank, desc_sample_type;
        
        ELSE
            g_error := 'OPEN O_LIST';
            OPEN o_list FOR
                SELECT NULL             id_analysis_group,
                       NULL             desc_analysis,
                       id_sample_type,
                       desc_sample_type,
                       NULL             id_exam_cat,
                       NULL             desc_category,
                       NULL             id_exam_cat_parent
                  FROM (SELECT st.id_sample_type,
                               pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                         i_prof,
                                                                         pk_lab_tests_constant.g_analysis_sample_alias,
                                                                         st.code_sample_type,
                                                                         NULL) desc_sample_type,
                               st.rank
                          FROM sample_type st
                         WHERE st.flg_available = pk_lab_tests_constant.g_available
                           AND EXISTS
                         (SELECT 1
                                  FROM exam_cat ec,
                                       analysis a,
                                       (SELECT *
                                          FROM analysis_sample_type
                                         WHERE flg_available = pk_lab_tests_constant.g_available
                                           AND (i_analysis_req IS NULL OR
                                               ((id_sample_type = l_sample_type AND instr(l_order_criteria, 'S') != 0) OR
                                               instr(l_order_criteria, 'S') = 0))) ast,
                                       (SELECT *
                                          FROM analysis_instit_soft
                                         WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                           AND id_software = i_prof.software
                                           AND id_institution = i_prof.institution
                                           AND flg_available = pk_lab_tests_constant.g_available
                                           AND (i_analysis_req IS NULL OR
                                               ((decode(l_order_exam_cat_parent,
                                                         pk_lab_tests_constant.g_yes,
                                                         (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                          i_prof,
                                                                                                          id_exam_cat)
                                                            FROM dual),
                                                         id_exam_cat) = l_exam_cat AND
                                               instr(l_order_criteria, 'C') != 0) OR instr(l_order_criteria, 'C') = 0))) ais,
                                       analysis_instit_recipient air,
                                       (SELECT *
                                          FROM analysis_room
                                         WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                           AND id_institution = i_prof.institution
                                           AND flg_available = pk_lab_tests_constant.g_available
                                           AND flg_default = pk_lab_tests_constant.g_yes) ar,
                                       (SELECT DISTINCT gar.id_record id_analysis
                                          FROM group_access ga
                                         INNER JOIN group_access_prof gaf
                                            ON gaf.id_group_access = ga.id_group_access
                                         INNER JOIN group_access_record gar
                                            ON gar.id_group_access = ga.id_group_access
                                         WHERE gaf.id_professional = i_prof.id
                                           AND ga.id_institution IN (i_prof.institution, 0)
                                           AND ga.id_software IN (i_prof.software, 0)
                                           AND gar.flg_type = 'A'
                                           AND ga.flg_available = pk_lab_tests_constant.g_available
                                           AND gaf.flg_available = pk_lab_tests_constant.g_available
                                           AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                 WHERE (ec.id_exam_cat = i_exam_cat OR ec.parent_id = i_exam_cat)
                                   AND ec.id_exam_cat = ais.id_exam_cat
                                   AND ais.id_analysis = ast.id_analysis
                                   AND ais.id_sample_type = ast.id_sample_type
                                   AND ast.id_sample_type = st.id_sample_type
                                   AND ast.id_analysis = a.id_analysis
                                   AND a.flg_available = pk_lab_tests_constant.g_available
                                   AND EXISTS
                                 (SELECT 1
                                          FROM analysis_param ap
                                         WHERE ap.id_software = i_prof.software
                                           AND ap.id_institution = i_prof.institution
                                           AND ap.flg_available = pk_lab_tests_constant.g_available
                                           AND ap.id_analysis = ast.id_analysis
                                           AND ap.id_sample_type = ast.id_sample_type)
                                   AND (i_codification IS NULL OR
                                       (i_codification IS NOT NULL AND EXISTS
                                        (SELECT 1
                                            FROM codification_instit_soft cis, analysis_codification ac
                                           WHERE cis.id_codification = i_codification
                                             AND cis.id_institution = i_prof.institution
                                             AND cis.id_software = i_prof.software
                                             AND cis.id_codification = ac.id_codification
                                             AND ac.flg_available = pk_lab_tests_constant.g_available
                                             AND ac.id_analysis = ast.id_analysis
                                             AND ac.id_sample_type = ast.id_sample_type)))
                                   AND ast.id_analysis = ar.id_analysis
                                   AND ast.id_sample_type = ar.id_sample_type
                                   AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                   AND (i_harvest IS NULL OR
                                       (ast.id_sample_type = l_sample_type AND EXISTS
                                        (SELECT 1
                                            FROM analysis_harvest ah
                                           WHERE ah.id_harvest = i_harvest
                                             AND ah.id_sample_recipient = air.id_sample_recipient)))
                                   AND a.id_analysis = acs.id_analysis(+)
                                   AND (l_prof_access = 0 OR (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                                   AND (i_patient IS NULL OR
                                       (((l_pat.gender IS NOT NULL AND coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                       ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                       l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                       (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                                       nvl(a.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL))))
                           AND (i_patient IS NULL OR
                               (((l_pat.gender IS NOT NULL AND coalesce(st.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                               ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                               l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                               (nvl(l_pat.age, 0) BETWEEN nvl(st.age_min, 0) AND nvl(st.age_max, nvl(l_pat.age, 0)) OR
                               l_pat.age IS NULL))))
                 ORDER BY rank, desc_sample_type;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_SAMPLE_SEARCH',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_sample_search;

    FUNCTION get_lab_test_category_search
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_patient         IN patient.id_patient%TYPE,
        i_sample_type     IN analysis.id_sample_type%TYPE,
        i_exam_cat_parent IN exam_cat.parent_id%TYPE,
        i_codification    IN codification.id_codification%TYPE,
        i_analysis_req    IN analysis_req.id_analysis_req%TYPE,
        i_harvest         IN harvest.id_harvest%TYPE,
        o_list            OUT t_tbl_lab_tests_cat_search,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_pat IS
            SELECT gender, months_between(SYSDATE, dt_birth) / 12 age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_pat c_pat%ROWTYPE;
    
        l_sample_type sample_type.id_sample_type%TYPE;
        l_exam_cat    exam_cat.id_exam_cat%TYPE;
    
        l_prof_access PLS_INTEGER;
    
        l_order_criteria        sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_CRITERIA', i_prof);
        l_order_exam_cat_parent sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_EXAM_CAT_PARENT',
                                                                                 i_prof);
    
    BEGIN
    
        IF i_patient IS NOT NULL
        THEN
            g_error := 'OPEN C_PAT';
            OPEN c_pat;
            FETCH c_pat
                INTO l_pat;
            CLOSE c_pat;
        END IF;
    
        g_error := 'I_ANALYSIS_REQ CONDITION';
        IF i_analysis_req IS NOT NULL
        THEN
            IF instr(l_order_criteria, 'S') != 0
            THEN
                BEGIN
                    SELECT DISTINCT ard.id_sample_type
                      INTO l_sample_type
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error       := 'MORE THEN ONE SAMPLE';
                        l_sample_type := NULL;
                END;
            END IF;
        
            IF instr(l_order_criteria, 'C') != 0
            THEN
                BEGIN
                    SELECT DISTINCT decode(l_order_exam_cat_parent,
                                           pk_lab_tests_constant.g_yes,
                                           (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                            i_prof,
                                                                                            ard.id_exam_cat)
                                              FROM dual),
                                           ard.id_exam_cat) id_exam_cat
                      INTO l_exam_cat
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error    := 'MORE THEN ONE EXAM_CAT';
                        l_exam_cat := NULL;
                END;
            END IF;
        END IF;
    
        g_error := 'I_HARVEST CONDITION';
        IF i_harvest IS NOT NULL
        THEN
            SELECT DISTINCT ard.id_sample_type
              INTO l_sample_type
              FROM analysis_harvest ah, analysis_req_det ard
             WHERE ah.id_harvest = i_harvest
               AND ah.id_analysis_req_det = ard.id_analysis_req_det;
        END IF;
    
        g_error := 'GET PROF ACCESS';
        BEGIN
            SELECT COUNT(1)
              INTO l_prof_access
              FROM group_access_prof gaf
             INNER JOIN group_access ga
                ON gaf.id_group_access = ga.id_group_access
             WHERE gaf.id_professional = i_prof.id
               AND gaf.flg_available = pk_lab_tests_constant.g_available
               AND ga.id_institution IN (i_prof.institution, 0)
               AND ga.id_software IN (i_prof.software, 0)
               AND ga.flg_available = pk_lab_tests_constant.g_available
               AND ga.flg_type = 'A';
        EXCEPTION
            WHEN no_data_found THEN
                l_prof_access := 0;
        END;
    
        IF (i_exam_cat_parent IS NULL AND i_sample_type IS NULL)
        THEN
            -- return all available categories
            SELECT t_lab_tests_cat_search(id_exam_cat, desc_category, id_sample_type, id_exam_cat_parent)
              BULK COLLECT
              INTO o_list
              FROM (SELECT id_exam_cat,
                           pk_translation.get_translation(i_lang, code_exam_cat) desc_category,
                           NULL id_sample_type,
                           NULL id_exam_cat_parent,
                           rank
                      FROM (SELECT DISTINCT ec.id_exam_cat,
                                            ec.code_exam_cat,
                                            NULL             id_sample_type,
                                            NULL             id_exam_cat_parent,
                                            ec.rank
                              FROM (SELECT *
                                      FROM exam_cat ec
                                    CONNECT BY PRIOR ec.parent_id = ec.id_exam_cat
                                     START WITH ec.id_exam_cat IN
                                                (SELECT ais.id_exam_cat
                                                   FROM sample_type st,
                                                        analysis a,
                                                        (SELECT *
                                                           FROM analysis_sample_type
                                                          WHERE flg_available = pk_lab_tests_constant.g_available
                                                            AND (i_analysis_req IS NULL OR ((id_sample_type = l_sample_type AND
                                                                instr(l_order_criteria, 'S') != 0) OR
                                                                instr(l_order_criteria, 'S') = 0))) ast,
                                                        (SELECT *
                                                           FROM analysis_instit_soft
                                                          WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                            AND id_software = i_prof.software
                                                            AND id_institution = i_prof.institution
                                                            AND flg_available = pk_lab_tests_constant.g_available
                                                            AND (i_analysis_req IS NULL OR
                                                                ((decode(l_order_exam_cat_parent,
                                                                          pk_lab_tests_constant.g_yes,
                                                                          (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                           i_prof,
                                                                                                                           id_exam_cat)
                                                                             FROM dual),
                                                                          id_exam_cat) = l_exam_cat AND
                                                                instr(l_order_criteria, 'C') != 0) OR
                                                                instr(l_order_criteria, 'C') = 0))) ais,
                                                        analysis_instit_recipient air,
                                                        (SELECT *
                                                           FROM analysis_room
                                                          WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                            AND flg_available = pk_lab_tests_constant.g_available
                                                            AND flg_default = pk_lab_tests_constant.g_yes) ar,
                                                        (SELECT DISTINCT gar.id_record id_analysis
                                                           FROM group_access ga
                                                          INNER JOIN group_access_prof gaf
                                                             ON gaf.id_group_access = ga.id_group_access
                                                          INNER JOIN group_access_record gar
                                                             ON gar.id_group_access = ga.id_group_access
                                                          WHERE gaf.id_professional = i_prof.id
                                                            AND ga.id_institution IN (i_prof.institution, 0)
                                                            AND ga.id_software IN (i_prof.software, 0)
                                                            AND ga.flg_type = 'A'
                                                            AND gar.flg_type = 'A'
                                                            AND ga.flg_available = pk_lab_tests_constant.g_available
                                                            AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                            AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                                  WHERE ast.id_analysis = a.id_analysis
                                                    AND a.flg_available = pk_lab_tests_constant.g_available
                                                    AND ast.id_sample_type = st.id_sample_type
                                                    AND st.flg_available = pk_lab_tests_constant.g_available
                                                    AND ast.id_analysis = ais.id_analysis
                                                    AND ast.id_sample_type = ais.id_sample_type
                                                    AND EXISTS
                                                  (SELECT 1
                                                           FROM analysis_param ap
                                                          WHERE ap.id_software = i_prof.software
                                                            AND ap.id_institution = i_prof.institution
                                                            AND ap.flg_available = pk_lab_tests_constant.g_available
                                                            AND ap.id_analysis = ast.id_analysis
                                                            AND ap.id_sample_type = ast.id_sample_type)
                                                    AND (i_codification IS NULL OR
                                                        (i_codification IS NOT NULL AND EXISTS
                                                         (SELECT 1
                                                             FROM codification_instit_soft cis, analysis_codification ac
                                                            WHERE cis.id_codification = i_codification
                                                              AND cis.id_institution = i_prof.institution
                                                              AND cis.id_software = i_prof.software
                                                              AND cis.id_codification = ac.id_codification
                                                              AND ac.flg_available = pk_lab_tests_constant.g_available
                                                              AND ac.id_analysis = ast.id_analysis
                                                              AND ac.id_sample_type = ast.id_sample_type)))
                                                    AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                                    AND (i_harvest IS NULL OR
                                                        (ast.id_sample_type = l_sample_type AND EXISTS
                                                         (SELECT 1
                                                             FROM analysis_harvest ah
                                                            WHERE ah.id_harvest = i_harvest
                                                              AND ah.id_sample_recipient = air.id_sample_recipient)))
                                                    AND ast.id_analysis = ar.id_analysis
                                                    AND ast.id_sample_type = ar.id_sample_type
                                                    AND a.id_analysis = acs.id_analysis(+)
                                                    AND (l_prof_access = 0 OR
                                                        (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                                                    AND (i_patient IS NULL OR
                                                        (((l_pat.gender IS NOT NULL AND
                                                        coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                                        ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR
                                                        l_pat.gender IS NULL OR
                                                        l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                                        (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                                                        nvl(a.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL))))) ec
                             WHERE ec.parent_id IS NULL
                               AND ec.flg_available = pk_lab_tests_constant.g_available
                               AND rownum > 0))
             ORDER BY rank, desc_category;
        ELSIF (i_exam_cat_parent IS NOT NULL AND i_sample_type IS NULL)
        THEN
            -- only returns child categories
            SELECT t_lab_tests_cat_search(id_exam_cat, desc_category, id_sample_type, id_exam_cat_parent)
              BULK COLLECT
              INTO o_list
              FROM (SELECT id_exam_cat,
                           pk_translation.get_translation(i_lang, code_exam_cat) desc_category,
                           NULL id_sample_type,
                           NULL id_exam_cat_parent,
                           rank
                      FROM (SELECT DISTINCT ec.id_exam_cat,
                                            ec.code_exam_cat,
                                            NULL             id_sample_type,
                                            NULL             id_exam_cat_parent,
                                            ec.rank
                              FROM (SELECT *
                                      FROM exam_cat ec
                                     WHERE ec.parent_id = i_exam_cat_parent
                                       AND ec.id_exam_cat IN
                                           (SELECT ais.id_exam_cat
                                              FROM sample_type st,
                                                   analysis a,
                                                   (SELECT *
                                                      FROM analysis_sample_type
                                                     WHERE flg_available = pk_lab_tests_constant.g_available
                                                       AND (i_analysis_req IS NULL OR ((id_sample_type = l_sample_type AND
                                                           instr(l_order_criteria, 'S') != 0) OR
                                                           instr(l_order_criteria, 'S') = 0))) ast,
                                                   (SELECT *
                                                      FROM analysis_instit_soft
                                                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                       AND id_software = i_prof.software
                                                       AND id_institution = i_prof.institution
                                                       AND flg_available = pk_lab_tests_constant.g_available
                                                       AND (i_analysis_req IS NULL OR
                                                           ((decode(l_order_exam_cat_parent,
                                                                     pk_lab_tests_constant.g_yes,
                                                                     (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                      i_prof,
                                                                                                                      id_exam_cat)
                                                                        FROM dual),
                                                                     id_exam_cat) = l_exam_cat AND
                                                           instr(l_order_criteria, 'C') != 0) OR
                                                           instr(l_order_criteria, 'C') = 0))) ais,
                                                   analysis_instit_recipient air,
                                                   (SELECT *
                                                      FROM analysis_room
                                                     WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                       AND flg_available = pk_lab_tests_constant.g_available
                                                       AND flg_default = pk_lab_tests_constant.g_yes) ar,
                                                   (SELECT DISTINCT gar.id_record id_analysis
                                                      FROM group_access ga
                                                     INNER JOIN group_access_prof gaf
                                                        ON gaf.id_group_access = ga.id_group_access
                                                     INNER JOIN group_access_record gar
                                                        ON gar.id_group_access = ga.id_group_access
                                                     WHERE gaf.id_professional = i_prof.id
                                                       AND ga.id_institution IN (i_prof.institution, 0)
                                                       AND ga.id_software IN (i_prof.software, 0)
                                                       AND ga.flg_type = 'A'
                                                       AND gar.flg_type = 'A'
                                                       AND ga.flg_available = pk_lab_tests_constant.g_available
                                                       AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                       AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                             WHERE ast.id_analysis = a.id_analysis
                                               AND a.flg_available = pk_lab_tests_constant.g_available
                                               AND ast.id_sample_type = st.id_sample_type
                                               AND st.flg_available = pk_lab_tests_constant.g_available
                                               AND ast.id_analysis = ais.id_analysis
                                               AND ast.id_sample_type = ais.id_sample_type
                                               AND EXISTS
                                             (SELECT 1
                                                      FROM analysis_param ap
                                                     WHERE ap.id_software = i_prof.software
                                                       AND ap.id_institution = i_prof.institution
                                                       AND ap.flg_available = pk_lab_tests_constant.g_available
                                                       AND ap.id_analysis = ast.id_analysis
                                                       AND ap.id_sample_type = ast.id_sample_type)
                                               AND (i_codification IS NULL OR
                                                   (i_codification IS NOT NULL AND EXISTS
                                                    (SELECT 1
                                                        FROM codification_instit_soft cis, analysis_codification ac
                                                       WHERE cis.id_codification = i_codification
                                                         AND cis.id_institution = i_prof.institution
                                                         AND cis.id_software = i_prof.software
                                                         AND cis.id_codification = ac.id_codification
                                                         AND ac.flg_available = pk_lab_tests_constant.g_available
                                                         AND ac.id_analysis = ast.id_analysis
                                                         AND ac.id_sample_type = ast.id_sample_type)))
                                               AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                               AND (i_harvest IS NULL OR
                                                   (ast.id_sample_type = l_sample_type AND EXISTS
                                                    (SELECT 1
                                                        FROM analysis_harvest ah
                                                       WHERE ah.id_harvest = i_harvest
                                                         AND ah.id_sample_recipient = air.id_sample_recipient)))
                                               AND ast.id_analysis = ar.id_analysis
                                               AND ast.id_sample_type = ar.id_sample_type
                                               AND a.id_analysis = acs.id_analysis(+)
                                               AND (l_prof_access = 0 OR
                                                   (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                                               AND (i_patient IS NULL OR
                                                   (((l_pat.gender IS NOT NULL AND
                                                   coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                                   ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                                   l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                                   (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                                                   nvl(a.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL))))) ec
                             WHERE ec.flg_available = pk_lab_tests_constant.g_available
                               AND rownum > 0))
             ORDER BY rank, desc_category;
        ELSIF (i_exam_cat_parent IS NULL AND i_sample_type IS NOT NULL)
        THEN
            -- only returns parent categories
            SELECT t_lab_tests_cat_search(id_exam_cat, desc_category, id_sample_type, id_exam_cat_parent)
              BULK COLLECT
              INTO o_list
              FROM (SELECT id_exam_cat,
                           pk_translation.get_translation(i_lang, code_exam_cat) desc_category,
                           id_sample_type,
                           id_exam_cat_parent
                      FROM (SELECT DISTINCT ec.id_exam_cat,
                                            ec.code_exam_cat,
                                            i_sample_type    id_sample_type,
                                            ec.parent_id     id_exam_cat_parent,
                                            ec.rank
                              FROM (SELECT *
                                      FROM exam_cat ec
                                    CONNECT BY PRIOR ec.parent_id = ec.id_exam_cat
                                     START WITH ec.id_exam_cat IN
                                                (SELECT ais.id_exam_cat
                                                   FROM sample_type st,
                                                        analysis a,
                                                        (SELECT *
                                                           FROM analysis_sample_type
                                                          WHERE flg_available = pk_lab_tests_constant.g_available
                                                            AND (i_analysis_req IS NULL OR ((id_sample_type = l_sample_type AND
                                                                instr(l_order_criteria, 'S') != 0) OR
                                                                instr(l_order_criteria, 'S') = 0))) ast,
                                                        (SELECT *
                                                           FROM analysis_instit_soft
                                                          WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                            AND id_software = i_prof.software
                                                            AND id_institution = i_prof.institution
                                                            AND flg_available = pk_lab_tests_constant.g_available
                                                            AND (i_analysis_req IS NULL OR
                                                                ((decode(l_order_exam_cat_parent,
                                                                          pk_lab_tests_constant.g_yes,
                                                                          (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                           i_prof,
                                                                                                                           id_exam_cat)
                                                                             FROM dual),
                                                                          id_exam_cat) = l_exam_cat AND
                                                                instr(l_order_criteria, 'C') != 0) OR
                                                                instr(l_order_criteria, 'C') = 0))) ais,
                                                        analysis_instit_recipient air,
                                                        (SELECT *
                                                           FROM analysis_room
                                                          WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                            AND flg_default = pk_lab_tests_constant.g_yes
                                                            AND id_institution = i_prof.institution
                                                            AND flg_available = pk_lab_tests_constant.g_available) ar,
                                                        (SELECT DISTINCT gar.id_record id_analysis
                                                           FROM group_access ga
                                                          INNER JOIN group_access_prof gaf
                                                             ON gaf.id_group_access = ga.id_group_access
                                                          INNER JOIN group_access_record gar
                                                             ON gar.id_group_access = ga.id_group_access
                                                          WHERE gaf.id_professional = i_prof.id
                                                            AND ga.id_institution IN (i_prof.institution, 0)
                                                            AND ga.id_software IN (i_prof.software, 0)
                                                            AND ga.flg_type = 'A'
                                                            AND gar.flg_type = 'A'
                                                            AND ga.flg_available = pk_lab_tests_constant.g_available
                                                            AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                            AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                                  WHERE st.id_sample_type = i_sample_type
                                                    AND st.flg_available = pk_lab_tests_constant.g_available
                                                    AND st.id_sample_type = ast.id_sample_type
                                                    AND ast.id_analysis = a.id_analysis
                                                    AND a.flg_available = pk_lab_tests_constant.g_available
                                                    AND ast.id_analysis = ais.id_analysis
                                                    AND ast.id_sample_type = ais.id_sample_type
                                                    AND EXISTS
                                                  (SELECT 1
                                                           FROM analysis_param ap
                                                          WHERE ap.id_software = i_prof.software
                                                            AND ap.id_institution = i_prof.institution
                                                            AND ap.flg_available = pk_lab_tests_constant.g_available
                                                            AND ap.id_analysis = ast.id_analysis
                                                            AND ap.id_sample_type = ast.id_sample_type)
                                                    AND (i_codification IS NULL OR
                                                        (i_codification IS NOT NULL AND EXISTS
                                                         (SELECT 1
                                                             FROM codification_instit_soft cis, analysis_codification ac
                                                            WHERE cis.id_codification = i_codification
                                                              AND cis.id_institution = i_prof.institution
                                                              AND cis.id_software = i_prof.software
                                                              AND cis.id_codification = ac.id_codification
                                                              AND ac.flg_available = pk_lab_tests_constant.g_available
                                                              AND ac.id_analysis = ast.id_analysis
                                                              AND ac.id_sample_type = ast.id_sample_type)))
                                                    AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                                    AND (i_harvest IS NULL OR
                                                        (ast.id_sample_type = l_sample_type AND EXISTS
                                                         (SELECT 1
                                                             FROM analysis_harvest ah
                                                            WHERE ah.id_harvest = i_harvest
                                                              AND ah.id_sample_recipient = air.id_sample_recipient)))
                                                    AND ast.id_analysis = ar.id_analysis
                                                    AND ast.id_sample_type = ar.id_sample_type
                                                    AND a.id_analysis = acs.id_analysis(+)
                                                    AND (l_prof_access = 0 OR
                                                        (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                                                    AND (i_patient IS NULL OR
                                                        (((l_pat.gender IS NOT NULL AND
                                                        coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                                        ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR
                                                        l_pat.gender IS NULL OR
                                                        l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                                        (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                                                        nvl(a.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL))))) ec
                             WHERE ec.parent_id IS NULL
                               AND ec.flg_available = pk_lab_tests_constant.g_available
                               AND rownum > 0)
                     ORDER BY rank, desc_category);
        ELSIF (i_exam_cat_parent IS NOT NULL AND i_sample_type IS NOT NULL)
        THEN
            -- only returns parent categories
            SELECT t_lab_tests_cat_search(id_exam_cat, desc_category, id_sample_type, id_exam_cat_parent)
              BULK COLLECT
              INTO o_list
              FROM (SELECT id_exam_cat,
                           pk_translation.get_translation(i_lang, code_exam_cat) desc_category,
                           id_sample_type,
                           id_exam_cat_parent,
                           rank
                      FROM (SELECT DISTINCT ec.id_exam_cat,
                                            ec.code_exam_cat,
                                            st.id_sample_type,
                                            ec.parent_id id_exam_cat_parent,
                                            ec.rank
                              FROM sample_type st,
                                   analysis a,
                                   (SELECT *
                                      FROM analysis_sample_type
                                     WHERE flg_available = pk_lab_tests_constant.g_available
                                       AND (i_analysis_req IS NULL OR
                                           ((id_sample_type = l_sample_type AND instr(l_order_criteria, 'S') != 0) OR
                                           instr(l_order_criteria, 'S') = 0))) ast,
                                   (SELECT *
                                      FROM analysis_instit_soft
                                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                       AND id_software = i_prof.software
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_lab_tests_constant.g_available
                                       AND (i_analysis_req IS NULL OR
                                           ((decode(l_order_exam_cat_parent,
                                                     pk_lab_tests_constant.g_yes,
                                                     (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                      i_prof,
                                                                                                      id_exam_cat)
                                                        FROM dual),
                                                     id_exam_cat) = l_exam_cat AND instr(l_order_criteria, 'C') != 0) OR
                                           instr(l_order_criteria, 'C') = 0))) ais,
                                   exam_cat ec,
                                   analysis_instit_recipient air,
                                   (SELECT *
                                      FROM analysis_room
                                     WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                       AND flg_default = pk_lab_tests_constant.g_yes
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_lab_tests_constant.g_available) ar,
                                   (SELECT DISTINCT gar.id_record id_analysis
                                      FROM group_access ga
                                     INNER JOIN group_access_prof gaf
                                        ON gaf.id_group_access = ga.id_group_access
                                     INNER JOIN group_access_record gar
                                        ON gar.id_group_access = ga.id_group_access
                                     WHERE gaf.id_professional = i_prof.id
                                       AND ga.id_institution IN (i_prof.institution, 0)
                                       AND ga.id_software IN (i_prof.software, 0)
                                       AND ga.flg_type = 'A'
                                       AND gar.flg_type = 'A'
                                       AND ga.flg_available = pk_lab_tests_constant.g_available
                                       AND gaf.flg_available = pk_lab_tests_constant.g_available
                                       AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                             WHERE st.id_sample_type = i_sample_type
                               AND st.flg_available = pk_lab_tests_constant.g_available
                               AND st.id_sample_type = ast.id_sample_type
                               AND ast.id_analysis = a.id_analysis
                               AND a.flg_available = pk_lab_tests_constant.g_available
                               AND ast.id_analysis = ais.id_analysis
                               AND ast.id_sample_type = ais.id_sample_type
                               AND ais.id_exam_cat = ec.id_exam_cat
                               AND ec.id_exam_cat IN (SELECT ec.id_exam_cat
                                                        FROM exam_cat ec
                                                       WHERE ec.parent_id = i_exam_cat_parent)
                               AND ec.flg_available = pk_lab_tests_constant.g_available
                               AND EXISTS
                             (SELECT 1
                                      FROM analysis_param ap
                                     WHERE ap.id_software = i_prof.software
                                       AND ap.id_institution = i_prof.institution
                                       AND ap.flg_available = pk_lab_tests_constant.g_available
                                       AND ap.id_analysis = ast.id_analysis
                                       AND ap.id_sample_type = ast.id_sample_type)
                               AND (i_codification IS NULL OR
                                   (i_codification IS NOT NULL AND EXISTS
                                    (SELECT 1
                                        FROM codification_instit_soft cis, analysis_codification ac
                                       WHERE cis.id_codification = i_codification
                                         AND cis.id_institution = i_prof.institution
                                         AND cis.id_software = i_prof.software
                                         AND cis.id_codification = ac.id_codification
                                         AND ac.flg_available = pk_lab_tests_constant.g_available
                                         AND ac.id_analysis = ast.id_analysis
                                         AND ac.id_sample_type = ast.id_sample_type)))
                               AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                               AND (i_harvest IS NULL OR
                                   (ast.id_sample_type = l_sample_type AND EXISTS
                                    (SELECT 1
                                        FROM analysis_harvest ah
                                       WHERE ah.id_harvest = i_harvest
                                         AND ah.id_sample_recipient = air.id_sample_recipient)))
                               AND ast.id_analysis = ar.id_analysis
                               AND ast.id_sample_type = ar.id_sample_type
                               AND a.id_analysis = acs.id_analysis(+)
                               AND (l_prof_access = 0 OR (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                               AND (i_patient IS NULL OR
                                   (((l_pat.gender IS NOT NULL AND coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                   ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                   l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                   (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND nvl(a.age_max, nvl(l_pat.age, 0)) OR
                                   l_pat.age IS NULL)))
                               AND rownum > 0)
                     ORDER BY rank, desc_category);
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_CATEGORY_SEARCH',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_category_search;

    FUNCTION get_lab_test_category_search
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_patient         IN patient.id_patient%TYPE,
        i_sample_type     IN analysis.id_sample_type%TYPE,
        i_exam_cat_parent IN exam_cat.parent_id%TYPE,
        i_codification    IN codification.id_codification%TYPE,
        i_analysis_req    IN analysis_req.id_analysis_req%TYPE,
        i_harvest         IN harvest.id_harvest%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_pat IS
            SELECT gender, months_between(SYSDATE, dt_birth) / 12 age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_pat c_pat%ROWTYPE;
    
        l_sample_type sample_type.id_sample_type%TYPE;
        l_exam_cat    exam_cat.id_exam_cat%TYPE;
    
        l_prof_access PLS_INTEGER;
    
        l_order_criteria        sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_CRITERIA', i_prof);
        l_order_exam_cat_parent sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_EXAM_CAT_PARENT',
                                                                                 i_prof);
    
    BEGIN
    
        IF i_patient IS NOT NULL
        THEN
            g_error := 'OPEN C_PAT';
            OPEN c_pat;
            FETCH c_pat
                INTO l_pat;
            CLOSE c_pat;
        END IF;
    
        g_error := 'I_ANALYSIS_REQ CONDITION';
        IF i_analysis_req IS NOT NULL
        THEN
            IF instr(l_order_criteria, 'S') != 0
            THEN
                BEGIN
                    SELECT DISTINCT ard.id_sample_type
                      INTO l_sample_type
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error       := 'MORE THEN ONE SAMPLE';
                        l_sample_type := NULL;
                END;
            END IF;
        
            IF instr(l_order_criteria, 'C') != 0
            THEN
                BEGIN
                    SELECT DISTINCT decode(l_order_exam_cat_parent,
                                           pk_lab_tests_constant.g_yes,
                                           (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                            i_prof,
                                                                                            ard.id_exam_cat)
                                              FROM dual),
                                           ard.id_exam_cat) id_exam_cat
                      INTO l_exam_cat
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error    := 'MORE THEN ONE EXAM_CAT';
                        l_exam_cat := NULL;
                END;
            END IF;
        END IF;
    
        g_error := 'I_HARVEST CONDITION';
        IF i_harvest IS NOT NULL
        THEN
            SELECT DISTINCT ard.id_sample_type
              INTO l_sample_type
              FROM analysis_harvest ah, analysis_req_det ard
             WHERE ah.id_harvest = i_harvest
               AND ah.id_analysis_req_det = ard.id_analysis_req_det;
        END IF;
    
        g_error := 'GET PROF ACCESS';
        BEGIN
            SELECT COUNT(1)
              INTO l_prof_access
              FROM group_access_prof gaf
             INNER JOIN group_access ga
                ON gaf.id_group_access = ga.id_group_access
             WHERE gaf.id_professional = i_prof.id
               AND gaf.flg_available = pk_lab_tests_constant.g_available
               AND ga.id_institution IN (i_prof.institution, 0)
               AND ga.id_software IN (i_prof.software, 0)
               AND ga.flg_available = pk_lab_tests_constant.g_available
               AND ga.flg_type = 'A';
        EXCEPTION
            WHEN no_data_found THEN
                l_prof_access := 0;
        END;
    
        IF (i_exam_cat_parent IS NULL AND i_sample_type IS NULL)
        THEN
            -- return all available categories
            OPEN o_list FOR
                SELECT NULL               id_analysis_group,
                       NULL               desc_analysis,
                       id_sample_type,
                       NULL               desc_sample_type,
                       id_exam_cat,
                       desc_category,
                       id_exam_cat_parent
                  FROM (SELECT id_exam_cat,
                               pk_translation.get_translation(i_lang, code_exam_cat) desc_category,
                               NULL id_sample_type,
                               NULL id_exam_cat_parent,
                               rank
                          FROM (SELECT DISTINCT ec.id_exam_cat,
                                                ec.code_exam_cat,
                                                NULL             id_sample_type,
                                                NULL             id_exam_cat_parent,
                                                ec.rank
                                  FROM (SELECT *
                                          FROM exam_cat ec
                                        CONNECT BY PRIOR ec.parent_id = ec.id_exam_cat
                                         START WITH ec.id_exam_cat IN
                                                    (SELECT ais.id_exam_cat
                                                       FROM sample_type st,
                                                            analysis a,
                                                            (SELECT *
                                                               FROM analysis_sample_type
                                                              WHERE flg_available = pk_lab_tests_constant.g_available
                                                                AND (i_analysis_req IS NULL OR
                                                                    ((id_sample_type = l_sample_type AND
                                                                    instr(l_order_criteria, 'S') != 0) OR
                                                                    instr(l_order_criteria, 'S') = 0))) ast,
                                                            (SELECT *
                                                               FROM analysis_instit_soft
                                                              WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                                AND id_software = i_prof.software
                                                                AND id_institution = i_prof.institution
                                                                AND flg_available = pk_lab_tests_constant.g_available
                                                                AND (i_analysis_req IS NULL OR
                                                                    ((decode(l_order_exam_cat_parent,
                                                                              pk_lab_tests_constant.g_yes,
                                                                              (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                               i_prof,
                                                                                                                               id_exam_cat)
                                                                                 FROM dual),
                                                                              id_exam_cat) = l_exam_cat AND
                                                                    instr(l_order_criteria, 'C') != 0) OR
                                                                    instr(l_order_criteria, 'C') = 0))) ais,
                                                            analysis_instit_recipient air,
                                                            (SELECT *
                                                               FROM analysis_room
                                                              WHERE flg_type =
                                                                    pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                                AND flg_available = pk_lab_tests_constant.g_available
                                                                AND flg_default = pk_lab_tests_constant.g_yes) ar,
                                                            (SELECT DISTINCT gar.id_record id_analysis
                                                               FROM group_access ga
                                                              INNER JOIN group_access_prof gaf
                                                                 ON gaf.id_group_access = ga.id_group_access
                                                              INNER JOIN group_access_record gar
                                                                 ON gar.id_group_access = ga.id_group_access
                                                              WHERE gaf.id_professional = i_prof.id
                                                                AND ga.id_institution IN (i_prof.institution, 0)
                                                                AND ga.id_software IN (i_prof.software, 0)
                                                                AND ga.flg_type = 'A'
                                                                AND gar.flg_type = 'A'
                                                                AND ga.flg_available = pk_lab_tests_constant.g_available
                                                                AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                                AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                                      WHERE ast.id_analysis = a.id_analysis
                                                        AND a.flg_available = pk_lab_tests_constant.g_available
                                                        AND ast.id_sample_type = st.id_sample_type
                                                        AND st.flg_available = pk_lab_tests_constant.g_available
                                                        AND ast.id_analysis = ais.id_analysis
                                                        AND ast.id_sample_type = ais.id_sample_type
                                                        AND EXISTS
                                                      (SELECT 1
                                                               FROM analysis_param ap
                                                              WHERE ap.id_software = i_prof.software
                                                                AND ap.id_institution = i_prof.institution
                                                                AND ap.flg_available = pk_lab_tests_constant.g_available
                                                                AND ap.id_analysis = ast.id_analysis
                                                                AND ap.id_sample_type = ast.id_sample_type)
                                                        AND (i_codification IS NULL OR
                                                            (i_codification IS NOT NULL AND EXISTS
                                                             (SELECT 1
                                                                 FROM codification_instit_soft cis, analysis_codification ac
                                                                WHERE cis.id_codification = i_codification
                                                                  AND cis.id_institution = i_prof.institution
                                                                  AND cis.id_software = i_prof.software
                                                                  AND cis.id_codification = ac.id_codification
                                                                  AND ac.flg_available = pk_lab_tests_constant.g_available
                                                                  AND ac.id_analysis = ast.id_analysis
                                                                  AND ac.id_sample_type = ast.id_sample_type)))
                                                        AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                                        AND (i_harvest IS NULL OR
                                                            (ast.id_sample_type = l_sample_type AND EXISTS
                                                             (SELECT 1
                                                                 FROM analysis_harvest ah
                                                                WHERE ah.id_harvest = i_harvest
                                                                  AND ah.id_sample_recipient = air.id_sample_recipient)))
                                                        AND ast.id_analysis = ar.id_analysis
                                                        AND ast.id_sample_type = ar.id_sample_type
                                                        AND a.id_analysis = acs.id_analysis(+)
                                                        AND (l_prof_access = 0 OR
                                                            (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                                                        AND (i_patient IS NULL OR
                                                            (((l_pat.gender IS NOT NULL AND
                                                            coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                                            ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR
                                                            l_pat.gender IS NULL OR
                                                            l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                                            (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                                                            nvl(a.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL))))) ec
                                 WHERE ec.parent_id IS NULL
                                   AND ec.flg_available = pk_lab_tests_constant.g_available
                                   AND rownum > 0))
                 ORDER BY rank, desc_category;
        ELSIF (i_exam_cat_parent IS NOT NULL AND i_sample_type IS NULL)
        THEN
            -- only returns child categories    
            OPEN o_list FOR
                SELECT NULL               id_analysis_group,
                       NULL               desc_analysis,
                       id_sample_type,
                       NULL               desc_sample_type,
                       id_exam_cat,
                       desc_category,
                       id_exam_cat_parent
                  FROM (SELECT id_exam_cat,
                               pk_translation.get_translation(i_lang, code_exam_cat) desc_category,
                               NULL id_sample_type,
                               NULL id_exam_cat_parent,
                               rank
                          FROM (SELECT DISTINCT ec.id_exam_cat,
                                                ec.code_exam_cat,
                                                NULL             id_sample_type,
                                                NULL             id_exam_cat_parent,
                                                ec.rank
                                  FROM (SELECT *
                                          FROM exam_cat ec
                                         WHERE ec.parent_id = i_exam_cat_parent
                                           AND ec.id_exam_cat IN
                                               (SELECT ais.id_exam_cat
                                                  FROM sample_type st,
                                                       analysis a,
                                                       (SELECT *
                                                          FROM analysis_sample_type
                                                         WHERE flg_available = pk_lab_tests_constant.g_available
                                                           AND (i_analysis_req IS NULL OR ((id_sample_type = l_sample_type AND
                                                               instr(l_order_criteria, 'S') != 0) OR
                                                               instr(l_order_criteria, 'S') = 0))) ast,
                                                       (SELECT *
                                                          FROM analysis_instit_soft
                                                         WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                           AND id_software = i_prof.software
                                                           AND id_institution = i_prof.institution
                                                           AND flg_available = pk_lab_tests_constant.g_available
                                                           AND (i_analysis_req IS NULL OR
                                                               ((decode(l_order_exam_cat_parent,
                                                                         pk_lab_tests_constant.g_yes,
                                                                         (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                          i_prof,
                                                                                                                          id_exam_cat)
                                                                            FROM dual),
                                                                         id_exam_cat) = l_exam_cat AND
                                                               instr(l_order_criteria, 'C') != 0) OR
                                                               instr(l_order_criteria, 'C') = 0))) ais,
                                                       analysis_instit_recipient air,
                                                       (SELECT *
                                                          FROM analysis_room
                                                         WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                           AND flg_available = pk_lab_tests_constant.g_available
                                                           AND flg_default = pk_lab_tests_constant.g_yes) ar,
                                                       (SELECT DISTINCT gar.id_record id_analysis
                                                          FROM group_access ga
                                                         INNER JOIN group_access_prof gaf
                                                            ON gaf.id_group_access = ga.id_group_access
                                                         INNER JOIN group_access_record gar
                                                            ON gar.id_group_access = ga.id_group_access
                                                         WHERE gaf.id_professional = i_prof.id
                                                           AND ga.id_institution IN (i_prof.institution, 0)
                                                           AND ga.id_software IN (i_prof.software, 0)
                                                           AND ga.flg_type = 'A'
                                                           AND gar.flg_type = 'A'
                                                           AND ga.flg_available = pk_lab_tests_constant.g_available
                                                           AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                           AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                                 WHERE ast.id_analysis = a.id_analysis
                                                   AND a.flg_available = pk_lab_tests_constant.g_available
                                                   AND ast.id_sample_type = st.id_sample_type
                                                   AND st.flg_available = pk_lab_tests_constant.g_available
                                                   AND ast.id_analysis = ais.id_analysis
                                                   AND ast.id_sample_type = ais.id_sample_type
                                                   AND EXISTS
                                                 (SELECT 1
                                                          FROM analysis_param ap
                                                         WHERE ap.id_software = i_prof.software
                                                           AND ap.id_institution = i_prof.institution
                                                           AND ap.flg_available = pk_lab_tests_constant.g_available
                                                           AND ap.id_analysis = ast.id_analysis
                                                           AND ap.id_sample_type = ast.id_sample_type)
                                                   AND (i_codification IS NULL OR
                                                       (i_codification IS NOT NULL AND EXISTS
                                                        (SELECT 1
                                                            FROM codification_instit_soft cis, analysis_codification ac
                                                           WHERE cis.id_codification = i_codification
                                                             AND cis.id_institution = i_prof.institution
                                                             AND cis.id_software = i_prof.software
                                                             AND cis.id_codification = ac.id_codification
                                                             AND ac.flg_available = pk_lab_tests_constant.g_available
                                                             AND ac.id_analysis = ast.id_analysis
                                                             AND ac.id_sample_type = ast.id_sample_type)))
                                                   AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                                   AND (i_harvest IS NULL OR
                                                       (ast.id_sample_type = l_sample_type AND EXISTS
                                                        (SELECT 1
                                                            FROM analysis_harvest ah
                                                           WHERE ah.id_harvest = i_harvest
                                                             AND ah.id_sample_recipient = air.id_sample_recipient)))
                                                   AND ast.id_analysis = ar.id_analysis
                                                   AND ast.id_sample_type = ar.id_sample_type
                                                   AND a.id_analysis = acs.id_analysis(+)
                                                   AND (l_prof_access = 0 OR
                                                       (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                                                   AND (i_patient IS NULL OR
                                                       (((l_pat.gender IS NOT NULL AND
                                                       coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                                       ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR
                                                       l_pat.gender IS NULL OR
                                                       l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                                       (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                                                       nvl(a.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL))))) ec
                                 WHERE ec.flg_available = pk_lab_tests_constant.g_available
                                   AND rownum > 0))
                 ORDER BY rank, desc_category;
        ELSIF (i_exam_cat_parent IS NULL AND i_sample_type IS NOT NULL)
        THEN
            -- only returns parent categories 
            OPEN o_list FOR
                SELECT NULL               id_analysis_group,
                       NULL               desc_analysis,
                       id_sample_type,
                       NULL               desc_sample_type,
                       id_exam_cat,
                       desc_category,
                       id_exam_cat_parent
                  FROM (SELECT id_exam_cat,
                               pk_translation.get_translation(i_lang, code_exam_cat) desc_category,
                               id_sample_type,
                               id_exam_cat_parent
                          FROM (SELECT DISTINCT ec.id_exam_cat,
                                                ec.code_exam_cat,
                                                i_sample_type    id_sample_type,
                                                ec.parent_id     id_exam_cat_parent,
                                                ec.rank
                                  FROM (SELECT *
                                          FROM exam_cat ec
                                        CONNECT BY PRIOR ec.parent_id = ec.id_exam_cat
                                         START WITH ec.id_exam_cat IN
                                                    (SELECT ais.id_exam_cat
                                                       FROM sample_type st,
                                                            analysis a,
                                                            (SELECT *
                                                               FROM analysis_sample_type
                                                              WHERE flg_available = pk_lab_tests_constant.g_available
                                                                AND (i_analysis_req IS NULL OR
                                                                    ((id_sample_type = l_sample_type AND
                                                                    instr(l_order_criteria, 'S') != 0) OR
                                                                    instr(l_order_criteria, 'S') = 0))) ast,
                                                            (SELECT *
                                                               FROM analysis_instit_soft
                                                              WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                                                AND id_software = i_prof.software
                                                                AND id_institution = i_prof.institution
                                                                AND flg_available = pk_lab_tests_constant.g_available
                                                                AND (i_analysis_req IS NULL OR
                                                                    ((decode(l_order_exam_cat_parent,
                                                                              pk_lab_tests_constant.g_yes,
                                                                              (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                               i_prof,
                                                                                                                               id_exam_cat)
                                                                                 FROM dual),
                                                                              id_exam_cat) = l_exam_cat AND
                                                                    instr(l_order_criteria, 'C') != 0) OR
                                                                    instr(l_order_criteria, 'C') = 0))) ais,
                                                            analysis_instit_recipient air,
                                                            (SELECT *
                                                               FROM analysis_room
                                                              WHERE flg_type =
                                                                    pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                                AND flg_default = pk_lab_tests_constant.g_yes
                                                                AND id_institution = i_prof.institution
                                                                AND flg_available = pk_lab_tests_constant.g_available) ar,
                                                            (SELECT DISTINCT gar.id_record id_analysis
                                                               FROM group_access ga
                                                              INNER JOIN group_access_prof gaf
                                                                 ON gaf.id_group_access = ga.id_group_access
                                                              INNER JOIN group_access_record gar
                                                                 ON gar.id_group_access = ga.id_group_access
                                                              WHERE gaf.id_professional = i_prof.id
                                                                AND ga.id_institution IN (i_prof.institution, 0)
                                                                AND ga.id_software IN (i_prof.software, 0)
                                                                AND ga.flg_type = 'A'
                                                                AND gar.flg_type = 'A'
                                                                AND ga.flg_available = pk_lab_tests_constant.g_available
                                                                AND gaf.flg_available = pk_lab_tests_constant.g_available
                                                                AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                                      WHERE st.id_sample_type = i_sample_type
                                                        AND st.flg_available = pk_lab_tests_constant.g_available
                                                        AND st.id_sample_type = ast.id_sample_type
                                                        AND ast.id_analysis = a.id_analysis
                                                        AND a.flg_available = pk_lab_tests_constant.g_available
                                                        AND ast.id_analysis = ais.id_analysis
                                                        AND ast.id_sample_type = ais.id_sample_type
                                                        AND EXISTS
                                                      (SELECT 1
                                                               FROM analysis_param ap
                                                              WHERE ap.id_software = i_prof.software
                                                                AND ap.id_institution = i_prof.institution
                                                                AND ap.flg_available = pk_lab_tests_constant.g_available
                                                                AND ap.id_analysis = ast.id_analysis
                                                                AND ap.id_sample_type = ast.id_sample_type)
                                                        AND (i_codification IS NULL OR
                                                            (i_codification IS NOT NULL AND EXISTS
                                                             (SELECT 1
                                                                 FROM codification_instit_soft cis, analysis_codification ac
                                                                WHERE cis.id_codification = i_codification
                                                                  AND cis.id_institution = i_prof.institution
                                                                  AND cis.id_software = i_prof.software
                                                                  AND cis.id_codification = ac.id_codification
                                                                  AND ac.flg_available = pk_lab_tests_constant.g_available
                                                                  AND ac.id_analysis = ast.id_analysis
                                                                  AND ac.id_sample_type = ast.id_sample_type)))
                                                        AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                                        AND (i_harvest IS NULL OR
                                                            (ast.id_sample_type = l_sample_type AND EXISTS
                                                             (SELECT 1
                                                                 FROM analysis_harvest ah
                                                                WHERE ah.id_harvest = i_harvest
                                                                  AND ah.id_sample_recipient = air.id_sample_recipient)))
                                                        AND ast.id_analysis = ar.id_analysis
                                                        AND ast.id_sample_type = ar.id_sample_type
                                                        AND a.id_analysis = acs.id_analysis(+)
                                                        AND (l_prof_access = 0 OR
                                                            (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                                                        AND (i_patient IS NULL OR
                                                            (((l_pat.gender IS NOT NULL AND
                                                            coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                                            ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR
                                                            l_pat.gender IS NULL OR
                                                            l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                                            (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                                                            nvl(a.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL))))) ec
                                 WHERE ec.parent_id IS NULL
                                   AND ec.flg_available = pk_lab_tests_constant.g_available
                                   AND rownum > 0)
                         ORDER BY rank, desc_category);
        ELSIF (i_exam_cat_parent IS NOT NULL AND i_sample_type IS NOT NULL)
        THEN
            -- only returns parent categories
            OPEN o_list FOR
                SELECT NULL               id_analysis_group,
                       NULL               desc_analysis,
                       id_sample_type,
                       NULL               desc_sample_type,
                       id_exam_cat,
                       desc_category,
                       id_exam_cat_parent
                  FROM (SELECT id_exam_cat,
                               pk_translation.get_translation(i_lang, code_exam_cat) desc_category,
                               id_sample_type,
                               id_exam_cat_parent,
                               rank
                          FROM (SELECT DISTINCT ec.id_exam_cat,
                                                ec.code_exam_cat,
                                                st.id_sample_type,
                                                ec.parent_id id_exam_cat_parent,
                                                ec.rank
                                  FROM sample_type st,
                                       analysis a,
                                       (SELECT *
                                          FROM analysis_sample_type
                                         WHERE flg_available = pk_lab_tests_constant.g_available
                                           AND (i_analysis_req IS NULL OR
                                               ((id_sample_type = l_sample_type AND instr(l_order_criteria, 'S') != 0) OR
                                               instr(l_order_criteria, 'S') = 0))) ast,
                                       (SELECT *
                                          FROM analysis_instit_soft
                                         WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                           AND id_software = i_prof.software
                                           AND id_institution = i_prof.institution
                                           AND flg_available = pk_lab_tests_constant.g_available
                                           AND (i_analysis_req IS NULL OR
                                               ((decode(l_order_exam_cat_parent,
                                                         pk_lab_tests_constant.g_yes,
                                                         (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                          i_prof,
                                                                                                          id_exam_cat)
                                                            FROM dual),
                                                         id_exam_cat) = l_exam_cat AND
                                               instr(l_order_criteria, 'C') != 0) OR instr(l_order_criteria, 'C') = 0))) ais,
                                       exam_cat ec,
                                       analysis_instit_recipient air,
                                       (SELECT *
                                          FROM analysis_room
                                         WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                           AND flg_default = pk_lab_tests_constant.g_yes
                                           AND id_institution = i_prof.institution
                                           AND flg_available = pk_lab_tests_constant.g_available) ar,
                                       (SELECT DISTINCT gar.id_record id_analysis
                                          FROM group_access ga
                                         INNER JOIN group_access_prof gaf
                                            ON gaf.id_group_access = ga.id_group_access
                                         INNER JOIN group_access_record gar
                                            ON gar.id_group_access = ga.id_group_access
                                         WHERE gaf.id_professional = i_prof.id
                                           AND ga.id_institution IN (i_prof.institution, 0)
                                           AND ga.id_software IN (i_prof.software, 0)
                                           AND ga.flg_type = 'A'
                                           AND gar.flg_type = 'A'
                                           AND ga.flg_available = pk_lab_tests_constant.g_available
                                           AND gaf.flg_available = pk_lab_tests_constant.g_available
                                           AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                                 WHERE st.id_sample_type = i_sample_type
                                   AND st.flg_available = pk_lab_tests_constant.g_available
                                   AND st.id_sample_type = ast.id_sample_type
                                   AND ast.id_analysis = a.id_analysis
                                   AND a.flg_available = pk_lab_tests_constant.g_available
                                   AND ast.id_analysis = ais.id_analysis
                                   AND ast.id_sample_type = ais.id_sample_type
                                   AND ais.id_exam_cat = ec.id_exam_cat
                                   AND ec.id_exam_cat IN (SELECT ec.id_exam_cat
                                                            FROM exam_cat ec
                                                           WHERE ec.parent_id = i_exam_cat_parent)
                                   AND ec.flg_available = pk_lab_tests_constant.g_available
                                   AND EXISTS
                                 (SELECT 1
                                          FROM analysis_param ap
                                         WHERE ap.id_software = i_prof.software
                                           AND ap.id_institution = i_prof.institution
                                           AND ap.flg_available = pk_lab_tests_constant.g_available
                                           AND ap.id_analysis = ast.id_analysis
                                           AND ap.id_sample_type = ast.id_sample_type)
                                   AND (i_codification IS NULL OR
                                       (i_codification IS NOT NULL AND EXISTS
                                        (SELECT 1
                                            FROM codification_instit_soft cis, analysis_codification ac
                                           WHERE cis.id_codification = i_codification
                                             AND cis.id_institution = i_prof.institution
                                             AND cis.id_software = i_prof.software
                                             AND cis.id_codification = ac.id_codification
                                             AND ac.flg_available = pk_lab_tests_constant.g_available
                                             AND ac.id_analysis = ast.id_analysis
                                             AND ac.id_sample_type = ast.id_sample_type)))
                                   AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                                   AND (i_harvest IS NULL OR
                                       (ast.id_sample_type = l_sample_type AND EXISTS
                                        (SELECT 1
                                            FROM analysis_harvest ah
                                           WHERE ah.id_harvest = i_harvest
                                             AND ah.id_sample_recipient = air.id_sample_recipient)))
                                   AND ast.id_analysis = ar.id_analysis
                                   AND ast.id_sample_type = ar.id_sample_type
                                   AND a.id_analysis = acs.id_analysis(+)
                                   AND (l_prof_access = 0 OR (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                                   AND (i_patient IS NULL OR
                                       (((l_pat.gender IS NOT NULL AND coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                       ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                       l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                       (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                                       nvl(a.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                                   AND rownum > 0)
                         ORDER BY rank, desc_category);
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_CATEGORY_SEARCH',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_category_search;

    FUNCTION get_lab_test_parameter_search
    (
        i_lang      IN language.id_language%TYPE,
        i_prof      IN profissional,
        i_value     IN VARCHAR2,
        o_flg_show  OUT VARCHAR2,
        o_msg       OUT VARCHAR2,
        o_msg_title OUT VARCHAR2,
        o_list      OUT pk_types.cursor_type,
        o_error     OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_count PLS_INTEGER;
    
        l_limit sys_config.desc_sys_config%TYPE := pk_sysconfig.get_config('NUM_RECORD_SEARCH', i_prof);
    
    BEGIN
    
        o_flg_show := pk_lab_tests_constant.g_no;
    
        g_error := 'DELETE TBL_TEMP';
        DELETE FROM tbl_temp;
    
        g_error := 'INSERT INTO TBL_TEMP';
        INSERT INTO tbl_temp
            (num_1, num_2, num_3, num_4, vc_1, num_5)
            WITH search AS
             (SELECT /*+materialize opt_estimate(table t rows=1)*/
               t.*, pk_lucene_utils.format_column_name(t.code_translation) table_name
                FROM TABLE(pk_translation.get_search_translation(i_lang,
                                                                 i_value,
                                                                 'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER OR ANALYSIS_PARAMETER_ALIAS.CODE_ANALYSIS_PARAMETER_ALIAS')) t)
            SELECT id_analysis_param,
                   id_analysis_parameter,
                   id_analysis,
                   id_sample_type,
                   decode(id_analysis_param_funcionality, NULL, pk_lab_tests_constant.g_no, pk_lab_tests_constant.g_yes) flg_selected,
                   position
              FROM (SELECT DISTINCT aparam.id_analysis_param,
                                    aparam.id_analysis_parameter,
                                    aparam.id_analysis,
                                    aparam.id_sample_type,
                                    apf.id_analysis_param_funcionality,
                                    t.position
                      FROM (SELECT *
                              FROM search
                             WHERE table_name = 'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER') t,
                           analysis_parameter ap,
                           analysis_param aparam,
                           analysis a,
                           analysis_sample_type ast,
                           analysis_param_funcionality apf
                     WHERE t.code_translation = ap.code_analysis_parameter
                       AND t.desc_translation IS NOT NULL
                       AND ap.flg_available = pk_lab_tests_constant.g_yes
                       AND ap.id_analysis_parameter = aparam.id_analysis_parameter
                       AND aparam.id_software = i_prof.software
                       AND aparam.id_institution = i_prof.institution
                       AND aparam.flg_available = pk_lab_tests_constant.g_yes
                       AND aparam.id_analysis = ast.id_analysis
                       AND aparam.id_sample_type = ast.id_sample_type
                       AND ast.flg_available = pk_lab_tests_constant.g_yes
                       AND ast.id_analysis = a.id_analysis
                       AND a.flg_available = pk_lab_tests_constant.g_yes
                       AND aparam.id_analysis_param = apf.id_analysis_param(+)
                       AND apf.flg_type(+) = pk_lab_tests_constant.g_apf_type_history
                    UNION
                    SELECT DISTINCT aparam.id_analysis_param,
                                    aparam.id_analysis_parameter,
                                    aparam.id_analysis,
                                    aparam.id_sample_type,
                                    apf.id_analysis_param_funcionality,
                                    t.position
                      FROM (SELECT *
                              FROM search
                             WHERE table_name = 'ANALYSIS_PARAMETER_ALIAS.CODE_ANALYSIS_PARAMETER_ALIAS') t,
                           analysis_parameter_alias apa,
                           analysis_parameter ap,
                           analysis_param aparam,
                           analysis a,
                           analysis_sample_type ast,
                           analysis_param_funcionality apf
                     WHERE t.code_translation = apa.code_analysis_parameter_alias
                       AND t.desc_translation IS NOT NULL
                       AND apa.id_analysis_parameter = ap.id_analysis_parameter
                       AND ap.id_analysis_parameter = aparam.id_analysis_parameter
                       AND aparam.id_software = i_prof.software
                       AND aparam.id_institution = i_prof.institution
                       AND aparam.flg_available = pk_lab_tests_constant.g_yes
                       AND ap.flg_available = pk_lab_tests_constant.g_yes
                       AND aparam.id_analysis = ast.id_analysis
                       AND aparam.id_sample_type = ast.id_sample_type
                       AND ast.flg_available = pk_lab_tests_constant.g_yes
                       AND ast.id_analysis = a.id_analysis
                       AND a.flg_available = pk_lab_tests_constant.g_yes
                       AND aparam.id_analysis_param = apf.id_analysis_param(+)
                       AND apf.flg_type(+) = pk_lab_tests_constant.g_apf_type_history);
    
        g_error := 'COUNT ANALYSIS';
        SELECT COUNT(0)
          INTO l_count
          FROM tbl_temp;
    
        IF l_count > l_limit
        THEN
            o_flg_show  := pk_lab_tests_constant.g_yes;
            o_msg       := pk_search.get_overlimit_message(i_lang           => i_lang,
                                                           i_prof           => i_prof,
                                                           i_flg_has_action => pk_lab_tests_constant.g_yes,
                                                           i_limit          => l_limit);
            o_msg_title := pk_message.get_message(i_lang, i_prof, 'SEARCH_CRITERIA_T011');
        ELSIF l_count = 0
        THEN
            o_flg_show  := pk_lab_tests_constant.g_yes;
            o_msg       := pk_message.get_message(i_lang, i_prof, 'COMMON_M117');
            o_msg_title := pk_message.get_message(i_lang, i_prof, 'SEARCH_CRITERIA_T011');
        
            pk_types.open_my_cursor(o_list);
            RETURN TRUE;
        END IF;
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT id_analysis_param, id_analysis, id_sample_type, desc_parameter, desc_analysis, flg_selected
              FROM (SELECT num_1 id_analysis_param,
                           num_3 id_analysis,
                           num_4 id_sample_type,
                           pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                     i_prof,
                                                                     pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                     'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                     num_2,
                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || num_4,
                                                                     NULL) desc_parameter,
                           pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                     i_prof,
                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                     'ANALYSIS.CODE_ANALYSIS.' || num_3,
                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || num_4,
                                                                     NULL) desc_analysis,
                           num_4 position,
                           vc_1 flg_selected
                      FROM tbl_temp
                     ORDER BY position)
             WHERE rownum <= l_limit;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_PARAMETER_SEARCH',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_parameter_search;

    FUNCTION get_lab_test_for_selection
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_patient         IN patient.id_patient%TYPE,
        i_sample_type     IN analysis.id_sample_type%TYPE,
        i_exam_cat        IN exam_cat.id_exam_cat%TYPE,
        i_exam_cat_parent IN exam_cat.parent_id%TYPE,
        i_codification    IN codification.id_codification%TYPE,
        i_analysis_req    IN analysis_req.id_analysis_req%TYPE,
        i_harvest         IN harvest.id_harvest%TYPE,
        o_list            OUT t_tbl_lab_tests_for_selection,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_pat IS
            SELECT gender, months_between(SYSDATE, dt_birth) / 12 age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_pat c_pat%ROWTYPE;
    
        l_sample_type sample_type.id_sample_type%TYPE;
        l_exam_cat    exam_cat.id_exam_cat%TYPE;
    
        l_prof_access PLS_INTEGER;
    
        l_search sys_config.desc_sys_config%TYPE := pk_sysconfig.get_config('SHOW_LAB_TEST_WITHOUT_SAMPLE', i_prof);
    
        l_order_criteria        sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_CRITERIA', i_prof);
        l_order_exam_cat_parent sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_ORDER_EXAM_CAT_PARENT',
                                                                                 i_prof);
    
        l_msg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T117');
    
        l_list t_tbl_lab_tests_for_selection;
    
    BEGIN
    
        IF i_patient IS NOT NULL
        THEN
            g_error := 'OPEN C_PAT';
            OPEN c_pat;
            FETCH c_pat
                INTO l_pat;
            CLOSE c_pat;
        END IF;
    
        g_error := 'I_ANALYSIS_REQ CONDITION';
        IF i_analysis_req IS NOT NULL
        THEN
            IF instr(l_order_criteria, 'S') != 0
            THEN
                BEGIN
                    SELECT DISTINCT ard.id_sample_type
                      INTO l_sample_type
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error       := 'MORE THEN ONE SAMPLE';
                        l_sample_type := NULL;
                END;
            END IF;
        
            IF instr(l_order_criteria, 'C') != 0
            THEN
                BEGIN
                    SELECT DISTINCT decode(l_order_exam_cat_parent,
                                           pk_lab_tests_constant.g_yes,
                                           (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                            i_prof,
                                                                                            ard.id_exam_cat)
                                              FROM dual),
                                           ard.id_exam_cat) id_exam_cat
                      INTO l_exam_cat
                      FROM analysis_req_det ard
                     WHERE ard.id_analysis_req = i_analysis_req;
                EXCEPTION
                    WHEN too_many_rows THEN
                        g_error    := 'MORE THEN ONE EXAM_CAT';
                        l_exam_cat := NULL;
                END;
            END IF;
        END IF;
    
        g_error := 'I_HARVEST CONDITION';
        IF i_harvest IS NOT NULL
        THEN
            SELECT DISTINCT ard.id_sample_type
              INTO l_sample_type
              FROM analysis_harvest ah, analysis_req_det ard
             WHERE ah.id_harvest = i_harvest
               AND ah.id_analysis_req_det = ard.id_analysis_req_det;
        END IF;
    
        g_error := 'GET PROF ACCESS';
        BEGIN
            SELECT COUNT(1)
              INTO l_prof_access
              FROM group_access_prof gaf
             INNER JOIN group_access ga
                ON gaf.id_group_access = ga.id_group_access
             WHERE gaf.id_professional = i_prof.id
               AND gaf.flg_available = pk_lab_tests_constant.g_available
               AND ga.id_institution IN (i_prof.institution, 0)
               AND ga.id_software IN (i_prof.software, 0)
               AND ga.flg_available = pk_lab_tests_constant.g_available
               AND ga.flg_type = 'A';
        EXCEPTION
            WHEN no_data_found THEN
                l_prof_access := 0;
        END;
    
        g_error := 'SELECT T_LAB_TESTS_FOR_SELECTION';
        SELECT t_lab_tests_for_selection(id_analysis,
                                         desc_analysis,
                                         id_sample_type,
                                         desc_sample_type,
                                         id_analysis_instit_soft,
                                         desc_perform,
                                         flg_clinical_question,
                                         TYPE,
                                         rank)
          BULK COLLECT
          INTO l_list
          FROM (SELECT id_analysis,
                       desc_analysis,
                       id_sample_type,
                       desc_sample_type,
                       id_analysis_instit_soft,
                       desc_perform,
                       flg_clinical_question,
                       TYPE,
                       rank
                  FROM (SELECT DISTINCT a.id_analysis,
                                        pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                 i_prof,
                                                                                 pk_lab_tests_constant.g_analysis_alias,
                                                                                 'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                 ast.id_analysis,
                                                                                 'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                 ast.id_sample_type,
                                                                                 NULL) ||
                                        pk_lab_tests_utils.get_lab_test_with_codification(i_lang,
                                                                                          i_prof,
                                                                                          ast.id_analysis,
                                                                                          ast.id_sample_type) desc_analysis,
                                        ast.id_sample_type,
                                        pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                 i_prof,
                                                                                 pk_lab_tests_constant.g_analysis_sample_alias,
                                                                                 'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                 ast.id_sample_type,
                                                                                 NULL) desc_sample_type,
                                        ais.id_analysis_instit_soft,
                                        decode(ais.flg_execute, pk_lab_tests_constant.g_no, l_msg, NULL) desc_perform,
                                        CASE
                                             WHEN aq.id_analysis IS NOT NULL
                                                  AND aq.id_sample_type IS NOT NULL
                                                  AND aq.id_sample_type = ast.id_sample_type THEN
                                              CASE
                                                  WHEN instr(nvl(aq.flg_mandatory, pk_lab_tests_constant.g_no),
                                                             pk_lab_tests_constant.g_yes) = 0 THEN
                                                   pk_lab_tests_constant.g_yes
                                                  ELSE
                                                   'M'
                                              END
                                             ELSE
                                              pk_lab_tests_constant.g_no
                                         END flg_clinical_question,
                                        'A' TYPE,
                                        pk_lab_tests_utils.get_lab_test_rank(i_lang, i_prof, a.id_analysis, NULL) rank
                          FROM analysis a,
                               (SELECT *
                                  FROM analysis_sample_type
                                 WHERE flg_available = pk_lab_tests_constant.g_available
                                   AND (i_analysis_req IS NULL OR
                                       ((id_sample_type = l_sample_type AND instr(l_order_criteria, 'S') != 0) OR
                                       instr(l_order_criteria, 'S') = 0))) ast,
                               (SELECT *
                                  FROM analysis_instit_soft
                                 WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                   AND id_software = i_prof.software
                                   AND id_institution = i_prof.institution
                                   AND flg_available = pk_lab_tests_constant.g_available
                                   AND (i_analysis_req IS NULL OR
                                       ((decode(l_order_exam_cat_parent,
                                                 pk_lab_tests_constant.g_yes,
                                                 (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                  i_prof,
                                                                                                  id_exam_cat)
                                                    FROM dual),
                                                 id_exam_cat) = l_exam_cat AND instr(l_order_criteria, 'C') != 0) OR
                                       instr(l_order_criteria, 'C') = 0))) ais,
                               analysis_instit_recipient air,
                               (SELECT *
                                  FROM analysis_room
                                 WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                   AND id_institution = i_prof.institution
                                   AND flg_available = pk_lab_tests_constant.g_yes
                                   AND flg_default = pk_lab_tests_constant.g_yes) ar,
                               (SELECT id_analysis, id_sample_type, concatenate(flg_mandatory) flg_mandatory
                                  FROM (SELECT DISTINCT aq.id_analysis, aq.id_sample_type, aq.flg_mandatory
                                          FROM analysis_questionnaire aq
                                         WHERE aq.id_institution = i_prof.institution
                                           AND aq.flg_available = pk_lab_tests_constant.g_available
                                           AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                                 GROUP BY id_analysis, id_sample_type) aq,
                               (SELECT DISTINCT gar.id_record id_analysis
                                  FROM group_access ga
                                 INNER JOIN group_access_prof gaf
                                    ON gaf.id_group_access = ga.id_group_access
                                 INNER JOIN group_access_record gar
                                    ON gar.id_group_access = ga.id_group_access
                                 WHERE gaf.id_professional = i_prof.id
                                   AND ga.id_institution IN (i_prof.institution, 0)
                                   AND ga.id_software IN (i_prof.software, 0)
                                   AND ga.flg_type = 'A'
                                   AND gar.flg_type = 'A'
                                   AND ga.flg_available = pk_lab_tests_constant.g_available
                                   AND gaf.flg_available = pk_lab_tests_constant.g_available
                                   AND gar.flg_available = pk_lab_tests_constant.g_available) acs,
                               (SELECT DISTINCT gar.id_record id_analysis
                                  FROM group_access ga
                                 INNER JOIN group_access_prof gaf
                                    ON gaf.id_group_access = ga.id_group_access
                                 INNER JOIN group_access_record gar
                                    ON gar.id_group_access = ga.id_group_access
                                 WHERE ga.id_institution IN (i_prof.institution)
                                   AND ga.id_software IN (i_prof.software)
                                   AND ga.flg_type = pk_lab_tests_constant.g_infectious_diseases_orders
                                   AND gar.flg_type = 'A'
                                   AND ga.flg_available = pk_lab_tests_constant.g_available
                                   AND gaf.flg_available = pk_lab_tests_constant.g_available
                                   AND gar.flg_available = pk_lab_tests_constant.g_available) a_infect
                         WHERE (i_sample_type IS NULL OR
                               (i_sample_type IS NOT NULL AND ast.id_sample_type = i_sample_type))
                           AND (i_exam_cat IS NULL OR
                               (i_exam_cat IS NOT NULL AND
                               ais.id_exam_cat IN
                               (SELECT ec.id_exam_cat
                                    FROM exam_cat ec
                                   WHERE ec.id_exam_cat = i_exam_cat
                                     AND ec.flg_available = pk_lab_tests_constant.g_available)))
                           AND (i_exam_cat_parent IS NULL OR
                               (i_exam_cat_parent IS NOT NULL AND
                               ais.id_exam_cat IN (SELECT ec.id_exam_cat
                                                       FROM exam_cat ec
                                                      WHERE ec.flg_available = pk_lab_tests_constant.g_available
                                                     CONNECT BY PRIOR ec.id_exam_cat = ec.parent_id
                                                      START WITH ec.id_exam_cat = i_exam_cat_parent)))
                           AND a.flg_available = pk_lab_tests_constant.g_available
                           AND a.id_analysis = ast.id_analysis
                           AND ast.id_analysis = ais.id_analysis
                           AND ast.id_sample_type = ais.id_sample_type
                           AND ast.id_analysis = a_infect.id_analysis(+)
                           AND EXISTS
                         (SELECT 1
                                  FROM analysis_param ap
                                 WHERE ap.id_software = i_prof.software
                                   AND ap.id_institution = i_prof.institution
                                   AND ap.flg_available = pk_lab_tests_constant.g_available
                                   AND ap.id_analysis = ast.id_analysis
                                   AND ap.id_sample_type = ast.id_sample_type)
                           AND (i_codification IS NULL OR
                               (i_codification IS NOT NULL AND EXISTS
                                (SELECT 1
                                    FROM codification_instit_soft cis, analysis_codification ac
                                   WHERE cis.id_codification = i_codification
                                     AND cis.id_institution = i_prof.institution
                                     AND cis.id_software = i_prof.software
                                     AND cis.id_codification = ac.id_codification
                                     AND ac.flg_available = pk_lab_tests_constant.g_available
                                     AND ac.id_analysis = ast.id_analysis
                                     AND ac.id_sample_type = ast.id_sample_type)))
                           AND ast.id_analysis = ar.id_analysis
                           AND ast.id_sample_type = ar.id_sample_type
                           AND ais.id_analysis_instit_soft = air.id_analysis_instit_soft
                           AND (i_harvest IS NULL OR
                               (ast.id_sample_type = l_sample_type AND EXISTS
                                (SELECT 1
                                    FROM analysis_harvest ah
                                   WHERE ah.id_harvest = i_harvest
                                     AND ah.id_sample_recipient = air.id_sample_recipient)))
                           AND ar.id_analysis = aq.id_analysis(+)
                           AND a.id_analysis = acs.id_analysis(+)
                           AND ((l_prof_access = 0 AND a_infect.id_analysis IS NULL) OR
                               (l_prof_access = 0 AND a_infect.id_analysis IS NOT NULL AND EXISTS
                                (SELECT 1
                                    FROM group_access ga
                                   INNER JOIN group_access_prof gaf
                                      ON gaf.id_group_access = ga.id_group_access
                                   INNER JOIN group_access_record gar
                                      ON gar.id_group_access = ga.id_group_access
                                   WHERE gaf.id_professional = i_prof.id
                                     AND ga.id_institution IN (i_prof.institution)
                                     AND ga.id_software IN (i_prof.software)
                                     AND ga.flg_type = pk_lab_tests_constant.g_infectious_diseases_orders
                                     AND gar.flg_type = 'A'
                                     AND ga.flg_available = pk_lab_tests_constant.g_available
                                     AND gaf.flg_available = pk_lab_tests_constant.g_available
                                     AND gar.flg_available = pk_lab_tests_constant.g_available)) OR
                               (l_prof_access != 0 AND acs.id_analysis IS NOT NULL))
                           AND (i_patient IS NULL OR
                               (((l_pat.gender IS NOT NULL AND coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                               ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                               l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                               (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND nvl(a.age_max, nvl(l_pat.age, 0)) OR
                               l_pat.age IS NULL)))
                           AND rownum > 0));
    
        g_error := 'OPEN O_LIST';
        SELECT t_lab_tests_for_selection(id_analysis,
                                         desc_analysis,
                                         id_sample_type,
                                         desc_sample_type,
                                         id_analysis_instit_soft,
                                         desc_perform,
                                         flg_clinical_question,
                                         TYPE,
                                         rank)
          BULK COLLECT
          INTO o_list
          FROM (SELECT id_analysis,
                       desc_analysis,
                       id_sample_type,
                       desc_sample_type,
                       id_analysis_instit_soft,
                       desc_perform,
                       flg_clinical_question,
                       TYPE,
                       rank
                  FROM TABLE(l_list)
                UNION ALL
                SELECT DISTINCT id_analysis,
                                pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                         i_prof,
                                                                         pk_lab_tests_constant.g_analysis_alias,
                                                                         'ANALYSIS.CODE_ANALYSIS.' || id_analysis,
                                                                         NULL) desc_analysis,
                                NULL id_sample_type,
                                NULL desc_sample_type,
                                id_analysis_instit_soft,
                                desc_perform,
                                flg_clinical_question,
                                TYPE,
                                rank
                  FROM TABLE(l_list)
                 WHERE i_sample_type IS NULL
                   AND i_analysis_req IS NULL
                   AND i_harvest IS NULL
                   AND l_search = pk_lab_tests_constant.g_yes
                 ORDER BY rank, desc_analysis);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_FOR_SELECTION',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_for_selection;

    FUNCTION get_lab_test_in_group
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        i_patient        IN patient.id_patient%TYPE,
        i_analysis_group IN analysis_group.id_analysis_group%TYPE,
        i_codification   IN codification.id_codification%TYPE,
        o_list           OUT pk_types.cursor_type,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_pat IS
            SELECT gender, months_between(SYSDATE, dt_birth) / 12 age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_pat         c_pat%ROWTYPE;
        l_prof_access PLS_INTEGER;
    
        l_msg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T117');
    
    BEGIN
    
        g_error := 'GET PROF ACCESS';
        BEGIN
            SELECT COUNT(1)
              INTO l_prof_access
              FROM group_access_prof gaf
             INNER JOIN group_access ga
                ON gaf.id_group_access = ga.id_group_access
             WHERE gaf.id_professional = i_prof.id
               AND gaf.flg_available = pk_lab_tests_constant.g_available
               AND ga.id_institution IN (i_prof.institution, 0)
               AND ga.id_software IN (i_prof.software, 0)
               AND ga.flg_available = pk_lab_tests_constant.g_available
               AND ga.flg_type = 'A';
        EXCEPTION
            WHEN no_data_found THEN
                l_prof_access := 0;
        END;
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT id_analysis_group,
                   id_analysis,
                   pk_lab_tests_utils.get_alias_translation(i_lang,
                                                            i_prof,
                                                            pk_lab_tests_constant.g_analysis_alias,
                                                            'ANALYSIS.CODE_ANALYSIS.' || id_analysis,
                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || id_sample_type,
                                                            NULL) ||
                   pk_lab_tests_utils.get_lab_test_with_codification(i_lang, i_prof, id_analysis, id_sample_type) desc_analysis,
                   id_sample_type,
                   pk_lab_tests_utils.get_alias_translation(i_lang,
                                                            i_prof,
                                                            pk_lab_tests_constant.g_analysis_sample_alias,
                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || id_sample_type,
                                                            NULL) desc_sample_type,
                   id_analysis_instit_soft,
                   desc_perform,
                   flg_clinical_question
              FROM (SELECT DISTINCT ag.id_analysis_group,
                                    a.id_analysis,
                                    ast.id_sample_type,
                                    ais.id_analysis_instit_soft,
                                    decode(ais.flg_execute, pk_lab_tests_constant.g_no, l_msg, NULL) desc_perform,
                                    CASE
                                         WHEN aq.id_analysis IS NOT NULL
                                              AND aq.id_sample_type IS NOT NULL
                                              AND aq.id_sample_type = ast.id_sample_type THEN
                                          CASE
                                              WHEN instr(nvl(aq.flg_mandatory, pk_lab_tests_constant.g_no),
                                                         pk_lab_tests_constant.g_yes) = 0 THEN
                                               pk_lab_tests_constant.g_yes
                                              ELSE
                                               'M'
                                          END
                                         ELSE
                                          pk_lab_tests_constant.g_no
                                     END flg_clinical_question,
                                    aa.rank
                      FROM analysis_group ag,
                           analysis_agp aa,
                           analysis a,
                           (SELECT *
                              FROM analysis_sample_type
                             WHERE flg_available = pk_lab_tests_constant.g_available) ast,
                           (SELECT *
                              FROM analysis_instit_soft
                             WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution
                               AND flg_available = pk_lab_tests_constant.g_available) ais,
                           (SELECT *
                              FROM analysis_room
                             WHERE flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                               AND id_institution = i_prof.institution
                               AND flg_available = pk_lab_tests_constant.g_yes
                               AND flg_default = pk_lab_tests_constant.g_yes) ar,
                           (SELECT id_analysis, id_sample_type, concatenate(flg_mandatory) flg_mandatory
                              FROM (SELECT DISTINCT aq.id_analysis, aq.id_sample_type, aq.flg_mandatory
                                      FROM analysis_questionnaire aq
                                     WHERE aq.id_institution = i_prof.institution
                                       AND aq.flg_available = pk_lab_tests_constant.g_available
                                       AND aq.flg_time = pk_lab_tests_constant.g_analysis_cq_on_order)
                             GROUP BY id_analysis, id_sample_type) aq,
                           (SELECT DISTINCT gar.id_record id_analysis
                              FROM group_access ga
                             INNER JOIN group_access_prof gaf
                                ON gaf.id_group_access = ga.id_group_access
                             INNER JOIN group_access_record gar
                                ON gar.id_group_access = ga.id_group_access
                             WHERE ga.id_institution IN (i_prof.institution)
                               AND ga.id_software IN (i_prof.software)
                               AND ga.flg_type = pk_lab_tests_constant.g_infectious_diseases_orders
                               AND gar.flg_type = 'A'
                               AND ga.flg_available = pk_lab_tests_constant.g_available
                               AND gaf.flg_available = pk_lab_tests_constant.g_available
                               AND gar.flg_available = pk_lab_tests_constant.g_available) a_infect
                     WHERE ag.id_analysis_group = i_analysis_group
                       AND ag.id_analysis_group = aa.id_analysis_group
                       AND aa.flg_available = pk_lab_tests_constant.g_available
                       AND aa.id_analysis = a.id_analysis
                       AND a.flg_available = pk_lab_tests_constant.g_available
                       AND a.id_analysis = a_infect.id_analysis(+)
                       AND aa.id_analysis = ast.id_analysis
                       AND aa.id_sample_type = ast.id_sample_type
                       AND aa.id_analysis = ais.id_analysis
                       AND aa.id_sample_type = ais.id_sample_type
                       AND EXISTS (SELECT *
                              FROM analysis_instit_soft ais
                             WHERE ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                               AND ais.id_software = i_prof.software
                               AND ais.id_institution = i_prof.institution
                               AND ais.flg_available = pk_lab_tests_constant.g_available
                               AND ais.id_analysis = ast.id_analysis
                               AND ais.id_sample_type = ast.id_sample_type)
                       AND ast.id_analysis = ar.id_analysis(+)
                       AND ast.id_sample_type = ar.id_sample_type(+)
                       AND (i_codification IS NULL OR
                           (i_codification IS NOT NULL AND EXISTS
                            (SELECT 1
                                FROM codification_instit_soft cis, analysis_codification ac
                               WHERE cis.id_codification = i_codification
                                 AND cis.id_institution = i_prof.institution
                                 AND cis.id_software = i_prof.software
                                 AND cis.id_codification = ac.id_codification
                                 AND ac.flg_available = pk_lab_tests_constant.g_available
                                 AND ac.id_analysis = ast.id_analysis
                                 AND ac.id_sample_type = ast.id_sample_type)))
                       AND ast.id_analysis = aq.id_analysis(+)
                       AND ast.id_sample_type = aq.id_sample_type(+)
                       AND ((l_prof_access = 0 AND a_infect.id_analysis IS NULL) OR
                           (l_prof_access = 0 AND a_infect.id_analysis IS NOT NULL AND EXISTS
                            (SELECT 1
                                FROM group_access ga
                               INNER JOIN group_access_prof gaf
                                  ON gaf.id_group_access = ga.id_group_access
                               INNER JOIN group_access_record gar
                                  ON gar.id_group_access = ga.id_group_access
                               WHERE gaf.id_professional = i_prof.id
                                 AND ga.id_institution IN (i_prof.institution)
                                 AND ga.id_software IN (i_prof.software)
                                 AND ga.flg_type = pk_lab_tests_constant.g_infectious_diseases_orders
                                 AND gar.flg_type = 'A'
                                 AND ga.flg_available = pk_lab_tests_constant.g_available
                                 AND gaf.flg_available = pk_lab_tests_constant.g_available
                                 AND gar.flg_available = pk_lab_tests_constant.g_available)) OR
                           (l_prof_access != 0 AND EXISTS
                            (SELECT 1
                                FROM analysis_group ag1,
                                     analysis_agp agp,
                                     (SELECT DISTINCT gar.id_record id_analysis
                                        FROM group_access ga
                                       INNER JOIN group_access_prof gaf
                                          ON gaf.id_group_access = ga.id_group_access
                                       INNER JOIN group_access_record gar
                                          ON gar.id_group_access = ga.id_group_access
                                       WHERE gaf.id_professional = i_prof.id
                                         AND ga.id_institution IN (i_prof.institution, 0)
                                         AND ga.id_software IN (i_prof.software, 0)
                                         AND ga.flg_type = 'A'
                                         AND gar.flg_type = 'A'
                                         AND ga.flg_available = pk_lab_tests_constant.g_available
                                         AND gaf.flg_available = pk_lab_tests_constant.g_available
                                         AND gar.flg_available = pk_lab_tests_constant.g_available) acs
                               WHERE ag1.id_analysis_group = ag.id_analysis_group
                                 AND ag1.id_analysis_group = agp.id_analysis_group
                                 AND agp.id_analysis = acs.id_analysis
                                 AND agp.id_analysis = aa.id_analysis)))
                       AND (i_patient IS NULL OR
                           (((l_pat.gender IS NOT NULL AND coalesce(a.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                           ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                           l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                           (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                           nvl(a.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                       AND rownum > 0)
             ORDER BY rank, desc_analysis;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_IN_GROUP',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_in_group;

    FUNCTION get_lab_test_in_group
    (
        i_lang           IN language.id_language%TYPE,
        i_analysis_group IN analysis_group.id_analysis_group%TYPE,
        o_lab_test       OUT table_number,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_lab_test_group(l_analysis_group IN NUMBER) IS
            SELECT aa.id_analysis
              FROM analysis_agp aa
             WHERE aa.id_analysis_group = l_analysis_group
               AND aa.flg_available = pk_lab_tests_constant.g_available;
    
        i NUMBER := 1;
    BEGIN
    
        o_lab_test := table_number();
    
        g_error := 'OPEN C_LAB_TEST_GROUP';
        FOR r_lab_test_group IN c_lab_test_group(i_analysis_group)
        LOOP
            o_lab_test.extend;
            o_lab_test(i) := r_lab_test_group.id_analysis;
            i := i + 1;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(NULL,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_IN_GROUP',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_in_group;

    FUNCTION get_lab_test_parameter
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_analysis    IN analysis.id_analysis%TYPE,
        i_sample_type IN sample_type.id_sample_type%TYPE,
        o_list        OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT ap.id_analysis_param,
                   ap.id_analysis,
                   ap.id_sample_type,
                   pk_lab_tests_utils.get_alias_translation(i_lang,
                                                            i_prof,
                                                            pk_lab_tests_constant.g_analysis_parameter_alias,
                                                            'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                            ap.id_analysis_parameter,
                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || ap.id_sample_type,
                                                            NULL) desc_parameter,
                   decode(apf.id_analysis_param, NULL, pk_alert_constant.g_no, pk_alert_constant.g_yes) flg_selected
              FROM analysis_param ap, analysis_param_funcionality apf
             WHERE ap.id_analysis = i_analysis
               AND (ap.id_sample_type = i_sample_type OR i_sample_type IS NULL)
               AND ap.id_software = i_prof.software
               AND ap.id_institution = i_prof.institution
               AND ap.flg_available = pk_lab_tests_constant.g_available
               AND ap.id_analysis_param = apf.id_analysis_param(+)
               AND apf.flg_type(+) = pk_lab_tests_constant.g_apf_type_history;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_PARAMETER',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_parameter;

    FUNCTION get_lab_test_resultsview
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_patient          IN patient.id_patient%TYPE,
        i_analysis_req_det IN table_number,
        i_flg_type         IN VARCHAR2,
        i_dt_min           IN VARCHAR2,
        i_dt_max           IN VARCHAR2,
        i_flg_report       IN VARCHAR2 DEFAULT 'N',
        o_list             OUT t_tbl_lab_tests_results,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_design_mode        sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_RESULT_TABLE_DESIGN', i_prof);
        l_flg_context_button sys_config.value%TYPE := pk_info_button.get_show_info_button(i_lang,
                                                                                          i_prof,
                                                                                          pk_alert_constant.g_task_lab_tests);
    
        l_dt_min TIMESTAMP WITH LOCAL TIME ZONE;
        l_dt_max TIMESTAMP WITH LOCAL TIME ZONE;
    
        l_reflex_test sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'LAB_TESTS_T206');
    
    BEGIN
    
        l_dt_min := CASE
                        WHEN i_dt_min IS NOT NULL THEN
                         pk_date_utils.get_timestamp_insttimezone(i_lang, i_prof, i_dt_min || '000000', 'YYYYMMDDHH24MISSFF')
                        ELSE
                         NULL
                    END;
    
        l_dt_max := CASE
                        WHEN i_dt_max IS NOT NULL THEN
                         pk_date_utils.get_timestamp_insttimezone(i_lang, i_prof, i_dt_max || '999999', 'YYYYMMDDHH24MISSFF') +
                         INTERVAL '59' SECOND
                        ELSE
                         NULL
                    END;
    
        g_error := 'OPEN T_LAB_TESTS_RESULTS';
        SELECT t_lab_tests_results(flg_type,
                                   id_analysis_req,
                                   id_analysis_req_det,
                                   id_ard_parent,
                                   id_analysis_req_par,
                                   id_analysis_result,
                                   id_analysis_result_par,
                                   id_arp_parent,
                                   id_analysis,
                                   id_analysis_parameter,
                                   id_sample_type,
                                   id_exam_cat,
                                   id_harvest,
                                   id_visit,
                                   id_episode,
                                   desc_analysis,
                                   desc_parameter,
                                   desc_sample,
                                   desc_category,
                                   partial_result,
                                   id_unit_measure,
                                   desc_unit_measure,
                                   prof_harvest,
                                   prof_spec_harvest,
                                   dt_harvest,
                                   dt_harvest_date,
                                   dt_harvest_hour,
                                   prof_result,
                                   prof_spec_result,
                                   dt_result,
                                   dt_result_date,
                                   dt_result_hour,
                                   RESULT,
                                   flg_multiple_result,
                                   flg_result_type,
                                   flg_status,
                                   flg_result_status,
                                   flg_relevant,
                                   result_status,
                                   result_range,
                                   result_color,
                                   ref_val,
                                   abnormality,
                                   desc_abnormality,
                                   prof_req,
                                   dt_req,
                                   result_notes,
                                   parameter_notes,
                                   desc_lab,
                                   desc_lab_notes,
                                   avail_button_create,
                                   avail_button_edit,
                                   avail_button_cancel,
                                   avail_button_read,
                                   avail_button_context,
                                   rank_analysis,
                                   rank_parameter,
                                   rank_category,
                                   dt_harvest_ord,
                                   dt_result_ord,
                                   rn)
          BULK COLLECT
          INTO o_list
          FROM (SELECT flg_type,
                       id_analysis_req,
                       id_analysis_req_det,
                       decode((SELECT /*+opt_estimate (table t rows=1)*/
                               COUNT(1)
                                FROM TABLE(id_arp_parent) t),
                              0,
                              NULL,
                              id_ard_parent) id_ard_parent,
                       id_analysis_req_par,
                       id_analysis_result,
                       id_analysis_result_par,
                       id_arp_parent,
                       id_analysis,
                       id_analysis_parameter,
                       id_sample_type,
                       id_exam_cat,
                       id_harvest,
                       id_visit,
                       id_episode,
                       desc_analysis,
                       desc_parameter,
                       desc_sample,
                       desc_category,
                       partial_result,
                       id_unit_measure,
                       desc_unit_measure,
                       prof_harvest,
                       prof_spec_harvest,
                       dt_harvest,
                       dt_harvest_date,
                       dt_harvest_hour,
                       prof_result,
                       prof_spec_result,
                       dt_result,
                       dt_result_date,
                       dt_result_hour,
                       RESULT,
                       flg_multiple_result,
                       flg_result_type,
                       flg_status,
                       flg_result_status,
                       flg_relevant,
                       result_status,
                       result_range,
                       result_color,
                       ref_val,
                       abnormality,
                       desc_abnormality,
                       prof_req,
                       dt_req,
                       result_notes,
                       parameter_notes,
                       desc_lab,
                       desc_lab_notes,
                       avail_button_create,
                       avail_button_edit,
                       avail_button_cancel,
                       avail_button_read,
                       avail_button_context,
                       rank_analysis,
                       rank_parameter,
                       rank_category,
                       pk_date_utils.trunc_insttimezone_str(i_prof, dt_harvest_ord, 'MI') dt_harvest_ord,
                       pk_date_utils.trunc_insttimezone_str(i_prof, dt_result_ord, 'MI') dt_result_ord,
                       CASE
                            WHEN i_flg_report = pk_lab_tests_constant.g_no THEN
                             CASE
                             -- when different harvest for the same id_analysis_req_det (diferent recipients for the same lab_test)
                                 WHEN COUNT(DISTINCT id_harvest)
                                  over(PARTITION BY id_ard_parent, id_analysis, id_sample_type) > 1 THEN
                                  decode(i_flg_type,
                                         'H',
                                         rank() over(PARTITION BY id_analysis_req,
                                              id_analysis,
                                              id_sample_type,
                                              id_harvest ORDER BY dt_harvest_ord DESC,
                                              id_harvest DESC NULLS FIRST),
                                         rank() over(PARTITION BY id_analysis_req,
                                              id_analysis,
                                              id_sample_type,
                                              id_harvest ORDER BY id_analysis_result DESC NULLS FIRST,
                                              id_analysis_result DESC NULLS FIRST))
                                 ELSE
                                  CASE
                                      WHEN (SELECT /*+opt_estimate (table t rows=1)*/
                                             COUNT(1)
                                              FROM TABLE(id_arp_parent) t) = 0
                                           AND (SELECT COUNT(1)
                                                  FROM TABLE(i_analysis_req_det) t) = 0 THEN
                                       decode(i_flg_type,
                                              'H',
                                              rank() over(PARTITION BY id_analysis_req,
                                                   id_analysis,
                                                   id_sample_type ORDER BY dt_harvest_ord DESC,
                                                   id_harvest DESC NULLS FIRST),
                                              rank() over(PARTITION BY id_analysis_req,
                                                   id_analysis,
                                                   id_sample_type ORDER BY dt_result_ord DESC,
                                                   id_analysis_result DESC NULLS FIRST))
                                      ELSE
                                       decode(i_flg_type,
                                              'H',
                                              rank() over(PARTITION BY id_analysis_req,
                                                   id_ard_parent,
                                                   id_analysis,
                                                   id_sample_type ORDER BY dt_harvest_ord DESC,
                                                   id_harvest DESC NULLS FIRST),
                                              rank() over(PARTITION BY id_analysis_req,
                                                   id_ard_parent,
                                                   id_analysis,
                                                   id_sample_type ORDER BY dt_result_ord DESC,
                                                   id_analysis_result DESC NULLS FIRST))
                                  END
                             END
                            ELSE
                             decode(i_flg_type,
                                    'H',
                                    dense_rank() over(PARTITION BY id_analysis,
                                         id_sample_type ORDER BY dt_harvest_ord DESC,
                                         id_harvest DESC NULLS FIRST),
                                    dense_rank() over(PARTITION BY id_analysis,
                                         id_sample_type ORDER BY dt_result_ord DESC,
                                         id_analysis_result DESC NULLS FIRST))
                        END rn
                  FROM (SELECT 'A' flg_type,
                               lte.id_analysis_req,
                               table_number(lte.id_analysis_req_det) id_analysis_req_det,
                               lte.id_analysis_req_det id_ard_parent,
                               NULL id_analysis_req_par,
                               NULL id_analysis_result,
                               NULL id_analysis_result_par,
                               NULL id_arp_parent,
                               lte.id_analysis,
                               NULL id_analysis_parameter,
                               lte.id_sample_type,
                               lte.id_exam_cat,
                               lte.id_harvest,
                               lte.id_visit,
                               lte.id_episode,
                               (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                pk_lab_tests_constant.g_analysis_alias,
                                                                                'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                lte.id_analysis,
                                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                lte.id_sample_type,
                                                                                NULL)
                                  FROM dual) desc_analysis,
                               NULL desc_parameter,
                               (SELECT pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                 i_prof,
                                                                                 pk_lab_tests_constant.g_analysis_sample_alias,
                                                                                 'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                 lte.id_sample_type,
                                                                                 NULL)
                                  FROM dual) desc_sample,
                               decode((SELECT pk_lab_tests_utils.get_lab_test_category(i_lang, i_prof, lte.id_exam_cat)
                                        FROM dual),
                                      NULL,
                                      NULL,
                                      lte.id_exam_cat,
                                      NULL,
                                      (SELECT pk_translation.get_translation(i_lang,
                                                                             'EXAM_CAT.CODE_EXAM_CAT.' ||
                                                                             (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                              i_prof,
                                                                                                                              lte.id_exam_cat)
                                                                                FROM dual))
                                         FROM dual) || ', ') ||
                               (SELECT pk_translation.get_translation(i_lang, 'EXAM_CAT.CODE_EXAM_CAT.' || lte.id_exam_cat)
                                  FROM dual) desc_category,
                               (SELECT pk_lab_tests_utils.get_lab_test_result_parameters(i_lang,
                                                                                         i_prof,
                                                                                         lte.id_analysis_req_det)
                                  FROM dual) partial_result,
                               NULL id_unit_measure,
                               NULL desc_unit_measure,
                               NULL ref_val,
                               NULL prof_harvest,
                               NULL prof_spec_harvest,
                               NULL dt_harvest,
                               NULL dt_harvest_date,
                               NULL dt_harvest_hour,
                               NULL prof_result,
                               NULL prof_spec_result,
                               NULL dt_result,
                               NULL dt_result_date,
                               NULL dt_result_hour,
                               NULL RESULT,
                               NULL flg_multiple_result,
                               NULL flg_result_type,
                               NULL flg_status,
                               NULL flg_result_status,
                               NULL flg_relevant,
                               NULL result_status,
                               NULL result_range,
                               NULL result_color,
                               NULL abnormality,
                               NULL desc_abnormality,
                               (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, lte.id_prof_writes)
                                  FROM dual) prof_req,
                               (SELECT pk_date_utils.date_char_tsz(i_lang, lte.dt_req, i_prof.institution, i_prof.software)
                                  FROM dual) dt_req,
                               NULL result_notes,
                               NULL parameter_notes,
                               NULL desc_lab,
                               NULL desc_lab_notes,
                               NULL avail_button_create,
                               NULL avail_button_edit,
                               NULL avail_button_cancel,
                               NULL avail_button_read,
                               NULL avail_button_context,
                               (SELECT pk_lab_tests_utils.get_lab_test_rank(i_lang, i_prof, lte.id_analysis, NULL)
                                  FROM dual) rank_analysis,
                               NULL rank_parameter,
                               (SELECT pk_lab_tests_utils.get_lab_test_category_rank(i_lang, i_prof, lte.id_exam_cat)
                                  FROM dual) rank_category,
                               lte.dt_harvest_tstz dt_harvest_ord,
                               NULL dt_result_ord
                          FROM (SELECT *
                                  FROM (SELECT lte.*,
                                               h.id_harvest,
                                               h.dt_harvest_tstz,
                                               row_number() over(PARTITION BY lte.id_analysis_req_det, h.id_harvest_group ORDER BY h.dt_harvest_tstz DESC NULLS LAST) rn
                                          FROM lab_tests_ea lte, analysis_harvest ah, harvest h
                                         WHERE lte.id_patient = i_patient
                                           AND ((i_dt_min IS NULL AND i_dt_max IS NULL AND
                                               (SELECT COUNT(1)
                                                    FROM TABLE(i_analysis_req_det) t) = 0) OR
                                               ((h.dt_harvest_tstz BETWEEN l_dt_min AND l_dt_max AND
                                               (SELECT COUNT(1)
                                                     FROM TABLE(i_analysis_req_det) t) = 0 AND i_flg_type = 'H') OR
                                               (lte.dt_analysis_result BETWEEN l_dt_min AND l_dt_max AND
                                               (SELECT COUNT(1)
                                                     FROM TABLE(i_analysis_req_det) t) = 0 AND i_flg_type = 'R')) OR
                                               (lte.id_analysis_req_det IN
                                               (SELECT /*+opt_estimate(table t rows=1)*/
                                                   *
                                                    FROM TABLE(i_analysis_req_det) t)))
                                           AND ((lte.id_ard_parent IS NULL AND
                                               (SELECT COUNT(1)
                                                    FROM TABLE(i_analysis_req_det) t) = 0) OR
                                               (SELECT COUNT(1)
                                                   FROM TABLE(i_analysis_req_det) t) != 0)
                                           AND lte.flg_status_det != pk_lab_tests_constant.g_analysis_cancel
                                           AND lte.id_analysis_req_det = ah.id_analysis_req_det
                                           AND ah.flg_status != pk_lab_tests_constant.g_harvest_inactive
                                           AND ah.id_harvest = h.id_harvest
                                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                         i_prof,
                                                                                                         lte.id_analysis)
                                                  FROM dual) = pk_alert_constant.g_yes
                                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                         i_prof,
                                                                                                         lte.id_analysis,
                                                                                                         pk_lab_tests_constant.g_infectious_diseases_results)
                                                  FROM dual) = pk_alert_constant.g_yes
                                           AND ((h.flg_status NOT IN
                                               (pk_lab_tests_constant.g_harvest_pending,
                                                  pk_lab_tests_constant.g_harvest_waiting,
                                                  pk_lab_tests_constant.g_harvest_cancel,
                                                  pk_lab_tests_constant.g_harvest_suspended) AND i_flg_type = 'H') OR
                                               (i_flg_type = 'R')))
                                 WHERE rn = 1) lte
                         WHERE (lte.flg_orig_analysis IS NULL OR lte.flg_orig_analysis NOT IN ('M', 'O', 'S'))
                           AND lte.id_analysis_result IS NULL
                        UNION ALL -- With results
                        SELECT 'A' flg_type,
                               decode(ar.id_analysis_req, NULL, 0, ar.id_analysis_req) id_analysis_req,
                               table_number(ar.id_analysis_req_det) id_analysis_req_det,
                               ar.id_analysis_req_det id_ard_parent,
                               NULL id_analysis_req_par,
                               ar.id_analysis_result,
                               NULL id_analysis_result_par,
                               table_number(aresp.id_arp_parent) id_arp_parent,
                               ar.id_analysis,
                               NULL id_analysis_parameter,
                               ar.id_sample_type,
                               ar.id_exam_cat,
                               ar.id_harvest,
                               NULL id_visit,
                               NULL id_episode,
                               (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                pk_lab_tests_constant.g_analysis_alias,
                                                                                'ANALYSIS.CODE_ANALYSIS.' || ar.id_analysis,
                                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                ar.id_sample_type,
                                                                                NULL)
                                  FROM dual) desc_analysis,
                               NULL desc_parameter,
                               (SELECT pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                 i_prof,
                                                                                 pk_lab_tests_constant.g_analysis_sample_alias,
                                                                                 'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                 ar.id_sample_type,
                                                                                 NULL)
                                  FROM dual) desc_sample,
                               decode((SELECT pk_lab_tests_utils.get_lab_test_category(i_lang, i_prof, ar.id_exam_cat)
                                        FROM dual),
                                      NULL,
                                      NULL,
                                      ar.id_exam_cat,
                                      NULL,
                                      (SELECT pk_translation.get_translation(i_lang,
                                                                             'EXAM_CAT.CODE_EXAM_CAT.' ||
                                                                             pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                      i_prof,
                                                                                                                      ar.id_exam_cat))
                                         FROM dual) || ', ') ||
                               (SELECT pk_translation.get_translation(i_lang, 'EXAM_CAT.CODE_EXAM_CAT.' || ar.id_exam_cat)
                                  FROM dual) desc_category,
                               (SELECT pk_lab_tests_utils.get_lab_test_result_parameters(i_lang,
                                                                                         i_prof,
                                                                                         ar.id_analysis_req_det)
                                  FROM dual) partial_result,
                               NULL id_unit_measure,
                               NULL desc_unit_measure,
                               NULL ref_val,
                               NULL prof_harvest,
                               NULL prof_spec_harvest,
                               NULL dt_harvest,
                               NULL dt_harvest_date,
                               NULL dt_harvest_hour,
                               NULL prof_result,
                               NULL prof_spec_result,
                               NULL dt_result,
                               NULL dt_result_date,
                               NULL dt_result_hour,
                               NULL RESULT,
                               NULL flg_multiple_result,
                               NULL flg_result_type,
                               NULL flg_status,
                               NULL flg_result_status,
                               NULL flg_relevant,
                               NULL result_status,
                               NULL result_range,
                               NULL result_color,
                               NULL abnormality,
                               NULL desc_abnormality,
                               (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, ar.id_prof_writes)
                                  FROM dual) prof_req,
                               (SELECT pk_date_utils.date_char_tsz(i_lang, ar.dt_req, i_prof.institution, i_prof.software)
                                  FROM dual) dt_req,
                               NULL result_notes,
                               NULL parameter_notes,
                               NULL desc_lab,
                               NULL desc_lab_notes,
                               NULL avail_button_create,
                               NULL avail_button_edit,
                               NULL avail_button_cancel,
                               NULL avail_button_read,
                               NULL avail_button_context,
                               (SELECT pk_lab_tests_utils.get_lab_test_rank(i_lang, i_prof, ar.id_analysis, NULL)
                                  FROM dual) rank_analysis,
                               NULL rank_parameter,
                               (SELECT pk_lab_tests_utils.get_lab_test_category_rank(i_lang, i_prof, ar.id_exam_cat)
                                  FROM dual) rank_category,
                               ar.dt_harvest_tstz dt_harvest_ord,
                               ar.dt_analysis_result_tstz dt_result_ord
                          FROM (SELECT *
                                  FROM (SELECT ar.*,
                                               nvl(h.dt_harvest_tstz, ar.dt_sample) dt_harvest_tstz,
                                               lte.dt_req,
                                               lte.id_prof_writes,
                                               lte.id_analysis_req,
                                               decode(ar.id_harvest,
                                                      NULL,
                                                      row_number() over(PARTITION BY ar.id_analysis_result ORDER BY
                                                           ar.dt_analysis_result_tstz DESC),
                                                      row_number()
                                                      over(PARTITION BY ar.id_analysis_req_det,
                                                           h.id_harvest_group ORDER BY h.dt_harvest_tstz DESC NULLS LAST)) rn
                                          FROM analysis_result ar, harvest h, lab_tests_ea lte
                                         WHERE ar.id_patient = i_patient
                                           AND ((i_dt_min IS NULL AND i_dt_max IS NULL AND
                                               (SELECT COUNT(1)
                                                    FROM TABLE(i_analysis_req_det) t) = 0) OR
                                               ((nvl(h.dt_harvest_tstz, ar.dt_sample) BETWEEN l_dt_min AND l_dt_max AND
                                               (SELECT COUNT(1)
                                                     FROM TABLE(i_analysis_req_det) t) = 0 AND i_flg_type = 'H') OR
                                               (ar.dt_analysis_result_tstz BETWEEN l_dt_min AND l_dt_max AND
                                               (SELECT COUNT(1)
                                                     FROM TABLE(i_analysis_req_det) t) = 0 AND i_flg_type = 'R')) OR
                                               (lte.id_analysis_req_det IN
                                               (SELECT /*+opt_estimate(table t rows=1)*/
                                                   *
                                                    FROM TABLE(i_analysis_req_det) t)))
                                           AND ((lte.id_ard_parent IS NULL AND
                                               (SELECT COUNT(1)
                                                    FROM TABLE(i_analysis_req_det) t) = 0) OR
                                               (SELECT COUNT(1)
                                                   FROM TABLE(i_analysis_req_det) t) != 0)
                                           AND ar.id_harvest = h.id_harvest(+)
                                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                         i_prof,
                                                                                                         lte.id_analysis)
                                                  FROM dual) = pk_alert_constant.g_yes
                                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                         i_prof,
                                                                                                         lte.id_analysis,
                                                                                                         pk_lab_tests_constant.g_infectious_diseases_results)
                                                  FROM dual) = pk_alert_constant.g_yes
                                           AND ((h.flg_status NOT IN
                                               (pk_lab_tests_constant.g_harvest_pending,
                                                  pk_lab_tests_constant.g_harvest_waiting,
                                                  pk_lab_tests_constant.g_harvest_cancel,
                                                  pk_lab_tests_constant.g_harvest_suspended) AND i_flg_type = 'H') OR
                                               (ar.dt_sample IS NOT NULL AND i_flg_type = 'H') OR (i_flg_type = 'R'))
                                           AND ar.id_analysis_req_det = lte.id_analysis_req_det(+))
                                 WHERE rn = 1) ar,
                               (SELECT id_analysis_req_det, id_arp_parent
                                  FROM (SELECT lte.id_analysis_req_det,
                                               arp.id_arp_parent,
                                               row_number() over(PARTITION BY ar.id_analysis_req_det ORDER BY arp.id_arp_parent DESC NULLS LAST) rn
                                          FROM lab_tests_ea lte, analysis_result ar, analysis_result_par arp
                                         WHERE lte.id_patient = i_patient
                                           AND lte.id_analysis_req_det = ar.id_analysis_req_det
                                           AND ar.id_analysis_result = arp.id_analysis_result)
                                 WHERE rn = 1) aresp
                         WHERE ar.id_analysis_req_det = aresp.id_analysis_req_det(+)
                        UNION ALL -- Without results
                        SELECT 'P' flg_type,
                               lte.id_analysis_req,
                               table_number(lte.id_analysis_req_det) id_analysis_req_det,
                               lte.id_analysis_req_det id_ard_parent,
                               lte.id_analysis_req_par,
                               NULL id_analysis_result,
                               NULL id_analysis_result_par,
                               NULL id_arp_parent,
                               lte.id_analysis,
                               lte.id_analysis_parameter,
                               lte.id_sample_type,
                               lte.id_exam_cat,
                               lte.id_harvest,
                               lte.id_visit,
                               lte.id_episode,
                               (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                pk_lab_tests_constant.g_analysis_alias,
                                                                                'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                lte.id_analysis,
                                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                lte.id_sample_type,
                                                                                NULL)
                                  FROM dual) desc_analysis,
                               (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                                'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                                lte.id_analysis_parameter,
                                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                lte.id_sample_type,
                                                                                NULL)
                                  FROM dual) desc_parameter,
                               (SELECT pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                 i_prof,
                                                                                 pk_lab_tests_constant.g_analysis_sample_alias,
                                                                                 'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                 lte.id_sample_type,
                                                                                 NULL)
                                  FROM dual) desc_sample,
                               decode((SELECT pk_lab_tests_utils.get_lab_test_category(i_lang, i_prof, lte.id_exam_cat)
                                        FROM dual),
                                      NULL,
                                      NULL,
                                      lte.id_exam_cat,
                                      NULL,
                                      (SELECT pk_translation.get_translation(i_lang,
                                                                             'EXAM_CAT.CODE_EXAM_CAT.' ||
                                                                             (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                              i_prof,
                                                                                                                              lte.id_exam_cat)
                                                                                FROM dual))
                                         FROM dual) || ', ') ||
                               (SELECT pk_translation.get_translation(i_lang, 'EXAM_CAT.CODE_EXAM_CAT.' || lte.id_exam_cat)
                                  FROM dual) desc_category,
                               NULL partial_result,
                               NULL id_unit_measure,
                               (SELECT pk_translation.get_translation(i_lang,
                                                                      'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                      (SELECT pk_lab_tests_utils.get_lab_test_unit_measure(i_lang,
                                                                                                                           i_prof,
                                                                                                                           lte.id_analysis,
                                                                                                                           lte.id_sample_type,
                                                                                                                           lte.id_analysis_parameter)
                                                                         FROM dual))
                                  FROM dual) desc_unit_measure,
                               (SELECT pk_lab_tests_utils.get_lab_test_reference_value(i_lang,
                                                                                       i_prof,
                                                                                       i_patient,
                                                                                       lte.id_analysis,
                                                                                       lte.id_sample_type,
                                                                                       lte.id_analysis_parameter,
                                                                                       'ALL')
                                  FROM dual) ref_val,
                               (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, lte.id_prof_harvest)
                                  FROM dual) prof_harvest,
                               (SELECT pk_prof_utils.get_spec_signature(i_lang,
                                                                        i_prof,
                                                                        lte.id_prof_harvest,
                                                                        lte.dt_harvest_tstz,
                                                                        lte.id_episode)
                                  FROM dual) prof_spec_harvest,
                               (SELECT pk_date_utils.date_char_tsz(i_lang,
                                                                   lte.dt_harvest_tstz,
                                                                   i_prof.institution,
                                                                   i_prof.software)
                                  FROM dual) dt_harvest,
                               (SELECT pk_date_utils.dt_chr_tsz(i_lang, lte.dt_harvest_tstz, i_prof)
                                  FROM dual) dt_harvest_date,
                               (SELECT pk_date_utils.date_char_hour_tsz(i_lang,
                                                                        lte.dt_harvest_tstz,
                                                                        i_prof.institution,
                                                                        i_prof.software)
                                  FROM dual) dt_harvest_hour,
                               NULL prof_result,
                               NULL prof_spec_result,
                               NULL dt_result,
                               NULL dt_result_date,
                               NULL dt_result_hour,
                               NULL RESULT,
                               NULL flg_multiple_result,
                               NULL flg_result_type,
                               NULL flg_status,
                               NULL flg_result_status,
                               NULL flg_relevant,
                               NULL result_status,
                               NULL result_range,
                               NULL result_color,
                               NULL abnormality,
                               NULL desc_abnormality,
                               NULL prof_req,
                               NULL dt_req,
                               NULL result_notes,
                               NULL parameter_notes,
                               NULL desc_lab,
                               NULL desc_lab_notes,
                               (SELECT pk_lab_tests_utils.get_lab_test_permission(i_lang,
                                                                                  i_prof,
                                                                                  pk_lab_tests_constant.g_analysis_area_results,
                                                                                  pk_lab_tests_constant.g_analysis_button_create,
                                                                                  lte.id_episode,
                                                                                  NULL,
                                                                                  lte.id_analysis_req_det,
                                                                                  NULL)
                                  FROM dual) avail_button_create,
                               pk_lab_tests_constant.g_no avail_button_edit,
                               pk_lab_tests_constant.g_no avail_button_cancel,
                               pk_lab_tests_constant.g_no avail_button_read,
                               NULL avail_button_context,
                               (SELECT pk_lab_tests_utils.get_lab_test_rank(i_lang, i_prof, lte.id_analysis, NULL)
                                  FROM dual) rank_analysis,
                               (SELECT pk_lab_tests_utils.get_lab_test_parameter_rank(i_lang,
                                                                                      i_prof,
                                                                                      lte.id_analysis,
                                                                                      lte.id_sample_type,
                                                                                      lte.id_analysis_parameter)
                                  FROM dual) rank_parameter,
                               (SELECT pk_lab_tests_utils.get_lab_test_category_rank(i_lang, i_prof, lte.id_exam_cat)
                                  FROM dual) rank_category,
                               lte.dt_harvest_tstz dt_harvest_ord,
                               NULL dt_result_ord
                          FROM (SELECT lte.*,
                                       arp.id_analysis_req_par,
                                       arp.id_analysis_parameter,
                                       h.id_harvest,
                                       h.id_prof_harvest,
                                       h.dt_harvest_tstz,
                                       row_number() over(PARTITION BY lte.id_analysis_req_det, arp.id_analysis_req_par, h.id_harvest_group ORDER BY h.dt_harvest_tstz DESC NULLS LAST) rn
                                  FROM lab_tests_ea lte, analysis_req_par arp, analysis_harvest ah, harvest h
                                 WHERE lte.id_patient = i_patient
                                   AND ((i_dt_min IS NULL AND i_dt_max IS NULL AND
                                       (SELECT COUNT(1)
                                            FROM TABLE(i_analysis_req_det) t) = 0) OR
                                       ((h.dt_harvest_tstz BETWEEN l_dt_min AND l_dt_max AND
                                       (SELECT COUNT(1)
                                             FROM TABLE(i_analysis_req_det) t) = 0 AND i_flg_type = 'H')) OR
                                       (lte.id_analysis_req_det IN
                                       (SELECT /*+opt_estimate(table t rows=1)*/
                                           *
                                            FROM TABLE(i_analysis_req_det) t)))
                                   AND lte.flg_status_det NOT IN
                                       (pk_lab_tests_constant.g_analysis_result, pk_lab_tests_constant.g_analysis_cancel)
                                   AND lte.id_analysis_req_det = arp.id_analysis_req_det
                                   AND lte.id_analysis_req_det = ah.id_analysis_req_det
                                   AND ah.flg_status != pk_lab_tests_constant.g_harvest_inactive
                                   AND ah.id_harvest = h.id_harvest
                                   AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                 i_prof,
                                                                                                 lte.id_analysis)
                                          FROM dual) = pk_alert_constant.g_yes
                                   AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                 i_prof,
                                                                                                 lte.id_analysis,
                                                                                                 pk_lab_tests_constant.g_infectious_diseases_results)
                                          FROM dual) = pk_alert_constant.g_yes
                                   AND h.flg_status NOT IN (pk_lab_tests_constant.g_harvest_pending,
                                                            pk_lab_tests_constant.g_harvest_waiting,
                                                            pk_lab_tests_constant.g_harvest_cancel,
                                                            pk_lab_tests_constant.g_harvest_suspended)
                                   AND NOT EXISTS (SELECT 1
                                          FROM analysis_result ar, harvest h2
                                         WHERE ar.id_harvest = h2.id_harvest
                                           AND h2.id_harvest_group = h.id_harvest_group
                                           AND ar.id_analysis = lte.id_analysis)) lte
                         WHERE lte.rn = 1
                        UNION ALL -- Results
                        SELECT 'P' flg_type,
                               decode(lte.id_analysis_req, NULL, 0, lte.id_analysis_req) id_analysis_req,
                               table_number(lte.id_analysis_req_det) id_analysis_req_det,
                               lte.id_analysis_req_det id_ard_parent,
                               aresp.id_analysis_req_par,
                               aresp.id_analysis_result,
                               aresp.id_analysis_result_par,
                               decode(aresp.id_arp_parent, NULL, NULL, table_number(aresp.id_arp_parent)) id_arp_parent,
                               aresp.id_analysis,
                               aresp.id_analysis_parameter,
                               aresp.id_sample_type,
                               aresp.id_exam_cat,
                               aresp.id_harvest,
                               lte.id_visit,
                               lte.id_episode,
                               (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                pk_lab_tests_constant.g_analysis_alias,
                                                                                'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                aresp.id_analysis,
                                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                aresp.id_sample_type,
                                                                                NULL)
                                  FROM dual) desc_analysis,
                               (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                                'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                                aresp.id_analysis_parameter,
                                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                aresp.id_sample_type,
                                                                                NULL)
                                  FROM dual) desc_parameter,
                               (SELECT pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                 i_prof,
                                                                                 pk_lab_tests_constant.g_analysis_sample_alias,
                                                                                 'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                 aresp.id_sample_type,
                                                                                 NULL)
                                  FROM dual) desc_sample,
                               decode((SELECT pk_lab_tests_utils.get_lab_test_category(i_lang, i_prof, aresp.id_exam_cat)
                                        FROM dual),
                                      NULL,
                                      NULL,
                                      aresp.id_exam_cat,
                                      NULL,
                                      (SELECT pk_translation.get_translation(i_lang,
                                                                             'EXAM_CAT.CODE_EXAM_CAT.' ||
                                                                             pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                      i_prof,
                                                                                                                      aresp.id_exam_cat))
                                         FROM dual) || ', ') ||
                               (SELECT pk_translation.get_translation(i_lang,
                                                                      'EXAM_CAT.CODE_EXAM_CAT.' || aresp.id_exam_cat)
                                  FROM dual) desc_category,
                               NULL partial_result,
                               aresp.id_unit_measure,
                               nvl(aresp.desc_unit_measure,
                                   (SELECT pk_translation.get_translation(i_lang,
                                                                          'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                          aresp.id_unit_measure)
                                      FROM dual)) desc_unit_measure,
                               nvl(aresp.ref_val,
                                   decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                          nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                          ' - ',
                                          NULL,
                                          nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                          nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max))) ref_val,
                               (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, aresp.id_prof_harvest)
                                  FROM dual) prof_harvest,
                               (SELECT pk_prof_utils.get_spec_signature(i_lang,
                                                                        i_prof,
                                                                        aresp.id_prof_harvest,
                                                                        aresp.dt_harvest_tstz,
                                                                        aresp.id_episode)
                                  FROM dual) prof_spec_harvest,
                               (SELECT pk_date_utils.date_char_tsz(i_lang,
                                                                   aresp.dt_harvest_tstz,
                                                                   i_prof.institution,
                                                                   i_prof.software)
                                  FROM dual) dt_harvest,
                               (SELECT pk_date_utils.dt_chr_tsz(i_lang, aresp.dt_harvest_tstz, i_prof)
                                  FROM dual) dt_harvest_date,
                               (SELECT pk_date_utils.date_char_hour_tsz(i_lang,
                                                                        aresp.dt_harvest_tstz,
                                                                        i_prof.institution,
                                                                        i_prof.software)
                                  FROM dual) dt_harvest_hour,
                               (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, aresp.id_professional)
                                  FROM dual) prof_result,
                               (SELECT pk_prof_utils.get_spec_signature(i_lang,
                                                                        i_prof,
                                                                        aresp.id_professional,
                                                                        aresp.dt_analysis_result_tstz,
                                                                        aresp.id_episode)
                                  FROM dual) prof_spec_result,
                               (SELECT pk_date_utils.date_char_tsz(i_lang,
                                                                   aresp.dt_analysis_result_tstz,
                                                                   i_prof.institution,
                                                                   i_prof.software)
                                  FROM dual) dt_result,
                               (SELECT pk_date_utils.dt_chr_tsz(i_lang, aresp.dt_analysis_result_tstz, i_prof)
                                  FROM dual) dt_result_date,
                               (SELECT pk_date_utils.date_char_hour_tsz(i_lang,
                                                                        aresp.dt_analysis_result_tstz,
                                                                        i_prof.institution,
                                                                        i_prof.software)
                                  FROM dual) dt_result_hour,
                               decode(l_design_mode,
                                      'D',
                                      decode(pk_lab_tests_utils.get_lab_test_doc_external(i_lang,
                                                                                          i_prof,
                                                                                          aresp.id_analysis_result_par),
                                             NULL,
                                             decode(aresp.id_analysis_desc,
                                                    NULL,
                                                    decode(aresp.analysis_result_value_2,
                                                           NULL,
                                                           aresp.desc_analysis_result,
                                                           to_clob(aresp.comparator || aresp.analysis_result_value_1 ||
                                                                   aresp.separator || aresp.analysis_result_value_2)),
                                                    (SELECT decode(ad.icon,
                                                                   NULL,
                                                                   (SELECT pk_translation.get_translation(i_lang,
                                                                                                          ad.code_analysis_desc)
                                                                      FROM dual),
                                                                   ad.icon || '|' || (SELECT pk_translation.get_translation(i_lang,
                                                                                                                            ad.code_analysis_desc)
                                                                                        FROM dual))
                                                       FROM analysis_desc ad
                                                      WHERE ad.id_analysis_desc = aresp.id_analysis_desc)) ||
                                             decode(a.value, NULL, NULL, ' ' || a.value),
                                             'ImportDocIcon|' ||
                                             pk_lab_tests_utils.get_lab_test_doc_external(i_lang,
                                                                                          i_prof,
                                                                                          aresp.id_analysis_result_par) || CASE
                                                 WHEN aresp.desc_analysis_result IS NOT NULL THEN
                                                  '|' || aresp.desc_analysis_result
                                             END),
                                      decode(aresp.id_professional_cancel,
                                             NULL,
                                             decode(pk_lab_tests_utils.get_lab_test_doc_external(i_lang,
                                                                                                 i_prof,
                                                                                                 aresp.id_analysis_result_par),
                                                    NULL,
                                                    decode(aresp.id_analysis_desc,
                                                           NULL,
                                                           decode(aresp.analysis_result_value_2,
                                                                  NULL,
                                                                  aresp.desc_analysis_result,
                                                                  to_clob(aresp.comparator || aresp.analysis_result_value_1 ||
                                                                          aresp.separator || aresp.analysis_result_value_2)),
                                                           (SELECT decode(ad.icon,
                                                                          NULL,
                                                                          (SELECT pk_translation.get_translation(i_lang,
                                                                                                                 ad.code_analysis_desc)
                                                                             FROM dual),
                                                                          ad.icon || '|' || (SELECT pk_translation.get_translation(i_lang,
                                                                                                                                   ad.code_analysis_desc)
                                                                                               FROM dual))
                                                              FROM analysis_desc ad
                                                             WHERE ad.id_analysis_desc = aresp.id_analysis_desc)) ||
                                                    decode(a.value, NULL, NULL, ' ' || a.value),
                                                    'ImportDocIcon|' ||
                                                    pk_lab_tests_utils.get_lab_test_doc_external(i_lang,
                                                                                                 i_prof,
                                                                                                 aresp.id_analysis_result_par) || CASE
                                                        WHEN aresp.desc_analysis_result IS NOT NULL THEN
                                                         '|' || aresp.desc_analysis_result
                                                    END),
                                             'CancelIcon|' ||
                                             decode(aresp.id_analysis_desc,
                                                    NULL,
                                                    decode(aresp.analysis_result_value_2,
                                                           NULL,
                                                           aresp.desc_analysis_result,
                                                           to_clob(aresp.comparator || aresp.analysis_result_value_1 ||
                                                                   aresp.separator || aresp.analysis_result_value_2)),
                                                    (SELECT pk_translation.get_translation(i_lang,
                                                                                           'ANALYSIS_DESC.CODE_ANALYSIS_DESC.' ||
                                                                                           aresp.id_analysis_desc)
                                                       FROM dual) || decode(a.value, NULL, NULL, ' ' || a.value)))) RESULT,
                               aresp.flg_mult_result flg_multiple_result,
                               decode(l_design_mode,
                                      'D',
                                      decode(pk_lab_tests_utils.get_lab_test_doc_external(i_lang,
                                                                                          i_prof,
                                                                                          aresp.id_analysis_result_par),
                                             NULL,
                                             decode(pk_utils.is_number(dbms_lob.substr(aresp.desc_analysis_result, 3800)),
                                                    pk_lab_tests_constant.g_yes,
                                                    pk_lab_tests_constant.g_analysis_result_number,
                                                    decode(aresp.id_analysis_desc,
                                                           NULL,
                                                           pk_lab_tests_constant.g_analysis_result_text,
                                                           (SELECT decode(ad.icon,
                                                                          NULL,
                                                                          pk_lab_tests_constant.g_analysis_result_text,
                                                                          pk_lab_tests_constant.g_analysis_result_icon)
                                                              FROM analysis_desc ad
                                                             WHERE ad.id_analysis_desc = aresp.id_analysis_desc))),
                                             pk_lab_tests_constant.g_analysis_result_pdf),
                                      decode(pk_lab_tests_utils.get_lab_test_doc_external(i_lang,
                                                                                          i_prof,
                                                                                          aresp.id_analysis_result_par),
                                             NULL,
                                             decode(aresp.id_professional_cancel,
                                                    NULL,
                                                    decode(pk_utils.is_number(dbms_lob.substr(aresp.desc_analysis_result,
                                                                                              3800)),
                                                           pk_lab_tests_constant.g_yes,
                                                           pk_lab_tests_constant.g_analysis_result_number,
                                                           decode(aresp.id_analysis_desc,
                                                                  NULL,
                                                                  pk_lab_tests_constant.g_analysis_result_text,
                                                                  (SELECT decode(ad.icon,
                                                                                 NULL,
                                                                                 pk_lab_tests_constant.g_analysis_result_text,
                                                                                 pk_lab_tests_constant.g_analysis_result_icon)
                                                                     FROM analysis_desc ad
                                                                    WHERE ad.id_analysis_desc = aresp.id_analysis_desc))),
                                                    pk_lab_tests_constant.g_analysis_result_icon),
                                             pk_lab_tests_constant.g_analysis_result_pdf)) flg_result_type,
                               decode(aresp.id_professional_cancel,
                                      NULL,
                                      decode(lte.flg_status_det,
                                             pk_lab_tests_constant.g_analysis_result,
                                             NULL,
                                             pk_lab_tests_constant.g_analysis_read),
                                      pk_lab_tests_constant.g_analysis_cancel) flg_status,
                               decode(l_design_mode,
                                      'D',
                                      rs.value,
                                      decode(aresp.dt_analysis_result_par_upd,
                                             aresp.dt_analysis_result_par_tstz,
                                             decode(aresp.id_professional_cancel, NULL, rs.value, NULL),
                                             decode(aresp.id_professional_cancel, NULL, rs.value || 'E', NULL))) flg_result_status,
                               aresp.flg_relevant,
                               (SELECT pk_translation.get_translation(i_lang,
                                                                      'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                      rs.id_result_status)
                                  FROM dual) result_status,
                               CASE
                                   WHEN pk_utils.is_number(dbms_lob.substr(aresp.desc_analysis_result, 3800)) =
                                        pk_lab_tests_constant.g_yes
                                        AND analysis_result_value_2 IS NULL THEN
                                    CASE
                                        WHEN aresp.analysis_result_value_1 < aresp.ref_val_min THEN
                                         pk_lab_tests_constant.g_analysis_result_below
                                        WHEN aresp.analysis_result_value_1 > aresp.ref_val_max THEN
                                         pk_lab_tests_constant.g_analysis_result_above
                                        ELSE
                                         NULL
                                    END
                                   ELSE
                                    NULL
                               END result_range,
                               CASE
                                   WHEN pk_utils.is_number(dbms_lob.substr(aresp.desc_analysis_result, 3800)) =
                                        pk_lab_tests_constant.g_yes
                                        AND analysis_result_value_2 IS NULL THEN
                                    CASE
                                        WHEN aresp.analysis_result_value_1 < aresp.ref_val_min THEN
                                         '0xC3000A'
                                        WHEN aresp.analysis_result_value_1 > aresp.ref_val_max THEN
                                         '0xC3000A'
                                        ELSE
                                         CASE
                                             WHEN aresp.id_abnormality IS NOT NULL THEN
                                              a.color_code
                                             ELSE
                                              NULL
                                         END
                                    END
                                   ELSE
                                    CASE
                                        WHEN aresp.id_abnormality IS NOT NULL THEN
                                         a.color_code
                                        ELSE
                                         NULL
                                    END
                               END result_color,
                               a.value abnormality,
                               (SELECT pk_translation.get_translation(i_lang, a.code_abnormality)
                                  FROM dual) desc_abnormality,
                               (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, lte.id_prof_writes)
                                  FROM dual) prof_req,
                               (SELECT pk_date_utils.date_char_tsz(i_lang, lte.dt_req, i_prof.institution, i_prof.software)
                                  FROM dual) dt_req,
                               aresp.notes result_notes,
                               decode(dbms_lob.getlength(aresp.parameter_notes),
                                      NULL,
                                      decode(dbms_lob.getlength(aresp.interface_notes),
                                             NULL,
                                             to_clob(''),
                                             aresp.interface_notes),
                                      aresp.parameter_notes) parameter_notes,
                               aresp.laboratory_short_desc desc_lab,
                               aresp.laboratory_desc desc_lab_notes,
                               pk_lab_tests_constant.g_no avail_button_create,
                               (SELECT pk_lab_tests_utils.get_lab_test_permission(i_lang,
                                                                                  i_prof,
                                                                                  pk_lab_tests_constant.g_analysis_area_results,
                                                                                  pk_lab_tests_constant.g_analysis_button_edit,
                                                                                  lte.id_episode,
                                                                                  NULL,
                                                                                  lte.id_analysis_req_det,
                                                                                  NULL)
                                  FROM dual) avail_button_edit,
                               (SELECT pk_lab_tests_utils.get_lab_test_permission(i_lang,
                                                                                  i_prof,
                                                                                  pk_lab_tests_constant.g_analysis_area_results,
                                                                                  pk_lab_tests_constant.g_analysis_button_cancel,
                                                                                  lte.id_episode,
                                                                                  NULL,
                                                                                  lte.id_analysis_req_det,
                                                                                  NULL)
                                  FROM dual) avail_button_cancel,
                               (SELECT pk_lab_tests_utils.get_lab_test_permission(i_lang,
                                                                                  i_prof,
                                                                                  pk_lab_tests_constant.g_analysis_area_results,
                                                                                  pk_lab_tests_constant.g_analysis_button_read,
                                                                                  lte.id_episode,
                                                                                  NULL,
                                                                                  lte.id_analysis_req_det,
                                                                                  NULL)
                                  FROM dual) avail_button_read,
                               l_flg_context_button avail_button_context,
                               (SELECT pk_lab_tests_utils.get_lab_test_rank(i_lang, i_prof, aresp.id_analysis, NULL)
                                  FROM dual) rank_analysis,
                               (SELECT pk_lab_tests_utils.get_lab_test_parameter_rank(i_lang,
                                                                                      i_prof,
                                                                                      aresp.id_analysis,
                                                                                      aresp.id_sample_type,
                                                                                      aresp.id_analysis_parameter)
                                  FROM dual) rank_parameter,
                               (SELECT pk_lab_tests_utils.get_lab_test_category_rank(i_lang, i_prof, aresp.id_exam_cat)
                                  FROM dual) rank_category,
                               aresp.dt_harvest_tstz dt_harvest_ord,
                               aresp.dt_analysis_result_tstz dt_result_ord
                          FROM (SELECT *
                                  FROM (SELECT arp.*,
                                               ar.id_analysis_req_det,
                                               ar.id_analysis,
                                               ar.id_sample_type,
                                               ar.id_exam_cat,
                                               h.id_harvest,
                                               h.id_prof_harvest,
                                               nvl(h.dt_harvest_tstz, ar.dt_sample) dt_harvest_tstz,
                                               ar.dt_analysis_result_tstz,
                                               ar.notes,
                                               ar.flg_mult_result,
                                               decode(ar.id_harvest,
                                                      NULL,
                                                      row_number()
                                                      over(PARTITION BY arp.id_analysis_result,
                                                           arp.id_analysis_parameter ORDER BY arp.dt_ins_result_tstz DESC),
                                                      row_number()
                                                      over(PARTITION BY ar.id_harvest,
                                                           arp.id_analysis_req_par ORDER BY arp.dt_ins_result_tstz DESC)) rn
                                          FROM analysis_result ar, analysis_result_par arp, harvest h
                                         WHERE ar.id_patient = i_patient
                                           AND ((i_dt_min IS NULL AND i_dt_max IS NULL AND
                                               (SELECT COUNT(1)
                                                    FROM TABLE(i_analysis_req_det) t) = 0) OR
                                               ((nvl(h.dt_harvest_tstz, ar.dt_sample) BETWEEN l_dt_min AND l_dt_max AND
                                               (SELECT COUNT(1)
                                                     FROM TABLE(i_analysis_req_det) t) = 0 AND i_flg_type = 'H') OR
                                               (ar.dt_analysis_result_tstz BETWEEN l_dt_min AND l_dt_max AND
                                               (SELECT COUNT(1)
                                                     FROM TABLE(i_analysis_req_det) t) = 0 AND i_flg_type = 'R')) OR
                                               (ar.id_analysis_req_det IN
                                               (SELECT /*+opt_estimate(table t rows=1)*/
                                                   *
                                                    FROM TABLE(i_analysis_req_det) t)))
                                           AND ar.id_analysis_result = arp.id_analysis_result
                                           AND ((arp.id_arp_parent IS NULL AND
                                               (SELECT COUNT(1)
                                                    FROM TABLE(i_analysis_req_det) t) = 0) OR
                                               (SELECT COUNT(1)
                                                   FROM TABLE(i_analysis_req_det) t) != 0)
                                           AND coalesce(to_char(dbms_lob.substr(arp.desc_analysis_result, 3800)),
                                                        to_char(arp.analysis_result_value),
                                                        '0') != 'DNR'
                                           AND ar.id_harvest = h.id_harvest(+)
                                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                         i_prof,
                                                                                                         ar.id_analysis)
                                                  FROM dual) = pk_alert_constant.g_yes
                                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                         i_prof,
                                                                                                         ar.id_analysis,
                                                                                                         pk_lab_tests_constant.g_infectious_diseases_results)
                                                  FROM dual) = pk_alert_constant.g_yes
                                           AND ((h.flg_status NOT IN
                                               (pk_lab_tests_constant.g_harvest_pending,
                                                  pk_lab_tests_constant.g_harvest_waiting,
                                                  pk_lab_tests_constant.g_harvest_cancel,
                                                  pk_lab_tests_constant.g_harvest_suspended) AND i_flg_type = 'H') OR
                                               (ar.dt_sample IS NOT NULL AND i_flg_type = 'H') OR (i_flg_type = 'R'))) ar
                                 WHERE (ar.rn = 1 AND ar.flg_mult_result IS NULL)
                                    OR (ar.flg_mult_result = pk_lab_tests_constant.g_yes)) aresp,
                               (SELECT lte.id_analysis_req,
                                       lte.id_analysis_req_det,
                                       lte.id_ard_parent,
                                       lte.flg_status_det,
                                       lte.id_episode,
                                       lte.id_visit,
                                       lte.id_prof_writes,
                                       lte.dt_req
                                  FROM lab_tests_ea lte
                                 WHERE lte.id_patient = i_patient) lte,
                               (SELECT *
                                  FROM abnormality
                                 WHERE flg_visible = pk_lab_tests_constant.g_yes) a,
                               result_status rs
                         WHERE aresp.id_analysis_req_det = lte.id_analysis_req_det(+)
                           AND aresp.id_result_status = rs.id_result_status(+)
                           AND aresp.id_abnormality = a.id_abnormality(+)
                        UNION ALL -- Reflex results
                        SELECT 'P' flg_type,
                               lte.id_analysis_req,
                               aresp.id_analysis_req_det,
                               lte.id_analysis_req_det id_ard_parent,
                               NULL id_analysis_req_par,
                               ar.id_analysis_result,
                               NULL id_analysis_result_par,
                               aresp.id_arp_parent,
                               lte.id_analysis,
                               NULL id_analysis_parameter,
                               lte.id_sample_type,
                               lte.id_exam_cat,
                               lte.id_harvest,
                               lte.id_visit,
                               lte.id_episode,
                               (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                pk_lab_tests_constant.g_analysis_alias,
                                                                                'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                lte.id_analysis,
                                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                lte.id_sample_type,
                                                                                NULL)
                                  FROM dual) desc_analysis,
                               NULL desc_parameter,
                               (SELECT pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                 i_prof,
                                                                                 pk_lab_tests_constant.g_analysis_sample_alias,
                                                                                 'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                 lte.id_sample_type,
                                                                                 NULL)
                                  FROM dual) desc_sample,
                               decode((SELECT pk_lab_tests_utils.get_lab_test_category(i_lang, i_prof, lte.id_exam_cat)
                                        FROM dual),
                                      NULL,
                                      NULL,
                                      lte.id_exam_cat,
                                      NULL,
                                      (SELECT pk_translation.get_translation(i_lang,
                                                                             'EXAM_CAT.CODE_EXAM_CAT.' ||
                                                                             (SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                              i_prof,
                                                                                                                              lte.id_exam_cat)
                                                                                FROM dual))
                                         FROM dual) || ', ') ||
                               (SELECT pk_translation.get_translation(i_lang, 'EXAM_CAT.CODE_EXAM_CAT.' || lte.id_exam_cat)
                                  FROM dual) desc_category,
                               NULL partial_result,
                               NULL id_unit_measure,
                               NULL desc_unit_measure,
                               NULL ref_val,
                               (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, lte.id_prof_harvest)
                                  FROM dual) prof_harvest,
                               (SELECT pk_prof_utils.get_spec_signature(i_lang,
                                                                        i_prof,
                                                                        lte.id_prof_harvest,
                                                                        lte.dt_harvest_tstz,
                                                                        lte.id_episode)
                                  FROM dual) prof_spec_harvest,
                               (SELECT pk_date_utils.date_char_tsz(i_lang,
                                                                   lte.dt_harvest_tstz,
                                                                   i_prof.institution,
                                                                   i_prof.software)
                                  FROM dual) dt_harvest,
                               (SELECT pk_date_utils.dt_chr_tsz(i_lang, lte.dt_harvest_tstz, i_prof)
                                  FROM dual) dt_harvest_date,
                               (SELECT pk_date_utils.date_char_hour_tsz(i_lang,
                                                                        lte.dt_harvest_tstz,
                                                                        i_prof.institution,
                                                                        i_prof.software)
                                  FROM dual) dt_harvest_hour,
                               (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, ar.id_professional)
                                  FROM dual) prof_result,
                               (SELECT pk_prof_utils.get_spec_signature(i_lang,
                                                                        i_prof,
                                                                        ar.id_professional,
                                                                        ar.dt_analysis_result_tstz,
                                                                        ar.id_episode)
                                  FROM dual) prof_spec_result,
                               (SELECT pk_date_utils.date_char_tsz(i_lang,
                                                                   ar.dt_analysis_result_tstz,
                                                                   i_prof.institution,
                                                                   i_prof.software)
                                  FROM dual) dt_result,
                               (SELECT pk_date_utils.dt_chr_tsz(i_lang, ar.dt_analysis_result_tstz, i_prof)
                                  FROM dual) dt_result_date,
                               (SELECT pk_date_utils.date_char_hour_tsz(i_lang,
                                                                        ar.dt_analysis_result_tstz,
                                                                        i_prof.institution,
                                                                        i_prof.software)
                                  FROM dual) dt_result_hour,
                               to_clob(l_reflex_test) RESULT,
                               pk_lab_tests_constant.g_yes flg_multiple_result,
                               NULL flg_result_type,
                               NULL flg_status,
                               NULL flg_result_status,
                               NULL flg_relevant,
                               NULL result_status,
                               NULL result_range,
                               NULL result_color,
                               NULL abnormality,
                               NULL desc_abnormality,
                               NULL prof_req,
                               NULL dt_req,
                               NULL result_notes,
                               NULL parameter_notes,
                               NULL desc_lab,
                               NULL desc_lab_notes,
                               pk_lab_tests_constant.g_no avail_button_create,
                               pk_lab_tests_constant.g_no avail_button_edit,
                               pk_lab_tests_constant.g_no avail_button_cancel,
                               (SELECT pk_lab_tests_utils.get_lab_test_permission(i_lang,
                                                                                  i_prof,
                                                                                  pk_lab_tests_constant.g_analysis_area_results,
                                                                                  pk_lab_tests_constant.g_analysis_button_read,
                                                                                  lte.id_episode,
                                                                                  NULL,
                                                                                  lte.id_analysis_req_det,
                                                                                  NULL)
                                  FROM dual) avail_button_read,
                               l_flg_context_button avail_button_context,
                               (SELECT pk_lab_tests_utils.get_lab_test_rank(i_lang, i_prof, lte.id_analysis, NULL)
                                  FROM dual) rank_analysis,
                               NULL rank_parameter,
                               (SELECT pk_lab_tests_utils.get_lab_test_category_rank(i_lang, i_prof, lte.id_exam_cat)
                                  FROM dual) rank_category,
                               lte.dt_harvest_tstz dt_harvest_ord,
                               ar.dt_analysis_result_tstz dt_result_ord
                          FROM (SELECT lte.*, h.id_harvest, h.id_prof_harvest, h.dt_harvest_tstz
                                  FROM lab_tests_ea lte, analysis_harvest ah, harvest h
                                 WHERE lte.id_patient = i_patient
                                   AND ((i_dt_min IS NULL AND i_dt_max IS NULL AND
                                       (SELECT COUNT(1)
                                            FROM TABLE(i_analysis_req_det) t) = 0) OR
                                       ((h.dt_harvest_tstz BETWEEN l_dt_min AND l_dt_max AND
                                       (SELECT COUNT(1)
                                             FROM TABLE(i_analysis_req_det) t) = 0 AND i_flg_type = 'H') OR
                                       (lte.dt_analysis_result BETWEEN l_dt_min AND l_dt_max AND
                                       (SELECT COUNT(1)
                                             FROM TABLE(i_analysis_req_det) t) = 0 AND i_flg_type = 'R')) OR
                                       (lte.id_analysis_req_det IN
                                       (SELECT /*+opt_estimate(table t rows=1)*/
                                           *
                                            FROM TABLE(i_analysis_req_det) t)))
                                   AND (lte.flg_orig_analysis IS NULL OR lte.flg_orig_analysis NOT IN ('M', 'O', 'S'))
                                   AND EXISTS (SELECT 1
                                          FROM analysis_result_par arp, analysis_result ar, lab_tests_ea t
                                         WHERE arp.id_arp_parent IS NOT NULL
                                           AND arp.id_analysis_result = ar.id_analysis_result
                                           AND ar.id_patient = i_patient
                                           AND ar.id_analysis_req_det = t.id_analysis_req_det
                                           AND t.id_ard_parent = lte.id_analysis_req_det)
                                   AND lte.id_analysis_req_det = ah.id_analysis_req_det
                                   AND ah.flg_status != pk_lab_tests_constant.g_harvest_inactive
                                   AND ah.id_harvest = h.id_harvest
                                   AND ((h.flg_status NOT IN
                                       (pk_lab_tests_constant.g_harvest_pending,
                                          pk_lab_tests_constant.g_harvest_waiting,
                                          pk_lab_tests_constant.g_harvest_cancel,
                                          pk_lab_tests_constant.g_harvest_suspended) AND i_flg_type = 'H') OR
                                       (i_flg_type = 'R'))) lte,
                               analysis_result ar,
                               (SELECT lte.id_analysis_req_det, arp.id_arp_parent, arp.id_ard_parent
                                  FROM (SELECT id_ard_parent,
                                               CAST(COLLECT(to_number(id_arp_parent)) AS table_number) id_arp_parent
                                          FROM (SELECT lte.id_ard_parent,
                                                       arp.id_arp_parent,
                                                       row_number() over(PARTITION BY arp.id_arp_parent ORDER BY ar.dt_analysis_result_tstz) rn
                                                  FROM lab_tests_ea lte, analysis_result ar, analysis_result_par arp
                                                 WHERE lte.id_patient = i_patient
                                                   AND lte.id_analysis_req_det = ar.id_analysis_req_det
                                                   AND ar.id_analysis_result = arp.id_analysis_result
                                                   AND arp.id_arp_parent IS NOT NULL)
                                         WHERE rn = 1
                                         GROUP BY id_ard_parent) arp,
                                       (SELECT lte.id_ard_parent,
                                               CAST(COLLECT(to_number(lte.id_analysis_req_det)) AS table_number) id_analysis_req_det
                                          FROM lab_tests_ea lte
                                         WHERE lte.id_patient = i_patient
                                           AND lte.id_ard_parent IS NOT NULL
                                         GROUP BY lte.id_ard_parent) lte
                                 WHERE arp.id_ard_parent = lte.id_ard_parent) aresp
                         WHERE lte.id_analysis_req_det = ar.id_analysis_req_det
                           AND lte.id_harvest = ar.id_harvest
                           AND lte.id_analysis_req_det = aresp.id_ard_parent
                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang, i_prof, ar.id_analysis)
                                  FROM dual) = pk_alert_constant.g_yes
                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                         i_prof,
                                                                                         ar.id_analysis,
                                                                                         pk_lab_tests_constant.g_infectious_diseases_results)
                                  FROM dual) = pk_alert_constant.g_yes) t
                 WHERE (t.dt_result_ord IS NOT NULL AND i_flg_type = 'R')
                    OR (t.dt_harvest_ord IS NOT NULL AND i_flg_type = 'H'));
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_RESULTSVIEW',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_resultsview;

    FUNCTION get_lab_test_timelineview
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_patient            IN patient.id_patient%TYPE,
        i_start_column       IN PLS_INTEGER,
        i_end_column         IN PLS_INTEGER,
        i_last_column_number IN PLS_INTEGER DEFAULT 6,
        o_list_results       OUT pk_types.cursor_type,
        o_list_columns       OUT pk_types.cursor_type,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_new_column_results t_rec_lab_hist_table := t_rec_lab_hist_table();
        l_result_columns     t_rec_lab_hist_table := t_rec_lab_hist_table();
        l_new_rows_results   t_rec_lab_hist_table := t_rec_lab_hist_table();
        l_new_values_results t_rec_lab_hist_table := t_rec_lab_hist_table();
        l_temp_hist_results  t_rec_hist_results;
        l_hist_results       t_rec_hist_results_table := t_rec_hist_results_table();
    
        l_count_col          PLS_INTEGER := 1;
        l_last_column_number PLS_INTEGER := nvl(i_last_column_number, 6);
    
        l_end_pos      PLS_INTEGER;
        l_init_pos     PLS_INTEGER;
        l_lab_res_mult sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_RESULT_MULTIPLE_RESULTS', i_prof);
    
        --helps filtering lab test history by relevante patient info
        CURSOR c_pat IS
            SELECT gender, months_between(SYSDATE, dt_birth) / 12 age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_pat c_pat%ROWTYPE;
    
        -- fills columns of the history record
        FUNCTION fill_record
        (
            i_column       PLS_INTEGER,
            i_hist_results t_rec_hist_results,
            i_values       VARCHAR2
        ) RETURN t_rec_hist_results IS
        
            l_results t_rec_hist_results;
        
        BEGIN
        
            l_results := i_hist_results;
        
            IF i_column = 1
            THEN
                l_results.column_1 := i_values;
            ELSIF i_column = 2
            THEN
                l_results.column_2 := i_values;
            ELSIF i_column = 3
            THEN
                l_results.column_3 := i_values;
            ELSIF i_column = 4
            THEN
                l_results.column_4 := i_values;
            ELSIF i_column = 5
            THEN
                l_results.column_5 := i_values;
            ELSIF i_column = 6
            THEN
                l_results.column_6 := i_values;
            ELSIF i_column = 7
            THEN
                l_results.column_7 := i_values;
            ELSIF i_column = 8
            THEN
                l_results.column_8 := i_values;
            ELSIF i_column = 9
            THEN
                l_results.column_9 := i_values;
            ELSIF i_column = 10
            THEN
                l_results.column_10 := i_values;
            ELSIF i_column = 11
            THEN
                l_results.column_11 := i_values;
            ELSIF i_column = 12
            THEN
                l_results.column_12 := i_values;
            END IF;
        
            RETURN l_results;
        
        END fill_record;
    
    BEGIN
    
        OPEN c_pat;
        FETCH c_pat
            INTO l_pat;
        CLOSE c_pat;
    
        -- checks if the function is being properly invoked
        IF (i_start_column > i_end_column)
        THEN
            g_error := 'INVALID FUNCTION INVOCATION. START_COLUMN CANNOT BE GREATER THAN END_COLUMN';
            RAISE g_other_exception;
        END IF;
    
        -- select columns
        -- WARNING: please also change the following methods
        -- when changing this structure : get_reports_table1, get_serialized_analysis_viewer,get_ehr_lab_tests,
        --                             get_reports_counter
        g_error := 'GET LAB TESTS COLUMNS FOR LAB TESTS HISTORY';
        SELECT t_rec_lab_hist_data(ar.time_var,
                                   ar.dt_sample,
                                   ar.hour_read,
                                   ar.short_dt_read,
                                   ar.header_desc,
                                   ar.date_target,
                                   ar.hour_target,
                                   ar.column_number,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL)
          BULK COLLECT
          INTO l_new_column_results
          FROM (SELECT DISTINCT id_analysis_result_par,
                                time_var,
                                dt_sample,
                                NULL dt_periodic_observation_reg,
                                hour_read,
                                short_dt_read,
                                header_desc,
                                date_target,
                                hour_target,
                                column_number
                  FROM (SELECT id_analysis_result_par id_analysis_result_par,
                               dt_harvest time_var,
                               dt_harvest dt_sample,
                               hour_read,
                               dt_harvest short_dt_read,
                               dt_year || '|' || dt_month || '|' || hour_read || '|' || 'M' || '|' header_desc,
                               date_target,
                               hour_read hour_target,
                               column_number
                          FROM (SELECT DISTINCT 0 id_analysis_result_par,
                                                pk_date_utils.date_send_tsz(i_lang,
                                                                            nvl(por.dt_periodic_observation_reg,
                                                                                por.dt_result),
                                                                            i_prof) dt_harvest,
                                                pk_date_utils.date_char_hour_tsz(i_lang,
                                                                                 nvl(por.dt_periodic_observation_reg,
                                                                                     por.dt_result),
                                                                                 i_prof.institution,
                                                                                 i_prof.software) hour_read,
                                                pk_date_utils.get_year(i_lang,
                                                                       i_prof,
                                                                       nvl(por.dt_periodic_observation_reg, por.dt_result)) dt_year,
                                                pk_date_utils.get_month_day(i_lang,
                                                                            i_prof,
                                                                            nvl(por.dt_periodic_observation_reg,
                                                                                por.dt_result)) dt_month,
                                                pk_date_utils.dt_chr_tsz(i_lang,
                                                                         nvl(por.dt_periodic_observation_reg, por.dt_result),
                                                                         i_prof) date_target,
                                                1 column_number
                                  FROM periodic_observation_reg por
                                 WHERE por.flg_type_reg IN
                                       (pk_periodic_observation.g_flg_type_reg,
                                        pk_lab_tests_constant.g_apf_type_history,
                                        pk_lab_tests_constant.g_apf_type_maternal_health)
                                   AND por.id_patient = i_patient
                                      --situacao de criacao de nova coluna
                                   AND NOT EXISTS (SELECT 1
                                          FROM analysis_result ar
                                         WHERE pk_date_utils.trunc_insttimezone_str(i_prof,
                                                                                    nvl(ar.dt_sample,
                                                                                        ar.dt_analysis_result_tstz),
                                                                                    'MI') =
                                               pk_date_utils.trunc_insttimezone_str(i_prof,
                                                                                    nvl(por.dt_periodic_observation_reg,
                                                                                        por.dt_result),
                                                                                    'MI')
                                           AND ar.id_patient = por.id_patient))
                        UNION
                        -- Records without specimen collection (harvest)
                        -- thus label "Record" should be displayed
                        SELECT t.id_analysis_result_par,
                               t.dt_harvest,
                               t.dt_sample,
                               t.hour_read,
                               t.short_dt_read,
                               t.header_desc,
                               t.date_target,
                               t.hour_target,
                               row_number() over(PARTITION BY t.dt_sample ORDER BY t.id_analysis_result_par) column_number
                          FROM (SELECT id_analysis_result_par,
                                       dt_harvest,
                                       dt_harvest dt_sample,
                                       NULL hour_read,
                                       dt_harvest short_dt_read,
                                       dt_year || '|' || dt_month || '|' || hour_read || '|' || 'M' || '|' header_desc,
                                       date_target,
                                       hour_target
                                  FROM (SELECT DISTINCT arp.id_analysis_result_par id_analysis_result_par,
                                                        pk_date_utils.date_send_tsz(i_lang,
                                                                                    nvl(ar.dt_sample,
                                                                                        ar.dt_analysis_result_tstz),
                                                                                    i_prof) dt_harvest,
                                                        pk_date_utils.date_char_hour_tsz(i_lang,
                                                                                         nvl(ar.dt_sample,
                                                                                             ar.dt_analysis_result_tstz),
                                                                                         i_prof.institution,
                                                                                         i_prof.software) hour_read,
                                                        pk_date_utils.get_year(i_lang,
                                                                               i_prof,
                                                                               nvl(ar.dt_sample, ar.dt_analysis_result_tstz)) dt_year,
                                                        pk_date_utils.get_month_day(i_lang,
                                                                                    i_prof,
                                                                                    nvl(ar.dt_sample,
                                                                                        ar.dt_analysis_result_tstz)) dt_month,
                                                        pk_date_utils.dt_chr_tsz(i_lang,
                                                                                 nvl(ar.dt_sample,
                                                                                     ar.dt_analysis_result_tstz),
                                                                                 i_prof) date_target,
                                                        NULL hour_target
                                          FROM lab_tests_ea lte, analysis_result_par arp, analysis_result ar
                                         WHERE ar.id_patient = i_patient
                                           AND ar.id_institution = i_prof.institution
                                           AND ar.id_analysis_result = arp.id_analysis_result(+)
                                           AND lte.id_analysis_req_det(+) = ar.id_analysis_req_det
                                           AND lte.dt_harvest IS NULL)) t
                        UNION
                        -- Records with specimen collection (harvest)
                        SELECT DISTINCT id_analysis_result_par,
                                        dt_harvest,
                                        dt_harvest dt_sample,
                                        hour_read,
                                        dt_harvest short_dt_read,
                                        dt_year || '|' || dt_month || '|' || hour_read || '|' || 'X' || '|' header_desc,
                                        date_target,
                                        hour_read hour_target,
                                        column_number
                          FROM (SELECT DISTINCT arp.id_analysis_result_par id_analysis_result_par,
                                                pk_date_utils.date_send_tsz(i_lang,
                                                                            coalesce(lte.dt_harvest_tstz,
                                                                                     ar.dt_sample,
                                                                                     ar.dt_analysis_result_tstz),
                                                                            i_prof) dt_harvest,
                                                pk_date_utils.date_char_hour_tsz(i_lang,
                                                                                 coalesce(lte.dt_harvest_tstz,
                                                                                          ar.dt_sample,
                                                                                          ar.dt_analysis_result_tstz),
                                                                                 i_prof.institution,
                                                                                 i_prof.software) hour_read,
                                                pk_date_utils.get_year(i_lang,
                                                                       i_prof,
                                                                       coalesce(lte.dt_harvest_tstz,
                                                                                ar.dt_sample,
                                                                                ar.dt_analysis_result_tstz)) dt_year,
                                                pk_date_utils.get_month_day(i_lang,
                                                                            i_prof,
                                                                            coalesce(lte.dt_harvest_tstz,
                                                                                     ar.dt_sample,
                                                                                     ar.dt_analysis_result_tstz)) dt_month,
                                                pk_date_utils.dt_chr_tsz(i_lang,
                                                                         coalesce(lte.dt_harvest_tstz,
                                                                                  ar.dt_sample,
                                                                                  ar.dt_analysis_result_tstz),
                                                                         i_prof) date_target,
                                                1 column_number
                                  FROM (SELECT lte.*, h.dt_harvest_tstz, h.id_harvest
                                          FROM lab_tests_ea lte, analysis_harvest ah, harvest h
                                         WHERE lte.id_patient = i_patient
                                           AND lte.id_analysis_req_det = ah.id_analysis_req_det
                                           AND ah.id_harvest = h.id_harvest
                                           AND h.flg_status NOT IN
                                               (pk_lab_tests_constant.g_harvest_pending,
                                                pk_lab_tests_constant.g_harvest_waiting,
                                                pk_lab_tests_constant.g_harvest_cancel,
                                                pk_lab_tests_constant.g_harvest_suspended)) lte,
                                       analysis_result_par arp,
                                       analysis_result ar
                                 WHERE ar.id_patient = i_patient
                                   AND ar.dt_sample IS NULL
                                   AND ar.id_institution = i_prof.institution
                                   AND ar.id_analysis_result = arp.id_analysis_result(+)
                                   AND lte.id_analysis_req_det = ar.id_analysis_req_det
                                   AND lte.id_harvest(+) = ar.id_harvest
                                   AND NOT EXISTS (SELECT 1
                                          FROM lab_tests_ea lte1, analysis_result ar
                                         WHERE ar.id_patient = i_patient
                                           AND ar.id_institution = i_prof.institution
                                           AND ar.id_analysis_req_det = lte1.id_analysis_req_det(+)
                                           AND lte1.dt_harvest IS NULL
                                           AND lte1.id_analysis_req_det = lte.id_analysis_req_det)))) ar
         WHERE ar.column_number = 1
         GROUP BY time_var, hour_read, short_dt_read, header_desc, date_target, hour_target, dt_sample, column_number
         ORDER BY ar.time_var ASC;
    
        -- Get rows data
        -- WARNING: when changing this cursor : get_reports_table1, get_serialized_analysis_viewer,get_ehr_lab_tests
        -- should also be changed
        g_error := 'GET LAB TESTS ROWS FOR LAB TESTS HISTORY';
        WITH tbl_temp AS
         (SELECT DISTINCT id_analysis            num_1,
                          id_sample_type         num_2,
                          id_analysis_parameter  num_3,
                          id_analysis_param      num_4,
                          id_analysis_result_par num_5,
                          id_analysis_result     num_6,
                          flg_has_parent         vc_1,
                          flg_has_children       vc_2
            FROM (SELECT DISTINCT id_analysis,
                                  id_sample_type,
                                  id_analysis_parameter,
                                  id_analysis_param,
                                  id_analysis_result_par,
                                  id_analysis_result,
                                  flg_has_parent,
                                  flg_has_children,
                                  flg_available
                    FROM (SELECT DISTINCT ap.id_analysis,
                                          ast.id_sample_type,
                                          NULL                        id_analysis_parameter,
                                          0                           id_analysis_param,
                                          0                           id_analysis_result_par,
                                          0                           id_analysis_result,
                                          pk_lab_tests_constant.g_no  flg_has_parent,
                                          pk_lab_tests_constant.g_yes flg_has_children,
                                          a.flg_available
                            FROM (SELECT ap.*,
                                         COUNT(ap.id_analysis_parameter) over(PARTITION BY ap.id_analysis, ap.id_sample_type, ap.id_institution, ap.id_software) ap_count
                                    FROM analysis_param ap
                                   WHERE ap.flg_available = pk_lab_tests_constant.g_available
                                     AND ap.id_institution = i_prof.institution
                                     AND ap.id_software = i_prof.software) ap
                           INNER JOIN analysis_param_funcionality apf
                              ON apf.id_analysis_param = ap.id_analysis_param
                           INNER JOIN analysis_sample_type ast
                              ON ap.id_analysis = ast.id_analysis
                             AND ap.id_sample_type = ast.id_sample_type
                           INNER JOIN analysis a
                              ON ap.id_analysis = a.id_analysis
                           WHERE apf.flg_type = pk_lab_tests_constant.g_apf_type_history
                             AND ast.flg_available = pk_lab_tests_constant.g_available
                             AND ap.ap_count > 1
                             AND (i_patient IS NULL OR
                                 (((l_pat.gender IS NOT NULL AND nvl(a.gender, 'I') IN ('I', l_pat.gender)) OR
                                 l_pat.gender IS NULL OR l_pat.gender = 'I') AND
                                 (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND nvl(a.age_max, nvl(l_pat.age, 0)) OR
                                 nvl(l_pat.age, 0) = 0)))
                          UNION
                          SELECT DISTINCT ap.id_analysis,
                                          ap.id_sample_type,
                                          ap.id_analysis_parameter,
                                          ap.id_analysis_param,
                                          0                        id_analysis_result_par,
                                          0                        id_analysis_result,
                                          -- get flg_has_parent
                                          decode(ap.ap_count,
                                                 0,
                                                 pk_lab_tests_constant.g_no,
                                                 1,
                                                 pk_lab_tests_constant.g_no,
                                                 pk_lab_tests_constant.g_yes) flg_has_parent,
                                          pk_lab_tests_constant.g_no flg_has_children,
                                          a.flg_available
                            FROM (SELECT ap.*,
                                         COUNT(ap.id_analysis_parameter) over(PARTITION BY ap.id_analysis, ap.id_sample_type, ap.id_institution, ap.id_software) ap_count
                                    FROM analysis_param ap
                                   WHERE ap.flg_available = pk_lab_tests_constant.g_available
                                     AND ap.id_institution = i_prof.institution
                                     AND ap.id_software = i_prof.software) ap
                           INNER JOIN analysis_param_funcionality apf
                              ON apf.id_analysis_param = ap.id_analysis_param
                           INNER JOIN analysis_sample_type ast
                              ON ap.id_analysis = ast.id_analysis
                             AND ap.id_sample_type = ast.id_sample_type
                           INNER JOIN analysis a
                              ON ap.id_analysis = a.id_analysis
                           WHERE apf.flg_type = pk_lab_tests_constant.g_apf_type_history
                             AND ast.flg_available = pk_lab_tests_constant.g_available
                             AND (i_patient IS NULL OR
                                 (((l_pat.gender IS NOT NULL AND nvl(a.gender, 'I') IN ('I', l_pat.gender)) OR
                                 l_pat.gender IS NULL OR l_pat.gender = 'I') AND
                                 (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND nvl(a.age_max, nvl(l_pat.age, 0)) OR
                                 nvl(l_pat.age, 0) = 0))))
                  UNION
                  -- The code above gets our temporary data.
                  -- The code below get all lab tests with results
                   (SELECT DISTINCT a.id_analysis,
                                   ast.id_sample_type,
                                   NULL                        id_analysis_parameter,
                                   0                           id_analysis_param,
                                   0                           id_analysis_result_par,
                                   0                           id_analysis_result,
                                   pk_lab_tests_constant.g_no  flg_has_parent,
                                   pk_lab_tests_constant.g_yes flg_has_children,
                                   a.flg_available
                     FROM (SELECT ap.*,
                                  COUNT(ap.id_analysis_parameter) over(PARTITION BY ap.id_analysis, ap.id_sample_type, ap.id_institution, ap.id_software) ap_count
                             FROM analysis_param ap
                            WHERE ap.flg_available = pk_lab_tests_constant.g_available
                              AND ap.id_software = i_prof.software
                              AND ap.id_institution = i_prof.institution) ap
                    INNER JOIN analysis_sample_type ast
                       ON ap.id_analysis = ast.id_analysis
                      AND ap.id_sample_type = ast.id_sample_type
                    INNER JOIN analysis a
                       ON ap.id_analysis = a.id_analysis
                    WHERE EXISTS
                    (SELECT 1
                             FROM analysis_result ar
                            INNER JOIN analysis_result_par arp
                               ON ar.id_analysis_result = arp.id_analysis_result
                            WHERE ar.id_patient = i_patient
                              AND ar.id_analysis = ast.id_analysis
                              AND ar.id_sample_type = ast.id_sample_type)
                      AND ast.flg_available = pk_lab_tests_constant.g_available
                      AND ap.ap_count > 1
                      AND (i_patient IS NULL OR (((l_pat.gender IS NOT NULL AND nvl(a.gender, 'I') IN ('I', l_pat.gender)) OR
                          l_pat.gender IS NULL OR l_pat.gender = 'I') AND
                          (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                          nvl(a.age_max, nvl(l_pat.age, 0)) OR nvl(l_pat.age, 0) = 0)))
                   UNION
                   SELECT DISTINCT ast.id_analysis,
                                   ast.id_sample_type,
                                   ap.id_analysis_parameter,
                                   ap.id_analysis_param,
                                   CASE
                                       WHEN ar.arp_count > 1 THEN
                                        ar.id_analysis_result_par
                                       ELSE
                                        0
                                   END id_analysis_result_par,
                                   ar.id_analysis_result id_analysis_result,
                                   -- get flg_has_parent
                                   decode(ap.ap_count,
                                          0,
                                          pk_lab_tests_constant.g_no,
                                          1,
                                          pk_lab_tests_constant.g_no,
                                          pk_lab_tests_constant.g_yes) flg_has_parent,
                                   pk_lab_tests_constant.g_no flg_has_children,
                                   a.flg_available
                     FROM (SELECT ar.*,
                                  arp.id_analysis_result_par,
                                  COUNT(*) over(PARTITION BY arp.id_analysis_result, arp.id_analysis_parameter, arp.dt_analysis_result_par_tstz ORDER BY arp.dt_analysis_result_par_tstz) arp_count
                             FROM analysis_result ar
                            INNER JOIN analysis_result_par arp
                               ON ar.id_analysis_result = arp.id_analysis_result
                            WHERE ar.id_patient = i_patient) ar,
                          (SELECT ap.*,
                                  COUNT(ap.id_analysis_parameter) over(PARTITION BY ap.id_analysis, ap.id_sample_type, ap.id_institution, ap.id_software) ap_count
                             FROM analysis_param ap
                            WHERE ap.flg_available = pk_lab_tests_constant.g_available
                              AND ap.id_software = i_prof.software
                              AND ap.id_institution = i_prof.institution) ap
                    INNER JOIN analysis_sample_type ast
                       ON ap.id_analysis = ast.id_analysis
                      AND ap.id_sample_type = ast.id_sample_type
                    INNER JOIN analysis a
                       ON ap.id_analysis = a.id_analysis
                    WHERE EXISTS
                    (SELECT 1
                             FROM analysis_result ar
                            INNER JOIN analysis_result_par arp
                               ON ar.id_analysis_result = arp.id_analysis_result
                            WHERE ar.id_patient = i_patient
                              AND ar.id_analysis = ast.id_analysis
                              AND ar.id_sample_type = ast.id_sample_type)
                      AND ast.flg_available = pk_lab_tests_constant.g_available
                      AND ar.id_analysis = ap.id_analysis
                      AND ar.id_sample_type = ap.id_sample_type
                      AND (i_patient IS NULL OR (((l_pat.gender IS NOT NULL AND nvl(a.gender, 'I') IN ('I', l_pat.gender)) OR
                          l_pat.gender IS NULL OR l_pat.gender = 'I') AND
                          (nvl(l_pat.age, 0) BETWEEN nvl(a.age_min, 0) AND
                          nvl(a.age_max, nvl(l_pat.age, 0)) OR nvl(l_pat.age, 0) = 0)))))
          -- if the analysis is unavailable it will only be shown if someone has ever requested it or
          -- inserted a result
           WHERE flg_available = pk_lab_tests_constant.g_available
              OR (flg_available = pk_lab_tests_constant.g_no AND
                 (id_analysis IN (SELECT ard.id_analysis
                                     FROM analysis_req_det ard) OR
                 id_analysis IN (SELECT ar.id_analysis
                                     FROM analysis_result ar))))
        
        -- ##### selects the rows from temp structure and inserts them on our structure
        SELECT t_rec_lab_hist_data(NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   id_analysis,
                                   id_sample_type,
                                   id_analysis_parameter,
                                   id_analysis_param,
                                   element_desc,
                                   analysis_count,
                                   analysis_status,
                                   flg_has_parent,
                                   flg_has_children,
                                   rank_lab_test,
                                   rank_lab_test_param,
                                   lab_test_desc,
                                   NULL,
                                   NULL,
                                   NULL,
                                   id_analysis_result_par,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL)
          BULK COLLECT
          INTO l_new_rows_results
          FROM (SELECT ar.id_analysis,
                       ar.id_sample_type,
                       ar.id_analysis_parameter,
                       ar.id_analysis_param,
                       ar.id_analysis_result_par,
                       (SELECT pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                         i_prof,
                                                                         pk_lab_tests_constant.g_analysis_alias,
                                                                         'ANALYSIS.CODE_ANALYSIS.' || ar.id_analysis,
                                                                         'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                         ar.id_sample_type,
                                                                         NULL)
                          FROM dual) lab_test_desc,
                       decode(ar.flg_has_parent,
                              pk_lab_tests_constant.g_no,
                              (SELECT pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                pk_lab_tests_constant.g_analysis_alias,
                                                                                'ANALYSIS.CODE_ANALYSIS.' || ar.id_analysis,
                                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                ar.id_sample_type,
                                                                                NULL)
                                 FROM dual),
                              (SELECT pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                                'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                                ar.id_analysis_parameter,
                                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                ar.id_sample_type,
                                                                                NULL)
                                 FROM dual)) element_desc,
                       ar.analysis_count,
                       ar.analysis_status,
                       ar.flg_has_parent,
                       ar.flg_has_children,
                       (SELECT pk_lab_tests_utils.get_lab_test_rank(i_lang, i_prof, ar.id_analysis, NULL)
                          FROM dual) rank_lab_test,
                       (SELECT pk_lab_tests_utils.get_lab_test_parameter_rank(i_lang,
                                                                              i_prof,
                                                                              ar.id_analysis,
                                                                              ar.id_sample_type,
                                                                              ar.id_analysis_parameter)
                          FROM dual) rank_lab_test_param,
                       -- order by clause used to order parameters by alphabetical, when previous rank does not have
                       -- any values. Parameter with id_row = 0 should be the first one
                       decode(ar.id_analysis_param, 0, 'A', 'P') flg_type
                  FROM (SELECT t.id_analysis,
                               t.id_sample_type,
                               t.id_analysis_parameter,
                               t.id_analysis_param,
                               t.id_analysis_result_par,
                               t.analysis_count,
                               CASE
                                -- One analysis on history, thus analysis status should be displayed
                                    WHEN t.analysis_count = 1 THEN
                                     decode(instr(t.analysis_string, 'CheckIcon'),
                                            0,
                                            decode(instr(t.analysis_string, 'ExaminationsResultIcon'),
                                                   0,
                                                   t.analysis_string,
                                                   NULL),
                                            NULL)
                                -- More than one analysis on history, thus analysis request count should be displayed
                                    WHEN t.analysis_count > 1 THEN
                                     '|T||' || to_char(t.analysis_count) || '|||GridBigNumber|||'
                                
                                -- Analysis has more than one parameter, and is the only analysis on history.
                                -- Analysis status should be displayed
                                    WHEN t.analysis_count = -1
                                         AND t.id_analysis_result_par != 0
                                         AND first_value(t.analysis_count) over(PARTITION BY t.id_analysis,
                                              t.id_sample_type ORDER BY t.id_analysis,
                                              t.id_sample_type,
                                              id_analysis_param,
                                              t.id_analysis_result_par) = 1 THEN
                                     decode(instr(t.analysis_string, 'CheckIcon'),
                                            0,
                                            decode(instr(t.analysis_string, 'ExaminationsResultIcon'),
                                                   0,
                                                   t.analysis_string,
                                                   NULL),
                                            NULL)
                                    WHEN t.analysis_count = -1
                                         AND t.id_analysis_result_par = 0
                                         AND first_value(t.analysis_count) over(PARTITION BY t.id_analysis,
                                              t.id_sample_type ORDER BY t.id_analysis,
                                              t.id_sample_type,
                                              id_analysis_param,
                                              t.id_analysis_result) = 1 THEN
                                     decode(instr(t.analysis_string, 'CheckIcon'),
                                            0,
                                            decode(instr(t.analysis_string, 'ExaminationsResultIcon'),
                                                   0,
                                                   t.analysis_string,
                                                   NULL),
                                            NULL)
                                
                                -- Analysis has more than one parameter, and more than one analysis appeared on history
                                -- Analysis request count should be displayed
                                    WHEN t.analysis_count = -1
                                         AND first_value(t.analysis_count) over(PARTITION BY t.id_analysis,
                                              t.id_sample_type ORDER BY t.id_analysis,
                                              t.id_sample_type,
                                              id_analysis_param) > 1 THEN
                                     '|T||' ||
                                     to_char(first_value(t.analysis_count) over(PARTITION BY t.id_analysis,
                                                  t.id_sample_type ORDER BY t.id_analysis,
                                                  t.id_sample_type,
                                                  id_analysis_param)) || '|||GridBigNumber|||'
                                
                                    WHEN t.analysis_count = 0 THEN
                                     decode(instr(t.analysis_string, 'CheckIcon'),
                                            0,
                                            decode(instr(t.analysis_string, 'ExaminationsResultIcon'),
                                                   0,
                                                   t.analysis_string,
                                                   NULL),
                                            NULL)
                                
                                    ELSE
                                     t.analysis_string
                                END analysis_status,
                               t.flg_has_parent,
                               t.flg_has_children,
                               -- In case that for the same lab test, we have several requests with diferrent types of status
                               -- the icon to be shown should obey the following order
                               -- Request Status, Pending Status, Exterior Status, With Results Status and finally Read Status
                               row_number() over(PARTITION BY t.id_analysis_param, t.id_analysis, t.id_sample_type, t.id_analysis_result_par ORDER BY t.id_analysis_param, t.id_analysis, t.id_sample_type, t.analysis_count DESC NULLS LAST, decode(t.flg_status_det, pk_lab_tests_constant.g_analysis_req, 1, pk_lab_tests_constant.g_analysis_pending, 2, pk_lab_tests_constant.g_analysis_exterior, 3, pk_lab_tests_constant.g_analysis_result, 4, pk_lab_tests_constant.g_analysis_read, 5, 6)) count_rank
                          FROM (SELECT num_1 id_analysis,
                                       num_2 id_sample_type,
                                       num_3 id_analysis_parameter,
                                       num_4 id_analysis_param,
                                       num_5 id_analysis_result_par,
                                       num_6 id_analysis_result,
                                       CASE
                                            WHEN ((vc_1 = pk_lab_tests_constant.g_no AND vc_2 = pk_lab_tests_constant.g_yes) OR
                                                 (vc_1 = pk_lab_tests_constant.g_no AND vc_2 = pk_lab_tests_constant.g_no))
                                                 AND num_5 = 0 THEN
                                            -- Lab tests to be counted should be all that are not cancelled
                                            -- MINUS
                                            -- labtests with results, read or for exterior
                                             COUNT(*) over(PARTITION BY num_1, num_2, num_3, num_6) -
                                             (SELECT COUNT(*)
                                                         FROM lab_tests_ea ltea
                                                        WHERE ltea.id_patient = lte.id_patient
                                                          AND ltea.id_analysis = lte.id_analysis
                                                          AND ltea.id_sample_type = lte.id_sample_type
                                                          AND ltea.id_analysis_result = lte.id_analysis_result
                                                          AND ltea.flg_status_det IN
                                                              (pk_lab_tests_constant.g_analysis_result,
                                                               pk_lab_tests_constant.g_analysis_read,
                                                               pk_lab_tests_constant.g_analysis_exterior))
                                            WHEN ((vc_1 = pk_lab_tests_constant.g_no AND vc_2 = pk_lab_tests_constant.g_yes) OR
                                                 (vc_1 = pk_lab_tests_constant.g_no AND vc_2 = pk_lab_tests_constant.g_no))
                                                 AND num_5 != 0 THEN
                                            -- Lab tests to be counted should be all that are not cancelled
                                            -- MINUS
                                            -- labtests with results, read or for exterior
                                             COUNT(*) over(PARTITION BY num_1, num_2, num_3, num_5) -
                                             (SELECT COUNT(*)
                                                         FROM lab_tests_ea ltea
                                                        WHERE ltea.id_patient = lte.id_patient
                                                          AND ltea.id_analysis = lte.id_analysis
                                                          AND ltea.id_sample_type = lte.id_sample_type
                                                          AND ltea.flg_status_det IN
                                                              (pk_lab_tests_constant.g_analysis_result,
                                                               pk_lab_tests_constant.g_analysis_read,
                                                               pk_lab_tests_constant.g_analysis_exterior))
                                            ELSE
                                             -1
                                        END analysis_count,
                                       CASE
                                            WHEN lte.id_patient IS NOT NULL THEN
                                             pk_utils.get_status_string(i_lang,
                                                                        i_prof,
                                                                        lte.status_str,
                                                                        lte.status_msg,
                                                                        lte.status_icon,
                                                                        lte.status_flg)
                                            ELSE
                                             NULL
                                        END analysis_string,
                                       vc_1 flg_has_parent,
                                       vc_2 flg_has_children,
                                       lte.flg_status_det
                                  FROM tbl_temp tt,
                                       (SELECT lte.*
                                          FROM lab_tests_ea lte
                                         WHERE lte.id_patient = i_patient
                                           AND lte.flg_status_det != pk_lab_tests_constant.g_analysis_cancel) lte
                                 WHERE lte.id_analysis(+) = tt.num_1
                                   AND lte.id_sample_type(+) = tt.num_2
                                   AND nvl(lte.id_analysis_result, 0) = tt.num_6
                                UNION
                                SELECT t.id_analysis,
                                       t.id_sample_type,
                                       t.id_analysis_parameter,
                                       t.id_analysis_param,
                                       t.id_analysis_result_par,
                                       t.id_analysis_result,
                                       CASE
                                           WHEN ((t.flg_has_parent = pk_lab_tests_constant.g_no AND
                                                t.flg_has_children = pk_lab_tests_constant.g_yes) OR
                                                (t.flg_has_parent = pk_lab_tests_constant.g_no AND
                                                t.flg_has_children = pk_lab_tests_constant.g_no)) THEN
                                           -- Lab tests to be counted should be all that are not cancelled
                                           -- MINUS
                                           -- labtests with results, read or for exterior
                                            COUNT(*) over(PARTITION BY flg_has_parent, t.id_analysis, t.id_sample_type) -
                                            (SELECT COUNT(*)
                                                        FROM lab_tests_ea ltea
                                                       WHERE ltea.id_patient = lte.id_patient
                                                         AND ltea.id_analysis = lte.id_analysis
                                                         AND ltea.id_sample_type = lte.id_sample_type
                                                         AND ltea.flg_status_det IN
                                                             (pk_lab_tests_constant.g_analysis_result,
                                                              pk_lab_tests_constant.g_analysis_read,
                                                              pk_lab_tests_constant.g_analysis_exterior))
                                           ELSE
                                            -1
                                       END analysis_count,
                                       pk_utils.get_status_string(i_lang,
                                                                  i_prof,
                                                                  lte.status_str,
                                                                  lte.status_msg,
                                                                  lte.status_icon,
                                                                  lte.status_flg) analysis_status,
                                       t.flg_has_parent,
                                       t.flg_has_children,
                                       lte.flg_status_det
                                  FROM (
                                        -- Get Lab tests with more than one parameter, that are not canceled
                                        SELECT lte.id_analysis,
                                                lte.id_sample_type,
                                                NULL                        id_analysis_parameter,
                                                0                           id_analysis_param,
                                                0                           id_analysis_result_par,
                                                0                           id_analysis_result,
                                                lte.id_analysis_req_det     id_analysis_req_det,
                                                pk_lab_tests_constant.g_no  flg_has_parent,
                                                pk_lab_tests_constant.g_yes flg_has_children,
                                                lte.flg_status_det
                                          FROM lab_tests_ea lte
                                          JOIN (SELECT ap.*,
                                                       COUNT(ap.id_analysis_parameter) over(PARTITION BY ap.id_analysis, ap.id_sample_type, ap.id_institution, ap.id_software) ap_count
                                                  FROM analysis_param ap
                                                 WHERE ap.flg_available = pk_lab_tests_constant.g_available
                                                   AND ap.id_software = i_prof.software
                                                   AND ap.id_institution = i_prof.institution) ap
                                            ON lte.id_analysis = ap.id_analysis
                                           AND lte.id_sample_type = ap.id_sample_type
                                          JOIN analysis_parameter apr
                                            ON (ap.id_analysis_parameter = apr.id_analysis_parameter)
                                         WHERE lte.id_patient = i_patient
                                           AND lte.flg_status_det != pk_lab_tests_constant.g_analysis_cancel
                                           AND apr.flg_available = pk_lab_tests_constant.g_available
                                           AND ap.ap_count > 1
                                        UNION
                                        -- Get Lab tests with one parameter, that are not canceled
                                        SELECT lte.id_analysis,
                                                lte.id_sample_type,
                                                ap.id_analysis_parameter,
                                                ap.id_analysis_param,
                                                0 id_analysis_result_par,
                                                0 id_analysis_result,
                                                lte.id_analysis_req_det,
                                                decode(ap.ap_count,
                                                       0,
                                                       pk_lab_tests_constant.g_no,
                                                       1,
                                                       pk_lab_tests_constant.g_no,
                                                       pk_lab_tests_constant.g_yes) flg_has_parent,
                                                pk_lab_tests_constant.g_no flg_has_children,
                                                lte.flg_status_det
                                          FROM lab_tests_ea lte
                                          JOIN (SELECT ap.*,
                                                       COUNT(ap.id_analysis_parameter) over(PARTITION BY ap.id_analysis, ap.id_sample_type, ap.id_institution, ap.id_software) ap_count
                                                  FROM analysis_param ap
                                                 WHERE ap.flg_available = pk_lab_tests_constant.g_available
                                                   AND ap.id_software = i_prof.software
                                                   AND ap.id_institution = i_prof.institution) ap
                                            ON lte.id_analysis = ap.id_analysis
                                           AND lte.id_sample_type = ap.id_sample_type
                                          JOIN analysis_parameter apr
                                            ON (ap.id_analysis_parameter = apr.id_analysis_parameter)
                                         WHERE lte.id_patient = i_patient
                                           AND lte.flg_status_det != pk_lab_tests_constant.g_analysis_cancel
                                           AND apr.flg_available = pk_lab_tests_constant.g_available) t,
                                       lab_tests_ea lte
                                 WHERE lte.id_patient = i_patient
                                   AND lte.id_analysis = t.id_analysis
                                   AND lte.id_analysis_req_det = t.id_analysis_req_det
                                   AND nvl(lte.id_analysis_result, 0) = t.id_analysis_result
                                   AND lte.flg_status_det != pk_lab_tests_constant.g_analysis_cancel) t) ar
                -- In case that for the same lab test, we have several requests with diferrent types of status
                -- the icon to be shown should obey the following order
                -- Request Status, Pending Status, Exterior Status, With Results Status and finally Read Status
                -- Thus the icon status of the first record of each lab test should be shown
                 WHERE ar.count_rank = 1
                 ORDER BY rank_lab_test, lab_test_desc, flg_type, rank_lab_test_param, element_desc);
    
        -- select results
        -- when changing this cursor : get_reports_table1,get_reports_table2, get_serialized_analysis_viewer,get_ehr_lab_tests
        -- must also be changed
        g_error := 'GET LAB TESTS RESULTS FOR LAB TESTS HISTORY';
        SELECT t_rec_lab_hist_data(ar.column_id,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   ar.element_id,
                                   ar.id_analysis_req_par,
                                   ar.id_analysis_result,
                                   ar.id_analysis_result_par,
                                   ar.id_harvest,
                                   dbms_lob.substr(ar.value, 1000),
                                   ar.abnorm,
                                   ar.flg_notes,
                                   ar.desc_notes,
                                   ar.flg_notes_cancel,
                                   ar.prof_result,
                                   NULL)
          BULK COLLECT
          INTO l_new_values_results
          FROM (SELECT t.element_id,
                       t.column_id,
                       t.id_analysis_result,
                       CASE
                            WHEN arp_count = 1 THEN
                             0
                            ELSE
                            
                             t.id_analysis_result_par
                        END id_analysis_result_par,
                       t.id_analysis_req_par,
                       t.id_harvest,
                       t.value,
                       t.abnorm,
                       t.flg_notes,
                       t.desc_notes,
                       t.flg_notes_cancel,
                       t.prof_result,
                       -- When one lab test has more than one result
                       -- the last one, the most recent one should be considered
                       -- and displayed
                       row_number() over(PARTITION BY t.element_id, t.column_id ORDER BY t.id_analysis_result_par DESC) rn
                  FROM (SELECT ap.id_analysis_param element_id,
                               decode(lte.id_harvest,
                                      NULL,
                                      pk_date_utils.date_send_tsz(i_lang,
                                                                  nvl(ar.dt_sample, ar.dt_analysis_result_tstz),
                                                                  i_prof),
                                      pk_date_utils.date_send_tsz(i_lang, lte.dt_harvest_tstz, i_prof)) column_id,
                               ar.id_analysis_result,
                               arp.id_analysis_result_par,
                               arp.id_analysis_req_par,
                               lte.id_harvest,
                               arp.id_analysis_result_par || '|' ||
                                decode(arp.dt_cancel,
                                       NULL,
                                       pk_lab_tests_constant.g_active,
                                       pk_lab_tests_constant.g_analysis_cancel) || '|' ||
                                nvl(TRIM(dbms_lob.substr(arp.desc_analysis_result, 3800)),
                                    (arp.comparator || arp.analysis_result_value_1 || arp.separator ||
                                    arp.analysis_result_value_2)) || '|' ||
                                decode(arp.id_unit_measure,
                                       NULL,
                                       arp.desc_unit_measure,
                                       pk_translation.get_translation(i_lang,
                                                                      'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                      arp.id_unit_measure)) || '|' ||
                                decode(pk_utils.is_number(dbms_lob.substr(arp.desc_analysis_result, 3800)),
                                       pk_lab_tests_constant.g_no,
                                       decode(to_char(dbms_lob.substr(arp.desc_analysis_result, 3800)),
                                              ad.value,
                                              ad.icon,
                                              'ExaminationsResultIcon'),
                                       'X') || '|' || (CASE
                                    WHEN pk_utils.is_number(dbms_lob.substr(arp.desc_analysis_result, 3800)) =
                                         pk_lab_tests_constant.g_yes
                                         AND analysis_result_value_2 IS NULL THEN
                                     CASE
                                         WHEN arp.analysis_result_value_1 < arp.ref_val_min THEN
                                          pk_lab_tests_constant.g_yes
                                         WHEN arp.analysis_result_value_1 > arp.ref_val_max THEN
                                          pk_lab_tests_constant.g_yes
                                         ELSE
                                          CASE
                                              WHEN arp.id_abnormality IS NOT NULL
                                                   AND arp.id_abnormality != 7 THEN
                                               pk_lab_tests_constant.g_yes
                                              ELSE
                                               pk_lab_tests_constant.g_no
                                          END
                                     END
                                    ELSE
                                     NULL
                                END) || '|' || arp.id_unit_measure || '|' ||
                                decode(pk_lab_tests_utils.get_lab_test_doc_external(i_lang,
                                                                                    i_prof,
                                                                                    arp.id_analysis_result_par),
                                       NULL,
                                       NULL,
                                       'ImportDocIcon') VALUE,
                               CASE
                                    WHEN pk_utils.is_number(dbms_lob.substr(arp.desc_analysis_result, 3800)) =
                                         pk_lab_tests_constant.g_yes
                                         AND analysis_result_value_2 IS NULL THEN
                                     CASE
                                         WHEN arp.analysis_result_value_1 < arp.ref_val_min THEN
                                          pk_lab_tests_constant.g_analysis_result_below
                                         WHEN arp.analysis_result_value_1 > arp.ref_val_max THEN
                                          pk_lab_tests_constant.g_analysis_result_above
                                         ELSE
                                          NULL
                                     END
                                    ELSE
                                     NULL
                                END abnorm,
                               decode(dbms_lob.getlength(arp.parameter_notes),
                                      NULL,
                                      pk_lab_tests_constant.g_no,
                                      pk_lab_tests_constant.g_yes) flg_notes,
                               decode(dbms_lob.getlength(arp.parameter_notes), NULL, '', to_char(arp.parameter_notes)) desc_notes,
                               count_mult.arp_count,
                               decode(arp.notes_cancel, '', pk_lab_tests_constant.g_no, pk_lab_tests_constant.g_yes) flg_notes_cancel,
                               decode(arp.dt_cancel,
                                      NULL,
                                      pk_prof_utils.get_name_signature(i_lang,
                                                                       i_prof,
                                                                       nvl(arp.id_professional_upd, arp.id_professional)),
                                      pk_prof_utils.get_name_signature(i_lang, i_prof, arp.id_professional_cancel)) prof_result
                          FROM (SELECT lte.*, h.dt_harvest_tstz, h.id_harvest
                                  FROM lab_tests_ea lte, analysis_harvest ah, harvest h
                                 WHERE lte.id_patient = i_patient
                                   AND lte.id_analysis_req_det = ah.id_analysis_req_det
                                   AND ah.id_harvest = h.id_harvest
                                   AND h.flg_status NOT IN (pk_lab_tests_constant.g_harvest_pending,
                                                            pk_lab_tests_constant.g_harvest_waiting,
                                                            pk_lab_tests_constant.g_harvest_cancel,
                                                            pk_lab_tests_constant.g_harvest_suspended)) lte,
                               (SELECT ar.*,
                                       arp.id_analysis_result_par,
                                       COUNT(*) over(PARTITION BY arp.id_analysis_result, arp.id_analysis_parameter, arp.dt_analysis_result_par_tstz ORDER BY arp.dt_analysis_result_par_tstz) arp_count
                                  FROM analysis_result ar
                                 INNER JOIN analysis_result_par arp
                                    ON ar.id_analysis_result = arp.id_analysis_result
                                 WHERE ar.id_patient = i_patient) count_mult,
                               analysis_result ar,
                               analysis_result_par arp,
                               analysis_desc ad,
                               analysis_param ap
                         WHERE ar.id_patient = i_patient
                           AND ar.id_institution = i_prof.institution
                           AND ar.id_analysis_result = arp.id_analysis_result
                           AND arp.id_analysis_parameter = ad.id_analysis_parameter(+)
                           AND to_char(dbms_lob.substr(arp.desc_analysis_result, 3800)) = ad.value(+)
                           AND count_mult.id_analysis_result_par = arp.id_analysis_result_par
                           AND ap.id_software = i_prof.software
                           AND ap.id_institution = i_prof.institution
                           AND arp.id_analysis_parameter = ap.id_analysis_parameter
                           AND ap.id_analysis = ar.id_analysis
                           AND ap.id_sample_type = ar.id_sample_type
                           AND ap.flg_available = pk_lab_tests_constant.g_available
                           AND lte.id_analysis_req_det(+) = ar.id_analysis_req_det
                           AND lte.id_harvest(+) = ar.id_harvest) t) ar
         WHERE (ar.rn = 1 AND l_lab_res_mult = pk_lab_tests_constant.g_no)
            OR (l_lab_res_mult = pk_lab_tests_constant.g_yes);
    
        --calculates the start position for column iteration
        --by default only the last 6 colums should be returned .
        IF (i_start_column = 0 OR i_start_column IS NULL)
           AND l_new_column_results.count - (l_last_column_number - 1) > 0
        THEN
            l_init_pos := l_new_column_results.count - (l_last_column_number - 1);
        ELSIF (i_start_column = 0 OR i_start_column IS NULL)
              AND l_new_column_results.count - (l_last_column_number - 1) <= 0
        THEN
            l_init_pos := 1;
        ELSE
            l_init_pos := i_start_column;
        END IF;
    
        --calculates the end position for column iteration
        --by default only the last 6 colums should be returned .
        IF (i_end_column = 0 OR i_end_column IS NULL)
           AND l_new_column_results.count >= 1
        THEN
            l_end_pos := l_new_column_results.count;
        ELSIF (i_end_column = 0 OR i_end_column IS NULL)
              AND l_new_column_results.count <= 0
        THEN
            l_end_pos := 1;
        ELSE
            l_end_pos := i_end_column;
        END IF;
    
        -- prepares the results for flash display
        -- for each row to be displayed iterate..
        g_error := 'BUILDING OF LAB TESTS HISTORY RESULTS';
        FOR row_pos IN 1 .. l_new_rows_results.count
        LOOP
        
            -- saves rows results
            l_temp_hist_results := t_rec_hist_results(l_new_rows_results(row_pos).id_analysis,
                                                      l_new_rows_results(row_pos).id_sample_type,
                                                      l_new_rows_results(row_pos).id_analysis_parameter,
                                                      l_new_rows_results(row_pos).id_analysis_param,
                                                      l_new_rows_results(row_pos).element_desc,
                                                      l_new_rows_results(row_pos).analysis_count,
                                                      l_new_rows_results(row_pos).analysis_status,
                                                      l_new_rows_results(row_pos).flg_has_parent,
                                                      l_new_rows_results(row_pos).flg_has_children,
                                                      l_new_rows_results(row_pos).rank_lab_test,
                                                      l_new_rows_results(row_pos).rank_lab_test_param,
                                                      l_new_rows_results(row_pos).lab_test_desc,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL);
        
            -- for each column to be displayed iterate..
            FOR col_pos IN l_init_pos .. l_end_pos
            LOOP
                -- for each column check for all results that can be applied
                FOR res_pos IN 1 .. l_new_values_results.count
                LOOP
                    -- if we the results matches the column and the line number, than store it in the
                    -- correct object position
                    IF l_new_column_results(col_pos).id_column = l_new_values_results(res_pos).id_column
                        AND l_new_rows_results(row_pos).id_analysis_param = l_new_values_results(res_pos).id_element
                        AND
                        ((l_new_rows_results(row_pos).id_analysis_result_par != 0 AND l_new_values_results(res_pos).id_analysis_result_par != 0 AND l_new_rows_results(row_pos).id_analysis_result_par = l_new_values_results(res_pos).id_analysis_result_par) OR
                         (l_new_rows_results(row_pos).id_analysis_result_par = 0 AND l_new_values_results(res_pos).id_analysis_result_par = 0))
                    
                    THEN
                        l_temp_hist_results := fill_record(i_column       => l_count_col,
                                                           i_hist_results => l_temp_hist_results,
                                                           i_values       => l_new_values_results(res_pos).value || '|' || l_new_values_results(res_pos).abnorm || '|' || l_new_values_results(res_pos).flg_notes || '|' || l_new_values_results(res_pos).flg_notes_cancel || '|' || l_new_values_results(res_pos).prof_results || '|' || l_new_values_results(res_pos).id_analysis_req_par || '|' || l_new_values_results(res_pos).id_analysis_result || '|' || l_new_values_results(res_pos).id_harvest || '|' || l_new_values_results(res_pos).desc_notes);
                    
                    END IF;
                END LOOP;
            
                --increments the columns internal counter.
                --we only use 6 columns and therefore this calculation is needed
                l_count_col := l_count_col + 1;
            END LOOP;
        
            -- extends the structure that holds the results
            l_hist_results.extend;
            l_hist_results(l_hist_results.count) := l_temp_hist_results;
            l_count_col := 1;
        
        END LOOP;
    
        g_error := 'OPEN O_LIST_RESULTS';
        OPEN o_list_results FOR
            SELECT *
              FROM TABLE(l_hist_results);
    
        l_count_col := 1;
        -- prepares the columns output cursor
        IF (l_init_pos >= 1)
           AND (l_end_pos > 1 OR l_new_column_results.count = 1)
        THEN
            FOR i IN l_init_pos .. l_end_pos
            LOOP
            
                l_result_columns.extend;
                l_result_columns(l_result_columns.count) := l_new_column_results(i);
                l_result_columns(l_result_columns.count).desc_column := 'COLUMN_' || l_count_col;
                l_count_col := l_count_col + 1;
            
            END LOOP;
        END IF;
    
        -- total number of columns.Includes all columns that the resultset holds
        l_count_col := l_new_column_results.count;
    
        g_error := 'OPEN O_LIST_COLUMNS';
        OPEN o_list_columns FOR
            SELECT l_count_col AS total_columns, t.*
              FROM TABLE(l_result_columns) t;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_TIMELINEVIEW',
                                              o_error);
            pk_types.open_my_cursor(o_list_results);
            pk_types.open_my_cursor(o_list_columns);
            RETURN FALSE;
    END get_lab_test_timelineview;

    FUNCTION get_lab_test_graphview
    (
        i_lang              IN language.id_language%TYPE,
        i_prof              IN profissional,
        i_patient           IN patient.id_patient%TYPE,
        o_units_convert     OUT table_table_varchar,
        o_cursor_values     OUT pk_types.cursor_type,
        o_cursor_ref_values OUT pk_types.cursor_type,
        o_error             OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_cursor_values     pk_types.cursor_type;
        l_cursor_ref_values pk_types.cursor_type;
    
        l_graph_values lt_graph_values := lt_graph_values();
        l_ref_values   lt_ref_values := lt_ref_values();
    
        l_id_analysis           table_number;
        l_id_sample_type        table_number;
        l_id_analysis_parameter table_number;
    
        l_dt_harvest_date table_varchar;
        l_dt_harvest_hour table_varchar;
    
        l_result          table_varchar;
        l_desc_result     table_varchar;
        l_id_unit_measure table_number;
    
        l_flg_result_origin table_varchar;
        l_result_color      table_varchar;
    
        l_value_convert      table_varchar;
        l_ref_values_convert table_varchar;
        l_ref_val_min        table_number;
        l_ref_val_max        table_number;
        l_interval_min       table_number;
        l_interval_max       table_number;
    
        l_num_ord table_number;
        l_dt_ord  table_varchar;
        l_rn      table_number;
    
        l_unit_measure_src    unit_measure.id_unit_measure%TYPE;
        l_unit_measure_dst    unit_measure.id_unit_measure%TYPE;
        l_result_convert      table_varchar;
        l_desc_result_convert table_varchar;
        l_ref_conv_result     table_varchar;
        l_num_units           NUMBER;
    
    BEGIN
    
        IF i_patient IS NULL
        THEN
            g_error := pk_message.get_message(i_lang, 'COMMON_M001') || chr(10) ||
                       'PK_LAB_TESTS_CORE.GET_LAB_TEST_GRAPHVIEW / ' || 'i_patient is null';
            RAISE g_other_exception;
        END IF;
    
        -- Results of the lab tests parameters, descriptions and colors to the graph
        g_error := 'OPEN CURSOR CURSOR_VALUES';
        OPEN l_cursor_values FOR
            SELECT t.*
              FROM (SELECT ar.id_analysis,
                           ar.id_sample_type,
                           arp.id_analysis_parameter,
                           pk_date_utils.date_chr_short_read_tsz(i_lang,
                                                                 nvl(lte.dt_harvest, ar.dt_analysis_result_tstz),
                                                                 i_prof.institution,
                                                                 i_prof.software) dt_harvest_date,
                           pk_date_utils.date_char_hour_tsz(i_lang,
                                                            nvl(lte.dt_harvest, ar.dt_analysis_result_tstz),
                                                            i_prof.institution,
                                                            i_prof.software) dt_harvest_hour,
                           CASE
                                WHEN arp_v.count > 1 THEN
                                 -1
                                ELSE
                                 arp.id_unit_measure
                            END id_unit_measure,
                           CASE
                                WHEN arp_v.count > 1 THEN
                                 arp_v.desc_analysis_result
                                ELSE
                                 arp.desc_analysis_result
                            END RESULT,
                           CASE
                                WHEN arp_v.count > 1 THEN
                                 arp_v.value_desc
                                ELSE
                                 arp.desc_analysis_result || ' ' ||
                                 decode(arp.id_unit_measure,
                                        NULL,
                                        arp.desc_unit_measure,
                                        pk_translation.get_translation(i_lang,
                                                                       'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                       arp.id_unit_measure))
                            END desc_result,
                           decode(nvl(arp.flg_intf_orig, lte.flg_time_harvest), NULL, 'M', 'X') flg_result_origin,
                           pk_lab_tests_utils.get_lab_test_parameter_color(i_lang,
                                                                           i_prof,
                                                                           ar.id_analysis,
                                                                           ar.id_sample_type,
                                                                           arp.id_analysis_parameter) result_color,
                           (to_date(pk_date_utils.date_send_tsz(i_lang,
                                                                nvl(lte.dt_harvest, ar.dt_analysis_result_tstz),
                                                                i_prof.institution,
                                                                i_prof.software),
                                    'yyyymmddhh24miss') - to_date('19700101000000', 'yyyymmddhh24miss')) * 24 * 3600 * 1000 num_ord,
                           to_char(nvl(lte.dt_harvest, ar.dt_analysis_result_tstz), 'YYYYMMDDHH24MISS') dt_ord,
                           row_number() over(PARTITION BY arp.id_analysis_result, arp.id_analysis_parameter ORDER BY arp.dt_analysis_result_par_tstz DESC, arp.dt_ins_result_tstz DESC) rn
                      FROM (SELECT substr(concatenate_clob(arp.desc_analysis_result || ';'),
                                          1,
                                          length(concatenate_clob(arp.desc_analysis_result || ';')) - 1) desc_analysis_result,
                                   to_clob(substr(concatenate(arp.desc_analysis_result ||
                                                              (decode(arp.id_unit_measure,
                                                                      NULL,
                                                                      arp.desc_unit_measure,
                                                                      pk_translation.get_translation(i_lang,
                                                                                                     'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                     arp.id_unit_measure))) || ';'),
                                                  1,
                                                  length(concatenate_clob(arp.desc_analysis_result ||
                                                                          (decode(arp.id_unit_measure,
                                                                                  NULL,
                                                                                  arp.desc_unit_measure,
                                                                                  pk_translation.get_translation(i_lang,
                                                                                                                 'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                                 arp.id_unit_measure))) || ';')) - 1)) value_desc,
                                   arp.id_analysis_parameter,
                                   arp.id_analysis_result,
                                   arp.id_analysis_req_par,
                                   COUNT(*) COUNT
                              FROM analysis_result_par arp
                             WHERE arp.id_unit_measure IS NOT NULL
                             GROUP BY arp.id_analysis_parameter, arp.id_analysis_result, arp.id_analysis_req_par) arp_v,
                           lab_tests_ea lte
                     INNER JOIN analysis_result ar
                        ON lte.id_analysis_req_det(+) = ar.id_analysis_req_det
                     INNER JOIN analysis_result_par arp
                        ON ar.id_analysis_result = arp.id_analysis_result
                     WHERE ar.id_patient = i_patient
                       AND arp.desc_analysis_result IS NOT NULL
                       AND arp.dt_cancel IS NULL
                       AND pk_utils.is_number(arp.desc_analysis_result) = pk_lab_tests_constant.g_yes
                       AND arp.id_unit_measure IS NOT NULL
                       AND arp_v.id_analysis_result = arp.id_analysis_result
                       AND arp_v.id_analysis_parameter = arp.id_analysis_parameter
                       AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang, i_prof, lte.id_analysis)
                              FROM dual) = pk_alert_constant.g_yes
                       AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                     i_prof,
                                                                                     lte.id_analysis,
                                                                                     pk_lab_tests_constant.g_infectious_diseases_results)
                              FROM dual) = pk_alert_constant.g_yes) t
             WHERE t.rn = 1
             ORDER BY t.id_analysis, t.id_sample_type, t.id_analysis_parameter, t.dt_harvest_date;
    
        pk_types.open_cursor_if_closed(l_cursor_values);
    
        /* Fetch the cursor into the arrays*/
        FETCH l_cursor_values BULK COLLECT
            INTO l_id_analysis,
                 l_id_sample_type,
                 l_id_analysis_parameter,
                 l_dt_harvest_date,
                 l_dt_harvest_hour,
                 l_id_unit_measure,
                 l_result,
                 l_desc_result,
                 l_flg_result_origin,
                 l_result_color,
                 l_num_ord,
                 l_dt_ord,
                 l_rn;
    
        l_graph_values.extend(l_id_analysis.count);
    
        l_result_convert := table_varchar();
        l_result_convert.extend(l_id_analysis.count);
    
        l_desc_result_convert := table_varchar();
        l_desc_result_convert.extend(l_id_analysis.count);
    
        l_value_convert := table_varchar();
        l_value_convert.extend(l_id_analysis.count);
    
        o_units_convert := table_table_varchar();
    
        IF l_id_analysis.count != 0
        THEN
            -- Loop that makes the conversion according to the last unit measure used in each parameter
            FOR i IN l_id_analysis.first .. l_id_analysis.last
            LOOP
                -- Last unit measure used in the parameter
                SELECT id_unit_measure
                  INTO l_unit_measure_dst
                  FROM (SELECT arp.id_unit_measure,
                               row_number() over(PARTITION BY ar.id_analysis, ar.id_sample_type, arp.id_analysis_parameter, arp.id_unit_measure ORDER BY ar.dt_analysis_result_tstz DESC) rn
                          FROM analysis_result ar, analysis_result_par arp
                         WHERE ar.id_patient = i_patient
                           AND ar.id_analysis = l_id_analysis(i)
                           AND ar.id_sample_type = l_id_sample_type(i)
                           AND arp.id_analysis_result = ar.id_analysis_result
                           AND arp.id_analysis_parameter = l_id_analysis_parameter(i)
                           AND arp.id_unit_measure IS NOT NULL)
                 WHERE rn = 1;
            
                IF l_id_unit_measure(i) != l_unit_measure_dst
                THEN
                    l_value_convert(i) := l_result(i);
                    l_unit_measure_src := l_id_unit_measure(i);
                
                    -- Converts the parameter value to the last unit measure used
                    g_error := 'CALL TO PK_LAB_TESTS_CORE.GET_LAB_TEST_UNIT_CONVERSION';
                    IF NOT pk_lab_tests_core.get_lab_test_unit_conversion(i_lang               => i_lang,
                                                                          i_prof               => i_prof,
                                                                          i_analysis_parameter => l_id_analysis_parameter(i),
                                                                          i_unit_measure_src   => l_unit_measure_src,
                                                                          i_unit_measure_dst   => l_unit_measure_dst,
                                                                          i_values             => l_value_convert,
                                                                          o_list               => l_result_convert,
                                                                          o_unit_measure_list  => l_num_units,
                                                                          o_error              => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                ELSE
                    l_result_convert(i) := l_result(i);
                END IF;
            
                -- In case of multiple values/unit measure for the same id_analysis_result/parameter, 
                -- the unit displayed should be the unit registered at analysis_result_par
                IF l_id_unit_measure(i) = -1
                THEN
                    l_desc_result_convert(i) := l_desc_result(i);
                ELSE
                    l_desc_result_convert(i) := l_result_convert(i) || ' ' ||
                                                pk_translation.get_translation(i_lang,
                                                                               'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                               l_unit_measure_dst);
                END IF;
            
                l_graph_values(i) := t_lt_graph_values(l_id_analysis(i),
                                                       l_id_sample_type(i),
                                                       pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                                i_prof,
                                                                                                pk_lab_tests_constant.g_analysis_alias,
                                                                                                'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                l_id_analysis(i),
                                                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                l_id_sample_type(i),
                                                                                                NULL),
                                                       l_id_analysis_parameter(i),
                                                       pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                                i_prof,
                                                                                                pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                                                'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                                                l_id_analysis_parameter(i),
                                                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                l_id_sample_type(i),
                                                                                                NULL),
                                                       l_dt_harvest_date(i),
                                                       l_dt_harvest_hour(i),
                                                       l_unit_measure_dst,
                                                       l_result_convert(i),
                                                       l_desc_result_convert(i),
                                                       l_flg_result_origin(i),
                                                       l_result_color(i),
                                                       l_num_ord(i),
                                                       l_dt_ord(i));
            
                SELECT COUNT(1)
                  INTO l_num_units
                  FROM lab_tests_uni_mea_cnv ltc, lab_tests_par_uni_mea ltp
                 WHERE ltp.id_lab_tests_par_uni_mea = ltc.id_lt_param_dst_unit
                   AND ltc.id_lt_param_src_unit IN
                       (SELECT ltpu.id_lab_tests_par_uni_mea
                          FROM lab_tests_par_uni_mea ltpu
                         INNER JOIN unit_measure um
                            ON ltpu.id_unit_measure = um.id_unit_measure
                         WHERE ltpu.id_analysis_parameter = l_id_analysis_parameter(i)
                           AND ltpu.id_unit_measure = l_unit_measure_dst);
            
                o_units_convert.extend;
                o_units_convert(o_units_convert.last) := table_varchar(l_id_analysis(i),
                                                                       l_id_sample_type(i),
                                                                       l_id_analysis_parameter(i),
                                                                       l_num_units);
            
            END LOOP;
        END IF;
    
        -- Cursor with converted values
        OPEN o_cursor_values FOR
            SELECT /*+opt_estimate(table t rows=1)*/
             id_analysis,
             id_sample_type,
             desc_analysis,
             id_analysis_parameter,
             desc_parameter,
             dt_harvest_date,
             dt_harvest_hour,
             id_unit_measure,
             RESULT,
             desc_result,
             flg_result_origin,
             result_color,
             num_ord,
             dt_ord
              FROM (TABLE(l_graph_values)) t;
    
        pk_types.open_cursor_if_closed(o_cursor_values);
    
        -- Reference values available for the lab tests parameters that will be presented in the graph
        g_error := 'OPEN CURSOR REFERENCE VALUES';
        OPEN l_cursor_ref_values FOR
            SELECT t.*
              FROM (SELECT ar.id_analysis,
                           ar.id_sample_type,
                           aresp.id_analysis_parameter,
                           ltpum.id_unit_measure,
                           decode(aresp.ref_val_min,
                                  NULL,
                                  (SELECT pk_lab_tests_utils.get_lab_test_reference_value(i_lang,
                                                                                          i_prof,
                                                                                          i_patient,
                                                                                          ar.id_analysis,
                                                                                          ar.id_sample_type,
                                                                                          aresp.id_analysis_parameter,
                                                                                          'MIN')
                                     FROM dual),
                                  aresp.ref_val_min) ref_val_min,
                           decode(aresp.ref_val_max,
                                  NULL,
                                  (SELECT pk_lab_tests_utils.get_lab_test_reference_value(i_lang,
                                                                                          i_prof,
                                                                                          i_patient,
                                                                                          ar.id_analysis,
                                                                                          ar.id_sample_type,
                                                                                          aresp.id_analysis_parameter,
                                                                                          'MAX')
                                     FROM dual),
                                  aresp.ref_val_max) ref_val_max,
                           ltpum.min_measure_interval,
                           ltpum.max_measure_interval,
                           row_number() over(PARTITION BY aresp.id_analysis_result, aresp.id_analysis_parameter ORDER BY aresp.dt_ins_result_tstz DESC) rn
                      FROM analysis_result ar, analysis_result_par aresp, lab_tests_par_uni_mea ltpum
                     WHERE ar.id_patient = i_patient
                       AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang, i_prof, ar.id_analysis)
                              FROM dual) = pk_alert_constant.g_yes
                       AND ar.id_analysis_result = aresp.id_analysis_result
                       AND aresp.dt_cancel IS NULL
                       AND aresp.id_analysis_parameter = ltpum.id_analysis_parameter
                       AND aresp.id_unit_measure = ltpum.id_unit_measure) t
             WHERE t.rn = 1
             ORDER BY t.id_analysis, t.id_sample_type, t.id_analysis_parameter;
    
        pk_types.open_cursor_if_closed(l_cursor_ref_values);
    
        -- Fetch the cursor into the arrays
        FETCH l_cursor_ref_values BULK COLLECT
            INTO l_id_analysis,
                 l_id_sample_type,
                 l_id_analysis_parameter,
                 l_id_unit_measure,
                 l_ref_val_min,
                 l_ref_val_max,
                 l_interval_min,
                 l_interval_max,
                 l_rn;
    
        l_ref_values.extend(l_id_analysis_parameter.count);
    
        l_ref_values_convert := table_varchar();
        l_ref_values_convert.extend(l_id_analysis_parameter.count * 4);
    
        l_ref_conv_result := table_varchar();
        l_ref_conv_result.extend(l_id_analysis_parameter.count * 4);
    
        IF l_id_analysis.count != 0
        THEN
            -- Loop that makes the conversion of reference values according to the last unit measure used in each parameter
            FOR i IN l_id_analysis.first .. l_id_analysis.last
            LOOP
                -- Last unit measure used in the parameter
                SELECT id_unit_measure
                  INTO l_unit_measure_dst
                  FROM (SELECT arp.id_unit_measure,
                               row_number() over(PARTITION BY ar.id_analysis, ar.id_sample_type, arp.id_analysis_parameter, arp.id_unit_measure ORDER BY ar.dt_analysis_result_tstz DESC) rn
                          FROM analysis_result ar, analysis_result_par arp
                         WHERE ar.id_patient = i_patient
                           AND ar.id_analysis = l_id_analysis(i)
                           AND ar.id_sample_type = l_id_sample_type(i)
                           AND arp.id_analysis_result = ar.id_analysis_result
                           AND arp.id_analysis_parameter = l_id_analysis_parameter(i)
                           AND arp.id_unit_measure IS NOT NULL)
                 WHERE rn = 1;
            
                IF l_id_unit_measure(i) != l_unit_measure_dst
                THEN
                    l_ref_values_convert(1) := l_ref_val_min(i);
                    l_ref_values_convert(2) := l_ref_val_max(i);
                    l_ref_values_convert(3) := l_interval_min(i);
                    l_ref_values_convert(4) := l_interval_max(i);
                
                    l_unit_measure_src := l_id_unit_measure(i);
                
                    -- Reference values conversion
                    g_error := 'CALL TO PK_LAB_TESTS_CORE.GET_LAB_TEST_UNIT_CONVERSION';
                    IF NOT pk_lab_tests_core.get_lab_test_unit_conversion(i_lang               => i_lang,
                                                                          i_prof               => i_prof,
                                                                          i_analysis_parameter => l_id_analysis_parameter(i),
                                                                          i_unit_measure_src   => l_unit_measure_src,
                                                                          i_unit_measure_dst   => l_unit_measure_dst,
                                                                          i_values             => l_ref_values_convert,
                                                                          o_list               => l_ref_conv_result,
                                                                          o_unit_measure_list  => l_num_units,
                                                                          o_error              => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                ELSE
                    l_ref_conv_result(1) := l_ref_val_min(i);
                    l_ref_conv_result(2) := l_ref_val_max(i);
                    l_ref_conv_result(3) := l_interval_min(i);
                    l_ref_conv_result(4) := l_interval_max(i);
                END IF;
            
                l_ref_values(i) := t_lt_ref_values(l_id_analysis(i),
                                                   l_id_sample_type(i),
                                                   l_id_analysis_parameter(i),
                                                   l_unit_measure_dst,
                                                   pk_translation.get_translation(i_lang,
                                                                                  'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                  l_unit_measure_dst),
                                                   l_ref_conv_result(1),
                                                   l_ref_conv_result(2),
                                                   l_ref_conv_result(3),
                                                   l_ref_conv_result(4));
            
            END LOOP;
        END IF;
    
        -- Cursor with converted values
        OPEN o_cursor_ref_values FOR
            SELECT /*+opt_estimate(table t rows=1)*/
             *
              FROM (TABLE(l_ref_values)) t;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_GRAPHVIEW',
                                              o_error);
            pk_types.open_my_cursor(o_cursor_values);
            pk_types.open_my_cursor(o_cursor_ref_values);
            RETURN FALSE;
    END get_lab_test_graphview;

    FUNCTION get_lab_test_graphview_data
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        id_tl_timeline     IN tl_timeline.id_tl_timeline%TYPE,
        id_tl_scale        IN tl_scale.id_tl_scale%TYPE,
        i_block_req_number IN NUMBER,
        i_request_date     IN VARCHAR2,
        i_direction        IN VARCHAR2 DEFAULT 'B',
        i_patient          IN NUMBER,
        o_time_data        OUT pk_types.cursor_type,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_time_data pk_types.cursor_type;
    
        l_tab_timeline_data t_tab_timeline_data := t_tab_timeline_data();
    
        BLOCK        table_varchar;
        upper_axis   table_varchar;
        lower_axis   table_varchar;
        dt_begin     table_varchar;
        dt_end       table_varchar;
        dt_begin_tzh table_varchar;
    
    BEGIN
    
        IF NOT pk_timeline_core.get_timeline_data(i_lang             => i_lang,
                                                  i_prof             => i_prof,
                                                  id_tl_timeline     => id_tl_timeline,
                                                  id_tl_scale        => id_tl_scale,
                                                  i_block_req_number => i_block_req_number,
                                                  i_request_date     => i_request_date,
                                                  i_direction        => i_direction,
                                                  i_patient          => i_patient,
                                                  o_x_data           => l_time_data,
                                                  o_error            => o_error)
        
        THEN
            RAISE g_other_exception;
        ELSE
            pk_types.open_cursor_if_closed(l_time_data);
        
            FETCH l_time_data BULK COLLECT
                INTO BLOCK, upper_axis, lower_axis, dt_begin, dt_end, dt_begin_tzh;
        
            l_tab_timeline_data.extend(block.count);
        
            FOR i IN block.first .. block.last
            LOOP
                l_tab_timeline_data(i) := t_timeline_data(BLOCK(i),
                                                          upper_axis(i),
                                                          lower_axis(i),
                                                          dt_begin(i),
                                                          dt_end(i),
                                                          dt_begin_tzh(i));
            END LOOP;
        
            OPEN o_time_data FOR
                SELECT BLOCK,
                       upper_axis,
                       lower_axis,
                       (to_date(dt_begin, 'yyyymmddhh24miss') - to_date('19700101000000', 'yyyymmddhh24miss')) * 24 * 3600 * 1000 dt_begin,
                       dt_end,
                       dt_begin_tzh
                  FROM (TABLE(l_tab_timeline_data)) tld;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_GRAPHVIEW_DATA',
                                              o_error);
            pk_types.open_my_cursor(o_time_data);
            RETURN FALSE;
    END get_lab_test_graphview_data;

    FUNCTION get_lab_test_questionnaire
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_patient     IN patient.id_patient%TYPE,
        i_episode     IN episode.id_episode%TYPE,
        i_analysis    IN analysis.id_analysis%TYPE,
        i_sample_type IN sample_type.id_sample_type%TYPE,
        i_room        IN room.id_room%TYPE,
        i_flg_type    IN VARCHAR2,
        i_flg_time    IN VARCHAR2,
        o_list        OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_patient IS
            SELECT gender, trunc(months_between(SYSDATE, dt_birth) / 12) age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_patient c_patient%ROWTYPE;
    
    BEGIN
    
        g_error := 'OPEN C_PATIENT';
        OPEN c_patient;
        FETCH c_patient
            INTO l_patient;
        CLOSE c_patient;
    
        IF i_flg_type = 'A'
        THEN
            g_error := 'OPEN O_LIST BY ID_ANALYSIS';
            OPEN o_list FOR
                SELECT q.id_analysis,
                       q.id_sample_type,
                       q.id_questionnaire,
                       q.id_questionnaire_parent,
                       q.id_response_parent,
                       pk_mcdt.get_questionnaire_alias(i_lang,
                                                       i_prof,
                                                       'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' || q.id_questionnaire) desc_questionnaire,
                       q.flg_type,
                       q.flg_mandatory,
                       q.flg_copy flg_apply_to_all,
                       q.id_unit_measure,
                       pk_mcdt.get_questionnaire_response(i_lang,
                                                          i_prof,
                                                          i_patient,
                                                          q.id_questionnaire,
                                                          i_analysis,
                                                          i_sample_type,
                                                          i_flg_time,
                                                          i_flg_type) desc_response,
                       decode(q.flg_validation,
                              pk_lab_tests_constant.g_yes,
                              --if date then should return the serialized value stored in the field "notes"
                              decode(instr(q.flg_type, 'D'), 0, to_char(aqr.id_response), to_char(aqr.notes)),
                              aqr.id_response,
                              NULL) episode_id_response,
                       decode(q.flg_validation,
                              pk_lab_tests_constant.g_yes,
                              decode(dbms_lob.getlength(aqr.notes),
                                     NULL,
                                     to_clob(pk_mcdt.get_response_alias(i_lang,
                                                                        i_prof,
                                                                        'RESPONSE.CODE_RESPONSE.' || aqr.id_response)),
                                     pk_lab_tests_utils.get_lab_test_response(i_lang, i_prof, aqr.notes)),
                              to_clob('')) episode_desc_response
                  FROM (SELECT DISTINCT aq.id_analysis,
                                        aq.id_sample_type,
                                        aq.id_questionnaire,
                                        qr.id_questionnaire_parent,
                                        qr.id_response_parent,
                                        aq.flg_type,
                                        aq.flg_mandatory,
                                        aq.flg_copy,
                                        aq.flg_validation,
                                        aq.id_unit_measure,
                                        aq.rank
                          FROM analysis_questionnaire aq, questionnaire_response qr
                         WHERE aq.id_analysis = i_analysis
                           AND aq.id_sample_type = i_sample_type
                           AND aq.flg_time = i_flg_time
                           AND aq.id_institution = i_prof.institution
                           AND aq.flg_available = pk_lab_tests_constant.g_available
                           AND aq.id_questionnaire = qr.id_questionnaire
                           AND aq.id_response = qr.id_response
                           AND qr.flg_available = pk_lab_tests_constant.g_available
                           AND EXISTS
                         (SELECT 1
                                  FROM questionnaire q
                                 WHERE q.id_questionnaire = aq.id_questionnaire
                                   AND q.flg_available = pk_lab_tests_constant.g_available
                                   AND (((l_patient.gender IS NOT NULL AND
                                       coalesce(q.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                       ('I', 'U', 'N', 'C', 'A', 'B', l_patient.gender)) OR l_patient.gender IS NULL OR
                                       l_patient.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                       (nvl(l_patient.age, 0) BETWEEN nvl(q.age_min, 0) AND
                                       nvl(q.age_max, nvl(l_patient.age, 0)) OR nvl(l_patient.age, 0) = 0)))) q,
                       (SELECT id_questionnaire, id_response, notes
                          FROM (SELECT aqr.id_questionnaire,
                                       aqr.id_response,
                                       aqr.notes,
                                       row_number() over(PARTITION BY aqr.id_questionnaire ORDER BY aqr.dt_last_update_tstz DESC) rn
                                  FROM analysis_question_response aqr
                                 WHERE aqr.id_episode = i_episode)
                         WHERE rn = 1) aqr
                 WHERE q.id_questionnaire = aqr.id_questionnaire(+)
                 ORDER BY q.rank;
        ELSE
            g_error := 'OPEN O_LIST BY ID_ANALYSIS_GROUP';
            OPEN o_list FOR
                SELECT q.id_analysis,
                       NULL id_sample_type,
                       q.id_questionnaire,
                       q.id_questionnaire_parent,
                       q.id_response_parent,
                       pk_mcdt.get_questionnaire_alias(i_lang,
                                                       i_prof,
                                                       'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' || q.id_questionnaire) desc_questionnaire,
                       q.flg_type,
                       q.flg_mandatory,
                       q.flg_copy flg_apply_to_all,
                       q.id_unit_measure,
                       pk_mcdt.get_questionnaire_response(i_lang,
                                                          i_prof,
                                                          i_patient,
                                                          q.id_questionnaire,
                                                          i_analysis,
                                                          i_sample_type,
                                                          i_flg_time,
                                                          'A') desc_response,
                       decode(q.flg_validation,
                              pk_lab_tests_constant.g_yes,
                              --if date then should return the serialized value stored in the field "notes"
                              decode(instr(q.flg_type, 'D'), 0, to_char(aqr.id_response), to_char(aqr.notes)),
                              NULL) episode_id_response,
                       decode(q.flg_validation,
                              pk_lab_tests_constant.g_yes,
                              decode(dbms_lob.getlength(aqr.notes),
                                     NULL,
                                     to_clob(pk_mcdt.get_response_alias(i_lang,
                                                                        i_prof,
                                                                        'RESPONSE.CODE_RESPONSE.' || aqr.id_response)),
                                     pk_lab_tests_utils.get_lab_test_response(i_lang, i_prof, aqr.notes)),
                              to_clob('')) episode_desc_response
                  FROM (SELECT DISTINCT aq.id_analysis_group id_analysis,
                                        aq.id_questionnaire,
                                        qr.id_questionnaire_parent,
                                        qr.id_response_parent,
                                        aq.flg_type,
                                        aq.flg_mandatory,
                                        aq.flg_copy,
                                        aq.flg_validation,
                                        aq.id_unit_measure,
                                        aq.rank
                          FROM analysis_questionnaire aq, questionnaire_response qr
                         WHERE aq.id_analysis_group = i_analysis
                           AND aq.flg_time = i_flg_time
                           AND aq.id_institution = i_prof.institution
                           AND aq.flg_available = pk_lab_tests_constant.g_available
                           AND aq.id_questionnaire = qr.id_questionnaire
                           AND aq.id_response = qr.id_response
                           AND qr.flg_available = pk_lab_tests_constant.g_available
                           AND EXISTS
                         (SELECT 1
                                  FROM questionnaire q
                                 WHERE q.id_questionnaire = aq.id_questionnaire
                                   AND q.flg_available = pk_lab_tests_constant.g_available
                                   AND (((l_patient.gender IS NOT NULL AND
                                       coalesce(q.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                       ('I', 'U', 'N', 'C', 'A', 'B', l_patient.gender)) OR l_patient.gender IS NULL OR
                                       l_patient.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                       (nvl(l_patient.age, 0) BETWEEN nvl(q.age_min, 0) AND
                                       nvl(q.age_max, nvl(l_patient.age, 0)) OR nvl(l_patient.age, 0) = 0)))) q,
                       (SELECT id_questionnaire, id_response, notes
                          FROM (SELECT aqr.id_questionnaire,
                                       pk_lab_tests_utils.get_lab_test_episode_response(i_lang,
                                                                                        i_prof,
                                                                                        i_episode,
                                                                                        aqr.id_questionnaire) id_response,
                                       aqr.notes,
                                       row_number() over(PARTITION BY aqr.id_questionnaire ORDER BY aqr.dt_last_update_tstz DESC) rn
                                  FROM analysis_question_response aqr
                                 WHERE aqr.id_episode = i_episode)
                         WHERE rn = 1) aqr
                 WHERE q.id_questionnaire = aqr.id_questionnaire(+)
                 ORDER BY q.rank;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_QUESTIONNAIRE',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_questionnaire;

    FUNCTION get_lab_test_codification_det
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_analysis_req_det IN table_number,
        o_list             OUT pk_types.cursor_type,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        OPEN o_list FOR
            SELECT ard.id_analysis_req_det,
                   ard.id_analysis,
                   ard.id_sample_type,
                   pk_translation.get_translation(i_lang,
                                                  'CODIFICATION.CODE_CODIFICATION.' ||
                                                  pk_lab_tests_utils.get_lab_test_codification(i_lang,
                                                                                               i_prof,
                                                                                               ard.id_analysis_codification)) desc_codification,
                   ard.id_analysis_codification,
                   ard.flg_referral,
                   ard.flg_urgency priority,
                   pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ_DET.FLG_URGENCY', ard.flg_urgency, NULL) desc_priority,
                   ard.id_exec_institution,
                   pk_translation.get_translation(i_lang, 'AB_INSTITUTION.CODE_INSTITUTION.' || ard.id_exec_institution) desc_institution
              FROM analysis_req_det ard
             WHERE ard.id_analysis_req_det IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                *
                                                 FROM TABLE(i_analysis_req_det) t);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_CODIFICATION_DET',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_codification_det;

    FUNCTION get_lab_test_no_result
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_patient     IN patient.id_patient%TYPE,
        i_analysis    IN analysis.id_analysis%TYPE,
        i_sample_type IN sample_type.id_sample_type%TYPE,
        o_list        OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT DISTINCT nvl(lte.id_episode_origin, lte.id_episode) id_episode,
                            lte.id_analysis_req,
                            ard.id_analysis_req_det,
                            ard.flg_status,
                            pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                     i_prof,
                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                     'ANALYSIS.CODE_ANALYSIS.' || lte.id_analysis,
                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                     lte.id_sample_type,
                                                                     NULL) desc_analysis,
                            REPLACE(pk_translation.get_translation(i_lang,
                                                                   'SOFTWARE.CODE_SOFTWARE.' ||
                                                                   pk_episode.get_soft_by_epis_type(e.id_epis_type,
                                                                                                    e.id_institution)),
                                    '<br>',
                                    ' ') desc_software,
                            pk_translation.get_translation(i_lang,
                                                           'CLINICAL_SERVICE.CODE_CLINICAL_SERVICE.' ||
                                                           e.id_clinical_service) desc_speciality,
                            pk_diagnosis.concat_diag(i_lang, NULL, ard.id_analysis_req_det, NULL, i_prof) desc_diagnosis,
                            pk_date_utils.date_send_tsz(i_lang, lte.dt_req, i_prof) dt_req,
                            pk_utils.get_status_string(i_lang,
                                                       i_prof,
                                                       lte.status_str,
                                                       lte.status_msg,
                                                       lte.status_icon,
                                                       lte.status_flg) status_properties,
                            pk_sysdomain.get_domain(i_lang,
                                                    i_prof,
                                                    'ANALYSIS_REQ_DET.FLG_URGENCY',
                                                    ard.flg_urgency,
                                                    NULL) desc_priority
              FROM episode e, analysis_req_det ard, lab_tests_ea lte
             WHERE lte.id_patient = i_patient
               AND lte.id_analysis = i_analysis
               AND lte.id_sample_type = i_sample_type
               AND (e.id_episode = lte.id_episode OR e.id_episode = lte.id_episode_origin)
               AND lte.id_analysis_result IS NULL
               AND lte.flg_status_det != pk_lab_tests_constant.g_analysis_cancel
               AND lte.id_analysis_req_det = ard.id_analysis_req_det;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_NO_RESULT',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_no_result;

    FUNCTION get_lab_test_order_detail
    (
        i_lang                   IN language.id_language%TYPE,
        i_prof                   IN profissional,
        i_analysis_req           IN analysis_req.id_analysis_req%TYPE,
        i_flg_report             IN VARCHAR2 DEFAULT 'N',
        o_lab_test_order         OUT pk_types.cursor_type,
        o_lab_test_order_barcode OUT pk_types.cursor_type,
        o_lab_test_order_history OUT pk_types.cursor_type,
        o_error                  OUT t_error_out
    ) RETURN BOOLEAN IS
    
        TYPE t_code_messages IS TABLE OF VARCHAR2(1000 CHAR) INDEX BY sys_message.code_message%TYPE;
    
        aa_code_messages t_code_messages;
    
        va_code_messages table_varchar := table_varchar('LAB_TESTS_T046',
                                                        'LAB_TESTS_T048',
                                                        'LAB_TESTS_T047',
                                                        'LAB_TESTS_T168',
                                                        'LAB_TESTS_T045',
                                                        'LAB_TESTS_T090',
                                                        'LAB_TESTS_T062',
                                                        'LAB_TESTS_T061',
                                                        'LAB_TESTS_T091',
                                                        'LAB_TESTS_T092',
                                                        'LAB_TESTS_T108',
                                                        'LAB_TESTS_T093');
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
        l_msg_del sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M106');
    
        l_tbl_lab_test_order_detail t_tbl_lab_test_order_detail;
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN va_code_messages.first .. va_code_messages.last
        LOOP
            aa_code_messages(va_code_messages(i)) := '<b>' ||
                                                     pk_message.get_message(i_lang, i_prof, va_code_messages(i)) ||
                                                     '</b> ';
        END LOOP;
    
        g_error                     := 'GET TF_GET_LAB_TEST_REQ';
        l_tbl_lab_test_order_detail := pk_lab_tests_core.tf_get_lab_test_req(i_lang         => i_lang,
                                                                             i_prof         => i_prof,
                                                                             i_analysis_req => i_analysis_req,
                                                                             i_flg_report   => i_flg_report);
    
        g_error := 'OPEN O_LAB_TEST_ORDER';
        OPEN o_lab_test_order FOR
            SELECT /*+opt_estimate (table t rows=1)*/
             *
              FROM TABLE(l_tbl_lab_test_order_detail) t;
    
        g_error := 'OPEN O_LAB_TEST_ORDER_BARCODE';
        OPEN o_lab_test_order_barcode FOR
            SELECT ar.id_analysis_req, ar.barcode
              FROM analysis_req ar
             WHERE ar.id_analysis_req = i_analysis_req;
    
        g_error := 'OPEN O_LAB_TEST_ORDER_HISTORY';
        OPEN o_lab_test_order_history FOR
            SELECT ar.id_analysis_req,
                   decode(cnt,
                          rn,
                          l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, ar.id_prof_writes) ||
                          decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                  i_prof,
                                                                  ar.id_prof_writes,
                                                                  ar.dt_req_tstz,
                                                                  ar.id_episode),
                                 NULL,
                                 '; ',
                                 ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                          i_prof,
                                                                          ar.id_prof_writes,
                                                                          ar.dt_req_tstz,
                                                                          ar.id_episode) || '); ') ||
                          pk_date_utils.date_char_tsz(i_lang, ar.dt_req_tstz, i_prof.institution, i_prof.software),
                          l_msg_reg || ' ' ||
                          pk_prof_utils.get_name_signature(i_lang,
                                                           i_prof,
                                                           nvl(ar.id_prof_cancel, ar.id_prof_last_update)) ||
                          decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                  i_prof,
                                                                  nvl(ar.id_prof_cancel, ar.id_prof_last_update),
                                                                  nvl(ar.dt_cancel_tstz, ar.dt_last_update_tstz),
                                                                  ar.id_episode),
                                 NULL,
                                 '; ',
                                 ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                          i_prof,
                                                                          nvl(ar.id_prof_cancel, ar.id_prof_last_update),
                                                                          nvl(ar.dt_cancel_tstz, ar.dt_last_update_tstz),
                                                                          ar.id_episode) || '); ') ||
                          pk_date_utils.date_char_tsz(i_lang,
                                                      nvl(ar.dt_cancel_tstz, ar.dt_last_update_tstz),
                                                      i_prof.institution,
                                                      i_prof.software)) registry,
                   decode(cnt,
                          rn,
                          decode(i_flg_report,
                                 pk_lab_tests_constant.g_no,
                                 aa_code_messages('LAB_TESTS_T046') || ar.id_analysis_req,
                                 ar.id_analysis_req),
                          decode(ar.id_analysis_req,
                                 ar.id_analysis_req_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T091') || '§' || ar.id_analysis_req || chr(10) ||
                                        chr(9) || aa_code_messages('LAB_TESTS_T046') || ar.id_analysis_req_new,
                                        ar.id_analysis_req || '§' || ar.id_analysis_req_new))) num_order,
                   decode(cnt,
                          rn,
                          decode(ar.flg_priority,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T048') ||
                                        pk_sysdomain.get_domain(i_lang,
                                                                i_prof,
                                                                'ANALYSIS_REQ.FLG_PRIORITY',
                                                                ar.flg_priority,
                                                                NULL),
                                        pk_sysdomain.get_domain(i_lang,
                                                                i_prof,
                                                                'ANALYSIS_REQ.FLG_PRIORITY',
                                                                ar.flg_priority,
                                                                NULL))),
                          decode(ar.flg_priority,
                                 ar.flg_priority_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T092') || '§' ||
                                        decode(ar.flg_priority,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'ANALYSIS_REQ.FLG_PRIORITY',
                                                                       ar.flg_priority,
                                                                       NULL)) ||
                                        decode(ar.flg_priority_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T048') ||
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'ANALYSIS_REQ.FLG_PRIORITY',
                                                                       ar.flg_priority_new,
                                                                       NULL)),
                                        decode(ar.flg_priority,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'ANALYSIS_REQ.FLG_PRIORITY',
                                                                       ar.flg_priority,
                                                                       NULL)) ||
                                        decode(ar.flg_priority_new,
                                               NULL,
                                               NULL,
                                               '§' || pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'ANALYSIS_REQ.FLG_PRIORITY',
                                                                              ar.flg_priority_new,
                                                                              NULL))))) priority,
                   decode(cnt,
                           rn,
                           decode(ar.flg_status,
                                  NULL,
                                  NULL,
                                  decode(i_flg_report,
                                         pk_lab_tests_constant.g_no,
                                         aa_code_messages('LAB_TESTS_T047') ||
                                         decode(ar.flg_status,
                                                pk_lab_tests_constant.g_analysis_sos,
                                                pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS',
                                                                        pk_lab_tests_constant.g_analysis_req,
                                                                        i_lang),
                                                pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS', ar.flg_status, i_lang)),
                                         decode(ar.flg_status,
                                                pk_lab_tests_constant.g_analysis_sos,
                                                pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS',
                                                                        pk_lab_tests_constant.g_analysis_req,
                                                                        i_lang),
                                                pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS', ar.flg_status, i_lang)))),
                           decode(ar.flg_status,
                                  ar.flg_status_new,
                                  NULL,
                                  CASE
                                      WHEN (ar.flg_status = pk_lab_tests_constant.g_analysis_sos AND
                                           ar.flg_status_new = pk_lab_tests_constant.g_analysis_req)
                                           OR (ar.flg_status = pk_lab_tests_constant.g_analysis_req AND
                                           ar.flg_status_new = pk_lab_tests_constant.g_analysis_sos) THEN
                                       NULL
                                      ELSE
                                       decode(i_flg_report,
                                              pk_lab_tests_constant.g_no,
                                              aa_code_messages('LAB_TESTS_T108') || '§' ||
                                              decode(ar.flg_status,
                                                     NULL,
                                                     l_msg_del,
                                                     decode(ar.flg_status,
                                                            pk_lab_tests_constant.g_analysis_sos,
                                                            pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS',
                                                                                    pk_lab_tests_constant.g_analysis_req,
                                                                                    i_lang),
                                                            pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS', ar.flg_status, i_lang))) ||
                                              decode(ar.flg_status_new,
                                                     NULL,
                                                     NULL,
                                                     chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T047') ||
                                                     decode(ar.flg_status_new,
                                                            pk_lab_tests_constant.g_analysis_sos,
                                                            pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS',
                                                                                    pk_lab_tests_constant.g_analysis_req,
                                                                                    i_lang),
                                                            pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS', ar.flg_status_new, i_lang))),
                                              decode(ar.flg_status,
                                                     NULL,
                                                     l_msg_del,
                                                     decode(ar.flg_status,
                                                            pk_lab_tests_constant.g_analysis_sos,
                                                            pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS',
                                                                                    pk_lab_tests_constant.g_analysis_req,
                                                                                    i_lang),
                                                            pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS', ar.flg_status, i_lang))) ||
                                              decode(ar.flg_status_new,
                                                     NULL,
                                                     NULL,
                                                     '§' ||
                                                     decode(ar.flg_status,
                                                            pk_lab_tests_constant.g_analysis_sos,
                                                            pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS',
                                                                                    pk_lab_tests_constant.g_analysis_req,
                                                                                    i_lang),
                                                            pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS', ar.flg_status_new, i_lang))))
                                  END)) desc_status,
                   decode(cnt,
                          rn,
                          decode(ar.dt_begin_tstz,
                                 NULL,
                                 decode(ar.dt_schedule_tstz,
                                        NULL,
                                        decode(i_flg_report,
                                               pk_lab_tests_constant.g_no,
                                               aa_code_messages('LAB_TESTS_T168') ||
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'ANALYSIS_REQ.FLG_TIME',
                                                                       ar.flg_time,
                                                                       NULL),
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'ANALYSIS_REQ.FLG_TIME',
                                                                       ar.flg_time,
                                                                       NULL)),
                                        decode(i_flg_report,
                                               pk_lab_tests_constant.g_no,
                                               aa_code_messages('LAB_TESTS_T168') ||
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'ANALYSIS_REQ.FLG_TIME',
                                                                       ar.flg_time,
                                                                       NULL) || ' (' ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           ar.dt_schedule_tstz,
                                                                           i_prof.institution,
                                                                           i_prof.software) || ')',
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'ANALYSIS_REQ.FLG_TIME',
                                                                       ar.flg_time,
                                                                       NULL) || ' (' ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           ar.dt_schedule_tstz,
                                                                           i_prof.institution,
                                                                           i_prof.software) || ')')),
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T168') ||
                                        pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ.FLG_TIME', ar.flg_time, NULL) || ' (' ||
                                        pk_date_utils.date_char_tsz(i_lang,
                                                                    ar.dt_begin_tstz,
                                                                    i_prof.institution,
                                                                    i_prof.software) || ')',
                                        pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ.FLG_TIME', ar.flg_time, NULL) || ' (' ||
                                        pk_date_utils.date_char_tsz(i_lang,
                                                                    ar.dt_begin_tstz,
                                                                    i_prof.institution,
                                                                    i_prof.software) || ')')),
                          decode(ar.dt_begin_tstz,
                                 ar.dt_begin_tstz_new,
                                 decode(ar.dt_schedule_tstz,
                                        ar.dt_schedule_tstz_new,
                                        NULL,
                                        decode(i_flg_report,
                                               pk_lab_tests_constant.g_no,
                                               aa_code_messages('LAB_TESTS_T093') || '§' ||
                                               decode(ar.dt_schedule_tstz,
                                                      NULL,
                                                      l_msg_del,
                                                      pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'ANALYSIS_REQ.FLG_TIME',
                                                                              ar.flg_time,
                                                                              NULL) || ' (' ||
                                                      pk_date_utils.date_char_tsz(i_lang,
                                                                                  ar.dt_schedule_tstz,
                                                                                  i_prof.institution,
                                                                                  i_prof.software) || ' )') ||
                                               decode(ar.dt_schedule_tstz_new,
                                                      NULL,
                                                      NULL,
                                                      chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T168') ||
                                                      pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'ANALYSIS_REQ.FLG_TIME',
                                                                              ar.flg_time,
                                                                              NULL) || ' (' ||
                                                      pk_date_utils.date_char_tsz(i_lang,
                                                                                  ar.dt_schedule_tstz_new,
                                                                                  i_prof.institution,
                                                                                  i_prof.software) || ')'),
                                               decode(ar.dt_schedule_tstz,
                                                      NULL,
                                                      l_msg_del,
                                                      pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'ANALYSIS_REQ.FLG_TIME',
                                                                              ar.flg_time,
                                                                              NULL) || ' (' ||
                                                      pk_date_utils.date_char_tsz(i_lang,
                                                                                  ar.dt_schedule_tstz,
                                                                                  i_prof.institution,
                                                                                  i_prof.software) || ')') ||
                                               decode(ar.dt_schedule_tstz_new,
                                                      NULL,
                                                      NULL,
                                                      '§' || pk_sysdomain.get_domain(i_lang,
                                                                                     i_prof,
                                                                                     'ANALYSIS_REQ.FLG_TIME',
                                                                                     ar.flg_time,
                                                                                     NULL) || ' (' ||
                                                      pk_date_utils.date_char_tsz(i_lang,
                                                                                  ar.dt_schedule_tstz_new,
                                                                                  i_prof.institution,
                                                                                  i_prof.software) || ')'))),
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T093') || '§' ||
                                        decode(ar.dt_begin_tstz,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'ANALYSIS_REQ.FLG_TIME',
                                                                       ar.flg_time,
                                                                       NULL) || ' (' ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           ar.dt_begin_tstz,
                                                                           i_prof.institution,
                                                                           i_prof.software) || ')') ||
                                        decode(ar.dt_begin_tstz_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T168') ||
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'ANALYSIS_REQ.FLG_TIME',
                                                                       ar.flg_time,
                                                                       NULL) || ' (' ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           ar.dt_begin_tstz_new,
                                                                           i_prof.institution,
                                                                           i_prof.software) || ')'),
                                        decode(ar.dt_begin_tstz,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'ANALYSIS_REQ.FLG_TIME',
                                                                       ar.flg_time,
                                                                       NULL) || ' (' ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           ar.dt_begin_tstz,
                                                                           i_prof.institution,
                                                                           i_prof.software) || ')') ||
                                        decode(ar.dt_begin_tstz_new,
                                               NULL,
                                               NULL,
                                               '§' || pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'ANALYSIS_REQ.FLG_TIME',
                                                                              ar.flg_time,
                                                                              NULL) || ' (' ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           ar.dt_begin_tstz_new,
                                                                           i_prof.institution,
                                                                           i_prof.software) || ')')))) desc_time,
                   decode(cnt,
                           rn,
                           CASE
                               WHEN ar.dt_last_update_tstz = ar.dt_last_update_tstz_new THEN
                                decode(i_flg_report,
                                       pk_lab_tests_constant.g_no,
                                       decode((SELECT COUNT(ard.id_analysis_req_det)
                                                FROM analysis_req_det ard
                                               WHERE ard.id_analysis_req = ar.id_analysis_req),
                                              1,
                                              to_clob(aa_code_messages('LAB_TESTS_T045') ||
                                                      (SELECT pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                        i_prof,
                                                                                                        pk_lab_tests_constant.g_analysis_alias,
                                                                                                        'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                        ard.id_analysis,
                                                                                                        'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                        ard.id_sample_type,
                                                                                                        NULL)
                                                         FROM analysis_req_det ard
                                                        WHERE ard.id_analysis_req = ar.id_analysis_req)),
                                              aa_code_messages('LAB_TESTS_T045') ||
                                              (SELECT chr(10) || chr(9) || chr(9) ||
                                                      replace_clob(substr(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                                     i_prof,
                                                                                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                                                                                     'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                                     ard.id_analysis,
                                                                                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                                     ard.id_sample_type,
                                                                                                                                     NULL) || ';'),
                                                                          1,
                                                                          length(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                                            i_prof,
                                                                                                                                            pk_lab_tests_constant.g_analysis_alias,
                                                                                                                                            'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                                            ard.id_analysis,
                                                                                                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                                            ard.id_sample_type,
                                                                                                                                            NULL) || ';')) - 1),
                                                                   ';',
                                                                   chr(10) || chr(9) || chr(9))
                                                 FROM analysis_req_det ard
                                                WHERE ard.id_analysis_req = ar.id_analysis_req
                                                  AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                                i_prof,
                                                                                                                ard.id_analysis)
                                                         FROM dual) = pk_alert_constant.g_yes)),
                                       decode((SELECT COUNT(ard.id_analysis_req_det)
                                                FROM analysis_req_det ard
                                               WHERE ard.id_analysis_req = ar.id_analysis_req),
                                              1,
                                              to_clob((SELECT pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                       i_prof,
                                                                                                       pk_lab_tests_constant.g_analysis_alias,
                                                                                                       'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                       ard.id_analysis,
                                                                                                       'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                       ard.id_sample_type,
                                                                                                       NULL)
                                                        FROM analysis_req_det ard
                                                       WHERE ard.id_analysis_req = ar.id_analysis_req)),
                                              (SELECT chr(10) || chr(9) || chr(9) ||
                                                      replace_clob(substr(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                                     i_prof,
                                                                                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                                                                                     'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                                     ard.id_analysis,
                                                                                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                                     ard.id_sample_type,
                                                                                                                                     NULL) || ';'),
                                                                          1,
                                                                          length(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                                            i_prof,
                                                                                                                                            pk_lab_tests_constant.g_analysis_alias,
                                                                                                                                            'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                                            ard.id_analysis,
                                                                                                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                                            ard.id_sample_type,
                                                                                                                                            NULL) || ';')) - 1),
                                                                   ';',
                                                                   chr(10) || chr(9) || chr(9))
                                                 FROM analysis_req_det ard
                                                WHERE ard.id_analysis_req = ar.id_analysis_req
                                                  AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                                i_prof,
                                                                                                                ard.id_analysis)
                                                         FROM dual) = pk_alert_constant.g_yes)))
                               ELSE
                                decode(i_flg_report,
                                       pk_lab_tests_constant.g_no,
                                       aa_code_messages('LAB_TESTS_T045') ||
                                       (SELECT chr(10) || chr(9) || chr(9) ||
                                               replace_clob(substr(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                              i_prof,
                                                                                                                              pk_lab_tests_constant.g_analysis_alias,
                                                                                                                              'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                              ardh.id_analysis,
                                                                                                                              'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                              ardh.id_sample_type,
                                                                                                                              NULL) || ';'),
                                                                   1,
                                                                   length(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                                     i_prof,
                                                                                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                                                                                     'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                                     ardh.id_analysis,
                                                                                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                                     ardh.id_sample_type,
                                                                                                                                     NULL) || ';')) - 1),
                                                            ';',
                                                            chr(10) || chr(9) || chr(9))
                                          FROM analysis_req_det_hist ardh
                                         WHERE ardh.id_analysis_req = ar.id_analysis_req
                                           AND ardh.dt_analysis_req_det_hist = ar.dt_analysis_req_hist
                                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                         i_prof,
                                                                                                         ardh.id_analysis)
                                                  FROM dual) = pk_alert_constant.g_yes),
                                       (SELECT chr(10) || chr(9) || chr(9) ||
                                               replace_clob(substr(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                              i_prof,
                                                                                                                              pk_lab_tests_constant.g_analysis_alias,
                                                                                                                              'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                              ardh.id_analysis,
                                                                                                                              'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                              ardh.id_sample_type,
                                                                                                                              NULL) || ';'),
                                                                   1,
                                                                   length(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                                     i_prof,
                                                                                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                                                                                     'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                                     ardh.id_analysis,
                                                                                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                                     ardh.id_sample_type,
                                                                                                                                     NULL) || ';')) - 1),
                                                            ';',
                                                            chr(10) || chr(9) || chr(9))
                                          FROM analysis_req_det_hist ardh
                                         WHERE ardh.id_analysis_req = ar.id_analysis_req
                                           AND ardh.dt_analysis_req_det_hist = ar.dt_analysis_req_hist
                                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                         i_prof,
                                                                                                         ardh.id_analysis)
                                                  FROM dual) = pk_alert_constant.g_yes))
                           END,
                           CASE
                               WHEN ar.flg_status = ar.flg_status_new
                                    AND ar.id_prof_writes = ar.id_prof_writes_new
                                    AND ar.dt_req_tstz = ar.dt_req_tstz_new
                                    AND nvl(to_char(ar.dt_begin_tstz), '0') = nvl(to_char(ar.dt_begin_tstz_new), '0')
                                    AND nvl(to_char(ar.dt_schedule_tstz), '0') = nvl(to_char(ar.dt_schedule_tstz_new), '0')
                                    AND nvl(to_char(ar.dt_pend_req_tstz), '0') = nvl(to_char(ar.dt_pend_req_tstz_new), '0')
                                    AND nvl(ar.flg_priority, '') = nvl(ar.flg_priority_new, '')
                                    AND nvl(ar.id_exec_institution, 0) = nvl(ar.id_exec_institution_new, 0)
                                    AND nvl(ar.id_prof_cancel, 0) = nvl(ar.id_prof_cancel_new, 0) THEN
                                decode(i_flg_report,
                                       pk_lab_tests_constant.g_no,
                                       aa_code_messages('LAB_TESTS_T090') || '§' ||
                                       (SELECT chr(10) || chr(9) || chr(9) ||
                                               replace_clob(substr(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                              i_prof,
                                                                                                                              pk_lab_tests_constant.g_analysis_alias,
                                                                                                                              'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                              ard.id_analysis,
                                                                                                                              'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                              ard.id_sample_type,
                                                                                                                              NULL) || ';'),
                                                                   1,
                                                                   length(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                                     i_prof,
                                                                                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                                                                                     'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                                     ard.id_analysis,
                                                                                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                                     ard.id_sample_type,
                                                                                                                                     NULL) || ';')) - 1),
                                                            ';',
                                                            chr(10) || chr(9) || chr(9))
                                          FROM analysis_req_det ard
                                         WHERE ard.id_analysis_req = ar.id_analysis_req
                                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                         i_prof,
                                                                                                         ard.id_analysis)
                                                  FROM dual) = pk_alert_constant.g_yes) || chr(10) || chr(9) ||
                                       aa_code_messages('LAB_TESTS_T045') ||
                                       (SELECT chr(10) || chr(9) || chr(9) ||
                                               replace_clob(substr(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                              i_prof,
                                                                                                                              pk_lab_tests_constant.g_analysis_alias,
                                                                                                                              'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                              ardh.id_analysis,
                                                                                                                              'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                              ardh.id_sample_type,
                                                                                                                              NULL) || ';'),
                                                                   1,
                                                                   length(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                                     i_prof,
                                                                                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                                                                                     'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                                     ardh.id_analysis,
                                                                                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                                     ardh.id_sample_type,
                                                                                                                                     NULL) || ';')) - 1),
                                                            ';',
                                                            chr(10) || chr(9) || chr(9))
                                          FROM analysis_req_det_hist ardh
                                         WHERE ardh.id_analysis_req = ar.id_analysis_req
                                           AND ardh.dt_analysis_req_det_hist = ar.dt_analysis_req_hist_new
                                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                         i_prof,
                                                                                                         ardh.id_analysis)
                                                  FROM dual) = pk_alert_constant.g_yes),
                                       aa_code_messages('LAB_TESTS_T090') || '§' ||
                                       (SELECT chr(10) || chr(9) || chr(9) ||
                                               replace_clob(substr(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                              i_prof,
                                                                                                                              pk_lab_tests_constant.g_analysis_alias,
                                                                                                                              'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                              ard.id_analysis,
                                                                                                                              'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                              ard.id_sample_type,
                                                                                                                              NULL) || ';'),
                                                                   1,
                                                                   length(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                                     i_prof,
                                                                                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                                                                                     'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                                     ard.id_analysis,
                                                                                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                                     ard.id_sample_type,
                                                                                                                                     NULL) || ';')) - 1),
                                                            ';',
                                                            chr(10) || chr(9) || chr(9))
                                          FROM analysis_req_det ard
                                         WHERE ard.id_analysis_req = ar.id_analysis_req
                                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                         i_prof,
                                                                                                         ard.id_analysis)
                                                  FROM dual) = pk_alert_constant.g_yes) || chr(10) || chr(9) ||
                                       aa_code_messages('LAB_TESTS_T045') ||
                                       (SELECT chr(10) || chr(9) || chr(9) ||
                                               replace_clob(substr(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                              i_prof,
                                                                                                                              pk_lab_tests_constant.g_analysis_alias,
                                                                                                                              'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                              ardh.id_analysis,
                                                                                                                              'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                              ardh.id_sample_type,
                                                                                                                              NULL) || ';'),
                                                                   1,
                                                                   length(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                                     i_prof,
                                                                                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                                                                                     'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                                     ardh.id_analysis,
                                                                                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                                     ardh.id_sample_type,
                                                                                                                                     NULL) || ';')) - 1),
                                                            ';',
                                                            chr(10) || chr(9) || chr(9))
                                          FROM analysis_req_det_hist ardh
                                         WHERE ardh.id_analysis_req = ar.id_analysis_req
                                           AND ardh.dt_analysis_req_det_hist = ar.dt_analysis_req_hist_new
                                           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                         i_prof,
                                                                                                         ardh.id_analysis)
                                                  FROM dual) = pk_alert_constant.g_yes))
                               ELSE
                                to_clob('')
                           END) desc_analysis,
                   decode(cnt,
                          rn,
                          NULL,
                          decode(ar.id_cancel_reason,
                                 ar.id_cancel_reason_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T062') || '§' ||
                                        decode(ar.id_cancel_reason,
                                               NULL,
                                               l_msg_del,
                                               pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, ar.id_cancel_reason)) ||
                                        decode(ar.id_cancel_reason_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T062') ||
                                               pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                       i_prof,
                                                                                       ar.id_cancel_reason_new)),
                                        decode(ar.id_cancel_reason,
                                               NULL,
                                               l_msg_del,
                                               pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, ar.id_cancel_reason)) ||
                                        decode(ar.id_cancel_reason_new,
                                               NULL,
                                               NULL,
                                               '§' ||
                                               pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                       i_prof,
                                                                                       ar.id_cancel_reason_new))))) cancel_reason,
                   decode(cnt,
                          rn,
                          NULL,
                          decode(ar.notes_cancel,
                                 ar.notes_cancel_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T061') || '§' ||
                                        decode(ar.notes_cancel, NULL, l_msg_del, ar.notes_cancel) ||
                                        decode(ar.notes_cancel_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T061') ||
                                               ar.notes_cancel_new),
                                        decode(ar.notes_cancel, NULL, l_msg_del, ar.notes_cancel) ||
                                        decode(ar.notes_cancel_new, NULL, NULL, '§' || ar.notes_cancel_new)))) notes_cancel
              FROM (SELECT row_number() over(ORDER BY t.dt_last_update_tstz DESC NULLS FIRST) rn,
                           MAX(rownum) over() cnt,
                           t.id_analysis_req,
                           first_value(t.id_analysis_req) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_analysis_req_new,
                           t.id_episode,
                           t.flg_time,
                           first_value(t.flg_time) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_time_new,
                           t.flg_status,
                           first_value(t.flg_status) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_status_new,
                           t.id_prof_writes,
                           first_value(t.id_prof_writes) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_writes_new,
                           t.dt_req_tstz,
                           first_value(t.dt_req_tstz) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_req_tstz_new,
                           t.dt_begin_tstz,
                           first_value(t.dt_begin_tstz) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_begin_tstz_new,
                           t.dt_schedule_tstz,
                           first_value(t.dt_schedule_tstz) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_schedule_tstz_new,
                           t.dt_pend_req_tstz,
                           first_value(t.dt_pend_req_tstz) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_pend_req_tstz_new,
                           t.flg_priority,
                           first_value(t.flg_priority) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_priority_new,
                           t.id_exec_institution,
                           first_value(t.id_exec_institution) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_exec_institution_new,
                           t.id_prof_cancel,
                           first_value(t.id_prof_cancel) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_cancel_new,
                           t.dt_cancel_tstz,
                           first_value(t.dt_cancel_tstz) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_cancel_tstz_new,
                           t.id_cancel_reason,
                           first_value(t.id_cancel_reason) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_cancel_reason_new,
                           t.notes_cancel,
                           first_value(t.notes_cancel) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_cancel_new,
                           t.id_prof_last_update,
                           first_value(t.id_prof_last_update) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_last_update_new,
                           t.dt_last_update_tstz,
                           first_value(t.dt_last_update_tstz) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_last_update_tstz_new,
                           t.dt_analysis_req_hist,
                           first_value(t.dt_analysis_req_hist) over(ORDER BY dt_analysis_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_analysis_req_hist_new
                      FROM (SELECT NULL                   dt_analysis_req_hist,
                                   ar.id_analysis_req,
                                   ar.id_episode,
                                   ar.flg_time,
                                   ar.flg_status,
                                   ar.id_prof_writes,
                                   ar.dt_req_tstz,
                                   ar.dt_begin_tstz,
                                   NULL                   dt_schedule_tstz,
                                   ar.dt_pend_req_tstz,
                                   ar.flg_priority,
                                   ar.id_exec_institution,
                                   ar.id_prof_cancel,
                                   ar.dt_cancel_tstz,
                                   ar.id_cancel_reason,
                                   ar.notes_cancel,
                                   ar.id_prof_last_update,
                                   ar.dt_last_update_tstz
                              FROM analysis_req ar
                             WHERE ar.id_analysis_req = i_analysis_req
                            UNION ALL
                            SELECT arh.dt_analysis_req_hist,
                                   arh.id_analysis_req,
                                   arh.id_episode,
                                   arh.flg_time,
                                   arh.flg_status,
                                   arh.id_prof_writes,
                                   arh.dt_req_tstz,
                                   arh.dt_begin_tstz,
                                   NULL dt_schedule_tstz,
                                   arh.dt_pend_req_tstz,
                                   arh.flg_priority,
                                   arh.id_exec_institution,
                                   arh.id_prof_cancel,
                                   arh.dt_cancel_tstz,
                                   arh.id_cancel_reason,
                                   arh.notes_cancel,
                                   arh.id_prof_last_update,
                                   arh.dt_last_update_tstz
                              FROM analysis_req_hist arh
                             WHERE arh.id_analysis_req = i_analysis_req
                             ORDER BY dt_analysis_req_hist DESC NULLS FIRST) t
                     ORDER BY rn) ar;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_ORDER_DETAIL',
                                              o_error);
            pk_types.open_my_cursor(o_lab_test_order_barcode);
            RETURN FALSE;
    END get_lab_test_order_detail;

    FUNCTION get_lab_test_order_detail
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_analysis_req IN analysis_req.id_analysis_req%TYPE,
        i_flg_report   IN VARCHAR2 DEFAULT 'N',
        o_detail       OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        TYPE t_code_messages IS TABLE OF VARCHAR2(1000 CHAR) INDEX BY sys_message.code_message%TYPE;
    
        aa_code_messages t_code_messages;
    
        va_code_messages table_varchar := table_varchar('LAB_TESTS_T046',
                                                        'LAB_TESTS_T048',
                                                        'LAB_TESTS_T047',
                                                        'LAB_TESTS_T168',
                                                        'LAB_TESTS_T045',
                                                        'LAB_TESTS_T090',
                                                        'LAB_TESTS_T062',
                                                        'LAB_TESTS_T061',
                                                        'LAB_TESTS_T091',
                                                        'LAB_TESTS_T092',
                                                        'LAB_TESTS_T108',
                                                        'LAB_TESTS_T093');
    
        CURSOR c_lab_test_order_barcode IS
            SELECT ar.id_analysis_req, ar.barcode
              FROM analysis_req ar
             WHERE ar.id_analysis_req = i_analysis_req;
    
        l_tbl_lab_test_order_detail t_tbl_lab_test_order_detail;
    
        l_row_lab_test_order_barcode c_lab_test_order_barcode%ROWTYPE;
    
        l_tab_order_data   t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_barcode_data t_tab_dd_block_data := t_tab_dd_block_data();
    
        l_tab_dd_data      t_tab_dd_data := t_tab_dd_data();
        l_data_source_list table_varchar := table_varchar();
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN va_code_messages.first .. va_code_messages.last
        LOOP
            aa_code_messages(va_code_messages(i)) := '<b>' ||
                                                     pk_message.get_message(i_lang, i_prof, va_code_messages(i)) ||
                                                     '</b> ';
        END LOOP;
    
        g_error                     := 'GET TF_GET_LAB_TEST_REQ';
        l_tbl_lab_test_order_detail := pk_lab_tests_core.tf_get_lab_test_req(i_lang         => i_lang,
                                                                             i_prof         => i_prof,
                                                                             i_analysis_req => i_analysis_req,
                                                                             i_flg_report   => i_flg_report);
    
        g_error := 'GET L_TAB_ORDER_DATA';
        IF l_tbl_lab_test_order_detail.count > 0
        THEN
            SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                       ddb.rank,
                                       NULL,
                                       NULL,
                                       ddb.condition_val,
                                       NULL,
                                       NULL,
                                       dd.data_source,
                                       dd.data_source_val,
                                       NULL)
              BULK COLLECT
              INTO l_tab_order_data
              FROM (SELECT data_source, data_source_val
                      FROM (SELECT t.*
                              FROM (SELECT ' ' AS title,
                                           l_tbl_lab_test_order_detail(1).num_order num_order,
                                           l_tbl_lab_test_order_detail(1).priority priority,
                                           l_tbl_lab_test_order_detail(1).desc_status desc_status,
                                           l_tbl_lab_test_order_detail(1).desc_time desc_time,
                                           l_tbl_lab_test_order_detail(1).desc_analysis desc_analysis,
                                           l_tbl_lab_test_order_detail(1).cancel_reason cancel_reason,
                                           l_tbl_lab_test_order_detail(1).notes_cancel notes_cancel,
                                           l_tbl_lab_test_order_detail(1).registry registry,
                                           ' ' white_line
                                      FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                             num_order,
                                                                                                             priority,
                                                                                                             desc_status,
                                                                                                             desc_time,
                                                                                                             desc_analysis,
                                                                                                             cancel_reason,
                                                                                                             notes_cancel,
                                                                                                             registry,
                                                                                                             white_line))) dd
              JOIN dd_block ddb
                ON ddb.area = 'LAB_TEST_ORDER'
               AND ddb.internal_name = 'ORDER'
               AND ddb.flg_available = pk_alert_constant.g_yes;
        END IF;
    
        g_error := 'OPEN c_LAB_TEST_ORDER_BARCODE';
        OPEN c_lab_test_order_barcode;
        LOOP
            FETCH c_lab_test_order_barcode
                INTO l_row_lab_test_order_barcode;
            EXIT WHEN c_lab_test_order_barcode%NOTFOUND;
        END LOOP;
    
        IF l_row_lab_test_order_barcode.barcode IS NOT NULL
        THEN
            SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                       ddb.rank,
                                       NULL,
                                       NULL,
                                       ddb.condition_val,
                                       NULL,
                                       NULL,
                                       dd.data_source,
                                       dd.data_source_val,
                                       NULL)
              BULK COLLECT
              INTO l_tab_barcode_data
              FROM (SELECT data_source, data_source_val
                      FROM (SELECT t.*
                              FROM (SELECT ' ' AS title, l_row_lab_test_order_barcode.barcode barcode, ' ' white_line
                                      FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                             barcode,
                                                                                                             white_line))) dd
              JOIN dd_block ddb
                ON ddb.area = 'LAB_TEST_ORDER'
               AND ddb.internal_name = 'BARCODE'
               AND ddb.flg_available = pk_alert_constant.g_yes;
        END IF;
        CLOSE c_lab_test_order_barcode;
    
        g_error := 'GET L_TAB_DD_DATA AND L_DATA_SOURCE_LIST';
        SELECT t_rec_dd_data(CASE
                                  WHEN data_code_message IS NOT NULL THEN
                                   pk_message.get_message(i_lang => i_lang, i_code_mess => data_code_message)
                                  ELSE
                                   NULL
                              END,
                              CASE
                                  WHEN flg_type = 'L1' THEN
                                   NULL
                                  ELSE
                                   data_source_val
                              END,
                              flg_type,
                              flg_html,
                              val_clob,
                              flg_clob),
               data_source
          BULK COLLECT
          INTO l_tab_dd_data, l_data_source_list
          FROM (SELECT ddc.data_code_message,
                       flg_type,
                       data_source_val,
                       ddc.data_source,
                       db.rnk,
                       ddc.rank,
                       db.id_dd_block,
                       flg_html,
                       NULL val_clob,
                       flg_clob
                  FROM TABLE(l_tab_order_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = 'LAB_TEST_ORDER'
                   AND ddc.id_dd_block = 1
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N'))
                UNION ALL
                SELECT ddc.data_code_message,
                       flg_type,
                       data_source_val,
                       ddc.data_source,
                       db.rnk,
                       ddc.rank,
                       db.id_dd_block,
                       flg_html,
                       NULL val_clob,
                       flg_clob
                  FROM TABLE(l_tab_barcode_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = 'LAB_TEST_ORDER'
                   AND ddc.id_dd_block = 2
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N')))
         ORDER BY rnk, rank;
    
        g_error := 'OPEN O_DETAIL';
        OPEN o_detail FOR
            SELECT descr, val, flg_type, flg_html, val_clob, flg_clob
              FROM (SELECT CASE
                                WHEN d.val IS NULL THEN
                                 d.descr
                                WHEN d.descr IS NULL THEN
                                 NULL
                                ELSE
                                 d.descr || decode(d.flg_type, 'LP', NULL, ': ')
                            END descr,
                           d.val,
                           d.flg_type,
                           flg_html,
                           val_clob,
                           flg_clob,
                           d.rn
                      FROM (SELECT rownum rn, descr, val, flg_type, flg_html, val_clob, flg_clob
                              FROM TABLE(l_tab_dd_data)) d
                      JOIN (SELECT rownum rn, column_value data_source
                             FROM TABLE(l_data_source_list)) ds
                        ON ds.rn = d.rn);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_ORDER_DETAIL',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_order_detail;

    FUNCTION get_lab_test_co_sign
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_lab_tests_constant.g_no,
        o_lab_test_co_sign OUT pk_types.cursor_type,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_msg_reg    sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
        l_msg_result sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'LAB_TESTS_T059');
    
    BEGIN
    
        g_error := 'OPEN O_LAB_TEST_CO_SIGN';
        OPEN o_lab_test_co_sign FOR
            SELECT id_analysis_req_det,
                   prof_order,
                   dt_order,
                   order_type,
                   co_sign_prof,
                   co_sign_date,
                   registry,
                   flg_status,
                   co_sign_notes
              FROM (SELECT i_analysis_req_det id_analysis_req_det,
                           csh.desc_prof_ordered_by prof_order,
                           pk_date_utils.date_char_tsz(i_lang, csh.dt_ordered_by, i_prof.institution, i_prof.software) dt_order,
                           csh.desc_order_type order_type,
                           pk_prof_utils.get_name_signature(i_lang, i_prof, cs.id_prof_co_signed) co_sign_prof,
                           pk_date_utils.date_char_tsz(i_lang, cs.dt_co_signed, i_prof.institution, i_prof.software) co_sign_date,
                           l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, cs.id_prof_co_signed) ||
                           decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                   i_prof,
                                                                   cs.id_prof_co_signed,
                                                                   cs.dt_co_signed,
                                                                   cs.id_episode),
                                  NULL,
                                  '; ',
                                  ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                           i_prof,
                                                                           cs.id_prof_co_signed,
                                                                           cs.dt_co_signed,
                                                                           cs.id_episode) || '); ') ||
                           pk_date_utils.date_char_tsz(i_lang, cs.dt_co_signed, i_prof.institution, i_prof.software) registry,
                           decode(pk_co_sign.get_id_action(pk_co_sign_api.g_cosign_action_def_add, NULL),
                                  cs.id_action,
                                  pk_lab_tests_constant.g_analysis_req,
                                  pk_lab_tests_constant.g_analysis_cancel) flg_status,
                           decode(dbms_lob.getlength(cs.co_sign_notes),
                                  NULL,
                                  to_clob(''),
                                  0,
                                  to_clob(''),
                                  decode(i_flg_report,
                                         pk_lab_tests_constant.g_no,
                                         l_msg_result || cs.co_sign_notes,
                                         cs.co_sign_notes)) co_sign_notes,
                           row_number() over(PARTITION BY cs.id_action ORDER BY cs.dt_created DESC NULLS FIRST) rn
                      FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                          i_prof,
                                                                          i_episode,
                                                                          NULL,
                                                                          NULL,
                                                                          NULL,
                                                                          i_analysis_req_det)) cs
                     INNER JOIN TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang, i_prof, i_episode, NULL, NULL, NULL, i_analysis_req_det)) csh
                        ON cs.id_task_type = csh.id_task_type
                       AND cs.id_task = csh.id_task
                     WHERE cs.flg_status = pk_co_sign_api.g_cosign_flg_status_cs
                       AND csh.flg_status = pk_co_sign_api.g_cosign_flg_status_p)
             WHERE rn = 1;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_CO_SIGN',
                                              o_error);
            pk_types.open_my_cursor(o_lab_test_co_sign);
            RETURN FALSE;
    END get_lab_test_co_sign;

    FUNCTION get_lab_test_detail
    (
        i_lang                        IN language.id_language%TYPE,
        i_prof                        IN profissional,
        i_episode                     IN episode.id_episode%TYPE,
        i_analysis_req_det            IN analysis_req_det.id_analysis_req_det%TYPE,
        i_flg_report                  IN VARCHAR2 DEFAULT pk_lab_tests_constant.g_no,
        o_lab_test_order              OUT t_tbl_lab_tests_detail,
        o_lab_test_co_sign            OUT pk_types.cursor_type,
        o_lab_test_clinical_questions OUT t_tbl_lab_tests_cq,
        o_lab_test_harvest            OUT pk_types.cursor_type,
        o_lab_test_result             OUT pk_types.cursor_type,
        o_lab_test_doc                OUT pk_types.cursor_type,
        o_lab_test_review             OUT pk_types.cursor_type,
        o_error                       OUT t_error_out
    ) RETURN BOOLEAN IS
    
        TYPE t_code_messages IS TABLE OF VARCHAR2(1000 CHAR) INDEX BY sys_message.code_message%TYPE;
    
        aa_code_messages t_code_messages;
    
        l_msg_reg    sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
        l_msg_result sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'LAB_TESTS_M003');
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN pk_lab_tests_constant.ga_code_messages_lab_test_detail.first .. pk_lab_tests_constant.ga_code_messages_lab_test_detail.last
        LOOP
            aa_code_messages(pk_lab_tests_constant.ga_code_messages_lab_test_detail(i)) := '<b>' ||
                                                                                           pk_message.get_message(i_lang,
                                                                                                                  i_prof,
                                                                                                                  pk_lab_tests_constant.ga_code_messages_lab_test_detail(i)) ||
                                                                                           '</b> ';
        END LOOP;
    
        g_error          := 'GET o_lab_test_order';
        o_lab_test_order := pk_lab_tests_core.tf_get_lab_test_order(i_lang             => i_lang,
                                                                    i_prof             => i_prof,
                                                                    i_episode          => i_episode,
                                                                    i_analysis_req_det => i_analysis_req_det,
                                                                    i_flg_report       => i_flg_report);
    
        g_error := 'OPEN O_LAB_TEST_CO_SIGN';
        OPEN o_lab_test_co_sign FOR
            SELECT id_analysis_req_det,
                   prof_order,
                   dt_order,
                   order_type,
                   co_sign_prof,
                   co_sign_date,
                   registry,
                   flg_status,
                   co_sign_notes
              FROM (SELECT i_analysis_req_det id_analysis_req_det,
                           csh.desc_prof_ordered_by prof_order,
                           pk_date_utils.date_char_tsz(i_lang, csh.dt_ordered_by, i_prof.institution, i_prof.software) dt_order,
                           csh.desc_order_type order_type,
                           pk_prof_utils.get_name_signature(i_lang, i_prof, cs.id_prof_co_signed) co_sign_prof,
                           pk_date_utils.date_char_tsz(i_lang, cs.dt_co_signed, i_prof.institution, i_prof.software) co_sign_date,
                           l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, cs.id_prof_co_signed) ||
                           decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                   i_prof,
                                                                   cs.id_prof_co_signed,
                                                                   cs.dt_co_signed,
                                                                   cs.id_episode),
                                  NULL,
                                  '; ',
                                  ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                           i_prof,
                                                                           cs.id_prof_co_signed,
                                                                           cs.dt_co_signed,
                                                                           cs.id_episode) || '); ') ||
                           pk_date_utils.date_char_tsz(i_lang, cs.dt_co_signed, i_prof.institution, i_prof.software) registry,
                           decode(pk_co_sign.get_id_action(pk_co_sign_api.g_cosign_action_def_add, NULL),
                                  cs.id_action,
                                  pk_lab_tests_constant.g_analysis_req,
                                  pk_lab_tests_constant.g_analysis_cancel) flg_status,
                           decode(dbms_lob.getlength(cs.co_sign_notes),
                                  NULL,
                                  to_clob(''),
                                  0,
                                  to_clob(''),
                                  decode(i_flg_report,
                                         pk_lab_tests_constant.g_no,
                                         aa_code_messages('LAB_TESTS_T059') || cs.co_sign_notes,
                                         cs.co_sign_notes)) co_sign_notes,
                           row_number() over(PARTITION BY cs.id_action ORDER BY cs.dt_created DESC NULLS FIRST) rn
                      FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                          i_prof,
                                                                          i_episode,
                                                                          NULL,
                                                                          NULL,
                                                                          NULL,
                                                                          i_analysis_req_det)) cs
                     INNER JOIN TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang, i_prof, i_episode, NULL, NULL, NULL, i_analysis_req_det)) csh
                        ON cs.id_task_type = csh.id_task_type
                       AND cs.id_task = csh.id_task
                     WHERE cs.flg_status = pk_co_sign_api.g_cosign_flg_status_cs
                       AND csh.flg_status = pk_co_sign_api.g_cosign_flg_status_p)
             WHERE rn = 1;
    
        g_error                       := 'GET O_LAB_TEST_CLINICAL_QUESTIONS';
        o_lab_test_clinical_questions := pk_lab_tests_core.tf_get_lab_test_cq(i_lang             => i_lang,
                                                                              i_prof             => i_prof,
                                                                              i_episode          => i_episode,
                                                                              i_analysis_req_det => i_analysis_req_det,
                                                                              i_flg_report       => i_flg_report);
    
        g_error := 'OPEN O_LAB_TEST_HARVEST';
        OPEN o_lab_test_harvest FOR
            SELECT ah.id_analysis_req_det,
                   h.id_harvest,
                   h.flg_status,
                   l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, h.id_prof_harvest) ||
                   decode(pk_prof_utils.get_spec_signature(i_lang,
                                                           i_prof,
                                                           h.id_prof_harvest,
                                                           h.dt_harvest_reg_tstz,
                                                           h.id_episode),
                          NULL,
                          '; ',
                          ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                   i_prof,
                                                                   h.id_prof_harvest,
                                                                   h.dt_harvest_reg_tstz,
                                                                   h.id_episode) || '); ') ||
                   pk_date_utils.date_char_tsz(i_lang, h.dt_harvest_reg_tstz, i_prof.institution, i_prof.software) registry,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T045'), '') ||
                   pk_lab_tests_utils.get_alias_translation(i_lang,
                                                            i_prof,
                                                            pk_lab_tests_constant.g_analysis_alias,
                                                            'ANALYSIS.CODE_ANALYSIS.' || ard.id_analysis,
                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || ard.id_sample_type,
                                                            NULL) desc_analysis,
                   decode(i_flg_report,
                          pk_lab_tests_constant.g_no,
                          NULL,
                          pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                   i_prof,
                                                                   pk_lab_tests_constant.g_analysis_sample_alias,
                                                                   'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || ard.id_sample_type,
                                                                   NULL)) desc_sample,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T047'), '') ||
                   pk_sysdomain.get_domain('HARVEST.FLG_STATUS', h.flg_status, i_lang) desc_status,
                   decode(h.id_body_part,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T174'), '') ||
                          pk_translation.get_translation(i_lang, 'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' || h.id_body_part) ||
                          decode(h.flg_laterality,
                                 NULL,
                                 NULL,
                                 ' - ' || pk_sysdomain.get_domain('HARVEST.FLG_LATERALITY', h.flg_laterality, i_lang))) desc_body_location,
                   decode(h.flg_collection_method,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T192'), '') ||
                          pk_sysdomain.get_domain(i_lang,
                                                  i_prof,
                                                  'HARVEST.FLG_COLLECTION_METHOD',
                                                  h.flg_collection_method,
                                                  NULL)) collection_method,
                   decode(h.id_specimen_condition,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T194'), '') ||
                          pk_translation.get_translation(i_lang,
                                                         'ANALYSIS_SPECIMEN_CONDITION.CODE_SPECIMEN_CONDITION.' ||
                                                         h.id_specimen_condition)) specimen_condition,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T028'), '') ||
                   nvl((SELECT r.desc_room
                         FROM room r
                        WHERE r.id_room = h.id_room_receive_tube),
                       pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || h.id_room_receive_tube)) perform_location,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T056'), '') ||
                   pk_translation.get_translation(i_lang,
                                                  'SAMPLE_RECIPIENT.CODE_SAMPLE_RECIPIENT.' || ah.id_sample_recipient) desc_tubes,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T057'), '') ||
                   h.num_recipient num_tubes,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T058'), '') ||
                   pk_date_utils.date_char_tsz(i_lang, h.dt_harvest_tstz, i_prof.institution, i_prof.software) dt_harvest,
                   decode(h.amount,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T205'), '') ||
                          h.amount || ' ' ||
                          pk_translation.get_translation(i_lang,
                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                         pk_lab_tests_utils.get_harvest_unit_measure(i_lang,
                                                                                                     i_prof,
                                                                                                     ah.id_sample_recipient))) collection_amount,
                   decode(h.flg_mov_tube,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T187'), '') ||
                          pk_sysdomain.get_domain(i_lang, i_prof, 'HARVEST.FLG_MOV_TUBE', h.flg_mov_tube, NULL)) harvest_transportation,
                   decode(h.notes,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T059'), '') ||
                          h.notes) notes,
                   decode(h.harvest_instructions,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T241') || h.harvest_instructions) harvest_instructions,
                   decode(h.id_revised_by,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T238'), '') ||
                          pk_prof_utils.get_name_signature(i_lang, i_prof, h.id_revised_by)) revised_by,
                   decode(h.id_rep_coll_reason,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T060'), '') ||
                          pk_translation.get_translation(i_lang,
                                                         'REPEAT_COLLECTION_REASON.CODE_REP_COLL_REASON.' ||
                                                         h.id_rep_coll_reason)) repeat_harvest_notes,
                   decode(h.id_cancel_reason,
                          NULL,
                          NULL,
                          decode(i_flg_report,
                                 pk_lab_tests_constant.g_no,
                                 decode(h.flg_status,
                                        pk_lab_tests_constant.g_harvest_rejected,
                                        aa_code_messages('LAB_TESTS_T195'),
                                        aa_code_messages('LAB_TESTS_T062')),
                                 '') || pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, h.id_cancel_reason)) cancel_reason,
                   decode(h.notes_cancel,
                          NULL,
                          NULL,
                          decode(i_flg_report,
                                 pk_lab_tests_constant.g_no,
                                 decode(h.flg_status,
                                        pk_lab_tests_constant.g_harvest_rejected,
                                        aa_code_messages('LAB_TESTS_T198'),
                                        aa_code_messages('LAB_TESTS_T061')),
                                 '') || h.notes_cancel) notes_cancel,
                   pk_date_utils.date_send_tsz(i_lang, h.dt_harvest_reg_tstz, i_prof) dt_ord
              FROM analysis_req_det ard, analysis_harvest ah, harvest h, analysis_instit_soft ais
             WHERE ard.id_analysis_req_det = i_analysis_req_det
               AND ard.flg_status != pk_lab_tests_constant.g_analysis_cancel
               AND ard.id_analysis_req_det = ah.id_analysis_req_det
               AND ah.id_harvest = h.id_harvest
               AND ard.id_analysis = ais.id_analysis
               AND ard.id_sample_type = ais.id_sample_type
               AND ais.flg_available = pk_lab_tests_constant.g_available
               AND ais.id_institution = i_prof.institution
               AND ais.id_software = i_prof.software
               AND (i_flg_report = pk_lab_tests_constant.g_yes OR
                   h.flg_status NOT IN (pk_lab_tests_constant.g_harvest_waiting,
                                         pk_lab_tests_constant.g_harvest_pending,
                                         pk_lab_tests_constant.g_harvest_suspended,
                                         pk_lab_tests_constant.g_harvest_inactive))
             GROUP BY ah.id_analysis_req_det,
                      ard.id_analysis,
                      ard.id_sample_type,
                      h.id_harvest,
                      h.dt_harvest_reg_tstz,
                      h.id_prof_harvest,
                      h.id_episode,
                      h.flg_status,
                      h.id_body_part,
                      h.flg_laterality,
                      h.flg_collection_method,
                      h.id_specimen_condition,
                      h.id_room_receive_tube,
                      ah.id_sample_recipient,
                      h.num_recipient,
                      h.dt_harvest_tstz,
                      h.amount,
                      h.flg_mov_tube,
                      h.notes,
                      h.harvest_instructions,
                      h.id_revised_by,
                      h.id_rep_coll_reason,
                      h.id_cancel_reason,
                      h.notes_cancel
             ORDER BY dt_ord DESC;
    
        g_error := 'OPEN O_LAB_TEST_RESULT';
        OPEN o_lab_test_result FOR
            SELECT ar.id_analysis_req_det,
                   ar.id_analysis_result,
                   pk_lab_tests_utils.get_lab_test_doc_external(i_lang, i_prof, aresp.id_analysis_result_par) id_doc_external,
                   l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, ar.id_professional) ||
                   decode(pk_prof_utils.get_spec_signature(i_lang,
                                                           i_prof,
                                                           ar.id_professional,
                                                           nvl(aresp.dt_analysis_result_par_upd,
                                                               ar.dt_analysis_result_tstz),
                                                           ar.id_episode),
                          NULL,
                          '; ',
                          ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                   i_prof,
                                                                   ar.id_professional,
                                                                   nvl(aresp.dt_analysis_result_par_upd,
                                                                       ar.dt_analysis_result_tstz),
                                                                   ar.id_episode) || '); ') ||
                   pk_date_utils.date_char_tsz(i_lang,
                                               nvl(aresp.dt_analysis_result_par_upd, ar.dt_analysis_result_tstz),
                                               i_prof.institution,
                                               i_prof.software) registry,
                   decode(aresp.id_arp_parent,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T210'), '') ||
                          pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                   i_prof,
                                                                   pk_lab_tests_constant.g_analysis_alias,
                                                                   'ANALYSIS.CODE_ANALYSIS.' || aresp_parent.id_analysis,
                                                                   'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                   aresp_parent.id_sample_type,
                                                                   NULL)) desc_reflex_analysis,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T045'), '') ||
                   pk_lab_tests_utils.get_alias_translation(i_lang,
                                                            i_prof,
                                                            pk_lab_tests_constant.g_analysis_alias,
                                                            'ANALYSIS.CODE_ANALYSIS.' || ar.id_analysis,
                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || ar.id_sample_type,
                                                            NULL) desc_analysis,
                   decode(h.dt_harvest_tstz,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T058'), '') ||
                          pk_date_utils.date_char_tsz(i_lang, h.dt_harvest_tstz, i_prof.institution, i_prof.software)) dt_harvest,
                   CASE
                        WHEN t.id_analysis_result_count > 1 THEN
                         decode(i_flg_report, pk_lab_tests_constant.g_no, to_clob(aa_code_messages('LAB_TESTS_T066')), '') ||
                         l_msg_result
                        ELSE
                         decode(i_flg_report,
                                pk_lab_tests_constant.g_no,
                                to_clob(aa_code_messages('LAB_TESTS_T066')) ||
                                decode(pk_utils.is_number(dbms_lob.substr(aresp.desc_analysis_result, 3800)),
                                       pk_lab_tests_constant.g_yes,
                                       '',
                                       decode(aresp.id_analysis_desc, NULL, chr(10) || chr(9) || chr(9), '')) ||
                                nvl(TRIM(aresp.desc_analysis_result),
                                    (aresp.comparator || aresp.analysis_result_value_1 || aresp.separator ||
                                    aresp.analysis_result_value_2)) || ' ' ||
                                nvl(aresp.desc_unit_measure,
                                    pk_translation.get_translation(i_lang,
                                                                   'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                   aresp.id_unit_measure)),
                                to_clob(nvl(TRIM(aresp.desc_analysis_result),
                                            (aresp.comparator || aresp.analysis_result_value_1 || aresp.separator ||
                                            aresp.analysis_result_value_2)) || ' ' ||
                                        nvl(aresp.desc_unit_measure,
                                            pk_translation.get_translation(i_lang,
                                                                           'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                           aresp.id_unit_measure))))
                    END RESULT,
                   pk_doc.get_main_thumb_url(i_lang,
                                             i_prof,
                                             pk_lab_tests_utils.get_lab_test_doc_external(i_lang,
                                                                                          i_prof,
                                                                                          aresp.id_analysis_result_par)) thumbnail,
                   decode(ar.id_result_status,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T047'), '') ||
                          pk_translation.get_translation(i_lang,
                                                         'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' || ar.id_result_status)) desc_status,
                   CASE
                        WHEN t.id_analysis_result_count > 1 THEN
                         NULL
                        ELSE
                         decode(nvl(aresp.ref_val,
                                    decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                           nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                           ' - ',
                                           NULL,
                                           nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                           nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                           nvl(aresp.desc_unit_measure,
                                               pk_translation.get_translation(i_lang,
                                                                              'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                              aresp.id_unit_measure)))),
                                NULL,
                                NULL,
                                decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T070'), '') ||
                                nvl(aresp.ref_val,
                                    decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                           nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                           ' - ',
                                           NULL,
                                           nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                           nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                           nvl(aresp.desc_unit_measure,
                                               pk_translation.get_translation(i_lang,
                                                                              'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                              aresp.id_unit_measure)))))
                    END ref_range,
                   CASE
                        WHEN t.id_analysis_result_count > 1 THEN
                         NULL
                        ELSE
                         decode(dbms_lob.getlength(aresp.parameter_notes),
                                NULL,
                                decode(dbms_lob.getlength(aresp.interface_notes),
                                       NULL,
                                       to_clob(''),
                                       decode(i_flg_report,
                                              pk_lab_tests_constant.g_no,
                                              aa_code_messages('LAB_TESTS_T149'),
                                              '') || aresp.interface_notes),
                                decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T149'), '') ||
                                aresp.parameter_notes)
                    END parameter_notes,
                   CASE
                        WHEN t.id_analysis_result_count > 1 THEN
                         NULL
                        ELSE
                         decode(aresp.laboratory_short_desc,
                                NULL,
                                NULL,
                                decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T073'), '') ||
                                aresp.laboratory_short_desc)
                    END desc_lab,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T071'), '') ||
                   pk_date_utils.date_char_tsz(i_lang, ar.dt_analysis_result_tstz, i_prof.institution, i_prof.software) dt_result,
                   decode(ar.flg_result_origin,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T064'), '') ||
                          pk_sysdomain.get_domain(i_lang,
                                                  i_prof,
                                                  'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                  ar.flg_result_origin,
                                                  NULL)) result_origin,
                   decode(ar.result_origin_notes,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T028'), '') ||
                          ar.result_origin_notes) result_origin_notes,
                   decode(dbms_lob.getlength(ar.notes),
                          NULL,
                          to_clob(''),
                          decode(dbms_lob.getlength(ar.notes),
                                 0,
                                 to_clob(''),
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T132'), '') ||
                                 ar.notes)) result_notes,
                   CASE
                        WHEN t.id_analysis_result_count > 1 THEN
                         NULL
                        ELSE
                         decode(aresp.flg_relevant,
                                NULL,
                                NULL,
                                decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T234'), '') ||
                                pk_sysdomain.get_domain(i_lang,
                                                        i_prof,
                                                        'ANALYSIS_RESULT_PAR.FLG_RELEVANT',
                                                        aresp.flg_relevant,
                                                        NULL))
                    END desc_relevant,
                   decode(dbms_lob.getlength(aresp.notes_doctor_registry),
                          NULL,
                          to_clob(''),
                          aa_code_messages('LAB_TESTS_T065') || aresp.notes_doctor_registry) review_notes,
                   pk_date_utils.date_send_tsz(i_lang, ar.dt_analysis_result_tstz, i_prof) dt_ord
              FROM (SELECT ar.id_analysis_req_det,
                           ar.id_analysis_result,
                           COUNT(ar.id_analysis_result) id_analysis_result_count
                      FROM analysis_result ar,
                           (SELECT aresp.id_analysis_result
                              FROM analysis_result_par aresp, analysis_req_par arp
                             WHERE aresp.id_analysis_req_par = arp.id_analysis_req_par
                               AND arp.id_analysis_req_det = i_analysis_req_det) aresp
                     WHERE ar.id_analysis_req_det = i_analysis_req_det
                       AND (ar.flg_status != pk_lab_tests_constant.g_analysis_cancel OR ar.flg_status IS NULL)
                       AND ar.id_analysis_result = aresp.id_analysis_result
                     GROUP BY ar.id_analysis_req_det, ar.id_analysis_result) t,
                   analysis_result ar,
                   (SELECT *
                      FROM (SELECT aresp.*,
                                   row_number() over(PARTITION BY ar.id_harvest, ar.id_analysis_req_det ORDER BY aresp.dt_ins_result_tstz DESC) rn
                              FROM analysis_result_par aresp, analysis_result ar
                             WHERE aresp.id_analysis_result = ar.id_analysis_result
                               AND ar.id_analysis_req_det = i_analysis_req_det)
                     WHERE rn = 1) aresp,
                   harvest h,
                   (SELECT arp.id_analysis_result_par, ar.id_analysis, ar.id_sample_type
                      FROM analysis_result_par arp, analysis_result ar
                     WHERE arp.id_arp_parent IS NULL
                       AND arp.id_analysis_result = ar.id_analysis_result) aresp_parent
             WHERE ar.id_analysis_req_det = i_analysis_req_det
               AND (ar.flg_status != pk_lab_tests_constant.g_analysis_cancel OR ar.flg_status IS NULL)
               AND ar.id_analysis_result = aresp.id_analysis_result
               AND ar.id_harvest = h.id_harvest
               AND ar.id_analysis_result = t.id_analysis_result
               AND aresp.id_arp_parent = aresp_parent.id_analysis_result_par(+)
               AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                             i_prof,
                                                                             ar.id_analysis,
                                                                             pk_lab_tests_constant.g_infectious_diseases_results)
                      FROM dual) = pk_alert_constant.g_yes
             ORDER BY dt_ord DESC;
    
        g_error := 'OPEN O_LAB_TEST_DOC';
        OPEN o_lab_test_doc FOR
            SELECT ama.id_analysis_req_det,
                   ama.id_doc_external,
                   l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, ama.id_prof_last_update) ||
                   decode(pk_prof_utils.get_spec_signature(i_lang,
                                                           i_prof,
                                                           ama.id_prof_last_update,
                                                           ama.dt_last_update_tstz,
                                                           NULL),
                          NULL,
                          '; ',
                          ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                   i_prof,
                                                                   ama.id_prof_last_update,
                                                                   ama.dt_last_update_tstz,
                                                                   NULL) || '); ') ||
                   pk_date_utils.date_char_tsz(i_lang, ama.dt_last_update_tstz, i_prof.institution, i_prof.software) registry,
                   decode(de.title,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T217'), '') ||
                          de.title) doc_title,
                   decode(de.desc_doc_ori_type,
                          NULL,
                          decode(de.id_doc_ori_type,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T224'), '') ||
                                 pk_translation.get_translation(i_lang,
                                                                'DOC_ORI_TYPE.CODE_DOC_ORI_TYPE.' || de.id_doc_ori_type)),
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T224'), '') ||
                          de.desc_doc_ori_type) doc_original_type,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T047'), '') ||
                   pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', de.flg_status, i_lang) desc_status,
                   decode(de.dt_emited,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T215'), '') ||
                          pk_date_utils.dt_chr(i_lang, de.dt_emited, i_prof)) dt_doc,
                   decode(de.desc_perf_by,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T214'), '') ||
                          de.desc_perf_by) perform_by,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T216'), '') ||
                   pk_doc.get_count_image(i_lang, i_prof, ama.id_doc_external) num_img,
                   decode(de.desc_doc_original,
                          NULL,
                          decode(de.id_doc_original,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T219'), '') ||
                                 pk_translation.get_translation(i_lang,
                                                                'DOC_ORIGINAL.CODE_DOC_ORIGINAL.' || de.id_doc_original)),
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T219'), '') ||
                          de.desc_doc_original) doc_original_desc,
                   decode(de.desc_doc_destination,
                          NULL,
                          decode(de.id_doc_destination,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T220'), '') ||
                                 pk_translation.get_translation(i_lang,
                                                                'DOC_TYPE.CODE_DOC_DESTINATION.' || de.id_doc_destination)),
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T220'), '') ||
                          de.desc_doc_destination) doc_original_destination,
                   decode(pk_doc.get_doc_last_comment(i_lang, i_prof, ama.id_doc_external),
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T059'), '') ||
                          pk_doc.get_doc_last_comment(i_lang, i_prof, ama.id_doc_external)) notes,
                   pk_doc.get_main_thumb_url(i_lang, i_prof, ama.id_doc_external) thumbnail,
                   pk_doc.get_count_image(i_lang, i_prof, ama.id_doc_external) thumbnail_icon,
                   pk_date_utils.date_send_tsz(i_lang, ama.dt_last_update_tstz, i_prof) dt_ord
              FROM analysis_media_archive ama, doc_external de
             WHERE ama.id_analysis_req_det = i_analysis_req_det
               AND ama.flg_type = pk_lab_tests_constant.g_media_archive_analysis_doc
               AND ama.flg_status = pk_lab_tests_constant.g_active
               AND ama.id_doc_external = de.id_doc_external
             ORDER BY dt_ord DESC;
    
        g_error := 'OPEN O_LAB_TEST_REVIEW';
        OPEN o_lab_test_review FOR
            SELECT ard.id_analysis_req_det,
                   l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, tr.id_professional) ||
                   decode(pk_prof_utils.get_spec_signature(i_lang,
                                                           i_prof,
                                                           tr.id_professional,
                                                           tr.dt_creation_tstz,
                                                           NULL),
                          NULL,
                          '; ',
                          ' (' ||
                          pk_prof_utils.get_spec_signature(i_lang, i_prof, tr.id_professional, tr.dt_creation_tstz, NULL) ||
                          '); ') ||
                   pk_date_utils.date_char_tsz(i_lang, tr.dt_creation_tstz, i_prof.institution, i_prof.software) registry,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T045'), '') ||
                   pk_lab_tests_utils.get_alias_translation(i_lang,
                                                            i_prof,
                                                            pk_lab_tests_constant.g_analysis_alias,
                                                            'ANALYSIS.CODE_ANALYSIS.' || ard.id_analysis,
                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || ard.id_sample_type,
                                                            NULL) desc_analysis,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T065'), '') ||
                   tr.desc_tests_review review_notes,
                   pk_date_utils.date_send_tsz(i_lang, tr.dt_creation_tstz, i_prof) dt_ord
              FROM analysis_req_det ard, tests_review tr
             WHERE ard.id_analysis_req_det = i_analysis_req_det
               AND ard.id_analysis_req_det = tr.id_request
               AND tr.flg_type = pk_medical_decision.g_tests_type_analisys
             ORDER BY dt_ord DESC;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_DETAIL',
                                              o_error);
            pk_types.open_my_cursor(o_lab_test_co_sign);
            pk_types.open_my_cursor(o_lab_test_harvest);
            pk_types.open_my_cursor(o_lab_test_result);
            pk_types.open_my_cursor(o_lab_test_doc);
            pk_types.open_my_cursor(o_lab_test_review);
            RETURN FALSE;
    END get_lab_test_detail;

    FUNCTION get_lab_test_detail_history
    (
        i_lang                        IN language.id_language%TYPE,
        i_prof                        IN profissional,
        i_episode                     IN episode.id_episode%TYPE,
        i_analysis_req_det            IN analysis_req_det.id_analysis_req_det%TYPE,
        i_flg_report                  IN VARCHAR2 DEFAULT pk_lab_tests_constant.g_no,
        o_lab_test_order              OUT t_tbl_lab_tests_detail,
        o_lab_test_co_sign            OUT pk_types.cursor_type,
        o_lab_test_clinical_questions OUT t_tbl_lab_tests_cq,
        o_lab_test_harvest            OUT pk_types.cursor_type,
        o_lab_test_result             OUT pk_types.cursor_type,
        o_lab_test_doc                OUT pk_types.cursor_type,
        o_lab_test_review             OUT pk_types.cursor_type,
        o_error                       OUT t_error_out
    ) RETURN BOOLEAN IS
    
        TYPE t_code_messages IS TABLE OF VARCHAR2(1000 CHAR) INDEX BY sys_message.code_message%TYPE;
    
        aa_code_messages t_code_messages;
    
        va_code_messages table_varchar := table_varchar('LAB_TESTS_T045',
                                                        'LAB_TESTS_T210',
                                                        'LAB_TESTS_T090',
                                                        'LAB_TESTS_T046',
                                                        'LAB_TESTS_T091',
                                                        'LAB_TESTS_T003',
                                                        'LAB_TESTS_T012',
                                                        'LAB_TESTS_T074',
                                                        'LAB_TESTS_T013',
                                                        'LAB_TESTS_T075',
                                                        'LAB_TESTS_T014',
                                                        'LAB_TESTS_T048',
                                                        'LAB_TESTS_T092',
                                                        'LAB_TESTS_T047',
                                                        'LAB_TESTS_T108',
                                                        'LAB_TESTS_T049',
                                                        'LAB_TESTS_T050',
                                                        'LAB_TESTS_T043',
                                                        'LAB_TESTS_T089',
                                                        'LAB_TESTS_T017',
                                                        'LAB_TESTS_T076',
                                                        'LAB_TESTS_T168',
                                                        'LAB_TESTS_T093',
                                                        'LAB_TESTS_T022',
                                                        'LAB_TESTS_T077',
                                                        'LAB_TESTS_T023',
                                                        'LAB_TESTS_T078',
                                                        'LAB_TESTS_T024',
                                                        'LAB_TESTS_T025',
                                                        'LAB_TESTS_T079',
                                                        'LAB_TESTS_T026',
                                                        'LAB_TESTS_T080',
                                                        'LAB_TESTS_T027',
                                                        'LAB_TESTS_T031',
                                                        'LAB_TESTS_T028',
                                                        'LAB_TESTS_T081',
                                                        'LAB_TESTS_T094',
                                                        'LAB_TESTS_T030',
                                                        'LAB_TESTS_T082',
                                                        'LAB_TESTS_T083',
                                                        'LAB_TESTS_T229',
                                                        'LAB_TESTS_T230',
                                                        'LAB_TESTS_T033',
                                                        'LAB_TESTS_T199',
                                                        'LAB_TESTS_T032',
                                                        'LAB_TESTS_T084',
                                                        'LAB_TESTS_T200',
                                                        'LAB_TESTS_T201',
                                                        'LAB_TESTS_T085',
                                                        'LAB_TESTS_T034',
                                                        'LAB_TESTS_T035',
                                                        'LAB_TESTS_T086',
                                                        'LAB_TESTS_T036',
                                                        'LAB_TESTS_T087',
                                                        'LAB_TESTS_T037',
                                                        'LAB_TESTS_T088',
                                                        'LAB_TESTS_T185',
                                                        'LAB_TESTS_T186',
                                                        'LAB_TESTS_T038',
                                                        'LAB_TESTS_T053',
                                                        'LAB_TESTS_T095',
                                                        'LAB_TESTS_T054',
                                                        'LAB_TESTS_T096',
                                                        'LAB_TESTS_T055',
                                                        'LAB_TESTS_T097',
                                                        'LAB_TESTS_T227',
                                                        'LAB_TESTS_T061',
                                                        'LAB_TESTS_T228',
                                                        'LAB_TESTS_T062',
                                                        'LAB_TESTS_T063',
                                                        'LAB_TESTS_T174',
                                                        'LAB_TESTS_T175',
                                                        'LAB_TESTS_T192',
                                                        'LAB_TESTS_T193',
                                                        'LAB_TESTS_T056',
                                                        'LAB_TESTS_T098',
                                                        'LAB_TESTS_T057',
                                                        'LAB_TESTS_T099',
                                                        'LAB_TESTS_T058',
                                                        'LAB_TESTS_T100',
                                                        'LAB_TESTS_T059',
                                                        'LAB_TESTS_T101',
                                                        'LAB_TESTS_T205',
                                                        'LAB_TESTS_T209',
                                                        'LAB_TESTS_T187',
                                                        'LAB_TESTS_T188',
                                                        'LAB_TESTS_T060',
                                                        'LAB_TESTS_T102',
                                                        'LAB_TESTS_T107',
                                                        'LAB_TESTS_T064',
                                                        'LAB_TESTS_T103',
                                                        'LAB_TESTS_T132',
                                                        'LAB_TESTS_T151',
                                                        'LAB_TESTS_T234',
                                                        'LAB_TESTS_T235',
                                                        'LAB_TESTS_T103',
                                                        'LAB_TESTS_T066',
                                                        'LAB_TESTS_T105',
                                                        'LAB_TESTS_T070',
                                                        'LAB_TESTS_T106',
                                                        'LAB_TESTS_T149',
                                                        'LAB_TESTS_T150',
                                                        'LAB_TESTS_T073',
                                                        'LAB_TESTS_T071',
                                                        'LAB_TESTS_T214',
                                                        'LAB_TESTS_T215',
                                                        'LAB_TESTS_T216',
                                                        'LAB_TESTS_T217',
                                                        'LAB_TESTS_T224',
                                                        'LAB_TESTS_T218',
                                                        'LAB_TESTS_T219',
                                                        'LAB_TESTS_T220',
                                                        'LAB_TESTS_T065',
                                                        'LAB_TESTS_T104',
                                                        'LAB_TESTS_T237',
                                                        'LAB_TESTS_T238',
                                                        'LAB_TESTS_T241',
                                                        'LAB_TESTS_T242',
                                                        'LAB_TESTS_T243',
                                                        'COMMON_M035',
                                                        'COMMON_T061',
                                                        'COMMON_T062');
    
        l_msg_reg    sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
        l_msg_date   sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAM_REQ_M002');
        l_msg_del    sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M106');
        l_msg_result sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'LAB_TESTS_M003');
    
        l_health_insurance sys_config.value%TYPE := pk_sysconfig.get_config('MCDT_HEALTH_INSURANCE', i_prof);
    
        l_formated_text VARCHAR2(100 CHAR) := '<br>' || chr(9) || chr(32) || chr(32);
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN va_code_messages.first .. va_code_messages.last
        LOOP
            aa_code_messages(va_code_messages(i)) := '<b>' ||
                                                     pk_message.get_message(i_lang, i_prof, va_code_messages(i)) ||
                                                     '</b> ';
        END LOOP;
    
        g_error := 'OPEN T_LAB_TESTS_DETAIL';
        WITH cso_table AS
         (SELECT *
            FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                i_prof,
                                                                i_episode,
                                                                NULL,
                                                                NULL,
                                                                NULL,
                                                                i_analysis_req_det)))
        SELECT t_lab_tests_detail(id_analysis_req_det,
                                  registry,
                                  desc_analysis,
                                  num_order,
                                  clinical_indication,
                                  diagnosis_notes,
                                  desc_diagnosis,
                                  clinical_purpose,
                                  instructions,
                                  priority,
                                  desc_status,
                                  title_order_set,
                                  task_depend,
                                  desc_time,
                                  desc_time_limit,
                                  order_recurrence,
                                  prn,
                                  notes_prn,
                                  patient_instructions,
                                  fasting,
                                  notes_patient,
                                  collection,
                                  collection_location,
                                  notes_scheduler,
                                  execution,
                                  perform_location,
                                  notes_technician,
                                  notes,
                                  results,
                                  prof_cc,
                                  prof_bcc,
                                  co_sign,
                                  prof_order,
                                  dt_order,
                                  order_type,
                                  co_sign_status,
                                  health_insurance,
                                  financial_entity,
                                  health_plan,
                                  insurance_number,
                                  exemption,
                                  cancellation,
                                  cancel_reason,
                                  cancel_notes,
                                  cancel_prof_order,
                                  cancel_dt_order,
                                  cancel_order_type,
                                  dt_last_update,
                                  dt_ord)
          BULK COLLECT
          INTO o_lab_test_order
          FROM (SELECT ard.id_analysis_req_det,
                       decode(cnt,
                              rn,
                              l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, ar.id_prof_writes) ||
                              decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                      i_prof,
                                                                      ar.id_prof_writes,
                                                                      ar.dt_req_tstz,
                                                                      ar.id_episode),
                                     NULL,
                                     '; ',
                                     ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                              i_prof,
                                                                              ar.id_prof_writes,
                                                                              ar.dt_req_tstz,
                                                                              ar.id_episode) || '); ') ||
                              pk_date_utils.date_char_tsz(i_lang, ar.dt_req_tstz, i_prof.institution, i_prof.software),
                              l_msg_reg || ' ' ||
                              pk_prof_utils.get_name_signature(i_lang,
                                                               i_prof,
                                                               nvl(ard.id_prof_cancel, ard.id_prof_last_update)) ||
                              decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                      i_prof,
                                                                      nvl(ard.id_prof_cancel, ard.id_prof_last_update),
                                                                      nvl(ard.dt_cancel_tstz, ard.dt_last_update_tstz),
                                                                      ar.id_episode),
                                     NULL,
                                     '; ',
                                     ' (' ||
                                     pk_prof_utils.get_spec_signature(i_lang,
                                                                      i_prof,
                                                                      nvl(ard.id_prof_cancel, ard.id_prof_last_update),
                                                                      nvl(ard.dt_cancel_tstz, ard.dt_last_update_tstz),
                                                                      ar.id_episode) || '); ') ||
                              pk_date_utils.date_char_tsz(i_lang,
                                                          nvl(ard.dt_cancel_tstz, ard.dt_last_update_tstz),
                                                          i_prof.institution,
                                                          i_prof.software)) registry,
                       decode(cnt,
                              rn,
                              decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T045'), '') ||
                              pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                       i_prof,
                                                                       pk_lab_tests_constant.g_analysis_alias,
                                                                       'ANALYSIS.CODE_ANALYSIS.' || ard.id_analysis,
                                                                       'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                       ard.id_sample_type,
                                                                       NULL),
                              decode(ard.id_analysis,
                                     ard.id_analysis_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T090') || '§' ||
                                            pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                     i_prof,
                                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                                     'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                     ard.id_analysis,
                                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                     ard.id_sample_type,
                                                                                     NULL) ||
                                            aa_code_messages('LAB_TESTS_T045') ||
                                            pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                     i_prof,
                                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                                     'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                     ard.id_analysis_new,
                                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                     ard.id_sample_type_new,
                                                                                     NULL),
                                            pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                     i_prof,
                                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                                     'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                     ard.id_analysis,
                                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                     ard.id_sample_type,
                                                                                     NULL) || '§' ||
                                            pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                     i_prof,
                                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                                     'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                     ard.id_analysis_new,
                                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                     ard.id_sample_type_new,
                                                                                     NULL)))) desc_analysis,
                       decode(cnt,
                              rn,
                              decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T046'), '') ||
                              ard.id_analysis_req,
                              decode(ard.id_analysis_req,
                                     ard.id_analysis_req_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T091') || '§' || ard.id_analysis_req ||
                                            l_formated_text || aa_code_messages('LAB_TESTS_T046') ||
                                            ard.id_analysis_req_new,
                                            ard.id_analysis_req || '§' || ard.id_analysis_req_new))) num_order,
                       aa_code_messages('LAB_TESTS_T003') clinical_indication,
                       decode(cnt,
                              rn,
                              decode(ard.diagnosis_notes,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T012'),
                                            '') || ard.diagnosis_notes),
                              decode(ard.diagnosis_notes,
                                     ard.diagnosis_notes_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T074') || '§' ||
                                            decode(ard.diagnosis_notes, NULL, l_msg_del, ard.diagnosis_notes) ||
                                            decode(ard.diagnosis_notes_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T012') ||
                                                   ard.diagnosis_notes_new),
                                            decode(ard.diagnosis_notes, NULL, l_msg_del, ard.diagnosis_notes) ||
                                            decode(ard.diagnosis_notes_new, NULL, NULL, '§' || ard.diagnosis_notes_new)))) diagnosis_notes,
                       decode(cnt,
                              rn,
                              decode(ard.id_diagnosis_list,
                                     NULL,
                                     decode(pk_diagnosis.concat_diag(i_lang, NULL, ard.id_analysis_req_det, NULL, i_prof),
                                            NULL,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('COMMON_T062'),
                                                   '') ||
                                            pk_diagnosis.concat_diag(i_lang, NULL, ard.id_analysis_req_det, NULL, i_prof)),
                                     decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('COMMON_T062'), '') ||
                                     pk_lab_tests_utils.get_lab_test_diagnosis(i_lang, i_prof, ard.id_diagnosis_list)),
                              decode(ard.id_diagnosis_list,
                                     ard.id_diagnosis_list_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('COMMON_T061') || '§' ||
                                            decode(ard.id_diagnosis_list,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_lab_tests_utils.get_lab_test_diagnosis(i_lang,
                                                                                             i_prof,
                                                                                             ard.id_diagnosis_list)) ||
                                            decode(ard.id_diagnosis_list_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('COMMON_T062') ||
                                                   pk_lab_tests_utils.get_lab_test_diagnosis(i_lang,
                                                                                             i_prof,
                                                                                             ard.id_diagnosis_list_new)),
                                            decode(ard.id_diagnosis_list,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_lab_tests_utils.get_lab_test_diagnosis(i_lang,
                                                                                             i_prof,
                                                                                             ard.id_diagnosis_list)) ||
                                            decode(ard.id_diagnosis_list_new,
                                                   NULL,
                                                   NULL,
                                                   '§' ||
                                                   pk_lab_tests_utils.get_lab_test_diagnosis(i_lang,
                                                                                             i_prof,
                                                                                             ard.id_diagnosis_list_new))))) desc_diagnosis,
                       decode(cnt,
                              rn,
                              decode(ard.id_clinical_purpose,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T013'),
                                            '') ||
                                     decode(ard.id_clinical_purpose,
                                            0,
                                            ard.clinical_purpose_notes,
                                            pk_translation.get_translation(i_lang,
                                                                           'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                                           ard.id_clinical_purpose))),
                              decode(ard.id_clinical_purpose,
                                     ard.id_clinical_purpose_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T075') || '§' ||
                                            decode(ard.id_clinical_purpose,
                                                   NULL,
                                                   l_msg_del,
                                                   decode(ard.id_clinical_purpose,
                                                          0,
                                                          ard.clinical_purpose_notes,
                                                          pk_translation.get_translation(i_lang,
                                                                                         'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                                                         ard.id_clinical_purpose))) ||
                                            decode(ard.id_clinical_purpose_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T013') ||
                                                   decode(ard.id_clinical_purpose_new,
                                                          0,
                                                          ard.clinical_purpose_notes,
                                                          pk_translation.get_translation(i_lang,
                                                                                         'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                                                         ard.id_clinical_purpose_new))),
                                            decode(ard.id_clinical_purpose,
                                                   NULL,
                                                   l_msg_del,
                                                   decode(ard.id_clinical_purpose,
                                                          0,
                                                          ard.clinical_purpose_notes,
                                                          pk_translation.get_translation(i_lang,
                                                                                         'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                                                         ard.id_clinical_purpose))) ||
                                            decode(ard.id_clinical_purpose_new,
                                                   NULL,
                                                   NULL,
                                                   '§' ||
                                                   decode(ard.id_clinical_purpose_new,
                                                          0,
                                                          ard.clinical_purpose_notes,
                                                          pk_translation.get_translation(i_lang,
                                                                                         'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                                                         ard.id_clinical_purpose_new)))))) clinical_purpose,
                       aa_code_messages('LAB_TESTS_T014') instructions,
                       decode(cnt,
                              rn,
                              decode(ard.flg_urgency,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T048'),
                                            '') || pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'ANALYSIS_REQ_DET.FLG_URGENCY',
                                                                           ard.flg_urgency,
                                                                           NULL)),
                              decode(ard.flg_urgency,
                                     ard.flg_urgency_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T092') || '§' ||
                                            decode(ard.flg_urgency,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'ANALYSIS_REQ_DET.FLG_URGENCY',
                                                                           ard.flg_urgency,
                                                                           NULL)) ||
                                            decode(ard.flg_urgency_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T048') ||
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'ANALYSIS_REQ_DET.FLG_URGENCY',
                                                                           ard.flg_urgency_new,
                                                                           NULL)),
                                            decode(ard.flg_urgency,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'ANALYSIS_REQ_DET.FLG_URGENCY',
                                                                           ard.flg_urgency,
                                                                           NULL)) ||
                                            decode(ard.flg_urgency_new,
                                                   NULL,
                                                   NULL,
                                                   '§' || pk_sysdomain.get_domain(i_lang,
                                                                                  i_prof,
                                                                                  'ANALYSIS_REQ_DET.FLG_URGENCY',
                                                                                  ard.flg_urgency_new,
                                                                                  NULL))))) priority,
                       decode(cnt,
                               rn,
                               decode(ard.flg_referral,
                                      NULL,
                                      decode(ard.flg_status,
                                             NULL,
                                             NULL,
                                             decode(i_flg_report,
                                                    pk_lab_tests_constant.g_no,
                                                    aa_code_messages('LAB_TESTS_T047'),
                                                    '') || decode(ard.flg_status,
                                                                  pk_lab_tests_constant.g_analysis_sos,
                                                                  pk_sysdomain.get_domain(i_lang,
                                                                                          i_prof,
                                                                                          'ANALYSIS_REQ_DET.FLG_STATUS',
                                                                                          pk_lab_tests_constant.g_analysis_req,
                                                                                          NULL),
                                                                  pk_sysdomain.get_domain(i_lang,
                                                                                          i_prof,
                                                                                          'ANALYSIS_REQ_DET.FLG_STATUS',
                                                                                          ard.flg_status,
                                                                                          NULL))),
                                      decode(i_flg_report,
                                             pk_lab_tests_constant.g_no,
                                             aa_code_messages('LAB_TESTS_T047'),
                                             '') ||
                                      pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_REFERRAL', ard.flg_referral, i_lang)),
                               decode(ard.flg_referral,
                                      ard.flg_referral_new,
                                      decode(ard.flg_status,
                                             ard.flg_status_new,
                                             NULL,
                                             CASE
                                                 WHEN (ard.flg_status = pk_lab_tests_constant.g_analysis_sos AND
                                                      ard.flg_status_new = pk_lab_tests_constant.g_analysis_req)
                                                      OR (ard.flg_status = pk_lab_tests_constant.g_analysis_req AND
                                                      ard.flg_status_new = pk_lab_tests_constant.g_analysis_sos) THEN
                                                  NULL
                                                 ELSE
                                                  decode(i_flg_report,
                                                         pk_lab_tests_constant.g_no,
                                                         aa_code_messages('LAB_TESTS_T108') || '§' ||
                                                         decode(ard.flg_status,
                                                                NULL,
                                                                l_msg_del,
                                                                decode(ard.flg_status,
                                                                       pk_lab_tests_constant.g_analysis_sos,
                                                                       pk_sysdomain.get_domain(i_lang,
                                                                                               i_prof,
                                                                                               'ANALYSIS_REQ_DET.FLG_STATUS',
                                                                                               pk_lab_tests_constant.g_analysis_req,
                                                                                               NULL),
                                                                       pk_sysdomain.get_domain(i_lang,
                                                                                               i_prof,
                                                                                               'ANALYSIS_REQ_DET.FLG_STATUS',
                                                                                               ard.flg_status,
                                                                                               NULL))) ||
                                                         decode(ard.flg_status_new,
                                                                NULL,
                                                                NULL,
                                                                l_formated_text || aa_code_messages('LAB_TESTS_T047') ||
                                                                decode(ard.flg_status_new,
                                                                       pk_lab_tests_constant.g_analysis_sos,
                                                                       pk_sysdomain.get_domain(i_lang,
                                                                                               i_prof,
                                                                                               'ANALYSIS_REQ_DET.FLG_STATUS',
                                                                                               pk_lab_tests_constant.g_analysis_req,
                                                                                               NULL),
                                                                       pk_sysdomain.get_domain(i_lang,
                                                                                               i_prof,
                                                                                               'ANALYSIS_REQ_DET.FLG_STATUS',
                                                                                               ard.flg_status_new,
                                                                                               NULL))),
                                                         decode(ard.flg_status,
                                                                NULL,
                                                                l_msg_del,
                                                                decode(ard.flg_status,
                                                                       pk_lab_tests_constant.g_analysis_sos,
                                                                       pk_sysdomain.get_domain(i_lang,
                                                                                               i_prof,
                                                                                               'ANALYSIS_REQ_DET.FLG_STATUS',
                                                                                               pk_lab_tests_constant.g_analysis_req,
                                                                                               NULL),
                                                                       pk_sysdomain.get_domain(i_lang,
                                                                                               i_prof,
                                                                                               'ANALYSIS_REQ_DET.FLG_STATUS',
                                                                                               ard.flg_status,
                                                                                               NULL))) ||
                                                         decode(ard.flg_status_new,
                                                                NULL,
                                                                NULL,
                                                                '§' || decode(ard.flg_status,
                                                                              pk_lab_tests_constant.g_analysis_sos,
                                                                              pk_sysdomain.get_domain(i_lang,
                                                                                                      i_prof,
                                                                                                      'ANALYSIS_REQ_DET.FLG_STATUS',
                                                                                                      pk_lab_tests_constant.g_analysis_req,
                                                                                                      NULL),
                                                                              pk_sysdomain.get_domain(i_lang,
                                                                                                      i_prof,
                                                                                                      'ANALYSIS_REQ_DET.FLG_STATUS',
                                                                                                      ard.flg_status_new,
                                                                                                      NULL))))
                                             END),
                                      decode(i_flg_report,
                                             pk_lab_tests_constant.g_no,
                                             aa_code_messages('LAB_TESTS_T108') || '§' ||
                                             decode(ard.flg_referral,
                                                    NULL,
                                                    l_msg_del,
                                                    pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_REFERRAL',
                                                                            ard.flg_referral,
                                                                            i_lang)) ||
                                             decode(ard.flg_referral_new,
                                                    NULL,
                                                    NULL,
                                                    l_formated_text || aa_code_messages('LAB_TESTS_T047') ||
                                                    pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_REFERRAL',
                                                                            ard.flg_referral_new,
                                                                            i_lang)),
                                             decode(ard.flg_referral,
                                                    NULL,
                                                    l_msg_del,
                                                    pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_REFERRAL',
                                                                            ard.flg_referral,
                                                                            i_lang)) ||
                                             decode(ard.flg_referral_new,
                                                    NULL,
                                                    NULL,
                                                    '§' || pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_REFERRAL',
                                                                                   ard.flg_referral_new,
                                                                                   i_lang))))) desc_status,
                       NULL title_order_set,
                       NULL task_depend,
                       decode(cnt,
                              rn,
                              decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T168'), '') ||
                              pk_sysdomain.get_domain(i_lang,
                                                      i_prof,
                                                      'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                                      ard.flg_time_harvest,
                                                      NULL) ||
                              decode(ard.dt_target_tstz,
                                     NULL,
                                     decode(ard.dt_schedule,
                                            NULL,
                                            '',
                                            ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                ard.dt_schedule,
                                                                                i_prof.institution,
                                                                                i_prof.software) || ' - ' || l_msg_date || ')'),
                                     ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                         ard.dt_target_tstz,
                                                                         i_prof.institution,
                                                                         i_prof.software) || ')'),
                              decode(ard.dt_target_tstz,
                                     ard.dt_target_tstz_new,
                                     decode(ard.dt_schedule,
                                            ard.dt_schedule_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T093') || '§' ||
                                                   decode(ard.dt_schedule,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_sysdomain.get_domain(i_lang,
                                                                                  i_prof,
                                                                                  'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                                                                  ard.flg_time_harvest,
                                                                                  NULL) || ' (' ||
                                                          pk_date_utils.date_char_tsz(i_lang,
                                                                                      ard.dt_schedule,
                                                                                      i_prof.institution,
                                                                                      i_prof.software) || ' )') ||
                                                   decode(ard.dt_schedule_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('LAB_TESTS_T168') ||
                                                          pk_sysdomain.get_domain(i_lang,
                                                                                  i_prof,
                                                                                  'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                                                                  ard.flg_time_harvest,
                                                                                  NULL) || ' (' ||
                                                          pk_date_utils.date_char_tsz(i_lang,
                                                                                      ard.dt_schedule_new,
                                                                                      i_prof.institution,
                                                                                      i_prof.software) || ')'),
                                                   decode(ard.dt_schedule,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_sysdomain.get_domain(i_lang,
                                                                                  i_prof,
                                                                                  'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                                                                  ard.flg_time_harvest,
                                                                                  NULL) || ' (' ||
                                                          pk_date_utils.date_char_tsz(i_lang,
                                                                                      ard.dt_schedule,
                                                                                      i_prof.institution,
                                                                                      i_prof.software) || ')') ||
                                                   decode(ard.dt_schedule_new,
                                                          NULL,
                                                          NULL,
                                                          '§' || pk_sysdomain.get_domain(i_lang,
                                                                                         i_prof,
                                                                                         'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                                                                         ard.flg_time_harvest,
                                                                                         NULL) || ' (' ||
                                                          pk_date_utils.date_char_tsz(i_lang,
                                                                                      ard.dt_schedule_new,
                                                                                      i_prof.institution,
                                                                                      i_prof.software) || ')'))),
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T093') || '§' ||
                                            decode(ard.dt_target_tstz,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                                                           ard.flg_time_harvest,
                                                                           NULL) || ' (' ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_target_tstz,
                                                                               i_prof.institution,
                                                                               i_prof.software) || ')') ||
                                            decode(ard.dt_target_tstz_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T168') ||
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                                                           ard.flg_time_harvest,
                                                                           NULL) || ' (' ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_target_tstz_new,
                                                                               i_prof.institution,
                                                                               i_prof.software) || ')'),
                                            decode(ard.dt_target_tstz,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                                                           ard.flg_time_harvest,
                                                                           NULL) || ' (' ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_target_tstz,
                                                                               i_prof.institution,
                                                                               i_prof.software) || ')') ||
                                            decode(ard.dt_target_tstz_new,
                                                   NULL,
                                                   NULL,
                                                   '§' || pk_sysdomain.get_domain(i_lang,
                                                                                  i_prof,
                                                                                  'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                                                                  ard.flg_time_harvest,
                                                                                  NULL) || ' (' ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_target_tstz_new,
                                                                               i_prof.institution,
                                                                               i_prof.software) || ')')))) desc_time,
                       decode(cnt,
                              rn,
                              decode(ard.dt_final_target_tstz,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T043'),
                                            '') || pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_final_target_tstz,
                                                                               i_prof.institution,
                                                                               i_prof.software)),
                              decode(ard.dt_final_target_tstz,
                                     ard.dt_final_target_tstz_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T089') || '§' ||
                                            decode(ard.dt_final_target_tstz,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_final_target_tstz,
                                                                               i_prof.institution,
                                                                               i_prof.software)) ||
                                            decode(ard.dt_final_target_tstz_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T043') ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_final_target_tstz_new,
                                                                               i_prof.institution,
                                                                               i_prof.software)),
                                            decode(ard.dt_final_target_tstz,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_final_target_tstz,
                                                                               i_prof.institution,
                                                                               i_prof.software)) ||
                                            decode(ard.dt_final_target_tstz_new,
                                                   NULL,
                                                   NULL,
                                                   '§' || pk_date_utils.date_char_tsz(i_lang,
                                                                                      ard.dt_final_target_tstz_new,
                                                                                      i_prof.institution,
                                                                                      i_prof.software))))) desc_time_limit,
                       decode(cnt,
                              rn,
                              decode(ard.id_order_recurrence,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T017'),
                                            '') ||
                                     pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang,
                                                                                           i_prof,
                                                                                           ard.id_order_recurrence)),
                              decode(ard.id_order_recurrence,
                                     ard.id_order_recurrence_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T076') || '§' ||
                                            decode(ard.id_order_recurrence,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang,
                                                                                                         i_prof,
                                                                                                         ard.id_order_recurrence)) ||
                                            decode(ard.id_order_recurrence_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T017') ||
                                                   pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang,
                                                                                                         i_prof,
                                                                                                         ard.id_order_recurrence_new)),
                                            decode(ard.id_order_recurrence,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang,
                                                                                                         i_prof,
                                                                                                         ard.id_order_recurrence)) ||
                                            decode(ard.id_order_recurrence_new,
                                                   NULL,
                                                   NULL,
                                                   '§' ||
                                                   pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang,
                                                                                                         i_prof,
                                                                                                         ard.id_order_recurrence_new))))) order_recurrence,
                       decode(cnt,
                              rn,
                              decode(ard.flg_prn,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T022'),
                                            '') ||
                                     pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_PRN', ard.flg_prn, i_lang)),
                              decode(ard.flg_prn,
                                     ard.flg_prn_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T077') || '§' ||
                                            decode(ard.flg_prn,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_PRN', ard.flg_prn, i_lang)) ||
                                            decode(ard.flg_prn_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T022') ||
                                                   pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_PRN',
                                                                           ard.flg_prn_new,
                                                                           i_lang)),
                                            decode(ard.flg_prn,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_PRN', ard.flg_prn, i_lang)) ||
                                            decode(ard.flg_prn_new,
                                                   NULL,
                                                   NULL,
                                                   '§' || pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_PRN',
                                                                                  ard.flg_prn_new,
                                                                                  i_lang))))) prn,
                       decode(cnt,
                              rn,
                              decode(ard.notes_prn,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T023'),
                                            '') || ard.notes_prn),
                              decode(ard.notes_prn,
                                     ard.notes_prn_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T078') || '§' ||
                                            decode(ard.notes_prn, NULL, l_msg_del, ard.notes_prn) ||
                                            decode(ard.notes_prn_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T023') ||
                                                   ard.notes_prn_new),
                                            decode(ard.notes_prn, NULL, l_msg_del, ard.notes_prn) ||
                                            decode(ard.notes_prn_new, NULL, NULL, '§' || ard.notes_prn_new)))) notes_prn,
                       aa_code_messages('LAB_TESTS_T024') patient_instructions,
                       decode(cnt,
                              rn,
                              decode(ard.flg_fasting,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T025'),
                                            '') ||
                                     pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_FASTING', ard.flg_fasting, i_lang)),
                              decode(ard.flg_fasting,
                                     ard.flg_fasting_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T079') || '§' ||
                                            decode(ard.flg_fasting,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_FASTING',
                                                                           ard.flg_fasting,
                                                                           i_lang)) ||
                                            decode(ard.flg_fasting_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T025') ||
                                                   pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_FASTING',
                                                                           ard.flg_fasting_new,
                                                                           i_lang)),
                                            decode(ard.flg_fasting,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_FASTING',
                                                                           ard.flg_fasting,
                                                                           i_lang)) ||
                                            decode(ard.flg_fasting_new,
                                                   NULL,
                                                   NULL,
                                                   '§' || pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_FASTING',
                                                                                  ard.flg_fasting_new,
                                                                                  i_lang))))) fasting,
                       decode(cnt,
                              rn,
                              decode(ard.notes_patient,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T026'),
                                            '') || ard.notes_patient),
                              decode(ard.notes_patient,
                                     ard.notes_patient_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T080') || '§' ||
                                            decode(ard.notes_patient, NULL, l_msg_del, ard.notes_patient) ||
                                            decode(ard.notes_patient_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T026') ||
                                                   ard.notes_patient_new),
                                            decode(ard.notes_patient, NULL, l_msg_del, ard.notes_patient) ||
                                            decode(ard.notes_patient_new, NULL, NULL, '§' || ard.notes_patient_new)))) notes_patient,
                       aa_code_messages('LAB_TESTS_T027') collection,
                       decode(cnt,
                              rn,
                              decode(ard.id_room,
                                     NULL,
                                     decode(ard.flg_col_inst,
                                            NULL,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T030'),
                                                   '') || pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_COL_INST',
                                                                                  ard.flg_col_inst,
                                                                                  i_lang)),
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T030'),
                                            '') ||
                                     nvl((SELECT r.desc_room
                                           FROM room r
                                          WHERE r.id_room = ard.id_room),
                                         pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || ard.id_room))),
                              decode(ard.id_room,
                                     NULL,
                                     decode(ard.flg_col_inst,
                                            ard.flg_col_inst_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T082') || '§' ||
                                                   decode(ard.flg_col_inst,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_COL_INST',
                                                                                  ard.flg_col_inst,
                                                                                  i_lang)) ||
                                                   decode(ard.flg_col_inst_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('LAB_TESTS_T030') ||
                                                          pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_COL_INST',
                                                                                  ard.flg_col_inst_new,
                                                                                  i_lang)),
                                                   decode(ard.flg_col_inst,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_COL_INST',
                                                                                  ard.flg_col_inst,
                                                                                  i_lang)) ||
                                                   decode(ard.flg_col_inst_new,
                                                          NULL,
                                                          NULL,
                                                          '§' || pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_COL_INST',
                                                                                         ard.flg_col_inst_new,
                                                                                         i_lang)))),
                                     decode(ard.id_room,
                                            ard.id_room_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T082') || '§' ||
                                                   decode(ard.id_room,
                                                          NULL,
                                                          l_msg_del,
                                                          nvl((SELECT r.desc_room
                                                                FROM room r
                                                               WHERE r.id_room = ard.id_room),
                                                              pk_translation.get_translation(i_lang,
                                                                                             'ROOM.CODE_ROOM.' || ard.id_room))) ||
                                                   decode(ard.id_room_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('LAB_TESTS_T030') ||
                                                          nvl((SELECT r.desc_room
                                                                FROM room r
                                                               WHERE r.id_room = ard.id_room_new),
                                                              pk_translation.get_translation(i_lang,
                                                                                             'ROOM.CODE_ROOM.' ||
                                                                                             ard.id_room_new))),
                                                   decode(ard.id_room,
                                                          NULL,
                                                          l_msg_del,
                                                          nvl((SELECT r.desc_room
                                                                FROM room r
                                                               WHERE r.id_room = ard.id_room),
                                                              pk_translation.get_translation(i_lang,
                                                                                             'ROOM.CODE_ROOM.' || ard.id_room))) ||
                                                   decode(ard.id_room_new,
                                                          NULL,
                                                          NULL,
                                                          '§' || nvl((SELECT r.desc_room
                                                                       FROM room r
                                                                      WHERE r.id_room = ard.id_room_new),
                                                                     pk_translation.get_translation(i_lang,
                                                                                                    'ROOM.CODE_ROOM.' ||
                                                                                                    ard.id_room_new))))))) collection_location,
                       decode(cnt,
                              rn,
                              decode(ard.notes_scheduler,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T032'),
                                            '') || ard.notes_scheduler),
                              decode(ard.notes_scheduler,
                                     ard.notes_scheduler_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T084') || '§' ||
                                            decode(ard.notes_scheduler, NULL, l_msg_del, ard.notes_scheduler) ||
                                            decode(ard.notes_scheduler_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T032') ||
                                                   ard.notes_scheduler_new),
                                            decode(ard.notes_scheduler, NULL, l_msg_del, ard.notes_scheduler) ||
                                            decode(ard.notes_scheduler_new, NULL, NULL, '§' || ard.notes_scheduler_new)))) notes_scheduler,
                       aa_code_messages('LAB_TESTS_T031') execution,
                       decode(cnt,
                              rn,
                              decode(ard.id_exec_institution,
                                     NULL,
                                     decode(ard.id_room_req,
                                            NULL,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T028'),
                                                   '') ||
                                            nvl((SELECT r.desc_room
                                                  FROM room r
                                                 WHERE r.id_room = ard.id_room_req),
                                                pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || ard.id_room_req))),
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T028'),
                                            '') || pk_translation.get_translation(i_lang,
                                                                                  'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                  ard.id_exec_institution)),
                              decode(ard.id_exec_institution,
                                     NULL,
                                     decode(ard.id_room_req,
                                            ard.id_room_req_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T081') || '§' ||
                                                   decode(ard.id_room_req,
                                                          NULL,
                                                          l_msg_del,
                                                          nvl((SELECT r.desc_room
                                                                FROM room r
                                                               WHERE r.id_room = ard.id_room_req),
                                                              pk_translation.get_translation(i_lang,
                                                                                             'ROOM.CODE_ROOM.' ||
                                                                                             ard.id_room_req))) ||
                                                   decode(ard.id_room_req_new,
                                                          NULL,
                                                          decode(ard.id_exec_institution_new,
                                                                 NULL,
                                                                 NULL,
                                                                 l_formated_text || aa_code_messages('LAB_TESTS_T028') ||
                                                                 pk_translation.get_translation(i_lang,
                                                                                                'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                                ard.id_exec_institution_new)),
                                                          l_formated_text || aa_code_messages('LAB_TESTS_T028') ||
                                                          nvl((SELECT r.desc_room
                                                                FROM room r
                                                               WHERE r.id_room = ard.id_room_req_new),
                                                              pk_translation.get_translation(i_lang,
                                                                                             'ROOM.CODE_ROOM.' ||
                                                                                             ard.id_room_req_new))),
                                                   decode(ard.id_room_req,
                                                          NULL,
                                                          l_msg_del,
                                                          nvl((SELECT r.desc_room
                                                                FROM room r
                                                               WHERE r.id_room = ard.id_room_req),
                                                              pk_translation.get_translation(i_lang,
                                                                                             'ROOM.CODE_ROOM.' ||
                                                                                             ard.id_room_req))) ||
                                                   decode(ard.id_room_req_new,
                                                          NULL,
                                                          decode(ard.id_exec_institution_new,
                                                                 NULL,
                                                                 NULL,
                                                                 l_formated_text || aa_code_messages('LAB_TESTS_T028') ||
                                                                 pk_translation.get_translation(i_lang,
                                                                                                'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                                ard.id_exec_institution_new)),
                                                          '§' ||
                                                          nvl((SELECT r.desc_room
                                                                FROM room r
                                                               WHERE r.id_room = ard.id_room_req_new),
                                                              pk_translation.get_translation(i_lang,
                                                                                             'ROOM.CODE_ROOM.' ||
                                                                                             ard.id_room_req_new))))),
                                     decode(ard.id_exec_institution,
                                            ard.id_exec_institution_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T081') || '§' ||
                                                   decode(ard.id_exec_institution,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_translation.get_translation(i_lang,
                                                                                         'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                         ard.id_exec_institution)) ||
                                                   decode(ard.id_exec_institution_new,
                                                          NULL,
                                                          decode(ard.id_room_req_new,
                                                                 NULL,
                                                                 NULL,
                                                                 l_formated_text || aa_code_messages('LAB_TESTS_T028') ||
                                                                 nvl((SELECT r.desc_room
                                                                       FROM room r
                                                                      WHERE r.id_room = ard.id_room_req_new),
                                                                     pk_translation.get_translation(i_lang,
                                                                                                    'ROOM.CODE_ROOM.' ||
                                                                                                    ard.id_room_req_new))),
                                                          l_formated_text || aa_code_messages('LAB_TESTS_T028') ||
                                                          pk_translation.get_translation(i_lang,
                                                                                         'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                         ard.id_exec_institution_new)),
                                                   decode(ard.id_exec_institution,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_translation.get_translation(i_lang,
                                                                                         'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                         ard.id_exec_institution)) ||
                                                   decode(ard.id_exec_institution_new,
                                                          NULL,
                                                          decode(ard.id_room_req_new,
                                                                 NULL,
                                                                 NULL,
                                                                 l_formated_text || aa_code_messages('LAB_TESTS_T028') ||
                                                                 nvl((SELECT r.desc_room
                                                                       FROM room r
                                                                      WHERE r.id_room = ard.id_room_req_new),
                                                                     pk_translation.get_translation(i_lang,
                                                                                                    'ROOM.CODE_ROOM.' ||
                                                                                                    ard.id_room_req_new))),
                                                          '§' ||
                                                          pk_translation.get_translation(i_lang,
                                                                                         'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                         ard.id_exec_institution_new)))))) perform_location,
                       decode(cnt,
                              rn,
                              decode(ard.notes_tech,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T033'),
                                            '') || ard.notes_tech),
                              decode(ard.notes_tech,
                                     ard.notes_tech_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T085') || '§' ||
                                            decode(ard.notes_tech, NULL, l_msg_del, ard.notes_tech) ||
                                            decode(ard.notes_tech_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T033') ||
                                                   ard.notes_tech_new),
                                            decode(ard.notes_tech, NULL, l_msg_del, ard.notes_tech) ||
                                            decode(ard.notes_tech_new, NULL, NULL, '§' || ard.notes_tech_new)))) notes_technician,
                       decode(cnt,
                              rn,
                              decode(ard.notes,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T229'),
                                            '') || ard.notes),
                              decode(ard.notes,
                                     ard.notes_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T230') || '§' ||
                                            decode(ard.notes, NULL, l_msg_del, ard.notes) ||
                                            decode(ard.notes_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T229') || ard.notes_new),
                                            decode(ard.notes, NULL, l_msg_del, ard.notes) ||
                                            decode(ard.notes_new, NULL, NULL, '§' || ard.notes_new)))) notes,
                       aa_code_messages('LAB_TESTS_T199') results,
                       NULL prof_cc,
                       NULL prof_bcc,
                       aa_code_messages('LAB_TESTS_T038') co_sign,
                       decode(cnt,
                              rn,
                              decode(ard.prof_ordered_by,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T053'),
                                            '') || ard.prof_ordered_by),
                              decode(ard.prof_ordered_by,
                                     ard.prof_ordered_by_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T095') || '§' ||
                                            decode(ard.prof_ordered_by, NULL, l_msg_del, ard.prof_ordered_by) ||
                                            decode(ard.prof_ordered_by_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T053') ||
                                                   ard.prof_ordered_by_new),
                                            decode(ard.prof_ordered_by, NULL, l_msg_del, ard.prof_ordered_by) ||
                                            decode(ard.prof_ordered_by_new, NULL, NULL, '§' || ard.prof_ordered_by_new)))) prof_order,
                       decode(cnt,
                              rn,
                              decode(ard.dt_ordered_by,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T054'),
                                            '') || pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_ordered_by,
                                                                               i_prof.institution,
                                                                               i_prof.software)),
                              decode(ard.dt_ordered_by,
                                     ard.dt_ordered_by_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T096') || '§' ||
                                            decode(ard.dt_ordered_by,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_ordered_by,
                                                                               i_prof.institution,
                                                                               i_prof.software)) ||
                                            decode(ard.dt_ordered_by_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T054') ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_ordered_by_new,
                                                                               i_prof.institution,
                                                                               i_prof.software)),
                                            decode(ard.dt_ordered_by,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_ordered_by,
                                                                               i_prof.institution,
                                                                               i_prof.software)) ||
                                            decode(ard.dt_ordered_by_new,
                                                   NULL,
                                                   NULL,
                                                   '§' || pk_date_utils.date_char_tsz(i_lang,
                                                                                      ard.dt_ordered_by_new,
                                                                                      i_prof.institution,
                                                                                      i_prof.software))))) dt_order,
                       decode(cnt,
                              rn,
                              decode(ard.id_order_type,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T055'),
                                            '') || ard.desc_order_type),
                              decode(ard.id_order_type,
                                     ard.id_order_type_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T097') || '§' ||
                                            decode(ard.id_order_type, NULL, l_msg_del, ard.desc_order_type) ||
                                            decode(ard.id_order_type_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T055') ||
                                                   ard.desc_order_type_new),
                                            decode(ard.id_order_type, NULL, l_msg_del, ard.desc_order_type) ||
                                            decode(ard.id_order_type_new, NULL, NULL, '§' || ard.desc_order_type_new)))) order_type,
                       NULL co_sign_status,
                       aa_code_messages('LAB_TESTS_T034') health_insurance,
                       decode(l_health_insurance,
                              pk_lab_tests_constant.g_no,
                              NULL,
                              decode(cnt,
                                     rn,
                                     decode(ard.id_pat_health_plan,
                                            NULL,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T035'),
                                                   '') ||
                                            pk_adt.get_pat_health_plan_info(i_lang, i_prof, ard.id_pat_health_plan, 'F')),
                                     decode(ard.id_pat_health_plan,
                                            ard.id_pat_health_plan_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T086') || '§' ||
                                                   decode(ard.id_pat_health_plan,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          ard.id_pat_health_plan,
                                                                                          'F')) ||
                                                   decode(ard.id_pat_health_plan_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('LAB_TESTS_T035') ||
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          ard.id_pat_health_plan_new,
                                                                                          'F')),
                                                   decode(ard.id_pat_health_plan,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          ard.id_pat_health_plan,
                                                                                          'F')) ||
                                                   decode(ard.id_pat_health_plan_new,
                                                          NULL,
                                                          NULL,
                                                          '§' || pk_adt.get_pat_health_plan_info(i_lang,
                                                                                                 i_prof,
                                                                                                 ard.id_pat_health_plan_new,
                                                                                                 'F')))))) financial_entity,
                       decode(l_health_insurance,
                              pk_lab_tests_constant.g_no,
                              NULL,
                              decode(cnt,
                                     rn,
                                     decode(ard.id_pat_health_plan,
                                            NULL,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T036'),
                                                   '') ||
                                            pk_adt.get_pat_health_plan_info(i_lang, i_prof, ard.id_pat_health_plan, 'H')),
                                     decode(ard.id_pat_health_plan,
                                            ard.id_pat_health_plan_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T087') || '§' ||
                                                   decode(ard.id_pat_health_plan,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          ard.id_pat_health_plan,
                                                                                          'H')) ||
                                                   decode(ard.id_pat_health_plan_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('LAB_TESTS_T036') ||
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          ard.id_pat_health_plan_new,
                                                                                          'H')),
                                                   decode(ard.id_pat_health_plan,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          ard.id_pat_health_plan,
                                                                                          'H')) ||
                                                   decode(ard.id_pat_health_plan_new,
                                                          NULL,
                                                          NULL,
                                                          '§' || pk_adt.get_pat_health_plan_info(i_lang,
                                                                                                 i_prof,
                                                                                                 ard.id_pat_health_plan_new,
                                                                                                 'H')))))) health_plan,
                       decode(l_health_insurance,
                              pk_lab_tests_constant.g_no,
                              NULL,
                              decode(cnt,
                                     rn,
                                     decode(ard.id_pat_health_plan,
                                            NULL,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T037'),
                                                   '') ||
                                            pk_adt.get_pat_health_plan_info(i_lang, i_prof, ard.id_pat_health_plan, 'N')),
                                     decode(ard.id_pat_health_plan,
                                            ard.id_pat_health_plan_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T088') || '§' ||
                                                   decode(ard.id_pat_health_plan,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          ard.id_pat_health_plan,
                                                                                          'N')) ||
                                                   decode(ard.id_pat_health_plan_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('LAB_TESTS_T037') ||
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          ard.id_pat_health_plan_new,
                                                                                          'N')),
                                                   decode(ard.id_pat_health_plan,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          ard.id_pat_health_plan,
                                                                                          'N')) ||
                                                   decode(ard.id_pat_health_plan_new,
                                                          NULL,
                                                          NULL,
                                                          '§' || pk_adt.get_pat_health_plan_info(i_lang,
                                                                                                 i_prof,
                                                                                                 ard.id_pat_health_plan_new,
                                                                                                 'N')))))) insurance_number,
                       decode(l_health_insurance,
                              pk_lab_tests_constant.g_no,
                              NULL,
                              decode(cnt,
                                     rn,
                                     decode(ard.id_pat_exemption,
                                            NULL,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T185'),
                                                   '') ||
                                            pk_adt.get_pat_exemption_detail(i_lang, i_prof, ard.id_pat_exemption)),
                                     decode(ard.id_pat_exemption,
                                            ard.id_pat_exemption_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_lab_tests_constant.g_no,
                                                   aa_code_messages('LAB_TESTS_T186') || '§' ||
                                                   decode(ard.id_pat_exemption,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_exemption_detail(i_lang,
                                                                                          i_prof,
                                                                                          ard.id_pat_exemption)) ||
                                                   decode(ard.id_pat_exemption_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('LAB_TESTS_T185') ||
                                                          pk_adt.get_pat_exemption_detail(i_lang,
                                                                                          i_prof,
                                                                                          ard.id_pat_exemption_new)),
                                                   decode(ard.id_pat_exemption,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_exemption_detail(i_lang,
                                                                                          i_prof,
                                                                                          ard.id_pat_exemption)) ||
                                                   decode(ard.id_pat_exemption_new,
                                                          NULL,
                                                          NULL,
                                                          '§' ||
                                                          pk_adt.get_pat_exemption_detail(i_lang,
                                                                                          i_prof,
                                                                                          ard.id_pat_exemption_new)))))) exemption,
                       CASE
                            WHEN ard.flg_status = pk_lab_tests_constant.g_analysis_read
                                 AND ard.id_cancel_reason IS NOT NULL THEN
                             aa_code_messages('COMMON_M035')
                            ELSE
                             aa_code_messages('LAB_TESTS_T227')
                        END cancellation,
                       decode(cnt,
                               rn,
                               NULL,
                               decode(ard.id_cancel_reason,
                                      ard.id_cancel_reason_new,
                                      NULL,
                                      decode(i_flg_report,
                                             pk_lab_tests_constant.g_no,
                                             (CASE
                                                 WHEN ard.flg_status = pk_lab_tests_constant.g_analysis_read
                                                      AND ard.id_cancel_reason IS NOT NULL THEN
                                                  aa_code_messages('LAB_TESTS_T237')
                                                 ELSE
                                                  aa_code_messages('LAB_TESTS_T062')
                                             END) || '§' ||
                                             decode(ard.id_cancel_reason,
                                                    NULL,
                                                    l_msg_del,
                                                    pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                            i_prof,
                                                                                            ard.id_cancel_reason)) ||
                                             decode(ard.id_cancel_reason_new,
                                                    NULL,
                                                    NULL,
                                                    l_formated_text || (CASE
                                                        WHEN ard.flg_status = pk_lab_tests_constant.g_analysis_read
                                                             AND ard.id_cancel_reason IS NOT NULL THEN
                                                         aa_code_messages('LAB_TESTS_T237')
                                                        ELSE
                                                         aa_code_messages('LAB_TESTS_T062')
                                                    END) ||
                                                    pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                            i_prof,
                                                                                            ard.id_cancel_reason_new)),
                                             decode(ard.id_cancel_reason,
                                                    NULL,
                                                    l_msg_del,
                                                    pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                            i_prof,
                                                                                            ard.id_cancel_reason)) ||
                                             decode(ard.id_cancel_reason_new,
                                                    NULL,
                                                    NULL,
                                                    '§' ||
                                                    pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                            i_prof,
                                                                                            ard.id_cancel_reason_new))))) cancel_reason,
                       decode(cnt,
                              rn,
                              NULL,
                              decode(ard.notes_cancel,
                                     ard.notes_cancel_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T061') || '§' ||
                                            decode(ard.notes_cancel, NULL, l_msg_del, ard.notes_cancel) ||
                                            decode(ard.notes_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T061') ||
                                                   ard.notes_cancel_new),
                                            decode(ard.notes_cancel, NULL, l_msg_del, ard.notes_cancel) ||
                                            decode(ard.notes_cancel_new, NULL, NULL, '§' || ard.notes_cancel_new)))) cancel_notes,
                       decode(cnt,
                              rn,
                              NULL,
                              decode(ard.prof_ordered_by_cancel,
                                     ard.prof_ordered_by_cancel_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T095') || '§' ||
                                            decode(ard.prof_ordered_by_cancel, NULL, l_msg_del, ard.prof_ordered_by_cancel) ||
                                            decode(ard.prof_ordered_by_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T053') ||
                                                   ard.prof_ordered_by_cancel_new),
                                            decode(ard.prof_ordered_by_cancel, NULL, l_msg_del, ard.prof_ordered_by_cancel) ||
                                            decode(ard.prof_ordered_by_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   '§' || ard.prof_ordered_by_cancel_new)))) cancel_prof_order,
                       decode(cnt,
                              rn,
                              NULL,
                              decode(ard.dt_ordered_cancel,
                                     ard.dt_ordered_cancel_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T096') || '§' ||
                                            decode(ard.dt_ordered_cancel,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_ordered_cancel,
                                                                               i_prof.institution,
                                                                               i_prof.software)) ||
                                            decode(ard.dt_ordered_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T054') ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_ordered_cancel_new,
                                                                               i_prof.institution,
                                                                               i_prof.software)),
                                            decode(ard.dt_ordered_cancel,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               ard.dt_ordered_cancel,
                                                                               i_prof.institution,
                                                                               i_prof.software)) ||
                                            decode(ard.dt_ordered_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   '§' || pk_date_utils.date_char_tsz(i_lang,
                                                                                      ard.dt_ordered_cancel_new,
                                                                                      i_prof.institution,
                                                                                      i_prof.software))))) cancel_dt_order,
                       decode(cnt,
                              rn,
                              NULL,
                              decode(ard.id_order_type_cancel,
                                     ard.id_order_type_cancel_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_lab_tests_constant.g_no,
                                            aa_code_messages('LAB_TESTS_T097') || '§' ||
                                            decode(ard.id_order_type_cancel, NULL, l_msg_del, ard.desc_order_type_cancel) ||
                                            decode(ard.id_order_type_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('LAB_TESTS_T055') ||
                                                   ard.desc_order_type_cancel_new),
                                            decode(ard.id_order_type_cancel, NULL, l_msg_del, ard.desc_order_type_cancel) ||
                                            decode(ard.id_order_type_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   '§' || ard.desc_order_type_cancel_new)))) cancel_order_type,
                       ard.dt_last_update,
                       pk_date_utils.date_send_tsz(i_lang,
                                                   coalesce(ard.dt_cancel_tstz, ard.dt_last_update_tstz, ar.dt_req_tstz),
                                                   i_prof) dt_ord
                  FROM (SELECT row_number() over(ORDER BY t.dt_analysis_req_det_hist DESC NULLS FIRST) rn,
                               COUNT(1) over() cnt,
                               t.dt_analysis_req_det_hist,
                               t.id_analysis_req_det,
                               first_value(t.id_analysis_req_det) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_analysis_req_det_new,
                               t.id_analysis,
                               first_value(t.id_analysis) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_analysis_new,
                               t.id_sample_type,
                               first_value(t.id_sample_type) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_sample_type_new,
                               t.id_analysis_req,
                               first_value(t.id_analysis_req) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_analysis_req_new,
                               t.dt_last_update dt_last_update,
                               t.flg_status,
                               first_value(t.flg_status) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_status_new,
                               t.notes,
                               first_value(t.notes) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_new,
                               t.id_movement,
                               first_value(t.id_movement) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_movement_new,
                               t.id_prof_cancel,
                               first_value(t.id_prof_cancel) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_cancel_new,
                               t.notes_cancel,
                               first_value(t.notes_cancel) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_cancel_new,
                               t.id_room,
                               first_value(t.id_room) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_room_new,
                               t.notes_tech,
                               first_value(t.notes_tech) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_tech_new,
                               t.dt_target_tstz,
                               first_value(t.dt_target_tstz) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_target_tstz_new,
                               t.dt_final_target_tstz,
                               first_value(t.dt_final_target_tstz) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_final_target_tstz_new,
                               t.dt_cancel_tstz,
                               first_value(t.dt_cancel_tstz) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_cancel_tstz_new,
                               t.flg_time_harvest,
                               first_value(t.flg_time_harvest) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_time_harvest_new,
                               t.flg_urgency,
                               first_value(t.flg_urgency) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_urgency_new,
                               t.flg_fasting,
                               first_value(t.flg_fasting) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_fasting_new,
                               t.flg_col_inst,
                               first_value(t.flg_col_inst) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_col_inst_new,
                               t.id_room_req,
                               first_value(t.id_room_req) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_room_req_new,
                               t.id_analysis_group,
                               first_value(t.id_analysis_group) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_analysis_group_new,
                               t.flg_referral,
                               first_value(t.flg_referral) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_referral_new,
                               t.id_prof_last_update,
                               first_value(t.id_prof_last_update) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_last_update_new,
                               t.dt_last_update_tstz,
                               first_value(t.dt_last_update_tstz) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_last_update_tstz_new,
                               t.id_diagnosis_list,
                               first_value(t.id_diagnosis_list) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_diagnosis_list_new,
                               t.id_cancel_reason,
                               first_value(t.id_cancel_reason) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_cancel_reason_new,
                               t.id_exec_institution,
                               first_value(t.id_exec_institution) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_exec_institution_new,
                               t.id_task_dependency,
                               first_value(t.id_task_dependency) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_task_dependency_new,
                               t.flg_req_origin_module,
                               first_value(t.flg_req_origin_module) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_req_origin_module_new,
                               t.id_clinical_purpose,
                               first_value(t.id_clinical_purpose) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_clinical_purpose_new,
                               t.clinical_purpose_notes,
                               first_value(t.clinical_purpose_notes) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) clinical_purpose_notes_new,
                               dbms_lob.substr(t.notes_patient, 3800) notes_patient,
                               first_value(dbms_lob.substr(t.notes_patient, 3800)) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_patient_new,
                               t.dt_schedule,
                               first_value(t.dt_schedule) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_schedule_new,
                               t.id_order_recurrence,
                               first_value(t.id_order_recurrence) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_order_recurrence_new,
                               t.flg_prn,
                               first_value(t.flg_prn) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_prn_new,
                               dbms_lob.substr(t.notes_prn, 3800) notes_prn,
                               first_value(dbms_lob.substr(t.notes_prn, 3800)) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_prn_new,
                               t.id_pat_health_plan,
                               first_value(t.id_pat_health_plan) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_pat_health_plan_new,
                               t.id_pat_exemption,
                               first_value(t.id_pat_exemption) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_pat_exemption_new,
                               t.id_cdr,
                               first_value(t.id_cdr) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_cdr_new,
                               t.id_prof_ordered_by,
                               first_value(t.id_prof_ordered_by) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_ordered_by_new,
                               t.prof_ordered_by,
                               first_value(t.prof_ordered_by) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) prof_ordered_by_new,
                               t.dt_ordered_by,
                               first_value(t.dt_ordered_by) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_ordered_by_new,
                               t.id_order_type,
                               first_value(t.id_order_type) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_order_type_new,
                               desc_order_type,
                               first_value(t.desc_order_type) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) desc_order_type_new,
                               t.id_prof_ordered_by_cancel,
                               first_value(t.id_prof_ordered_by_cancel) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_ordered_by_cancel_new,
                               t.prof_ordered_by_cancel,
                               first_value(t.prof_ordered_by_cancel) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) prof_ordered_by_cancel_new,
                               t.dt_ordered_cancel,
                               first_value(t.dt_ordered_cancel) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_ordered_cancel_new,
                               t.id_order_type_cancel,
                               first_value(t.id_order_type_cancel) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_order_type_cancel_new,
                               t.desc_order_type_cancel,
                               first_value(t.desc_order_type_cancel) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) desc_order_type_cancel_new,
                               t.notes_scheduler,
                               first_value(t.notes_scheduler) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_scheduler_new,
                               t.diagnosis_notes,
                               first_value(t.diagnosis_notes) over(ORDER BY dt_analysis_req_det_hist rows BETWEEN 1 preceding AND CURRENT ROW) diagnosis_notes_new
                          FROM (SELECT /*+ opt_estimate(table cso rows=1) opt_estimate(table csc rows=2) */
                                 NULL dt_analysis_req_det_hist,
                                 ard.id_analysis_req_det,
                                 ard.id_analysis,
                                 ard.id_sample_type,
                                 ard.id_analysis_req,
                                 ard.id_ard_parent,
                                 ard.flg_status,
                                 ard.notes,
                                 ard.id_movement,
                                 ard.flg_pre_req,
                                 ard.id_prof_cancel,
                                 ard.notes_cancel,
                                 ard.id_room,
                                 ard.notes_tech,
                                 ard.barcode,
                                 pk_date_utils.date_send_tsz(i_lang, ard.dt_last_update_tstz, i_prof) dt_last_update,
                                 ard.dt_target_tstz,
                                 ard.dt_final_target_tstz,
                                 ard.dt_final_result_tstz,
                                 ard.dt_cancel_tstz,
                                 ard.notes_justify,
                                 ard.flg_time_harvest,
                                 ard.dt_begin_harvest,
                                 ard.flg_exec_result,
                                 ard.dt_begin_result,
                                 ard.flg_urgency,
                                 ard.flg_fasting,
                                 ard.flg_col_inst,
                                 ard.id_exam_cat,
                                 ard.id_episode_origin,
                                 ard.id_episode_destination,
                                 ard.dt_pend_req_tstz,
                                 ard.id_room_req,
                                 ard.id_analysis_group,
                                 ard.flg_referral,
                                 ard.id_prof_last_update,
                                 ard.dt_last_update_tstz,
                                 pk_utils.concat_table(CAST(MULTISET
                                                            (SELECT mrd.id_mcdt_req_diagnosis
                                                               FROM mcdt_req_diagnosis mrd
                                                              WHERE mrd.id_analysis_req_det = ard.id_analysis_req_det
                                                                AND nvl(mrd.flg_status, '@') != 'C') AS table_number),
                                                       ';') id_diagnosis_list,
                                 ard.id_cancel_reason,
                                 ard.id_analysis_codification,
                                 ard.id_exec_institution,
                                 ard.id_task_dependency,
                                 ard.flg_req_origin_module,
                                 ard.id_clinical_purpose,
                                 ard.clinical_purpose_notes,
                                 ard.notes_patient,
                                 ard.dt_schedule,
                                 ard.id_order_recurrence,
                                 ard.flg_prn,
                                 ard.notes_prn,
                                 ard.id_pat_health_plan,
                                 ard.id_pat_exemption,
                                 ard.id_cdr,
                                 cso.id_prof_ordered_by,
                                 cso.desc_prof_ordered_by prof_ordered_by,
                                 cso.dt_ordered_by,
                                 cso.id_order_type,
                                 cso.desc_order_type,
                                 csc.id_prof_ordered_by id_prof_ordered_by_cancel,
                                 csc.desc_prof_ordered_by prof_ordered_by_cancel,
                                 csc.dt_ordered_by dt_ordered_cancel,
                                 csc.id_order_type id_order_type_cancel,
                                 csc.desc_order_type desc_order_type_cancel,
                                 ard.notes_scheduler,
                                 ard.diagnosis_notes
                                  FROM analysis_req_det ard, cso_table cso, cso_table csc
                                 WHERE ard.id_analysis_req_det = i_analysis_req_det
                                   AND ard.id_co_sign_order = cso.id_co_sign_hist(+)
                                   AND ard.id_co_sign_cancel = csc.id_co_sign_hist(+)
                                UNION ALL
                                SELECT /*+ opt_estimate(table cso rows=1) opt_estimate(table csc rows=2) */
                                 ardh.dt_analysis_req_det_hist,
                                 ardh.id_analysis_req_det,
                                 ardh.id_analysis,
                                 ardh.id_sample_type,
                                 ardh.id_analysis_req,
                                 ardh.id_ard_parent,
                                 ardh.flg_status,
                                 ardh.notes,
                                 ardh.id_movement,
                                 ardh.flg_pre_req,
                                 ardh.id_prof_cancel,
                                 ardh.notes_cancel,
                                 ardh.id_room,
                                 ardh.notes_tech,
                                 ardh.barcode,
                                 pk_date_utils.date_send_tsz(i_lang, ardh.dt_last_update_tstz, i_prof) dt_last_update,
                                 ardh.dt_target_tstz,
                                 ardh.dt_final_target_tstz,
                                 ardh.dt_final_result_tstz,
                                 ardh.dt_cancel_tstz,
                                 ardh.notes_justify,
                                 ardh.flg_time_harvest,
                                 ardh.dt_begin_harvest,
                                 ardh.flg_exec_result,
                                 ardh.dt_begin_result,
                                 ardh.flg_urgency,
                                 ardh.flg_fasting,
                                 ardh.flg_col_inst,
                                 ardh.id_exam_cat,
                                 ardh.id_episode_origin,
                                 ardh.id_episode_destination,
                                 ardh.dt_pend_req_tstz,
                                 ardh.id_room_req,
                                 ardh.id_analysis_group,
                                 ardh.flg_referral,
                                 ardh.id_prof_last_update,
                                 ardh.dt_last_update_tstz,
                                 ardh.id_diagnosis_list,
                                 ardh.id_cancel_reason,
                                 ardh.id_analysis_codification,
                                 ardh.id_exec_institution,
                                 ardh.id_task_dependency,
                                 ardh.flg_req_origin_module,
                                 ardh.id_clinical_purpose,
                                 ardh.clinical_purpose_notes,
                                 ardh.notes_patient,
                                 ardh.dt_schedule,
                                 ardh.id_order_recurrence,
                                 ardh.flg_prn,
                                 ardh.notes_prn,
                                 ardh.id_pat_health_plan,
                                 ardh.id_pat_exemption,
                                 ardh.id_cdr,
                                 cso.id_prof_ordered_by,
                                 cso.desc_prof_ordered_by prof_ordered_by,
                                 cso.dt_ordered_by,
                                 cso.id_order_type,
                                 cso.desc_order_type,
                                 csc.id_prof_ordered_by id_prof_ordered_by_cancel,
                                 csc.desc_prof_ordered_by prof_ordered_by_cancel,
                                 csc.dt_ordered_by dt_ordered_cancel,
                                 csc.id_order_type id_order_type_cancel,
                                 csc.desc_order_type desc_order_type_cancel,
                                 ardh.notes_scheduler,
                                 ardh.diagnosis_notes
                                  FROM analysis_req_det_hist ardh, cso_table cso, cso_table csc
                                 WHERE ardh.id_analysis_req_det = i_analysis_req_det
                                   AND ardh.id_co_sign_order = cso.id_co_sign_hist(+)
                                   AND ardh.id_co_sign_cancel = csc.id_co_sign_hist(+)
                                   AND ardh.flg_status != pk_lab_tests_constant.g_analysis_draft
                                 ORDER BY dt_analysis_req_det_hist DESC NULLS FIRST) t
                         ORDER BY rn) ard,
                       analysis_req ar
                 WHERE ard.id_analysis_req = ar.id_analysis_req);
    
        g_error := 'OPEN O_LAB_TEST_CO_SIGN';
        OPEN o_lab_test_co_sign FOR
            WITH cso_table AS
             (SELECT *
                FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                    i_prof,
                                                                    i_episode,
                                                                    NULL,
                                                                    NULL,
                                                                    NULL,
                                                                    i_analysis_req_det)))
            SELECT id_analysis_req_det, registry, flg_status, co_sign_notes
              FROM (SELECT i_analysis_req_det id_analysis_req_det,
                           l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, cs.id_prof_co_signed) ||
                           decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                   i_prof,
                                                                   cs.id_prof_co_signed,
                                                                   cs.dt_co_signed,
                                                                   cs.id_episode),
                                  NULL,
                                  '; ',
                                  ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                           i_prof,
                                                                           cs.id_prof_co_signed,
                                                                           cs.dt_co_signed,
                                                                           cs.id_episode) || '); ') ||
                           pk_date_utils.date_char_tsz(i_lang, cs.dt_co_signed, i_prof.institution, i_prof.software) registry,
                           decode(pk_co_sign.get_id_action(pk_co_sign_api.g_cosign_action_def_add, NULL),
                                  cs.id_action,
                                  pk_lab_tests_constant.g_analysis_req,
                                  pk_lab_tests_constant.g_analysis_cancel) flg_status,
                           decode(dbms_lob.getlength(cs.co_sign_notes),
                                  NULL,
                                  to_clob(''),
                                  0,
                                  to_clob(''),
                                  decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T059'), '') ||
                                  cs.co_sign_notes) co_sign_notes,
                           row_number() over(PARTITION BY cs.id_action ORDER BY cs.dt_created DESC NULLS FIRST) rn
                      FROM cso_table cs
                     WHERE cs.flg_status = pk_co_sign_api.g_cosign_flg_status_cs)
             WHERE rn = 1;
    
        SELECT t_lab_tests_cq(id_analysis_req_det,
                              id_content,
                              flg_time,
                              desc_clinical_question,
                              NULL,
                              dt_last_update,
                              num_clinical_question,
                              rn)
          BULK COLLECT
          INTO o_lab_test_clinical_questions
          FROM (SELECT id_analysis_req_det,
                       id_content,
                       flg_time,
                       desc_clinical_question,
                       dt_last_update,
                       num_clinical_question,
                       rn
                  FROM (SELECT t.id_analysis_req_det,
                               t.id_content,
                               t.flg_time,
                               decode(i_flg_report, pk_lab_tests_constant.g_no, t.desc_clinical_question, NULL) desc_clinical_question,
                               t.dt_last_update,
                               row_number() over(PARTITION BY t.id_analysis_req_det, t.current_rownum ORDER BY t.current_rownum DESC) + 1 num_clinical_question,
                               t.current_rownum rn
                          FROM (SELECT aqr.id_analysis_req_det,
                                       q.id_content,
                                       aqr.flg_time,
                                       decode(i_flg_report,
                                               pk_lab_tests_constant.g_no,
                                               CASE
                                                   WHEN aqr.previous_rownum IS NULL THEN
                                                    '<b>' || chr(9) || ' ' ||
                                                    pk_translation.get_translation(i_lang, q.code_questionnaire) || ':</b> ' || CASE
                                                        WHEN aqr.current_questionnaire IS NULL THEN
                                                         '---'
                                                        ELSE
                                                         to_char(aqr.current_questionnaire)
                                                    END
                                                   WHEN aqr.flg_new = pk_lab_tests_constant.g_yes THEN
                                                    '<b>' || chr(9) || ' ' ||
                                                    pk_translation.get_translation(i_lang, q.code_questionnaire) || ' ' ||
                                                    lower(pk_message.get_message(i_lang, i_prof, 'LAB_TESTS_T236')) || '</b>' || '§' || CASE
                                                        WHEN aqr.current_questionnaire IS NULL THEN
                                                         '---'
                                                        ELSE
                                                         to_char(aqr.current_questionnaire)
                                                    END || chr(10) || '<b>' || chr(9) || ' ' ||
                                                    pk_translation.get_translation(i_lang, q.code_questionnaire) || ':</b> ' || CASE
                                                        WHEN aqr.previous_questionnaire IS NULL THEN
                                                         '---'
                                                        ELSE
                                                         to_char(aqr.previous_questionnaire)
                                                    END
                                                   ELSE --when the answer has not been changed => show nontheless
                                                    '<b>' || chr(9) || ' ' ||
                                                    pk_translation.get_translation(i_lang, q.code_questionnaire) || ':</b> ' || CASE
                                                        WHEN aqr.previous_questionnaire IS NULL THEN
                                                         '---'
                                                        ELSE
                                                         to_char(aqr.previous_questionnaire)
                                                    END
                                               END,
                                               NULL) desc_clinical_question,
                                       aqr.current_rownum current_rownum,
                                       aqr.id_questionnaire,
                                       aqr.dt_last_update,
                                       rank
                                  FROM (SELECT erd1.id_questionnaire id_questionnaire,
                                               erd1.id_analysis_req_det,
                                               erd1.notes current_questionnaire,
                                               erd1.flg_time,
                                               erd1.dt_last_update_tstz,
                                               erd1.rn current_rownum,
                                               erd2.notes previous_questionnaire,
                                               erd2.rn previous_rownum,
                                               erd1.dt_last_update,
                                               CASE
                                                    WHEN erd2.rn IS NULL THEN
                                                     pk_lab_tests_constant.g_yes
                                                    WHEN to_char(erd1.notes) IS NULL
                                                         AND to_char(erd2.notes) IS NULL THEN
                                                     pk_lab_tests_constant.g_no
                                                    WHEN to_char(erd1.notes) = to_char(erd2.notes) THEN
                                                     pk_lab_tests_constant.g_no
                                                    ELSE
                                                     pk_lab_tests_constant.g_yes
                                                END flg_new,
                                               pk_lab_tests_utils.get_lab_test_question_rank(i_lang,
                                                                                             i_prof,
                                                                                             id_analysis,
                                                                                             erd1.id_sample_type,
                                                                                             erd1.id_questionnaire,
                                                                                             erd1.flg_time) rank
                                          FROM (SELECT id_questionnaire,
                                                       id_analysis_req_det,
                                                       id_sample_type,
                                                       notes,
                                                       flg_time,
                                                       dt_last_update_tstz,
                                                       row_number() over(PARTITION BY id_questionnaire ORDER BY id_questionnaire ASC, dt_last_update_tstz DESC) rn,
                                                       id_analysis,
                                                       dt_last_update
                                                  FROM (SELECT *
                                                          FROM (SELECT aqr.id_analysis_question_response,
                                                                       aqr.id_analysis_req_det,
                                                                       ard.id_sample_type,
                                                                       aqr.id_questionnaire,
                                                                       aqr.dt_last_update_tstz,
                                                                       aqr.notes,
                                                                       decode(aqr.id_harvest,
                                                                              NULL,
                                                                              pk_lab_tests_constant.g_analysis_cq_on_order,
                                                                              pk_lab_tests_constant.g_analysis_cq_on_harvest) flg_time,
                                                                       row_number() over(PARTITION BY aqr.id_questionnaire, aqr.dt_last_update_tstz ORDER BY aqr.id_analysis_question_response) rn,
                                                                       ard.id_analysis,
                                                                       pk_date_utils.date_send_tsz(i_lang,
                                                                                                   aqr.dt_last_update_tstz,
                                                                                                   i_prof) dt_last_update
                                                                  FROM analysis_question_response aqr
                                                                  JOIN analysis_req_det ard
                                                                    ON ard.id_analysis_req_det = aqr.id_analysis_req_det
                                                                 WHERE aqr.id_analysis_req_det = i_analysis_req_det)
                                                         WHERE rn = 1)) erd1
                                          LEFT JOIN (SELECT id_questionnaire,
                                                           id_analysis_req_det,
                                                           notes,
                                                           dt_last_update_tstz,
                                                           row_number() over(PARTITION BY id_questionnaire ORDER BY id_questionnaire ASC, dt_last_update_tstz DESC) rn
                                                      FROM (SELECT *
                                                              FROM (SELECT aqr.id_analysis_question_response,
                                                                           aqr.id_analysis_req_det,
                                                                           aqr.id_questionnaire,
                                                                           aqr.dt_last_update_tstz,
                                                                           aqr.notes,
                                                                           row_number() over(PARTITION BY aqr.id_questionnaire, aqr.dt_last_update_tstz ORDER BY aqr.id_analysis_question_response) rn --Because of multichoice options
                                                                      FROM analysis_question_response aqr
                                                                     WHERE aqr.id_analysis_req_det = i_analysis_req_det)
                                                             WHERE rn = 1)) erd2
                                            ON erd2.id_questionnaire = erd1.id_questionnaire
                                           AND erd2.id_analysis_req_det = erd1.id_analysis_req_det
                                           AND erd1.rn = (erd2.rn - 1)
                                         ORDER BY erd1.rn ASC, rank ASC) aqr
                                  JOIN questionnaire q
                                    ON q.id_questionnaire = aqr.id_questionnaire) t
                        UNION ALL
                        SELECT t.id_analysis_req_det,
                               NULL id_content,
                               t.flg_time,
                               '<b>' || pk_message.get_message(i_lang, i_prof, 'LAB_TESTS_T228') || '</b> ' desc_clinical_question,
                               t.dt_last_update,
                               1 num_clinical_question, --First row of every set
                               row_number() over(PARTITION BY t.id_analysis_req_det ORDER BY t.id_analysis_req_det) rn
                          FROM (SELECT DISTINCT aqr.id_analysis_req_det,
                                                decode(aqr.id_harvest,
                                                       NULL,
                                                       pk_lab_tests_constant.g_analysis_cq_on_order,
                                                       pk_lab_tests_constant.g_analysis_cq_on_harvest) flg_time,
                                                aqr.dt_last_update_tstz,
                                                pk_date_utils.date_send_tsz(i_lang, aqr.dt_last_update_tstz, i_prof) dt_last_update
                                  FROM analysis_question_response aqr
                                 WHERE aqr.id_analysis_req_det = i_analysis_req_det) t)
                 ORDER BY 4, 6 ASC);
    
        g_error := 'OPEN O_LAB_TEST_HARVEST';
        OPEN o_lab_test_harvest FOR
            SELECT h.id_analysis_req_det,
                   h.id_harvest,
                   l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, h.id_prof_harvest) ||
                   decode(pk_prof_utils.get_spec_signature(i_lang,
                                                           i_prof,
                                                           h.id_prof_harvest,
                                                           h.dt_harvest_reg_tstz,
                                                           h.id_episode),
                          NULL,
                          '; ',
                          ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                   i_prof,
                                                                   h.id_prof_harvest,
                                                                   h.dt_harvest_reg_tstz,
                                                                   h.id_episode) || '); ') ||
                   pk_date_utils.date_char_tsz(i_lang, h.dt_harvest_reg_tstz, i_prof.institution, i_prof.software) registry,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T045'), '') ||
                   pk_lab_tests_utils.get_alias_translation(i_lang,
                                                            i_prof,
                                                            pk_lab_tests_constant.g_analysis_alias,
                                                            'ANALYSIS.CODE_ANALYSIS.' || h.id_analysis,
                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || h.id_sample_type,
                                                            NULL) desc_analysis,
                   decode(cnt,
                          rn,
                          decode(h.flg_status,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T047'), '') ||
                                 pk_sysdomain.get_domain('HARVEST.FLG_STATUS', h.flg_status, i_lang)),
                          decode(h.flg_status,
                                 h.flg_status_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T047') || '@' ||
                                        decode(h.flg_status,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'HARVEST.FLG_STATUS',
                                                                       h.flg_status,
                                                                       NULL)) ||
                                        decode(h.flg_status_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T108') ||
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'HARVEST.FLG_STATUS',
                                                                       h.flg_status_new,
                                                                       NULL)),
                                        decode(h.flg_status,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'HARVEST.FLG_STATUS',
                                                                       h.flg_status,
                                                                       NULL)) ||
                                        decode(h.flg_status_new,
                                               NULL,
                                               NULL,
                                               '@' || pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'HARVEST.FLG_STATUS',
                                                                              h.flg_status_new,
                                                                              NULL))))) desc_status,
                   decode(cnt,
                          rn,
                          decode(h.id_body_part,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T174'), '') ||
                                 pk_translation.get_translation(i_lang,
                                                                'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' || h.id_body_part)),
                          decode(h.id_body_part,
                                 h.id_body_part_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T175') || '§' ||
                                        decode(h.id_body_part,
                                               NULL,
                                               l_msg_del,
                                               pk_translation.get_translation(i_lang,
                                                                              'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' ||
                                                                              h.id_body_part)) ||
                                        decode(h.id_body_part_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T174') ||
                                               pk_translation.get_translation(i_lang,
                                                                              'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' ||
                                                                              h.id_body_part_new)),
                                        decode(h.id_body_part,
                                               NULL,
                                               l_msg_del,
                                               pk_translation.get_translation(i_lang,
                                                                              'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' ||
                                                                              h.id_body_part)) ||
                                        decode(h.id_body_part_new,
                                               NULL,
                                               NULL,
                                               '§' || pk_translation.get_translation(i_lang,
                                                                                     'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' ||
                                                                                     h.id_body_part_new))))) desc_body_location,
                   decode(cnt,
                          rn,
                          decode(h.flg_collection_method,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T192'), '') ||
                                 pk_sysdomain.get_domain(i_lang,
                                                         i_prof,
                                                         'HARVEST.FLG_COLLECTION_METHOD',
                                                         h.flg_collection_method,
                                                         NULL)),
                          decode(h.flg_collection_method,
                                 h.flg_collection_method_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T193') || '§' ||
                                        decode(h.flg_collection_method,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'HARVEST.FLG_COLLECTION_METHOD',
                                                                       h.flg_collection_method,
                                                                       NULL)) ||
                                        decode(h.flg_collection_method_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T192') ||
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'HARVEST.FLG_COLLECTION_METHOD',
                                                                       h.flg_collection_method_new,
                                                                       NULL)),
                                        decode(h.flg_collection_method,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'HARVEST.FLG_COLLECTION_METHOD',
                                                                       h.flg_collection_method,
                                                                       NULL)) ||
                                        decode(h.flg_collection_method_new,
                                               NULL,
                                               NULL,
                                               '§' || pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'HARVEST.FLG_COLLECTION_METHOD',
                                                                              h.flg_collection_method_new,
                                                                              NULL))))) collection_method,
                   decode(cnt,
                          rn,
                          decode(h.id_room_receive_tube,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T028'), '') ||
                                 nvl((SELECT r.desc_room
                                       FROM room r
                                      WHERE r.id_room = h.id_room_receive_tube),
                                     pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || h.id_room_receive_tube))),
                          decode(h.id_room_receive_tube,
                                 h.id_room_receive_tube_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T092') || '§' ||
                                        decode(h.id_room_receive_tube,
                                               NULL,
                                               l_msg_del,
                                               nvl((SELECT r.desc_room
                                                     FROM room r
                                                    WHERE r.id_room = h.id_room_receive_tube_new),
                                                   pk_translation.get_translation(i_lang,
                                                                                  'ROOM.CODE_ROOM.' ||
                                                                                  h.id_room_receive_tube_new))) ||
                                        decode(h.id_room_receive_tube_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T028') ||
                                               nvl((SELECT r.desc_room
                                                     FROM room r
                                                    WHERE r.id_room = h.id_room_receive_tube_new),
                                                   pk_translation.get_translation(i_lang,
                                                                                  'ROOM.CODE_ROOM.' ||
                                                                                  h.id_room_receive_tube_new))),
                                        decode(h.id_room_receive_tube,
                                               NULL,
                                               l_msg_del,
                                               nvl((SELECT r.desc_room
                                                     FROM room r
                                                    WHERE r.id_room = h.id_room_receive_tube),
                                                   pk_translation.get_translation(i_lang,
                                                                                  'ROOM.CODE_ROOM.' || h.id_room_receive_tube))) ||
                                        decode(h.id_room_receive_tube_new,
                                               NULL,
                                               NULL,
                                               '§' ||
                                               nvl((SELECT r.desc_room
                                                     FROM room r
                                                    WHERE r.id_room = h.id_room_receive_tube_new),
                                                   pk_translation.get_translation(i_lang,
                                                                                  'ROOM.CODE_ROOM.' ||
                                                                                  h.id_room_receive_tube_new)))))) perform_location,
                   decode(cnt,
                          rn,
                          decode(h.id_sample_recipient,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T056'), '') ||
                                 pk_translation.get_translation(i_lang,
                                                                'SAMPLE_RECIPIENT.CODE_SAMPLE_RECIPIENT.' ||
                                                                h.id_sample_recipient)),
                          decode(h.id_sample_recipient,
                                 h.id_sample_recipient_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T098') || '§' ||
                                        decode(h.id_sample_recipient,
                                               NULL,
                                               l_msg_del,
                                               pk_translation.get_translation(i_lang,
                                                                              'SAMPLE_RECIPIENT.CODE_SAMPLE_RECIPIENT.' ||
                                                                              h.id_sample_recipient)) ||
                                        decode(h.id_sample_recipient_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T056') ||
                                               pk_translation.get_translation(i_lang,
                                                                              'SAMPLE_RECIPIENT.CODE_SAMPLE_RECIPIENT.' ||
                                                                              h.id_sample_recipient_new)),
                                        decode(h.id_sample_recipient,
                                               NULL,
                                               l_msg_del,
                                               pk_translation.get_translation(i_lang,
                                                                              'SAMPLE_RECIPIENT.CODE_SAMPLE_RECIPIENT.' ||
                                                                              h.id_sample_recipient)) ||
                                        decode(h.id_sample_recipient_new,
                                               NULL,
                                               NULL,
                                               '§' || pk_translation.get_translation(i_lang,
                                                                                     'SAMPLE_RECIPIENT.CODE_SAMPLE_RECIPIENT.' ||
                                                                                     h.id_sample_recipient_new))))) desc_tubes,
                   decode(cnt,
                          rn,
                          decode(h.num_recipient,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T057'), '') ||
                                 h.num_recipient),
                          decode(h.num_recipient,
                                 h.num_recipient_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T099') || '§' ||
                                        decode(h.num_recipient, NULL, l_msg_del, h.num_recipient) ||
                                        decode(h.num_recipient_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T057') ||
                                               h.num_recipient_new),
                                        decode(h.num_recipient, NULL, l_msg_del, h.num_recipient) ||
                                        decode(h.num_recipient_new, NULL, NULL, '§' || h.num_recipient_new)))) num_tubes,
                   decode(cnt,
                          rn,
                          decode(h.dt_harvest_tstz,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T058'), '') ||
                                 pk_date_utils.date_char_tsz(i_lang,
                                                             h.dt_harvest_tstz,
                                                             i_prof.institution,
                                                             i_prof.software)),
                          decode(h.dt_harvest_tstz,
                                 h.dt_harvest_tstz_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T100') || '§' ||
                                        decode(h.dt_harvest_tstz,
                                               NULL,
                                               l_msg_del,
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           h.dt_harvest_tstz,
                                                                           i_prof.institution,
                                                                           i_prof.software)) ||
                                        decode(h.dt_harvest_tstz_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T058') ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           h.dt_harvest_tstz_new,
                                                                           i_prof.institution,
                                                                           i_prof.software)),
                                        decode(h.dt_harvest_tstz,
                                               NULL,
                                               l_msg_del,
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           h.dt_harvest_tstz,
                                                                           i_prof.institution,
                                                                           i_prof.software)) ||
                                        decode(h.dt_harvest_tstz_new,
                                               NULL,
                                               NULL,
                                               '§' || pk_date_utils.date_char_tsz(i_lang,
                                                                                  h.dt_harvest_tstz_new,
                                                                                  i_prof.institution,
                                                                                  i_prof.software))))) dt_harvest,
                   decode(cnt,
                          rn,
                          decode(h.amount,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T205'), '') ||
                                 h.amount || ' ' ||
                                 pk_translation.get_translation(i_lang,
                                                                'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                pk_lab_tests_utils.get_harvest_unit_measure(i_lang,
                                                                                                            i_prof,
                                                                                                            h.id_sample_recipient))),
                          decode(h.amount,
                                 h.amount_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T209') || '§' ||
                                        decode(h.amount,
                                               NULL,
                                               l_msg_del,
                                               h.amount || ' ' ||
                                               pk_translation.get_translation(i_lang,
                                                                              'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                              pk_lab_tests_utils.get_harvest_unit_measure(i_lang,
                                                                                                                          i_prof,
                                                                                                                          h.id_sample_recipient))) ||
                                        decode(h.amount_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T205') || h.amount_new || ' ' ||
                                               pk_translation.get_translation(i_lang,
                                                                              'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                              pk_lab_tests_utils.get_harvest_unit_measure(i_lang,
                                                                                                                          i_prof,
                                                                                                                          h.id_sample_recipient))),
                                        decode(h.amount,
                                               NULL,
                                               l_msg_del,
                                               h.amount || ' ' ||
                                               pk_translation.get_translation(i_lang,
                                                                              'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                              pk_lab_tests_utils.get_harvest_unit_measure(i_lang,
                                                                                                                          i_prof,
                                                                                                                          h.id_sample_recipient))) ||
                                        decode(h.amount_new,
                                               NULL,
                                               NULL,
                                               '§' || h.amount_new || ' ' ||
                                               pk_translation.get_translation(i_lang,
                                                                              'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                              pk_lab_tests_utils.get_harvest_unit_measure(i_lang,
                                                                                                                          i_prof,
                                                                                                                          h.id_sample_recipient)))))) collection_amount,
                   decode(cnt,
                          rn,
                          decode(h.flg_mov_tube,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T187'), '') ||
                                 pk_sysdomain.get_domain(i_lang, i_prof, 'HARVEST.FLG_MOV_TUBE', h.flg_mov_tube, NULL)),
                          decode(h.flg_mov_tube,
                                 h.flg_mov_tube_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T188') || '§' ||
                                        decode(h.flg_mov_tube,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'HARVEST.FLG_MOV_TUBE',
                                                                       h.flg_mov_tube,
                                                                       NULL)) ||
                                        decode(h.flg_mov_tube_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T187') ||
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'HARVEST.FLG_MOV_TUBE',
                                                                       h.flg_mov_tube_new,
                                                                       NULL)),
                                        decode(h.flg_mov_tube,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'HARVEST.FLG_MOV_TUBE',
                                                                       h.flg_mov_tube,
                                                                       NULL)) ||
                                        decode(h.flg_mov_tube_new,
                                               NULL,
                                               NULL,
                                               '§' || pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'HARVEST.FLG_MOV_TUBE',
                                                                              h.flg_mov_tube_new,
                                                                              NULL))))) harvest_transportation,
                   decode(cnt,
                          rn,
                          decode(h.notes,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T059'), '') ||
                                 h.notes),
                          decode(h.notes,
                                 h.notes_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T101') || '§' ||
                                        decode(h.notes, NULL, l_msg_del, h.notes) ||
                                        decode(h.notes_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T059') || h.notes_new),
                                        decode(h.notes, NULL, l_msg_del, h.notes) ||
                                        decode(h.notes_new, NULL, NULL, '§' || h.notes_new)))) notes,
                   decode(cnt,
                          rn,
                          decode(h.harvest_instructions,
                                 NULL,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T241') || h.harvest_instructions),
                          decode(h.harvest_instructions,
                                 h.harvest_instructions_new,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T242') || '§' ||
                                 decode(h.harvest_instructions, NULL, l_msg_del, h.harvest_instructions) ||
                                 decode(h.harvest_instructions_new,
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T241') ||
                                        h.harvest_instructions_new))) harvest_instructions,
                   decode(cnt,
                          rn,
                          decode(h.id_revised_by,
                                 NULL,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T238') ||
                                 pk_prof_utils.get_name_signature(i_lang, i_prof, h.id_revised_by)),
                          decode(h.id_revised_by,
                                 h.id_revised_by_new,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T243') || '§' ||
                                 decode(pk_prof_utils.get_name_signature(i_lang, i_prof, h.id_revised_by),
                                        NULL,
                                        l_msg_del,
                                        pk_prof_utils.get_name_signature(i_lang, i_prof, h.id_revised_by)) ||
                                 decode(h.id_revised_by_new,
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T238') ||
                                        pk_prof_utils.get_name_signature(i_lang, i_prof, h.id_revised_by_new)))) revised_by,
                   decode(cnt,
                          rn,
                          decode(h.id_rep_coll_reason,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T060'), '') ||
                                 pk_translation.get_translation(i_lang,
                                                                'REPEAT_COLLECTION_REASON.CODE_REP_COLL_REASON.' ||
                                                                h.id_rep_coll_reason)),
                          decode(h.id_rep_coll_reason,
                                 h.id_rep_coll_reason_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T102') || '§' ||
                                        decode(h.id_rep_coll_reason,
                                               NULL,
                                               l_msg_del,
                                               pk_translation.get_translation(i_lang,
                                                                              'REPEAT_COLLECTION_REASON.CODE_REP_COLL_REASON.' ||
                                                                              h.id_rep_coll_reason)) ||
                                        decode(h.id_rep_coll_reason_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T060') ||
                                               pk_translation.get_translation(i_lang,
                                                                              'REPEAT_COLLECTION_REASON.CODE_REP_COLL_REASON.' ||
                                                                              h.id_rep_coll_reason_new)),
                                        decode(h.id_rep_coll_reason,
                                               NULL,
                                               l_msg_del,
                                               pk_translation.get_translation(i_lang,
                                                                              'REPEAT_COLLECTION_REASON.CODE_REP_COLL_REASON.' ||
                                                                              h.id_rep_coll_reason)) ||
                                        decode(h.id_rep_coll_reason_new,
                                               NULL,
                                               NULL,
                                               '§' || pk_translation.get_translation(i_lang,
                                                                                     'REPEAT_COLLECTION_REASON.CODE_REP_COLL_REASON.' ||
                                                                                     h.id_rep_coll_reason_new))))) repeat_harvest_notes,
                   NULL cancel_reason,
                   NULL notes_cancel
              FROM (SELECT row_number() over(PARTITION BY t.id_harvest ORDER BY t.dt_harvest_hist DESC NULLS FIRST) rn,
                           COUNT(1) over(PARTITION BY t.id_harvest) cnt,
                           t.dt_harvest_hist,
                           t.id_analysis_req_det,
                           first_value(t.id_analysis_req_det) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_analysis_req_det_new,
                           t.id_analysis,
                           t.id_sample_type,
                           t.id_harvest,
                           first_value(t.id_harvest) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_harvest_new,
                           t.dt_harvest_reg_tstz,
                           first_value(t.dt_harvest_reg_tstz) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_harvest_reg_tstz_new,
                           t.id_prof_harvest,
                           first_value(t.id_prof_harvest) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_harvest_new,
                           t.id_episode,
                           t.flg_status,
                           first_value(t.flg_status) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_status_new,
                           t.id_body_part,
                           first_value(t.id_body_part) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_body_part_new,
                           t.flg_collection_method,
                           first_value(t.flg_collection_method) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_collection_method_new,
                           t.id_specimen_condition,
                           first_value(t.id_specimen_condition) over(ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_specimen_condition_new,
                           t.id_room_receive_tube,
                           first_value(t.id_room_receive_tube) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_room_receive_tube_new,
                           t.id_sample_recipient,
                           first_value(t.id_sample_recipient) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_sample_recipient_new,
                           t.num_recipient,
                           first_value(t.num_recipient) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) num_recipient_new,
                           t.dt_harvest_tstz,
                           first_value(t.dt_harvest_tstz) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_harvest_tstz_new,
                           t.amount,
                           first_value(t.amount) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) amount_new,
                           t.flg_mov_tube,
                           first_value(t.flg_mov_tube) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_mov_tube_new,
                           t.notes,
                           first_value(t.notes) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_new,
                           t.harvest_instructions,
                           first_value(t.harvest_instructions) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) harvest_instructions_new,
                           t.id_revised_by,
                           first_value(t.id_revised_by) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_revised_by_new,
                           t.id_rep_coll_reason,
                           first_value(t.id_rep_coll_reason) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_rep_coll_reason_new,
                           t.id_cancel_reason,
                           first_value(t.id_cancel_reason) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_cancel_reason_new,
                           t.notes_cancel,
                           first_value(t.notes_cancel) over(PARTITION BY id_harvest ORDER BY dt_harvest_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_cancel_new
                      FROM (SELECT NULL dt_harvest_hist,
                                   ah.id_analysis_req_det,
                                   ard.id_analysis,
                                   ard.id_sample_type,
                                   h.id_harvest,
                                   h.dt_harvest_reg_tstz,
                                   h.id_prof_harvest,
                                   h.id_episode,
                                   h.flg_status,
                                   h.id_body_part,
                                   h.flg_laterality,
                                   h.flg_collection_method,
                                   h.id_specimen_condition,
                                   h.id_room_receive_tube,
                                   ah.id_sample_recipient,
                                   h.num_recipient,
                                   h.dt_harvest_tstz,
                                   h.amount,
                                   h.flg_mov_tube,
                                   h.notes,
                                   h.harvest_instructions,
                                   h.id_revised_by,
                                   h.id_rep_coll_reason,
                                   h.id_cancel_reason,
                                   h.notes_cancel
                              FROM analysis_req_det ard, analysis_harvest ah, harvest h
                             WHERE ard.id_analysis_req_det = i_analysis_req_det
                               AND ard.flg_status != pk_lab_tests_constant.g_analysis_cancel
                               AND ard.id_analysis_req_det = ah.id_analysis_req_det
                               AND ah.id_harvest = h.id_harvest
                               AND h.flg_status NOT IN (pk_lab_tests_constant.g_harvest_waiting,
                                                        pk_lab_tests_constant.g_harvest_pending,
                                                        pk_lab_tests_constant.g_harvest_suspended,
                                                        pk_lab_tests_constant.g_harvest_inactive)
                             GROUP BY ah.id_analysis_req_det,
                                      ard.id_analysis,
                                      ard.id_sample_type,
                                      h.id_harvest,
                                      h.dt_harvest_reg_tstz,
                                      h.id_prof_harvest,
                                      h.id_episode,
                                      h.flg_status,
                                      h.id_body_part,
                                      h.flg_laterality,
                                      h.flg_collection_method,
                                      h.id_specimen_condition,
                                      h.id_room_receive_tube,
                                      ah.id_sample_recipient,
                                      h.num_recipient,
                                      h.dt_harvest_tstz,
                                      h.amount,
                                      h.flg_mov_tube,
                                      h.notes,
                                      h.harvest_instructions,
                                      h.id_revised_by,
                                      h.id_rep_coll_reason,
                                      h.id_cancel_reason,
                                      h.notes_cancel
                            UNION ALL
                            SELECT hh.dt_harvest_hist,
                                   ahh.id_analysis_req_det,
                                   ard.id_analysis,
                                   ard.id_sample_type,
                                   hh.id_harvest,
                                   hh.dt_harvest_reg_tstz,
                                   hh.id_prof_harvest,
                                   hh.id_episode,
                                   hh.flg_status,
                                   hh.id_body_part,
                                   hh.flg_laterality,
                                   hh.flg_collection_method,
                                   hh.id_specimen_condition,
                                   hh.id_room_receive_tube,
                                   ahh.id_sample_recipient,
                                   hh.num_recipient,
                                   hh.dt_harvest_tstz,
                                   hh.amount,
                                   hh.flg_mov_tube,
                                   hh.notes,
                                   hh.harvest_instructions,
                                   hh.id_revised_by,
                                   hh.id_rep_coll_reason,
                                   hh.id_cancel_reason,
                                   hh.notes_cancel
                              FROM analysis_req_det ard, analysis_harvest_hist ahh, harvest_hist hh
                             WHERE ard.id_analysis_req_det = i_analysis_req_det
                               AND ard.flg_status != pk_lab_tests_constant.g_analysis_cancel
                               AND ard.id_analysis_req_det = ahh.id_analysis_req_det
                               AND ahh.id_harvest = hh.id_harvest
                               AND hh.flg_status NOT IN (pk_lab_tests_constant.g_harvest_waiting,
                                                         pk_lab_tests_constant.g_harvest_pending,
                                                         pk_lab_tests_constant.g_harvest_suspended,
                                                         pk_lab_tests_constant.g_harvest_rejected,
                                                         pk_lab_tests_constant.g_harvest_cancel)
                             GROUP BY hh.dt_harvest_hist,
                                      ahh.id_analysis_req_det,
                                      ard.id_analysis,
                                      ard.id_sample_type,
                                      hh.id_harvest,
                                      hh.dt_harvest_reg_tstz,
                                      hh.id_prof_harvest,
                                      hh.id_episode,
                                      hh.flg_status,
                                      hh.id_body_part,
                                      hh.flg_laterality,
                                      hh.flg_collection_method,
                                      hh.id_specimen_condition,
                                      hh.id_room_receive_tube,
                                      ahh.id_sample_recipient,
                                      hh.num_recipient,
                                      hh.dt_harvest_tstz,
                                      hh.amount,
                                      hh.flg_mov_tube,
                                      hh.notes,
                                      hh.harvest_instructions,
                                      hh.id_revised_by,
                                      hh.id_rep_coll_reason,
                                      hh.id_cancel_reason,
                                      hh.notes_cancel
                             ORDER BY dt_harvest_hist DESC NULLS FIRST) t
                     ORDER BY rn) h;
    
        g_error := 'OPEN O_LAB_TEST_RESULT';
        OPEN o_lab_test_result FOR
            SELECT aresp.id_analysis_req_det,
                   aresp.id_analysis_result,
                   NULL id_doc_external,
                   decode(cnt,
                          rn,
                          l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, aresp.id_professional) ||
                          decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                  i_prof,
                                                                  aresp.id_professional,
                                                                  aresp.dt_analysis_result_par_upd,
                                                                  aresp.id_episode),
                                 NULL,
                                 '; ',
                                 ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                          i_prof,
                                                                          aresp.id_professional,
                                                                          aresp.dt_analysis_result_par_upd,
                                                                          aresp.id_episode) || '); ') ||
                          pk_date_utils.date_char_tsz(i_lang,
                                                      aresp.dt_analysis_result_par_upd,
                                                      i_prof.institution,
                                                      i_prof.software),
                          l_msg_reg || ' ' ||
                          pk_prof_utils.get_name_signature(i_lang, i_prof, aresp.id_professional_upd) ||
                          decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                  i_prof,
                                                                  aresp.id_professional_upd,
                                                                  aresp.dt_analysis_result_par_upd,
                                                                  aresp.id_episode),
                                 NULL,
                                 '; ',
                                 ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                          i_prof,
                                                                          aresp.id_professional_upd,
                                                                          aresp.dt_analysis_result_par_upd,
                                                                          aresp.id_episode) || '); ') ||
                          pk_date_utils.date_char_tsz(i_lang,
                                                      aresp.dt_analysis_result_par_upd,
                                                      i_prof.institution,
                                                      i_prof.software)) registry,
                   decode(cnt,
                          rn,
                          decode(aresp.id_arp_parent,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T210'), '') ||
                                 pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                          i_prof,
                                                                          pk_lab_tests_constant.g_analysis_alias,
                                                                          'ANALYSIS.CODE_ANALYSIS.' ||
                                                                          aresp_parent.id_analysis,
                                                                          'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                          aresp_parent.id_sample_type,
                                                                          NULL)),
                          NULL) desc_reflex_analysis,
                   decode(cnt,
                          rn,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T045'), '') ||
                          pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                   i_prof,
                                                                   pk_lab_tests_constant.g_analysis_alias,
                                                                   'ANALYSIS.CODE_ANALYSIS.' || aresp.id_analysis,
                                                                   'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                   aresp.id_sample_type,
                                                                   NULL),
                          NULL) desc_analysis,
                   decode(cnt,
                          rn,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T058'), '') ||
                          pk_date_utils.date_char_tsz(i_lang, aresp.dt_harvest_tstz, i_prof.institution, i_prof.software),
                          NULL) dt_harvest,
                   CASE
                        WHEN result_count.id_analysis_result_count > 1 THEN
                         decode(cnt,
                                rn,
                                decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T066'), '') ||
                                l_msg_result)
                        ELSE
                         decode(cnt,
                                rn,
                                decode(nvl(TRIM(aresp.desc_analysis_result), aresp.analysis_result_value) || ' ' ||
                                       nvl(aresp.desc_unit_measure,
                                           pk_translation.get_translation(i_lang,
                                                                          'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                          aresp.id_unit_measure)),
                                       NULL,
                                       NULL,
                                       decode(i_flg_report,
                                              pk_lab_tests_constant.g_no,
                                              aa_code_messages('LAB_TESTS_T066'),
                                              '') || nvl(TRIM(aresp.desc_analysis_result), aresp.analysis_result_value) || ' ' ||
                                       nvl(aresp.desc_unit_measure,
                                           pk_translation.get_translation(i_lang,
                                                                          'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                          aresp.id_unit_measure))),
                                decode(dbms_lob.compare(nvl(TRIM(aresp.desc_analysis_result), aresp.analysis_result_value) || ' ' ||
                                                        nvl(aresp.desc_unit_measure,
                                                            pk_translation.get_translation(i_lang,
                                                                                           'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                           aresp.id_unit_measure)),
                                                        nvl(TRIM(aresp.desc_analysis_result_new),
                                                            aresp.analysis_result_value_new) || ' ' ||
                                                        nvl(aresp.desc_unit_measure_new,
                                                            pk_translation.get_translation(i_lang,
                                                                                           'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                           aresp.id_unit_measure_new))),
                                       0,
                                       NULL,
                                       decode(i_flg_report,
                                              pk_lab_tests_constant.g_no,
                                              aa_code_messages('LAB_TESTS_T105') || '§' ||
                                              decode(nvl(TRIM(aresp.desc_analysis_result), aresp.analysis_result_value) || ' ' ||
                                                     nvl(aresp.desc_unit_measure,
                                                         pk_translation.get_translation(i_lang,
                                                                                        'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                        aresp.id_unit_measure)),
                                                     NULL,
                                                     l_msg_del,
                                                     nvl(TRIM(aresp.desc_analysis_result), aresp.analysis_result_value) || ' ' ||
                                                     nvl(aresp.desc_unit_measure,
                                                         pk_translation.get_translation(i_lang,
                                                                                        'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                        aresp.id_unit_measure))) ||
                                              decode(nvl(TRIM(aresp.desc_analysis_result_new),
                                                         aresp.analysis_result_value_new) || ' ' ||
                                                     nvl(aresp.desc_unit_measure_new,
                                                         pk_translation.get_translation(i_lang,
                                                                                        'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                        aresp.id_unit_measure_new)),
                                                     NULL,
                                                     NULL,
                                                     chr(10) || chr(9) || '#' || aa_code_messages('LAB_TESTS_T066') ||
                                                     nvl(TRIM(aresp.desc_analysis_result_new),
                                                         aresp.analysis_result_value_new) || ' ' ||
                                                     nvl(aresp.desc_unit_measure_new,
                                                         pk_translation.get_translation(i_lang,
                                                                                        'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                        aresp.id_unit_measure_new))),
                                              decode(nvl(TRIM(aresp.desc_analysis_result), aresp.analysis_result_value) || ' ' ||
                                                     nvl(aresp.desc_unit_measure,
                                                         pk_translation.get_translation(i_lang,
                                                                                        'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                        aresp.id_unit_measure)),
                                                     NULL,
                                                     l_msg_del,
                                                     nvl(TRIM(aresp.desc_analysis_result), aresp.analysis_result_value) || ' ' ||
                                                     nvl(aresp.desc_unit_measure,
                                                         pk_translation.get_translation(i_lang,
                                                                                        'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                        aresp.id_unit_measure))) ||
                                              decode(nvl(TRIM(aresp.desc_analysis_result_new),
                                                         aresp.analysis_result_value_new) || ' ' ||
                                                     nvl(aresp.desc_unit_measure_new,
                                                         pk_translation.get_translation(i_lang,
                                                                                        'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                        aresp.id_unit_measure_new)),
                                                     NULL,
                                                     NULL,
                                                     '§' || nvl(TRIM(aresp.desc_analysis_result_new),
                                                                aresp.analysis_result_value_new) || ' ' ||
                                                     nvl(aresp.desc_unit_measure_new,
                                                         pk_translation.get_translation(i_lang,
                                                                                        'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                        aresp.id_unit_measure_new))))))
                    END RESULT,
                   NULL thumbnail,
                   decode(cnt,
                          rn,
                          decode(aresp.id_result_status,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T047'), '') ||
                                 pk_translation.get_translation(i_lang,
                                                                'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                aresp.id_result_status)),
                          decode(i_flg_report,
                                 pk_lab_tests_constant.g_no,
                                 decode(aresp.id_result_status,
                                        aresp.id_result_status_new,
                                        NULL,
                                        aa_code_messages('LAB_TESTS_T108') || '§' ||
                                        decode(aresp.id_result_status,
                                               NULL,
                                               l_msg_del,
                                               pk_translation.get_translation(i_lang,
                                                                              'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                              aresp.id_result_status)) ||
                                        decode(aresp.id_result_status_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T047') ||
                                               pk_translation.get_translation(i_lang,
                                                                              'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                              aresp.id_result_status_new))),
                                 decode(aresp.id_result_status,
                                        aresp.id_result_status_new,
                                        NULL,
                                        decode(aresp.id_result_status,
                                               NULL,
                                               l_msg_del,
                                               pk_translation.get_translation(i_lang,
                                                                              'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                              aresp.id_result_status)) ||
                                        decode(aresp.id_result_status_new,
                                               NULL,
                                               NULL,
                                               '§' || aa_code_messages('LAB_TESTS_T047') ||
                                               pk_translation.get_translation(i_lang,
                                                                              'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                              aresp.id_result_status_new))))) desc_status,
                   CASE
                        WHEN result_count.id_analysis_result_count > 1 THEN
                         NULL
                        ELSE
                         decode(cnt,
                                rn,
                                decode(nvl(aresp.ref_val,
                                           decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                  nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                                  ' - ',
                                                  NULL,
                                                  nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                  nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                                  nvl(aresp.desc_unit_measure,
                                                      pk_translation.get_translation(i_lang,
                                                                                     'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                     aresp.id_unit_measure)))),
                                       NULL,
                                       NULL,
                                       decode(i_flg_report,
                                              pk_lab_tests_constant.g_no,
                                              aa_code_messages('LAB_TESTS_T070') ||
                                              nvl(aresp.ref_val,
                                                  decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                         nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                                         ' - ',
                                                         NULL,
                                                         nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                         nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                                         nvl(aresp.desc_unit_measure,
                                                             pk_translation.get_translation(i_lang,
                                                                                            'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                            aresp.id_unit_measure)))),
                                              nvl(aresp.ref_val,
                                                  decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                         nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                                         ' - ',
                                                         NULL,
                                                         nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                         nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                                         nvl(aresp.desc_unit_measure,
                                                             pk_translation.get_translation(i_lang,
                                                                                            'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                            aresp.id_unit_measure)))))),
                                decode(nvl(aresp.ref_val,
                                           decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                  nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                                  ' - ',
                                                  NULL,
                                                  nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                  nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                                  nvl(aresp.desc_unit_measure,
                                                      pk_translation.get_translation(i_lang,
                                                                                     'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                     aresp.id_unit_measure)))),
                                       nvl(aresp.ref_val_new,
                                           decode((nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) || ' - ' ||
                                                  nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new)),
                                                  ' - ',
                                                  NULL,
                                                  nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) || ' - ' ||
                                                  nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new) || ' ' ||
                                                  nvl(aresp.desc_unit_measure_new,
                                                      pk_translation.get_translation(i_lang,
                                                                                     'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                     aresp.id_unit_measure_new)))),
                                       NULL,
                                       decode(i_flg_report,
                                              pk_lab_tests_constant.g_no,
                                              aa_code_messages('LAB_TESTS_T106') || '§' ||
                                              decode(nvl(aresp.ref_val,
                                                         decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                                                ' - ',
                                                                NULL,
                                                                nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                                                nvl(aresp.desc_unit_measure,
                                                                    pk_translation.get_translation(i_lang,
                                                                                                   'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                   aresp.id_unit_measure)))),
                                                     NULL,
                                                     l_msg_del,
                                                     nvl(aresp.ref_val,
                                                         decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                                                ' - ',
                                                                NULL,
                                                                nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                                                nvl(aresp.desc_unit_measure,
                                                                    pk_translation.get_translation(i_lang,
                                                                                                   'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                   aresp.id_unit_measure))))) ||
                                              decode(nvl(aresp.ref_val_new,
                                                         decode((nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) ||
                                                                ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new)),
                                                                ' - ',
                                                                NULL,
                                                                nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) ||
                                                                ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new) || ' ' ||
                                                                nvl(aresp.desc_unit_measure_new,
                                                                    pk_translation.get_translation(i_lang,
                                                                                                   'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                   aresp.id_unit_measure_new)))),
                                                     NULL,
                                                     NULL,
                                                     chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T070') ||
                                                     nvl(aresp.ref_val_new,
                                                         decode((nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) ||
                                                                ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new)),
                                                                ' - ',
                                                                NULL,
                                                                nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) ||
                                                                ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new) || ' ' ||
                                                                nvl(aresp.desc_unit_measure_new,
                                                                    pk_translation.get_translation(i_lang,
                                                                                                   'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                   aresp.id_unit_measure_new))))),
                                              decode(nvl(aresp.ref_val,
                                                         decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                                                ' - ',
                                                                NULL,
                                                                nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                                                nvl(aresp.desc_unit_measure,
                                                                    pk_translation.get_translation(i_lang,
                                                                                                   'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                   aresp.id_unit_measure)))),
                                                     NULL,
                                                     l_msg_del,
                                                     nvl(aresp.ref_val,
                                                         decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                                                ' - ',
                                                                NULL,
                                                                nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                                                nvl(aresp.desc_unit_measure,
                                                                    pk_translation.get_translation(i_lang,
                                                                                                   'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                   aresp.id_unit_measure))))) ||
                                              decode(nvl(aresp.ref_val_new,
                                                         decode((nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) ||
                                                                ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new)),
                                                                ' - ',
                                                                NULL,
                                                                nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) ||
                                                                ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new) || ' ' ||
                                                                nvl(aresp.desc_unit_measure_new,
                                                                    pk_translation.get_translation(i_lang,
                                                                                                   'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                   aresp.id_unit_measure_new)))),
                                                     NULL,
                                                     NULL,
                                                     '§' ||
                                                     nvl(aresp.ref_val_new,
                                                         decode((nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) ||
                                                                ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new)),
                                                                ' - ',
                                                                NULL,
                                                                nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) ||
                                                                ' - ' ||
                                                                nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new) || ' ' ||
                                                                nvl(aresp.desc_unit_measure_new,
                                                                    pk_translation.get_translation(i_lang,
                                                                                                   'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                   aresp.id_unit_measure_new))))))))
                    END ref_range,
                   CASE
                        WHEN result_count.id_analysis_result_count > 1 THEN
                         NULL
                        ELSE
                         decode(cnt,
                                rn,
                                decode(dbms_lob.getlength(aresp.parameter_notes),
                                       NULL,
                                       decode(dbms_lob.getlength(aresp.interface_notes),
                                              NULL,
                                              to_clob(''),
                                              decode(i_flg_report,
                                                     pk_lab_tests_constant.g_no,
                                                     aa_code_messages('LAB_TESTS_T149'),
                                                     '') || aresp.interface_notes),
                                       decode(i_flg_report,
                                              pk_lab_tests_constant.g_no,
                                              aa_code_messages('LAB_TESTS_T149'),
                                              '') || aresp.parameter_notes),
                                decode(aresp.parameter_notes,
                                       aresp.parameter_notes_new,
                                       decode(aresp.interface_notes,
                                              aresp.interface_notes_new,
                                              NULL,
                                              decode(i_flg_report,
                                                     pk_lab_tests_constant.g_no,
                                                     aa_code_messages('LAB_TESTS_T150') || '§' ||
                                                     decode(aresp.interface_notes, NULL, l_msg_del, aresp.interface_notes) ||
                                                     decode(aresp.interface_notes_new,
                                                            NULL,
                                                            to_clob(''),
                                                            chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T149') ||
                                                            aresp.interface_notes_new),
                                                     decode(aresp.interface_notes, NULL, l_msg_del, aresp.interface_notes) ||
                                                     decode(aresp.interface_notes_new,
                                                            NULL,
                                                            to_clob(''),
                                                            '§' || aa_code_messages('LAB_TESTS_T149') ||
                                                            aresp.interface_notes_new))),
                                       decode(i_flg_report,
                                              pk_lab_tests_constant.g_no,
                                              aa_code_messages('LAB_TESTS_T150') || '§' ||
                                              decode(aresp.parameter_notes, NULL, l_msg_del, aresp.parameter_notes) ||
                                              decode(aresp.parameter_notes_new,
                                                     NULL,
                                                     NULL,
                                                     chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T149') ||
                                                     aresp.parameter_notes_new),
                                              decode(aresp.parameter_notes, NULL, l_msg_del, aresp.parameter_notes) ||
                                              decode(aresp.parameter_notes_new,
                                                     NULL,
                                                     NULL,
                                                     '§' || aa_code_messages('LAB_TESTS_T149') || aresp.parameter_notes_new))))
                    END parameter_notes,
                   CASE
                        WHEN result_count.id_analysis_result_count > 1 THEN
                         NULL
                        ELSE
                         decode(cnt,
                                rn,
                                decode(aresp.laboratory_short_desc,
                                       NULL,
                                       NULL,
                                       decode(i_flg_report,
                                              pk_lab_tests_constant.g_no,
                                              aa_code_messages('LAB_TESTS_T073'),
                                              '') || aresp.laboratory_short_desc),
                                decode(aresp.laboratory_short_desc,
                                       aresp.laboratory_short_desc_new,
                                       NULL,
                                       decode(i_flg_report,
                                              pk_lab_tests_constant.g_no,
                                              aa_code_messages('LAB_TESTS_T073') || '§' ||
                                              decode(aresp.laboratory_short_desc,
                                                     NULL,
                                                     l_msg_del,
                                                     aresp.laboratory_short_desc) ||
                                              decode(aresp.laboratory_short_desc_new,
                                                     NULL,
                                                     NULL,
                                                     chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T073') ||
                                                     aresp.laboratory_short_desc_new),
                                              decode(aresp.laboratory_short_desc,
                                                     NULL,
                                                     l_msg_del,
                                                     aresp.laboratory_short_desc) ||
                                              decode(aresp.laboratory_short_desc_new,
                                                     NULL,
                                                     NULL,
                                                     '§' || aresp.laboratory_short_desc_new))))
                    END desc_lab,
                   decode(cnt,
                          rn,
                          decode(aresp.dt_analysis_result_tstz,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T071'), '') ||
                                 pk_date_utils.date_char_tsz(i_lang,
                                                             aresp.dt_analysis_result_tstz,
                                                             i_prof.institution,
                                                             i_prof.software)),
                          decode(aresp.dt_analysis_result_tstz,
                                 aresp.dt_analysis_result_tstz_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T107') || '§' ||
                                        decode(aresp.dt_analysis_result_tstz,
                                               NULL,
                                               l_msg_del,
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           aresp.dt_analysis_result_tstz,
                                                                           i_prof.institution,
                                                                           i_prof.software)) ||
                                        decode(aresp.dt_analysis_result_tstz_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T071') ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           aresp.dt_analysis_result_tstz_new,
                                                                           i_prof.institution,
                                                                           i_prof.software)),
                                        decode(aresp.dt_analysis_result_tstz,
                                               NULL,
                                               l_msg_del,
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           aresp.dt_analysis_result_tstz,
                                                                           i_prof.institution,
                                                                           i_prof.software)) ||
                                        decode(aresp.dt_analysis_result_tstz_new,
                                               NULL,
                                               NULL,
                                               '§' || pk_date_utils.date_char_tsz(i_lang,
                                                                                  aresp.dt_analysis_result_tstz_new,
                                                                                  i_prof.institution,
                                                                                  i_prof.software))))) dt_result,
                   decode(cnt,
                          rn,
                          decode(aresp.flg_result_origin,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T064'), '') ||
                                 pk_sysdomain.get_domain(i_lang,
                                                         i_prof,
                                                         'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                         aresp.flg_result_origin,
                                                         NULL)),
                          decode(aresp.flg_result_origin,
                                 aresp.flg_result_origin_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T103') || '§' ||
                                        decode(aresp.flg_result_origin,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                                       aresp.flg_result_origin,
                                                                       NULL)) ||
                                        decode(aresp.flg_result_origin_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T064') ||
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                                       aresp.flg_result_origin_new,
                                                                       NULL)),
                                        decode(aresp.flg_result_origin,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                                       aresp.flg_result_origin,
                                                                       NULL)) ||
                                        decode(aresp.flg_result_origin_new,
                                               NULL,
                                               NULL,
                                               '§' || pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                                              aresp.flg_result_origin_new,
                                                                              NULL))))) result_origin,
                   decode(cnt,
                          rn,
                          decode(aresp.result_origin_notes,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T028'), '') ||
                                 aresp.result_origin_notes),
                          decode(aresp.result_origin_notes,
                                 aresp.result_origin_notes_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T081') || '§' ||
                                        decode(aresp.result_origin_notes, NULL, l_msg_del, aresp.result_origin_notes) ||
                                        decode(aresp.result_origin_notes_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T028') ||
                                               aresp.result_origin_notes_new),
                                        decode(aresp.result_origin_notes, NULL, l_msg_del, aresp.result_origin_notes) ||
                                        decode(aresp.flg_result_origin_new,
                                               NULL,
                                               NULL,
                                               '§' || aresp.result_origin_notes_new)))) result_origin_notes,
                   decode(cnt,
                          rn,
                          decode(aresp.result_notes,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T132'), '') ||
                                 aresp.result_notes),
                          decode(aresp.result_notes,
                                 aresp.result_notes_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T151') || '§' ||
                                        decode(aresp.result_notes, NULL, l_msg_del, aresp.result_notes) ||
                                        decode(aresp.result_notes_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T132') ||
                                               aresp.result_notes_new),
                                        decode(aresp.result_notes, NULL, l_msg_del, aresp.result_notes) ||
                                        decode(aresp.result_notes_new, NULL, NULL, '§' || aresp.result_notes_new)))) result_notes,
                   CASE
                        WHEN result_count.id_analysis_result_count > 1 THEN
                         NULL
                        ELSE
                         decode(cnt,
                                rn,
                                decode(aresp.flg_relevant,
                                       NULL,
                                       NULL,
                                       decode(i_flg_report,
                                              pk_lab_tests_constant.g_no,
                                              aa_code_messages('LAB_TESTS_T234'),
                                              '') || pk_sysdomain.get_domain(i_lang,
                                                                             i_prof,
                                                                             'ANALYSIS_RESULT_PAR.FLG_RELEVANT',
                                                                             aresp.flg_relevant,
                                                                             NULL)),
                                decode(aresp.flg_relevant,
                                       aresp.flg_relevant_new,
                                       NULL,
                                       decode(i_flg_report,
                                              pk_lab_tests_constant.g_no,
                                              aa_code_messages('LAB_TESTS_T235') || '§' ||
                                              decode(aresp.flg_relevant,
                                                     NULL,
                                                     l_msg_del,
                                                     pk_sysdomain.get_domain(i_lang,
                                                                             i_prof,
                                                                             'ANALYSIS_RESULT_PAR.FLG_RELEVANT',
                                                                             aresp.flg_relevant,
                                                                             NULL)) ||
                                              decode(aresp.flg_relevant_new,
                                                     NULL,
                                                     NULL,
                                                     chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T234') ||
                                                     pk_sysdomain.get_domain(i_lang,
                                                                             i_prof,
                                                                             'ANALYSIS_RESULT_PAR.FLG_RELEVANT',
                                                                             aresp.flg_relevant_new,
                                                                             NULL)),
                                              decode(aresp.flg_relevant,
                                                     NULL,
                                                     l_msg_del,
                                                     pk_sysdomain.get_domain(i_lang,
                                                                             i_prof,
                                                                             'ANALYSIS_RESULT_PAR.FLG_RELEVANT',
                                                                             aresp.flg_relevant,
                                                                             NULL)) ||
                                              decode(aresp.flg_relevant_new,
                                                     NULL,
                                                     NULL,
                                                     '§' || pk_sysdomain.get_domain(i_lang,
                                                                                    i_prof,
                                                                                    'ANALYSIS_RESULT_PAR.FLG_RELEVANT',
                                                                                    aresp.flg_relevant_new,
                                                                                    NULL)))))
                    END desc_relevant,
                   decode(cnt,
                          rn,
                          NULL,
                          decode(aresp.review_notes,
                                 aresp.review_notes_new,
                                 NULL,
                                 decode(aresp.review_notes,
                                        NULL,
                                        NULL,
                                        decode(i_flg_report,
                                               pk_lab_tests_constant.g_no,
                                               aa_code_messages('LAB_TESTS_T104') || '§' || aresp.review_notes ||
                                               decode(aresp.review_notes_new,
                                                      NULL,
                                                      NULL,
                                                      chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T065') ||
                                                      aresp.review_notes_new),
                                               decode(aresp.review_notes,
                                                      NULL,
                                                      NULL,
                                                      aresp.review_notes ||
                                                      decode(aresp.review_notes_new,
                                                             NULL,
                                                             NULL,
                                                             '§' || aresp.review_notes_new)))))) review_notes
              FROM (SELECT row_number() over(PARTITION BY t.id_harvest ORDER BY t.dt_analysis_res_par_hist DESC NULLS FIRST, t.dt_analysis_result_par_tstz DESC) rn,
                           COUNT(1) over(PARTITION BY t.id_harvest) cnt,
                           t.dt_analysis_res_par_hist,
                           t.id_analysis_req_det,
                           t.id_analysis,
                           t.id_sample_type,
                           first_value(t.id_analysis_req_det) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_analysis_req_det_new,
                           t.id_analysis_result,
                           first_value(t.id_analysis_result) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_analysis_result_new,
                           t.id_arp_parent,
                           t.id_episode,
                           t.dt_harvest_tstz,
                           t.id_professional,
                           first_value(t.id_professional) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_professional_new,
                           t.dt_analysis_result_tstz,
                           first_value(t.dt_analysis_result_tstz) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_analysis_result_tstz_new,
                           dbms_lob.substr(t.notes, 3800) result_notes,
                           first_value(dbms_lob.substr(t.notes, 3800)) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) result_notes_new,
                           t.flg_result_origin,
                           first_value(t.flg_result_origin) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_result_origin_new,
                           t.result_origin_notes,
                           first_value(t.result_origin_notes) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) result_origin_notes_new,
                           t.flg_status,
                           first_value(t.flg_status) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_status_new,
                           dbms_lob.substr(t.desc_analysis_result, 3800) desc_analysis_result,
                           first_value(dbms_lob.substr(t.desc_analysis_result, 3800)) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) desc_analysis_result_new,
                           t.analysis_result_value,
                           first_value(t.analysis_result_value) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) analysis_result_value_new,
                           t.id_unit_measure,
                           first_value(t.id_unit_measure) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_unit_measure_new,
                           t.desc_unit_measure,
                           first_value(t.desc_unit_measure) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) desc_unit_measure_new,
                           t.id_result_status,
                           first_value(t.id_result_status) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_result_status_new,
                           t.ref_val,
                           first_value(t.ref_val) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_new,
                           t.ref_val_min_str,
                           first_value(t.ref_val_min_str) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_min_str_new,
                           t.ref_val_min,
                           first_value(t.ref_val_min) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_min_new,
                           t.ref_val_max_str,
                           first_value(t.ref_val_max_str) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_max_str_new,
                           t.ref_val_max,
                           first_value(t.ref_val_max) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_max_new,
                           t.laboratory_short_desc,
                           first_value(t.laboratory_short_desc) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) laboratory_short_desc_new,
                           dbms_lob.substr(t.parameter_notes, 3800) parameter_notes,
                           first_value(dbms_lob.substr(t.parameter_notes, 3800)) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) parameter_notes_new,
                           dbms_lob.substr(t.interface_notes, 3800) interface_notes,
                           first_value(dbms_lob.substr(t.interface_notes, 3800)) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) interface_notes_new,
                           t.flg_relevant,
                           first_value(t.flg_relevant) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_relevant_new,
                           dbms_lob.substr(t.notes_doctor_registry, 3800) review_notes,
                           first_value(dbms_lob.substr(t.notes_doctor_registry, 3800)) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) review_notes_new,
                           t.id_professional_upd,
                           first_value(t.id_professional_upd) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_professional_upd_new,
                           t.dt_analysis_result_par_upd,
                           first_value(t.dt_analysis_result_par_upd) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_analysis_result_par_upd_new
                      FROM (SELECT NULL dt_analysis_res_par_hist,
                                   NULL dt_analysis_result_hist,
                                   ar.id_analysis_req_det,
                                   ar.id_analysis,
                                   ar.id_sample_type,
                                   ar.id_analysis_result,
                                   aresp.id_arp_parent,
                                   ar.id_episode,
                                   h.id_harvest,
                                   h.dt_harvest_tstz,
                                   aresp.id_professional,
                                   ar.dt_analysis_result_tstz,
                                   ar.flg_result_origin,
                                   ar.result_origin_notes,
                                   ar.flg_status,
                                   ar.notes,
                                   aresp.dt_analysis_result_par_tstz,
                                   to_clob(decode(pk_utils.is_number(dbms_lob.substr(aresp.desc_analysis_result, 3800)),
                                                  pk_lab_tests_constant.g_yes,
                                                  '',
                                                  decode(aresp.id_analysis_desc, NULL, chr(10) || chr(9) || chr(9), '')) ||
                                           aresp.desc_analysis_result) desc_analysis_result,
                                   (aresp.comparator || aresp.analysis_result_value_1 || aresp.separator ||
                                   aresp.analysis_result_value_2) analysis_result_value,
                                   aresp.id_unit_measure,
                                   aresp.desc_unit_measure,
                                   aresp.id_result_status,
                                   aresp.ref_val,
                                   aresp.ref_val_min_str,
                                   aresp.ref_val_min,
                                   aresp.ref_val_max_str,
                                   aresp.ref_val_max,
                                   aresp.parameter_notes,
                                   aresp.interface_notes,
                                   aresp.laboratory_short_desc,
                                   aresp.flg_relevant,
                                   aresp.notes_doctor_registry,
                                   nvl(aresp.id_prof_read, aresp.id_professional_upd) id_professional_upd,
                                   nvl(aresp.dt_doctor_registry_tstz, aresp.dt_analysis_result_par_upd) dt_analysis_result_par_upd
                              FROM analysis_result ar,
                                   (SELECT *
                                      FROM (SELECT aresp.*,
                                                   row_number() over(PARTITION BY ar.id_harvest, ar.id_analysis_req_det ORDER BY aresp.dt_ins_result_tstz DESC) rn
                                              FROM analysis_result_par aresp, analysis_result ar
                                             WHERE aresp.id_analysis_result = ar.id_analysis_result
                                               AND ar.id_analysis_req_det = i_analysis_req_det)
                                     WHERE rn = 1) aresp,
                                   harvest h
                             WHERE ar.id_analysis_req_det = i_analysis_req_det
                               AND ar.id_analysis_result = aresp.id_analysis_result
                               AND ar.id_harvest = h.id_harvest
                            UNION ALL
                            SELECT aresph.dt_analysis_res_par_hist,
                                   arh.dt_analysis_result_hist,
                                   arh.id_analysis_req_det,
                                   arh.id_analysis,
                                   arh.id_sample_type,
                                   arh.id_analysis_result,
                                   aresph.id_arp_parent,
                                   arh.id_episode,
                                   h.id_harvest,
                                   h.dt_harvest_tstz,
                                   aresph.id_professional,
                                   arh.dt_analysis_result_tstz,
                                   arh.flg_result_origin,
                                   arh.result_origin_notes,
                                   arh.flg_status,
                                   arh.notes,
                                   aresph.dt_analysis_result_par_tstz,
                                   decode(pk_utils.is_number(dbms_lob.substr(aresph.desc_analysis_result, 3800)),
                                          pk_lab_tests_constant.g_yes,
                                          '',
                                          decode(aresph.id_analysis_desc, NULL, chr(10) || chr(9) || chr(9), '')) ||
                                   aresph.desc_analysis_result,
                                   (aresph.comparator || aresph.analysis_result_value_1 || aresph.separator ||
                                   aresph.analysis_result_value_2) analysis_result_value,
                                   aresph.id_unit_measure,
                                   aresph.desc_unit_measure,
                                   aresph.id_result_status,
                                   aresph.ref_val,
                                   aresph.ref_val_min_str,
                                   aresph.ref_val_min,
                                   aresph.ref_val_max_str,
                                   aresph.ref_val_max,
                                   aresph.parameter_notes,
                                   aresph.interface_notes,
                                   aresph.laboratory_short_desc,
                                   aresph.flg_relevant,
                                   aresph.notes_doctor_registry,
                                   nvl(aresph.id_prof_read, aresph.id_professional_upd) id_professional_upd,
                                   nvl(aresph.dt_doctor_registry_tstz, aresph.dt_analysis_result_par_upd) dt_analysis_result_par_upd
                              FROM analysis_result_hist arh,
                                   (SELECT *
                                      FROM (SELECT aresph.*,
                                                   row_number() over(PARTITION BY arh.id_harvest, arh.id_analysis_req_det ORDER BY aresph.dt_ins_result_tstz DESC) rn
                                              FROM analysis_result_par_hist aresph, analysis_result_hist arh
                                             WHERE aresph.id_analysis_result = arh.id_analysis_result
                                               AND arh.id_analysis_req_det = i_analysis_req_det)) aresph,
                                   harvest h
                             WHERE arh.id_analysis_req_det = i_analysis_req_det
                               AND arh.id_analysis_result = aresph.id_analysis_result
                               AND arh.id_harvest = h.id_harvest
                             ORDER BY dt_analysis_res_par_hist    DESC NULLS FIRST,
                                      dt_analysis_result_hist     DESC NULLS FIRST,
                                      dt_analysis_result_par_tstz DESC) t
                     ORDER BY rn DESC) aresp,
                   (SELECT arp.id_analysis_result_par, ar.id_analysis, ar.id_sample_type
                      FROM analysis_result_par arp, analysis_result ar
                     WHERE arp.id_arp_parent IS NULL
                       AND arp.id_analysis_result = ar.id_analysis_result) aresp_parent,
                   (SELECT ar.id_analysis_req_det,
                           ar.id_analysis_result,
                           COUNT(ar.id_analysis_result) id_analysis_result_count
                      FROM analysis_result ar,
                           (SELECT aresp.id_analysis_result
                              FROM analysis_result_par aresp, analysis_req_par arp
                             WHERE aresp.id_analysis_req_par = arp.id_analysis_req_par
                               AND arp.id_analysis_req_det = i_analysis_req_det) aresp
                     WHERE ar.id_analysis_req_det = i_analysis_req_det
                       AND (ar.flg_status != pk_lab_tests_constant.g_analysis_cancel OR ar.flg_status IS NULL)
                       AND ar.id_analysis_result = aresp.id_analysis_result
                     GROUP BY ar.id_analysis_req_det, ar.id_analysis_result) result_count
             WHERE result_count.id_analysis_result = aresp.id_analysis_result
               AND aresp.id_arp_parent = aresp_parent.id_analysis_result_par(+)
               AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                             i_prof,
                                                                             aresp.id_analysis,
                                                                             pk_lab_tests_constant.g_infectious_diseases_results)
                      FROM dual) = pk_alert_constant.g_yes;
    
        g_error := 'OPEN O_LAB_TEST_DOC';
        OPEN o_lab_test_doc FOR
            SELECT ama.id_analysis_req_det,
                   ama.id_doc_external,
                   l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, ama.id_prof_last_update) ||
                   decode(pk_prof_utils.get_spec_signature(i_lang,
                                                           i_prof,
                                                           ama.id_prof_last_update,
                                                           ama.dt_last_update_tstz,
                                                           NULL),
                          NULL,
                          '; ',
                          ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                   i_prof,
                                                                   ama.id_prof_last_update,
                                                                   ama.dt_last_update_tstz,
                                                                   NULL) || '); ') ||
                   pk_date_utils.date_char_tsz(i_lang, ama.dt_last_update_tstz, i_prof.institution, i_prof.software) registry,
                   decode(de.title,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T217'), '') ||
                          de.title) doc_title,
                   decode(de.desc_doc_ori_type,
                          NULL,
                          decode(de.id_doc_ori_type,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T224'), '') ||
                                 pk_translation.get_translation(i_lang,
                                                                'DOC_ORI_TYPE.CODE_DOC_ORI_TYPE.' || de.id_doc_ori_type)),
                          decode(i_flg_report,
                                 pk_lab_tests_constant.g_no,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T224'), '') ||
                                 de.desc_doc_ori_type)) doc_original_type,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T047'), '') ||
                   pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', de.flg_status, i_lang) desc_status,
                   decode(de.dt_emited,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T215'), '') ||
                          pk_date_utils.dt_chr(i_lang, de.dt_emited, i_prof)) dt_doc,
                   decode(de.desc_perf_by,
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T214'), '') ||
                          de.desc_perf_by) perform_by,
                   decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T216'), '') ||
                   pk_doc.get_count_image(i_lang, i_prof, ama.id_doc_external) num_img,
                   decode(de.desc_doc_original,
                          NULL,
                          decode(de.id_doc_original,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T219'), '') ||
                                 pk_translation.get_translation(i_lang,
                                                                'DOC_ORIGINAL.CODE_DOC_ORIGINAL.' || de.id_doc_original)),
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T219'), '') ||
                          de.desc_doc_original) doc_original_desc,
                   decode(de.desc_doc_destination,
                          NULL,
                          decode(de.id_doc_destination,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T220'), '') ||
                                 pk_translation.get_translation(i_lang,
                                                                'DOC_TYPE.CODE_DOC_DESTINATION.' || de.id_doc_destination)),
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T220'), '') ||
                          de.desc_doc_destination) doc_original_destination,
                   decode(pk_doc.get_doc_last_comment(i_lang, i_prof, ama.id_doc_external),
                          NULL,
                          NULL,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T059'), '') ||
                          pk_doc.get_doc_last_comment(i_lang, i_prof, ama.id_doc_external)) notes,
                   pk_doc.get_main_thumb_url(i_lang, i_prof, ama.id_doc_external) thumbnail,
                   pk_doc.get_count_image(i_lang, i_prof, ama.id_doc_external) thumbnail_icon,
                   pk_date_utils.date_send_tsz(i_lang, ama.dt_last_update_tstz, i_prof) dt_ord
              FROM analysis_media_archive ama, doc_external de
             WHERE ama.id_analysis_req_det = i_analysis_req_det
               AND ama.flg_type = pk_lab_tests_constant.g_media_archive_analysis_doc
               AND ama.id_doc_external = de.id_doc_external
            UNION ALL
            SELECT ama.id_analysis_req_det,
                   ama.id_doc_external,
                   l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, ama.id_prof_last_update) ||
                   decode(pk_prof_utils.get_spec_signature(i_lang,
                                                           i_prof,
                                                           ama.id_prof_last_update,
                                                           ama.dt_last_update_tstz,
                                                           NULL),
                          NULL,
                          '; ',
                          ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                   i_prof,
                                                                   ama.id_prof_last_update,
                                                                   ama.dt_last_update_tstz,
                                                                   NULL) || '); ') ||
                   pk_date_utils.date_char_tsz(i_lang, ama.dt_last_update_tstz, i_prof.institution, i_prof.software) registry,
                   NULL doc_title,
                   NULL doc_original_type,
                   decode(i_flg_report,
                          pk_lab_tests_constant.g_no,
                          aa_code_messages('LAB_TESTS_T108') || '§' ||
                          pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', pk_lab_tests_constant.g_inactive, i_lang) ||
                          chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T047') ||
                          pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', pk_lab_tests_constant.g_active, i_lang),
                          pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', pk_lab_tests_constant.g_inactive, i_lang) || '§' ||
                          pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', pk_lab_tests_constant.g_active, i_lang)) desc_status,
                   NULL dt_doc,
                   NULL perform_by,
                   NULL num_img,
                   NULL doc_original_desc,
                   NULL doc_original_destination,
                   NULL notes,
                   NULL thumbnail,
                   NULL thumbnail_icon,
                   pk_date_utils.date_send_tsz(i_lang, ama.dt_last_update_tstz, i_prof) dt_ord
              FROM analysis_media_archive ama
             WHERE ama.id_analysis_req_det = i_analysis_req_det
               AND ama.flg_type = pk_lab_tests_constant.g_media_archive_analysis_doc
               AND ama.flg_status = pk_lab_tests_constant.g_inactive
             ORDER BY id_doc_external, dt_ord DESC;
    
        g_error := 'OPEN O_LAB_TEST_REVIEW';
        OPEN o_lab_test_review FOR
            SELECT ard.id_analysis_req_det,
                   l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, tr.id_professional) ||
                   decode(pk_prof_utils.get_spec_signature(i_lang,
                                                           i_prof,
                                                           tr.id_professional,
                                                           tr.dt_creation_tstz,
                                                           NULL),
                          NULL,
                          '; ',
                          ' (' ||
                          pk_prof_utils.get_spec_signature(i_lang, i_prof, tr.id_professional, tr.dt_creation_tstz, NULL) ||
                          '); ') ||
                   pk_date_utils.date_char_tsz(i_lang, tr.dt_creation_tstz, i_prof.institution, i_prof.software) registry,
                   decode(cnt,
                          rn,
                          decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T045'), '') ||
                          pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                   i_prof,
                                                                   pk_lab_tests_constant.g_analysis_alias,
                                                                   'ANALYSIS.CODE_ANALYSIS.' || ard.id_analysis,
                                                                   'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || ard.id_sample_type,
                                                                   NULL),
                          NULL) desc_analysis,
                   decode(cnt,
                          rn,
                          decode(tr.desc_tests_review,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T065'), '') ||
                                 tr.desc_tests_review),
                          decode(tr.desc_tests_review,
                                 tr.desc_tests_review_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_lab_tests_constant.g_no,
                                        aa_code_messages('LAB_TESTS_T104') || '§' ||
                                        decode(tr.desc_tests_review, NULL, l_msg_del, tr.desc_tests_review) ||
                                        decode(tr.desc_tests_review_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T065') ||
                                               tr.desc_tests_review_new),
                                        decode(tr.desc_tests_review, NULL, l_msg_del, tr.desc_tests_review) ||
                                        decode(tr.desc_tests_review_new, NULL, NULL, '§' || tr.desc_tests_review_new)))) review_notes,
                   pk_date_utils.date_send_tsz(i_lang, tr.dt_creation_tstz, i_prof) dt_ord
              FROM (SELECT row_number() over(PARTITION BY t.id_request ORDER BY t.dt_creation_tstz DESC) rn,
                           COUNT(1) over(PARTITION BY t.id_request) cnt,
                           t.id_request,
                           t.id_tests_review,
                           first_value(t.id_tests_review) over(PARTITION BY id_request ORDER BY dt_creation_tstz rows BETWEEN 1 preceding AND CURRENT ROW) id_tests_review_new,
                           t.desc_tests_review,
                           first_value(t.desc_tests_review) over(PARTITION BY id_request ORDER BY dt_creation_tstz rows BETWEEN 1 preceding AND CURRENT ROW) desc_tests_review_new,
                           t.id_professional,
                           first_value(t.id_professional) over(PARTITION BY id_request ORDER BY dt_creation_tstz rows BETWEEN 1 preceding AND CURRENT ROW) id_professional_new,
                           t.dt_creation_tstz,
                           first_value(t.dt_creation_tstz) over(PARTITION BY id_request ORDER BY dt_creation_tstz rows BETWEEN 1 preceding AND CURRENT ROW) dt_creation_tstz_new
                      FROM (SELECT tr.id_tests_review,
                                   tr.id_request,
                                   tr.desc_tests_review,
                                   tr.flg_type,
                                   tr.id_professional,
                                   tr.dt_creation_tstz
                              FROM tests_review tr
                             WHERE tr.id_request = i_analysis_req_det
                               AND tr.flg_type = pk_medical_decision.g_tests_type_analisys) t
                     ORDER BY rn) tr,
                   analysis_req_det ard
             WHERE ard.id_analysis_req_det = i_analysis_req_det
               AND ard.id_analysis_req_det = tr.id_request
             ORDER BY dt_ord DESC;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_DETAIL_HISTORY',
                                              o_error);
            pk_types.open_my_cursor(o_lab_test_co_sign);
            pk_types.open_my_cursor(o_lab_test_harvest);
            pk_types.open_my_cursor(o_lab_test_result);
            pk_types.open_my_cursor(o_lab_test_doc);
            pk_types.open_my_cursor(o_lab_test_review);
            RETURN FALSE;
    END get_lab_test_detail_history;

    FUNCTION get_lab_test_order
    (
        i_lang                        IN language.id_language%TYPE,
        i_prof                        IN profissional,
        i_episode                     IN episode.id_episode%TYPE,
        i_analysis_req_det            IN analysis_req_det.id_analysis_req_det%TYPE,
        o_lab_test_order              OUT pk_types.cursor_type,
        o_lab_test_clinical_questions OUT pk_types.cursor_type,
        o_error                       OUT t_error_out
    ) RETURN BOOLEAN IS
    
        TYPE t_code_messages IS TABLE OF VARCHAR2(1000 CHAR) INDEX BY sys_message.code_message%TYPE;
    
        aa_code_messages t_code_messages;
    
        va_code_messages table_varchar := table_varchar('LAB_TESTS_T045',
                                                        'LAB_TESTS_T046',
                                                        'LAB_TESTS_T012',
                                                        'LAB_TESTS_T013',
                                                        'LAB_TESTS_T048',
                                                        'LAB_TESTS_T047',
                                                        'LAB_TESTS_T049',
                                                        'LAB_TESTS_T050',
                                                        'LAB_TESTS_T017',
                                                        'LAB_TESTS_T043',
                                                        'LAB_TESTS_T168',
                                                        'LAB_TESTS_T022',
                                                        'LAB_TESTS_T023',
                                                        'LAB_TESTS_T025',
                                                        'LAB_TESTS_T026',
                                                        'LAB_TESTS_T028',
                                                        'LAB_TESTS_T030',
                                                        'LAB_TESTS_T229',
                                                        'LAB_TESTS_T033',
                                                        'LAB_TESTS_T032',
                                                        'LAB_TESTS_T200',
                                                        'LAB_TESTS_T201',
                                                        'LAB_TESTS_T035',
                                                        'LAB_TESTS_T036',
                                                        'LAB_TESTS_T037',
                                                        'LAB_TESTS_T185',
                                                        'LAB_TESTS_T053',
                                                        'LAB_TESTS_T054',
                                                        'LAB_TESTS_T055');
    
        l_msg_date sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAM_REQ_M002');
    
        l_health_insurance sys_config.value%TYPE := pk_sysconfig.get_config('MCDT_HEALTH_INSURANCE', i_prof);
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN va_code_messages.first .. va_code_messages.last
        LOOP
            aa_code_messages(va_code_messages(i)) := '<b>' ||
                                                     pk_message.get_message(i_lang, i_prof, va_code_messages(i)) ||
                                                     '</b> ';
        END LOOP;
    
        g_error := 'OPEN O_LAB_TEST_ORDER';
        OPEN o_lab_test_order FOR
            WITH cso_table AS
             (SELECT *
                FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                    i_prof,
                                                                    i_episode,
                                                                    NULL,
                                                                    NULL,
                                                                    NULL,
                                                                    i_analysis_req_det)))
            SELECT /*+ opt_estimate(table cso rows=1) opt_estimate(table csc rows=2) */
             ard.id_analysis_req_det,
             pk_date_utils.date_char_tsz(i_lang, ar.dt_req_tstz, i_prof.institution, i_prof.software) dt_reg,
             pk_prof_utils.get_name_signature(i_lang, i_prof, ar.id_prof_writes) prof_reg,
             pk_prof_utils.get_spec_signature(i_lang, i_prof, ar.id_prof_writes, ar.dt_req_tstz, ar.id_episode) prof_spec_reg,
             aa_code_messages('LAB_TESTS_T045') ||
             pk_lab_tests_utils.get_alias_translation(i_lang,
                                                      i_prof,
                                                      pk_lab_tests_constant.g_analysis_alias,
                                                      'ANALYSIS.CODE_ANALYSIS.' || ard.id_analysis,
                                                      'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || ard.id_sample_type,
                                                      NULL) desc_analysis,
             aa_code_messages('LAB_TESTS_T046') || ard.id_analysis_req num_order,
             decode(pk_diagnosis.concat_diag(i_lang, NULL, ard.id_analysis_req_det, NULL, i_prof),
                    NULL,
                    NULL,
                    aa_code_messages('LAB_TESTS_T012') ||
                    pk_diagnosis.concat_diag(i_lang, NULL, ard.id_analysis_req_det, NULL, i_prof)) desc_diagnosis,
             decode(ard.id_clinical_purpose,
                    NULL,
                    NULL,
                    aa_code_messages('LAB_TESTS_T013') ||
                    decode(ard.id_clinical_purpose,
                           0,
                           ard.clinical_purpose_notes,
                           pk_translation.get_translation(i_lang,
                                                          'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                          ard.id_clinical_purpose))) clinical_purpose,
             decode(ard.flg_urgency,
                    NULL,
                    NULL,
                    aa_code_messages('LAB_TESTS_T048') ||
                    pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ_DET.FLG_URGENCY', ard.flg_urgency, NULL)) priority,
             aa_code_messages('LAB_TESTS_T047') ||
             decode(ard.flg_referral,
                    pk_lab_tests_constant.g_flg_referral_r,
                    pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_REFERRAL', ard.flg_referral, i_lang),
                    pk_lab_tests_constant.g_flg_referral_s,
                    pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_REFERRAL', ard.flg_referral, i_lang),
                    pk_lab_tests_constant.g_flg_referral_i,
                    pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_REFERRAL', ard.flg_referral, i_lang),
                    decode(ard.flg_status,
                           pk_lab_tests_constant.g_analysis_sos,
                           pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ_DET.FLG_STATUS', ard.flg_status, NULL),
                           pk_sysdomain.get_domain(i_lang,
                                                   i_prof,
                                                   'ANALYSIS_REQ_DET.FLG_STATUS',
                                                   pk_lab_tests_constant.g_analysis_req,
                                                   NULL))) desc_status,
             decode(pk_api_order_sets.get_order_set_title(i_lang,
                                                          i_prof,
                                                          ard.id_analysis_req_det,
                                                          pk_order_sets.g_odst_task_analysis),
                    NULL,
                    NULL,
                    aa_code_messages('LAB_TESTS_T049') ||
                    pk_api_order_sets.get_order_set_title(i_lang,
                                                          i_prof,
                                                          ard.id_analysis_req_det,
                                                          pk_order_sets.g_odst_task_analysis)) title_order_set,
             decode(pk_tde_db.get_task_depend_str(i_lang, i_prof, ard.id_task_dependency),
                    NULL,
                    NULL,
                    aa_code_messages('LAB_TESTS_T050') ||
                    pk_tde_db.get_task_depend_str(i_lang, i_prof, ard.id_task_dependency)) task_depend,
             aa_code_messages('LAB_TESTS_T168') ||
             decode(ard.flg_time_harvest,
                    pk_lab_tests_constant.g_flg_time_e,
                    pk_sysdomain.get_domain(i_lang,
                                            i_prof,
                                            'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                            ard.flg_time_harvest,
                                            NULL) || ' (' ||
                    pk_date_utils.date_char_tsz(i_lang, ard.dt_target_tstz, i_prof.institution, i_prof.software) || ')',
                    pk_lab_tests_constant.g_flg_time_b,
                    pk_sysdomain.get_domain(i_lang,
                                            i_prof,
                                            'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                            ard.flg_time_harvest,
                                            NULL) ||
                    decode(ard.dt_target_tstz,
                           NULL,
                           decode(ard.dt_schedule,
                                  NULL,
                                  '',
                                  '; ' ||
                                  pk_date_utils.date_char_tsz(i_lang, ard.dt_schedule, i_prof.institution, i_prof.software) || ' ' ||
                                  l_msg_date),
                           ' (' ||
                           pk_date_utils.date_char_tsz(i_lang, ard.dt_target_tstz, i_prof.institution, i_prof.software) || ')'),
                    pk_lab_tests_constant.g_flg_time_d,
                    pk_sysdomain.get_domain(i_lang,
                                            i_prof,
                                            'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                            ard.flg_time_harvest,
                                            NULL) ||
                    decode(ard.dt_target_tstz,
                           NULL,
                           decode(ard.dt_schedule,
                                  NULL,
                                  '',
                                  '; ' ||
                                  pk_date_utils.date_char_tsz(i_lang, ard.dt_schedule, i_prof.institution, i_prof.software) || ' ' ||
                                  l_msg_date),
                           ' (' ||
                           pk_date_utils.date_char_tsz(i_lang, ard.dt_target_tstz, i_prof.institution, i_prof.software) || ')'),
                    pk_sysdomain.get_domain(i_lang,
                                            i_prof,
                                            'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                            ard.flg_time_harvest,
                                            NULL)) desc_time,
             decode(ard.dt_final_target_tstz,
                    NULL,
                    NULL,
                    aa_code_messages('LAB_TESTS_T043') ||
                    pk_date_utils.date_char_tsz(i_lang, ard.dt_final_target_tstz, i_prof.institution, i_prof.software)) desc_time_limit,
             decode(ard.id_order_recurrence,
                    NULL,
                    NULL,
                    aa_code_messages('LAB_TESTS_T017') ||
                    pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang, i_prof, ard.id_order_recurrence)) order_recurrence,
             decode(ard.flg_prn,
                    NULL,
                    NULL,
                    aa_code_messages('LAB_TESTS_T022') ||
                    pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_PRN', ard.flg_prn, i_lang)) prn,
             decode(dbms_lob.getlength(ard.notes_prn),
                    NULL,
                    to_clob(''),
                    aa_code_messages('LAB_TESTS_T023') || ard.notes_prn) notes_prn,
             decode(ard.flg_fasting,
                    NULL,
                    NULL,
                    aa_code_messages('LAB_TESTS_T025') ||
                    pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_FASTING', ard.flg_fasting, i_lang)) fasting,
             decode(dbms_lob.getlength(ard.notes_patient),
                    NULL,
                    to_clob(''),
                    aa_code_messages('LAB_TESTS_T026') || ard.notes_patient) notes_patient,
             decode(ard.id_room,
                    NULL,
                    aa_code_messages('LAB_TESTS_T030') ||
                    pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_COL_INST', ard.flg_col_inst, i_lang),
                    aa_code_messages('LAB_TESTS_T030') ||
                    nvl((SELECT r.desc_room
                          FROM room r
                         WHERE r.id_room = ard.id_room),
                        pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || ard.id_room))) collection_location,
             decode(ard.notes_scheduler, NULL, NULL, aa_code_messages('LAB_TESTS_T032') || ard.notes_scheduler) notes_scheduler,
             decode(ard.id_exec_institution,
                    NULL,
                    decode(ard.id_room_req,
                           NULL,
                           NULL,
                           aa_code_messages('LAB_TESTS_T028') ||
                           nvl((SELECT r.desc_room
                                 FROM room r
                                WHERE r.id_room = ard.id_room_req),
                               pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || ard.id_room_req))),
                    aa_code_messages('LAB_TESTS_T028') ||
                    pk_translation.get_translation(i_lang, 'AB_INSTITUTION.CODE_INSTITUTION.' || ard.id_exec_institution)) perform_location,
             decode(ard.notes_tech, NULL, NULL, aa_code_messages('LAB_TESTS_T033') || ard.notes_tech) notes_technician,
             decode(ard.notes, NULL, NULL, aa_code_messages('LAB_TESTS_T229') || ard.notes) notes,
             decode(ars.prof_cc, NULL, NULL, aa_code_messages('LAB_TESTS_T200') || ars.prof_cc) prof_cc,
             decode(ars.prof_bcc, NULL, NULL, aa_code_messages('LAB_TESTS_T201') || ars.prof_bcc) prof_bcc,
             decode(cso.desc_prof_ordered_by,
                    NULL,
                    NULL,
                    aa_code_messages('LAB_TESTS_T053') || cso.desc_prof_ordered_by) prof_order,
             decode(cso.dt_ordered_by,
                    NULL,
                    NULL,
                    aa_code_messages('LAB_TESTS_T054') ||
                    pk_date_utils.date_char_tsz(i_lang, cso.dt_ordered_by, i_prof.institution, i_prof.software)) dt_order,
             decode(cso.desc_order_type, NULL, NULL, aa_code_messages('LAB_TESTS_T055') || cso.desc_order_type) order_type,
             decode(l_health_insurance,
                    pk_lab_tests_constant.g_no,
                    NULL,
                    decode(ard.id_pat_health_plan,
                           NULL,
                           NULL,
                           aa_code_messages('LAB_TESTS_T035') ||
                           pk_adt.get_pat_health_plan_info(i_lang, i_prof, ard.id_pat_health_plan, 'F'))) financial_entity,
             decode(l_health_insurance,
                    pk_lab_tests_constant.g_no,
                    NULL,
                    decode(ard.id_pat_health_plan,
                           NULL,
                           NULL,
                           aa_code_messages('LAB_TESTS_T036') ||
                           pk_adt.get_pat_health_plan_info(i_lang, i_prof, ard.id_pat_health_plan, 'H'))) health_plan,
             decode(l_health_insurance,
                    pk_lab_tests_constant.g_no,
                    NULL,
                    decode(ard.id_pat_health_plan,
                           NULL,
                           NULL,
                           aa_code_messages('LAB_TESTS_T037') ||
                           pk_adt.get_pat_health_plan_info(i_lang, i_prof, ard.id_pat_health_plan, 'N'))) insurance_number,
             decode(l_health_insurance,
                    pk_lab_tests_constant.g_no,
                    NULL,
                    decode(ard.id_pat_exemption,
                           NULL,
                           NULL,
                           aa_code_messages('LAB_TESTS_T185') ||
                           pk_adt.get_pat_exemption_detail(i_lang, i_prof, ard.id_pat_exemption))) exemption,
             pk_date_utils.date_send_tsz(i_lang, ar.dt_req_tstz, i_prof) dt_ord
              FROM analysis_req_det ard,
                   analysis_req ar,
                   (SELECT id_analysis_req_det,
                           REPLACE(decode(prof_cc,
                                          NULL,
                                          email_prof_cc,
                                          decode(email_prof_cc, NULL, prof_cc, prof_cc || '; ' || email_prof_cc)),
                                   '@',
                                   '&#64;') prof_cc,
                           REPLACE(decode(prof_bcc,
                                          NULL,
                                          email_prof_bcc,
                                          decode(email_prof_bcc, NULL, prof_bcc, prof_bcc || '; ' || email_prof_bcc)),
                                   '@',
                                   '&#64;') prof_bcc
                      FROM (SELECT ars.id_analysis_req_det,
                                   substr(concatenate(pk_prof_utils.get_name_signature(i_lang, i_prof, ars.id_prof_cc) ||
                                                      nvl2(ars.id_prof_cc, '; ', '')),
                                          1,
                                          length(concatenate(pk_prof_utils.get_name_signature(i_lang,
                                                                                              i_prof,
                                                                                              ars.id_prof_cc) ||
                                                             nvl2(ars.id_prof_cc, '; ', ''))) - 2) prof_cc,
                                   substr(concatenate(ars.email_cc || nvl2(ars.email_cc, '; ', '')),
                                          1,
                                          length(concatenate(ars.email_cc || nvl2(ars.email_cc, '; ', ''))) - 2) email_prof_cc,
                                   substr(concatenate(pk_prof_utils.get_name_signature(i_lang, i_prof, ars.id_prof_bcc) ||
                                                      nvl2(ars.id_prof_bcc, '; ', '')),
                                          1,
                                          length(concatenate(pk_prof_utils.get_name_signature(i_lang,
                                                                                              i_prof,
                                                                                              ars.id_prof_bcc) ||
                                                             nvl2(ars.id_prof_bcc, '; ', ''))) - 2) prof_bcc,
                                   substr(concatenate(ars.email_bcc || nvl2(ars.email_bcc, '; ', '')),
                                          1,
                                          length(concatenate(ars.email_bcc || nvl2(ars.email_bcc, '; ', ''))) - 2) email_prof_bcc
                              FROM analysis_result_send ars
                             WHERE ars.id_analysis_req_det = i_analysis_req_det
                               AND ars.flg_status != pk_lab_tests_constant.g_analysis_cancel
                             GROUP BY ars.id_analysis_req_det)) ars,
                   cso_table cso,
                   cso_table csc
             WHERE ard.id_analysis_req_det = i_analysis_req_det
               AND ard.id_analysis_req = ar.id_analysis_req
               AND ard.id_analysis_req_det = ars.id_analysis_req_det(+)
               AND ard.id_co_sign_order = cso.id_co_sign_hist(+)
               AND ard.id_co_sign_cancel = csc.id_co_sign_hist(+);
    
        g_error := 'OPEN O_LAB_TEST_CLINICAL_QUESTIONS';
        OPEN o_lab_test_clinical_questions FOR
            SELECT id_analysis_req_det, desc_clinical_question, to_clob(desc_response) desc_response
              FROM (SELECT DISTINCT aqr1.id_analysis_req_det,
                                    '<b>' || pk_mcdt.get_questionnaire_alias(i_lang,
                                                                             i_prof,
                                                                             'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' ||
                                                                             aqr1.id_questionnaire) || ':</b>' desc_clinical_question,
                                    decode(aqr.notes,
                                           NULL,
                                           decode(aqr1.desc_response, NULL, '---', aqr1.desc_response),
                                           pk_lab_tests_utils.get_lab_test_response(i_lang, i_prof, aqr.notes)) desc_response,
                                    pk_lab_tests_utils.get_lab_test_question_rank(i_lang,
                                                                                  i_prof,
                                                                                  ard.id_analysis,
                                                                                  ard.id_sample_type,
                                                                                  aqr1.id_questionnaire,
                                                                                  pk_lab_tests_constant.g_analysis_cq_on_order) rank
                      FROM (SELECT aqr.id_analysis_req_det,
                                   aqr.id_questionnaire,
                                   listagg(pk_mcdt.get_response_alias(i_lang,
                                                                      i_prof,
                                                                      'RESPONSE.CODE_RESPONSE.' || aqr.id_response),
                                           '; ') within GROUP(ORDER BY aqr.id_response) desc_response,
                                   aqr.dt_last_update_tstz,
                                   row_number() over(PARTITION BY aqr.id_questionnaire ORDER BY aqr.dt_last_update_tstz DESC NULLS FIRST) rn
                              FROM analysis_question_response aqr
                             WHERE aqr.id_analysis_req_det = i_analysis_req_det
                               AND aqr.id_harvest IS NULL
                             GROUP BY aqr.id_analysis_req_det, aqr.id_questionnaire, aqr.dt_last_update_tstz) aqr1,
                           analysis_question_response aqr,
                           analysis_req_det ard
                     WHERE aqr1.rn = 1
                       AND aqr1.id_analysis_req_det = aqr.id_analysis_req_det
                       AND aqr1.id_questionnaire = aqr.id_questionnaire
                       AND aqr1.dt_last_update_tstz = aqr.dt_last_update_tstz
                       AND aqr.id_analysis_req_det = ard.id_analysis_req_det)
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_ORDER',
                                              o_error);
            pk_types.open_my_cursor(o_lab_test_order);
            pk_types.open_my_cursor(o_lab_test_clinical_questions);
            RETURN FALSE;
    END get_lab_test_order;

    FUNCTION get_lab_test_harvest
    (
        i_lang                        IN language.id_language%TYPE,
        i_prof                        IN profissional,
        i_analysis_req_det            IN analysis_req_det.id_analysis_req_det%TYPE,
        o_lab_test_harvest            OUT pk_types.cursor_type,
        o_lab_test_clinical_questions OUT pk_types.cursor_type,
        o_error                       OUT t_error_out
    ) RETURN BOOLEAN IS
    
        TYPE t_code_messages IS TABLE OF VARCHAR2(1000 CHAR) INDEX BY sys_message.code_message%TYPE;
    
        aa_code_messages t_code_messages;
    
        va_code_messages table_varchar := table_varchar('LAB_TESTS_T045',
                                                        'LAB_TESTS_T047',
                                                        'LAB_TESTS_T174',
                                                        'LAB_TESTS_T192',
                                                        'LAB_TESTS_T194',
                                                        'LAB_TESTS_T030',
                                                        'LAB_TESTS_T028',
                                                        'LAB_TESTS_T056',
                                                        'LAB_TESTS_T057',
                                                        'LAB_TESTS_T058',
                                                        'LAB_TESTS_T059',
                                                        'LAB_TESTS_T241',
                                                        'LAB_TESTS_T238',
                                                        'LAB_TESTS_T205',
                                                        'LAB_TESTS_T187',
                                                        'LAB_TESTS_T060');
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN va_code_messages.first .. va_code_messages.last
        LOOP
            aa_code_messages(va_code_messages(i)) := '<b>' ||
                                                     pk_message.get_message(i_lang, i_prof, va_code_messages(i)) ||
                                                     '</b> ';
        END LOOP;
    
        g_error := 'OPEN O_LAB_TEST_HARVEST';
        OPEN o_lab_test_harvest FOR
            SELECT ard.id_analysis_req_det,
                   pk_date_utils.date_char_tsz(i_lang, h.dt_harvest_reg_tstz, i_prof.institution, i_prof.software) dt_reg,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, h.id_prof_harvest) prof_reg,
                   pk_prof_utils.get_spec_signature(i_lang,
                                                    i_prof,
                                                    h.id_prof_harvest,
                                                    h.dt_harvest_reg_tstz,
                                                    h.id_episode) prof_spec_reg,
                   aa_code_messages('LAB_TESTS_T045') ||
                   substr(concatenate(pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                               i_prof,
                                                                               pk_lab_tests_constant.g_analysis_alias,
                                                                               'ANALYSIS.CODE_ANALYSIS.' ||
                                                                               ard.id_analysis,
                                                                               'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                               ard.id_sample_type,
                                                                               NULL) || '; '),
                          1,
                          length(concatenate(pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                      i_prof,
                                                                                      pk_lab_tests_constant.g_analysis_alias,
                                                                                      'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                      ard.id_analysis,
                                                                                      'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                      ard.id_sample_type,
                                                                                      NULL) || '; ')) - 2) desc_analysis,
                   aa_code_messages('LAB_TESTS_T047') ||
                   pk_sysdomain.get_domain('HARVEST.FLG_STATUS', h.flg_status, i_lang) desc_status,
                   decode(h.id_body_part,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T174') ||
                          pk_translation.get_translation(i_lang, 'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' || h.id_body_part) ||
                          decode(h.flg_laterality,
                                 NULL,
                                 NULL,
                                 ' - ' || pk_sysdomain.get_domain('HARVEST.FLG_LATERALITY', h.flg_laterality, i_lang))) desc_body_location,
                   decode(h.flg_collection_method,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T192') ||
                          pk_sysdomain.get_domain(i_lang,
                                                  i_prof,
                                                  'HARVEST.FLG_COLLECTION_METHOD',
                                                  h.flg_collection_method,
                                                  NULL)) collection_method,
                   decode(h.id_specimen_condition,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T194') ||
                          pk_translation.get_translation(i_lang,
                                                         'ANALYSIS_SPECIMEN_CONDITION.CODE_SPECIMEN_CONDITION.' ||
                                                         h.id_specimen_condition)) specimen_condition,
                   decode(h.id_room_harvest,
                          NULL,
                          aa_code_messages('LAB_TESTS_T030') ||
                          pk_sysdomain.get_domain('HARVEST.FLG_COL_INST', h.flg_col_inst, i_lang),
                          aa_code_messages('LAB_TESTS_T030') ||
                          nvl((SELECT r.desc_room
                                FROM room r
                               WHERE r.id_room = h.id_room_harvest),
                              pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || h.id_room_harvest))) collection_location,
                   aa_code_messages('LAB_TESTS_T028') ||
                   decode(nvl((SELECT r.desc_room
                                FROM room r
                               WHERE r.id_room = h.id_room_receive_tube),
                              pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || h.id_room_receive_tube)),
                          NULL,
                          pk_translation.get_translation(i_lang, 'AB_INSTITUTION.CODE_INSTITUTION.' || h.id_institution),
                          nvl((SELECT r.desc_room
                                FROM room r
                               WHERE r.id_room = h.id_room_receive_tube),
                              pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || h.id_room_receive_tube))) perform_location,
                   aa_code_messages('LAB_TESTS_T028') ||
                   nvl((SELECT r.desc_room
                         FROM room r
                        WHERE r.id_room = h.id_room_receive_tube),
                       pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || h.id_room_receive_tube)) perform_location1,
                   aa_code_messages('LAB_TESTS_T056') ||
                   pk_translation.get_translation(i_lang,
                                                  'SAMPLE_RECIPIENT.CODE_SAMPLE_RECIPIENT.' || ah.id_sample_recipient) desc_tubes,
                   aa_code_messages('LAB_TESTS_T057') || h.num_recipient num_tubes,
                   aa_code_messages('LAB_TESTS_T058') ||
                   pk_date_utils.date_char_tsz(i_lang, h.dt_harvest_tstz, i_prof.institution, i_prof.software) dt_harvest,
                   decode(h.amount,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T205') || h.amount || ' ' ||
                          pk_translation.get_translation(i_lang,
                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                         pk_lab_tests_utils.get_harvest_unit_measure(i_lang,
                                                                                                     i_prof,
                                                                                                     ah.id_sample_recipient))) collection_amount,
                   decode(h.flg_mov_tube,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T187') ||
                          pk_sysdomain.get_domain(i_lang, i_prof, 'HARVEST.FLG_MOV_TUBE', h.flg_mov_tube, NULL)) harvest_transportation,
                   decode(h.notes, NULL, NULL, aa_code_messages('LAB_TESTS_T059') || h.notes) notes,
                   decode(h.harvest_instructions,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T241') || h.harvest_instructions) harvest_instructions,
                   decode(h.id_revised_by,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T238') ||
                          pk_prof_utils.get_name_signature(i_lang, i_prof, h.id_revised_by)) revised_by,
                   decode(h.id_rep_coll_reason,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T060') ||
                          pk_translation.get_translation(i_lang,
                                                         'REPEAT_COLLECTION_REASON.CODE_REP_COLL_REASON.' ||
                                                         h.id_rep_coll_reason)) repeat_harvest_notes,
                   pk_date_utils.date_send_tsz(i_lang, h.dt_harvest_reg_tstz, i_prof) dt_ord
              FROM analysis_req_det ard, analysis_harvest ah, harvest h
             WHERE ard.id_analysis_req_det = i_analysis_req_det
               AND ard.flg_status != pk_lab_tests_constant.g_analysis_cancel
               AND ard.id_analysis_req_det = ah.id_analysis_req_det
               AND ah.id_harvest = h.id_harvest
               AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang, i_prof, ard.id_analysis)
                      FROM dual) = pk_alert_constant.g_yes
               AND h.flg_status NOT IN (pk_lab_tests_constant.g_harvest_pending,
                                        pk_lab_tests_constant.g_harvest_suspended,
                                        pk_lab_tests_constant.g_harvest_inactive)
             GROUP BY ard.id_analysis_req_det,
                      h.dt_harvest_reg_tstz,
                      h.id_prof_harvest,
                      h.id_episode,
                      h.flg_status,
                      h.id_body_part,
                      h.flg_laterality,
                      h.flg_collection_method,
                      h.id_specimen_condition,
                      h.id_room_harvest,
                      h.flg_col_inst,
                      h.id_room_receive_tube,
                      h.id_institution,
                      ah.id_sample_recipient,
                      h.num_recipient,
                      h.dt_harvest_tstz,
                      h.amount,
                      h.flg_mov_tube,
                      h.notes,
                      h.harvest_instructions,
                      h.id_revised_by,
                      h.id_rep_coll_reason;
    
        g_error := 'OPEN O_LAB_TEST_CLINICAL_QUESTIONS';
        OPEN o_lab_test_clinical_questions FOR
            SELECT id_analysis_req_det, desc_clinical_question, to_clob(desc_response) desc_response
              FROM (SELECT aqr1.id_analysis_req_det,
                           '<b>' ||
                           pk_mcdt.get_questionnaire_alias(i_lang,
                                                           i_prof,
                                                           'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' || aqr1.id_questionnaire) ||
                           ':</b>' desc_clinical_question,
                           decode(aqr.notes,
                                  NULL,
                                  to_clob(decode(aqr1.desc_response, NULL, '---', aqr1.desc_response)),
                                  pk_lab_tests_utils.get_lab_test_response(i_lang, i_prof, aqr.notes)) desc_response,
                           pk_lab_tests_utils.get_lab_test_question_rank(i_lang,
                                                                         i_prof,
                                                                         ard.id_analysis,
                                                                         ard.id_sample_type,
                                                                         aqr1.id_questionnaire,
                                                                         pk_lab_tests_constant.g_analysis_cq_on_harvest) rank
                      FROM (SELECT aqr.id_analysis_req_det,
                                   aqr.id_questionnaire,
                                   listagg(pk_mcdt.get_response_alias(i_lang,
                                                                      i_prof,
                                                                      'RESPONSE.CODE_RESPONSE.' || aqr.id_response),
                                           '; ') within GROUP(ORDER BY aqr.id_response) desc_response
                              FROM analysis_harvest ah, analysis_question_response aqr
                             WHERE ah.id_analysis_req_det = i_analysis_req_det
                               AND ah.id_harvest = aqr.id_harvest
                             GROUP BY aqr.id_analysis_req_det, aqr.id_questionnaire) aqr1,
                           analysis_question_response aqr,
                           analysis_req_det ard
                     WHERE aqr.id_analysis_req_det = aqr1.id_analysis_req_det
                       AND aqr.id_questionnaire = aqr1.id_questionnaire
                       AND aqr.id_analysis_req_det = ard.id_analysis_req_det)
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_HARVEST',
                                              o_error);
            pk_types.open_my_cursor(o_lab_test_harvest);
            pk_types.open_my_cursor(o_lab_test_clinical_questions);
            RETURN FALSE;
    END get_lab_test_harvest;

    FUNCTION get_lab_test_result
    (
        i_lang                       IN language.id_language%TYPE,
        i_prof                       IN profissional,
        i_analysis_result_par        IN table_number,
        o_lab_test_result            OUT pk_types.cursor_type,
        o_lab_test_result_laboratory OUT pk_types.cursor_type,
        o_lab_test_result_history    OUT pk_types.cursor_type,
        o_error                      OUT t_error_out
    ) RETURN BOOLEAN IS
    
        TYPE t_code_messages IS TABLE OF VARCHAR2(1000 CHAR) INDEX BY sys_message.code_message%TYPE;
    
        aa_code_messages t_code_messages;
    
        va_code_messages table_varchar := table_varchar('LAB_TESTS_T045',
                                                        'LAB_TESTS_T210',
                                                        'LAB_TESTS_T131',
                                                        'LAB_TESTS_T058',
                                                        'LAB_TESTS_T066',
                                                        'LAB_TESTS_T105',
                                                        'LAB_TESTS_T047',
                                                        'LAB_TESTS_T108',
                                                        'LAB_TESTS_T070',
                                                        'LAB_TESTS_T106',
                                                        'LAB_TESTS_T149',
                                                        'LAB_TESTS_T150',
                                                        'LAB_TESTS_T073',
                                                        'LAB_TESTS_T071',
                                                        'LAB_TESTS_T107',
                                                        'LAB_TESTS_T132',
                                                        'LAB_TESTS_T151',
                                                        'LAB_TESTS_T234',
                                                        'LAB_TESTS_T235',
                                                        'LAB_TESTS_T064',
                                                        'LAB_TESTS_T028',
                                                        'LAB_TESTS_T081',
                                                        'LAB_TESTS_T103',
                                                        'LAB_TESTS_T065',
                                                        'LAB_TESTS_T104',
                                                        'LAB_TESTS_T101',
                                                        'LAB_TESTS_T062',
                                                        'LAB_TESTS_T061',
                                                        'ADMINISTRATOR_T354',
                                                        'ADMINISTRATOR_T690');
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
        l_msg_del sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M106');
    
        l_analysis_result_par_count NUMBER;
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN va_code_messages.first .. va_code_messages.last
        LOOP
            aa_code_messages(va_code_messages(i)) := '<b>' ||
                                                     pk_message.get_message(i_lang, i_prof, va_code_messages(i)) ||
                                                     '</b> ';
        END LOOP;
    
        SELECT /*+opt_estimate(table t rows=1)*/
         COUNT(*)
          INTO l_analysis_result_par_count
          FROM TABLE(i_analysis_result_par);
    
        g_error := 'OPEN O_LAB_TEST_ORDER';
        OPEN o_lab_test_result FOR
            SELECT ar.id_analysis_req_det,
                   ar.id_analysis_result,
                   pk_lab_tests_utils.get_lab_test_doc_external(i_lang, i_prof, aresp.id_analysis_result_par) id_doc_external,
                   l_msg_reg || ' ' ||
                   pk_prof_utils.get_name_signature(i_lang,
                                                    i_prof,
                                                    nvl(aresp.id_professional_upd, aresp.id_professional)) ||
                   decode(pk_prof_utils.get_spec_signature(i_lang,
                                                           i_prof,
                                                           nvl(aresp.id_professional_upd, aresp.id_professional),
                                                           nvl(aresp.dt_analysis_result_par_upd,
                                                               aresp.dt_ins_result_tstz),
                                                           ar.id_episode),
                          NULL,
                          '; ',
                          ' (' ||
                          pk_prof_utils.get_spec_signature(i_lang,
                                                           i_prof,
                                                           nvl(aresp.id_professional_upd, aresp.id_professional),
                                                           nvl(aresp.dt_analysis_result_par_upd, aresp.dt_ins_result_tstz),
                                                           ar.id_episode) || '); ') ||
                   pk_date_utils.date_char_tsz(i_lang,
                                               nvl(aresp.dt_analysis_result_par_upd, aresp.dt_ins_result_tstz),
                                               i_prof.institution,
                                               i_prof.software) registry,
                   decode(aresp.id_arp_parent,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T210') ||
                          pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                   i_prof,
                                                                   pk_lab_tests_constant.g_analysis_alias,
                                                                   'ANALYSIS.CODE_ANALYSIS.' || aresp_parent.id_analysis,
                                                                   'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                   aresp_parent.id_sample_type,
                                                                   NULL)) desc_reflex_analysis,
                   aa_code_messages('LAB_TESTS_T045') ||
                   pk_lab_tests_utils.get_alias_translation(i_lang,
                                                            i_prof,
                                                            pk_lab_tests_constant.g_analysis_alias,
                                                            'ANALYSIS.CODE_ANALYSIS.' || ar.id_analysis,
                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || ar.id_sample_type,
                                                            NULL) ||
                   decode(l_analysis_result_par_count,
                          1,
                          NULL,
                          chr(10) || aa_code_messages('LAB_TESTS_T131') ||
                          pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                   i_prof,
                                                                   pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                   'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                   aresp.id_analysis_parameter,
                                                                   'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || ar.id_sample_type,
                                                                   NULL)) desc_analysis,
                   decode(nvl(h.dt_harvest_tstz, ar.dt_sample),
                          NULL,
                          NULL,
                          decode(h.dt_harvest_tstz,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T058') ||
                                 pk_date_utils.date_char_tsz(i_lang, ar.dt_sample, i_prof.institution, i_prof.software),
                                 aa_code_messages('LAB_TESTS_T058') ||
                                 pk_date_utils.date_char_tsz(i_lang,
                                                             h.dt_harvest_tstz,
                                                             i_prof.institution,
                                                             i_prof.software))) dt_harvest,
                   to_clob(aa_code_messages('LAB_TESTS_T066')) ||
                   decode(pk_utils.is_number(dbms_lob.substr(aresp.desc_analysis_result, 3800)),
                          pk_lab_tests_constant.g_yes,
                          '',
                          decode(aresp.id_analysis_desc, NULL, chr(10) || chr(9) || chr(9), '')) ||
                   nvl(TRIM(aresp.desc_analysis_result),
                       (aresp.comparator || aresp.analysis_result_value_1 || aresp.separator ||
                       aresp.analysis_result_value_2)) || ' ' ||
                   nvl(aresp.desc_unit_measure,
                       pk_translation.get_translation(i_lang, 'UNIT_MEASURE.CODE_UNIT_MEASURE.' || aresp.id_unit_measure)) RESULT,
                   pk_doc.get_main_thumb_url(i_lang,
                                             i_prof,
                                             pk_lab_tests_utils.get_lab_test_doc_external(i_lang,
                                                                                          i_prof,
                                                                                          aresp.id_analysis_result_par)) thumbnail,
                   (SELECT COUNT(1)
                      FROM analysis_media_archive ama
                      JOIN doc_image di
                        ON di.id_doc_external = ama.id_doc_external
                     WHERE ama.id_analysis_result_par = aresp.id_analysis_result_par
                       AND ama.flg_status = pk_lab_tests_constant.g_active
                       AND ama.flg_type = pk_lab_tests_constant.g_analysis_result_pdf
                       AND di.flg_status = pk_lab_tests_constant.g_active) num_images,
                   decode(aresp.id_result_status,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T047') ||
                          pk_translation.get_translation(i_lang,
                                                         'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                         aresp.id_result_status)) desc_status,
                   decode(nvl(aresp.ref_val,
                              decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                     nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                     ' - ',
                                     NULL,
                                     nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                     nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                     nvl(aresp.desc_unit_measure,
                                         pk_translation.get_translation(i_lang,
                                                                        'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                        aresp.id_unit_measure)))),
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T070') ||
                          nvl(aresp.ref_val,
                              decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                     nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                     ' - ',
                                     NULL,
                                     nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                     nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                     nvl(aresp.desc_unit_measure,
                                         pk_translation.get_translation(i_lang,
                                                                        'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                        aresp.id_unit_measure))))) ref_range,
                   decode(dbms_lob.getlength(aresp.parameter_notes),
                          NULL,
                          decode(dbms_lob.getlength(aresp.interface_notes),
                                 NULL,
                                 to_clob(''),
                                 aa_code_messages('LAB_TESTS_T149') || aresp.parameter_notes),
                          aa_code_messages('LAB_TESTS_T149') || aresp.parameter_notes) parameter_notes,
                   decode(aresp.laboratory_short_desc,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T073') || aresp.laboratory_short_desc) desc_lab,
                   aa_code_messages('LAB_TESTS_T071') ||
                   pk_date_utils.date_char_tsz(i_lang, ar.dt_analysis_result_tstz, i_prof.institution, i_prof.software) dt_result,
                   decode(ar.flg_result_origin,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T064') ||
                          pk_sysdomain.get_domain(i_lang,
                                                  i_prof,
                                                  'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                  ar.flg_result_origin,
                                                  NULL)) result_origin,
                   decode(ar.result_origin_notes,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T028') || ar.result_origin_notes) result_origin_notes,
                   decode(dbms_lob.getlength(ar.notes),
                          NULL,
                          to_clob(''),
                          decode(dbms_lob.getlength(ar.notes),
                                 0,
                                 to_clob(''),
                                 aa_code_messages('LAB_TESTS_T132') || ar.notes)) result_notes,
                   decode(aresp.flg_relevant,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T234') ||
                          pk_sysdomain.get_domain(i_lang,
                                                  i_prof,
                                                  'ANALYSIS_RESULT_PAR.FLG_RELEVANT',
                                                  aresp.flg_relevant,
                                                  NULL)) desc_relevant,
                   decode(dbms_lob.getlength(aresp.notes_doctor_registry),
                          NULL,
                          to_clob(''),
                          aa_code_messages('LAB_TESTS_T065') || aresp.notes_doctor_registry) review_notes,
                   decode(aresp.id_cancel_reason,
                          NULL,
                          NULL,
                          aa_code_messages('LAB_TESTS_T062') ||
                          pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, aresp.id_cancel_reason)) cancel_reason,
                   decode(aresp.notes_cancel, NULL, NULL, aa_code_messages('LAB_TESTS_T061') || aresp.notes_cancel) notes_cancel,
                   pk_date_utils.date_send_tsz(i_lang,
                                               nvl(aresp.dt_analysis_result_par_upd, aresp.dt_ins_result_tstz),
                                               i_prof) dt_ord
              FROM analysis_result_par aresp,
                   analysis_result ar,
                   harvest h,
                   (SELECT arp.id_analysis_result_par, ar.id_analysis, ar.id_sample_type
                      FROM analysis_result_par arp, analysis_result ar
                     WHERE arp.id_arp_parent IS NULL
                       AND arp.id_analysis_result = ar.id_analysis_result) aresp_parent
             WHERE aresp.id_analysis_result_par IN
                   (SELECT /*+opt_estimate(table t rows=1)*/
                     *
                      FROM TABLE(i_analysis_result_par) t)
               AND aresp.id_analysis_result = ar.id_analysis_result
               AND ar.id_harvest = h.id_harvest(+)
               AND aresp.id_arp_parent = aresp_parent.id_analysis_result_par(+)
             ORDER BY dt_ord DESC;
    
        g_error := 'OPEN O_LAB_TEST_RESULT_LABORATORY';
        OPEN o_lab_test_result_laboratory FOR
            SELECT ar.id_analysis_req_det,
                   ar.id_analysis_result,
                   aa_code_messages('ADMINISTRATOR_T354') || pk_utils.get_institution_name(i_lang, aresp.id_laboratory) lab_name,
                   aa_code_messages('ADMINISTRATOR_T690') ||
                   pk_backoffice_ext_instit.get_ext_institution_address(i_lang, aresp.id_laboratory) lab_address,
                   pk_date_utils.date_send_tsz(i_lang,
                                               nvl(aresp.dt_analysis_result_par_upd, aresp.dt_ins_result_tstz),
                                               i_prof) dt_ord
              FROM analysis_result_par aresp, analysis_result ar, harvest h
             WHERE aresp.id_analysis_result_par IN
                   (SELECT /*+opt_estimate(table t rows=1)*/
                     *
                      FROM TABLE(i_analysis_result_par) t)
               AND aresp.id_laboratory IS NOT NULL
               AND aresp.id_analysis_result = ar.id_analysis_result
               AND ar.id_harvest = h.id_harvest(+)
             ORDER BY dt_ord DESC;
    
        g_error := 'OPEN O_LAB_TEST_RESULT_HISTORY';
        OPEN o_lab_test_result_history FOR
            SELECT aresp.id_analysis_req_det,
                   aresp.id_analysis_result,
                   decode(rn,
                          1,
                          pk_lab_tests_utils.get_lab_test_doc_external(i_lang, i_prof, aresp.id_analysis_result_par),
                          NULL) id_doc_external,
                   l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, aresp.id_professional) ||
                   decode(pk_prof_utils.get_spec_signature(i_lang,
                                                           i_prof,
                                                           aresp.id_professional,
                                                           aresp.dt_analysis_result_par_tstz,
                                                           aresp.id_episode),
                          NULL,
                          '; ',
                          ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                   i_prof,
                                                                   aresp.id_professional,
                                                                   aresp.dt_analysis_result_par_tstz,
                                                                   aresp.id_episode) || '); ') ||
                   pk_date_utils.date_char_tsz(i_lang,
                                               aresp.dt_analysis_result_par_tstz,
                                               i_prof.institution,
                                               i_prof.software) registry,
                   decode(cnt,
                          rn,
                          decode(aresp.id_arp_parent,
                                 NULL,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T210') ||
                                 pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                          i_prof,
                                                                          pk_lab_tests_constant.g_analysis_alias,
                                                                          'ANALYSIS.CODE_ANALYSIS.' ||
                                                                          aresp_parent.id_analysis,
                                                                          'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                          aresp_parent.id_sample_type,
                                                                          NULL)),
                          NULL) desc_reflex_analysis,
                   decode(cnt,
                          rn,
                          aa_code_messages('LAB_TESTS_T045') ||
                          pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                   i_prof,
                                                                   pk_lab_tests_constant.g_analysis_alias,
                                                                   'ANALYSIS.CODE_ANALYSIS.' || aresp.id_analysis,
                                                                   'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                   aresp.id_sample_type,
                                                                   NULL) ||
                          decode(l_analysis_result_par_count,
                                 1,
                                 NULL,
                                 chr(10) || aa_code_messages('LAB_TESTS_T131') ||
                                 pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                          i_prof,
                                                                          pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                          'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                          aresp.id_analysis_parameter,
                                                                          'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                          aresp.id_sample_type,
                                                                          NULL)),
                          NULL) desc_analysis,
                   decode(cnt,
                          rn,
                          decode(nvl(aresp.dt_harvest_tstz, aresp.dt_sample),
                                 NULL,
                                 NULL,
                                 decode(aresp.dt_harvest_tstz,
                                        NULL,
                                        aa_code_messages('LAB_TESTS_T058') ||
                                        pk_date_utils.date_char_tsz(i_lang,
                                                                    aresp.dt_sample,
                                                                    i_prof.institution,
                                                                    i_prof.software),
                                        aa_code_messages('LAB_TESTS_T058') ||
                                        pk_date_utils.date_char_tsz(i_lang,
                                                                    aresp.dt_harvest_tstz,
                                                                    i_prof.institution,
                                                                    i_prof.software))),
                          NULL) dt_harvest,
                   decode(cnt,
                          rn,
                          decode(nvl(TRIM(aresp.desc_analysis_result), aresp.analysis_result_value) || ' ' ||
                                 nvl(aresp.desc_unit_measure,
                                     pk_translation.get_translation(i_lang,
                                                                    'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                    aresp.id_unit_measure)),
                                 NULL,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T066') ||
                                 nvl(TRIM(aresp.desc_analysis_result), aresp.analysis_result_value) || ' ' ||
                                 nvl(aresp.desc_unit_measure,
                                     pk_translation.get_translation(i_lang,
                                                                    'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                    aresp.id_unit_measure))),
                          decode(dbms_lob.compare(nvl(TRIM(aresp.desc_analysis_result), aresp.analysis_result_value) || ' ' ||
                                                  nvl(aresp.desc_unit_measure,
                                                      pk_translation.get_translation(i_lang,
                                                                                     'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                     aresp.id_unit_measure)),
                                                  nvl(TRIM(aresp.desc_analysis_result_new),
                                                      aresp.analysis_result_value_new) || ' ' ||
                                                  nvl(aresp.desc_unit_measure_new,
                                                      pk_translation.get_translation(i_lang,
                                                                                     'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                     aresp.id_unit_measure_new))),
                                 0,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T105') || '§' ||
                                 decode(nvl(TRIM(aresp.desc_analysis_result), aresp.analysis_result_value) || ' ' ||
                                        nvl(aresp.desc_unit_measure,
                                            pk_translation.get_translation(i_lang,
                                                                           'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                           aresp.id_unit_measure)),
                                        NULL,
                                        l_msg_del,
                                        nvl(TRIM(aresp.desc_analysis_result), aresp.analysis_result_value) || ' ' ||
                                        nvl(aresp.desc_unit_measure,
                                            pk_translation.get_translation(i_lang,
                                                                           'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                           aresp.id_unit_measure))) ||
                                 decode(nvl(TRIM(aresp.desc_analysis_result_new), aresp.analysis_result_value_new) || ' ' ||
                                        nvl(aresp.desc_unit_measure_new,
                                            pk_translation.get_translation(i_lang,
                                                                           'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                           aresp.id_unit_measure_new)),
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || '#' || aa_code_messages('LAB_TESTS_T066') ||
                                        nvl(TRIM(aresp.desc_analysis_result_new), aresp.analysis_result_value_new) || ' ' ||
                                        nvl(aresp.desc_unit_measure_new,
                                            pk_translation.get_translation(i_lang,
                                                                           'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                           aresp.id_unit_measure_new))))) RESULT,
                   decode(rn,
                          1,
                          pk_doc.get_main_thumb_url(i_lang,
                                                    i_prof,
                                                    pk_lab_tests_utils.get_lab_test_doc_external(i_lang,
                                                                                                 i_prof,
                                                                                                 aresp.id_analysis_result_par)),
                          NULL) thumbnail,
                   decode(rn,
                          1,
                          (SELECT COUNT(1)
                             FROM analysis_media_archive ama
                             JOIN doc_image di
                               ON di.id_doc_external = ama.id_doc_external
                            WHERE ama.id_analysis_result_par = aresp.id_analysis_result_par
                              AND ama.flg_status = pk_lab_tests_constant.g_active
                              AND ama.flg_type = pk_lab_tests_constant.g_analysis_result_pdf
                              AND di.flg_status = pk_lab_tests_constant.g_active),
                          NULL) num_images,
                   decode(cnt,
                          rn,
                          decode(aresp.id_result_status,
                                 NULL,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T047') ||
                                 pk_translation.get_translation(i_lang,
                                                                'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                aresp.id_result_status)),
                          decode(aresp.id_result_status,
                                 aresp.id_result_status_new,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T108') || '§' ||
                                 decode(aresp.id_result_status,
                                        NULL,
                                        l_msg_del,
                                        pk_translation.get_translation(i_lang,
                                                                       'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                       aresp.id_result_status)) ||
                                 decode(aresp.id_result_status_new,
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T047') ||
                                        pk_translation.get_translation(i_lang,
                                                                       'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                       aresp.id_result_status_new)))) desc_status,
                   decode(cnt,
                          rn,
                          decode(nvl(aresp.ref_val,
                                     decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                            nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                            ' - ',
                                            NULL,
                                            nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                            nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                            nvl(aresp.desc_unit_measure,
                                                pk_translation.get_translation(i_lang,
                                                                               'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                               aresp.id_unit_measure)))),
                                 NULL,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T070') ||
                                 nvl(aresp.ref_val,
                                     decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                            nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                            ' - ',
                                            NULL,
                                            nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                            nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                            nvl(aresp.desc_unit_measure,
                                                pk_translation.get_translation(i_lang,
                                                                               'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                               aresp.id_unit_measure))))),
                          decode(nvl(aresp.ref_val,
                                     decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                            nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                            ' - ',
                                            NULL,
                                            nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                            nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                            nvl(aresp.desc_unit_measure,
                                                pk_translation.get_translation(i_lang,
                                                                               'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                               aresp.id_unit_measure)))),
                                 nvl(aresp.ref_val_new,
                                     decode((nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) || ' - ' ||
                                            nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new)),
                                            ' - ',
                                            NULL,
                                            nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) || ' - ' ||
                                            nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new) || ' ' ||
                                            nvl(aresp.desc_unit_measure_new,
                                                pk_translation.get_translation(i_lang,
                                                                               'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                               aresp.id_unit_measure_new)))),
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T106') || '§' ||
                                 decode(nvl(aresp.ref_val,
                                            decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                   nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                                   ' - ',
                                                   NULL,
                                                   nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                   nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                                   nvl(aresp.desc_unit_measure,
                                                       pk_translation.get_translation(i_lang,
                                                                                      'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                      aresp.id_unit_measure)))),
                                        NULL,
                                        l_msg_del,
                                        nvl(aresp.ref_val,
                                            decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                   nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                                   ' - ',
                                                   NULL,
                                                   nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                   nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) || ' ' ||
                                                   nvl(aresp.desc_unit_measure,
                                                       pk_translation.get_translation(i_lang,
                                                                                      'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                      aresp.id_unit_measure))))) ||
                                 decode(nvl(aresp.ref_val_new,
                                            decode((nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) || ' - ' ||
                                                   nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new)),
                                                   ' - ',
                                                   NULL,
                                                   nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) || ' - ' ||
                                                   nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new) || ' ' ||
                                                   nvl(aresp.desc_unit_measure_new,
                                                       pk_translation.get_translation(i_lang,
                                                                                      'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                      aresp.id_unit_measure_new)))),
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T070') ||
                                        nvl(aresp.ref_val_new,
                                            decode((nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) || ' - ' ||
                                                   nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new)),
                                                   ' - ',
                                                   NULL,
                                                   nvl(TRIM(aresp.ref_val_min_str_new), aresp.ref_val_min_new) || ' - ' ||
                                                   nvl(TRIM(aresp.ref_val_max_str_new), aresp.ref_val_max_new) || ' ' ||
                                                   nvl(aresp.desc_unit_measure_new,
                                                       pk_translation.get_translation(i_lang,
                                                                                      'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                      aresp.id_unit_measure_new))))))) ref_range,
                   decode(cnt,
                          rn,
                          decode(dbms_lob.getlength(aresp.parameter_notes),
                                 NULL,
                                 decode(dbms_lob.getlength(aresp.interface_notes),
                                        NULL,
                                        to_clob(''),
                                        aa_code_messages('LAB_TESTS_T149') || aresp.interface_notes),
                                 aa_code_messages('LAB_TESTS_T149') || aresp.parameter_notes),
                          decode(aresp.parameter_notes,
                                 aresp.parameter_notes_new,
                                 decode(aresp.interface_notes,
                                        aresp.interface_notes_new,
                                        NULL,
                                        aa_code_messages('LAB_TESTS_T150') || '§' ||
                                        decode(aresp.interface_notes, NULL, l_msg_del, aresp.interface_notes) ||
                                        decode(aresp.interface_notes_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T149') ||
                                               aresp.interface_notes_new)),
                                 aa_code_messages('LAB_TESTS_T150') || '§' ||
                                 decode(aresp.parameter_notes, NULL, l_msg_del, aresp.parameter_notes) ||
                                 decode(aresp.parameter_notes_new,
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T149') ||
                                        aresp.parameter_notes_new))) parameter_notes,
                   decode(cnt,
                          rn,
                          decode(aresp.laboratory_short_desc,
                                 NULL,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T073') || aresp.laboratory_short_desc),
                          decode(aresp.laboratory_short_desc,
                                 aresp.laboratory_short_desc_new,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T073') || '§' ||
                                 decode(aresp.laboratory_short_desc, NULL, l_msg_del, aresp.laboratory_short_desc) ||
                                 decode(aresp.laboratory_short_desc_new,
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T073') ||
                                        aresp.laboratory_short_desc_new))) desc_lab,
                   decode(cnt,
                          rn,
                          decode(aresp.dt_analysis_result_tstz,
                                 NULL,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T071') ||
                                 pk_date_utils.date_char_tsz(i_lang,
                                                             aresp.dt_analysis_result_tstz,
                                                             i_prof.institution,
                                                             i_prof.software)),
                          decode(aresp.dt_analysis_result_tstz,
                                 aresp.dt_analysis_result_tstz_new,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T107') || '§' ||
                                 decode(aresp.dt_analysis_result_tstz,
                                        NULL,
                                        l_msg_del,
                                        pk_date_utils.date_char_tsz(i_lang,
                                                                    aresp.dt_analysis_result_tstz,
                                                                    i_prof.institution,
                                                                    i_prof.software)) ||
                                 decode(aresp.dt_analysis_result_tstz_new,
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T071') ||
                                        pk_date_utils.date_char_tsz(i_lang,
                                                                    aresp.dt_analysis_result_tstz_new,
                                                                    i_prof.institution,
                                                                    i_prof.software)))) dt_result,
                   decode(cnt,
                          rn,
                          decode(aresp.flg_result_origin,
                                 NULL,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T064') ||
                                 pk_sysdomain.get_domain(i_lang,
                                                         i_prof,
                                                         'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                         aresp.flg_result_origin,
                                                         NULL)),
                          decode(aresp.flg_result_origin,
                                 aresp.flg_result_origin_new,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T103') || '§' ||
                                 decode(aresp.flg_result_origin,
                                        NULL,
                                        l_msg_del,
                                        pk_sysdomain.get_domain(i_lang,
                                                                i_prof,
                                                                'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                                aresp.flg_result_origin,
                                                                NULL)) ||
                                 decode(aresp.flg_result_origin_new,
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T064') ||
                                        pk_sysdomain.get_domain(i_lang,
                                                                i_prof,
                                                                'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                                aresp.flg_result_origin_new,
                                                                NULL)))) result_origin,
                   decode(cnt,
                          rn,
                          decode(aresp.result_origin_notes,
                                 NULL,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T028') || aresp.result_origin_notes),
                          decode(aresp.result_origin_notes,
                                 aresp.result_origin_notes_new,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T081') || '§' ||
                                 decode(aresp.result_origin_notes, NULL, l_msg_del, aresp.result_origin_notes) ||
                                 decode(aresp.result_origin_notes_new,
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T028') ||
                                        aresp.result_origin_notes_new))) result_origin_notes,
                   decode(cnt,
                          rn,
                          decode(aresp.result_notes,
                                 NULL,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T132') || aresp.result_notes),
                          decode(aresp.result_notes,
                                 aresp.result_notes_new,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T151') || '§' ||
                                 decode(aresp.result_notes, NULL, l_msg_del, aresp.result_notes) ||
                                 decode(aresp.result_notes_new,
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T132') || aresp.result_notes_new))) result_notes,
                   decode(cnt,
                          rn,
                          decode(aresp.flg_relevant,
                                 NULL,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T234') ||
                                 pk_sysdomain.get_domain(i_lang,
                                                         i_prof,
                                                         'ANALYSIS_RESULT_PAR.FLG_RELEVANT',
                                                         aresp.flg_relevant,
                                                         NULL)),
                          decode(aresp.flg_relevant,
                                 aresp.flg_relevant_new,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T235') || '§' ||
                                 decode(aresp.flg_relevant,
                                        NULL,
                                        l_msg_del,
                                        pk_sysdomain.get_domain(i_lang,
                                                                i_prof,
                                                                'ANALYSIS_RESULT_PAR.FLG_RELEVANT',
                                                                aresp.flg_relevant,
                                                                NULL)) ||
                                 decode(aresp.flg_relevant_new,
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T234') ||
                                        pk_sysdomain.get_domain(i_lang,
                                                                i_prof,
                                                                'ANALYSIS_RESULT_PAR.FLG_RELEVANT',
                                                                aresp.flg_relevant_new,
                                                                NULL)))) desc_relevant,
                   decode(cnt,
                          rn,
                          NULL,
                          decode(aresp.review_notes,
                                 aresp.review_notes_new,
                                 NULL,
                                 decode(aresp.review_notes,
                                        NULL,
                                        NULL,
                                        aa_code_messages('LAB_TESTS_T104') || '§' || aresp.review_notes ||
                                        decode(aresp.review_notes_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T065') ||
                                               aresp.review_notes_new)))) review_notes,
                   decode(cnt,
                          rn,
                          NULL,
                          decode(aresp.id_cancel_reason,
                                 aresp.id_cancel_reason_new,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T062') || '§' ||
                                 decode(aresp.id_cancel_reason,
                                        NULL,
                                        l_msg_del,
                                        pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, aresp.id_cancel_reason)) ||
                                 decode(aresp.id_cancel_reason_new,
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T062') ||
                                        pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, aresp.id_cancel_reason_new)))) cancel_reason,
                   decode(cnt,
                          rn,
                          NULL,
                          decode(aresp.notes_cancel,
                                 aresp.notes_cancel_new,
                                 NULL,
                                 aa_code_messages('LAB_TESTS_T061') || '§' ||
                                 decode(aresp.notes_cancel, NULL, l_msg_del, aresp.notes_cancel) ||
                                 decode(aresp.notes_cancel_new,
                                        NULL,
                                        NULL,
                                        chr(10) || chr(9) || aa_code_messages('LAB_TESTS_T061') || aresp.notes_cancel_new))) notes_cancel,
                   pk_date_utils.date_send_tsz(i_lang, aresp.dt_analysis_result_tstz, i_prof) dt_ord
              FROM (SELECT row_number() over(PARTITION BY t.id_analysis_result ORDER BY t.dt_analysis_res_par_hist DESC NULLS FIRST, t.dt_analysis_result_par_tstz DESC) rn,
                           COUNT(1) over(PARTITION BY t.id_analysis_result) cnt,
                           t.dt_analysis_res_par_hist,
                           t.id_analysis_req_det,
                           first_value(t.id_analysis_req_det) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_analysis_req_det_new,
                           t.id_analysis_result,
                           first_value(t.id_analysis_result) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_analysis_result_new,
                           t.id_analysis_result_par,
                           t.id_analysis,
                           t.id_sample_type,
                           t.id_analysis_parameter,
                           t.id_arp_parent,
                           t.id_episode,
                           t.id_professional,
                           first_value(t.id_professional) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_professional_new,
                           t.dt_harvest_tstz,
                           t.dt_sample,
                           t.dt_analysis_result_tstz,
                           first_value(t.dt_analysis_result_tstz) over(ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_analysis_result_tstz_new,
                           dbms_lob.substr(t.notes, 3800) result_notes,
                           first_value(dbms_lob.substr(t.notes, 3800)) over(ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) result_notes_new,
                           t.flg_result_origin,
                           first_value(t.flg_result_origin) over(ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_result_origin_new,
                           t.result_origin_notes,
                           first_value(t.result_origin_notes) over(ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) result_origin_notes_new,
                           t.flg_status,
                           first_value(t.flg_status) over(ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_status_new,
                           t.dt_analysis_result_par_tstz,
                           dbms_lob.substr(t.desc_analysis_result, 3800) desc_analysis_result,
                           first_value(dbms_lob.substr(t.desc_analysis_result, 3800)) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) desc_analysis_result_new,
                           t.analysis_result_value,
                           first_value(t.analysis_result_value) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) analysis_result_value_new,
                           t.id_unit_measure,
                           first_value(t.id_unit_measure) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_unit_measure_new,
                           t.desc_unit_measure,
                           first_value(t.desc_unit_measure) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) desc_unit_measure_new,
                           t.id_result_status,
                           first_value(t.id_result_status) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_result_status_new,
                           t.ref_val,
                           first_value(t.ref_val) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_new,
                           t.ref_val_min_str,
                           first_value(t.ref_val_min_str) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_min_str_new,
                           t.ref_val_min,
                           first_value(t.ref_val_min) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_min_new,
                           t.ref_val_max_str,
                           first_value(t.ref_val_max_str) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_max_str_new,
                           t.ref_val_max,
                           first_value(t.ref_val_max) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_max_new,
                           t.laboratory_short_desc,
                           first_value(t.laboratory_short_desc) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) laboratory_short_desc_new,
                           dbms_lob.substr(t.parameter_notes, 3800) parameter_notes,
                           first_value(dbms_lob.substr(t.parameter_notes, 3800)) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) parameter_notes_new,
                           dbms_lob.substr(t.interface_notes, 3800) interface_notes,
                           first_value(dbms_lob.substr(t.interface_notes, 3800)) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) interface_notes_new,
                           t.flg_relevant,
                           first_value(t.flg_relevant) over(ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_relevant_new,
                           dbms_lob.substr(t.notes_doctor_registry, 3800) review_notes,
                           first_value(dbms_lob.substr(t.notes_doctor_registry, 3800)) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) review_notes_new,
                           t.id_prof_cancel,
                           first_value(t.id_prof_cancel) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_cancel_new,
                           t.dt_cancel_tstz,
                           first_value(t.dt_cancel_tstz) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_cancel_tstz_new,
                           t.id_cancel_reason,
                           first_value(t.id_cancel_reason) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_cancel_reason_new,
                           t.notes_cancel,
                           first_value(t.notes_cancel) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_cancel_new
                      FROM (SELECT NULL dt_analysis_res_par_hist,
                                   NULL dt_analysis_result_hist,
                                   ar.id_analysis_req_det,
                                   ar.id_analysis_result,
                                   aresp.id_analysis_result_par,
                                   ar.id_analysis,
                                   ar.id_sample_type,
                                   aresp.id_analysis_parameter,
                                   aresp.id_arp_parent,
                                   ar.id_episode,
                                   nvl(aresp.id_professional_upd, aresp.id_professional) id_professional,
                                   h.dt_harvest_tstz,
                                   ar.dt_sample,
                                   ar.dt_analysis_result_tstz,
                                   ar.notes,
                                   ar.flg_result_origin,
                                   ar.result_origin_notes,
                                   ar.flg_status,
                                   nvl(aresp.dt_analysis_result_par_upd, aresp.dt_ins_result_tstz) dt_analysis_result_par_tstz,
                                   to_clob(decode(pk_utils.is_number(dbms_lob.substr(aresp.desc_analysis_result, 3800)),
                                                  pk_lab_tests_constant.g_yes,
                                                  '',
                                                  decode(aresp.id_analysis_desc, NULL, chr(10) || chr(9) || chr(9), '')) ||
                                           aresp.desc_analysis_result) desc_analysis_result,
                                   (aresp.comparator || aresp.analysis_result_value_1 || aresp.separator ||
                                   aresp.analysis_result_value_2) analysis_result_value,
                                   aresp.id_unit_measure,
                                   aresp.desc_unit_measure,
                                   aresp.id_result_status,
                                   aresp.ref_val,
                                   aresp.ref_val_min_str,
                                   aresp.ref_val_min,
                                   aresp.ref_val_max_str,
                                   aresp.ref_val_max,
                                   aresp.laboratory_short_desc,
                                   aresp.parameter_notes,
                                   aresp.interface_notes,
                                   aresp.flg_relevant,
                                   aresp.notes_doctor_registry,
                                   aresp.id_professional_cancel id_prof_cancel,
                                   aresp.dt_cancel dt_cancel_tstz,
                                   aresp.id_cancel_reason,
                                   aresp.notes_cancel
                              FROM analysis_result_par aresp, analysis_result ar, harvest h
                             WHERE aresp.id_analysis_result_par IN
                                   (SELECT /*+opt_estimate(table t rows=1)*/
                                     *
                                      FROM TABLE(i_analysis_result_par) t)
                               AND aresp.id_analysis_result = ar.id_analysis_result
                               AND ar.id_harvest = h.id_harvest(+)
                            UNION ALL
                            SELECT aresph.dt_analysis_res_par_hist,
                                   arh.dt_analysis_result_hist,
                                   arh.id_analysis_req_det,
                                   arh.id_analysis_result,
                                   aresph.id_analysis_result_par,
                                   arh.id_analysis,
                                   arh.id_sample_type,
                                   aresph.id_analysis_parameter,
                                   aresph.id_arp_parent,
                                   arh.id_episode,
                                   nvl(aresph.id_professional_upd, aresph.id_professional) id_professional,
                                   h.dt_harvest_tstz,
                                   arh.dt_sample,
                                   arh.dt_analysis_result_tstz,
                                   arh.notes,
                                   arh.flg_result_origin,
                                   arh.result_origin_notes,
                                   arh.flg_status,
                                   nvl(aresph.dt_analysis_result_par_upd, aresph.dt_ins_result_tstz) dt_analysis_result_par_tstz,
                                   decode(pk_utils.is_number(dbms_lob.substr(aresph.desc_analysis_result, 3800)),
                                          pk_lab_tests_constant.g_yes,
                                          '',
                                          decode(aresph.id_analysis_desc, NULL, chr(10) || chr(9) || chr(9), '')) ||
                                   aresph.desc_analysis_result,
                                   (aresph.comparator || aresph.analysis_result_value_1 || aresph.separator ||
                                   aresph.analysis_result_value_2) analysis_result_value,
                                   aresph.id_unit_measure,
                                   aresph.desc_unit_measure,
                                   aresph.id_result_status,
                                   aresph.ref_val,
                                   aresph.ref_val_min_str,
                                   aresph.ref_val_min,
                                   aresph.ref_val_max_str,
                                   aresph.ref_val_max,
                                   aresph.laboratory_short_desc,
                                   aresph.parameter_notes,
                                   aresph.interface_notes,
                                   aresph.flg_relevant,
                                   aresph.notes_doctor_registry,
                                   aresph.id_professional_cancel id_prof_cancel,
                                   aresph.dt_cancel dt_cancel_tstz,
                                   aresph.id_cancel_reason,
                                   aresph.notes_cancel
                              FROM analysis_result_par_hist aresph, analysis_result_hist arh, harvest h
                             WHERE aresph.id_analysis_result_par IN
                                   (SELECT /*+opt_estimate(table t rows=1)*/
                                     *
                                      FROM TABLE(i_analysis_result_par) t)
                               AND aresph.id_analysis_result = arh.id_analysis_result
                               AND arh.id_harvest = h.id_harvest(+)
                             ORDER BY dt_analysis_res_par_hist    DESC NULLS FIRST,
                                      dt_analysis_result_hist     DESC NULLS FIRST,
                                      dt_analysis_result_par_tstz DESC) t
                     ORDER BY rn DESC) aresp,
                   (SELECT arp.id_analysis_result_par, ar.id_analysis, ar.id_sample_type
                      FROM analysis_result_par arp, analysis_result ar
                     WHERE arp.id_arp_parent IS NULL
                       AND arp.id_analysis_result = ar.id_analysis_result) aresp_parent
             WHERE aresp.id_arp_parent = aresp_parent.id_analysis_result_par(+)
             ORDER BY cnt DESC;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_RESULT',
                                              o_error);
            pk_types.open_my_cursor(o_lab_test_result);
            pk_types.open_my_cursor(o_lab_test_result_history);
            RETURN FALSE;
    END get_lab_test_result;

    FUNCTION get_lab_test_doc_associated
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE,
        o_lab_test_doc     OUT pk_types.cursor_type,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        -- Obter detalhes
        g_error := 'OPEN O_LAB_TEST_DOC';
        OPEN o_lab_test_doc FOR
            SELECT ama.id_analysis_req_det,
                   ama.id_doc_external,
                   pk_date_utils.date_char_tsz(i_lang, ama.dt_last_update_tstz, i_prof.institution, i_prof.software) dt_reg,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, ama.id_prof_last_update) prof_reg,
                   pk_prof_utils.get_spec_signature(i_lang,
                                                    i_prof,
                                                    ama.id_prof_last_update,
                                                    ama.dt_last_update_tstz,
                                                    NULL) prof_spec_reg,
                   de.title doc_title,
                   decode(de.desc_doc_ori_type,
                          NULL,
                          pk_translation.get_translation(i_lang, 'DOC_ORI_TYPE.CODE_DOC_ORI_TYPE.' || de.id_doc_ori_type),
                          de.desc_doc_ori_type) doc_original_type,
                   pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', de.flg_status, i_lang) desc_status,
                   pk_date_utils.dt_chr(i_lang, de.dt_emited, i_prof) dt_doc,
                   de.desc_perf_by perform_by,
                   pk_doc.get_count_image(i_lang, i_prof, ama.id_doc_external) num_img,
                   decode(de.desc_doc_original,
                          NULL,
                          pk_translation.get_translation(i_lang, 'DOC_ORIGINAL.CODE_DOC_ORIGINAL.' || de.id_doc_original),
                          de.desc_doc_original) doc_original_desc,
                   decode(de.desc_doc_destination,
                          NULL,
                          pk_translation.get_translation(i_lang,
                                                         'DOC_TYPE.CODE_DOC_DESTINATION.' || de.id_doc_destination),
                          de.desc_doc_destination) doc_original_destination,
                   pk_doc.get_doc_last_comment(i_lang, i_prof, ama.id_doc_external) notes,
                   pk_doc.get_main_thumb_url(i_lang, i_prof, ama.id_doc_external) thumbnail,
                   pk_doc.get_count_image(i_lang, i_prof, ama.id_doc_external) thumbnail_icon
              FROM analysis_media_archive ama, doc_external de
             WHERE ama.id_analysis_req_det = i_analysis_req_det
               AND ama.flg_type = pk_lab_tests_constant.g_media_archive_analysis_doc
               AND ama.flg_status = pk_lab_tests_constant.g_active
               AND ama.id_doc_external = de.id_doc_external
             ORDER BY de.flg_status, de.dt_inserted DESC;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_DOC_ASSOCIATED',
                                              o_error);
            pk_types.open_my_cursor(o_lab_test_doc);
            RETURN FALSE;
    END get_lab_test_doc_associated;

    FUNCTION get_lab_test_to_edit
    (
        i_lang                        IN language.id_language%TYPE,
        i_prof                        IN profissional,
        i_episode                     IN episode.id_episode%TYPE,
        i_analysis_req_det            IN table_number,
        o_lab_test                    OUT pk_types.cursor_type,
        o_lab_test_clinical_questions OUT pk_types.cursor_type,
        o_error                       OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'OPEN O_LAB_TEST';
        OPEN o_lab_test FOR
            WITH table_cso AS
             (SELECT *
                FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang, i_prof, i_episode, NULL)))
            SELECT /*+ opt_estimate(table cso rows=1) */
             ar.id_analysis_req,
             ard.id_analysis_req_det,
             ard.id_analysis,
             ard.flg_status,
             decode(nvl(ar.id_episode, ar.id_episode_origin), NULL, NULL, ard.flg_time_harvest) flg_time,
             decode(nvl(ar.id_episode, ar.id_episode_origin),
                    NULL,
                    NULL,
                    pk_sysdomain.get_domain(i_lang,
                                            i_prof,
                                            'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                            ard.flg_time_harvest,
                                            NULL)) desc_time,
             pk_lab_tests_utils.get_alias_translation(i_lang,
                                                      i_prof,
                                                      pk_lab_tests_constant.g_analysis_alias,
                                                      'ANALYSIS.CODE_ANALYSIS.' || ard.id_analysis,
                                                      'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || ard.id_sample_type,
                                                      NULL) desc_analysis,
             decode(ar.flg_time,
                    pk_lab_tests_constant.g_flg_time_b,
                    pk_date_utils.trunc_insttimezone_str(i_prof, ard.dt_schedule, 'MI'),
                    pk_lab_tests_constant.g_flg_time_d,
                    pk_date_utils.trunc_insttimezone_str(i_prof, ard.dt_schedule, 'MI'),
                    pk_date_utils.trunc_insttimezone_str(i_prof, ard.dt_target_tstz, 'MI')) dt_begin_str,
             decode(ar.flg_time,
                    pk_lab_tests_constant.g_flg_time_b,
                    pk_date_utils.date_char_tsz(i_lang, ard.dt_schedule, i_prof.institution, i_prof.software),
                    pk_lab_tests_constant.g_flg_time_d,
                    pk_date_utils.date_char_tsz(i_lang, ard.dt_schedule, i_prof.institution, i_prof.software),
                    pk_date_utils.date_char_tsz(i_lang, ard.dt_target_tstz, i_prof.institution, i_prof.software)) dt_begin,
             ard.dt_final_target_tstz desc_time_limit_str,
             pk_date_utils.date_char_tsz(i_lang, ard.dt_final_target_tstz, i_prof.institution, i_prof.software) desc_time_limit,
             ard.flg_urgency flg_priority,
             pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ_DET.FLG_URGENCY', ard.flg_urgency, NULL) priority,
             ard.id_order_recurrence,
             decode(ard.id_order_recurrence,
                    NULL,
                    pk_translation.get_translation(i_lang, 'ORDER_RECURR_OPTION.CODE_ORDER_RECURR_OPTION.0'),
                    pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang, i_prof, ard.id_order_recurrence)) order_recurrence,
             ard.flg_prn,
             pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ_DET.FLG_PRN', ard.flg_prn, NULL) prn,
             ard.notes_prn,
             ard.id_sample_type,
             pk_lab_tests_utils.get_alias_translation(i_lang,
                                                      i_prof,
                                                      pk_lab_tests_constant.g_analysis_sample_alias,
                                                      'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || ard.id_sample_type,
                                                      NULL) desc_sample_type,
             h.id_body_part id_body_location,
             h.desc_body_location,
             h.flg_laterality flg_laterality,
             h.desc_laterality,
             ard.flg_col_inst,
             ard.id_room id_collection_room,
             decode(ard.id_room,
                    NULL,
                    pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_COL_INST', ard.flg_col_inst, i_lang),
                    nvl((SELECT r.desc_room
                          FROM room r
                         WHERE r.id_room = ard.id_room),
                        pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || ard.id_room))) collection_room,
             ard.notes,
             ard.notes_scheduler,
             ard.notes_tech notes_technician,
             ard.notes_patient,
             ard.diagnosis_notes,
             pk_diagnosis.concat_diag_id(i_lang, NULL, ard.id_analysis_req_det, NULL, i_prof, 'D') id_diagnosis,
             pk_diagnosis.concat_diag_id(i_lang, NULL, ard.id_analysis_req_det, NULL, i_prof, 'S') id_alert_diagnosis,
             pk_diagnosis.concat_diag_id(i_lang, NULL, ard.id_analysis_req_det, NULL, i_prof, 'C') code_diagnosis,
             pk_diagnosis.concat_diag(i_lang, NULL, ard.id_analysis_req_det, NULL, i_prof) desc_diagnosis,
             ard.id_clinical_purpose,
             ard.clinical_purpose_notes,
             decode(ard.id_clinical_purpose,
                    0,
                    ard.clinical_purpose_notes,
                    pk_translation.get_translation(i_lang,
                                                   'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                   ard.id_clinical_purpose)) clinical_purpose,
             ard.flg_fasting,
             pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_FASTING', ard.flg_fasting, i_lang) fasting,
             ard.id_exec_institution,
             ard.id_room_req id_lab_req,
             decode(ard.id_room_req,
                    NULL,
                    pk_translation.get_translation(i_lang, 'AB_INSTITUTION.CODE_INSTITUTION.' || ard.id_exec_institution),
                    nvl((SELECT r.desc_room
                          FROM room r
                         WHERE r.id_room = ard.id_room_req),
                        pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || ard.id_room_req))) lab_req,
             pk_lab_tests_utils.get_lab_test_codification(i_lang, i_prof, ard.id_analysis_codification) id_codification,
             pk_translation.get_translation(i_lang,
                                            'CODIFICATION.CODE_CODIFICATION.' ||
                                            pk_lab_tests_utils.get_lab_test_codification(i_lang,
                                                                                         i_prof,
                                                                                         ard.id_analysis_codification)) desc_codification,
             ars.id_prof_cc,
             ars.prof_cc,
             ars.id_prof_bcc,
             ars.prof_bcc,
             ard.id_pat_health_plan,
             pk_adt.get_pat_health_plan_info(i_lang, i_prof, ard.id_pat_health_plan, 'F') financial_entity,
             pk_adt.get_pat_health_plan_info(i_lang, i_prof, ard.id_pat_health_plan, 'H') health_plan,
             pk_adt.get_pat_health_plan_info(i_lang, i_prof, ard.id_pat_health_plan, 'N') insurance_number,
             ard.id_pat_exemption,
             pk_adt.get_pat_exemption_detail(i_lang, i_prof, ard.id_pat_exemption) exemption,
             ard.id_co_sign_order,
             cso.id_prof_ordered_by id_prof_order,
             cso.desc_prof_ordered_by prof_order,
             pk_date_utils.date_send_tsz(i_lang, cso.dt_ordered_by, i_prof) dt_order_str,
             pk_date_utils.date_char_tsz(i_lang, cso.dt_ordered_by, i_prof.institution, i_prof.software) dt_order,
             cso.id_order_type,
             cso.desc_order_type order_type
              FROM analysis_req ar,
                   analysis_req_det ard,
                   (SELECT ah.id_analysis_req_det,
                           substr(concatenate(h.id_body_part || nvl2(h.id_body_part, '; ', '')),
                                  1,
                                  length(concatenate(h.id_body_part || nvl2(h.id_body_part, '; ', ''))) - 2) id_body_part,
                           substr(concatenate(h.flg_laterality || nvl2(h.flg_laterality, '; ', '')),
                                  1,
                                  length(concatenate(h.flg_laterality || nvl2(h.flg_laterality, '; ', ''))) - 2) flg_laterality,
                           substr(concatenate(pk_translation.get_translation(i_lang,
                                                                             'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' ||
                                                                             h.id_body_part) ||
                                              decode(h.flg_laterality,
                                                     NULL,
                                                     NULL,
                                                     ' - ' || pk_sysdomain.get_domain('HARVEST.FLG_LATERALITY',
                                                                                      h.flg_laterality,
                                                                                      i_lang)) || '; '),
                                  1,
                                  length(concatenate(pk_translation.get_translation(i_lang,
                                                                                    'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' ||
                                                                                    h.id_body_part) ||
                                                     decode(h.flg_laterality,
                                                            NULL,
                                                            NULL,
                                                            ' - ' || pk_sysdomain.get_domain('HARVEST.FLG_LATERALITY',
                                                                                             h.flg_laterality,
                                                                                             i_lang)) || '; ')) - 2) desc_body_location,
                           substr(concatenate(pk_sysdomain.get_domain('HARVEST.FLG_LATERALITY', h.flg_laterality, i_lang) || '; '),
                                  1,
                                  length(concatenate(pk_sysdomain.get_domain('HARVEST.FLG_LATERALITY',
                                                                             h.flg_laterality,
                                                                             i_lang) || '; ')) - 2) desc_laterality
                      FROM analysis_harvest ah, harvest h
                     WHERE ah.id_analysis_req_det IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                       *
                                                        FROM TABLE(i_analysis_req_det) t)
                       AND ah.flg_status = pk_lab_tests_constant.g_active
                       AND ah.id_harvest = h.id_harvest
                       AND (h.flg_status IS NULL OR h.flg_status != pk_lab_tests_constant.g_harvest_inactive)
                     GROUP BY ah.id_analysis_req_det) h,
                   (SELECT id_analysis_req_det,
                           decode(id_prof_cc,
                                  NULL,
                                  email_cc,
                                  decode(email_cc, NULL, id_prof_cc, id_prof_cc || ';' || email_cc)) id_prof_cc,
                           decode(prof_cc,
                                  NULL,
                                  email_prof_cc,
                                  decode(email_prof_cc, NULL, prof_cc, prof_cc || '; ' || email_prof_cc)) prof_cc,
                           decode(id_prof_bcc,
                                  NULL,
                                  email_bcc,
                                  decode(email_bcc, NULL, id_prof_bcc, id_prof_bcc || ';' || email_bcc)) id_prof_bcc,
                           decode(prof_bcc,
                                  NULL,
                                  email_prof_bcc,
                                  decode(email_prof_bcc, NULL, prof_bcc, prof_bcc || '; ' || email_prof_bcc)) prof_bcc
                      FROM (SELECT ars.id_analysis_req_det,
                                   substr(concatenate(ars.id_prof_cc || nvl2(ars.id_prof_cc, ';', '')),
                                          1,
                                          length(concatenate(ars.id_prof_cc || nvl2(ars.id_prof_cc, ';', ''))) - 1) id_prof_cc,
                                   substr(concatenate(ars.email_cc || nvl2(ars.email_cc, ';', '')),
                                          1,
                                          length(concatenate(ars.email_cc || nvl2(ars.email_cc, ';', ''))) - 1) email_cc,
                                   substr(concatenate(pk_prof_utils.get_name_signature(i_lang, i_prof, ars.id_prof_cc) ||
                                                      nvl2(ars.id_prof_cc, '; ', '')),
                                          1,
                                          length(concatenate(pk_prof_utils.get_name_signature(i_lang,
                                                                                              i_prof,
                                                                                              ars.id_prof_cc) ||
                                                             nvl2(ars.id_prof_cc, '; ', ''))) - 2) prof_cc,
                                   substr(concatenate(ars.email_cc || nvl2(ars.email_cc, '; ', '')),
                                          1,
                                          length(concatenate(ars.email_cc || nvl2(ars.email_cc, '; ', ''))) - 2) email_prof_cc,
                                   substr(concatenate(ars.id_prof_bcc || nvl2(ars.id_prof_bcc, ';', '')),
                                          1,
                                          length(concatenate(ars.id_prof_bcc || nvl2(ars.id_prof_bcc, ';', ''))) - 1) id_prof_bcc,
                                   substr(concatenate(ars.email_bcc || nvl2(ars.email_bcc, ';', '')),
                                          1,
                                          length(concatenate(ars.email_bcc || nvl2(ars.email_bcc, ';', ''))) - 1) email_bcc,
                                   substr(concatenate(pk_prof_utils.get_name_signature(i_lang, i_prof, ars.id_prof_bcc) ||
                                                      nvl2(ars.id_prof_bcc, '; ', '')),
                                          1,
                                          length(concatenate(pk_prof_utils.get_name_signature(i_lang,
                                                                                              i_prof,
                                                                                              ars.id_prof_bcc) ||
                                                             nvl2(ars.id_prof_bcc, '; ', ''))) - 2) prof_bcc,
                                   substr(concatenate(ars.email_bcc || nvl2(ars.email_bcc, '; ', '')),
                                          1,
                                          length(concatenate(ars.email_bcc || nvl2(ars.email_bcc, '; ', ''))) - 2) email_prof_bcc
                              FROM analysis_result_send ars
                             WHERE ars.id_analysis_req_det IN
                                   (SELECT /*+opt_estimate(table t rows=1)*/
                                     *
                                      FROM TABLE(i_analysis_req_det) t)
                               AND ars.flg_status != pk_lab_tests_constant.g_analysis_cancel
                             GROUP BY ars.id_analysis_req_det)) ars,
                   table_cso cso
             WHERE ard.id_analysis_req_det IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                *
                                                 FROM TABLE(i_analysis_req_det) t)
               AND ard.id_analysis_req = ar.id_analysis_req
               AND ard.id_analysis_req_det = h.id_analysis_req_det(+)
               AND ard.id_analysis_req_det = ars.id_analysis_req_det(+)
               AND ard.id_co_sign_order = cso.id_co_sign_hist(+);
    
        g_error := 'GET CURSOR O_LAB_TEST_CLINICAL_QUESTIONS';
        OPEN o_lab_test_clinical_questions FOR
            SELECT aqr.id_analysis_req_det,
                   aqr.id_questionnaire,
                   pk_mcdt.get_questionnaire_alias(i_lang,
                                                   i_prof,
                                                   'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' || aqr.id_questionnaire) desc_questionnaire,
                   decode(instr(pk_lab_tests_utils.get_lab_test_question_type(i_lang,
                                                                              i_prof,
                                                                              ard.id_analysis,
                                                                              ard.id_sample_type,
                                                                              pk_lab_tests_constant.g_analysis_cq_on_order,
                                                                              aqr.id_questionnaire,
                                                                              aqr.id_response),
                                'D'),
                          0,
                          to_char(aqr1.id_response),
                          to_char(aqr.notes)) id_response,
                   decode(dbms_lob.getlength(aqr.notes),
                          NULL,
                          aqr1.desc_response,
                          pk_lab_tests_utils.get_lab_test_response(i_lang, i_prof, aqr.notes)) desc_response
              FROM (SELECT aqr.id_analysis_req_det,
                           aqr.id_questionnaire,
                           substr(concatenate(aqr.id_response || '; '),
                                  1,
                                  length(concatenate(aqr.id_response || '; ')) - 2) id_response,
                           listagg(pk_mcdt.get_response_alias(i_lang,
                                                              i_prof,
                                                              'RESPONSE.CODE_RESPONSE.' || aqr.id_response),
                                   '; ') within GROUP(ORDER BY aqr.id_response) desc_response,
                           aqr.dt_last_update_tstz,
                           row_number() over(PARTITION BY aqr.id_questionnaire ORDER BY aqr.dt_last_update_tstz DESC NULLS FIRST) rn
                      FROM analysis_question_response aqr
                     WHERE aqr.id_analysis_req_det IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                        *
                                                         FROM TABLE(i_analysis_req_det) t)
                       AND aqr.id_harvest IS NULL
                     GROUP BY aqr.id_analysis_req_det, aqr.id_questionnaire, aqr.dt_last_update_tstz) aqr1,
                   analysis_question_response aqr,
                   analysis_req_det ard
             WHERE aqr1.rn = 1
               AND aqr1.id_analysis_req_det = aqr.id_analysis_req_det
               AND aqr1.id_questionnaire = aqr.id_questionnaire
               AND aqr1.dt_last_update_tstz = aqr.dt_last_update_tstz
               AND aqr.id_analysis_req_det = ard.id_analysis_req_det;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_TO_EDIT',
                                              o_error);
            pk_types.open_my_cursor(o_lab_test);
            pk_types.open_my_cursor(o_lab_test_clinical_questions);
            RETURN FALSE;
    END get_lab_test_to_edit;

    FUNCTION get_lab_test_response_to_edit
    (
        i_lang                        IN language.id_language%TYPE,
        i_prof                        IN profissional,
        i_analysis_req_det            IN analysis_question_response.id_analysis_req_det%TYPE,
        o_lab_test_clinical_questions OUT pk_types.cursor_type,
        o_error                       OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'OPEN O_LAB_TEST_CLINICAL_QUESTIONS';
        OPEN o_lab_test_clinical_questions FOR
            SELECT aqr.id_questionnaire,
                   decode(instr(pk_lab_tests_utils.get_lab_test_question_type(i_lang,
                                                                              i_prof,
                                                                              ard.id_analysis,
                                                                              ard.id_sample_type,
                                                                              pk_lab_tests_constant.g_analysis_cq_on_order,
                                                                              aqr.id_questionnaire,
                                                                              aqr.id_response),
                                'D'),
                          0,
                          to_char(aqr.id_response),
                          to_char(aqr.notes)) id_response,
                   decode(aqr.id_response,
                          NULL,
                          pk_lab_tests_utils.get_lab_test_response(i_lang, i_prof, aqr.notes),
                          pk_translation.get_translation(i_lang, 'RESPONSE.CODE_RESPONSE.' || aqr.id_response)) desc_response
              FROM analysis_question_response aqr
             INNER JOIN analysis_req_det ard
                ON aqr.id_analysis_req_det = ard.id_analysis_req_det
             WHERE aqr.id_analysis_req_det = i_analysis_req_det;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_RESPONSE_TO_EDIT',
                                              o_error);
            pk_types.open_my_cursor(o_lab_test_clinical_questions);
            RETURN FALSE;
    END get_lab_test_response_to_edit;

    FUNCTION get_lab_test_to_result
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_patient          IN patient.id_patient%TYPE,
        i_analysis         IN analysis.id_analysis%TYPE,
        i_sample_type      IN sample_type.id_sample_type%TYPE,
        i_analysis_req_det IN table_number,
        i_harvest          IN harvest.id_harvest%TYPE,
        i_analysis_result  IN analysis_result.id_analysis_result%TYPE,
        i_flg_type         IN VARCHAR2,
        o_lab_test         OUT pk_types.cursor_type,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_id_analysis    analysis.id_analysis%TYPE;
        l_id_sample_type sample_type.id_sample_type%TYPE;
        l_flg_type       VARCHAR2(10 CHAR);
        l_tbl_analysis   table_number;
        l_tbl_sample     table_number;
    
    BEGIN
    
        -- Quando se migrar a área das análises para HTML cria-se um campo novo na função para a flg_category_type
        IF i_flg_type = 'BT'
        THEN
            BEGIN
                SELECT a.id_analysis, a.id_sample_type
                  BULK COLLECT
                  INTO l_tbl_analysis, l_tbl_sample
                  FROM analysis_instit_soft a
                 INNER JOIN analysis_instit_recipient b
                    ON a.id_analysis_instit_soft = b.id_analysis_instit_soft
                 WHERE a.flg_category_type = i_flg_type
                   AND a.id_institution = i_prof.institution
                   AND a.id_software = i_prof.software
                   AND a.flg_available = pk_alert_constant.g_yes;
            
                l_id_analysis    := l_tbl_analysis(1);
                l_id_sample_type := l_tbl_sample(1);
                l_flg_type       := NULL;
            EXCEPTION
                WHEN OTHERS THEN
                    g_error_code := 'ANALYSIS_M059';
                    g_error      := pk_message.get_message(i_lang, 'ANALYSIS_M059');
                    RAISE g_user_exception;
            END;
        
        ELSE
            l_id_analysis    := i_analysis;
            l_id_sample_type := i_sample_type;
            l_flg_type       := i_flg_type;
        END IF;
    
        IF i_analysis_req_det.count > 0
        THEN
            g_error := 'OPEN O_LAB_TEST';
            OPEN o_lab_test FOR
                SELECT flg_type,
                       id_analysis_req_det,
                       id_analysis_req_par,
                       id_harvest,
                       id_analysis_result_par,
                       id_analysis,
                       id_sample_type,
                       id_analysis_parameter,
                       id_analysis_param,
                       flg_result_type,
                       desc_analysis,
                       prof_result,
                       dt_result,
                       RESULT,
                       id_analysis_desc,
                       id_result_status,
                       result_status,
                       abnormality,
                       ref_val,
                       ref_val_min,
                       ref_val_max,
                       id_unit_measure,
                       desc_unit_measure,
                       result_notes,
                       parameter_notes,
                       flg_result_origin,
                       result_origin_notes,
                       rank_analysis,
                       rank_parameter,
                       id_doc_external
                  FROM (SELECT ar.flg_type,
                               ar.id_analysis_req_det,
                               ar.id_analysis_req_par,
                               ar.id_harvest,
                               ar.id_analysis_result_par,
                               ar.id_analysis,
                               ar.id_sample_type,
                               ar.id_analysis_parameter,
                               ar.id_analysis_param,
                               (SELECT ap.flg_fill_type
                                  FROM analysis_param ap
                                 WHERE ap.id_analysis = ar.id_analysis
                                   AND ap.id_sample_type = ar.id_sample_type
                                   AND ap.id_analysis_parameter = ar.id_analysis_parameter
                                   AND ap.id_institution = i_prof.institution
                                   AND ap.id_software = i_prof.software
                                   AND ap.flg_available = pk_lab_tests_constant.g_available) flg_result_type,
                               ar.desc_analysis,
                               ar.prof_result,
                               pk_date_utils.date_send_tsz(i_lang, ar.dt_analysis_result_tstz, i_prof) dt_result,
                               decode(dbms_lob.getlength(ar.desc_analysis_result),
                                      NULL,
                                      to_clob(ar.analysis_result_value),
                                      ar.desc_analysis_result) RESULT,
                               ar.id_analysis_desc,
                               ar.id_result_status,
                               pk_translation.get_translation(i_lang,
                                                              'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                              ar.id_result_status) result_status,
                               ar.abnormality,
                               CASE
                                    WHEN ar.ref_val IS NOT NULL THEN
                                     ar.ref_val
                                    ELSE
                                     pk_lab_tests_utils.get_lab_test_reference_value(i_lang,
                                                                                     i_prof,
                                                                                     i_patient,
                                                                                     ar.id_analysis,
                                                                                     ar.id_sample_type,
                                                                                     ar.id_analysis_parameter,
                                                                                     'ALL')
                                END ref_val,
                               CASE
                                    WHEN ar.ref_val_min IS NOT NULL THEN
                                     ar.ref_val_min
                                    ELSE
                                     pk_lab_tests_utils.get_lab_test_reference_value(i_lang,
                                                                                     i_prof,
                                                                                     i_patient,
                                                                                     ar.id_analysis,
                                                                                     ar.id_sample_type,
                                                                                     ar.id_analysis_parameter,
                                                                                     'MIN')
                                END ref_val_min,
                               CASE
                                    WHEN ar.ref_val_max IS NOT NULL THEN
                                     ar.ref_val_max
                                    ELSE
                                     pk_lab_tests_utils.get_lab_test_reference_value(i_lang,
                                                                                     i_prof,
                                                                                     i_patient,
                                                                                     ar.id_analysis,
                                                                                     ar.id_sample_type,
                                                                                     ar.id_analysis_parameter,
                                                                                     'MAX')
                                END ref_val_max,
                               CASE
                                    WHEN ar.id_unit_measure IS NOT NULL THEN
                                     ar.id_unit_measure
                                    ELSE
                                     pk_lab_tests_utils.get_lab_test_unit_measure(i_lang,
                                                                                  i_prof,
                                                                                  ar.id_analysis,
                                                                                  ar.id_sample_type,
                                                                                  ar.id_analysis_parameter)
                                END id_unit_measure,
                               CASE
                                    WHEN ar.desc_unit_measure IS NOT NULL THEN
                                     ar.desc_unit_measure
                                    ELSE
                                     pk_translation.get_translation(i_lang,
                                                                    'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                    pk_lab_tests_utils.get_lab_test_unit_measure(i_lang,
                                                                                                                 i_prof,
                                                                                                                 ar.id_analysis,
                                                                                                                 ar.id_sample_type,
                                                                                                                 ar.id_analysis_parameter))
                                END desc_unit_measure,
                               ar.result_notes,
                               CASE
                                    WHEN ar.parameter_notes IS NOT NULL THEN
                                     ar.parameter_notes
                                    ELSE
                                     to_clob(pk_translation.get_translation(i_lang,
                                                                            'SAMPLE_TEXT.CODE_DESC_SAMPLE_TEXT.' ||
                                                                            pk_lab_tests_utils.get_lab_test_parameter_notes(i_lang,
                                                                                                                            i_prof,
                                                                                                                            ar.id_analysis,
                                                                                                                            ar.id_sample_type,
                                                                                                                            ar.id_analysis_parameter)))
                                END parameter_notes,
                               ar.flg_result_origin,
                               ar.result_origin_notes,
                               pk_lab_tests_utils.get_lab_test_rank(i_lang, i_prof, ar.id_analysis, NULL) rank_analysis,
                               pk_lab_tests_utils.get_lab_test_parameter_rank(i_lang,
                                                                              i_prof,
                                                                              ar.id_analysis,
                                                                              ar.id_sample_type,
                                                                              ar.id_analysis_parameter) rank_parameter,
                               ar.id_doc_external
                          FROM (SELECT 'A' flg_type,
                                       lte.id_analysis_req_det,
                                       NULL id_analysis_req_par,
                                       ar.id_harvest,
                                       NULL id_analysis_result_par,
                                       lte.id_analysis,
                                       lte.id_sample_type,
                                       NULL id_analysis_parameter,
                                       NULL id_analysis_param,
                                       pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                pk_lab_tests_constant.g_analysis_alias,
                                                                                'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                lte.id_analysis,
                                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                lte.id_sample_type,
                                                                                NULL) desc_analysis,
                                       pk_prof_utils.get_name_signature(i_lang, i_prof, ar.id_professional) prof_result,
                                       ar.dt_analysis_result_tstz,
                                       NULL desc_analysis_result,
                                       NULL analysis_result_value,
                                       NULL id_analysis_desc,
                                       NULL abnormality,
                                       NULL ref_val,
                                       NULL ref_val_min,
                                       NULL ref_val_max,
                                       NULL id_unit_measure,
                                       NULL desc_unit_measure,
                                       ar.notes result_notes,
                                       NULL parameter_notes,
                                       NULL id_result_status,
                                       ar.flg_result_origin,
                                       ar.result_origin_notes,
                                       NULL id_doc_external
                                  FROM (SELECT lte.*,
                                               h.id_harvest,
                                               row_number() over(PARTITION BY lte.id_analysis_req_det ORDER BY h.dt_harvest_tstz DESC NULLS LAST) rn
                                          FROM lab_tests_ea lte, analysis_harvest ah, harvest h
                                         WHERE lte.id_analysis_req_det IN
                                               (SELECT /*+ opt_estimate(table t rows=1)*/
                                                 *
                                                  FROM TABLE(i_analysis_req_det) t)
                                           AND lte.id_analysis_req_det = ah.id_analysis_req_det
                                           AND ah.flg_status != pk_lab_tests_constant.g_harvest_inactive
                                           AND ah.id_harvest = h.id_harvest
                                           AND h.flg_status NOT IN
                                               (pk_lab_tests_constant.g_harvest_pending,
                                                pk_lab_tests_constant.g_harvest_waiting,
                                                pk_lab_tests_constant.g_harvest_cancel,
                                                pk_lab_tests_constant.g_harvest_suspended)) lte,
                                       analysis_result ar
                                 WHERE lte.id_analysis_req_det = ar.id_analysis_req_det(+)
                                   AND lte.id_harvest = ar.id_harvest(+)
                                   AND lte.rn = 1
                                UNION ALL
                                SELECT 'P' flg_type,
                                       lte.id_analysis_req_det,
                                       arp.id_analysis_req_par,
                                       NULL id_harvest,
                                       NULL id_analysis_result_par,
                                       ap.id_analysis,
                                       ap.id_sample_type,
                                       ap.id_analysis_parameter,
                                       ap.id_analysis_param,
                                       decode(i_harvest,
                                              NULL,
                                              pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                        i_prof,
                                                                                        pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                                        'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                                        ap.id_analysis_parameter,
                                                                                        'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                        ap.id_sample_type,
                                                                                        NULL) ||
                                              decode(h.id_body_part,
                                                     NULL,
                                                     NULL,
                                                     ', ' || pk_translation.get_translation(i_lang,
                                                                                            'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' ||
                                                                                            h.id_body_part)),
                                              pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                        i_prof,
                                                                                        pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                                        'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                                        ap.id_analysis_parameter,
                                                                                        'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                        ap.id_sample_type,
                                                                                        NULL)) desc_analysis,
                                       NULL prof_result,
                                       NULL dt_analysis_result_tstz,
                                       NULL desc_analysis_result,
                                       NULL analysis_result_value,
                                       NULL id_analysis_desc,
                                       NULL abnormality,
                                       NULL ref_val,
                                       NULL ref_val_min,
                                       NULL ref_val_max,
                                       NULL id_unit_measure,
                                       NULL desc_unit_measure,
                                       NULL result_notes,
                                       NULL parameter_notes,
                                       pk_lab_tests_utils.get_lab_test_result_status(i_lang, i_prof) id_result_status,
                                       NULL flg_result_origin,
                                       NULL result_origin_notes,
                                       NULL id_doc_external
                                  FROM lab_tests_ea     lte,
                                       analysis_req_par arp,
                                       analysis_harvest ah,
                                       harvest          h,
                                       analysis_param   ap
                                 WHERE lte.id_analysis_req_det IN
                                       (SELECT /*+opt_estimate(table t rows=1)*/
                                         *
                                          FROM TABLE(i_analysis_req_det) t)
                                   AND lte.flg_status_det NOT IN
                                       (pk_lab_tests_constant.g_analysis_result, pk_lab_tests_constant.g_analysis_cancel)
                                   AND lte.id_analysis_req_det = arp.id_analysis_req_det
                                   AND lte.id_analysis_req_det = ah.id_analysis_req_det(+)
                                   AND ah.id_harvest = h.id_harvest(+)
                                   AND (h.id_harvest = i_harvest OR i_harvest IS NULL)
                                   AND ((NOT EXISTS (SELECT 1
                                                       FROM analysis_result ar
                                                      WHERE ar.id_harvest = h.id_harvest) OR NOT EXISTS
                                        (SELECT 1
                                            FROM analysis_result_par ar
                                           WHERE ar.id_analysis_req_par = arp.id_analysis_req_par)))
                                   AND arp.id_analysis_parameter = ap.id_analysis_parameter
                                   AND lte.id_analysis = ap.id_analysis
                                   AND lte.id_sample_type = ap.id_sample_type
                                   AND ap.id_institution = i_prof.institution
                                   AND ap.id_software = i_prof.software
                                   AND ap.flg_available = pk_lab_tests_constant.g_yes
                                UNION ALL
                                SELECT 'P' flg_type,
                                       aresp.id_analysis_req_det,
                                       aresp.id_analysis_req_par,
                                       aresp.id_harvest,
                                       aresp.id_analysis_result_par,
                                       aresp.id_analysis,
                                       aresp.id_sample_type,
                                       aresp.id_analysis_parameter,
                                       NULL id_analysis_param,
                                       decode(i_harvest,
                                              NULL,
                                              pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                        i_prof,
                                                                                        pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                                        'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                                        aresp.id_analysis_parameter,
                                                                                        'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                        aresp.id_sample_type,
                                                                                        NULL) ||
                                              decode(aresp.id_body_part,
                                                     NULL,
                                                     NULL,
                                                     ', ' || pk_translation.get_translation(i_lang,
                                                                                            'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' ||
                                                                                            aresp.id_body_part)),
                                              pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                        i_prof,
                                                                                        pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                                        'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                                        aresp.id_analysis_parameter,
                                                                                        'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                        aresp.id_sample_type,
                                                                                        NULL)) desc_analysis,
                                       pk_prof_utils.get_name_signature(i_lang, i_prof, aresp.id_professional) prof_result,
                                       aresp.dt_analysis_result_tstz,
                                       aresp.desc_analysis_result,
                                       aresp.analysis_result_value_1 analysis_result_value,
                                       aresp.id_analysis_desc,
                                       decode(a.value, NULL, 'PN', 'PA') abnormality,
                                       nvl(aresp.ref_val,
                                           decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                  nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                                  ' - ',
                                                  NULL,
                                                  nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                  nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max))) ref_val,
                                       nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) ref_val_min,
                                       nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) ref_val_max,
                                       aresp.id_unit_measure id_unit_measure,
                                       nvl(aresp.desc_unit_measure,
                                           pk_translation.get_translation(i_lang,
                                                                          'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                          aresp.id_unit_measure)) desc_unit_measure,
                                       aresp.notes result_notes,
                                       decode(dbms_lob.getlength(aresp.parameter_notes),
                                              NULL,
                                              decode(dbms_lob.getlength(aresp.interface_notes),
                                                     NULL,
                                                     to_clob(''),
                                                     aresp.interface_notes),
                                              aresp.parameter_notes) parameter_notes,
                                       nvl(aresp.id_result_status,
                                           pk_lab_tests_utils.get_lab_test_result_status(i_lang, i_prof)) id_result_status,
                                       aresp.flg_result_origin,
                                       aresp.result_origin_notes,
                                       aresp.id_doc_external
                                  FROM (SELECT *
                                          FROM (SELECT arp.*,
                                                       ar.id_analysis,
                                                       ar.id_sample_type,
                                                       ar.id_analysis_req_det,
                                                       ar.id_harvest,
                                                       h.id_body_part,
                                                       ar.dt_analysis_result_tstz,
                                                       ar.notes,
                                                       ar.flg_result_origin,
                                                       ar.result_origin_notes,
                                                       ama.id_doc_external,
                                                       CASE
                                                            WHEN ar.flg_mult_result = pk_lab_tests_constant.g_yes THEN
                                                             decode(ar.id_harvest,
                                                                    NULL,
                                                                    row_number() over(PARTITION BY arp.id_analysis_result,
                                                                         arp.id_analysis_parameter ORDER BY
                                                                         arp.dt_ins_result_tstz DESC),
                                                                    row_number()
                                                                    over(PARTITION BY ar.id_harvest,
                                                                         arp.id_analysis_req_par,
                                                                         arp.id_analysis_result_par ORDER BY dt_ins_result_tstz DESC))
                                                            ELSE
                                                             decode(ar.id_harvest,
                                                                    NULL,
                                                                    row_number() over(PARTITION BY arp.id_analysis_result,
                                                                         arp.id_analysis_parameter,
                                                                         arp.id_analysis_result_par ORDER BY
                                                                         arp.dt_ins_result_tstz DESC),
                                                                    row_number() over(PARTITION BY ar.id_harvest,
                                                                         arp.id_analysis_req_par ORDER BY
                                                                         arp.dt_ins_result_tstz DESC))
                                                        END rn
                                                  FROM analysis_result        ar,
                                                       analysis_result_par    arp,
                                                       harvest                h,
                                                       analysis_media_archive ama
                                                 WHERE ar.id_analysis_req_det IN
                                                       (SELECT /*+ opt_estimate(table t rows=1)*/
                                                         *
                                                          FROM TABLE(i_analysis_req_det) t)
                                                   AND (ar.id_harvest = i_harvest OR i_harvest IS NULL)
                                                   AND ar.id_analysis_result = arp.id_analysis_result
                                                   AND ar.id_harvest = h.id_harvest(+)
                                                   AND arp.id_analysis_result_par = ama.id_analysis_result_par(+)
                                                   AND ama.flg_status(+) = pk_alert_constant.g_active) ar
                                         WHERE ar.rn = 1) aresp,
                                       (SELECT *
                                          FROM abnormality
                                         WHERE flg_visible = pk_lab_tests_constant.g_yes) a,
                                       result_status rs
                                 WHERE aresp.id_result_status = rs.id_result_status(+)
                                   AND aresp.id_abnormality = a.id_abnormality(+)) ar)
                 ORDER BY rank_analysis, id_analysis, id_harvest, flg_type, rank_parameter, id_analysis_parameter;
        ELSE
            g_error := 'OPEN O_LAB_TEST';
            OPEN o_lab_test FOR
                SELECT flg_type,
                       id_analysis_req_det,
                       id_analysis_req_par,
                       id_harvest,
                       id_analysis_result_par,
                       id_analysis,
                       id_sample_type,
                       id_analysis_parameter,
                       id_analysis_param,
                       flg_result_type,
                       desc_analysis,
                       prof_result,
                       dt_result,
                       RESULT,
                       id_analysis_desc,
                       id_result_status,
                       result_status,
                       abnormality,
                       ref_val,
                       ref_val_min,
                       ref_val_max,
                       id_unit_measure,
                       desc_unit_measure,
                       result_notes,
                       parameter_notes,
                       flg_result_origin,
                       result_origin_notes,
                       rank_analysis,
                       rank_parameter,
                       NULL id_doc_external
                  FROM (SELECT ar.flg_type,
                               ar.id_analysis_req_det,
                               ar.id_analysis_req_par,
                               ar.id_harvest,
                               ar.id_analysis_result_par,
                               ar.id_analysis,
                               ar.id_sample_type,
                               ar.id_analysis_parameter,
                               ar.id_analysis_param,
                               (SELECT ap.flg_fill_type
                                  FROM analysis_param ap
                                 WHERE ap.id_analysis = ar.id_analysis
                                   AND ap.id_sample_type = ar.id_sample_type
                                   AND ap.id_analysis_parameter = ar.id_analysis_parameter
                                   AND ap.id_institution = i_prof.institution
                                   AND ap.id_software = i_prof.software
                                   AND ap.flg_available = pk_lab_tests_constant.g_available) flg_result_type,
                               ar.desc_analysis,
                               ar.prof_result,
                               pk_date_utils.date_send_tsz(i_lang, ar.dt_analysis_result_tstz, i_prof) dt_result,
                               decode(dbms_lob.getlength(ar.desc_analysis_result),
                                      NULL,
                                      to_clob(ar.analysis_result_value),
                                      ar.desc_analysis_result) RESULT,
                               ar.id_analysis_desc,
                               ar.id_result_status,
                               pk_translation.get_translation(i_lang,
                                                              'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                              ar.id_result_status) result_status,
                               ar.abnormality,
                               CASE
                                    WHEN ar.ref_val IS NOT NULL THEN
                                     ar.ref_val
                                    ELSE
                                     pk_lab_tests_utils.get_lab_test_reference_value(i_lang,
                                                                                     i_prof,
                                                                                     i_patient,
                                                                                     ar.id_analysis,
                                                                                     ar.id_sample_type,
                                                                                     ar.id_analysis_parameter,
                                                                                     'ALL')
                                END ref_val,
                               CASE
                                    WHEN ar.ref_val_min IS NOT NULL THEN
                                     ar.ref_val_min
                                    ELSE
                                     pk_lab_tests_utils.get_lab_test_reference_value(i_lang,
                                                                                     i_prof,
                                                                                     i_patient,
                                                                                     ar.id_analysis,
                                                                                     ar.id_sample_type,
                                                                                     ar.id_analysis_parameter,
                                                                                     'MIN')
                                END ref_val_min,
                               CASE
                                    WHEN ar.ref_val_max IS NOT NULL THEN
                                     ar.ref_val_max
                                    ELSE
                                     pk_lab_tests_utils.get_lab_test_reference_value(i_lang,
                                                                                     i_prof,
                                                                                     i_patient,
                                                                                     ar.id_analysis,
                                                                                     ar.id_sample_type,
                                                                                     ar.id_analysis_parameter,
                                                                                     'MAX')
                                END ref_val_max,
                               CASE
                                    WHEN ar.id_unit_measure IS NOT NULL THEN
                                     ar.id_unit_measure
                                    ELSE
                                     pk_lab_tests_utils.get_lab_test_unit_measure(i_lang,
                                                                                  i_prof,
                                                                                  ar.id_analysis,
                                                                                  ar.id_sample_type,
                                                                                  ar.id_analysis_parameter)
                                END id_unit_measure,
                               CASE
                                    WHEN ar.desc_unit_measure IS NOT NULL THEN
                                     ar.desc_unit_measure
                                    ELSE
                                     pk_translation.get_translation(i_lang,
                                                                    'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                    pk_lab_tests_utils.get_lab_test_unit_measure(i_lang,
                                                                                                                 i_prof,
                                                                                                                 ar.id_analysis,
                                                                                                                 ar.id_sample_type,
                                                                                                                 ar.id_analysis_parameter))
                                END desc_unit_measure,
                               ar.result_notes,
                               CASE
                                    WHEN ar.parameter_notes IS NOT NULL THEN
                                     ar.parameter_notes
                                    ELSE
                                     to_clob(pk_translation.get_translation(i_lang,
                                                                            'SAMPLE_TEXT.CODE_DESC_SAMPLE_TEXT.' ||
                                                                            pk_lab_tests_utils.get_lab_test_parameter_notes(i_lang,
                                                                                                                            i_prof,
                                                                                                                            ar.id_analysis,
                                                                                                                            ar.id_sample_type,
                                                                                                                            ar.id_analysis_parameter)))
                                END parameter_notes,
                               ar.flg_result_origin,
                               ar.result_origin_notes,
                               pk_lab_tests_utils.get_lab_test_rank(i_lang, i_prof, ar.id_analysis, NULL) rank_analysis,
                               pk_lab_tests_utils.get_lab_test_parameter_rank(i_lang,
                                                                              i_prof,
                                                                              ar.id_analysis,
                                                                              ar.id_sample_type,
                                                                              ar.id_analysis_parameter) rank_parameter
                          FROM (SELECT 'A' flg_type,
                                       NULL id_analysis_req_det,
                                       NULL id_analysis_req_par,
                                       NULL id_harvest,
                                       NULL id_analysis_result_par,
                                       ap.id_analysis,
                                       ap.id_sample_type,
                                       NULL id_analysis_parameter,
                                       NULL id_analysis_param,
                                       pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                pk_lab_tests_constant.g_analysis_alias,
                                                                                'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                ap.id_analysis,
                                                                                'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                ap.id_sample_type,
                                                                                NULL) desc_analysis,
                                       pk_prof_utils.get_name_signature(i_lang, i_prof, ar.id_professional) prof_result,
                                       ar.dt_analysis_result_tstz,
                                       NULL desc_analysis_result,
                                       NULL analysis_result_value,
                                       NULL id_analysis_desc,
                                       NULL abnormality,
                                       NULL ref_val,
                                       NULL ref_val_min,
                                       NULL ref_val_max,
                                       NULL id_unit_measure,
                                       NULL desc_unit_measure,
                                       ar.notes result_notes,
                                       NULL parameter_notes,
                                       NULL id_result_status,
                                       ar.flg_result_origin,
                                       ar.result_origin_notes
                                  FROM analysis_param ap,
                                       (SELECT *
                                          FROM analysis_result ar
                                         WHERE ar.id_analysis_result = i_analysis_result) ar
                                 WHERE ap.id_analysis = l_id_analysis
                                   AND ap.id_sample_type = l_id_sample_type
                                   AND ap.id_institution = i_prof.institution
                                   AND ap.id_software = i_prof.software
                                   AND ap.flg_available = pk_lab_tests_constant.g_available
                                   AND ap.id_analysis = ar.id_analysis(+)
                                   AND rownum = 1
                                UNION ALL
                                SELECT 'P' flg_type,
                                       NULL id_analysis_req_det,
                                       NULL id_analysis_req_par,
                                       NULL id_harvest,
                                       NULL id_analysis_result_par,
                                       ap.id_analysis,
                                       ap.id_sample_type,
                                       ap.id_analysis_parameter,
                                       ap.id_analysis_param,
                                       pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                 i_prof,
                                                                                 pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                                 'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                                 ap.id_analysis_parameter,
                                                                                 'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                 ap.id_sample_type,
                                                                                 NULL) desc_analysis,
                                       NULL prof_result,
                                       NULL dt_analysis_result_tstz,
                                       NULL desc_analysis_result,
                                       NULL analysis_result_value,
                                       NULL id_analysis_desc,
                                       NULL abnormality,
                                       NULL ref_val,
                                       NULL ref_val_min,
                                       NULL ref_val_max,
                                       NULL id_unit_measure,
                                       NULL desc_unit_measure,
                                       NULL result_notes,
                                       NULL parameter_notes,
                                       pk_lab_tests_utils.get_lab_test_result_status(i_lang, i_prof) id_result_status,
                                       NULL flg_result_origin,
                                       NULL result_origin_notes
                                  FROM analysis_param ap
                                 WHERE ap.id_analysis = l_id_analysis
                                   AND ap.id_sample_type = l_id_sample_type
                                   AND ap.id_institution = i_prof.institution
                                   AND ap.id_software = i_prof.software
                                   AND ap.flg_available = pk_lab_tests_constant.g_available
                                   AND ((NOT EXISTS
                                        (SELECT 1
                                            FROM analysis_result_par arp
                                           WHERE arp.id_analysis_result = i_analysis_result
                                             AND arp.id_analysis_parameter = ap.id_analysis_parameter)) OR
                                       l_flg_type IS NULL)
                                UNION ALL
                                SELECT 'P' flg_type,
                                       aresp.id_analysis_req_det,
                                       aresp.id_analysis_req_par,
                                       aresp.id_harvest,
                                       aresp.id_analysis_result_par,
                                       aresp.id_analysis,
                                       aresp.id_sample_type,
                                       aresp.id_analysis_parameter,
                                       NULL id_analysis_param,
                                       pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                 i_prof,
                                                                                 pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                                 'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                                 aresp.id_analysis_parameter,
                                                                                 'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                 aresp.id_sample_type,
                                                                                 NULL) desc_analysis,
                                       pk_prof_utils.get_name_signature(i_lang, i_prof, aresp.id_professional) prof_result,
                                       aresp.dt_analysis_result_tstz,
                                       aresp.desc_analysis_result,
                                       aresp.analysis_result_value_1 analysis_result_value,
                                       aresp.id_analysis_desc,
                                       decode(a.value, NULL, 'PN', 'PA') abnormality,
                                       nvl(aresp.ref_val,
                                           decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                  nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                                  ' - ',
                                                  NULL,
                                                  nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                                  nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max))) ref_val,
                                       nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) ref_val_min,
                                       nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max) ref_val_max,
                                       aresp.id_unit_measure id_unit_measure,
                                       nvl(aresp.desc_unit_measure,
                                           pk_translation.get_translation(i_lang,
                                                                          'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                          aresp.id_unit_measure)) desc_unit_measure,
                                       aresp.notes result_notes,
                                       decode(dbms_lob.getlength(aresp.parameter_notes),
                                              NULL,
                                              decode(dbms_lob.getlength(aresp.interface_notes),
                                                     NULL,
                                                     to_clob(''),
                                                     aresp.interface_notes),
                                              aresp.parameter_notes) parameter_notes,
                                       nvl(aresp.id_result_status,
                                           pk_lab_tests_utils.get_lab_test_result_status(i_lang, i_prof)) id_result_status,
                                       aresp.flg_result_origin,
                                       aresp.result_origin_notes
                                  FROM (SELECT *
                                          FROM (SELECT arp.*,
                                                       ar.id_analysis,
                                                       ar.id_sample_type,
                                                       ar.id_analysis_req_det,
                                                       ar.id_harvest,
                                                       ar.dt_analysis_result_tstz,
                                                       ar.notes,
                                                       ar.flg_result_origin,
                                                       ar.result_origin_notes,
                                                       CASE
                                                            WHEN ar.flg_mult_result = pk_lab_tests_constant.g_yes THEN
                                                             decode(ar.id_harvest,
                                                                    NULL,
                                                                    row_number() over(PARTITION BY arp.id_analysis_result,
                                                                         arp.id_analysis_parameter ORDER BY
                                                                         arp.dt_ins_result_tstz DESC),
                                                                    row_number()
                                                                    over(PARTITION BY ar.id_harvest,
                                                                         arp.id_analysis_req_par,
                                                                         arp.id_analysis_result_par ORDER BY dt_ins_result_tstz DESC))
                                                            ELSE
                                                             decode(ar.id_harvest,
                                                                    NULL,
                                                                    row_number() over(PARTITION BY arp.id_analysis_result,
                                                                         arp.id_analysis_parameter,
                                                                         arp.id_analysis_result_par ORDER BY
                                                                         arp.dt_ins_result_tstz DESC),
                                                                    row_number() over(PARTITION BY ar.id_harvest,
                                                                         arp.id_analysis_req_par ORDER BY
                                                                         arp.dt_ins_result_tstz DESC))
                                                        END rn
                                                  FROM analysis_result_par arp, analysis_result ar
                                                 WHERE arp.id_analysis_result = i_analysis_result
                                                   AND arp.id_analysis_result = ar.id_analysis_result) ar
                                         WHERE ar.rn = 1) aresp,
                                       (SELECT *
                                          FROM abnormality
                                         WHERE flg_visible = pk_lab_tests_constant.g_yes) a,
                                       result_status rs
                                 WHERE aresp.id_result_status = rs.id_result_status(+)
                                   AND aresp.id_abnormality = a.id_abnormality(+)
                                   AND l_flg_type = 'E') ar)
                 ORDER BY rank_analysis, id_analysis, id_harvest, flg_type, rank_parameter, id_analysis_parameter;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              g_error_code,
                                              g_error,
                                              '',
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_TO_RESULT',
                                              'D',
                                              '',
                                              o_error);
            pk_types.open_my_cursor(o_lab_test);
            RETURN TRUE;
        
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_TO_RESULT',
                                              o_error);
            pk_types.open_my_cursor(o_lab_test);
            RETURN FALSE;
    END get_lab_test_to_result;

    FUNCTION get_lab_test_to_read
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_analysis_req_det IN table_number,
        o_lab_test         OUT pk_types.cursor_type,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_flg_type sys_config.value%TYPE := pk_sysconfig.get_config('LAB_TESTS_RESULT_TABLE_DATE', i_prof);
    
    BEGIN
    
        OPEN o_lab_test FOR
            SELECT flg_type,
                   id_analysis_req_det,
                   id_analysis_result,
                   id_analysis_result_par,
                   id_harvest,
                   desc_analysis,
                   desc_parameter,
                   desc_unit_measure,
                   dt_harvest,
                   dt_result,
                   RESULT,
                   result_range,
                   result_color,
                   ref_val,
                   icon_name,
                   notes
              FROM (SELECT t.flg_type,
                           t.id_analysis_req_det,
                           t.id_analysis_result,
                           t.id_analysis_result_par,
                           t.id_harvest,
                           t.desc_analysis,
                           t.desc_parameter,
                           t.desc_category,
                           t.desc_unit_measure,
                           t.dt_harvest,
                           t.dt_result,
                           t.result || ' ' || t.desc_unit_measure RESULT,
                           t.result_range,
                           t.result_color,
                           t.ref_val || ' ' || t.desc_unit_measure ref_val,
                           t.notes,
                           decode(t.flg_relevant, pk_lab_tests_constant.g_yes, 'RelevantMcdtResultIcon', NULL) icon_name,
                           t.rank_analysis,
                           t.rank_parameter,
                           t.rank_category,
                           pk_date_utils.trunc_insttimezone_str(i_prof, t.dt_harvest_ord, 'MI') dt_harvest_ord,
                           pk_date_utils.trunc_insttimezone_str(i_prof, t.dt_result_ord, 'MI') dt_result_ord,
                           decode(l_flg_type,
                                  'H',
                                  rank() over(PARTITION BY id_analysis,
                                       id_sample_type ORDER BY dt_harvest_ord DESC,
                                       id_harvest DESC NULLS FIRST),
                                  rank() over(PARTITION BY id_analysis,
                                       id_sample_type ORDER BY dt_result_ord DESC,
                                       id_analysis_result DESC NULLS FIRST)) rn
                      FROM (SELECT 'A' flg_type,
                                   ar.id_analysis_req_det,
                                   ar.id_analysis_result,
                                   NULL id_analysis_result_par,
                                   ar.id_analysis,
                                   ar.id_sample_type,
                                   ar.id_harvest,
                                   (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                    i_prof,
                                                                                    pk_lab_tests_constant.g_analysis_alias,
                                                                                    'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                    ar.id_analysis,
                                                                                    'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                    ar.id_sample_type,
                                                                                    NULL)
                                      FROM dual) desc_analysis,
                                   NULL desc_parameter,
                                   decode((SELECT pk_lab_tests_utils.get_lab_test_category(i_lang, i_prof, ar.id_exam_cat)
                                            FROM dual),
                                          NULL,
                                          NULL,
                                          ar.id_exam_cat,
                                          NULL,
                                          (SELECT pk_translation.get_translation(i_lang,
                                                                                 'EXAM_CAT.CODE_EXAM_CAT.' ||
                                                                                 pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                          i_prof,
                                                                                                                          ar.id_exam_cat))
                                             FROM dual) || ', ') ||
                                   (SELECT pk_translation.get_translation(i_lang,
                                                                          'EXAM_CAT.CODE_EXAM_CAT.' || ar.id_exam_cat)
                                      FROM dual) desc_category,
                                   NULL desc_unit_measure,
                                   NULL ref_val,
                                   NULL dt_harvest,
                                   NULL dt_result,
                                   NULL RESULT,
                                   NULL result_range,
                                   NULL result_color,
                                   NULL notes,
                                   NULL flg_relevant,
                                   (SELECT pk_lab_tests_utils.get_lab_test_rank(i_lang, i_prof, ar.id_analysis, NULL)
                                      FROM dual) rank_analysis,
                                   NULL rank_parameter,
                                   (SELECT pk_lab_tests_utils.get_lab_test_category_rank(i_lang, i_prof, ar.id_exam_cat)
                                      FROM dual) rank_category,
                                   ar.dt_harvest_tstz dt_harvest_ord,
                                   ar.dt_analysis_result_tstz dt_result_ord
                              FROM (SELECT *
                                      FROM (SELECT ar.*,
                                                   nvl(h.dt_harvest_tstz, ar.dt_sample) dt_harvest_tstz,
                                                   lte.dt_req,
                                                   lte.id_prof_writes,
                                                   lte.id_analysis_req,
                                                   decode(ar.id_harvest,
                                                          NULL,
                                                          row_number() over(PARTITION BY ar.id_analysis_result ORDER BY
                                                               ar.dt_analysis_result_tstz DESC),
                                                          row_number()
                                                          over(PARTITION BY ar.id_analysis_req_det,
                                                               h.id_harvest_group ORDER BY h.dt_harvest_tstz DESC NULLS LAST)) rn
                                              FROM analysis_result ar, harvest h, lab_tests_ea lte
                                             WHERE lte.id_analysis_req_det IN
                                                   (SELECT /*+opt_estimate(table t rows=1)*/
                                                     *
                                                      FROM TABLE(i_analysis_req_det) t)
                                               AND ar.id_harvest = h.id_harvest(+)
                                               AND ((h.flg_status NOT IN
                                                   (pk_lab_tests_constant.g_harvest_pending,
                                                      pk_lab_tests_constant.g_harvest_waiting,
                                                      pk_lab_tests_constant.g_harvest_cancel,
                                                      pk_lab_tests_constant.g_harvest_suspended) AND l_flg_type = 'H') OR
                                                   (l_flg_type = 'R'))
                                               AND ar.id_analysis_req_det = lte.id_analysis_req_det(+))
                                     WHERE rn = 1) ar
                            UNION ALL -- Results
                            SELECT 'P' flg_type,
                                   lte.id_analysis_req_det,
                                   aresp.id_analysis_result,
                                   aresp.id_analysis_result_par,
                                   aresp.id_analysis,
                                   aresp.id_sample_type,
                                   aresp.id_harvest,
                                   (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                    i_prof,
                                                                                    pk_lab_tests_constant.g_analysis_alias,
                                                                                    'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                    aresp.id_analysis,
                                                                                    'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                    aresp.id_sample_type,
                                                                                    NULL)
                                      FROM dual) desc_analysis,
                                   (SELECT pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                    i_prof,
                                                                                    pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                                    'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                                    aresp.id_analysis_parameter,
                                                                                    'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                    aresp.id_sample_type,
                                                                                    NULL)
                                      FROM dual) desc_parameter,
                                   decode((SELECT pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                          i_prof,
                                                                                          aresp.id_exam_cat)
                                            FROM dual),
                                          NULL,
                                          NULL,
                                          aresp.id_exam_cat,
                                          NULL,
                                          (SELECT pk_translation.get_translation(i_lang,
                                                                                 'EXAM_CAT.CODE_EXAM_CAT.' ||
                                                                                 pk_lab_tests_utils.get_lab_test_category(i_lang,
                                                                                                                          i_prof,
                                                                                                                          aresp.id_exam_cat))
                                             FROM dual) || ', ') ||
                                   (SELECT pk_translation.get_translation(i_lang,
                                                                          'EXAM_CAT.CODE_EXAM_CAT.' || aresp.id_exam_cat)
                                      FROM dual) desc_category,
                                   nvl(aresp.desc_unit_measure,
                                       (SELECT pk_translation.get_translation(i_lang,
                                                                              'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                              aresp.id_unit_measure)
                                          FROM dual)) desc_unit_measure,
                                   nvl(aresp.ref_val,
                                       decode((nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                              nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max)),
                                              ' - ',
                                              NULL,
                                              nvl(TRIM(aresp.ref_val_min_str), aresp.ref_val_min) || ' - ' ||
                                              nvl(TRIM(aresp.ref_val_max_str), aresp.ref_val_max))) ref_val,
                                   (SELECT pk_date_utils.date_char_hour_tsz(i_lang,
                                                                            aresp.dt_harvest_tstz,
                                                                            i_prof.institution,
                                                                            i_prof.software)
                                      FROM dual) || chr(10) ||
                                   (SELECT pk_date_utils.dt_chr_tsz(i_lang, aresp.dt_harvest_tstz, i_prof)
                                      FROM dual) dt_harvest,
                                   (SELECT pk_date_utils.date_char_hour_tsz(i_lang,
                                                                            aresp.dt_analysis_result_tstz,
                                                                            i_prof.institution,
                                                                            i_prof.software)
                                      FROM dual) || chr(10) ||
                                   (SELECT pk_date_utils.dt_chr_tsz(i_lang, aresp.dt_analysis_result_tstz, i_prof)
                                      FROM dual) dt_result,
                                   decode(aresp.id_analysis_desc,
                                          NULL,
                                          decode(aresp.analysis_result_value_2,
                                                 NULL,
                                                 aresp.desc_analysis_result,
                                                 to_clob(aresp.comparator || aresp.analysis_result_value_1 ||
                                                         aresp.separator || aresp.analysis_result_value_2)),
                                          (SELECT decode(ad.icon,
                                                         NULL,
                                                         (SELECT pk_translation.get_translation(i_lang, ad.code_analysis_desc)
                                                            FROM dual),
                                                         ad.icon || '|' ||
                                                         (SELECT pk_translation.get_translation(i_lang, ad.code_analysis_desc)
                                                            FROM dual))
                                             FROM analysis_desc ad
                                            WHERE ad.id_analysis_desc = aresp.id_analysis_desc)) ||
                                   decode(a.value, NULL, NULL, ' ' || a.value) RESULT,
                                   CASE
                                        WHEN pk_utils.is_number(dbms_lob.substr(aresp.desc_analysis_result, 3800)) =
                                             pk_lab_tests_constant.g_yes
                                             AND analysis_result_value_2 IS NULL THEN
                                         CASE
                                             WHEN aresp.analysis_result_value_1 < aresp.ref_val_min THEN
                                              pk_lab_tests_constant.g_analysis_result_below
                                             WHEN aresp.analysis_result_value_1 > aresp.ref_val_max THEN
                                              pk_lab_tests_constant.g_analysis_result_above
                                             ELSE
                                              NULL
                                         END
                                        ELSE
                                         NULL
                                    END result_range,
                                   CASE
                                        WHEN pk_utils.is_number(dbms_lob.substr(aresp.desc_analysis_result, 3800)) =
                                             pk_lab_tests_constant.g_yes
                                             AND analysis_result_value_2 IS NULL THEN
                                         CASE
                                             WHEN aresp.analysis_result_value_1 < aresp.ref_val_min THEN
                                              '0xC3000A'
                                             WHEN aresp.analysis_result_value_1 > aresp.ref_val_max THEN
                                              '0xC3000A'
                                             ELSE
                                              CASE
                                                  WHEN aresp.id_abnormality IS NOT NULL THEN
                                                   a.color_code
                                                  ELSE
                                                   NULL
                                              END
                                         END
                                        ELSE
                                         NULL
                                    END result_color,
                                   aresp.notes_doctor_registry notes,
                                   aresp.flg_relevant,
                                   (SELECT pk_lab_tests_utils.get_lab_test_rank(i_lang, i_prof, aresp.id_analysis, NULL)
                                      FROM dual) rank_analysis,
                                   (SELECT pk_lab_tests_utils.get_lab_test_parameter_rank(i_lang,
                                                                                          i_prof,
                                                                                          aresp.id_analysis,
                                                                                          aresp.id_sample_type,
                                                                                          aresp.id_analysis_parameter)
                                      FROM dual) rank_parameter,
                                   (SELECT pk_lab_tests_utils.get_lab_test_category_rank(i_lang, i_prof, aresp.id_exam_cat)
                                      FROM dual) rank_category,
                                   aresp.dt_harvest_tstz dt_harvest_ord,
                                   aresp.dt_analysis_result_tstz dt_result_ord
                              FROM (SELECT *
                                      FROM (SELECT arp.*,
                                                   ar.id_analysis_req_det,
                                                   ar.id_analysis,
                                                   ar.id_sample_type,
                                                   ar.id_exam_cat,
                                                   h.id_harvest,
                                                   h.id_prof_harvest,
                                                   nvl(h.dt_harvest_tstz, ar.dt_sample) dt_harvest_tstz,
                                                   ar.dt_analysis_result_tstz,
                                                   ar.notes,
                                                   ar.flg_mult_result,
                                                   decode(ar.id_harvest,
                                                          NULL,
                                                          row_number()
                                                          over(PARTITION BY arp.id_analysis_result,
                                                               arp.id_analysis_parameter ORDER BY arp.dt_ins_result_tstz DESC),
                                                          row_number()
                                                          over(PARTITION BY ar.id_harvest,
                                                               arp.id_analysis_req_par ORDER BY arp.dt_ins_result_tstz DESC)) rn
                                              FROM analysis_result ar, analysis_result_par arp, harvest h
                                             WHERE ar.id_analysis_req_det IN
                                                   (SELECT /*+opt_estimate(table t rows=1)*/
                                                     *
                                                      FROM TABLE(i_analysis_req_det) t)
                                               AND ar.id_analysis_result = arp.id_analysis_result
                                               AND coalesce(to_char(dbms_lob.substr(arp.desc_analysis_result, 3800)),
                                                            to_char(arp.analysis_result_value),
                                                            '0') != 'DNR'
                                               AND ar.id_harvest = h.id_harvest(+)
                                               AND ((h.flg_status NOT IN
                                                   (pk_lab_tests_constant.g_harvest_pending,
                                                      pk_lab_tests_constant.g_harvest_waiting,
                                                      pk_lab_tests_constant.g_harvest_cancel,
                                                      pk_lab_tests_constant.g_harvest_suspended) AND l_flg_type = 'H') OR
                                                   (l_flg_type = 'R'))) ar
                                     WHERE (ar.rn = 1 AND ar.flg_mult_result IS NULL)
                                        OR (ar.flg_mult_result = pk_lab_tests_constant.g_yes)) aresp,
                                   (SELECT lte.id_analysis_req,
                                           lte.id_analysis_req_det,
                                           lte.id_ard_parent,
                                           lte.flg_status_det,
                                           lte.id_episode,
                                           lte.id_visit,
                                           lte.id_prof_writes,
                                           lte.dt_req
                                      FROM lab_tests_ea lte
                                     WHERE lte.id_analysis_req_det IN
                                           (SELECT /*+opt_estimate(table t rows=1)*/
                                             *
                                              FROM TABLE(i_analysis_req_det) t)) lte,
                                   (SELECT *
                                      FROM abnormality
                                     WHERE flg_visible = pk_lab_tests_constant.g_yes) a,
                                   result_status rs
                             WHERE aresp.id_analysis_req_det = lte.id_analysis_req_det(+)
                               AND aresp.id_result_status = rs.id_result_status(+)
                               AND aresp.id_abnormality = a.id_abnormality(+)) t
                     WHERE (t.dt_result_ord IS NOT NULL AND l_flg_type = 'R')
                        OR (t.dt_harvest_ord IS NOT NULL AND l_flg_type = 'H')) ar
             WHERE ar.rn = 1
             ORDER BY ar.rank_category,
                      ar.desc_category,
                      ar.rank_analysis,
                      ar.desc_analysis,
                      decode(l_flg_type, 'H', ar.dt_harvest_ord, ar.dt_result_ord) DESC,
                      decode(l_flg_type, 'H', ar.id_harvest, ar.id_analysis_result) DESC,
                      ar.flg_type,
                      ar.rank_parameter,
                      ar.desc_parameter;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_TO_READ',
                                              o_error);
            pk_types.open_my_cursor(o_lab_test);
            RETURN FALSE;
    END get_lab_test_to_read;

    FUNCTION get_lab_test_barcode_for_print
    (
        i_lang              IN language.id_language%TYPE,
        i_prof              IN profissional,
        i_analysis_req      IN analysis_req.id_analysis_req%TYPE,
        o_printer           OUT VARCHAR2,
        o_codification_type OUT VARCHAR2,
        o_barcode           OUT VARCHAR2,
        o_error             OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_code    VARCHAR2(4000);
        l_barcode VARCHAR2(4000);
    
        l_hashmap pk_ia_external_info.tt_table_varchar;
    
    BEGIN
    
        g_error := 'GET PRINTER';
        SELECT t.cfg_type, t.cfg_printer, t.cfg_value
          INTO o_codification_type, o_printer, l_code
          FROM TABLE(pk_barcode.get_barcode_cfg_base(i_lang, i_prof, 'BARCODE_LAB_TEST_ORDER')) t;
    
        g_error := 'GET_BARCODE';
        IF pk_sysconfig.get_config('LAB_TEST_ORDER_BARCODE_INTERFACE', i_prof) = pk_lab_tests_constant.g_yes
        THEN
            g_error := 'HASHMAP PARAMETERS';
            l_hashmap('id_language') := table_varchar(to_char(i_lang));
            l_hashmap('id_analysis_req') := table_varchar(to_char(i_analysis_req));
            l_hashmap('flg_type') := table_varchar('LTO');
        
            g_error := 'CALL TO PK_IA_EXTERNAL_INFO.GET_LAB_BARCODE';
            IF NOT pk_ia_external_info.get_lab_barcode(i_prof    => i_prof,
                                                       i_hashmap => l_hashmap,
                                                       o_barcode => l_barcode,
                                                       o_error   => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            o_barcode := o_barcode || l_barcode || chr(10);
        ELSE
            g_error   := 'CALL TO PK_LAB_TESTS_UTILS.GET_LAB_TEST_BARCODE';
            l_barcode := pk_lab_tests_utils.get_lab_test_barcode(i_lang         => i_lang,
                                                                 i_prof         => i_prof,
                                                                 i_analysis_req => i_analysis_req,
                                                                 i_harvest      => NULL,
                                                                 i_code         => l_code);
        
            o_barcode := o_barcode || l_barcode || chr(10);
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_BARCODE_FOR_PRINT',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_barcode_for_print;

    FUNCTION get_lab_test_filter_list
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_patient IN patient.id_patient%TYPE,
        i_episode IN episode.id_episode%TYPE,
        o_list    OUT pk_types.cursor_type,
        o_error   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_complaint table_number;
    
        l_has_complaint_results    VARCHAR2(1 CHAR) := pk_lab_tests_constant.g_no;
        l_has_specialty_results    VARCHAR2(1 CHAR) := pk_lab_tests_constant.g_no;
        l_has_codification_results VARCHAR2(1 CHAR) := pk_lab_tests_constant.g_no;
    
    BEGIN
    
        g_error := 'GET PK_COMPLAINT.GET_EPIS_ACT_COMPLAINT';
        IF NOT pk_complaint.get_epis_act_complaint(i_lang         => i_lang,
                                                   i_prof         => i_prof,
                                                   i_episode      => i_episode,
                                                   o_id_complaint => l_complaint,
                                                   o_error        => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        IF l_complaint IS NOT NULL
           AND l_complaint.count > 0
        THEN
            g_error := 'GET PK_LAB_TESTS_CORE.GET_LAB_TEST_SELECTION_LIST';
            BEGIN
                SELECT /*+opt_estimate(table t rows=1)*/
                DISTINCT pk_lab_tests_constant.g_yes
                  INTO l_has_complaint_results
                  FROM TABLE(pk_lab_tests_core.get_lab_test_selection_list(i_lang         => i_lang,
                                                                           i_prof         => i_prof,
                                                                           i_patient      => i_patient,
                                                                           i_episode      => i_episode,
                                                                           i_flg_type     => pk_lab_tests_constant.g_analysis_complaint,
                                                                           i_codification => NULL,
                                                                           i_analysis_req => NULL,
                                                                           i_harvest      => NULL)) t;
            EXCEPTION
                WHEN no_data_found THEN
                    l_has_complaint_results := pk_lab_tests_constant.g_no;
            END;
        END IF;
    
        IF l_has_complaint_results = pk_lab_tests_constant.g_no
        THEN
            g_error := 'GET PK_LAB_TESTS_CORE.GET_LAB_TEST_SELECTION_LIST';
            BEGIN
                SELECT /*+opt_estimate(table t rows=1)*/
                DISTINCT pk_lab_tests_constant.g_yes
                  INTO l_has_specialty_results
                  FROM TABLE(pk_lab_tests_core.get_lab_test_selection_list(i_lang         => i_lang,
                                                                           i_prof         => i_prof,
                                                                           i_patient      => i_patient,
                                                                           i_episode      => i_episode,
                                                                           i_flg_type     => pk_lab_tests_constant.g_analysis_freq,
                                                                           i_codification => NULL,
                                                                           i_analysis_req => NULL,
                                                                           i_harvest      => NULL)) t;
            EXCEPTION
                WHEN no_data_found THEN
                    l_has_specialty_results := pk_lab_tests_constant.g_no;
            END;
        END IF;
    
        BEGIN
            SELECT DISTINCT pk_lab_tests_constant.g_yes
              INTO l_has_codification_results
              FROM codification_instit_soft cis
             WHERE cis.id_institution = i_prof.institution
               AND cis.id_software = i_prof.software
               AND cis.flg_available = pk_lab_tests_constant.g_available
               AND EXISTS (SELECT 1
                      FROM analysis_codification ac,
                           (SELECT id_analysis, id_sample_type
                              FROM analysis_instit_soft
                             WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution
                               AND flg_available = pk_lab_tests_constant.g_available) ais
                     WHERE cis.id_codification = ac.id_codification
                       AND ac.flg_available = pk_lab_tests_constant.g_available
                       AND ac.id_analysis = ais.id_analysis
                       AND ac.id_sample_type = ais.id_sample_type);
        EXCEPTION
            WHEN no_data_found THEN
                l_has_codification_results := pk_lab_tests_constant.g_no;
        END;
    
        g_error := 'OPEN CURSOR';
        OPEN o_list FOR
            SELECT id_action, id_parent, to_state, desc_action, icon, flg_default, flg_active, action
              FROM (SELECT sd.val id_action,
                           NULL id_parent,
                           NULL to_state,
                           sd.desc_val desc_action,
                           sd.img_name icon,
                           decode(sd.val,
                                  pk_lab_tests_constant.g_analysis_institution,
                                  pk_lab_tests_constant.g_yes,
                                  pk_lab_tests_constant.g_no) flg_default,
                           decode(sd.val,
                                  pk_lab_tests_constant.g_analysis_clinical_service,
                                  decode(l_has_specialty_results,
                                         pk_lab_tests_constant.g_yes,
                                         pk_lab_tests_constant.g_active,
                                         pk_lab_tests_constant.g_inactive),
                                  pk_lab_tests_constant.g_analysis_complaint,
                                  decode(l_has_complaint_results,
                                         pk_lab_tests_constant.g_yes,
                                         pk_lab_tests_constant.g_active,
                                         pk_lab_tests_constant.g_inactive),
                                  pk_lab_tests_constant.g_analysis_codification,
                                  decode(l_has_codification_results,
                                         pk_lab_tests_constant.g_yes,
                                         pk_lab_tests_constant.g_active,
                                         pk_lab_tests_constant.g_inactive),
                                  pk_lab_tests_constant.g_active) flg_active,
                           sd.val action,
                           sd.rank
                      FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang,
                                                                          i_prof,
                                                                          'LAB_TEST_SELECTION_LIST_FILTER',
                                                                          NULL)) sd
                    UNION ALL
                    SELECT to_char(cis.id_codification) id_action,
                           pk_lab_tests_constant.g_analysis_codification id_parent,
                           NULL to_state,
                           pk_translation.get_translation(i_lang,
                                                          'CODIFICATION.CODE_CODIFICATION.' || cis.id_codification) desc_action,
                           NULL icon,
                           pk_lab_tests_constant.g_no flg_default,
                           pk_lab_tests_constant.g_active flg_active,
                           NULL action,
                           NULL rank
                      FROM codification_instit_soft cis
                     WHERE cis.id_institution = i_prof.institution
                       AND cis.id_software = i_prof.software
                       AND cis.flg_available = pk_lab_tests_constant.g_available
                       AND EXISTS (SELECT 1
                              FROM analysis_codification ac,
                                   (SELECT id_analysis, id_sample_type
                                      FROM analysis_instit_soft
                                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                                       AND id_software = i_prof.software
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_lab_tests_constant.g_available) ais
                             WHERE cis.id_codification = ac.id_codification
                               AND ac.flg_available = pk_lab_tests_constant.g_available
                               AND ac.id_analysis = ais.id_analysis
                               AND ac.id_sample_type = ais.id_sample_type))
             ORDER BY rank, desc_action;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_FILTER_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_filter_list;

    FUNCTION get_lab_test_order_list
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_patient      IN patient.id_patient%TYPE,
        i_analysis_req IN analysis_req.id_analysis_req%TYPE,
        i_harvest      IN harvest.id_harvest%TYPE,
        o_list         OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_list pk_types.cursor_type;
    
        l_analysis_group analysis_group.id_analysis_group%TYPE;
        l_desc_analysis  pk_translation.t_desc_translation;
    
        l_code_domain sys_domain.code_domain%TYPE;
    
    BEGIN
    
        IF i_analysis_req IS NULL
        THEN
            l_code_domain := 'LAB_TESTS_REQUEST_TYPE';
        ELSE
            g_error := 'GET PK_LAB_TESTS_CORE.GET_LAB_TEST_GROUP_SEARCH';
            IF NOT pk_lab_tests_core.get_lab_test_group_search(i_lang         => i_lang,
                                                               i_prof         => i_prof,
                                                               i_patient      => i_patient,
                                                               i_analysis_req => i_analysis_req,
                                                               o_list         => l_list,
                                                               o_error        => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            FETCH l_list
                INTO l_analysis_group, l_desc_analysis;
            CLOSE l_list;
        
            IF l_analysis_group IS NOT NULL
            THEN
                l_code_domain := 'LAB_TESTS_REQUEST_TYPE.WITH_HARVEST';
            ELSE
                l_code_domain := 'LAB_TESTS_REQUEST_TYPE';
            END IF;
        END IF;
    
        IF i_harvest IS NULL
        THEN
            l_code_domain := 'LAB_TESTS_REQUEST_TYPE';
        ELSE
            l_code_domain := 'LAB_TESTS_REQUEST_TYPE.WITH_HARVEST';
        END IF;
    
        g_error := 'OPEN O_LIST';
        OPEN o_list FOR
            SELECT s.val id_request,
                   NULL id_parent,
                   NULL to_state,
                   s.desc_val desc_request,
                   NULL icon,
                   NULL flg_default,
                   'A' flg_active,
                   s.val request_type
              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang, i_prof, l_code_domain, 0)) s
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_ORDER_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_order_list;

    FUNCTION get_lab_test_time_list
    (
        i_lang      IN language.id_language%TYPE,
        i_prof      IN profissional,
        i_epis_type IN epis_type.id_epis_type%TYPE,
        o_list      OUT pk_types.cursor_type,
        o_error     OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_software software.id_software%TYPE;
        l_flg_time sys_config.value%TYPE;
    
    BEGIN
        l_flg_time := pk_sysconfig.get_config('LAB_FLG_TIME_E', i_prof.institution, i_prof.software);
    
        SELECT MAX(etsi.id_software) keep(dense_rank FIRST ORDER BY etsi.id_institution DESC) id_software
          INTO l_software
          FROM epis_type_soft_inst etsi
         WHERE etsi.id_institution IN (0, i_prof.institution)
           AND etsi.id_epis_type = i_epis_type;
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT val data,
                   rank,
                   desc_val label,
                   decode(l_flg_time, val, pk_lab_tests_constant.g_yes, pk_lab_tests_constant.g_no) flg_default
              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang,
                                                                  decode(i_epis_type,
                                                                         NULL,
                                                                         i_prof,
                                                                         profissional(i_prof.id,
                                                                                      i_prof.institution,
                                                                                      l_software)),
                                                                  'ANALYSIS_REQ_DET.FLG_TIME_HARVEST',
                                                                  NULL))
             WHERE val != pk_lab_tests_constant.g_flg_time_r;
    
        pk_backoffice_translation.set_read_translation('ANALYSIS_REQ_DET.FLG_TIME_HARVEST', 'SYS_DOMAIN');
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_TIME_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_time_list;

    FUNCTION get_lab_test_priority_list
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_analysis    IN table_number,
        i_sample_type IN table_number,
        o_list        OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT s.val data,
                   s.rank,
                   s.desc_val label,
                   (CAST(MULTISET (SELECT ais.id_analysis
                            FROM analysis_instit_soft ais,
                                 (SELECT /*+opt_estimate (table ta rows=1)*/
                                   column_value, rownum rn
                                    FROM TABLE(i_analysis) ta) a,
                                 (SELECT /*+opt_estimate (table ts rows=1)*/
                                   column_value, rownum rn
                                    FROM TABLE(i_sample_type) ts) st
                           WHERE a.rn = st.rn
                             AND ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                             AND ais.id_software = i_prof.software
                             AND ais.id_institution = i_prof.institution
                             AND ais.flg_execute = pk_lab_tests_constant.g_yes
                             AND ais.flg_available = pk_lab_tests_constant.g_available
                             AND ais.id_analysis = a.column_value
                             AND ais.id_sample_type = st.column_value
                             AND ais.flg_priority = s.val) AS table_number)) id_analysis,
                   (CAST(MULTISET (SELECT ais.id_sample_type
                            FROM analysis_instit_soft ais,
                                 (SELECT /*+opt_estimate (table ta rows=1)*/
                                   column_value, rownum rn
                                    FROM TABLE(i_analysis) ta) a,
                                 (SELECT /*+opt_estimate (table ts rows=1)*/
                                   column_value, rownum rn
                                    FROM TABLE(i_sample_type) ts) st
                           WHERE a.rn = st.rn
                             AND ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                             AND ais.id_software = i_prof.software
                             AND ais.id_institution = i_prof.institution
                             AND ais.flg_execute = pk_lab_tests_constant.g_yes
                             AND ais.flg_available = pk_lab_tests_constant.g_available
                             AND ais.id_analysis = a.column_value
                             AND ais.id_sample_type = st.column_value
                             AND ais.flg_priority = s.val) AS table_number)) id_sample_type
              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang, i_prof, 'ANALYSIS_REQ_DET.FLG_URGENCY', NULL)) s
             ORDER BY s.rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_PRIORITY_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_priority_list;

    FUNCTION get_lab_test_diagnosis_list
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_episode IN episode.id_episode%TYPE,
        o_list    OUT pk_types.cursor_type,
        o_error   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_search_diagnosis sys_config.value%TYPE := pk_sysconfig.get_config('PERMISSION_FOR_SEARCH_DIAGNOSIS', i_prof);
    
        l_profile_template profile_template.id_profile_template%TYPE := pk_prof_utils.get_prof_profile_template(i_prof);
    
        l_tbl_diags t_coll_diagnosis_config := t_coll_diagnosis_config();
    
    BEGIN
    
        IF i_episode IS NOT NULL
        THEN
            l_tbl_diags := pk_diagnosis.get_associated_diagnosis_tf(i_lang, i_prof, i_episode, pk_alert_constant.g_yes);
        END IF;
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT id_diagnosis, desc_diagnosis, code_icd, flg_other, rank, id_alert_diagnosis
              FROM (SELECT NULL id_diagnosis,
                           pk_message.get_message(i_lang, i_prof, 'ANALYSIS_M070') desc_diagnosis,
                           NULL code_icd,
                           NULL flg_other,
                           10 rank,
                           NULL id_alert_diagnosis
                      FROM dual
                     WHERE instr(nvl(l_search_diagnosis, '#'), l_profile_template) != 0
                    UNION ALL
                    SELECT /*+opt_estimate (table t rows=1)*/
                     t.id_diagnosis, t.desc_diagnosis, t.code_icd, t.flg_other, 20 rank, t.id_alert_diagnosis
                      FROM TABLE(l_tbl_diags) t)
             ORDER BY rank ASC, desc_diagnosis ASC;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_DIAGNOSIS_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_diagnosis_list;

    FUNCTION get_lab_test_clinical_purpose
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT id_multichoice_option data, rank, desc_option label, NULL flg_default
              FROM TABLE(pk_multichoice.tf_multichoice_options(i_lang, i_prof, 'ANALYSIS_REQ_DET.ID_CLINICAL_PURPOSE'))
             ORDER BY rank ASC, desc_option;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_CLINICAL_PURPOSE',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_clinical_purpose;

    FUNCTION get_lab_test_prn_list
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT s.val data,
                   s.rank,
                   s.desc_val label,
                   decode(s.val, pk_lab_tests_constant.g_no, pk_lab_tests_constant.g_yes, pk_lab_tests_constant.g_no) flg_default
              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang, i_prof, 'ANALYSIS_REQ_DET.FLG_PRN', NULL)) s
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_PRN_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_prn_list;

    FUNCTION get_lab_test_fasting_list
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_flg_fast_default sys_config.value%TYPE;
    
    BEGIN
    
        l_flg_fast_default := pk_sysconfig.get_config('ANALYSIS_REQ_FLG_FASTING_DEFAULT', i_prof);
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT s.val data,
                   s.rank,
                   s.desc_val label,
                   decode(s.val, l_flg_fast_default, pk_lab_tests_constant.g_yes, pk_lab_tests_constant.g_no) flg_default
              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang, i_prof, 'ANALYSIS_REQ_DET.FLG_FASTING', NULL)) s
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_FASTING_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_fasting_list;

    FUNCTION get_lab_test_specimen_list
    (
        i_lang     IN language.id_language%TYPE,
        i_prof     IN profissional,
        i_analysis IN table_number,
        o_list     OUT pk_types.cursor_type,
        o_error    OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'OPEN O_LIST';
        OPEN o_list FOR
            SELECT ast.id_sample_type data,
                   st.rank,
                   pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                             i_prof,
                                                             pk_lab_tests_constant.g_analysis_sample_alias,
                                                             'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || ast.id_sample_type,
                                                             NULL) label,
                   pk_lab_tests_constant.g_no flg_default
              FROM analysis_sample_type ast, sample_type st
             WHERE ast.id_analysis IN (SELECT /*+opt_estimate(table t rows=1)*/
                                        *
                                         FROM TABLE(i_analysis) t)
               AND ast.flg_available = pk_lab_tests_constant.g_available
               AND ast.id_sample_type = st.id_sample_type
               AND st.flg_available = pk_lab_tests_constant.g_available
               AND EXISTS (SELECT 1
                      FROM analysis_instit_soft ais
                     WHERE ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                       AND ais.id_institution = i_prof.institution
                       AND ais.id_software = i_prof.software
                       AND ais.flg_available = pk_lab_tests_constant.g_available
                       AND ais.id_analysis = ast.id_analysis
                       AND ais.id_sample_type = ast.id_sample_type)
             GROUP BY ast.id_sample_type, st.rank
            HAVING COUNT(id_analysis) = (SELECT /*+opt_estimate(table t rows=1)*/
                                          COUNT(*)
                                           FROM TABLE(i_analysis) t)
             ORDER BY rank, label;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_SPECIMEN_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_specimen_list;

    FUNCTION get_lab_test_specimen_list
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_analysis    IN analysis.id_analysis%TYPE,
        i_sample_type IN analysis_sample_type.id_sample_type%TYPE,
        i_default     IN VARCHAR2 DEFAULT pk_alert_constant.g_no
    ) RETURN t_tbl_core_domain IS
    
        l_ret   t_tbl_core_domain;
        l_error t_error_out;
    BEGIN
    
        g_error := 'OPEN L_RET';
        SELECT *
          BULK COLLECT
          INTO l_ret
          FROM (SELECT t_row_core_domain(internal_name => NULL,
                                         desc_domain   => t.label,
                                         domain_value  => t.data,
                                         order_rank    => t.rank,
                                         img_name      => NULL)
                  FROM (SELECT DISTINCT data,
                                        rank,
                                        label,
                                        decode(i_default,
                                               pk_alert_constant.g_no,
                                               0,
                                               decode(flg_default, pk_alert_constant.g_yes, -1, 0)) rank_default
                          FROM (SELECT ast.id_sample_type data,
                                       st.rank,
                                       pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                 i_prof,
                                                                                 pk_lab_tests_constant.g_analysis_sample_alias,
                                                                                 'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                 ast.id_sample_type,
                                                                                 NULL) label,
                                       decode(ast.id_sample_type,
                                              i_sample_type,
                                              pk_alert_constant.g_yes,
                                              pk_alert_constant.g_no) flg_default
                                  FROM analysis_sample_type ast, sample_type st
                                 WHERE ast.id_analysis = i_analysis
                                   AND ast.flg_available = pk_lab_tests_constant.g_available
                                   AND ast.id_sample_type = st.id_sample_type
                                   AND st.flg_available = pk_lab_tests_constant.g_available
                                   AND EXISTS (SELECT 1
                                          FROM analysis_instit_soft ais
                                         WHERE ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                                           AND ais.id_institution = i_prof.institution
                                           AND ais.id_software = i_prof.software
                                           AND ais.flg_available = pk_lab_tests_constant.g_available
                                           AND ais.id_analysis = ast.id_analysis
                                           AND ais.id_sample_type = ast.id_sample_type)
                                 GROUP BY ast.id_sample_type, st.rank
                                HAVING COUNT(id_analysis) = 1)
                         ORDER BY rank_default, rank, label) t
                 WHERE (i_default = pk_alert_constant.g_yes AND rownum = 1)
                    OR i_default = pk_alert_constant.g_no);
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_SPECIMEN_LIST',
                                              l_error);
            RETURN t_tbl_core_domain();
    END get_lab_test_specimen_list;

    FUNCTION get_lab_test_body_part_list
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_analysis    IN table_number,
        i_sample_type IN sample_type.id_sample_type%TYPE,
        i_value       IN VARCHAR2,
        o_list        OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        IF i_value IS NULL
        THEN
            g_error := 'OPEN O_LIST';
            OPEN o_list FOR
                SELECT DISTINCT bs.id_mcs_concept,
                                bs.id_body_structure id_body_part,
                                pk_translation.get_translation(i_lang,
                                                               'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' ||
                                                               bs.id_body_structure) desc_body_part,
                                decode(pk_mcs.get_concept_laterality(1, bs.id_mcs_concept), NULL, NULL, 'U') flg_laterality_mcdt
                  FROM body_structure bs,
                       (SELECT *
                          FROM analysis_body_structure abs
                         WHERE abs.id_analysis IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                    *
                                                     FROM TABLE(i_analysis) t)
                           AND abs.id_sample_type = i_sample_type
                           AND EXISTS (SELECT 1
                                  FROM analysis_sample_type ast
                                 WHERE ast.id_analysis = abs.id_analysis
                                   AND ast.id_sample_type = abs.id_sample_type)) abs,
                       body_structure_dcs bsdcs
                 WHERE bs.flg_available = pk_lab_tests_constant.g_available
                   AND bs.id_body_structure = abs.id_body_structure
                   AND bs.id_body_structure = bsdcs.id_body_structure
                   AND bsdcs.id_institution = i_prof.institution
                   AND bsdcs.flg_available = pk_lab_tests_constant.g_available
                   AND EXISTS (SELECT 1
                          FROM prof_dep_clin_serv pdcs
                         WHERE pdcs.id_professional = i_prof.id
                           AND pdcs.id_institution = i_prof.institution
                           AND pdcs.flg_status = pk_lab_tests_constant.g_selected
                           AND pdcs.id_dep_clin_serv = bsdcs.id_dep_clin_serv)
                 ORDER BY desc_body_part;
        ELSE
            OPEN o_list FOR
                SELECT /*+opt_estimate(table t rows=1)*/
                DISTINCT bs.id_mcs_concept,
                         bs.id_body_structure id_body_part,
                         pk_translation.get_translation(i_lang,
                                                        'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' || bs.id_body_structure) desc_body_part,
                         decode(pk_mcs.get_concept_laterality(1, bs.id_mcs_concept), NULL, NULL, 'U') flg_laterality_mcdt
                  FROM body_structure bs,
                       body_structure_dcs bsdcs,
                       TABLE(pk_translation.get_search_translation(i_lang,
                                                                   i_value,
                                                                   'BODY_STRUCTURE.CODE_BODY_STRUCTURE')) t,
                       (SELECT abs.id_body_structure, abs.id_analysis, abs.id_sample_type
                          FROM analysis_body_structure abs
                         WHERE abs.id_analysis IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                    *
                                                     FROM TABLE(i_analysis) t)
                           AND abs.id_sample_type = i_sample_type) abs
                 WHERE t.code_translation = bs.code_body_structure
                   AND t.desc_translation IS NOT NULL
                   AND bs.flg_available = pk_lab_tests_constant.g_available
                   AND bsdcs.id_body_structure = bs.id_body_structure
                   AND bsdcs.id_institution = i_prof.institution
                   AND bsdcs.flg_available = pk_lab_tests_constant.g_available
                   AND bs.id_body_structure = abs.id_body_structure(+)
                 ORDER BY desc_body_part;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_BODY_PART_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_body_part_list;

    FUNCTION get_lab_test_location_list
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_analysis    IN table_number,
        i_sample_type IN table_number,
        i_flg_type    IN analysis_room.flg_type%TYPE,
        o_list        OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_inst pk_types.cursor_type;
    
        l_id_institution           institution.id_institution%TYPE;
        l_institution_name         pk_translation.t_desc_translation;
        l_institution_abbreviation institution.abbreviation%TYPE;
    
        l_inp sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_INP', i_prof);
    
        l_default VARCHAR2(1 CHAR);
        l_count   NUMBER := 0;
    
    BEGIN
    
        IF NOT pk_p1_analysis.get_analysis_inst(i_lang     => i_lang,
                                                i_prof     => i_prof,
                                                i_analysis => i_analysis,
                                                o_inst     => l_inst,
                                                o_error    => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        DELETE tbl_temp;
    
        IF pk_sysconfig.get_config('LAB_TESTS_PERFORM_LOCATION', i_prof) = pk_lab_tests_constant.g_yes
        THEN
            l_default := pk_lab_tests_constant.g_yes;
        ELSE
            l_default := pk_lab_tests_constant.g_no;
        END IF;
    
        l_count := i_analysis.count();
    
        INSERT INTO tbl_temp
            (vc_1, num_1, vc_2, vc_3, vc_4, vc_5, num_2, num_3)
            SELECT /*+opt_estimate(table t rows=1)*/
            DISTINCT to_char(ar.id_room),
                     10,
                     nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) desc_room,
                     decode(ais.flg_harvest,
                            pk_lab_tests_constant.g_no,
                            pk_lab_tests_constant.g_no,
                            decode(i_prof.software,
                                   l_inp,
                                   decode(l_default,
                                          pk_lab_tests_constant.g_yes,
                                          ar.flg_default,
                                          pk_lab_tests_constant.g_no),
                                   ar.flg_default)) flg_default,
                     'I',
                     ar.flg_type,
                     ar.id_analysis,
                     ar.id_sample_type
              FROM (SELECT column_value, rownum rn
                      FROM TABLE(i_analysis)) t,
                   (SELECT column_value, rownum rn
                      FROM TABLE(i_sample_type)) st,
                   analysis_room ar,
                   room r,
                   department d,
                   (SELECT *
                      FROM analysis_instit_soft
                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                       AND id_software = i_prof.software
                       AND id_institution = i_prof.institution
                       AND flg_available = pk_lab_tests_constant.g_available) ais
             WHERE ar.id_analysis = t.column_value
               AND ar.id_sample_type = st.column_value
               AND t.rn = st.rn
               AND ar.flg_type = nvl(i_flg_type, pk_lab_tests_constant.g_arm_flg_type_room_pat)
               AND ar.id_institution = i_prof.institution
               AND ar.flg_available = pk_lab_tests_constant.g_available
               AND (ar.id_analysis_instit_soft IS NULL OR EXISTS
                    (SELECT 1
                       FROM analysis_instit_soft ais2
                      WHERE ais2.id_analysis_instit_soft = ar.id_analysis_instit_soft
                        AND ais2.id_analysis_instit_soft = ais.id_analysis_instit_soft))
               AND ar.id_room = r.id_room
               AND r.flg_available = pk_lab_tests_constant.g_available
               AND r.id_department = d.id_department
               AND d.id_institution = i_prof.institution
               AND ar.id_analysis = ais.id_analysis
               AND ar.id_sample_type = ais.id_sample_type
            UNION ALL
            SELECT /*+opt_estimate(table t rows=1)*/
            DISTINCT to_char(ar.id_room),
                     10,
                     nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) desc_room,
                     decode(l_default, pk_lab_tests_constant.g_yes, ar.flg_default, pk_lab_tests_constant.g_no) flg_default,
                     'I',
                     ar.flg_type,
                     ar.id_analysis,
                     ar.id_sample_type
              FROM (SELECT column_value, rownum rn
                      FROM TABLE(i_analysis)) t,
                   (SELECT column_value, rownum rn
                      FROM TABLE(i_sample_type)) st,
                   analysis_room ar,
                   room r,
                   department d,
                   (SELECT *
                      FROM analysis_instit_soft
                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                       AND id_software = i_prof.software
                       AND id_institution = i_prof.institution
                       AND flg_execute = pk_lab_tests_constant.g_yes
                       AND flg_available = pk_lab_tests_constant.g_available) ais
             WHERE ar.id_analysis = t.column_value
               AND ar.id_sample_type = st.column_value
               AND t.rn = st.rn
               AND ar.flg_type = nvl(i_flg_type, pk_lab_tests_constant.g_arm_flg_type_room_tube)
               AND ar.id_institution = i_prof.institution
               AND ar.flg_available = pk_lab_tests_constant.g_available
               AND (ar.id_analysis_instit_soft IS NULL OR EXISTS
                    (SELECT 1
                       FROM analysis_instit_soft ais2
                      WHERE ais2.id_analysis_instit_soft = ar.id_analysis_instit_soft
                        AND ais2.id_analysis_instit_soft = ais.id_analysis_instit_soft))
               AND ar.id_room = r.id_room
               AND r.flg_available = pk_lab_tests_constant.g_available
               AND r.id_department = d.id_department
               AND d.id_institution = i_prof.institution
               AND ar.id_analysis = ais.id_analysis
               AND ar.id_sample_type = ais.id_sample_type
            UNION ALL
            SELECT '-1' id_room,
                   30,
                   pk_message.get_message(i_lang, i_prof, 'ANALYSIS_M096') desc_room,
                   pk_lab_tests_constant.g_no flg_default,
                   'I',
                   pk_lab_tests_constant.g_arm_flg_type_room_tube flg_type,
                   NULL,
                   NULL
              FROM dual
             WHERE pk_sysconfig.get_config('ANALYSIS_GET_DEFAULT_LAB', i_prof) = pk_lab_tests_constant.g_no;
    
        BEGIN
            SELECT DISTINCT vc_5
              INTO l_default
              FROM tbl_temp
             WHERE vc_5 = pk_lab_tests_constant.g_arm_flg_type_room_pat
               AND vc_3 = pk_lab_tests_constant.g_yes;
        
            INSERT INTO tbl_temp
                (vc_1, num_1, vc_2, vc_3, vc_4, vc_5, num_2, num_3)
                SELECT /*+opt_estimate(table t rows=1)*/
                DISTINCT ais.flg_harvest id_room,
                         20,
                         pk_sysdomain.get_domain(i_lang,
                                                 i_prof,
                                                 'ANALYSIS_INSTIT_SOFT.FLG_HARVEST',
                                                 ais.flg_harvest,
                                                 NULL) desc_room,
                         pk_lab_tests_constant.g_no flg_default,
                         'I',
                         pk_lab_tests_constant.g_arm_flg_type_room_pat flg_type,
                         ais.id_analysis,
                         ais.id_sample_type
                  FROM analysis_instit_soft ais,
                       (SELECT column_value, rownum rn
                          FROM TABLE(i_analysis)) t,
                       (SELECT column_value, rownum rn
                          FROM TABLE(i_sample_type)) st
                 WHERE ais.id_analysis = t.column_value
                   AND ais.id_sample_type = st.column_value
                   AND t.rn = st.rn
                   AND ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                   AND ais.id_software = i_prof.software
                   AND ais.id_institution = i_prof.institution
                   AND ais.flg_available = pk_lab_tests_constant.g_available
                   AND (i_flg_type = pk_lab_tests_constant.g_arm_flg_type_room_pat OR i_flg_type IS NULL)
                   AND ais.flg_harvest IS NOT NULL;
        EXCEPTION
            WHEN no_data_found THEN
                INSERT INTO tbl_temp
                    (vc_1, num_1, vc_2, vc_3, vc_4, vc_5, num_2, num_3)
                    SELECT /*+opt_estimate(table t rows=1)*/
                    DISTINCT ais.flg_harvest id_room,
                             20,
                             pk_sysdomain.get_domain(i_lang,
                                                     i_prof,
                                                     'ANALYSIS_INSTIT_SOFT.FLG_HARVEST',
                                                     ais.flg_harvest,
                                                     NULL) desc_room,
                             pk_lab_tests_constant.g_yes flg_default,
                             'I',
                             pk_lab_tests_constant.g_arm_flg_type_room_pat flg_type,
                             ais.id_analysis,
                             ais.id_sample_type
                      FROM analysis_instit_soft ais,
                           (SELECT column_value, rownum rn
                              FROM TABLE(i_analysis)) t,
                           (SELECT column_value, rownum rn
                              FROM TABLE(i_sample_type)) st
                     WHERE ais.id_analysis = t.column_value
                       AND ais.id_sample_type = st.column_value
                       AND t.rn = st.rn
                       AND ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                       AND ais.id_software = i_prof.software
                       AND ais.id_institution = i_prof.institution
                       AND ais.flg_available = pk_lab_tests_constant.g_available
                       AND (i_flg_type = pk_lab_tests_constant.g_arm_flg_type_room_pat OR i_flg_type IS NULL)
                       AND ais.flg_harvest IS NOT NULL;
        END;
    
        LOOP
            FETCH l_inst
                INTO l_id_institution, l_institution_name, l_institution_abbreviation;
            EXIT WHEN l_inst%NOTFOUND;
        
            IF l_id_institution = pk_sysconfig.get_config('REF_EXTERNAL_INST', i_prof)
            THEN
                BEGIN
                    SELECT DISTINCT vc_5
                      INTO l_default
                      FROM tbl_temp
                     WHERE vc_5 = pk_lab_tests_constant.g_arm_flg_type_room_tube
                       AND vc_3 = pk_lab_tests_constant.g_yes;
                
                    IF pk_sysconfig.get_config('LAB_TESTS_PERFORM_LOCATION', i_prof) = pk_lab_tests_constant.g_yes
                    THEN
                        l_default := pk_lab_tests_constant.g_no;
                    ELSE
                        l_default := pk_lab_tests_constant.g_yes;
                    END IF;
                EXCEPTION
                    WHEN no_data_found THEN
                    
                        l_default := pk_lab_tests_constant.g_yes;
                END;
            ELSE
                l_default := pk_lab_tests_constant.g_no;
            END IF;
        
            INSERT INTO tbl_temp
                (vc_1, num_1, vc_2, vc_3, vc_4, vc_5)
            VALUES
                (to_char(l_id_institution),
                 30,
                 l_institution_name,
                 l_default,
                 'E',
                 pk_lab_tests_constant.g_arm_flg_type_room_tube);
        END LOOP;
        CLOSE l_inst;
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT t.*,
                   CASE
                        WHEN t.flg_type != 'E'
                             AND l_default != pk_alert_constant.g_no THEN
                         (CAST(MULTISET (SELECT num_2
                                  FROM (SELECT DISTINCT tt.num_2, tt.num_3, vc_1, vc_5
                                          FROM tbl_temp tt
                                          JOIN TABLE(i_analysis) ta
                                            ON ta.column_value = tt.num_2
                                          JOIN TABLE(i_sample_type) tsa
                                            ON tsa.column_value = tt.num_3
                                         WHERE tt.vc_3 = pk_alert_constant.g_yes
                                           AND tt.num_2 = ta.column_value
                                           AND tt.num_3 = tsa.column_value)
                                 WHERE vc_1 = data
                                   AND vc_5 = flg_type) AS table_number))
                        ELSE
                         i_analysis
                    END id_analysis,
                   CASE
                        WHEN t.flg_type != 'E'
                             AND l_default != pk_alert_constant.g_no THEN
                         (CAST(MULTISET (SELECT num_3
                                  FROM (SELECT DISTINCT tt.num_2, tt.num_3, vc_1, vc_5
                                          FROM tbl_temp tt
                                          JOIN TABLE(i_analysis) ta
                                            ON ta.column_value = tt.num_2
                                          JOIN TABLE(i_sample_type) tsa
                                            ON tsa.column_value = tt.num_3
                                         WHERE tt.vc_3 = pk_alert_constant.g_yes
                                           AND tt.num_2 = ta.column_value
                                           AND tt.num_3 = tsa.column_value)
                                 WHERE vc_1 = data
                                   AND vc_5 = flg_type) AS table_number))
                        ELSE
                         i_sample_type
                    END id_analysis_sample_type
              FROM (SELECT data, rank, label, flg_default, flg_type
                      FROM (SELECT DISTINCT data data, MAX(rank) rank, label, MAX(flg_default) flg_default, flg_type
                              FROM (SELECT *
                                      FROM (SELECT tt.vc_1 data,
                                                   tt.num_1 rank,
                                                   tt.vc_2 label,
                                                   tt.vc_3 flg_default,
                                                   decode(tt.vc_4, 'E', tt.vc_4, tt.vc_5) flg_type,
                                                   (SELECT COUNT(*)
                                                      FROM tbl_temp t
                                                     WHERE t.vc_1 = tt.vc_1
                                                       AND t.vc_5 = tt.vc_5) COUNT
                                              FROM tbl_temp tt)
                                     WHERE (flg_type IN (pk_lab_tests_constant.g_arm_flg_type_room_tube,
                                                         pk_lab_tests_constant.g_arm_flg_type_room_pat) AND
                                           (COUNT = l_count OR data IS NULL) OR
                                           flg_type NOT IN
                                           (pk_lab_tests_constant.g_arm_flg_type_room_tube,
                                             pk_lab_tests_constant.g_arm_flg_type_room_pat)))
                             GROUP BY data, label, flg_type, COUNT)
                    UNION
                    SELECT s.val                                         data,
                           20                                            rank,
                           s.desc_val                                    label,
                           pk_lab_tests_constant.g_no                    flg_default,
                           pk_lab_tests_constant.g_arm_flg_type_room_pat flg_type
                      FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang,
                                                                          i_prof,
                                                                          'ANALYSIS_INSTIT_SOFT.FLG_HARVEST',
                                                                          NULL)) s
                     WHERE s.val != 'U'
                       AND s.val NOT IN (SELECT vc_1
                                           FROM tbl_temp)
                       AND (i_flg_type = pk_lab_tests_constant.g_arm_flg_type_room_pat OR i_flg_type IS NULL)
                    UNION
                    SELECT '' data,
                           0 rank,
                           pk_message.get_message(i_lang, i_prof, 'ANALYSIS_M088') label,
                           pk_lab_tests_constant.g_yes flg_default,
                           pk_lab_tests_constant.g_arm_flg_type_room_pat flg_type
                      FROM (SELECT DISTINCT vc_1, vc_3
                              FROM (SELECT vc_1, vc_3, vc_5, count_analysis_rooms
                                      FROM (SELECT tb.vc_1, --room
                                                   tb.vc_3, --flg_default
                                                   tb.vc_5, --flg_type
                                                   (SELECT COUNT(*)
                                                      FROM tbl_temp t
                                                     WHERE t.vc_1 = tb.vc_1
                                                       AND t.vc_5 = tb.vc_5
                                                       AND t.vc_3 = tb.vc_3
                                                       AND t.vc_1 IS NOT NULL) AS count_analysis_rooms
                                              FROM tbl_temp tb
                                             WHERE tb.vc_5 = pk_lab_tests_constant.g_arm_flg_type_room_pat
                                               AND tb.vc_3 = pk_lab_tests_constant.g_yes)
                                     WHERE count_analysis_rooms = l_count)) tt
                    HAVING COUNT(tt.vc_3) > 1
                    UNION
                    SELECT '' data,
                           0 rank,
                           pk_message.get_message(i_lang, i_prof, 'ANALYSIS_M088') label,
                           pk_lab_tests_constant.g_yes flg_default,
                           pk_lab_tests_constant.g_arm_flg_type_room_tube flg_type
                      FROM (SELECT DISTINCT vc_1, vc_3
                              FROM (SELECT vc_1, vc_3, vc_5, count_analysis_rooms
                                      FROM (SELECT tb.vc_1, --room
                                                   tb.vc_3, --flg_default
                                                   tb.vc_5, --flg_type
                                                   (SELECT COUNT(*)
                                                      FROM tbl_temp t
                                                     WHERE t.vc_1 = tb.vc_1
                                                       AND t.vc_5 = tb.vc_5
                                                       AND t.vc_3 = tb.vc_3
                                                       AND t.vc_1 IS NOT NULL) count_analysis_rooms
                                              FROM tbl_temp tb
                                             WHERE tb.vc_5 = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                               AND tb.vc_3 = pk_lab_tests_constant.g_yes)
                                     WHERE count_analysis_rooms = l_count)) tt
                    HAVING COUNT(tt.vc_3) > 1) t
             ORDER BY rank, label;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_LOCATION_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_location_list;

    FUNCTION get_lab_test_location_list
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_analysis    IN table_varchar,
        i_sample_type IN table_varchar,
        i_flg_type    IN analysis_room.flg_type%TYPE,
        i_default     IN VARCHAR2 DEFAULT pk_alert_constant.g_no
    ) RETURN t_tbl_core_domain IS
    
        l_inst pk_types.cursor_type;
    
        l_id_institution           institution.id_institution%TYPE;
        l_institution_name         pk_translation.t_desc_translation;
        l_institution_abbreviation institution.abbreviation%TYPE;
    
        l_inp sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_INP', i_prof);
    
        l_default VARCHAR2(1 CHAR);
        l_count   NUMBER := 0;
    
        l_ret   t_tbl_core_domain;
        l_error t_error_out;
    
        l_tbl_analysis    table_number := table_number();
        l_tbl_sample_type table_number := table_number();
    
    BEGIN
        g_error := 'GET ID ANALYSIS';
        FOR i IN i_analysis.first .. i_analysis.last
        LOOP
            l_tbl_analysis.extend();
            l_tbl_analysis(l_tbl_analysis.count) := to_number(i_analysis(i));
        END LOOP;
    
        g_error := 'GET ID SAMPLE TYPE';
        FOR i IN i_sample_type.first .. i_sample_type.last
        LOOP
            l_tbl_sample_type.extend();
            l_tbl_sample_type(l_tbl_sample_type.count) := to_number(i_sample_type(i));
        END LOOP;
    
        IF NOT pk_p1_analysis.get_analysis_inst(i_lang     => i_lang,
                                                i_prof     => i_prof,
                                                i_analysis => l_tbl_analysis,
                                                o_inst     => l_inst,
                                                o_error    => l_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        DELETE tbl_temp;
    
        IF pk_sysconfig.get_config('LAB_TESTS_PERFORM_LOCATION', i_prof) = pk_lab_tests_constant.g_yes
        THEN
            l_default := pk_lab_tests_constant.g_yes;
        ELSE
            l_default := pk_lab_tests_constant.g_no;
        END IF;
    
        l_count := l_tbl_analysis.count();
    
        INSERT INTO tbl_temp
            (vc_1, num_1, vc_2, vc_3, vc_4, vc_5, num_2, num_3)
            SELECT /*+opt_estimate(table t rows=1)*/
             to_char(ar.id_room),
             10,
             nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) desc_room,
             decode(ais.flg_harvest,
                    pk_lab_tests_constant.g_no,
                    pk_lab_tests_constant.g_no,
                    decode(i_prof.software,
                           l_inp,
                           decode(l_default, pk_lab_tests_constant.g_yes, ar.flg_default, pk_lab_tests_constant.g_no),
                           ar.flg_default)) flg_default,
             'I',
             ar.flg_type,
             ar.id_analysis,
             ar.id_sample_type
              FROM (SELECT /*+opt_estimate (table i rows=1)*/
                     column_value, rownum rn
                      FROM TABLE(l_tbl_analysis) i) t,
                   (SELECT /*+opt_estimate (table i rows=1)*/
                     column_value, rownum rn
                      FROM TABLE(l_tbl_sample_type) i) st,
                   analysis_room ar,
                   room r,
                   department d,
                   (SELECT *
                      FROM analysis_instit_soft
                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                       AND id_software = i_prof.software
                       AND id_institution = i_prof.institution
                       AND flg_available = pk_lab_tests_constant.g_available) ais
             WHERE ar.id_analysis = t.column_value
               AND ar.id_sample_type = st.column_value
               AND t.rn = st.rn
               AND (ar.flg_type = pk_lab_tests_constant.g_arm_flg_type_room_pat AND
                   (ar.flg_type = i_flg_type OR i_flg_type IS NULL))
               AND ar.id_institution = i_prof.institution
               AND ar.flg_available = pk_lab_tests_constant.g_available
               AND (ar.id_analysis_instit_soft IS NULL OR EXISTS
                    (SELECT 1
                       FROM analysis_instit_soft ais2
                      WHERE ais2.id_analysis_instit_soft = ar.id_analysis_instit_soft
                        AND ais2.id_analysis_instit_soft = ais.id_analysis_instit_soft))
               AND ar.id_room = r.id_room
               AND r.flg_available = pk_lab_tests_constant.g_available
               AND r.id_department = d.id_department
               AND d.id_institution = i_prof.institution
               AND ar.id_analysis = ais.id_analysis
               AND ar.id_sample_type = ais.id_sample_type
            UNION ALL
            SELECT /*+opt_estimate(table t rows=1)*/
             to_char(ar.id_room),
             10,
             nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) desc_room,
             decode(l_default, pk_lab_tests_constant.g_yes, ar.flg_default, pk_lab_tests_constant.g_no) flg_default,
             'I',
             ar.flg_type,
             ar.id_analysis,
             ar.id_sample_type
              FROM (SELECT /*+opt_estimate (table i rows=1)*/
                     column_value, rownum rn
                      FROM TABLE(l_tbl_analysis) i) t,
                   (SELECT /*+opt_estimate (table i rows=1)*/
                     column_value, rownum rn
                      FROM TABLE(l_tbl_sample_type) i) st,
                   analysis_room ar,
                   room r,
                   department d,
                   (SELECT *
                      FROM analysis_instit_soft
                     WHERE flg_type = pk_lab_tests_constant.g_analysis_can_req
                       AND id_software = i_prof.software
                       AND id_institution = i_prof.institution
                       AND flg_execute = pk_lab_tests_constant.g_yes
                       AND flg_available = pk_lab_tests_constant.g_available) ais
             WHERE ar.id_analysis = t.column_value
               AND ar.id_sample_type = st.column_value
               AND t.rn = st.rn
               AND (ar.flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube AND
                   (ar.flg_type = i_flg_type OR i_flg_type IS NULL))
               AND ar.id_institution = i_prof.institution
               AND ar.flg_available = pk_lab_tests_constant.g_available
               AND (ar.id_analysis_instit_soft IS NULL OR EXISTS
                    (SELECT 1
                       FROM analysis_instit_soft ais2
                      WHERE ais2.id_analysis_instit_soft = ar.id_analysis_instit_soft
                        AND ais2.id_analysis_instit_soft = ais.id_analysis_instit_soft))
               AND ar.id_room = r.id_room
               AND r.flg_available = pk_lab_tests_constant.g_available
               AND r.id_department = d.id_department
               AND d.id_institution = i_prof.institution
               AND ar.id_analysis = ais.id_analysis
               AND ar.id_sample_type = ais.id_sample_type
            UNION ALL
            SELECT '-1' id_room,
                   30,
                   pk_message.get_message(i_lang, i_prof, 'ANALYSIS_M096') desc_room,
                   pk_lab_tests_constant.g_no flg_default,
                   'I',
                   pk_lab_tests_constant.g_arm_flg_type_room_tube flg_type,
                   NULL,
                   NULL
              FROM dual
             WHERE pk_sysconfig.get_config('ANALYSIS_GET_DEFAULT_LAB', i_prof) = pk_lab_tests_constant.g_no
               AND (i_flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube OR i_flg_type IS NULL);
    
        BEGIN
            SELECT DISTINCT vc_5
              INTO l_default
              FROM tbl_temp
             WHERE vc_5 = pk_lab_tests_constant.g_arm_flg_type_room_pat
               AND vc_3 = pk_lab_tests_constant.g_yes;
        
            INSERT INTO tbl_temp
                (vc_1, num_1, vc_2, vc_3, vc_4, vc_5, num_2, num_3)
                SELECT /*+opt_estimate(table t rows=1)*/
                DISTINCT ais.flg_harvest id_room,
                         20,
                         pk_sysdomain.get_domain(i_lang,
                                                 i_prof,
                                                 'ANALYSIS_INSTIT_SOFT.FLG_HARVEST',
                                                 ais.flg_harvest,
                                                 NULL) desc_room,
                         pk_lab_tests_constant.g_no flg_default,
                         'I',
                         pk_lab_tests_constant.g_arm_flg_type_room_pat flg_type,
                         ais.id_analysis,
                         ais.id_sample_type
                  FROM analysis_instit_soft ais,
                       (SELECT /*+opt_estimate (table i rows=1)*/
                         column_value, rownum rn
                          FROM TABLE(l_tbl_analysis) i) t,
                       (SELECT /*+opt_estimate (table i rows=1)*/
                         column_value, rownum rn
                          FROM TABLE(l_tbl_sample_type) i) st
                 WHERE ais.id_analysis = t.column_value
                   AND ais.id_sample_type = st.column_value
                   AND t.rn = st.rn
                   AND ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                   AND ais.id_software = i_prof.software
                   AND ais.id_institution = i_prof.institution
                   AND ais.flg_available = pk_lab_tests_constant.g_available
                   AND (i_flg_type = pk_lab_tests_constant.g_arm_flg_type_room_pat OR i_flg_type IS NULL)
                   AND ais.flg_harvest IS NOT NULL;
        EXCEPTION
            WHEN no_data_found THEN
                INSERT INTO tbl_temp
                    (vc_1, num_1, vc_2, vc_3, vc_4, vc_5, num_2, num_3)
                    SELECT /*+opt_estimate(table t rows=1)*/
                    DISTINCT ais.flg_harvest id_room,
                             20,
                             pk_sysdomain.get_domain(i_lang,
                                                     i_prof,
                                                     'ANALYSIS_INSTIT_SOFT.FLG_HARVEST',
                                                     ais.flg_harvest,
                                                     NULL) desc_room,
                             pk_lab_tests_constant.g_yes flg_default,
                             'I',
                             pk_lab_tests_constant.g_arm_flg_type_room_pat flg_type,
                             ais.id_analysis,
                             ais.id_sample_type
                      FROM analysis_instit_soft ais,
                           (SELECT /*+opt_estimate (table i rows=1)*/
                             column_value, rownum rn
                              FROM TABLE(l_tbl_analysis) i) t,
                           (SELECT /*+opt_estimate (table i rows=1)*/
                             column_value, rownum rn
                              FROM TABLE(l_tbl_sample_type) i) st
                     WHERE ais.id_analysis = t.column_value
                       AND ais.id_sample_type = st.column_value
                       AND t.rn = st.rn
                       AND ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                       AND ais.id_software = i_prof.software
                       AND ais.id_institution = i_prof.institution
                       AND ais.flg_available = pk_lab_tests_constant.g_available
                       AND (i_flg_type = pk_lab_tests_constant.g_arm_flg_type_room_pat OR i_flg_type IS NULL)
                       AND ais.flg_harvest IS NOT NULL;
        END;
    
        LOOP
            FETCH l_inst
                INTO l_id_institution, l_institution_name, l_institution_abbreviation;
            EXIT WHEN l_inst%NOTFOUND;
        
            IF l_id_institution = pk_sysconfig.get_config('REF_EXTERNAL_INST', i_prof)
            THEN
                BEGIN
                    SELECT DISTINCT vc_5
                      INTO l_default
                      FROM tbl_temp
                     WHERE vc_5 = pk_lab_tests_constant.g_arm_flg_type_room_tube
                       AND vc_3 = pk_lab_tests_constant.g_yes;
                
                    IF pk_sysconfig.get_config('LAB_TESTS_PERFORM_LOCATION', i_prof) = pk_lab_tests_constant.g_yes
                    THEN
                        l_default := pk_lab_tests_constant.g_no;
                    ELSE
                        l_default := pk_lab_tests_constant.g_yes;
                    END IF;
                EXCEPTION
                    WHEN no_data_found THEN
                    
                        l_default := pk_lab_tests_constant.g_yes;
                END;
            ELSE
                l_default := pk_lab_tests_constant.g_no;
            END IF;
        
            INSERT INTO tbl_temp
                (vc_1, num_1, vc_2, vc_3, vc_4, vc_5)
            VALUES
                (to_char(l_id_institution),
                 30,
                 l_institution_name,
                 l_default,
                 'E',
                 pk_lab_tests_constant.g_arm_flg_type_room_tube);
        END LOOP;
        CLOSE l_inst;
    
        g_error := 'GET L_RET';
        SELECT *
          BULK COLLECT
          INTO l_ret
          FROM (SELECT t_row_core_domain(internal_name => NULL,
                                         desc_domain   => label,
                                         domain_value  => data,
                                         order_rank    => rank,
                                         img_name      => NULL)
                  FROM (SELECT DISTINCT t.*
                          FROM (SELECT data, rank, label, flg_default, flg_type
                                  FROM (SELECT DISTINCT data data,
                                                        MAX(rank) rank,
                                                        label,
                                                        MAX(flg_default) flg_default,
                                                        flg_type
                                          FROM (SELECT *
                                                  FROM (SELECT tt.vc_1 data,
                                                               tt.num_1 rank,
                                                               tt.vc_2 label,
                                                               tt.vc_3 flg_default,
                                                               decode(tt.vc_4, 'E', tt.vc_4, tt.vc_5) flg_type,
                                                               (SELECT COUNT(*)
                                                                  FROM tbl_temp t
                                                                 WHERE t.vc_1 = tt.vc_1
                                                                   AND t.vc_5 = tt.vc_5) count_same
                                                          FROM tbl_temp tt)
                                                 WHERE (flg_type IN
                                                       (pk_lab_tests_constant.g_arm_flg_type_room_tube,
                                                         pk_lab_tests_constant.g_arm_flg_type_room_pat) AND
                                                       count_same = l_count)
                                                    OR flg_type NOT IN
                                                       (pk_lab_tests_constant.g_arm_flg_type_room_tube,
                                                        pk_lab_tests_constant.g_arm_flg_type_room_pat)) --)
                                         GROUP BY data, label, flg_type, count_same)
                                UNION
                                SELECT s.val                                         data,
                                       20                                            rank,
                                       s.desc_val                                    label,
                                       pk_lab_tests_constant.g_no                    flg_default,
                                       pk_lab_tests_constant.g_arm_flg_type_room_pat flg_type
                                  FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang,
                                                                                      i_prof,
                                                                                      'ANALYSIS_INSTIT_SOFT.FLG_HARVEST',
                                                                                      NULL)) s
                                 WHERE s.val != 'U'
                                   AND s.val NOT IN (SELECT vc_1
                                                       FROM tbl_temp)
                                   AND (i_flg_type = pk_lab_tests_constant.g_arm_flg_type_room_pat OR i_flg_type IS NULL)
                                UNION
                                SELECT '' data,
                                       0 rank,
                                       pk_message.get_message(i_lang, i_prof, 'ANALYSIS_M088') label,
                                       pk_lab_tests_constant.g_yes flg_default,
                                       pk_lab_tests_constant.g_arm_flg_type_room_pat flg_type
                                  FROM (SELECT DISTINCT vc_1, vc_3
                                          FROM (SELECT vc_1, vc_3, vc_5, count_analysis_rooms
                                                  FROM (SELECT tb.vc_1, --room
                                                               tb.vc_3, --flg_default
                                                               tb.vc_5, --flg_type
                                                               (SELECT COUNT(*)
                                                                  FROM tbl_temp t
                                                                 WHERE t.vc_1 = tb.vc_1
                                                                   AND t.vc_5 = tb.vc_5
                                                                   AND t.vc_3 = tb.vc_3
                                                                   AND t.vc_1 IS NOT NULL) AS count_analysis_rooms
                                                          FROM tbl_temp tb
                                                         WHERE tb.vc_5 = pk_lab_tests_constant.g_arm_flg_type_room_pat
                                                           AND i_flg_type = pk_lab_tests_constant.g_arm_flg_type_room_pat
                                                           AND tb.vc_3 = pk_lab_tests_constant.g_yes)
                                                 WHERE count_analysis_rooms = l_count)) tt
                                HAVING COUNT(tt.vc_3) > 1
                                UNION
                                SELECT '' data,
                                       0 rank,
                                       pk_message.get_message(i_lang, i_prof, 'ANALYSIS_M088') label,
                                       pk_lab_tests_constant.g_yes flg_default,
                                       pk_lab_tests_constant.g_arm_flg_type_room_tube flg_type
                                  FROM (SELECT DISTINCT vc_1, vc_3
                                          FROM (SELECT vc_1, vc_3, vc_5, count_analysis_rooms
                                                  FROM (SELECT tb.vc_1, --room
                                                               tb.vc_3, --flg_default
                                                               tb.vc_5, --flg_type
                                                               (SELECT COUNT(*)
                                                                  FROM tbl_temp t
                                                                 WHERE t.vc_1 = tb.vc_1
                                                                   AND t.vc_5 = tb.vc_5
                                                                   AND t.vc_3 = tb.vc_3
                                                                   AND t.vc_1 IS NOT NULL) count_analysis_rooms
                                                          FROM tbl_temp tb
                                                         WHERE tb.vc_5 = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                           AND i_flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                           AND tb.vc_3 = pk_lab_tests_constant.g_yes)
                                                 WHERE count_analysis_rooms = l_count)) tt
                                HAVING COUNT(tt.vc_3) > 1) t
                         WHERE (i_flg_type IS NULL OR t.flg_type = i_flg_type OR
                               (i_flg_type = pk_lab_tests_constant.g_arm_flg_type_room_tube AND
                               t.flg_type IN (pk_lab_tests_constant.g_arm_flg_type_room_tube, 'E')))
                           AND ((i_default = pk_alert_constant.g_yes AND t.flg_default = i_default) OR
                               i_default = pk_alert_constant.g_no)
                         ORDER BY rank, label));
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_LOCATION_LIST',
                                              l_error);
            RETURN t_tbl_core_domain();
    END get_lab_test_location_list;

    FUNCTION get_lab_test_codification_list
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_analysis    IN table_number,
        i_sample_type IN table_number,
        o_list        OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT DISTINCT ac.id_codification data,
                            NULL rank,
                            pk_translation.get_translation(i_lang,
                                                           'CODIFICATION.CODE_CODIFICATION.' || ac.id_codification) label,
                            cis.flg_default
              FROM analysis_codification ac, codification_instit_soft cis
             WHERE ac.id_analysis IN (SELECT /*+opt_estimate(table t rows=1)*/
                                       *
                                        FROM TABLE(i_analysis) t)
               AND ac.id_sample_type IN (SELECT /*+opt_estimate(table t rows=1)*/
                                          *
                                           FROM TABLE(i_sample_type) t)
               AND ac.flg_available = pk_lab_tests_constant.g_available
               AND ac.id_codification = cis.id_codification
               AND cis.id_institution = i_prof.institution
               AND cis.id_software = i_prof.software
               AND cis.flg_available = pk_lab_tests_constant.g_available
               AND EXISTS (SELECT 1
                      FROM codification c
                     WHERE cis.id_codification = c.id_codification
                       AND c.flg_available = pk_lab_tests_constant.g_available)
             ORDER BY label;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_CODIFICATION_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_codification_list;

    FUNCTION get_lab_test_health_plan_list
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_patient IN patient.id_patient%TYPE,
        o_list    OUT pk_types.cursor_type,
        o_error   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_list                    pk_types.cursor_type;
        l_id_pat_health_plan      pat_health_plan.id_pat_health_plan%TYPE;
        l_id_health_plan_entity   health_plan.id_health_plan_entity%TYPE;
        l_desc_health_plan_entity pk_translation.t_desc_translation;
        l_id_health_plan          health_plan.id_health_plan%TYPE;
        l_desc_health_plan        pk_translation.t_desc_translation;
        l_num_health_plan         pat_health_plan.num_health_plan%TYPE;
    
    BEGIN
    
        IF NOT pk_adt.get_pat_health_plans(i_lang            => i_lang,
                                           i_prof            => i_prof,
                                           i_id_patient      => i_patient,
                                           o_pat_health_plan => l_list,
                                           o_error           => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        DELETE tbl_temp;
    
        INSERT INTO tbl_temp
            (num_1, num_2, vc_1, num_3, vc_2, vc_3, num_4)
        VALUES
            (NULL, NULL, pk_message.get_message(i_lang, i_prof, 'LAB_TESTS_M002'), NULL, NULL, NULL, 10);
    
        LOOP
            FETCH l_list
                INTO l_id_pat_health_plan,
                     l_id_health_plan,
                     l_desc_health_plan,
                     l_desc_health_plan_entity,
                     l_id_health_plan_entity,
                     l_num_health_plan;
            EXIT WHEN l_list%NOTFOUND;
        
            INSERT INTO tbl_temp
                (num_1, num_2, vc_1, num_3, vc_2, vc_3, num_4)
            VALUES
                (l_id_pat_health_plan,
                 l_id_health_plan_entity,
                 l_desc_health_plan_entity,
                 l_id_health_plan,
                 l_desc_health_plan,
                 l_num_health_plan,
                 20);
        END LOOP;
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT num_1 id_pat_health_plan,
                   num_2 id_health_plan_entity,
                   vc_1  desc_health_plan_entity,
                   num_2 id_health_plan,
                   vc_2  desc_health_plan,
                   vc_3  num_health_plan
              FROM tbl_temp
             ORDER BY num_3;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_HEALTH_PLAN_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_health_plan_list;

    FUNCTION get_lab_test_result_list
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_analysis           IN analysis.id_analysis%TYPE,
        i_sample_type        IN sample_type.id_sample_type%TYPE,
        i_analysis_parameter IN analysis_parameter.id_analysis_parameter%TYPE,
        o_list               OUT pk_types.cursor_type,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
        g_error := 'OPEN O_LIST';
        OPEN o_list FOR
            SELECT id_analysis_desc, data, rank, label, NULL flg_default
              FROM (SELECT ad.id_analysis_desc,
                           to_char(ad.value) data,
                           ad.rank,
                           pk_translation.get_translation(i_lang, ad.code_analysis_desc) label,
                           ad.icon
                      FROM analysis_desc ad
                     WHERE ad.id_analysis = i_analysis
                       AND ad.id_sample_type = i_sample_type
                       AND ad.id_analysis_parameter = i_analysis_parameter
                       AND ad.flg_available = pk_lab_tests_constant.g_available
                       AND EXISTS (SELECT 1
                              FROM analysis_param ap
                             WHERE ap.id_analysis = ad.id_analysis
                               AND ap.id_sample_type = ad.id_sample_type
                               AND ap.id_analysis_parameter = ad.id_analysis_parameter
                               AND ap.id_software = i_prof.software
                               AND ap.id_institution = i_prof.institution
                               AND ap.flg_available = pk_lab_tests_constant.g_available))
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_RESULT_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_result_list;

    FUNCTION get_lab_test_result_type
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        i_analysis_param IN analysis_param.id_analysis_param%TYPE,
        o_list           OUT pk_types.cursor_type,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        OPEN o_list FOR
            SELECT ap.flg_fill_type,
                   aum.id_unit_measure,
                   pk_translation.get_translation(i_lang, 'UNIT_MEASURE.CODE_UNIT_MEASURE.' || aum.id_unit_measure) unit_measure_desc
              FROM analysis_param ap
              LEFT JOIN analysis_unit_measure aum
                ON aum.id_analysis = ap.id_analysis
               AND aum.id_analysis_parameter = ap.id_analysis_parameter
               AND aum.id_sample_type = ap.id_sample_type
               AND aum.flg_default = pk_lab_tests_constant.g_yes
               AND aum.id_software = i_prof.software
               AND aum.id_institution = i_prof.institution
             INNER JOIN analysis_parameter parm
                ON parm.id_analysis_parameter = ap.id_analysis_parameter
             WHERE ap.id_analysis_param = i_analysis_param;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_RESULT_TYPE',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_result_type;

    FUNCTION get_lab_test_result_status
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT rs.id_result_status id_result_status,
                   rs.flg_default flg_default,
                   pk_translation.get_translation(i_lang, rs.short_code_result_status) label,
                   rs.value flg_value
              FROM result_status rs
             WHERE rs.flg_multichoice = pk_lab_tests_constant.g_yes;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_RESULT_STATUS',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_result_status;

    FUNCTION get_lab_test_result_origin
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT s.val data, s.rank, s.desc_val label, NULL flg_default
              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang,
                                                                  i_prof,
                                                                  'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                                  NULL)) s
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_RESULT_ORIGIN',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_result_origin;

    FUNCTION get_lab_test_unit_measure_list
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_analysis           IN analysis.id_analysis%TYPE,
        i_sample_type        IN sample_type.id_sample_type%TYPE,
        i_analysis_parameter IN analysis_parameter.id_analysis_parameter%TYPE,
        o_list               OUT pk_types.cursor_type,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_count PLS_INTEGER;
    
    BEGIN
    
        -- checks if analysis has blood type. if it has, 
        -- no unit measure should be shown
        BEGIN
            g_error := 'GET COUNT 1';
            SELECT COUNT(DISTINCT ad.id_analysis)
              INTO l_count
              FROM analysis_desc ad
             WHERE ad.id_analysis = i_analysis
               AND ad.id_sample_type = i_sample_type
               AND ad.id_analysis_parameter = i_analysis_parameter
               AND ad.flg_blood_type IS NOT NULL;
        EXCEPTION
            WHEN no_data_found THEN
                l_count := 0;
        END;
    
        IF l_count = 0
        THEN
            IF i_analysis_parameter IS NULL
            THEN
                g_error := 'GET COUNT 2';
                SELECT COUNT(DISTINCT id_unit_measure)
                  INTO l_count
                  FROM analysis_unit_measure
                 WHERE id_analysis = i_analysis
                   AND id_sample_type = i_sample_type
                   AND id_software IN (0, i_prof.software)
                   AND id_institution IN (0, i_prof.institution);
            ELSE
                g_error := 'GET COUNT 3';
                SELECT COUNT(id_unit_measure)
                  INTO l_count
                  FROM analysis_unit_measure aum
                 WHERE aum.id_analysis = i_analysis
                   AND aum.id_sample_type = i_sample_type
                   AND aum.id_analysis_parameter = i_analysis_parameter
                   AND aum.id_software IN (0, i_prof.software)
                   AND aum.id_institution IN (0, i_prof.institution)
                   AND EXISTS (SELECT 1
                          FROM analysis_param ap
                         WHERE ap.id_analysis = aum.id_analysis
                           AND ap.id_sample_type = aum.id_sample_type
                           AND ap.id_analysis_parameter = aum.id_analysis_parameter
                           AND ap.id_software = i_prof.software
                           AND ap.id_institution = i_prof.institution
                           AND ap.flg_available = pk_lab_tests_constant.g_available);
            END IF;
        
            IF l_count = 0
            THEN
                g_error := 'OPEN O_LIST 1';
                OPEN o_list FOR
                    SELECT data,
                           rank,
                           label,
                           flg_default,
                           id_analysis_parameter,
                           ref_val_min,
                           ref_val_max,
                           val_min,
                           val_max,
                           format_num
                      FROM (SELECT -1 data,
                                   1 rank,
                                   pk_message.get_message(i_lang, i_prof, 'ANALYSIS_M094') label,
                                   pk_lab_tests_constant.g_no flg_default,
                                   NULL id_analysis_parameter,
                                   NULL ref_val_min,
                                   NULL ref_val_max,
                                   NULL val_min,
                                   NULL val_max,
                                   NULL format_num
                              FROM dual
                            UNION ALL
                            SELECT id_unit_measure data,
                                   10 rank,
                                   pk_translation.get_translation(i_lang,
                                                                  'UNIT_MEASURE.CODE_UNIT_MEASURE.' || id_unit_measure) label,
                                   pk_lab_tests_constant.g_no flg_default,
                                   NULL id_analysis_parameter,
                                   NULL ref_val_min,
                                   NULL ref_val_max,
                                   NULL val_min,
                                   NULL val_max,
                                   NULL format_num
                              FROM unit_measure
                             WHERE id_unit_measure_type = pk_lab_tests_constant.g_analysis_unit_measure
                               AND flg_available = pk_lab_tests_constant.g_yes)
                     WHERE label IS NOT NULL
                     ORDER BY 4, 2;
            ELSE
                IF i_analysis_parameter IS NULL
                THEN
                    g_error := 'OPEN O_LIST 2';
                    OPEN o_list FOR
                        SELECT data,
                               rank,
                               label,
                               flg_default,
                               id_analysis_parameter,
                               ref_val_min,
                               ref_val_max,
                               val_min,
                               val_max,
                               format_num
                          FROM (SELECT -1 data,
                                       1 rank,
                                       pk_message.get_message(i_lang, i_prof, 'ANALYSIS_M094') label,
                                       pk_lab_tests_constant.g_no flg_default,
                                       NULL id_analysis_parameter,
                                       NULL ref_val_min,
                                       NULL ref_val_max,
                                       NULL val_min,
                                       NULL val_max,
                                       NULL format_num,
                                       1 rn
                                  FROM dual
                                UNION ALL
                                SELECT DISTINCT aum.id_unit_measure data,
                                                10 rank,
                                                pk_translation.get_translation(i_lang,
                                                                               'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                               aum.id_unit_measure) label,
                                                aum.flg_default,
                                                aum.id_analysis_parameter,
                                                aum.val_min_str ref_val_min,
                                                aum.val_max_str ref_val_max,
                                                aum.val_min,
                                                aum.val_max,
                                                aum.format_num,
                                                row_number() over(PARTITION BY aum.id_unit_measure ORDER BY aum.id_institution DESC, aum.id_software DESC) rn
                                  FROM analysis_unit_measure aum
                                 WHERE aum.id_analysis = i_analysis
                                   AND aum.id_sample_type = i_sample_type
                                   AND aum.id_software IN (0, i_prof.software)
                                   AND aum.id_institution IN (0, i_prof.institution))
                         WHERE label IS NOT NULL
                           AND rn = 1
                         ORDER BY 4, 2;
                ELSE
                    g_error := 'OPEN O_LIST 3';
                    OPEN o_list FOR
                        SELECT data,
                               rank,
                               label,
                               flg_default,
                               id_analysis_parameter,
                               ref_val_min,
                               ref_val_max,
                               val_min,
                               val_max,
                               format_num
                          FROM (SELECT -1 data,
                                       1 rank,
                                       pk_message.get_message(i_lang, i_prof, 'ANALYSIS_M094') label,
                                       pk_lab_tests_constant.g_no flg_default,
                                       NULL id_analysis_parameter,
                                       NULL ref_val_min,
                                       NULL ref_val_max,
                                       NULL val_min,
                                       NULL val_max,
                                       NULL format_num,
                                       1 rn
                                  FROM dual
                                UNION ALL
                                SELECT DISTINCT aum.id_unit_measure data,
                                                10 rank,
                                                pk_translation.get_translation(i_lang,
                                                                               'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                               aum.id_unit_measure) label,
                                                aum.flg_default,
                                                aum.id_analysis_parameter,
                                                aum.val_min_str ref_val_min,
                                                aum.val_max_str ref_val_max,
                                                aum.val_min,
                                                aum.val_max,
                                                aum.format_num,
                                                row_number() over(PARTITION BY aum.id_unit_measure ORDER BY aum.id_institution DESC, aum.id_software DESC) rn
                                  FROM analysis_unit_measure aum
                                 WHERE aum.id_analysis = i_analysis
                                   AND aum.id_sample_type = i_sample_type
                                   AND aum.id_analysis_parameter = i_analysis_parameter
                                   AND aum.id_software IN (0, i_prof.software)
                                   AND aum.id_institution IN (0, i_prof.institution)
                                   AND EXISTS (SELECT 1
                                          FROM analysis_param ap
                                         WHERE ap.id_analysis = aum.id_analysis
                                           AND ap.id_sample_type = aum.id_sample_type
                                           AND ap.id_analysis_parameter = aum.id_analysis_parameter
                                           AND ap.id_software = i_prof.software
                                           AND ap.id_institution = i_prof.institution
                                           AND ap.flg_available = pk_lab_tests_constant.g_available))
                         WHERE label IS NOT NULL
                           AND rn = 1
                         ORDER BY 4, 2;
                END IF;
            END IF;
        ELSE
            pk_types.open_cursor_if_closed(o_list);
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_UNIT_MEASURE_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_unit_measure_list;

    FUNCTION get_lab_test_result_prof_list
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_prof_ext sys_config.value%TYPE := pk_sysconfig.get_config('ID_PROF_EXT', i_prof);
    
    BEGIN
    
        g_error := 'GET CURSOR O_LIST';
        OPEN o_list FOR
            SELECT ppt.id_professional data,
                   1 rank,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, ppt.id_professional) label,
                   NULL flg_default
              FROM prof_profile_template ppt, profile_template pt
             WHERE ppt.id_software = i_prof.software
               AND ppt.id_institution = i_prof.institution
               AND ppt.id_profile_template = pt.id_profile_template
               AND pt.flg_type IN (pk_alert_constant.g_cat_type_doc,
                                   pk_alert_constant.g_cat_type_nurse,
                                   pk_alert_constant.g_cat_type_nutritionist)
            UNION
            SELECT p.id_professional data,
                   0 rank,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, p.id_professional) label,
                   NULL flg_default
              FROM professional p
             WHERE p.id_professional = l_prof_ext
             ORDER BY rank, label;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_RESULT_PROF_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_lab_test_result_prof_list;

    FUNCTION get_lab_test_result_prof_list
    (
        i_lang IN language.id_language%TYPE,
        i_prof IN profissional
    ) RETURN t_tbl_core_domain IS
    
        l_prof_ext sys_config.value%TYPE := pk_sysconfig.get_config('ID_PROF_EXT', i_prof);
    
        l_ret   t_tbl_core_domain;
        l_error t_error_out;
    
    BEGIN
    
        g_error := 'OPEN L_RET';
        SELECT *
          BULK COLLECT
          INTO l_ret
          FROM (SELECT t_row_core_domain(internal_name => NULL,
                                         desc_domain   => t.label,
                                         domain_value  => t.data,
                                         order_rank    => t.rank,
                                         img_name      => NULL)
                  FROM (SELECT ppt.id_professional data,
                               1 rank,
                               pk_prof_utils.get_name_signature(i_lang, i_prof, ppt.id_professional) label
                          FROM prof_profile_template ppt, profile_template pt
                         WHERE ppt.id_software = i_prof.software
                           AND ppt.id_institution = i_prof.institution
                           AND ppt.id_profile_template = pt.id_profile_template
                           AND pt.flg_type IN (pk_alert_constant.g_cat_type_doc,
                                               pk_alert_constant.g_cat_type_nurse,
                                               pk_alert_constant.g_cat_type_nutritionist)
                        UNION
                        SELECT p.id_professional data,
                               0 rank,
                               pk_prof_utils.get_name_signature(i_lang, i_prof, p.id_professional) label
                          FROM professional p
                         WHERE p.id_professional = l_prof_ext
                         ORDER BY rank, label) t);
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_RESULT_PROF_LIST',
                                              l_error);
            RETURN t_tbl_core_domain();
    END get_lab_test_result_prof_list;

    FUNCTION get_lab_test_unit_conversion
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_analysis_parameter IN analysis_parameter.id_analysis_parameter%TYPE,
        i_unit_measure_src   IN unit_measure.id_unit_measure%TYPE,
        i_unit_measure_dst   IN unit_measure.id_unit_measure%TYPE,
        i_values             IN table_varchar,
        o_list               OUT table_varchar,
        o_unit_measure_list  OUT NUMBER,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_lt_par_unit_src lab_tests_par_uni_mea.id_lab_tests_par_uni_mea%TYPE;
        l_lt_par_unit_dst lab_tests_par_uni_mea.id_lab_tests_par_uni_mea%TYPE;
    
        l_factor         lab_tests_uni_mea_cnv.factor%TYPE;
        l_decimals       lab_tests_uni_mea_cnv.decimals%TYPE;
        l_result_convert VARCHAR2(24 CHAR);
    
        l_convertible PLS_INTEGER;
    
    BEGIN
    
        -- Get the id_lab_tests_param_unit_src of the source unit measure according to the parameter
        BEGIN
            SELECT lpu.id_lab_tests_par_uni_mea
              INTO l_lt_par_unit_src
              FROM lab_tests_par_uni_mea lpu
             WHERE lpu.id_analysis_parameter = i_analysis_parameter
               AND lpu.id_unit_measure = i_unit_measure_src;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
    
        -- Get the id_lab_tests_param_unit_dst of the destination unit measure according to the parameter-
        BEGIN
            SELECT lpu.id_lab_tests_par_uni_mea
              INTO l_lt_par_unit_dst
              FROM lab_tests_par_uni_mea lpu
             WHERE lpu.id_analysis_parameter = i_analysis_parameter
               AND lpu.id_unit_measure = i_unit_measure_dst;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
    
        o_list := table_varchar();
        o_list.extend(i_values.count);
    
        IF i_unit_measure_src != i_unit_measure_dst
        THEN
            -- Check if the unit measure is convertible
            SELECT decode((SELECT 1
                            FROM dual
                           WHERE EXISTS (SELECT 0
                                    FROM lab_tests_uni_mea_cnv luc
                                   WHERE luc.id_lt_param_src_unit = l_lt_par_unit_src
                                     AND luc.id_lt_param_dst_unit = l_lt_par_unit_dst)),
                          1,
                          1,
                          0) convertible
              INTO l_convertible
              FROM dual;
        
            IF l_convertible = 1
            THEN
                -- Gets factor and decimals corresponding with the unit measures and with the parameter to convert
                SELECT factor, decimals
                  INTO l_factor, l_decimals
                  FROM lab_tests_uni_mea_cnv luc
                 WHERE luc.id_lt_param_src_unit = l_lt_par_unit_src
                   AND luc.id_lt_param_dst_unit = l_lt_par_unit_dst;
            
                IF i_values IS NOT NULL
                THEN
                    IF i_values.count != 0
                    THEN
                        FOR i IN i_values.first .. i_values.last
                        LOOP
                            -- Rounds the calculated value according with the decimals of the parameter unit measure                        
                            l_result_convert := round(to_number(i_values(i)) *
                                                      to_number(TRIM(REPLACE(l_factor, '.', ','))),
                                                      nvl(l_decimals, 0));
                            o_list(i) := l_result_convert;
                        
                        END LOOP;
                    END IF;
                END IF;
            
                SELECT COUNT(1)
                  INTO o_unit_measure_list
                  FROM lab_tests_uni_mea_cnv ltc, lab_tests_par_uni_mea ltp
                 WHERE ltp.id_lab_tests_par_uni_mea = ltc.id_lt_param_dst_unit
                   AND ltc.id_lt_param_src_unit IN
                       (SELECT ltpu.id_lab_tests_par_uni_mea
                          FROM lab_tests_par_uni_mea ltpu
                         INNER JOIN unit_measure um
                            ON ltpu.id_unit_measure = um.id_unit_measure
                         WHERE ltpu.id_analysis_parameter = i_analysis_parameter
                           AND ltpu.id_unit_measure = l_lt_par_unit_dst);
            
                RETURN TRUE;
            
            END IF;
        ELSE
            RETURN TRUE;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_UNIT_CONVERSION',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_unit_conversion;

    FUNCTION get_lab_test_parameter_unit_list
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_patient            IN patient.id_patient%TYPE,
        i_analysis_parameter IN analysis_parameter.id_analysis_parameter%TYPE,
        i_unit_measure       IN lab_tests_par_uni_mea.id_unit_measure%TYPE,
        o_list               OUT pk_types.cursor_type,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        -- Get all the unit measures available for a lab test parameter
        g_error := 'OPEN CURSOR PARAMETER UNIT MEASURES';
        OPEN o_list FOR
            SELECT ltpum.id_analysis_parameter,
                   ltpum.id_unit_measure id_unit_measure_dst,
                   pk_translation.get_translation(i_lang, 'UNIT_MEASURE.CODE_UNIT_MEASURE.' || ltpum.id_unit_measure) unit_measure_dst_descr
              FROM lab_tests_uni_mea_cnv ltumc, lab_tests_par_uni_mea ltpum
             WHERE ltpum.id_lab_tests_par_uni_mea = ltumc.id_lt_param_dst_unit
               AND ltumc.id_lt_param_src_unit IN
                   (SELECT ltpu.id_lab_tests_par_uni_mea
                      FROM lab_tests_par_uni_mea ltpu
                     INNER JOIN unit_measure um
                        ON ltpu.id_unit_measure = um.id_unit_measure
                     WHERE ltpu.id_analysis_parameter = i_analysis_parameter
                       AND ltpu.id_unit_measure = i_unit_measure)
            UNION ALL
            SELECT i_analysis_parameter id_analysis_parameter,
                   i_unit_measure id_unit_measure_dst,
                   pk_translation.get_translation(i_lang, 'UNIT_MEASURE.CODE_UNIT_MEASURE.' || i_unit_measure) unit_measure_dst_descr
              FROM dual;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_PARAMETER_UNIT_LIST',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_parameter_unit_list;

    FUNCTION get_lab_test_default_values
    (
        i_lang           IN NUMBER,
        i_prof           IN profissional,
        i_episode        IN NUMBER,
        i_patient        IN NUMBER,
        i_action         IN NUMBER,
        i_root_name      IN VARCHAR2,
        i_curr_component IN NUMBER,
        i_idx            IN NUMBER DEFAULT 1,
        i_tbl_id_pk      IN table_number,
        i_tbl_mkt_rel    IN table_number,
        i_tbl_int_name   IN table_varchar,
        i_value          IN table_table_varchar,
        i_value_desc     IN table_table_varchar,
        i_tbl_data       IN table_table_varchar,
        i_value_clob     IN table_clob,
        i_tbl_result     IN OUT t_tbl_ds_get_value,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
        l_id_analysis    analysis_sample_type.id_analysis%TYPE;
        l_id_sample_type analysis_sample_type.id_sample_type%TYPE;
    
        l_epis_type             epis_type.id_epis_type%TYPE;
        l_value_to_execute      VARCHAR2(4000);
        l_value_to_execute_desc VARCHAR2(4000);
        l_flg_time              sys_config.value%TYPE;
        l_flg_priority          VARCHAR2(1 CHAR);
        l_priority_desc         VARCHAR2(1000 CHAR);
    
        l_flg_fast_default sys_config.value%TYPE;
    
        l_ds_internal_name ds_component.internal_name%TYPE;
        l_id_ds_component  ds_component.id_ds_component%TYPE;
    
        l_value      VARCHAR2(4000);
        l_value_desc VARCHAR2(4000);
    
        l_tbl_varchar_aux    table_varchar := table_varchar();
        l_tbl_id_analysis    table_varchar := table_varchar();
        l_tbl_id_sample_type table_varchar := table_varchar();
    
        l_tbl_result t_tbl_core_domain := t_tbl_core_domain();
    
        l_dummy_cursor pk_types.cursor_type;
    
    BEGIN
    
        FOR i IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
        LOOP
            IF i_tbl_int_name(i) = pk_orders_constant.g_ds_priority
            THEN
                l_id_ds_component := pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i));
            
                l_id_analysis    := to_number(i_tbl_data(i_idx) (1));
                l_id_sample_type := to_number(i_tbl_data(i_idx) (2));
            
                BEGIN
                    SELECT ais.flg_priority
                      INTO l_flg_priority
                      FROM analysis_instit_soft ais
                     WHERE ais.id_analysis = l_id_analysis
                       AND ais.id_sample_type = l_id_sample_type
                       AND ais.flg_type = pk_lab_tests_constant.g_analysis_can_req
                       AND ais.id_software = i_prof.software
                       AND ais.id_institution = i_prof.institution
                       AND ais.flg_execute = pk_lab_tests_constant.g_yes
                       AND ais.flg_available = pk_lab_tests_constant.g_available
                       AND rownum = 1;
                EXCEPTION
                    WHEN no_data_found THEN
                        l_flg_priority := NULL;
                END;
            
                IF l_flg_priority IS NOT NULL
                THEN
                    l_priority_desc := pk_sysdomain.get_domain(i_lang          => i_lang,
                                                               i_prof          => i_prof,
                                                               i_code_dom      => 'ANALYSIS_REQ_DET.FLG_URGENCY',
                                                               i_val           => l_flg_priority,
                                                               i_dep_clin_serv => NULL);
                ELSE
                    SELECT data, label
                      INTO l_flg_priority, l_priority_desc
                      FROM (SELECT val data, rank, desc_val label
                              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang,
                                                                                  i_prof,
                                                                                  'ANALYSIS_REQ_DET.FLG_URGENCY',
                                                                                  NULL)) s
                             ORDER BY rank)
                     WHERE rownum = 1;
                END IF;
            
                i_tbl_result.extend();
                i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                       id_ds_component    => l_id_ds_component,
                                                                       internal_name      => i_tbl_int_name(i),
                                                                       VALUE              => l_flg_priority,
                                                                       value_clob         => NULL,
                                                                       min_value          => NULL,
                                                                       max_value          => NULL,
                                                                       desc_value         => l_priority_desc,
                                                                       desc_clob          => NULL,
                                                                       id_unit_measure    => NULL,
                                                                       desc_unit_measure  => NULL,
                                                                       flg_validation     => pk_orders_constant.g_component_valid,
                                                                       err_msg            => NULL,
                                                                       flg_event_type     => pk_orders_constant.g_component_active,
                                                                       flg_multi_status   => pk_alert_constant.g_no,
                                                                       idx                => i_idx);
            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_prn
            THEN
                l_id_ds_component := pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i));
            
                SELECT data, label
                  INTO l_value, l_value_desc
                  FROM (SELECT data, label
                          FROM (SELECT s.val data,
                                       s.rank,
                                       s.desc_val label,
                                       decode(s.val,
                                              pk_lab_tests_constant.g_no,
                                              pk_lab_tests_constant.g_yes,
                                              pk_lab_tests_constant.g_no) flg_default
                                  FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang,
                                                                                      i_prof,
                                                                                      'ANALYSIS_REQ_DET.FLG_PRN',
                                                                                      NULL)) s
                                 ORDER BY s.rank)
                         WHERE flg_default = pk_alert_constant.g_yes);
            
                i_tbl_result.extend();
                i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                       id_ds_component    => l_id_ds_component,
                                                                       internal_name      => i_tbl_int_name(i),
                                                                       VALUE              => l_value,
                                                                       min_value          => NULL,
                                                                       max_value          => NULL,
                                                                       value_clob         => NULL,
                                                                       desc_value         => l_value_desc,
                                                                       desc_clob          => NULL,
                                                                       id_unit_measure    => NULL,
                                                                       desc_unit_measure  => NULL,
                                                                       flg_validation     => NULL,
                                                                       err_msg            => NULL,
                                                                       flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                       flg_multi_status   => NULL,
                                                                       idx                => i_idx);
            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_fasting
            THEN
                l_id_ds_component := pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i));
            
                l_flg_fast_default := pk_sysconfig.get_config('ANALYSIS_REQ_FLG_FASTING_DEFAULT', i_prof);
            
                SELECT data, label
                  INTO l_value, l_value_desc
                  FROM (SELECT data, label
                          FROM (SELECT /*+opt_estimate(table s rows=1)*/
                                 s.val data,
                                 s.rank,
                                 s.desc_val label,
                                 decode(s.val, l_flg_fast_default, pk_exam_constant.g_yes, pk_exam_constant.g_no) flg_default
                                  FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang,
                                                                                      i_prof,
                                                                                      'ANALYSIS_REQ_DET.FLG_FASTING',
                                                                                      NULL)) s)
                         ORDER BY flg_default DESC, rank ASC)
                 WHERE rownum = 1;
            
                i_tbl_result.extend();
                i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                       id_ds_component    => l_id_ds_component,
                                                                       internal_name      => i_tbl_int_name(i),
                                                                       VALUE              => l_value,
                                                                       min_value          => NULL,
                                                                       max_value          => NULL,
                                                                       value_clob         => NULL,
                                                                       desc_value         => l_value_desc,
                                                                       desc_clob          => NULL,
                                                                       id_unit_measure    => NULL,
                                                                       desc_unit_measure  => NULL,
                                                                       flg_validation     => pk_orders_constant.g_component_valid,
                                                                       err_msg            => NULL,
                                                                       flg_event_type     => pk_orders_constant.g_component_active,
                                                                       flg_multi_status   => NULL,
                                                                       idx                => i_idx);
            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_specimen
            THEN
                l_id_ds_component := pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i));
            
                --If the record is a Group, field 'Specimen' must be inactive
                IF i_tbl_data(i_idx) (3) = 'G'
                THEN
                    i_tbl_result.extend();
                    i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                           id_ds_component    => l_id_ds_component,
                                                                           internal_name      => i_tbl_int_name(i),
                                                                           VALUE              => NULL,
                                                                           min_value          => NULL,
                                                                           max_value          => NULL,
                                                                           value_clob         => NULL,
                                                                           desc_value         => NULL,
                                                                           desc_clob          => NULL,
                                                                           id_unit_measure    => NULL,
                                                                           desc_unit_measure  => NULL,
                                                                           flg_validation     => pk_orders_constant.g_component_valid,
                                                                           err_msg            => NULL,
                                                                           flg_event_type     => pk_orders_constant.g_component_inactive,
                                                                           flg_multi_status   => NULL,
                                                                           idx                => i_idx);
                ELSE
                    SELECT domain_value, desc_domain
                      INTO l_value, l_value_desc
                      FROM TABLE(pk_lab_tests_core.get_lab_test_specimen_list(i_lang        => i_lang,
                                                                              i_prof        => i_prof,
                                                                              i_analysis    => to_number(i_tbl_data(i_idx) (1)),
                                                                              i_sample_type => to_number(i_tbl_data(i_idx) (2)),
                                                                              i_default     => pk_alert_constant.g_yes))
                     WHERE rownum = 1;
                
                    i_tbl_result.extend();
                    i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                           id_ds_component    => l_id_ds_component,
                                                                           internal_name      => i_tbl_int_name(i),
                                                                           VALUE              => l_value,
                                                                           min_value          => NULL,
                                                                           max_value          => NULL,
                                                                           value_clob         => NULL,
                                                                           desc_value         => l_value_desc,
                                                                           desc_clob          => NULL,
                                                                           id_unit_measure    => NULL,
                                                                           desc_unit_measure  => NULL,
                                                                           flg_validation     => pk_orders_constant.g_component_valid,
                                                                           err_msg            => NULL,
                                                                           flg_event_type     => CASE
                                                                                                     WHEN i_tbl_data.count = 1 THEN
                                                                                                      pk_orders_constant.g_component_mandatory
                                                                                                     ELSE
                                                                                                      pk_orders_constant.g_component_read_only
                                                                                                 END,
                                                                           flg_multi_status   => NULL,
                                                                           idx                => i_idx);
                END IF;
            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_id_analysis
            THEN
                l_id_ds_component := pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i));
            
                --Para grupos é necessário obter o id_analysis de todos os seus elementos
                IF i_tbl_data(i_idx) (3) = 'G'
                THEN
                    SELECT to_char(agp.id_analysis)
                      BULK COLLECT
                      INTO l_tbl_id_analysis
                      FROM analysis_agp agp
                     WHERE agp.id_analysis_group = to_number(i_tbl_data(i_idx) (4))
                       AND agp.flg_available = pk_alert_constant.g_yes
                     ORDER BY agp.rank;
                
                    FOR j IN l_tbl_id_analysis.first .. l_tbl_id_analysis.last
                    LOOP
                        i_tbl_result.extend();
                        i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                               id_ds_component    => l_id_ds_component,
                                                                               internal_name      => i_tbl_int_name(i),
                                                                               VALUE              => l_tbl_id_analysis(j),
                                                                               min_value          => NULL,
                                                                               max_value          => NULL,
                                                                               value_clob         => NULL,
                                                                               desc_value         => NULL,
                                                                               desc_clob          => NULL,
                                                                               id_unit_measure    => NULL,
                                                                               desc_unit_measure  => NULL,
                                                                               flg_validation     => pk_orders_constant.g_component_valid,
                                                                               err_msg            => NULL,
                                                                               flg_event_type     => pk_orders_constant.g_component_active,
                                                                               flg_multi_status   => NULL,
                                                                               idx                => i_idx);
                    END LOOP;
                
                ELSE
                
                    i_tbl_result.extend();
                    i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                           id_ds_component    => l_id_ds_component,
                                                                           internal_name      => i_tbl_int_name(i),
                                                                           VALUE              => i_tbl_data(i_idx) (1),
                                                                           min_value          => NULL,
                                                                           max_value          => NULL,
                                                                           value_clob         => NULL,
                                                                           desc_value         => NULL,
                                                                           desc_clob          => NULL,
                                                                           id_unit_measure    => NULL,
                                                                           desc_unit_measure  => NULL,
                                                                           flg_validation     => pk_orders_constant.g_component_valid,
                                                                           err_msg            => NULL,
                                                                           flg_event_type     => pk_orders_constant.g_component_active,
                                                                           flg_multi_status   => NULL,
                                                                           idx                => i_idx);
                END IF;
            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_id_sample_type
            THEN
                l_id_ds_component := pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i));
            
                --Para grupos é necessário obter o id_smple_type de todos os seus elementos
                IF i_tbl_data(i_idx) (3) = 'G'
                THEN
                    SELECT to_char(agp.id_sample_type)
                      BULK COLLECT
                      INTO l_tbl_id_sample_type
                      FROM analysis_agp agp
                     WHERE agp.id_analysis_group = to_number(i_tbl_data(i_idx) (4))
                       AND agp.flg_available = pk_alert_constant.g_yes
                     ORDER BY agp.rank;
                
                    FOR j IN l_tbl_id_sample_type.first .. l_tbl_id_sample_type.last
                    LOOP
                        i_tbl_result.extend();
                        i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                               id_ds_component    => l_id_ds_component,
                                                                               internal_name      => i_tbl_int_name(i),
                                                                               VALUE              => l_tbl_id_sample_type(j),
                                                                               min_value          => NULL,
                                                                               max_value          => NULL,
                                                                               value_clob         => NULL,
                                                                               desc_value         => NULL,
                                                                               desc_clob          => NULL,
                                                                               id_unit_measure    => NULL,
                                                                               desc_unit_measure  => NULL,
                                                                               flg_validation     => pk_orders_constant.g_component_valid,
                                                                               err_msg            => NULL,
                                                                               flg_event_type     => pk_orders_constant.g_component_active,
                                                                               flg_multi_status   => NULL,
                                                                               idx                => i_idx);
                    END LOOP;
                ELSE
                    i_tbl_result.extend();
                    i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                           id_ds_component    => l_id_ds_component,
                                                                           internal_name      => i_tbl_int_name(i),
                                                                           VALUE              => i_tbl_data(i_idx) (2),
                                                                           min_value          => NULL,
                                                                           max_value          => NULL,
                                                                           value_clob         => NULL,
                                                                           desc_value         => NULL,
                                                                           desc_clob          => NULL,
                                                                           id_unit_measure    => NULL,
                                                                           desc_unit_measure  => NULL,
                                                                           flg_validation     => pk_orders_constant.g_component_valid,
                                                                           err_msg            => NULL,
                                                                           flg_event_type     => pk_orders_constant.g_component_active,
                                                                           flg_multi_status   => NULL,
                                                                           idx                => i_idx);
                END IF;
            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_body_location
            THEN
                l_id_ds_component := pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i));
            
                --If the record is a Group, field 'Body location' must be inactive
                i_tbl_result.extend();
                i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                       id_ds_component    => l_id_ds_component,
                                                                       internal_name      => i_tbl_int_name(i),
                                                                       VALUE              => NULL,
                                                                       min_value          => NULL,
                                                                       max_value          => NULL,
                                                                       value_clob         => NULL,
                                                                       desc_value         => NULL,
                                                                       desc_clob          => NULL,
                                                                       id_unit_measure    => NULL,
                                                                       desc_unit_measure  => NULL,
                                                                       flg_validation     => pk_orders_constant.g_component_valid,
                                                                       err_msg            => NULL,
                                                                       flg_event_type     => CASE i_tbl_data(i_idx) (3)
                                                                                                 WHEN 'G' THEN
                                                                                                  pk_orders_constant.g_component_inactive
                                                                                                 ELSE
                                                                                                  pk_orders_constant.g_component_active
                                                                                             END,
                                                                       flg_multi_status   => NULL,
                                                                       idx                => i_idx);
            ELSIF i_tbl_int_name(i) IN
                  (pk_orders_constant.g_ds_collection_place, pk_orders_constant.g_ds_place_service)
            THEN
                IF i_tbl_data(i_idx) (3) = 'G'
                THEN
                    SELECT to_char(agp.id_analysis), to_char(agp.id_sample_type)
                      BULK COLLECT
                      INTO l_tbl_id_analysis, l_tbl_id_sample_type
                      FROM analysis_agp agp
                     WHERE agp.id_analysis_group = to_number(i_tbl_data(i_idx) (4))
                       AND agp.flg_available = pk_alert_constant.g_yes;
                
                    l_tbl_result := pk_lab_tests_core.get_lab_test_location_list(i_lang        => i_lang,
                                                                                 i_prof        => i_prof,
                                                                                 i_analysis    => l_tbl_id_analysis,
                                                                                 i_sample_type => l_tbl_id_sample_type,
                                                                                 i_flg_type    => CASE i_tbl_int_name(i)
                                                                                                      WHEN
                                                                                                       pk_orders_constant.g_ds_collection_place THEN
                                                                                                       pk_lab_tests_constant.g_arm_flg_type_room_pat
                                                                                                      ELSE
                                                                                                       pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                                                                  END,
                                                                                 i_default     => pk_alert_constant.g_yes);
                ELSE
                    l_tbl_result := pk_lab_tests_core.get_lab_test_location_list(i_lang        => i_lang,
                                                                                 i_prof        => i_prof,
                                                                                 i_analysis    => table_varchar(i_tbl_data(i_idx) (1)),
                                                                                 i_sample_type => table_varchar(i_tbl_data(i_idx) (2)),
                                                                                 i_flg_type    => CASE i_tbl_int_name(i)
                                                                                                      WHEN
                                                                                                       pk_orders_constant.g_ds_collection_place THEN
                                                                                                       pk_lab_tests_constant.g_arm_flg_type_room_pat
                                                                                                      ELSE
                                                                                                       pk_lab_tests_constant.g_arm_flg_type_room_tube
                                                                                                  END,
                                                                                 i_default     => pk_alert_constant.g_yes);
                END IF;
            
                IF l_tbl_result.count > 0
                THEN
                    SELECT /*+opt_estimate (table t rows=1)*/
                     domain_value, desc_domain
                      INTO l_value, l_value_desc
                      FROM TABLE(l_tbl_result) t
                     WHERE rownum = 1;
                
                    i_tbl_result.extend();
                    i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                           id_ds_component    => l_id_ds_component,
                                                                           internal_name      => i_tbl_int_name(i),
                                                                           VALUE              => l_value,
                                                                           min_value          => NULL,
                                                                           max_value          => NULL,
                                                                           value_clob         => NULL,
                                                                           desc_value         => l_value_desc,
                                                                           desc_clob          => NULL,
                                                                           id_unit_measure    => NULL,
                                                                           desc_unit_measure  => NULL,
                                                                           flg_validation     => pk_orders_constant.g_component_valid,
                                                                           err_msg            => NULL,
                                                                           flg_event_type     => pk_orders_constant.g_component_active,
                                                                           flg_multi_status   => NULL,
                                                                           idx                => i_idx);
                END IF;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_DEFAULT_VALUES',
                                              o_error);
            RETURN FALSE;
    END get_lab_test_default_values;

    FUNCTION tf_lab_test_result
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_analysis_result    IN analysis_result.id_analysis_result%TYPE,
        i_analysis_parameter IN analysis_result_par.id_analysis_parameter%TYPE
    ) RETURN t_tbl_lab_test_result IS
    
        l_ret t_tbl_lab_test_result := t_tbl_lab_test_result();
    
    BEGIN
        SELECT t_rec_lab_test_result(action                     => 'RESULT',
                                     dt_analysis_result_tstz    => ar.dt_analysis_result_tstz,
                                     flg_result_origin          => ar.flg_result_origin,
                                     id_analysis_req_det        => ar.id_analysis_req_det,
                                     id_analysis                => ar.id_analysis,
                                     id_analysis_result         => ar.id_analysis_result,
                                     id_episode                 => ar.id_episode,
                                     id_professional            => ar.id_professional,
                                     id_result_status           => ar.id_result_status,
                                     flg_status                 => ar.flg_status,
                                     id_sample_type             => ar.id_sample_type,
                                     notes                      => ar.notes,
                                     result_origin_notes        => ar.result_origin_notes,
                                     id_analysis_parent         => aresp_parent.id_analysis,
                                     id_sample_type_parent      => aresp_parent.id_sample_type,
                                     analysis_result_value_1    => aresp.analysis_result_value_1,
                                     analysis_result_value_2    => aresp.analysis_result_value_2,
                                     desc_analysis_result       => aresp.desc_analysis_result,
                                     desc_unit_measure          => aresp.desc_unit_measure,
                                     dt_analysis_result_par_upd => aresp.dt_analysis_result_par_upd,
                                     comparator                 => aresp.comparator,
                                     id_analysis_desc           => aresp.id_analysis_desc,
                                     id_analysis_result_par     => aresp.id_analysis_result_par,
                                     id_arp_parent              => aresp.id_arp_parent,
                                     id_unit_measure            => aresp.id_unit_measure,
                                     interface_notes            => aresp.interface_notes,
                                     flg_relevant               => aresp.flg_relevant,
                                     laboratory_short_desc      => aresp.laboratory_short_desc,
                                     notes_doctor_registry      => aresp.notes_doctor_registry,
                                     parameter_notes            => aresp.parameter_notes,
                                     separator                  => aresp.separator,
                                     ref_val                    => aresp.ref_val,
                                     ref_val_max                => aresp.ref_val_max,
                                     ref_val_max_str            => aresp.ref_val_max_str,
                                     ref_val_min                => aresp.ref_val_min,
                                     ref_val_min_str            => aresp.ref_val_min_str,
                                     dt_harvest_tstz            => h.dt_harvest_tstz,
                                     id_harvest                 => h.id_harvest,
                                     id_analysis_result_count   => t.id_analysis_result_count,
                                     id_analysis_parameter      => aresp.id_analysis_parameter)
          BULK COLLECT
          INTO l_ret
          FROM analysis_result ar
          LEFT JOIN (SELECT ar.id_analysis_req_det,
                            ar.id_analysis_result,
                            COUNT(ar.id_analysis_result) id_analysis_result_count
                       FROM analysis_result ar
                       JOIN (SELECT aresp.id_analysis_result
                              FROM analysis_result_par aresp, analysis_req_par arp
                             WHERE aresp.id_analysis_req_par = arp.id_analysis_req_par
                               AND aresp.id_analysis_result = i_analysis_result) aresp
                         ON ar.id_analysis_result = aresp.id_analysis_result
                      WHERE ar.id_analysis_result = i_analysis_result
                        AND (ar.flg_status != pk_lab_tests_constant.g_analysis_cancel OR ar.flg_status IS NULL)
                      GROUP BY ar.id_analysis_req_det, ar.id_analysis_result) t
            ON ar.id_analysis_result = t.id_analysis_result
          LEFT JOIN (SELECT arp.*
                       FROM analysis_result_par arp
                       JOIN analysis_result ar
                         ON arp.id_analysis_result = ar.id_analysis_result
                      WHERE ar.id_analysis_result = i_analysis_result
                        AND arp.id_analysis_parameter = i_analysis_parameter) aresp
            ON ar.id_analysis_result = aresp.id_analysis_result
          LEFT JOIN harvest h
            ON ar.id_harvest = h.id_harvest
          LEFT JOIN (SELECT arp.id_analysis_result_par, ar.id_analysis, ar.id_sample_type
                       FROM analysis_result_par arp
                       JOIN analysis_result ar
                         ON arp.id_analysis_result = ar.id_analysis_result
                      WHERE arp.id_arp_parent IS NULL) aresp_parent
            ON aresp.id_arp_parent = aresp_parent.id_analysis_result_par
         WHERE ar.id_analysis_result = i_analysis_result
           AND (ar.flg_status != pk_lab_tests_constant.g_analysis_cancel OR ar.flg_status IS NULL)
           AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                         i_prof,
                                                                         ar.id_analysis,
                                                                         pk_lab_tests_constant.g_infectious_diseases_results)
                  FROM dual) = pk_alert_constant.g_yes
         ORDER BY ar.dt_analysis_result_tstz DESC;
    
        RETURN l_ret;
    
    END tf_lab_test_result;

    FUNCTION tf_lab_test_result_hist
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_analysis_result    IN analysis_result.id_analysis_result%TYPE,
        i_analysis_parameter IN analysis_result_par.id_analysis_parameter%TYPE
    ) RETURN t_tbl_lab_test_result_hist IS
    
        l_ret t_tbl_lab_test_result_hist := t_tbl_lab_test_result_hist();
    
    BEGIN
        SELECT t_rec_lab_test_result_hist(action                      => 'RESULT',
                                          cnt                         => t.cnt,
                                          rn                          => t.rn,
                                          dt_analysis_result_tstz     => t.dt_analysis_result_tstz,
                                          dt_analysis_result_tstz_new => t.dt_analysis_result_tstz_new,
                                          flg_result_origin           => t.flg_result_origin,
                                          flg_result_origin_new       => t.flg_result_origin_new,
                                          id_analysis_req_det         => t.id_analysis_req_det,
                                          id_analysis                 => t.id_analysis,
                                          id_analysis_result          => t.id_analysis_result,
                                          id_episode                  => t.id_episode,
                                          id_professional             => t.id_professional,
                                          id_professional_upd         => t.id_professional_upd,
                                          id_result_status            => t.id_result_status,
                                          id_result_status_new        => t.id_result_status_new,
                                          id_sample_type              => t.id_sample_type,
                                          result_origin_notes         => t.result_origin_notes,
                                          result_origin_notes_new     => t.result_origin_notes_new,
                                          result_notes                => t.result_notes,
                                          result_notes_new            => t.result_notes_new,
                                          review_notes                => t.review_notes,
                                          review_notes_new            => t.review_notes_new,
                                          analysis_result_value       => t.analysis_result_value,
                                          analysis_result_value_new   => t.analysis_result_value_new,
                                          desc_analysis_result        => t.desc_analysis_result,
                                          desc_analysis_result_new    => t.desc_analysis_result_new,
                                          desc_unit_measure           => t.desc_unit_measure,
                                          desc_unit_measure_new       => t.desc_unit_measure_new,
                                          dt_analysis_result_par_upd  => t.dt_analysis_result_par_upd,
                                          id_arp_parent               => t.id_arp_parent,
                                          id_unit_measure             => t.id_unit_measure,
                                          id_unit_measure_new         => t.id_unit_measure_new,
                                          interface_notes             => t.interface_notes,
                                          interface_notes_new         => t.interface_notes_new,
                                          flg_relevant                => t.flg_relevant,
                                          flg_relevant_new            => t.flg_relevant_new,
                                          laboratory_short_desc       => t.laboratory_short_desc,
                                          laboratory_short_desc_new   => t.laboratory_short_desc_new,
                                          parameter_notes             => t.parameter_notes,
                                          parameter_notes_new         => t.parameter_notes_new,
                                          ref_val                     => t.ref_val,
                                          ref_val_new                 => t.ref_val_new,
                                          ref_val_max                 => t.ref_val_max,
                                          ref_val_max_new             => t.ref_val_max_new,
                                          ref_val_max_str             => t.ref_val_max_str,
                                          ref_val_max_str_new         => t.ref_val_max_str_new,
                                          ref_val_min                 => t.ref_val_min,
                                          ref_val_min_new             => t.ref_val_min_new,
                                          ref_val_min_str             => t.ref_val_min_str,
                                          ref_val_min_str_new         => t.ref_val_min_str_new,
                                          dt_harvest_tstz             => t.dt_harvest_tstz,
                                          id_analysis_result_count    => t.id_analysis_result_count,
                                          id_analysis_parent          => t.id_analysis_parent,
                                          id_sample_type_parent       => t.id_sample_type_parent,
                                          id_analysis_parameter       => t.id_analysis_parameter)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT aresp.id_analysis_req_det,
                       aresp.id_analysis_result,
                       aresp.id_episode,
                       cnt,
                       rn,
                       aresp.id_professional,
                       aresp.id_professional_upd,
                       aresp.dt_analysis_result_tstz,
                       aresp.dt_analysis_result_par_upd,
                       aresp.id_arp_parent,
                       aresp.id_analysis,
                       aresp.id_sample_type,
                       aresp.dt_harvest_tstz,
                       result_count.id_analysis_result_count,
                       aresp.desc_analysis_result,
                       aresp.analysis_result_value,
                       aresp.desc_unit_measure,
                       aresp.id_unit_measure,
                       aresp.desc_analysis_result_new,
                       aresp.analysis_result_value_new,
                       aresp.desc_unit_measure_new,
                       aresp.id_unit_measure_new,
                       aresp.id_result_status,
                       aresp.id_result_status_new,
                       aresp.ref_val,
                       aresp.ref_val_min,
                       aresp.ref_val_min_str,
                       aresp.ref_val_max,
                       aresp.ref_val_max_str,
                       aresp.ref_val_new,
                       aresp.ref_val_min_new,
                       aresp.ref_val_min_str_new,
                       aresp.ref_val_max_new,
                       aresp.ref_val_max_str_new,
                       aresp.parameter_notes,
                       aresp.parameter_notes_new,
                       aresp.interface_notes,
                       aresp.interface_notes_new,
                       aresp.laboratory_short_desc,
                       aresp.laboratory_short_desc_new,
                       aresp.dt_analysis_result_tstz_new,
                       aresp.flg_result_origin,
                       aresp.flg_result_origin_new,
                       aresp.result_origin_notes,
                       aresp.result_origin_notes_new,
                       aresp.result_notes,
                       aresp.result_notes_new,
                       aresp.flg_relevant,
                       aresp.flg_relevant_new,
                       aresp.review_notes,
                       aresp.review_notes_new,
                       aresp_parent.id_analysis              id_analysis_parent,
                       aresp_parent.id_sample_type           id_sample_type_parent,
                       aresp.id_analysis_parameter
                  FROM (SELECT row_number() over(PARTITION BY t.id_harvest ORDER BY t.dt_analysis_res_par_hist DESC NULLS FIRST, t.dt_analysis_result_par_tstz DESC) rn,
                               COUNT(1) over(PARTITION BY t.id_harvest) cnt,
                               t.dt_analysis_res_par_hist,
                               t.id_analysis_req_det,
                               t.id_analysis,
                               t.id_sample_type,
                               first_value(t.id_analysis_req_det) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_analysis_req_det_new,
                               t.id_analysis_result,
                               first_value(t.id_analysis_result) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_analysis_result_new,
                               t.id_arp_parent,
                               t.id_episode,
                               t.dt_harvest_tstz,
                               t.id_professional,
                               first_value(t.id_professional) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_professional_new,
                               t.dt_analysis_result_tstz,
                               first_value(t.dt_analysis_result_tstz) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_analysis_result_tstz_new,
                               dbms_lob.substr(t.notes, 3800) result_notes,
                               first_value(dbms_lob.substr(t.notes, 3800)) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) result_notes_new,
                               t.flg_result_origin,
                               first_value(t.flg_result_origin) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_result_origin_new,
                               t.result_origin_notes,
                               first_value(t.result_origin_notes) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) result_origin_notes_new,
                               t.flg_status,
                               first_value(t.flg_status) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_status_new,
                               dbms_lob.substr(t.desc_analysis_result, 3800) desc_analysis_result,
                               first_value(dbms_lob.substr(t.desc_analysis_result, 3800)) over(ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) desc_analysis_result_new,
                               t.analysis_result_value,
                               first_value(t.analysis_result_value) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) analysis_result_value_new,
                               t.id_unit_measure,
                               first_value(t.id_unit_measure) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_unit_measure_new,
                               t.desc_unit_measure,
                               first_value(t.desc_unit_measure) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) desc_unit_measure_new,
                               t.id_result_status,
                               first_value(t.id_result_status) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_result_status_new,
                               t.ref_val,
                               first_value(t.ref_val) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_new,
                               t.ref_val_min_str,
                               first_value(t.ref_val_min_str) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_min_str_new,
                               t.ref_val_min,
                               first_value(t.ref_val_min) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_min_new,
                               t.ref_val_max_str,
                               first_value(t.ref_val_max_str) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_max_str_new,
                               t.ref_val_max,
                               first_value(t.ref_val_max) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) ref_val_max_new,
                               t.laboratory_short_desc,
                               first_value(t.laboratory_short_desc) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) laboratory_short_desc_new,
                               dbms_lob.substr(t.parameter_notes, 3800) parameter_notes,
                               first_value(dbms_lob.substr(t.parameter_notes, 3800)) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) parameter_notes_new,
                               dbms_lob.substr(t.interface_notes, 3800) interface_notes,
                               first_value(dbms_lob.substr(t.interface_notes, 3800)) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) interface_notes_new,
                               t.flg_relevant,
                               first_value(t.flg_relevant) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_relevant_new,
                               dbms_lob.substr(t.notes_doctor_registry, 3800) review_notes,
                               first_value(dbms_lob.substr(t.notes_doctor_registry, 3800)) over(PARTITION BY id_harvest ORDER BY dt_analysis_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) review_notes_new,
                               t.id_professional_upd,
                               first_value(t.id_professional_upd) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_professional_upd_new,
                               t.dt_analysis_result_par_upd,
                               first_value(t.dt_analysis_result_par_upd) over(PARTITION BY id_harvest ORDER BY dt_analysis_res_par_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_analysis_result_par_upd_new,
                               t.id_analysis_parameter
                          FROM (SELECT NULL dt_analysis_res_par_hist,
                                       NULL dt_analysis_result_hist,
                                       ar.id_analysis_req_det,
                                       ar.id_analysis,
                                       ar.id_sample_type,
                                       ar.id_analysis_result,
                                       aresp.id_arp_parent,
                                       ar.id_episode,
                                       h.id_harvest,
                                       h.dt_harvest_tstz,
                                       aresp.id_professional,
                                       ar.dt_analysis_result_tstz,
                                       ar.flg_result_origin,
                                       ar.result_origin_notes,
                                       ar.flg_status,
                                       ar.notes,
                                       aresp.dt_analysis_result_par_tstz,
                                       to_clob(decode(pk_utils.is_number(dbms_lob.substr(aresp.desc_analysis_result, 3800)),
                                                      pk_lab_tests_constant.g_yes,
                                                      '',
                                                      decode(aresp.id_analysis_desc,
                                                             NULL,
                                                             NULL /*chr(10) || chr(9) || chr(9)*/,
                                                             '')) || aresp.desc_analysis_result) desc_analysis_result,
                                       (aresp.comparator || aresp.analysis_result_value_1 || aresp.separator ||
                                       aresp.analysis_result_value_2) analysis_result_value,
                                       aresp.id_unit_measure,
                                       aresp.desc_unit_measure,
                                       aresp.id_result_status,
                                       aresp.ref_val,
                                       aresp.ref_val_min_str,
                                       aresp.ref_val_min,
                                       aresp.ref_val_max_str,
                                       aresp.ref_val_max,
                                       aresp.parameter_notes,
                                       aresp.interface_notes,
                                       aresp.laboratory_short_desc,
                                       aresp.flg_relevant,
                                       aresp.notes_doctor_registry,
                                       nvl(aresp.id_prof_read, aresp.id_professional_upd) id_professional_upd,
                                       nvl(aresp.dt_doctor_registry_tstz, aresp.dt_analysis_result_par_upd) dt_analysis_result_par_upd,
                                       aresp.id_analysis_parameter
                                  FROM analysis_result ar
                                 INNER JOIN (SELECT aresp.*
                                              FROM analysis_result_par aresp
                                              JOIN analysis_result ar
                                                ON aresp.id_analysis_result = ar.id_analysis_result
                                             WHERE ar.id_analysis_result = i_analysis_result
                                               AND aresp.id_analysis_parameter = i_analysis_parameter) aresp
                                    ON aresp.id_analysis_result = ar.id_analysis_result
                                  LEFT JOIN harvest h
                                    ON h.id_harvest = ar.id_harvest
                                 WHERE ar.id_analysis_result = i_analysis_result
                                UNION ALL
                                SELECT aresph.dt_analysis_res_par_hist,
                                       arh.dt_analysis_result_hist,
                                       arh.id_analysis_req_det,
                                       arh.id_analysis,
                                       arh.id_sample_type,
                                       arh.id_analysis_result,
                                       aresph.id_arp_parent,
                                       arh.id_episode,
                                       h.id_harvest,
                                       h.dt_harvest_tstz,
                                       aresph.id_professional,
                                       arh.dt_analysis_result_tstz,
                                       arh.flg_result_origin,
                                       arh.result_origin_notes,
                                       arh.flg_status,
                                       arh.notes,
                                       aresph.dt_analysis_result_par_tstz,
                                       decode(pk_utils.is_number(dbms_lob.substr(aresph.desc_analysis_result, 3800)),
                                              pk_lab_tests_constant.g_yes,
                                              '',
                                              decode(aresph.id_analysis_desc,
                                                     NULL,
                                                     NULL /*chr(10) || chr(9) || chr(9)*/,
                                                     '')) || aresph.desc_analysis_result,
                                       (aresph.comparator || aresph.analysis_result_value_1 || aresph.separator ||
                                       aresph.analysis_result_value_2) analysis_result_value,
                                       aresph.id_unit_measure,
                                       aresph.desc_unit_measure,
                                       aresph.id_result_status,
                                       aresph.ref_val,
                                       aresph.ref_val_min_str,
                                       aresph.ref_val_min,
                                       aresph.ref_val_max_str,
                                       aresph.ref_val_max,
                                       aresph.parameter_notes,
                                       aresph.interface_notes,
                                       aresph.laboratory_short_desc,
                                       aresph.flg_relevant,
                                       aresph.notes_doctor_registry,
                                       nvl(aresph.id_prof_read, aresph.id_professional_upd) id_professional_upd,
                                       nvl(aresph.dt_doctor_registry_tstz, aresph.dt_analysis_result_par_upd) dt_analysis_result_par_upd,
                                       aresph.id_analysis_parameter
                                  FROM analysis_result_hist arh
                                  LEFT JOIN harvest h
                                    ON arh.id_harvest = h.id_harvest
                                  LEFT JOIN (SELECT a.*
                                              FROM analysis_result_par_hist a
                                              JOIN analysis_result ar
                                                ON a.id_analysis_result = ar.id_analysis_result
                                             WHERE ar.id_analysis_result = i_analysis_result
                                               AND a.id_analysis_parameter = i_analysis_parameter) aresph
                                    ON arh.id_analysis_result = aresph.id_analysis_result
                                 WHERE arh.id_analysis_result = i_analysis_result
                                 ORDER BY dt_analysis_res_par_hist    DESC NULLS FIRST,
                                          dt_analysis_result_hist     DESC NULLS FIRST,
                                          dt_analysis_result_par_tstz DESC) t
                         ORDER BY rn) aresp
                  LEFT JOIN (SELECT ar.id_analysis_req_det,
                                   ar.id_analysis_result,
                                   COUNT(ar.id_analysis_result) id_analysis_result_count
                              FROM analysis_result ar
                             INNER JOIN (SELECT aresp.id_analysis_result
                                          FROM analysis_result_par aresp
                                         INNER JOIN analysis_req_par arp
                                            ON aresp.id_analysis_req_par = arp.id_analysis_req_par
                                         WHERE aresp.id_analysis_result = i_analysis_result) aresp
                                ON ar.id_analysis_result = aresp.id_analysis_result
                             WHERE ar.id_analysis_result = i_analysis_result
                               AND (ar.flg_status != pk_lab_tests_constant.g_analysis_cancel OR ar.flg_status IS NULL)
                             GROUP BY ar.id_analysis_req_det, ar.id_analysis_result) result_count
                    ON result_count.id_analysis_result = aresp.id_analysis_result
                  LEFT JOIN (SELECT arp.id_analysis_result_par, ar.id_analysis, ar.id_sample_type
                              FROM analysis_result_par arp
                              JOIN analysis_result ar
                                ON arp.id_analysis_result = ar.id_analysis_result
                             WHERE arp.id_arp_parent IS NULL) aresp_parent
                    ON aresp.id_arp_parent = aresp_parent.id_analysis_result_par
                 WHERE (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                 i_prof,
                                                                                 aresp.id_analysis,
                                                                                 pk_lab_tests_constant.g_infectious_diseases_results)
                          FROM dual) = pk_alert_constant.g_yes) t;
    
        RETURN l_ret;
    
    END tf_lab_test_result_hist;

    FUNCTION tf_dd_block_lab_test_result
    (
        i_lang                    IN language.id_language%TYPE,
        i_prof                    IN profissional,
        i_analysis_result         IN analysis_result.id_analysis_result%TYPE,
        i_analysis_parameter      IN analysis_result_par.id_analysis_parameter%TYPE,
        i_analysis_parameter_rank IN PLS_INTEGER
    ) RETURN t_tab_dd_block_data IS
    
        l_tbl_detail        t_tbl_lab_test_result;
        l_tab_dd_block_data t_tab_dd_block_data := t_tab_dd_block_data();
    
    BEGIN
    
        l_tbl_detail := pk_lab_tests_core.tf_lab_test_result(i_lang               => i_lang,
                                                             i_prof               => i_prof,
                                                             i_analysis_result    => i_analysis_result,
                                                             i_analysis_parameter => i_analysis_parameter);
    
        SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                   (rn + i_analysis_parameter_rank * 1000), --rnk
                                   NULL,
                                   NULL,
                                   ddb.condition_val,
                                   NULL,
                                   NULL,
                                   dd.data_source,
                                   dd.data_source_val,
                                   NULL)
          BULK COLLECT
          INTO l_tab_dd_block_data
          FROM (SELECT data_source, data_source_val, row_number() over(PARTITION BY data_source ORDER BY rownum) rn
                  FROM (SELECT NULL action,
                               pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                        i_prof,
                                                                        pk_lab_tests_constant.g_analysis_alias,
                                                                        'ANALYSIS.CODE_ANALYSIS.' || t.id_analysis,
                                                                        'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                        t.id_sample_type,
                                                                        NULL) desc_analysis,
                               pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                        i_prof,
                                                                        pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                        'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                        t.id_analysis_parameter,
                                                                        NULL) desc_parameter,
                               decode(t.id_arp_parent,
                                      NULL,
                                      NULL,
                                      pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                               i_prof,
                                                                               pk_lab_tests_constant.g_analysis_alias,
                                                                               'ANALYSIS.CODE_ANALYSIS.' ||
                                                                               t.id_analysis_parent,
                                                                               'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                               t.id_sample_type_parent,
                                                                               NULL)) desc_reflex_analysis,
                               decode(t.dt_harvest_tstz,
                                      NULL,
                                      NULL,
                                      pk_date_utils.date_char_tsz(i_lang,
                                                                  t.dt_harvest_tstz,
                                                                  i_prof.institution,
                                                                  i_prof.software)) dt_harvest,
                               decode(pk_utils.is_number(dbms_lob.substr(t.desc_analysis_result, 3800)),
                                      pk_lab_tests_constant.g_yes,
                                      '',
                                      decode(t.id_analysis_desc, NULL, NULL /*chr(10) || chr(9) || chr(9)*/, '')) ||
                               nvl(TRIM(to_char(t.desc_analysis_result)),
                                   (t.comparator || t.analysis_result_value_1 || t.separator || t.analysis_result_value_2)) || ' ' ||
                               nvl(t.desc_unit_measure,
                                   pk_translation.get_translation(i_lang,
                                                                  'UNIT_MEASURE.CODE_UNIT_MEASURE.' || t.id_unit_measure)) RESULT,
                               pk_date_utils.date_char_tsz(i_lang,
                                                           t.dt_analysis_result_tstz,
                                                           i_prof.institution,
                                                           i_prof.software) dt_result,
                               decode(dbms_lob.getlength(t.notes),
                                      NULL,
                                      '',
                                      decode(dbms_lob.getlength(t.notes), 0, '', to_char(t.notes))) result_notes,
                               decode(t.id_result_status,
                                      NULL,
                                      NULL,
                                      pk_translation.get_translation(i_lang,
                                                                     'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                     t.id_result_status)) desc_status,
                               CASE
                                    WHEN t.id_analysis_result_count > 1 THEN
                                     NULL
                                    ELSE
                                     decode(nvl(t.ref_val,
                                                decode((nvl(TRIM(t.ref_val_min_str), t.ref_val_min) || ' - ' ||
                                                       nvl(TRIM(t.ref_val_max_str), t.ref_val_max)),
                                                       ' - ',
                                                       NULL,
                                                       nvl(TRIM(t.ref_val_min_str), t.ref_val_min) || ' - ' ||
                                                       nvl(TRIM(t.ref_val_max_str), t.ref_val_max) || ' ' ||
                                                       nvl(t.desc_unit_measure,
                                                           pk_translation.get_translation(i_lang,
                                                                                          'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                          t.id_unit_measure)))),
                                            NULL,
                                            NULL,
                                            nvl(t.ref_val,
                                                decode((nvl(TRIM(t.ref_val_min_str), t.ref_val_min) || ' - ' ||
                                                       nvl(TRIM(t.ref_val_max_str), t.ref_val_max)),
                                                       ' - ',
                                                       NULL,
                                                       nvl(TRIM(t.ref_val_min_str), t.ref_val_min) || ' - ' ||
                                                       nvl(TRIM(t.ref_val_max_str), t.ref_val_max) || ' ' ||
                                                       nvl(t.desc_unit_measure,
                                                           pk_translation.get_translation(i_lang,
                                                                                          'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                          t.id_unit_measure)))))
                                END ref_range,
                               CASE
                                    WHEN t.id_analysis_result_count > 1 THEN
                                     NULL
                                    ELSE
                                     decode(dbms_lob.getlength(t.parameter_notes),
                                            NULL,
                                            decode(dbms_lob.getlength(t.interface_notes),
                                                   NULL,
                                                   '',
                                                   to_char(t.interface_notes)),
                                            to_char(t.parameter_notes))
                                END parameter_notes,
                               CASE
                                    WHEN t.id_analysis_result_count > 1 THEN
                                     NULL
                                    ELSE
                                     decode(t.laboratory_short_desc, NULL, NULL, t.laboratory_short_desc)
                                END desc_lab,
                               decode(t.flg_result_origin,
                                      NULL,
                                      NULL,
                                      pk_sysdomain.get_domain(i_lang,
                                                              i_prof,
                                                              'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                              t.flg_result_origin,
                                                              NULL)) result_origin,
                               decode(t.result_origin_notes, NULL, NULL, t.result_origin_notes) result_origin_notes,
                               CASE
                                    WHEN t.id_analysis_result_count > 1 THEN
                                     NULL
                                    ELSE
                                     decode(t.flg_relevant,
                                            NULL,
                                            NULL,
                                            pk_sysdomain.get_domain(i_lang,
                                                                    i_prof,
                                                                    'ANALYSIS_RESULT_PAR.FLG_RELEVANT',
                                                                    t.flg_relevant,
                                                                    NULL))
                                END desc_relevant,
                               decode(dbms_lob.getlength(t.notes_doctor_registry),
                                      NULL,
                                      '',
                                      to_char(t.notes_doctor_registry)) review_notes,
                               pk_prof_utils.get_name_signature(i_lang, i_prof, t.id_professional) ||
                               decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       t.id_professional,
                                                                       nvl(t.dt_analysis_result_par_upd,
                                                                           t.dt_analysis_result_tstz),
                                                                       t.id_episode),
                                      NULL,
                                      '; ',
                                      ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                               i_prof,
                                                                               t.id_professional,
                                                                               nvl(t.dt_analysis_result_par_upd,
                                                                                   t.dt_analysis_result_tstz),
                                                                               t.id_episode) || '); ') ||
                               pk_date_utils.date_char_tsz(i_lang,
                                                           nvl(t.dt_analysis_result_par_upd, t.dt_analysis_result_tstz),
                                                           i_prof.institution,
                                                           i_prof.software) registry,
                               ' ' white_line
                          FROM TABLE(l_tbl_detail) t) unpivot include NULLS(data_source_val FOR data_source IN(action,
                                                                                                               desc_analysis,
                                                                                                               desc_parameter,
                                                                                                               dt_harvest,
                                                                                                               RESULT,
                                                                                                               dt_result,
                                                                                                               result_notes,
                                                                                                               desc_reflex_analysis,
                                                                                                               desc_status,
                                                                                                               ref_range,
                                                                                                               parameter_notes,
                                                                                                               desc_lab,
                                                                                                               result_origin,
                                                                                                               result_origin_notes,
                                                                                                               desc_relevant,
                                                                                                               review_notes,
                                                                                                               registry,
                                                                                                               white_line))) dd
          JOIN dd_block ddb
            ON ddb.area = pk_dynamic_detail.g_area_blood_type
           AND ddb.internal_name = 'RESULT'
           AND ddb.flg_available = pk_alert_constant.g_yes;
    
        RETURN l_tab_dd_block_data;
    
    END tf_dd_block_lab_test_result;

    FUNCTION tf_dd_block_lab_test_res_hist
    (
        i_lang                    IN language.id_language%TYPE,
        i_prof                    IN profissional,
        i_analysis_result         IN analysis_result.id_analysis_result%TYPE,
        i_analysis_parameter      IN analysis_result_par.id_analysis_parameter%TYPE,
        i_analysis_parameter_rank IN PLS_INTEGER
    ) RETURN t_tab_dd_block_data IS
    
        l_tbl_detail t_tbl_lab_test_result_hist;
    
        l_tab_dd_block_data     t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_dd_block_data_aux t_tab_dd_block_data := t_tab_dd_block_data();
    
        l_msg_del sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M106');
    
    BEGIN
    
        l_tbl_detail := pk_lab_tests_core.tf_lab_test_result_hist(i_lang               => i_lang,
                                                                  i_prof               => i_prof,
                                                                  i_analysis_result    => i_analysis_result,
                                                                  i_analysis_parameter => i_analysis_parameter);
        IF l_tbl_detail.exists(1)
        THEN
            FOR i IN l_tbl_detail.first .. l_tbl_detail.last
            LOOP
                l_tab_dd_block_data_aux := t_tab_dd_block_data();
            
                SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                           (i + (i_analysis_parameter_rank * 1000)), --rnk
                                           NULL,
                                           NULL,
                                           ddb.condition_val,
                                           NULL,
                                           NULL,
                                           dd.data_source,
                                           dd.data_source_val,
                                           NULL)
                  BULK COLLECT
                  INTO l_tab_dd_block_data_aux
                  FROM (SELECT data_source, data_source_val
                          FROM (SELECT NULL action,
                                       decode(cnt,
                                              rn,
                                              decode(t.id_arp_parent,
                                                     NULL,
                                                     NULL,
                                                     pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                              i_prof,
                                                                                              pk_lab_tests_constant.g_analysis_alias,
                                                                                              'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                              t.id_analysis_parent,
                                                                                              'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                              t.id_sample_type_parent,
                                                                                              NULL)),
                                              NULL) desc_reflex_analysis,
                                       decode(cnt,
                                              rn,
                                              pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                       i_prof,
                                                                                       pk_lab_tests_constant.g_analysis_alias,
                                                                                       'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                       t.id_analysis,
                                                                                       'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                       t.id_sample_type,
                                                                                       NULL),
                                              NULL) desc_analysis,
                                       decode(cnt,
                                              rn,
                                              pk_lab_tests_utils.get_alias_translation(i_lang,
                                                                                       i_prof,
                                                                                       pk_lab_tests_constant.g_analysis_parameter_alias,
                                                                                       'ANALYSIS_PARAMETER.CODE_ANALYSIS_PARAMETER.' ||
                                                                                       t.id_analysis_parameter,
                                                                                       NULL),
                                              NULL) desc_parameter,
                                       decode(cnt,
                                              rn,
                                              pk_date_utils.date_char_tsz(i_lang,
                                                                          t.dt_harvest_tstz,
                                                                          i_prof.institution,
                                                                          i_prof.software),
                                              NULL) dt_harvest,
                                       decode(cnt,
                                              rn,
                                              decode(nvl(TRIM(to_char(t.desc_analysis_result)), t.analysis_result_value) || ' ' ||
                                                     nvl(t.desc_unit_measure,
                                                         pk_translation.get_translation(i_lang,
                                                                                        'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                        t.id_unit_measure)),
                                                     NULL,
                                                     NULL,
                                                     nvl(TRIM(t.desc_analysis_result), t.analysis_result_value) || ' ' ||
                                                     nvl(t.desc_unit_measure,
                                                         pk_translation.get_translation(i_lang,
                                                                                        'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                        t.id_unit_measure))),
                                              decode(dbms_lob.compare(nvl(TRIM(t.desc_analysis_result),
                                                                          t.analysis_result_value) || ' ' ||
                                                                      nvl(t.desc_unit_measure,
                                                                          pk_translation.get_translation(i_lang,
                                                                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                         t.id_unit_measure)),
                                                                      nvl(TRIM(t.desc_analysis_result_new),
                                                                          t.analysis_result_value_new) || ' ' ||
                                                                      nvl(t.desc_unit_measure_new,
                                                                          pk_translation.get_translation(i_lang,
                                                                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                         t.id_unit_measure_new))),
                                                     0,
                                                     NULL,
                                                     nvl(TRIM(t.desc_analysis_result_new), t.analysis_result_value_new) || ' ' ||
                                                     nvl(t.desc_unit_measure_new,
                                                         pk_translation.get_translation(i_lang,
                                                                                        'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                        t.id_unit_measure_new)))) RESULT,
                                       decode(cnt,
                                              rn,
                                              NULL,
                                              decode(dbms_lob.compare(nvl(TRIM(t.desc_analysis_result),
                                                                          t.analysis_result_value) || ' ' ||
                                                                      nvl(t.desc_unit_measure,
                                                                          pk_translation.get_translation(i_lang,
                                                                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                         t.id_unit_measure)),
                                                                      nvl(TRIM(t.desc_analysis_result_new),
                                                                          t.analysis_result_value_new) || ' ' ||
                                                                      nvl(t.desc_unit_measure_new,
                                                                          pk_translation.get_translation(i_lang,
                                                                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                         t.id_unit_measure_new))),
                                                     0,
                                                     NULL,
                                                     decode(nvl(TRIM(to_char(t.desc_analysis_result)),
                                                                t.analysis_result_value) || ' ' ||
                                                            nvl(t.desc_unit_measure,
                                                                pk_translation.get_translation(i_lang,
                                                                                               'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                               t.id_unit_measure)),
                                                            NULL,
                                                            l_msg_del,
                                                            nvl(TRIM(t.desc_analysis_result), t.analysis_result_value) || ' ' ||
                                                            nvl(t.desc_unit_measure,
                                                                pk_translation.get_translation(i_lang,
                                                                                               'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                               t.id_unit_measure))) ||
                                                     decode(nvl(TRIM(to_char(t.desc_analysis_result_new)),
                                                                t.analysis_result_value_new) || ' ' ||
                                                            nvl(t.desc_unit_measure_new,
                                                                pk_translation.get_translation(i_lang,
                                                                                               'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                               t.id_unit_measure_new)),
                                                            NULL,
                                                            NULL))) result_new,
                                       decode(cnt,
                                              rn,
                                              decode(t.id_result_status,
                                                     NULL,
                                                     NULL,
                                                     pk_translation.get_translation(i_lang,
                                                                                    'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                                    t.id_result_status)),
                                              decode(t.id_result_status,
                                                     t.id_result_status_new,
                                                     NULL,
                                                     decode(t.id_result_status_new,
                                                            NULL,
                                                            NULL,
                                                            pk_translation.get_translation(i_lang,
                                                                                           'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                                           t.id_result_status_new)))) desc_status,
                                       decode(cnt,
                                              rn,
                                              NULL,
                                              decode(t.id_result_status,
                                                     t.id_result_status_new,
                                                     NULL,
                                                     decode(t.id_result_status,
                                                            NULL,
                                                            l_msg_del,
                                                            pk_translation.get_translation(i_lang,
                                                                                           'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                                           t.id_result_status)))) desc_status_new,
                                       CASE
                                            WHEN t.id_analysis_result_count > 1 THEN
                                             NULL
                                            ELSE
                                             decode(cnt,
                                                    rn,
                                                    decode(nvl(t.ref_val,
                                                               decode((nvl(TRIM(t.ref_val_min_str), t.ref_val_min) || ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str), t.ref_val_max)),
                                                                      ' - ',
                                                                      NULL,
                                                                      nvl(TRIM(t.ref_val_min_str), t.ref_val_min) || ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str), t.ref_val_max) || ' ' ||
                                                                      nvl(t.desc_unit_measure,
                                                                          pk_translation.get_translation(i_lang,
                                                                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                         t.id_unit_measure)))),
                                                           NULL,
                                                           NULL,
                                                           nvl(t.ref_val,
                                                               decode((nvl(TRIM(t.ref_val_min_str), t.ref_val_min) || ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str), t.ref_val_max)),
                                                                      ' - ',
                                                                      NULL,
                                                                      nvl(TRIM(t.ref_val_min_str), t.ref_val_min) || ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str), t.ref_val_max) || ' ' ||
                                                                      nvl(t.desc_unit_measure,
                                                                          pk_translation.get_translation(i_lang,
                                                                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                         t.id_unit_measure))))),
                                                    decode(nvl(t.ref_val,
                                                               decode((nvl(TRIM(t.ref_val_min_str), t.ref_val_min) || ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str), t.ref_val_max)),
                                                                      ' - ',
                                                                      NULL,
                                                                      nvl(TRIM(t.ref_val_min_str), t.ref_val_min) || ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str), t.ref_val_max) || ' ' ||
                                                                      nvl(t.desc_unit_measure,
                                                                          pk_translation.get_translation(i_lang,
                                                                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                         t.id_unit_measure)))),
                                                           nvl(t.ref_val_new,
                                                               decode((nvl(TRIM(t.ref_val_min_str_new), t.ref_val_min_new) ||
                                                                      ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str_new), t.ref_val_max_new)),
                                                                      ' - ',
                                                                      NULL,
                                                                      nvl(TRIM(t.ref_val_min_str_new), t.ref_val_min_new) ||
                                                                      ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str_new), t.ref_val_max_new) || ' ' ||
                                                                      nvl(t.desc_unit_measure_new,
                                                                          pk_translation.get_translation(i_lang,
                                                                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                         t.id_unit_measure_new)))),
                                                           NULL,
                                                           nvl(t.ref_val_new,
                                                               decode((nvl(TRIM(t.ref_val_min_str_new), t.ref_val_min_new) ||
                                                                      ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str_new), t.ref_val_max_new)),
                                                                      ' - ',
                                                                      NULL,
                                                                      nvl(TRIM(t.ref_val_min_str_new), t.ref_val_min_new) ||
                                                                      ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str_new), t.ref_val_max_new) || ' ' ||
                                                                      nvl(t.desc_unit_measure_new,
                                                                          pk_translation.get_translation(i_lang,
                                                                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                         t.id_unit_measure_new))))))
                                        
                                        END ref_range,
                                       CASE
                                            WHEN t.id_analysis_result_count > 1 THEN
                                             NULL
                                            ELSE
                                             decode(cnt,
                                                    rn,
                                                    NULL,
                                                    decode(nvl(t.ref_val,
                                                               decode((nvl(TRIM(t.ref_val_min_str), t.ref_val_min) || ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str), t.ref_val_max)),
                                                                      ' - ',
                                                                      NULL,
                                                                      nvl(TRIM(t.ref_val_min_str), t.ref_val_min) || ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str), t.ref_val_max) || ' ' ||
                                                                      nvl(t.desc_unit_measure,
                                                                          pk_translation.get_translation(i_lang,
                                                                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                         t.id_unit_measure)))),
                                                           nvl(t.ref_val_new,
                                                               decode((nvl(TRIM(t.ref_val_min_str_new), t.ref_val_min_new) ||
                                                                      ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str_new), t.ref_val_max_new)),
                                                                      ' - ',
                                                                      NULL,
                                                                      nvl(TRIM(t.ref_val_min_str_new), t.ref_val_min_new) ||
                                                                      ' - ' ||
                                                                      nvl(TRIM(t.ref_val_max_str_new), t.ref_val_max_new) || ' ' ||
                                                                      nvl(t.desc_unit_measure_new,
                                                                          pk_translation.get_translation(i_lang,
                                                                                                         'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                         t.id_unit_measure_new)))),
                                                           NULL,
                                                           decode(nvl(t.ref_val,
                                                                      decode((nvl(TRIM(t.ref_val_min_str), t.ref_val_min) ||
                                                                             ' - ' ||
                                                                             nvl(TRIM(t.ref_val_max_str), t.ref_val_max)),
                                                                             ' - ',
                                                                             NULL,
                                                                             nvl(TRIM(t.ref_val_min_str), t.ref_val_min) ||
                                                                             ' - ' ||
                                                                             nvl(TRIM(t.ref_val_max_str), t.ref_val_max) || ' ' ||
                                                                             nvl(t.desc_unit_measure,
                                                                                 pk_translation.get_translation(i_lang,
                                                                                                                'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                                t.id_unit_measure)))),
                                                                  NULL,
                                                                  l_msg_del,
                                                                  nvl(t.ref_val,
                                                                      decode((nvl(TRIM(t.ref_val_min_str), t.ref_val_min) ||
                                                                             ' - ' ||
                                                                             nvl(TRIM(t.ref_val_max_str), t.ref_val_max)),
                                                                             ' - ',
                                                                             NULL,
                                                                             nvl(TRIM(t.ref_val_min_str), t.ref_val_min) ||
                                                                             ' - ' ||
                                                                             nvl(TRIM(t.ref_val_max_str), t.ref_val_max) || ' ' ||
                                                                             nvl(t.desc_unit_measure,
                                                                                 pk_translation.get_translation(i_lang,
                                                                                                                'UNIT_MEASURE.CODE_UNIT_MEASURE.' ||
                                                                                                                t.id_unit_measure)))))))
                                        END ref_range_new,
                                       CASE
                                            WHEN t.id_analysis_result_count > 1 THEN
                                             NULL
                                            ELSE
                                             decode(cnt,
                                                    rn,
                                                    decode(dbms_lob.getlength(t.parameter_notes),
                                                           NULL,
                                                           decode(dbms_lob.getlength(t.interface_notes),
                                                                  NULL,
                                                                  '',
                                                                  to_char(t.interface_notes),
                                                                  t.parameter_notes),
                                                           t.parameter_notes),
                                                    decode(to_char(t.parameter_notes),
                                                           to_char(t.parameter_notes_new),
                                                           decode(to_char(t.interface_notes),
                                                                  to_char(t.interface_notes_new),
                                                                  NULL,
                                                                  decode(to_char(t.interface_notes_new),
                                                                         NULL,
                                                                         '',
                                                                         to_char(t.interface_notes_new)),
                                                                  decode(to_char(t.parameter_notes_new),
                                                                         NULL,
                                                                         NULL,
                                                                         to_char(t.parameter_notes_new))),
                                                           to_char(t.parameter_notes_new)))
                                        END parameter_notes,
                                       CASE
                                            WHEN t.id_analysis_result_count > 1 THEN
                                             NULL
                                            ELSE
                                             decode(cnt,
                                                    rn,
                                                    NULL,
                                                    
                                                    decode(to_char(t.parameter_notes),
                                                           to_char(t.parameter_notes_new),
                                                           decode(to_char(t.interface_notes),
                                                                  to_char(t.interface_notes_new),
                                                                  NULL,
                                                                  decode(to_char(t.interface_notes),
                                                                         NULL,
                                                                         l_msg_del,
                                                                         to_char(t.interface_notes))),
                                                           decode(to_char(t.parameter_notes),
                                                                  NULL,
                                                                  l_msg_del,
                                                                  to_char(t.parameter_notes))))
                                        END parameter_notes_new,
                                       CASE
                                            WHEN t.id_analysis_result_count > 1 THEN
                                             NULL
                                            ELSE
                                             decode(cnt,
                                                    rn,
                                                    decode(t.laboratory_short_desc, NULL, NULL, t.laboratory_short_desc),
                                                    
                                                    decode(t.laboratory_short_desc,
                                                           t.laboratory_short_desc_new,
                                                           NULL,
                                                           decode(t.laboratory_short_desc_new,
                                                                  NULL,
                                                                  NULL,
                                                                  t.laboratory_short_desc_new)))
                                        END desc_lab,
                                       CASE
                                            WHEN t.id_analysis_result_count > 1 THEN
                                             NULL
                                            ELSE
                                             decode(cnt,
                                                    rn,
                                                    NULL,
                                                    decode(t.laboratory_short_desc,
                                                           t.laboratory_short_desc_new,
                                                           NULL,
                                                           decode(t.laboratory_short_desc,
                                                                  NULL,
                                                                  l_msg_del,
                                                                  t.laboratory_short_desc)))
                                        END desc_lab_new,
                                       decode(cnt,
                                              rn,
                                              decode(t.dt_analysis_result_tstz,
                                                     NULL,
                                                     NULL,
                                                     pk_date_utils.date_char_tsz(i_lang,
                                                                                 t.dt_analysis_result_tstz,
                                                                                 i_prof.institution,
                                                                                 i_prof.software)),
                                              decode(t.dt_analysis_result_tstz,
                                                     t.dt_analysis_result_tstz_new,
                                                     NULL,
                                                     decode(t.dt_analysis_result_tstz_new,
                                                            NULL,
                                                            NULL,
                                                            pk_date_utils.date_char_tsz(i_lang,
                                                                                        t.dt_analysis_result_tstz_new,
                                                                                        i_prof.institution,
                                                                                        i_prof.software)))) dt_result,
                                       decode(cnt,
                                              rn,
                                              NULL,
                                              decode(t.dt_analysis_result_tstz,
                                                     t.dt_analysis_result_tstz_new,
                                                     NULL,
                                                     decode(t.dt_analysis_result_tstz,
                                                            NULL,
                                                            l_msg_del,
                                                            pk_date_utils.date_char_tsz(i_lang,
                                                                                        t.dt_analysis_result_tstz,
                                                                                        i_prof.institution,
                                                                                        i_prof.software)))) dt_result_new,
                                       decode(cnt,
                                              rn,
                                              decode(t.flg_result_origin,
                                                     NULL,
                                                     NULL,
                                                     pk_sysdomain.get_domain(i_lang,
                                                                             i_prof,
                                                                             'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                                             t.flg_result_origin,
                                                                             NULL)),
                                              
                                              decode(t.flg_result_origin,
                                                     t.flg_result_origin_new,
                                                     NULL,
                                                     decode(t.flg_result_origin_new,
                                                            NULL,
                                                            NULL,
                                                            pk_sysdomain.get_domain(i_lang,
                                                                                    i_prof,
                                                                                    'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                                                    t.flg_result_origin_new,
                                                                                    NULL)))) result_origin,
                                       decode(cnt,
                                              rn,
                                              NULL,
                                              decode(t.flg_result_origin,
                                                     t.flg_result_origin_new,
                                                     NULL,
                                                     decode(t.flg_result_origin,
                                                            NULL,
                                                            l_msg_del,
                                                            pk_sysdomain.get_domain(i_lang,
                                                                                    i_prof,
                                                                                    'ANALYSIS_RESULT.FLG_RESULT_ORIGIN',
                                                                                    t.flg_result_origin,
                                                                                    NULL)))) result_origin_new,
                                       decode(cnt,
                                              rn,
                                              decode(t.result_origin_notes, NULL, NULL, t.result_origin_notes),
                                              decode(t.result_origin_notes,
                                                     t.result_origin_notes_new,
                                                     NULL,
                                                     decode(t.result_origin_notes_new,
                                                            NULL,
                                                            NULL,
                                                            t.result_origin_notes_new))) result_origin_notes,
                                       decode(cnt,
                                              rn,
                                              NULL,
                                              decode(t.result_origin_notes,
                                                     t.result_origin_notes_new,
                                                     NULL,
                                                     decode(t.result_origin_notes, NULL, l_msg_del, t.result_origin_notes))) result_origin_notes_new,
                                       decode(cnt,
                                              rn,
                                              decode(t.result_notes, NULL, NULL, t.result_notes),
                                              decode(t.result_notes,
                                                     t.result_notes_new,
                                                     NULL,
                                                     decode(t.result_notes_new, NULL, NULL, t.result_notes_new))) result_notes,
                                       decode(cnt,
                                              rn,
                                              NULL,
                                              decode(t.result_notes,
                                                     t.result_notes_new,
                                                     NULL,
                                                     decode(t.result_notes, NULL, l_msg_del, t.result_notes))) result_notes_new,
                                       CASE
                                            WHEN t.id_analysis_result_count > 1 THEN
                                             NULL
                                            ELSE
                                             decode(cnt,
                                                    rn,
                                                    decode(t.flg_relevant,
                                                           NULL,
                                                           NULL,
                                                           pk_sysdomain.get_domain(i_lang,
                                                                                   i_prof,
                                                                                   'ANALYSIS_RESULT_PAR.FLG_RELEVANT',
                                                                                   t.flg_relevant,
                                                                                   NULL)))
                                        END desc_relevant,
                                       CASE
                                            WHEN t.id_analysis_result_count > 1 THEN
                                             NULL
                                            ELSE
                                             decode(cnt,
                                                    rn,
                                                    NULL,
                                                    decode(t.flg_relevant,
                                                           t.flg_relevant_new,
                                                           NULL,
                                                           decode(t.flg_relevant,
                                                                  NULL,
                                                                  l_msg_del,
                                                                  pk_sysdomain.get_domain(i_lang,
                                                                                          i_prof,
                                                                                          'ANALYSIS_RESULT_PAR.FLG_RELEVANT',
                                                                                          t.flg_relevant,
                                                                                          NULL))))
                                        END desc_relevant_new,
                                       decode(cnt, rn, decode(t.review_notes, t.review_notes_new, NULL, t.review_notes)) review_notes,
                                       decode(cnt, rn, NULL, decode(t.review_notes, NULL, NULL, t.review_notes)) review_notes_new,
                                       decode(cnt,
                                              rn,
                                              pk_prof_utils.get_name_signature(i_lang, i_prof, t.id_professional) ||
                                              decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                                      i_prof,
                                                                                      t.id_professional,
                                                                                      t.dt_analysis_result_tstz,
                                                                                      t.id_episode),
                                                     NULL,
                                                     '; ',
                                                     ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                                              i_prof,
                                                                                              t.id_professional,
                                                                                              t.dt_analysis_result_tstz,
                                                                                              t.id_episode) || '); ') ||
                                              pk_date_utils.date_char_tsz(i_lang,
                                                                          t.dt_analysis_result_tstz,
                                                                          i_prof.institution,
                                                                          i_prof.software),
                                              
                                              pk_prof_utils.get_name_signature(i_lang, i_prof, t.id_professional_upd) ||
                                              decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                                      i_prof,
                                                                                      t.id_professional_upd,
                                                                                      t.dt_analysis_result_par_upd,
                                                                                      t.id_episode),
                                                     NULL,
                                                     '; ',
                                                     ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                                              i_prof,
                                                                                              t.id_professional_upd,
                                                                                              t.dt_analysis_result_par_upd,
                                                                                              t.id_episode) || '); ') ||
                                              pk_date_utils.date_char_tsz(i_lang,
                                                                          t.dt_analysis_result_par_upd,
                                                                          i_prof.institution,
                                                                          i_prof.software)) registry
                                  FROM TABLE(l_tbl_detail) t
                                 WHERE t.rn = i) unpivot include NULLS(data_source_val FOR data_source IN(action,
                                                                                                          desc_analysis,
                                                                                                          desc_parameter,
                                                                                                          dt_harvest,
                                                                                                          RESULT,
                                                                                                          result_new,
                                                                                                          desc_status,
                                                                                                          desc_status_new,
                                                                                                          parameter_notes,
                                                                                                          parameter_notes_new,
                                                                                                          desc_lab,
                                                                                                          desc_lab_new,
                                                                                                          dt_result,
                                                                                                          dt_result_new,
                                                                                                          result_origin,
                                                                                                          result_origin_new,
                                                                                                          result_origin_notes,
                                                                                                          result_origin_notes_new,
                                                                                                          result_notes,
                                                                                                          result_notes_new,
                                                                                                          desc_relevant,
                                                                                                          desc_relevant_new,
                                                                                                          review_notes,
                                                                                                          review_notes_new,
                                                                                                          ref_range,
                                                                                                          ref_range_new,
                                                                                                          registry))) dd
                  JOIN dd_block ddb
                    ON ddb.area = pk_dynamic_detail.g_area_blood_type
                   AND ddb.internal_name = 'RESULT'
                   AND ddb.flg_available = pk_alert_constant.g_yes;
            
                FOR j IN l_tab_dd_block_data_aux.first .. l_tab_dd_block_data_aux.last
                LOOP
                    l_tab_dd_block_data.extend();
                    l_tab_dd_block_data(l_tab_dd_block_data.count) := l_tab_dd_block_data_aux(j);
                END LOOP;
            END LOOP;
        END IF;
    
        RETURN l_tab_dd_block_data;
    
    END tf_dd_block_lab_test_res_hist;

    FUNCTION get_lab_test_result_detail
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_analysis_result IN analysis_result.id_analysis_result%TYPE,
        o_detail          OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_tab_dd_block_data_aux t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_dd_block_data     t_tab_dd_block_data := t_tab_dd_block_data();
    
        l_tab_dd_data      t_tab_dd_data := t_tab_dd_data();
        l_data_source_list table_varchar := table_varchar();
    
        l_tbl_analysis_parameter table_number;
    
    BEGIN
    
        SELECT arp.id_analysis_parameter
          BULK COLLECT
          INTO l_tbl_analysis_parameter
          FROM analysis_result_par arp
          JOIN analysis_result ar
            ON ar.id_analysis_result = arp.id_analysis_result
         WHERE arp.id_analysis_result = i_analysis_result
         ORDER BY pk_lab_tests_utils.get_lab_test_parameter_rank(i_lang,
                                                                 i_prof,
                                                                 ar.id_analysis,
                                                                 ar.id_sample_type,
                                                                 arp.id_analysis_parameter) ASC;
    
        FOR i IN l_tbl_analysis_parameter.first .. l_tbl_analysis_parameter.last
        LOOP
            l_tab_dd_block_data_aux := t_tab_dd_block_data();
            l_tab_dd_block_data_aux := tf_dd_block_lab_test_result(i_lang                    => i_lang,
                                                                   i_prof                    => i_prof,
                                                                   i_analysis_result         => i_analysis_result,
                                                                   i_analysis_parameter      => l_tbl_analysis_parameter(i),
                                                                   i_analysis_parameter_rank => i);
        
            FOR j IN l_tab_dd_block_data_aux.first .. l_tab_dd_block_data_aux.last
            LOOP
                l_tab_dd_block_data.extend();
                l_tab_dd_block_data(l_tab_dd_block_data.count) := l_tab_dd_block_data_aux(j);
            END LOOP;
        END LOOP;
    
        SELECT t_rec_dd_data(CASE
                                  WHEN data_code_message IS NOT NULL
                                       AND flg_type <> 'L3CQ' THEN
                                   pk_message.get_message(i_lang, data_code_message)
                                  WHEN flg_type = 'L3CQ' THEN
                                   data_code_message
                                  ELSE
                                   NULL
                              END, --descr
                              CASE
                                  WHEN flg_type = 'L1' THEN
                                   NULL
                                  ELSE
                                   data_source_val
                              END, --val
                              decode(flg_type, 'L3CQ', 'L3B', flg_type),
                              flg_html,
                              NULL,
                              flg_clob), --type
               data_source
          BULK COLLECT
          INTO l_tab_dd_data, l_data_source_list
          FROM (SELECT ddc.data_code_message,
                       flg_type,
                       data_source_val,
                       ddc.data_source,
                       db.rnk,
                       ddc.rank,
                       db.id_dd_block,
                       0 rank_cq,
                       flg_html,
                       flg_clob
                  FROM TABLE(l_tab_dd_block_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = pk_dynamic_detail.g_area_blood_type
                 WHERE ddc.id_dd_block = db.id_dd_block
                 ORDER BY db.rnk, ddc.rank) t
         WHERE (t.data_source_val IS NOT NULL /*OR t.flg_type IN ('L2B')*/
               OR (t.flg_type IN ('L1') AND rownum = 1));
    
        OPEN o_detail FOR
            SELECT descr, val, flg_type, flg_html, val_clob, flg_clob
              FROM (SELECT CASE
                                WHEN d.val IS NULL THEN
                                 d.descr
                                WHEN d.descr IS NULL THEN
                                 NULL
                                ELSE
                                 d.descr || ' '
                            END descr,
                           d.val,
                           d.flg_type,
                           flg_html,
                           val_clob,
                           flg_clob,
                           d.rn
                      FROM (SELECT rownum rn, descr, val, flg_type, flg_html, val_clob, flg_clob
                              FROM TABLE(l_tab_dd_data)) d
                      JOIN (SELECT rownum rn, column_value data_source
                             FROM TABLE(l_data_source_list)) ds
                        ON ds.rn = d.rn)
             ORDER BY rn;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_RESULT_DETAIL',
                                              o_error);
            pk_types.open_my_cursor(o_detail);
            RETURN FALSE;
    END get_lab_test_result_detail;

    FUNCTION get_lab_test_result_det_hist
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_analysis_result IN analysis_result.id_analysis_result%TYPE,
        o_detail          OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_tab_dd_block_data_aux t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_dd_block_data     t_tab_dd_block_data := t_tab_dd_block_data();
    
        l_tab_dd_data      t_tab_dd_data := t_tab_dd_data();
        l_data_source_list table_varchar := table_varchar();
    
        l_tbl_analysis_parameter table_number;
    
    BEGIN
    
        SELECT arp.id_analysis_parameter
          BULK COLLECT
          INTO l_tbl_analysis_parameter
          FROM analysis_result_par arp
          JOIN analysis_result ar
            ON ar.id_analysis_result = arp.id_analysis_result
         WHERE arp.id_analysis_result = i_analysis_result
         ORDER BY pk_lab_tests_utils.get_lab_test_parameter_rank(i_lang,
                                                                 i_prof,
                                                                 ar.id_analysis,
                                                                 ar.id_sample_type,
                                                                 arp.id_analysis_parameter) ASC;
    
        FOR i IN l_tbl_analysis_parameter.first .. l_tbl_analysis_parameter.last
        LOOP
            l_tab_dd_block_data_aux := t_tab_dd_block_data();
            l_tab_dd_block_data_aux := tf_dd_block_lab_test_res_hist(i_lang                    => i_lang,
                                                                     i_prof                    => i_prof,
                                                                     i_analysis_result         => i_analysis_result,
                                                                     i_analysis_parameter      => l_tbl_analysis_parameter(i),
                                                                     i_analysis_parameter_rank => i);
        
            FOR j IN l_tab_dd_block_data_aux.first .. l_tab_dd_block_data_aux.last
            LOOP
                l_tab_dd_block_data.extend();
                l_tab_dd_block_data(l_tab_dd_block_data.count) := l_tab_dd_block_data_aux(j);
            END LOOP;
        END LOOP;
    
        SELECT t_rec_dd_data(CASE
                                  WHEN data_code_message IS NOT NULL
                                       AND flg_type <> 'L3CQ' THEN
                                   pk_message.get_message(i_lang, data_code_message)
                                  WHEN flg_type = 'L3CQ' THEN
                                   data_code_message
                                  ELSE
                                   NULL
                              END, --descr
                              CASE
                                  WHEN flg_type = 'L1' THEN
                                   NULL
                                  ELSE
                                   data_source_val
                              END, --val
                              decode(flg_type, 'L3CQ', 'L3B', flg_type), --type
                              flg_html,
                              NULL,
                              flg_clob),
               data_source
          BULK COLLECT
          INTO l_tab_dd_data, l_data_source_list
          FROM (SELECT *
                  FROM (SELECT ddc.data_code_message,
                               flg_type,
                               data_source_val,
                               ddc.data_source,
                               db.rnk,
                               ddc.rank,
                               db.id_dd_block,
                               0 rank_cq,
                               flg_html,
                               flg_clob
                          FROM TABLE(l_tab_dd_block_data) db
                          JOIN dd_content ddc
                            ON ddc.data_source = db.data_source
                           AND ddc.flg_available = pk_alert_constant.g_yes
                           AND ddc.area = pk_dynamic_detail.g_area_blood_type
                         WHERE ddc.id_dd_block = db.id_dd_block
                           AND (data_source_val IS NOT NULL)
                            OR (flg_type IN ('L1') AND rownum = 1))
                UNION ALL --White lines
                SELECT ddc.data_code_message,
                       ddc.flg_type,
                       NULL                  data_source_val,
                       ddc.data_source,
                       t.rnk,
                       ddc.rank,
                       NULL                  id_dd_block,
                       0                     rank_cq,
                       flg_html,
                       flg_clob
                  FROM dd_content ddc
                  JOIN dd_block ddb
                    ON ddb.id_dd_block = ddc.id_dd_block
                   AND ddb.area = pk_dynamic_detail.g_area_blood_type
                  JOIN (SELECT DISTINCT id_dd_block, rnk --Join to show 'new lines' only for blocks that are available
                         FROM TABLE(l_tab_dd_block_data)
                        WHERE data_source_val IS NOT NULL) t
                    ON t.id_dd_block = ddb.id_dd_block
                 WHERE ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = pk_dynamic_detail.g_area_blood_type
                   AND ddc.flg_type = 'WL')
         ORDER BY rnk, rank;
    
        OPEN o_detail FOR
            SELECT descr, val, flg_type, flg_html, val_clob, flg_clob
              FROM (SELECT CASE
                                WHEN d.val IS NULL THEN
                                 d.descr
                                WHEN d.descr IS NULL THEN
                                 NULL
                                ELSE
                                 d.descr || ' '
                            END descr,
                           d.val,
                           d.flg_type,
                           flg_html,
                           val_clob,
                           flg_clob,
                           d.rn
                      FROM (SELECT rownum rn, descr, val, flg_type, flg_html, val_clob, flg_clob
                              FROM TABLE(l_tab_dd_data)) d
                      JOIN (SELECT rownum rn, column_value data_source
                             FROM TABLE(l_data_source_list)) ds
                        ON ds.rn = d.rn);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_LAB_TEST_RESULT_DETAIL',
                                              o_error);
            pk_types.open_my_cursor(o_detail);
            RETURN FALSE;
    END get_lab_test_result_det_hist;

    FUNCTION tf_get_lab_test_order
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_lab_tests_constant.g_no
    ) RETURN t_tbl_lab_tests_detail IS
    
        TYPE t_code_messages IS TABLE OF VARCHAR2(1000 CHAR) INDEX BY sys_message.code_message%TYPE;
    
        aa_code_messages t_code_messages;
    
        l_msg_reg  sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
        l_msg_date sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAM_REQ_M002');
    
        l_health_insurance sys_config.value%TYPE := pk_sysconfig.get_config('MCDT_HEALTH_INSURANCE', i_prof);
    
        l_ret t_tbl_lab_tests_detail;
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN pk_lab_tests_constant.ga_code_messages_lab_test_detail.first .. pk_lab_tests_constant.ga_code_messages_lab_test_detail.last
        LOOP
            aa_code_messages(pk_lab_tests_constant.ga_code_messages_lab_test_detail(i)) := '<b>' ||
                                                                                           pk_message.get_message(i_lang,
                                                                                                                  i_prof,
                                                                                                                  pk_lab_tests_constant.ga_code_messages_lab_test_detail(i)) ||
                                                                                           '</b> ';
        END LOOP;
    
        g_error := 'OPEN T_LAB_TESTS_DETAIL';
        WITH cso_table AS
         (SELECT *
            FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                i_prof,
                                                                i_episode,
                                                                NULL,
                                                                NULL,
                                                                NULL,
                                                                i_analysis_req_det)))
        SELECT t_lab_tests_detail(id_analysis_req_det,
                                  registry,
                                  desc_analysis,
                                  num_order,
                                  clinical_indication,
                                  diagnosis_notes,
                                  desc_diagnosis,
                                  clinical_purpose,
                                  instructions,
                                  priority,
                                  desc_status,
                                  title_order_set,
                                  task_depend,
                                  desc_time,
                                  desc_time_limit,
                                  order_recurrence,
                                  prn,
                                  notes_prn,
                                  patient_instructions,
                                  fasting,
                                  notes_patient,
                                  collection,
                                  collection_location,
                                  notes_scheduler,
                                  execution,
                                  perform_location,
                                  notes_technician,
                                  notes,
                                  results,
                                  prof_cc,
                                  prof_bcc,
                                  co_sign,
                                  prof_order,
                                  dt_order,
                                  order_type,
                                  co_sign_status,
                                  health_insurance,
                                  financial_entity,
                                  health_plan,
                                  insurance_number,
                                  exemption,
                                  cancellation,
                                  cancel_reason,
                                  cancel_notes,
                                  cancel_prof_order,
                                  cancel_dt_order,
                                  cancel_order_type,
                                  dt_last_update,
                                  dt_ord)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT /*+ opt_estimate(table cso rows=1) opt_estimate(table csc rows=2) */
                 ard.id_analysis_req_det,
                 l_msg_reg || ' ' ||
                 pk_prof_utils.get_name_signature(i_lang,
                                                  i_prof,
                                                  coalesce(ard.id_prof_cancel, ard.id_prof_last_update, ar.id_prof_writes)) ||
                 decode(pk_prof_utils.get_spec_signature(i_lang,
                                                         i_prof,
                                                         coalesce(ard.id_prof_cancel,
                                                                  ard.id_prof_last_update,
                                                                  ar.id_prof_writes),
                                                         coalesce(ard.dt_cancel_tstz,
                                                                  ard.dt_last_update_tstz,
                                                                  ar.dt_req_tstz),
                                                         ar.id_episode),
                        NULL,
                        '; ',
                        ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                 i_prof,
                                                                 coalesce(ard.id_prof_cancel,
                                                                          ard.id_prof_last_update,
                                                                          ar.id_prof_writes),
                                                                 coalesce(ard.dt_cancel_tstz,
                                                                          ard.dt_last_update_tstz,
                                                                          ar.dt_req_tstz),
                                                                 ar.id_episode) || '); ') ||
                 pk_date_utils.date_char_tsz(i_lang,
                                             coalesce(ard.dt_cancel_tstz, ard.dt_last_update_tstz, ar.dt_req_tstz),
                                             i_prof.institution,
                                             i_prof.software) registry,
                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T045'), '') ||
                 pk_lab_tests_utils.get_alias_translation(i_lang,
                                                          i_prof,
                                                          pk_lab_tests_constant.g_analysis_alias,
                                                          'ANALYSIS.CODE_ANALYSIS.' || ard.id_analysis,
                                                          'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' || ard.id_sample_type,
                                                          NULL) desc_analysis,
                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T046'), '') ||
                 ard.id_analysis_req num_order,
                 aa_code_messages('LAB_TESTS_T003') clinical_indication,
                 decode(ard.diagnosis_notes,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T012'), '') ||
                        ard.diagnosis_notes) diagnosis_notes,
                 decode(pk_diagnosis.concat_diag(i_lang, NULL, ard.id_analysis_req_det, NULL, i_prof),
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('COMMON_T062'), '') ||
                        pk_diagnosis.concat_diag(i_lang, NULL, ard.id_analysis_req_det, NULL, i_prof)) desc_diagnosis,
                 decode(ard.id_clinical_purpose,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T013'), '') ||
                        decode(ard.id_clinical_purpose,
                               0,
                               ard.clinical_purpose_notes,
                               pk_translation.get_translation(i_lang,
                                                              'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                              ard.id_clinical_purpose))) clinical_purpose,
                 aa_code_messages('LAB_TESTS_T014') instructions,
                 --ar.flg_time,
                 decode(ard.flg_urgency,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T048'), '') ||
                        pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ_DET.FLG_URGENCY', ard.flg_urgency, NULL)) priority,
                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T047'), '') ||
                 decode(ard.flg_referral,
                        pk_lab_tests_constant.g_flg_referral_r,
                        pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_REFERRAL', ard.flg_referral, i_lang),
                        pk_lab_tests_constant.g_flg_referral_s,
                        pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_REFERRAL', ard.flg_referral, i_lang),
                        pk_lab_tests_constant.g_flg_referral_i,
                        pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_REFERRAL', ard.flg_referral, i_lang),
                        decode(ard.flg_status,
                               pk_lab_tests_constant.g_analysis_sos,
                               pk_sysdomain.get_domain(i_lang,
                                                       i_prof,
                                                       'ANALYSIS_REQ_DET.FLG_STATUS',
                                                       pk_lab_tests_constant.g_analysis_req,
                                                       NULL),
                               pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ_DET.FLG_STATUS', ard.flg_status, NULL))) desc_status,
                 decode(pk_api_order_sets.get_order_set_title(i_lang,
                                                              i_prof,
                                                              ard.id_analysis_req_det,
                                                              pk_order_sets.g_odst_task_analysis),
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T049'), '') ||
                        pk_api_order_sets.get_order_set_title(i_lang,
                                                              i_prof,
                                                              ard.id_analysis_req_det,
                                                              pk_order_sets.g_odst_task_analysis)) title_order_set,
                 decode(pk_tde_db.get_task_depend_str(i_lang, i_prof, ard.id_task_dependency),
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T050'), '') ||
                        pk_tde_db.get_task_depend_str(i_lang, i_prof, ard.id_task_dependency)) task_depend,
                 decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T168'), '') ||
                 pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ_DET.FLG_TIME_HARVEST', ard.flg_time_harvest, NULL) ||
                 decode(ard.dt_target_tstz,
                        NULL,
                        decode(ard.dt_schedule,
                               NULL,
                               '',
                               ' (' || decode(i_flg_report, pk_exam_constant.g_yes, '<b>') ||
                               decode(i_flg_report,
                                      pk_exam_constant.g_yes,
                                      pk_date_utils.date_chr_short_read_tsz(i_lang,
                                                                            ard.dt_schedule,
                                                                            i_prof.institution,
                                                                            i_prof.software),
                                      pk_date_utils.date_char_tsz(i_lang,
                                                                  ard.dt_schedule,
                                                                  i_prof.institution,
                                                                  i_prof.software)) ||
                               decode(i_flg_report, pk_exam_constant.g_yes, '</b> ') || ' - ' || l_msg_date || ')'),
                        ' (' || decode(i_flg_report, pk_exam_constant.g_yes, '<b>') ||
                        decode(i_flg_report,
                               pk_exam_constant.g_yes,
                               pk_date_utils.date_chr_short_read_tsz(i_lang,
                                                                     ard.dt_target_tstz,
                                                                     i_prof.institution,
                                                                     i_prof.software),
                               pk_date_utils.date_char_tsz(i_lang, ard.dt_target_tstz, i_prof.institution, i_prof.software)) ||
                        decode(i_flg_report, pk_exam_constant.g_yes, '</b> ') || ')') desc_time,
                 decode(ard.dt_final_target_tstz,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T043'), '') ||
                        pk_date_utils.date_char_tsz(i_lang, ard.dt_final_target_tstz, i_prof.institution, i_prof.software)) desc_time_limit,
                 decode(ard.id_order_recurrence,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T017'), '') ||
                        pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang, i_prof, ard.id_order_recurrence)) order_recurrence,
                 decode(ard.flg_prn,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T022'), '') ||
                        pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_PRN', ard.flg_prn, i_lang)) prn,
                 decode(dbms_lob.getlength(ard.notes_prn),
                        NULL,
                        to_clob(''),
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T023'), '') ||
                        ard.notes_prn) notes_prn,
                 aa_code_messages('LAB_TESTS_T024') patient_instructions,
                 decode(ard.flg_fasting,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T025'), '') ||
                        pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_FASTING', ard.flg_fasting, i_lang)) fasting,
                 decode(dbms_lob.getlength(ard.notes_patient),
                        NULL,
                        to_clob(''),
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T026'), '') ||
                        ard.notes_patient) notes_patient,
                 aa_code_messages('LAB_TESTS_T027') collection,
                 decode(ard.id_room,
                        NULL,
                        decode(ard.flg_col_inst,
                               NULL,
                               NULL,
                               decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T030'), '') ||
                               pk_sysdomain.get_domain('ANALYSIS_REQ_DET.FLG_COL_INST', ard.flg_col_inst, i_lang)),
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T030'), '') ||
                        nvl((SELECT r.desc_room
                              FROM room r
                             WHERE r.id_room = ard.id_room),
                            pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || ard.id_room))) collection_location,
                 decode(ard.notes_scheduler,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T032'), '') ||
                        ard.notes_scheduler) notes_scheduler,
                 aa_code_messages('LAB_TESTS_T031') execution,
                 decode(ard.id_exec_institution,
                        NULL,
                        decode(ard.id_room_req,
                               NULL,
                               NULL,
                               decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T028'), '') ||
                               nvl((SELECT r.desc_room
                                     FROM room r
                                    WHERE r.id_room = ard.id_room_req),
                                   pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || ard.id_room_req))),
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T028'), '') ||
                        pk_translation.get_translation(i_lang,
                                                       'AB_INSTITUTION.CODE_INSTITUTION.' || ard.id_exec_institution)) perform_location,
                 decode(ard.notes_tech,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T033'), '') ||
                        ard.notes_tech) notes_technician,
                 decode(ard.notes,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T229'), '') ||
                        ard.notes) notes,
                 aa_code_messages('LAB_TESTS_T199') results,
                 decode(ars.prof_cc,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T200'), '') ||
                        ars.prof_cc) prof_cc,
                 decode(ars.prof_bcc,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T201'), '') ||
                        ars.prof_bcc) prof_bcc,
                 aa_code_messages('LAB_TESTS_T038') co_sign,
                 decode(cso.desc_prof_ordered_by,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T053'), '') ||
                        cso.desc_prof_ordered_by) prof_order,
                 decode(cso.dt_ordered_by,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T054'), '') ||
                        pk_date_utils.date_char_tsz(i_lang, cso.dt_ordered_by, i_prof.institution, i_prof.software)) dt_order,
                 decode(cso.id_order_type,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T055'), '') ||
                        cso.desc_order_type) order_type,
                 cso.desc_status co_sign_status,
                 aa_code_messages('LAB_TESTS_T034') health_insurance,
                 --ard.id_pat_health_plan,
                 decode(l_health_insurance,
                        pk_lab_tests_constant.g_no,
                        NULL,
                        decode(ard.id_pat_health_plan,
                               NULL,
                               NULL,
                               decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T035'), '') ||
                               pk_adt.get_pat_health_plan_info(i_lang, i_prof, ard.id_pat_health_plan, 'F'))) financial_entity,
                 decode(l_health_insurance,
                        pk_lab_tests_constant.g_no,
                        NULL,
                        decode(ard.id_pat_health_plan,
                               NULL,
                               NULL,
                               decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T036'), '') ||
                               pk_adt.get_pat_health_plan_info(i_lang, i_prof, ard.id_pat_health_plan, 'H'))) health_plan,
                 decode(l_health_insurance,
                        pk_lab_tests_constant.g_no,
                        NULL,
                        decode(ard.id_pat_health_plan,
                               NULL,
                               NULL,
                               decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T037'), '') ||
                               pk_adt.get_pat_health_plan_info(i_lang, i_prof, ard.id_pat_health_plan, 'N'))) insurance_number,
                 decode(l_health_insurance,
                        pk_lab_tests_constant.g_no,
                        NULL,
                        decode(ard.id_pat_exemption,
                               NULL,
                               NULL,
                               decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T185'), '') ||
                               pk_adt.get_pat_exemption_detail(i_lang, i_prof, ard.id_pat_exemption))) exemption,
                 CASE
                      WHEN ard.flg_status = pk_lab_tests_constant.g_analysis_read
                           AND ard.id_cancel_reason IS NOT NULL THEN
                       aa_code_messages('COMMON_M035')
                      ELSE
                       aa_code_messages('LAB_TESTS_T227')
                  END cancellation,
                 decode(ard.id_cancel_reason,
                         NULL,
                         NULL,
                         decode(i_flg_report,
                                pk_lab_tests_constant.g_no,
                                CASE
                                    WHEN ard.flg_status = pk_lab_tests_constant.g_analysis_read
                                         AND ard.id_cancel_reason IS NOT NULL THEN
                                     aa_code_messages('LAB_TESTS_T237')
                                    ELSE
                                     aa_code_messages('LAB_TESTS_T062')
                                END,
                                '') || pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, ard.id_cancel_reason)) cancel_reason,
                 decode(ard.notes_cancel,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T061'), '') ||
                        ard.notes_cancel) cancel_notes,
                 decode(csc.desc_prof_ordered_by,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T053'), '') ||
                        csc.desc_prof_ordered_by) cancel_prof_order,
                 decode(csc.dt_ordered_by,
                        NULL,
                        NULL,
                        decode(i_flg_report,
                               pk_lab_tests_constant.g_no,
                               aa_code_messages('LAB_TESTS_T054') ||
                               pk_date_utils.date_char_tsz(i_lang, csc.dt_ordered_by, i_prof.institution, i_prof.software),
                               pk_date_utils.date_char_tsz(i_lang, csc.dt_ordered_by, i_prof.institution, i_prof.software))) cancel_dt_order,
                 decode(csc.id_order_type,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_lab_tests_constant.g_no, aa_code_messages('LAB_TESTS_T055'), '') ||
                        csc.desc_order_type) cancel_order_type,
                 NULL dt_last_update,
                 pk_date_utils.date_send_tsz(i_lang,
                                             coalesce(ard.dt_cancel_tstz, ard.dt_last_update_tstz, ar.dt_req_tstz),
                                             i_prof) dt_ord
                  FROM analysis_req_det ard,
                       analysis_req ar,
                       (SELECT id_analysis_req_det,
                               REPLACE(decode(prof_cc,
                                              NULL,
                                              email_prof_cc,
                                              decode(email_prof_cc, NULL, prof_cc, prof_cc || '; ' || email_prof_cc)),
                                       '@',
                                       '&#64;') prof_cc,
                               REPLACE(decode(prof_bcc,
                                              NULL,
                                              email_prof_bcc,
                                              decode(email_prof_bcc, NULL, prof_bcc, prof_bcc || '; ' || email_prof_bcc)),
                                       '@',
                                       '&#64;') prof_bcc
                          FROM (SELECT ars.id_analysis_req_det,
                                       substr(concatenate(pk_prof_utils.get_name_signature(i_lang, i_prof, ars.id_prof_cc) ||
                                                          nvl2(ars.id_prof_cc, '; ', '')),
                                              1,
                                              length(concatenate(pk_prof_utils.get_name_signature(i_lang,
                                                                                                  i_prof,
                                                                                                  ars.id_prof_cc) ||
                                                                 nvl2(ars.id_prof_cc, '; ', ''))) - 2) prof_cc,
                                       substr(concatenate(ars.email_cc || nvl2(ars.email_cc, '; ', '')),
                                              1,
                                              length(concatenate(ars.email_cc || nvl2(ars.email_cc, '; ', ''))) - 2) email_prof_cc,
                                       substr(concatenate(pk_prof_utils.get_name_signature(i_lang, i_prof, ars.id_prof_bcc) ||
                                                          nvl2(ars.id_prof_bcc, '; ', '')),
                                              1,
                                              length(concatenate(pk_prof_utils.get_name_signature(i_lang,
                                                                                                  i_prof,
                                                                                                  ars.id_prof_bcc) ||
                                                                 nvl2(ars.id_prof_bcc, '; ', ''))) - 2) prof_bcc,
                                       substr(concatenate(ars.email_bcc || nvl2(ars.email_bcc, '; ', '')),
                                              1,
                                              length(concatenate(ars.email_bcc || nvl2(ars.email_bcc, '; ', ''))) - 2) email_prof_bcc
                                  FROM analysis_result_send ars
                                 WHERE ars.id_analysis_req_det = i_analysis_req_det
                                   AND ars.flg_status != pk_lab_tests_constant.g_analysis_cancel
                                 GROUP BY ars.id_analysis_req_det)) ars,
                       cso_table cso,
                       cso_table csc
                 WHERE ard.id_analysis_req_det = i_analysis_req_det
                   AND ard.id_analysis_req = ar.id_analysis_req
                   AND ard.id_analysis_req_det = ars.id_analysis_req_det(+)
                   AND ard.id_co_sign_order = cso.id_co_sign_hist(+)
                   AND ard.id_co_sign_cancel = csc.id_co_sign_hist(+));
    
        RETURN l_ret;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_lab_tests_detail();
    END tf_get_lab_test_order;

    FUNCTION tf_get_lab_test_req
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_analysis_req IN analysis_req.id_analysis_req%TYPE,
        i_flg_report   IN VARCHAR2 DEFAULT pk_alert_constant.g_no
    ) RETURN t_tbl_lab_test_order_detail IS
    
        TYPE t_code_messages IS TABLE OF VARCHAR2(1000 CHAR) INDEX BY sys_message.code_message%TYPE;
    
        aa_code_messages t_code_messages;
    
        va_code_messages table_varchar := table_varchar('LAB_TESTS_T046',
                                                        'LAB_TESTS_T048',
                                                        'LAB_TESTS_T047',
                                                        'LAB_TESTS_T168',
                                                        'LAB_TESTS_T045',
                                                        'LAB_TESTS_T090',
                                                        'LAB_TESTS_T062',
                                                        'LAB_TESTS_T061',
                                                        'LAB_TESTS_T091',
                                                        'LAB_TESTS_T092',
                                                        'LAB_TESTS_T108',
                                                        'LAB_TESTS_T093');
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
    
        l_ret t_tbl_lab_test_order_detail;
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN va_code_messages.first .. va_code_messages.last
        LOOP
            aa_code_messages(va_code_messages(i)) := '<b>' ||
                                                     pk_message.get_message(i_lang, i_prof, va_code_messages(i)) ||
                                                     '</b> ';
        END LOOP;
    
        SELECT t_lab_test_order_detail(id_analysis_req => t.id_analysis_req,
                                       registry        => t.registry,
                                       num_order       => t.num_order,
                                       priority        => t.priority,
                                       desc_status     => t.desc_status,
                                       desc_time       => t.desc_time,
                                       desc_analysis   => t.desc_analysis,
                                       cancel_reason   => t.cancel_reason,
                                       notes_cancel    => t.notes_cancel,
                                       dt_ord          => t.dt_ord)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT ar.id_analysis_req,
                       l_msg_reg || ' ' ||
                       pk_prof_utils.get_name_signature(i_lang,
                                                        i_prof,
                                                        coalesce(ar.id_prof_cancel,
                                                                 ar.id_prof_last_update,
                                                                 ar.id_prof_writes)) ||
                       decode(pk_prof_utils.get_spec_signature(i_lang,
                                                               i_prof,
                                                               coalesce(ar.id_prof_cancel,
                                                                        ar.id_prof_last_update,
                                                                        ar.id_prof_writes),
                                                               coalesce(ar.dt_cancel_tstz,
                                                                        ar.dt_last_update_tstz,
                                                                        ar.dt_req_tstz),
                                                               ar.id_episode),
                              NULL,
                              '; ',
                              ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       coalesce(ar.id_prof_cancel,
                                                                                ar.id_prof_last_update,
                                                                                ar.id_prof_writes),
                                                                       coalesce(ar.dt_cancel_tstz,
                                                                                ar.dt_last_update_tstz,
                                                                                ar.dt_req_tstz),
                                                                       ar.id_episode) || '); ') ||
                       pk_date_utils.date_char_tsz(i_lang,
                                                   coalesce(ar.dt_cancel_tstz, ar.dt_last_update_tstz, ar.dt_req_tstz),
                                                   i_prof.institution,
                                                   i_prof.software) registry,
                       decode(i_flg_report,
                              pk_lab_tests_constant.g_no,
                              aa_code_messages('LAB_TESTS_T046') || ar.id_analysis_req,
                              ar.id_analysis_req) num_order,
                       decode(ar.flg_priority,
                              NULL,
                              NULL,
                              decode(i_flg_report,
                                     pk_lab_tests_constant.g_no,
                                     aa_code_messages('LAB_TESTS_T048') ||
                                     pk_sysdomain.get_domain(i_lang,
                                                             i_prof,
                                                             'ANALYSIS_REQ.FLG_PRIORITY',
                                                             ar.flg_priority,
                                                             NULL),
                                     pk_sysdomain.get_domain(i_lang,
                                                             i_prof,
                                                             'ANALYSIS_REQ.FLG_PRIORITY',
                                                             ar.flg_priority,
                                                             NULL))) priority,
                       decode(i_flg_report,
                              pk_lab_tests_constant.g_no,
                              aa_code_messages('LAB_TESTS_T047') ||
                              decode(ar.flg_status,
                                     pk_lab_tests_constant.g_analysis_sos,
                                     pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS',
                                                             pk_lab_tests_constant.g_analysis_req,
                                                             i_lang),
                                     pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS', ar.flg_status, i_lang)),
                              decode(ar.flg_status,
                                     pk_lab_tests_constant.g_analysis_sos,
                                     pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS',
                                                             pk_lab_tests_constant.g_analysis_req,
                                                             i_lang),
                                     pk_sysdomain.get_domain('ANALYSIS_REQ.FLG_STATUS', ar.flg_status, i_lang))) desc_status,
                       decode(i_flg_report,
                              pk_lab_tests_constant.g_no,
                              aa_code_messages('LAB_TESTS_T168') ||
                              decode(ar.flg_time,
                                     pk_lab_tests_constant.g_flg_time_e,
                                     pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ.FLG_TIME', ar.flg_time, NULL) ||
                                     decode(ar.dt_begin_tstz,
                                            NULL,
                                            NULL,
                                            ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                ar.dt_begin_tstz,
                                                                                i_prof.institution,
                                                                                i_prof.software) || ')'),
                                     pk_lab_tests_constant.g_flg_time_b,
                                     pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ.FLG_TIME', ar.flg_time, NULL) ||
                                     decode(ar.dt_begin_tstz,
                                            NULL,
                                            NULL,
                                            ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                ar.dt_begin_tstz,
                                                                                i_prof.institution,
                                                                                i_prof.software) || ')'),
                                     pk_lab_tests_constant.g_flg_time_d,
                                     pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ.FLG_TIME', ar.flg_time, NULL) ||
                                     decode(ar.dt_begin_tstz,
                                            NULL,
                                            NULL,
                                            ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                ar.dt_begin_tstz,
                                                                                i_prof.institution,
                                                                                i_prof.software) || ')'),
                                     pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ.FLG_TIME', ar.flg_time, NULL)),
                              decode(ar.flg_time,
                                     pk_lab_tests_constant.g_flg_time_e,
                                     pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ.FLG_TIME', ar.flg_time, NULL) ||
                                     decode(ar.dt_begin_tstz,
                                            NULL,
                                            NULL,
                                            ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                ar.dt_begin_tstz,
                                                                                i_prof.institution,
                                                                                i_prof.software) || ')'),
                                     pk_lab_tests_constant.g_flg_time_b,
                                     pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ.FLG_TIME', ar.flg_time, NULL) ||
                                     decode(ar.dt_begin_tstz,
                                            NULL,
                                            NULL,
                                            ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                ar.dt_begin_tstz,
                                                                                i_prof.institution,
                                                                                i_prof.software) || ')'),
                                     pk_lab_tests_constant.g_flg_time_d,
                                     pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ.FLG_TIME', ar.flg_time, NULL) ||
                                     decode(ar.dt_begin_tstz,
                                            NULL,
                                            NULL,
                                            ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                ar.dt_begin_tstz,
                                                                                i_prof.institution,
                                                                                i_prof.software) || ')'),
                                     pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ.FLG_TIME', ar.flg_time, NULL))) desc_time,
                       decode(i_flg_report,
                              pk_lab_tests_constant.g_no,
                              decode((SELECT COUNT(ard.id_analysis_req_det)
                                       FROM analysis_req_det ard
                                      WHERE ard.id_analysis_req = ar.id_analysis_req),
                                     1,
                                     aa_code_messages('LAB_TESTS_T045') ||
                                     (SELECT pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                       i_prof,
                                                                                       pk_lab_tests_constant.g_analysis_alias,
                                                                                       'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                       ard.id_analysis,
                                                                                       'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                       ard.id_sample_type,
                                                                                       NULL)
                                        FROM analysis_req_det ard
                                       WHERE ard.id_analysis_req = ar.id_analysis_req),
                                     aa_code_messages('LAB_TESTS_T045') ||
                                     (SELECT chr(10) || chr(9) || chr(9) ||
                                             replace_clob(substr(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                            i_prof,
                                                                                                                            pk_lab_tests_constant.g_analysis_alias,
                                                                                                                            'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                            ard.id_analysis,
                                                                                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                            ard.id_sample_type,
                                                                                                                            NULL) || ';'),
                                                                 1,
                                                                 length(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                                   i_prof,
                                                                                                                                   pk_lab_tests_constant.g_analysis_alias,
                                                                                                                                   'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                                   ard.id_analysis,
                                                                                                                                   'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                                   ard.id_sample_type,
                                                                                                                                   NULL) || ';')) - 1),
                                                          ';',
                                                          chr(10) || chr(9) || chr(9))
                                        FROM analysis_req_det ard
                                       WHERE ard.id_analysis_req = ar.id_analysis_req
                                         AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                       i_prof,
                                                                                                       ard.id_analysis)
                                                FROM dual) = pk_alert_constant.g_yes)),
                              (SELECT replace_clob(substr(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                     i_prof,
                                                                                                                     pk_lab_tests_constant.g_analysis_alias,
                                                                                                                     'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                     ard.id_analysis,
                                                                                                                     'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                     ard.id_sample_type,
                                                                                                                     NULL) || ';'),
                                                          1,
                                                          length(concatenate_clob(pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                                                            i_prof,
                                                                                                                            pk_lab_tests_constant.g_analysis_alias,
                                                                                                                            'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                                                            ard.id_analysis,
                                                                                                                            'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                                                            ard.id_sample_type,
                                                                                                                            NULL) || ';')) - 1),
                                                   ';',
                                                   chr(10) || chr(9))
                                 FROM analysis_req_det ard
                                WHERE ard.id_analysis_req = ar.id_analysis_req
                                  AND (SELECT pk_lab_tests_utils.get_lab_test_access_permission(i_lang,
                                                                                                i_prof,
                                                                                                ard.id_analysis)
                                         FROM dual) = pk_alert_constant.g_yes)) desc_analysis,
                       decode(ar.id_cancel_reason,
                              NULL,
                              NULL,
                              decode(i_flg_report,
                                     pk_lab_tests_constant.g_no,
                                     aa_code_messages('LAB_TESTS_T062') ||
                                     pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, ar.id_cancel_reason),
                                     pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, ar.id_cancel_reason))) cancel_reason,
                       decode(ar.notes_cancel,
                              NULL,
                              NULL,
                              decode(i_flg_report,
                                     pk_lab_tests_constant.g_no,
                                     aa_code_messages('LAB_TESTS_T061') || ar.notes_cancel,
                                     ar.notes_cancel)) notes_cancel,
                       pk_date_utils.date_send_tsz(i_lang,
                                                   coalesce(ar.dt_cancel_tstz, ar.dt_last_update_tstz, ar.dt_req_tstz),
                                                   i_prof) dt_ord
                  FROM analysis_req ar
                 WHERE ar.id_analysis_req = i_analysis_req) t;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_lab_test_order_detail();
    END tf_get_lab_test_req;

    FUNCTION tf_get_lab_test_cq
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_lab_tests_constant.g_no
    ) RETURN t_tbl_lab_tests_cq IS
    
        TYPE t_code_messages IS TABLE OF VARCHAR2(1000 CHAR) INDEX BY sys_message.code_message%TYPE;
    
        aa_code_messages t_code_messages;
    
        l_ret t_tbl_lab_tests_cq;
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN pk_lab_tests_constant.ga_code_messages_lab_test_detail.first .. pk_lab_tests_constant.ga_code_messages_lab_test_detail.last
        LOOP
            aa_code_messages(pk_lab_tests_constant.ga_code_messages_lab_test_detail(i)) := '<b>' ||
                                                                                           pk_message.get_message(i_lang,
                                                                                                                  i_prof,
                                                                                                                  pk_lab_tests_constant.ga_code_messages_lab_test_detail(i)) ||
                                                                                           '</b> ';
        END LOOP;
    
        g_error := 'OPEN L_RET';
        SELECT t_lab_tests_cq(id_analysis_req_det,
                              id_content,
                              flg_time,
                              desc_clinical_question,
                              desc_response,
                              NULL,
                              NULL,
                              NULL)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT id_analysis_req_det,
                       id_content,
                       flg_time,
                       decode(i_flg_report,
                              pk_lab_tests_constant.g_no,
                              decode(rownum, 1, aa_code_messages('LAB_TESTS_T228') || chr(10), NULL) || chr(9) || chr(32) ||
                              chr(32) || desc_clinical_question || desc_response,
                              desc_clinical_question) desc_clinical_question,
                       decode(i_flg_report, pk_lab_tests_constant.g_no, to_clob(''), to_clob(desc_response)) desc_response
                  FROM (SELECT id_analysis_req_det, id_content, flg_time, desc_clinical_question, desc_response
                          FROM (SELECT DISTINCT aqr1.id_analysis_req_det,
                                                aqr1.id_content,
                                                aqr1.flg_time,
                                                decode(i_flg_report,
                                                       pk_lab_tests_constant.g_no,
                                                       '<b>' ||
                                                       pk_mcdt.get_questionnaire_alias(i_lang,
                                                                                       i_prof,
                                                                                       'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' ||
                                                                                       aqr1.id_questionnaire) || ':</b> ',
                                                       pk_mcdt.get_questionnaire_alias(i_lang,
                                                                                       i_prof,
                                                                                       'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' ||
                                                                                       aqr1.id_questionnaire)) desc_clinical_question,
                                                decode(aqr.notes,
                                                       NULL,
                                                       decode(aqr1.desc_response, NULL, '---', aqr1.desc_response),
                                                       pk_lab_tests_utils.get_lab_test_response(i_lang, i_prof, aqr.notes)) desc_response,
                                                pk_lab_tests_utils.get_lab_test_question_rank(i_lang,
                                                                                              i_prof,
                                                                                              ard.id_analysis,
                                                                                              ard.id_sample_type,
                                                                                              aqr1.id_questionnaire,
                                                                                              aqr1.flg_time) rank
                                  FROM (SELECT aqr.id_analysis_req_det,
                                               aqr.id_questionnaire,
                                               listagg(pk_lab_tests_utils.get_questionnaire_id_content(i_lang,
                                                                                                       i_prof,
                                                                                                       aqr.id_questionnaire,
                                                                                                       aqr.id_response),
                                                       '; ') within GROUP(ORDER BY aqr.id_response) id_content,
                                               decode(aqr.id_harvest,
                                                      NULL,
                                                      pk_lab_tests_constant.g_analysis_cq_on_order,
                                                      pk_lab_tests_constant.g_analysis_cq_on_harvest) flg_time,
                                               listagg(pk_mcdt.get_response_alias(i_lang,
                                                                                  i_prof,
                                                                                  'RESPONSE.CODE_RESPONSE.' ||
                                                                                  aqr.id_response),
                                                       '; ') within GROUP(ORDER BY aqr.id_response) desc_response
                                          FROM analysis_question_response aqr
                                         WHERE aqr.id_analysis_req_det = i_analysis_req_det
                                         GROUP BY aqr.id_analysis_req_det, aqr.id_harvest, aqr.id_questionnaire) aqr1,
                                       (SELECT aqr.*,
                                               decode(aqr.id_harvest,
                                                      NULL,
                                                      pk_lab_tests_constant.g_analysis_cq_on_order,
                                                      pk_lab_tests_constant.g_analysis_cq_on_harvest) flg_time
                                          FROM analysis_question_response aqr) aqr,
                                       analysis_req_det ard
                                 WHERE aqr.id_analysis_req_det = aqr1.id_analysis_req_det
                                   AND aqr.id_questionnaire = aqr1.id_questionnaire
                                   AND aqr.flg_time = aqr1.flg_time
                                   AND aqr.id_analysis_req_det = ard.id_analysis_req_det)
                         ORDER BY flg_time, rank));
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_lab_tests_cq();
    END tf_get_lab_test_cq;

    FUNCTION get_lab_test_detail
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_analysis_req_det IN analysis_req_det.id_analysis_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_lab_tests_constant.g_no,
        o_detail           OUT pk_types.cursor_type,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_lab_test_order t_tbl_lab_tests_detail;
        l_lab_test_cq    t_tbl_lab_tests_cq;
    
        l_tab_order_data t_tab_dd_block_data := t_tab_dd_block_data();
    
        l_tab_dd_data      t_tab_dd_data := t_tab_dd_data();
        l_data_source_list table_varchar := table_varchar();
    
        l_clinical_questions CLOB := NULL;
        l_count_cq           PLS_INTEGER := 0;
    
    BEGIN
        --LAB TEST ORDER
        g_error          := 'CALLING TF_GET_EXAM_ORDER';
        l_lab_test_order := pk_lab_tests_core.tf_get_lab_test_order(i_lang             => i_lang,
                                                                    i_prof             => i_prof,
                                                                    i_episode          => i_episode,
                                                                    i_analysis_req_det => i_analysis_req_det,
                                                                    i_flg_report       => i_flg_report);
        g_error          := 'GET L_TAB_ORDER_DATA';
        IF l_lab_test_order.count > 0
        THEN
            SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                       ddb.rank,
                                       NULL,
                                       NULL,
                                       ddb.condition_val,
                                       NULL,
                                       NULL,
                                       dd.data_source,
                                       dd.data_source_val,
                                       NULL)
              BULK COLLECT
              INTO l_tab_order_data
              FROM (SELECT data_source, data_source_val
                      FROM (SELECT t.*
                              FROM (SELECT ' ' AS title,
                                           l_lab_test_order(1).desc_analysis desc_analysis,
                                           l_lab_test_order(1).num_order num_order,
                                           CASE
                                                WHEN l_lab_test_order(1).diagnosis_notes IS NULL
                                                      OR l_lab_test_order(1).desc_diagnosis IS NULL
                                                      OR l_lab_test_order(1).clinical_purpose IS NULL THEN
                                                 l_lab_test_order(1).clinical_indication
                                                ELSE
                                                 NULL
                                            END clinical_indication,
                                           l_lab_test_order(1).diagnosis_notes diagnosis_notes,
                                           l_lab_test_order(1).desc_diagnosis desc_diagnosis,
                                           l_lab_test_order(1).clinical_purpose clinical_purpose,
                                           l_lab_test_order(1).instructions instructions,
                                           l_lab_test_order(1).priority priority,
                                           l_lab_test_order(1).desc_status desc_status,
                                           l_lab_test_order(1).desc_time desc_time,
                                           l_lab_test_order(1).desc_time_limit desc_time_limit,
                                           l_lab_test_order(1).order_recurrence order_recurrence,
                                           l_lab_test_order(1).prn prn,
                                           to_char(l_lab_test_order(1).notes_prn) notes_prn,
                                           l_lab_test_order(1).patient_instructions patient_instructions,
                                           l_lab_test_order(1).fasting fasting,
                                           to_char(l_lab_test_order(1).notes_patient) notes_patient,
                                           l_lab_test_order(1).execution execution,
                                           l_lab_test_order(1).perform_location perform_location,
                                           l_lab_test_order(1).notes_scheduler notes_scheduler,
                                           l_lab_test_order(1).notes_technician notes_technician,
                                           l_lab_test_order(1).notes notes,
                                           CASE
                                                WHEN l_lab_test_order(1).prof_order IS NOT NULL
                                                      OR l_lab_test_order(1).dt_order IS NOT NULL
                                                      OR l_lab_test_order(1).co_sign_status IS NOT NULL
                                                      OR l_lab_test_order(1).order_type IS NOT NULL THEN
                                                 l_lab_test_order(1).co_sign
                                                ELSE
                                                 NULL
                                            END co_sign,
                                           l_lab_test_order(1).prof_order prof_order,
                                           l_lab_test_order(1).dt_order dt_order,
                                           l_lab_test_order(1).co_sign_status co_sign_status,
                                           l_lab_test_order(1).order_type order_type,
                                           CASE
                                                WHEN l_lab_test_order(1).health_plan IS NOT NULL
                                                      OR l_lab_test_order(1).insurance_number IS NOT NULL
                                                      OR l_lab_test_order(1).exemption IS NOT NULL
                                                      OR l_lab_test_order(1).financial_entity IS NOT NULL THEN
                                                 l_lab_test_order(1).health_insurance
                                                ELSE
                                                 NULL
                                            END health_insurance,
                                           l_lab_test_order(1).financial_entity financial_entity,
                                           l_lab_test_order(1).health_plan health_plan,
                                           l_lab_test_order(1).insurance_number insurance_number,
                                           l_lab_test_order(1).exemption exemption,
                                           CASE
                                                WHEN l_lab_test_order(1).cancel_reason IS NOT NULL
                                                      OR l_lab_test_order(1).cancel_notes IS NOT NULL
                                                      OR l_lab_test_order(1).cancel_prof_order IS NOT NULL
                                                      OR l_lab_test_order(1).cancel_dt_order IS NOT NULL
                                                      OR l_lab_test_order(1).cancel_order_type IS NOT NULL THEN
                                                 l_lab_test_order(1).cancellation
                                                ELSE
                                                 NULL
                                            END cancellation,
                                           l_lab_test_order(1).cancel_reason cancel_reason,
                                           l_lab_test_order(1).cancel_notes cancel_notes,
                                           l_lab_test_order(1).cancel_prof_order cancel_prof_order,
                                           l_lab_test_order(1).cancel_dt_order cancel_dt_order,
                                           l_lab_test_order(1).cancel_order_type cancel_order_type,
                                           l_lab_test_order(1).registry AS registry,
                                           ' ' white_line
                                      FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                             desc_analysis,
                                                                                                             num_order,
                                                                                                             clinical_indication,
                                                                                                             diagnosis_notes,
                                                                                                             desc_diagnosis,
                                                                                                             clinical_purpose,
                                                                                                             instructions,
                                                                                                             priority,
                                                                                                             desc_status,
                                                                                                             desc_time,
                                                                                                             desc_time_limit,
                                                                                                             order_recurrence,
                                                                                                             prn,
                                                                                                             notes_prn,
                                                                                                             patient_instructions,
                                                                                                             fasting,
                                                                                                             notes_patient,
                                                                                                             execution,
                                                                                                             perform_location,
                                                                                                             notes_scheduler,
                                                                                                             notes_technician,
                                                                                                             notes,
                                                                                                             co_sign,
                                                                                                             prof_order,
                                                                                                             dt_order,
                                                                                                             co_sign_status,
                                                                                                             health_insurance,
                                                                                                             financial_entity,
                                                                                                             health_plan,
                                                                                                             insurance_number,
                                                                                                             exemption,
                                                                                                             cancellation,
                                                                                                             cancel_reason,
                                                                                                             cancel_notes,
                                                                                                             cancel_prof_order,
                                                                                                             cancel_dt_order,
                                                                                                             cancel_order_type,
                                                                                                             registry,
                                                                                                             white_line))) dd
              JOIN dd_block ddb
                ON ddb.area = 'EXAMS'
               AND ddb.internal_name = 'ORDER'
               AND ddb.flg_available = pk_alert_constant.g_yes;
        END IF;
    
        --LAB TESTS CLINICAL QUESTIONS               
        g_error       := 'CALLING TF_GET_LAB_TEST_CQ';
        l_lab_test_cq := tf_get_lab_test_cq(i_lang             => i_lang,
                                            i_prof             => i_prof,
                                            i_episode          => i_episode,
                                            i_analysis_req_det => i_analysis_req_det,
                                            i_flg_report       => i_flg_report);
        l_count_cq    := l_lab_test_cq.count;
    
        IF l_lab_test_cq.count > 0
        THEN
            FOR i IN l_lab_test_cq.first .. l_lab_test_cq.last
            LOOP
                l_clinical_questions := l_clinical_questions || l_lab_test_cq(i).desc_clinical_question || chr(10);
            END LOOP;
        END IF;
    
        g_error := 'GET L_TAB_DD_DATA AND L_DATA_SOURCE_LIST';
        SELECT t_rec_dd_data(CASE
                                  WHEN data_code_message IS NOT NULL THEN
                                   pk_message.get_message(i_lang => i_lang, i_code_mess => data_code_message)
                                  ELSE
                                   NULL
                              END,
                              CASE
                                  WHEN flg_type = 'L1' THEN
                                   NULL
                                  ELSE
                                   data_source_val
                              END,
                              flg_type,
                              flg_html,
                              val_clob,
                              flg_clob),
               data_source
          BULK COLLECT
          INTO l_tab_dd_data, l_data_source_list
          FROM (SELECT ddc.data_code_message,
                       flg_type,
                       data_source_val,
                       ddc.data_source,
                       db.rnk,
                       ddc.rank,
                       db.id_dd_block,
                       flg_html,
                       NULL val_clob,
                       flg_clob
                  FROM TABLE(l_tab_order_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = 'LAB_TEST'
                   AND ddc.id_dd_block = 1
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N'))
                UNION ALL
                --clinical questions
                SELECT ddc.data_code_message,
                       ddc.flg_type,
                       NULL,
                       ddc.data_source,
                       db.rank               rnk,
                       ddc.rank,
                       db.id_dd_block,
                       flg_html,
                       l_clinical_questions  val_clob,
                       flg_clob
                  FROM dd_block db
                  JOIN dd_content ddc
                    ON ddc.area = db.area
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.id_dd_block = 1
                 WHERE db.area = 'LAB_TEST'
                   AND l_count_cq > 0)
         ORDER BY rnk, rank;
    
        g_error := 'OPEN O_DETAIL';
        OPEN o_detail FOR
            SELECT descr, val, flg_type, flg_html, val_clob, flg_clob
              FROM (SELECT CASE
                                WHEN d.val IS NULL THEN
                                 d.descr
                                WHEN d.descr IS NULL THEN
                                 NULL
                                ELSE
                                 d.descr || decode(d.flg_type, 'LP', NULL, ': ')
                            END descr,
                           d.val,
                           d.flg_type,
                           flg_html,
                           val_clob,
                           flg_clob,
                           d.rn
                      FROM (SELECT rownum rn, descr, val, flg_type, flg_html, val_clob, flg_clob
                              FROM TABLE(l_tab_dd_data)) d
                      JOIN (SELECT rownum rn, column_value data_source
                             FROM TABLE(l_data_source_list)) ds
                        ON ds.rn = d.rn);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_package_owner,
                                              i_package  => g_package_name,
                                              i_function => 'GET_LAB_TEST_DETAIL',
                                              o_error    => o_error);
            pk_types.open_my_cursor(i_cursor => o_detail);
            RETURN FALSE;
    END get_lab_test_detail;

BEGIN

    pk_alertlog.who_am_i(g_package_owner, g_package_name);
    pk_alertlog.log_init(g_package_name);

END pk_lab_tests_core;
/
