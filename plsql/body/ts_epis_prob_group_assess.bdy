/*-- Last Change Revision: $Rev: 1877368 $*/
/*-- Last Change by: $Author: adriano.ferreira $*/
/*-- Date of last change: $Date: 2018-11-12 15:39:19 +0000 (seg, 12 nov 2018) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_prob_group_assess
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2017-12-19 10:46:49
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_prob_group_assess.id_epis_prob_group_ass%TYPE IS
        retval epis_prob_group_assess.id_epis_prob_group_ass%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_epis_prob_group_assess.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_epis_prob_group_in  IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_prof_create_in      IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        flg_status_in          IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        assessment_note_in     IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        plan_note_in           IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        dteg_note_in           IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in        IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        create_user_in         IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_prob_group_assess.id_epis_prob_group_ass%TYPE := next_key;
    BEGIN
        ins(id_epis_prob_group_ass_in => l_pky,
            id_epis_prob_group_in     => id_epis_prob_group_in,
            id_prof_create_in         => id_prof_create_in,
            dt_create_in              => dt_create_in,
            flg_status_in             => flg_status_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            assessment_note_in        => assessment_note_in,
            plan_note_in              => plan_note_in,
            dteg_note_in              => dteg_note_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_epis_prob_group_in  IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_prof_create_in      IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        flg_status_in          IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        assessment_note_in     IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        plan_note_in           IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        dteg_note_in           IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in        IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        create_user_in         IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_prob_group_in  => id_epis_prob_group_in,
            id_prof_create_in      => id_prof_create_in,
            dt_create_in           => dt_create_in,
            flg_status_in          => flg_status_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            assessment_note_in     => assessment_note_in,
            plan_note_in           => plan_note_in,
            dteg_note_in           => dteg_note_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            cancel_notes_in        => cancel_notes_in,
            dt_cancel_in           => dt_cancel_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_epis_prob_group_in      IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_prof_create_in          IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in               IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        flg_status_in              IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in     IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in          IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        assessment_note_in         IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        plan_note_in               IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        dteg_note_in               IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in            IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in               IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        create_user_in             IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        id_epis_prob_group_ass_out IN OUT epis_prob_group_assess.id_epis_prob_group_ass%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_prob_group_assess.id_epis_prob_group_ass%TYPE := next_key;
    BEGIN
        ins(id_epis_prob_group_ass_in => l_pky,
            id_epis_prob_group_in     => id_epis_prob_group_in,
            id_prof_create_in         => id_prof_create_in,
            dt_create_in              => dt_create_in,
            flg_status_in             => flg_status_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            assessment_note_in        => assessment_note_in,
            plan_note_in              => plan_note_in,
            dteg_note_in              => dteg_note_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        id_epis_prob_group_ass_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_epis_prob_group_in      IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_prof_create_in          IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in               IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        flg_status_in              IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in     IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in          IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        assessment_note_in         IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        plan_note_in               IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        dteg_note_in               IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in            IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in               IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        create_user_in             IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        id_epis_prob_group_ass_out IN OUT epis_prob_group_assess.id_epis_prob_group_ass%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_prob_group_in      => id_epis_prob_group_in,
            id_prof_create_in          => id_prof_create_in,
            dt_create_in               => dt_create_in,
            flg_status_in              => flg_status_in,
            id_prof_last_update_in     => id_prof_last_update_in,
            dt_last_update_in          => dt_last_update_in,
            assessment_note_in         => assessment_note_in,
            plan_note_in               => plan_note_in,
            dteg_note_in               => dteg_note_in,
            id_prof_cancel_in          => id_prof_cancel_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            cancel_notes_in            => cancel_notes_in,
            dt_cancel_in               => dt_cancel_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_epis_prob_group_ass_out => id_epis_prob_group_ass_out,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_epis_prob_group_in  IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_prof_create_in      IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        flg_status_in          IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        assessment_note_in     IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        plan_note_in           IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        dteg_note_in           IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in        IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        create_user_in         IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN epis_prob_group_assess.id_epis_prob_group_ass%TYPE IS
        l_pky epis_prob_group_assess.id_epis_prob_group_ass%TYPE := next_key;
    BEGIN
        ins(id_epis_prob_group_ass_in => l_pky,
            id_epis_prob_group_in     => id_epis_prob_group_in,
            id_prof_create_in         => id_prof_create_in,
            dt_create_in              => dt_create_in,
            flg_status_in             => flg_status_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            assessment_note_in        => assessment_note_in,
            plan_note_in              => plan_note_in,
            dteg_note_in              => dteg_note_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_epis_prob_group_in  IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_prof_create_in      IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        flg_status_in          IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        assessment_note_in     IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        plan_note_in           IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        dteg_note_in           IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in        IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        create_user_in         IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN epis_prob_group_assess.id_epis_prob_group_ass%TYPE IS
        l_pky    epis_prob_group_assess.id_epis_prob_group_ass%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_epis_prob_group_ass_in => l_pky,
            id_epis_prob_group_in     => id_epis_prob_group_in,
            id_prof_create_in         => id_prof_create_in,
            dt_create_in              => dt_create_in,
            flg_status_in             => flg_status_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            assessment_note_in        => assessment_note_in,
            plan_note_in              => plan_note_in,
            dteg_note_in              => dteg_note_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_epis_prob_group_ass_in IN epis_prob_group_assess.id_epis_prob_group_ass%TYPE,
        id_epis_prob_group_in     IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in              IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        flg_status_in             IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        assessment_note_in        IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        plan_note_in              IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        dteg_note_in              IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        create_user_in            IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO epis_prob_group_assess
            (id_epis_prob_group_ass,
             id_epis_prob_group,
             id_prof_create,
             dt_create,
             flg_status,
             id_prof_last_update,
             dt_last_update,
             assessment_note,
             plan_note,
             dteg_note,
             id_prof_cancel,
             id_cancel_reason,
             cancel_notes,
             dt_cancel,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_epis_prob_group_ass_in,
             id_epis_prob_group_in,
             id_prof_create_in,
             dt_create_in,
             flg_status_in,
             id_prof_last_update_in,
             dt_last_update_in,
             assessment_note_in,
             plan_note_in,
             dteg_note_in,
             id_prof_cancel_in,
             id_cancel_reason_in,
             cancel_notes_in,
             dt_cancel_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_epis_prob_group_ass_in IN epis_prob_group_assess.id_epis_prob_group_ass%TYPE,
        id_epis_prob_group_in     IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in              IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        flg_status_in             IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        assessment_note_in        IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        plan_note_in              IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        dteg_note_in              IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        create_user_in            IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_prob_group_ass_in => id_epis_prob_group_ass_in,
            id_epis_prob_group_in     => id_epis_prob_group_in,
            id_prof_create_in         => id_prof_create_in,
            dt_create_in              => dt_create_in,
            flg_status_in             => flg_status_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            assessment_note_in        => assessment_note_in,
            plan_note_in              => plan_note_in,
            dteg_note_in              => dteg_note_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_prob_group_assess%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_prob_group_assess%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_epis_prob_group_ass := next_key(sequence_in);
        END IF;
    
        ins(id_epis_prob_group_ass_in => l_rec.id_epis_prob_group_ass,
            id_epis_prob_group_in     => l_rec.id_epis_prob_group,
            id_prof_create_in         => l_rec.id_prof_create,
            dt_create_in              => l_rec.dt_create,
            flg_status_in             => l_rec.flg_status,
            id_prof_last_update_in    => l_rec.id_prof_last_update,
            dt_last_update_in         => l_rec.dt_last_update,
            assessment_note_in        => l_rec.assessment_note,
            plan_note_in              => l_rec.plan_note,
            dteg_note_in              => l_rec.dteg_note,
            id_prof_cancel_in         => l_rec.id_prof_cancel,
            id_cancel_reason_in       => l_rec.id_cancel_reason,
            cancel_notes_in           => l_rec.cancel_notes,
            dt_cancel_in              => l_rec.dt_cancel,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_prob_group_assess%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_prob_group_assess_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_prob_group_assess
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_prob_group_assess_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_prob_group_ass_in IN epis_prob_group_assess.id_epis_prob_group_ass%TYPE,
        id_epis_prob_group_in     IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_epis_prob_group_nin    IN BOOLEAN := TRUE,
        id_prof_create_in         IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin        IN BOOLEAN := TRUE,
        dt_create_in              IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        dt_create_nin             IN BOOLEAN := TRUE,
        flg_status_in             IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_last_update_in    IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin   IN BOOLEAN := TRUE,
        dt_last_update_in         IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin        IN BOOLEAN := TRUE,
        assessment_note_in        IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        assessment_note_nin       IN BOOLEAN := TRUE,
        plan_note_in              IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        plan_note_nin             IN BOOLEAN := TRUE,
        dteg_note_in              IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        dteg_note_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        cancel_notes_in           IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin          IN BOOLEAN := TRUE,
        dt_cancel_in              IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin             IN BOOLEAN := TRUE,
        create_user_in            IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_epis_prob_group_n  NUMBER(1) := sys.diutil.bool_to_int(id_epis_prob_group_nin);
        l_id_prof_create_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n           NUMBER(1) := sys.diutil.bool_to_int(dt_create_nin);
        l_flg_status_n          NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_last_update_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n      NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_nin);
        l_assessment_note_n     NUMBER(1) := sys.diutil.bool_to_int(assessment_note_nin);
        l_plan_note_n           NUMBER(1) := sys.diutil.bool_to_int(plan_note_nin);
        l_dteg_note_n           NUMBER(1) := sys.diutil.bool_to_int(dteg_note_nin);
        l_id_prof_cancel_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_id_cancel_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_cancel_notes_n        NUMBER(1) := sys.diutil.bool_to_int(cancel_notes_nin);
        l_dt_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN
    
        UPDATE epis_prob_group_assess
           SET id_epis_prob_group  = decode(l_id_epis_prob_group_n,
                                            0,
                                            id_epis_prob_group_in,
                                            nvl(id_epis_prob_group_in, id_epis_prob_group)),
               id_prof_create      = decode(l_id_prof_create_n,
                                            0,
                                            id_prof_create_in,
                                            nvl(id_prof_create_in, id_prof_create)),
               dt_create           = decode(l_dt_create_n, 0, dt_create_in, nvl(dt_create_in, dt_create)),
               flg_status          = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_last_update = decode(l_id_prof_last_update_n,
                                            0,
                                            id_prof_last_update_in,
                                            nvl(id_prof_last_update_in, id_prof_last_update)),
               dt_last_update      = decode(l_dt_last_update_n,
                                            0,
                                            dt_last_update_in,
                                            nvl(dt_last_update_in, dt_last_update)),
               assessment_note     = decode(l_assessment_note_n,
                                            0,
                                            assessment_note_in,
                                            nvl(assessment_note_in, assessment_note)),
               plan_note           = decode(l_plan_note_n, 0, plan_note_in, nvl(plan_note_in, plan_note)),
               dteg_note           = decode(l_dteg_note_n, 0, dteg_note_in, nvl(dteg_note_in, dteg_note)),
               id_prof_cancel      = decode(l_id_prof_cancel_n,
                                            0,
                                            id_prof_cancel_in,
                                            nvl(id_prof_cancel_in, id_prof_cancel)),
               id_cancel_reason    = decode(l_id_cancel_reason_n,
                                            0,
                                            id_cancel_reason_in,
                                            nvl(id_cancel_reason_in, id_cancel_reason)),
               cancel_notes        = decode(l_cancel_notes_n, 0, cancel_notes_in, nvl(cancel_notes_in, cancel_notes)),
               dt_cancel           = decode(l_dt_cancel_n, 0, dt_cancel_in, nvl(dt_cancel_in, dt_cancel)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution))
         WHERE id_epis_prob_group_ass = id_epis_prob_group_ass_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_prob_group_ass_in IN epis_prob_group_assess.id_epis_prob_group_ass%TYPE,
        id_epis_prob_group_in     IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_epis_prob_group_nin    IN BOOLEAN := TRUE,
        id_prof_create_in         IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin        IN BOOLEAN := TRUE,
        dt_create_in              IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        dt_create_nin             IN BOOLEAN := TRUE,
        flg_status_in             IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_last_update_in    IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin   IN BOOLEAN := TRUE,
        dt_last_update_in         IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin        IN BOOLEAN := TRUE,
        assessment_note_in        IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        assessment_note_nin       IN BOOLEAN := TRUE,
        plan_note_in              IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        plan_note_nin             IN BOOLEAN := TRUE,
        dteg_note_in              IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        dteg_note_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        cancel_notes_in           IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin          IN BOOLEAN := TRUE,
        dt_cancel_in              IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin             IN BOOLEAN := TRUE,
        create_user_in            IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_prob_group_ass_in => id_epis_prob_group_ass_in,
            id_epis_prob_group_in     => id_epis_prob_group_in,
            id_epis_prob_group_nin    => id_epis_prob_group_nin,
            id_prof_create_in         => id_prof_create_in,
            id_prof_create_nin        => id_prof_create_nin,
            dt_create_in              => dt_create_in,
            dt_create_nin             => dt_create_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            id_prof_last_update_in    => id_prof_last_update_in,
            id_prof_last_update_nin   => id_prof_last_update_nin,
            dt_last_update_in         => dt_last_update_in,
            dt_last_update_nin        => dt_last_update_nin,
            assessment_note_in        => assessment_note_in,
            assessment_note_nin       => assessment_note_nin,
            plan_note_in              => plan_note_in,
            plan_note_nin             => plan_note_nin,
            dteg_note_in              => dteg_note_in,
            dteg_note_nin             => dteg_note_nin,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_prof_cancel_nin        => id_prof_cancel_nin,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_reason_nin      => id_cancel_reason_nin,
            cancel_notes_in           => cancel_notes_in,
            cancel_notes_nin          => cancel_notes_nin,
            dt_cancel_in              => dt_cancel_in,
            dt_cancel_nin             => dt_cancel_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_epis_prob_group_in   IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_epis_prob_group_nin  IN BOOLEAN := TRUE,
        id_prof_create_in       IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        flg_status_in           IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        assessment_note_in      IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        assessment_note_nin     IN BOOLEAN := TRUE,
        plan_note_in            IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        plan_note_nin           IN BOOLEAN := TRUE,
        dteg_note_in            IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        dteg_note_nin           IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        cancel_notes_in         IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin        IN BOOLEAN := TRUE,
        dt_cancel_in            IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        create_user_in          IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_epis_prob_group_n  NUMBER(1) := sys.diutil.bool_to_int(id_epis_prob_group_nin);
        l_id_prof_create_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n           NUMBER(1) := sys.diutil.bool_to_int(dt_create_nin);
        l_flg_status_n          NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_last_update_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n      NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_nin);
        l_assessment_note_n     NUMBER(1) := sys.diutil.bool_to_int(assessment_note_nin);
        l_plan_note_n           NUMBER(1) := sys.diutil.bool_to_int(plan_note_nin);
        l_dteg_note_n           NUMBER(1) := sys.diutil.bool_to_int(dteg_note_nin);
        l_id_prof_cancel_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_id_cancel_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_cancel_notes_n        NUMBER(1) := sys.diutil.bool_to_int(cancel_notes_nin);
        l_dt_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN
        l_id_epis_prob_group_n  := sys.diutil.bool_to_int(id_epis_prob_group_nin);
        l_id_prof_create_n      := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n           := sys.diutil.bool_to_int(dt_create_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_last_update_n := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n      := sys.diutil.bool_to_int(dt_last_update_nin);
        l_assessment_note_n     := sys.diutil.bool_to_int(assessment_note_nin);
        l_plan_note_n           := sys.diutil.bool_to_int(plan_note_nin);
        l_dteg_note_n           := sys.diutil.bool_to_int(dteg_note_nin);
        l_id_prof_cancel_n      := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_id_cancel_reason_n    := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_cancel_notes_n        := sys.diutil.bool_to_int(cancel_notes_nin);
        l_dt_cancel_n           := sys.diutil.bool_to_int(dt_cancel_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_sql                   := 'UPDATE epis_prob_group_assess SET' || ' ID_EPIS_PROB_GROUP = decode (' ||
                                   l_id_epis_prob_group_n ||
                                   ',0,:ID_EPIS_PROB_GROUP_in, NVL (:ID_EPIS_PROB_GROUP_in, ID_EPIS_PROB_GROUP)) ' || ',' ||
                                   ' ID_PROF_CREATE = decode (' || l_id_prof_create_n ||
                                   ',0,:ID_PROF_CREATE_in, NVL (:ID_PROF_CREATE_in, ID_PROF_CREATE)) ' || ',' ||
                                   ' DT_CREATE = decode (' || l_dt_create_n ||
                                   ',0,:DT_CREATE_in, NVL (:DT_CREATE_in, DT_CREATE)) ' || ',' ||
                                   ' FLG_STATUS = decode (' || l_flg_status_n ||
                                   ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                   ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                                   ',0,:ID_PROF_LAST_UPDATE_in, NVL (:ID_PROF_LAST_UPDATE_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                                   ' DT_LAST_UPDATE = decode (' || l_dt_last_update_n ||
                                   ',0,:DT_LAST_UPDATE_in, NVL (:DT_LAST_UPDATE_in, DT_LAST_UPDATE)) ' || ',' ||
                                   ' ASSESSMENT_NOTE = decode (' || l_assessment_note_n ||
                                   ',0,:ASSESSMENT_NOTE_in, NVL (:ASSESSMENT_NOTE_in, ASSESSMENT_NOTE)) ' || ',' ||
                                   ' PLAN_NOTE = decode (' || l_plan_note_n ||
                                   ',0,:PLAN_NOTE_in, NVL (:PLAN_NOTE_in, PLAN_NOTE)) ' || ',' ||
                                   ' DTEG_NOTE = decode (' || l_dteg_note_n ||
                                   ',0,:DTEG_NOTE_in, NVL (:DTEG_NOTE_in, DTEG_NOTE)) ' || ',' ||
                                   ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                                   ',0,:ID_PROF_CANCEL_in, NVL (:ID_PROF_CANCEL_in, ID_PROF_CANCEL)) ' || ',' ||
                                   ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                                   ',0,:ID_CANCEL_REASON_in, NVL (:ID_CANCEL_REASON_in, ID_CANCEL_REASON)) ' || ',' ||
                                   ' CANCEL_NOTES = decode (' || l_cancel_notes_n ||
                                   ',0,:CANCEL_NOTES_in, NVL (:CANCEL_NOTES_in, CANCEL_NOTES)) ' || ',' ||
                                   ' DT_CANCEL = decode (' || l_dt_cancel_n ||
                                   ',0,:DT_CANCEL_in, NVL (:DT_CANCEL_in, DT_CANCEL)) ' || ',' ||
                                   ' CREATE_USER = decode (' || l_create_user_n ||
                                   ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                   ' CREATE_TIME = decode (' || l_create_time_n ||
                                   ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                   ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                   ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                   ' UPDATE_USER = decode (' || l_update_user_n ||
                                   ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                   ' UPDATE_TIME = decode (' || l_update_time_n ||
                                   ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                   ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                   ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' ||
                                   ' where ' || nvl(where_in, '(1=1)') ||
                                   ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_epis_prob_group_in, id_prof_create_in, dt_create_in, flg_status_in, id_prof_last_update_in, dt_last_update_in, assessment_note_in, plan_note_in, dteg_note_in, id_prof_cancel_in, id_cancel_reason_in, cancel_notes_in, dt_cancel_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_epis_prob_group_in   IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_epis_prob_group_nin  IN BOOLEAN := TRUE,
        id_prof_create_in       IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        flg_status_in           IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        assessment_note_in      IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        assessment_note_nin     IN BOOLEAN := TRUE,
        plan_note_in            IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        plan_note_nin           IN BOOLEAN := TRUE,
        dteg_note_in            IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        dteg_note_nin           IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        cancel_notes_in         IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin        IN BOOLEAN := TRUE,
        dt_cancel_in            IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        create_user_in          IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_prob_group_in   => id_epis_prob_group_in,
            id_epis_prob_group_nin  => id_epis_prob_group_nin,
            id_prof_create_in       => id_prof_create_in,
            id_prof_create_nin      => id_prof_create_nin,
            dt_create_in            => dt_create_in,
            dt_create_nin           => dt_create_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            id_prof_last_update_in  => id_prof_last_update_in,
            id_prof_last_update_nin => id_prof_last_update_nin,
            dt_last_update_in       => dt_last_update_in,
            dt_last_update_nin      => dt_last_update_nin,
            assessment_note_in      => assessment_note_in,
            assessment_note_nin     => assessment_note_nin,
            plan_note_in            => plan_note_in,
            plan_note_nin           => plan_note_nin,
            dteg_note_in            => dteg_note_in,
            dteg_note_nin           => dteg_note_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            id_cancel_reason_in     => id_cancel_reason_in,
            id_cancel_reason_nin    => id_cancel_reason_nin,
            cancel_notes_in         => cancel_notes_in,
            cancel_notes_nin        => cancel_notes_nin,
            dt_cancel_in            => dt_cancel_in,
            dt_cancel_nin           => dt_cancel_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_epis_prob_group_ass_in IN epis_prob_group_assess.id_epis_prob_group_ass%TYPE,
        id_epis_prob_group_in     IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in              IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        flg_status_in             IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        assessment_note_in        IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        plan_note_in              IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        dteg_note_in              IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        create_user_in            IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_prob_group_ass_in => id_epis_prob_group_ass_in,
            id_epis_prob_group_in     => id_epis_prob_group_in,
            id_prof_create_in         => id_prof_create_in,
            dt_create_in              => dt_create_in,
            flg_status_in             => flg_status_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            assessment_note_in        => assessment_note_in,
            plan_note_in              => plan_note_in,
            dteg_note_in              => dteg_note_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_prob_group_ass_in => id_epis_prob_group_ass_in,
                id_epis_prob_group_in     => id_epis_prob_group_in,
                id_prof_create_in         => id_prof_create_in,
                dt_create_in              => dt_create_in,
                flg_status_in             => flg_status_in,
                id_prof_last_update_in    => id_prof_last_update_in,
                dt_last_update_in         => dt_last_update_in,
                assessment_note_in        => assessment_note_in,
                plan_note_in              => plan_note_in,
                dteg_note_in              => dteg_note_in,
                id_prof_cancel_in         => id_prof_cancel_in,
                id_cancel_reason_in       => id_cancel_reason_in,
                cancel_notes_in           => cancel_notes_in,
                dt_cancel_in              => dt_cancel_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_epis_prob_group_ass_in IN epis_prob_group_assess.id_epis_prob_group_ass%TYPE,
        id_epis_prob_group_in     IN epis_prob_group_assess.id_epis_prob_group%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_prob_group_assess.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in              IN epis_prob_group_assess.dt_create%TYPE DEFAULT NULL,
        flg_status_in             IN epis_prob_group_assess.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN epis_prob_group_assess.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN epis_prob_group_assess.dt_last_update%TYPE DEFAULT NULL,
        assessment_note_in        IN epis_prob_group_assess.assessment_note%TYPE DEFAULT NULL,
        plan_note_in              IN epis_prob_group_assess.plan_note%TYPE DEFAULT NULL,
        dteg_note_in              IN epis_prob_group_assess.dteg_note%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN epis_prob_group_assess.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_prob_group_assess.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_prob_group_assess.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN epis_prob_group_assess.dt_cancel%TYPE DEFAULT NULL,
        create_user_in            IN epis_prob_group_assess.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_prob_group_assess.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_prob_group_assess.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_prob_group_assess.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_prob_group_assess.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_prob_group_assess.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_prob_group_ass_in,
                id_epis_prob_group_in,
                id_prof_create_in,
                dt_create_in,
                flg_status_in,
                id_prof_last_update_in,
                dt_last_update_in,
                assessment_note_in,
                plan_note_in,
                dteg_note_in,
                id_prof_cancel_in,
                id_cancel_reason_in,
                cancel_notes_in,
                dt_cancel_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_prob_group_assess%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_prob_group_ass_in => rec_in.id_epis_prob_group_ass,
            id_epis_prob_group_in     => rec_in.id_epis_prob_group,
            id_prof_create_in         => rec_in.id_prof_create,
            dt_create_in              => rec_in.dt_create,
            flg_status_in             => rec_in.flg_status,
            id_prof_last_update_in    => rec_in.id_prof_last_update,
            dt_last_update_in         => rec_in.dt_last_update,
            assessment_note_in        => rec_in.assessment_note,
            plan_note_in              => rec_in.plan_note,
            dteg_note_in              => rec_in.dteg_note,
            id_prof_cancel_in         => rec_in.id_prof_cancel,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            cancel_notes_in           => rec_in.cancel_notes,
            dt_cancel_in              => rec_in.dt_cancel,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_prob_group_assess%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_prob_group_ass_in => rec_in.id_epis_prob_group_ass,
            id_epis_prob_group_in     => rec_in.id_epis_prob_group,
            id_prof_create_in         => rec_in.id_prof_create,
            dt_create_in              => rec_in.dt_create,
            flg_status_in             => rec_in.flg_status,
            id_prof_last_update_in    => rec_in.id_prof_last_update,
            dt_last_update_in         => rec_in.dt_last_update,
            assessment_note_in        => rec_in.assessment_note,
            plan_note_in              => rec_in.plan_note,
            dteg_note_in              => rec_in.dteg_note,
            id_prof_cancel_in         => rec_in.id_prof_cancel,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            cancel_notes_in           => rec_in.cancel_notes,
            dt_cancel_in              => rec_in.dt_cancel,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_prob_group_assess_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_prob_group_ass id_epis_prob_group_ass_cc;
        l_id_epis_prob_group     id_epis_prob_group_cc;
        l_id_prof_create         id_prof_create_cc;
        l_dt_create              dt_create_cc;
        l_flg_status             flg_status_cc;
        l_id_prof_last_update    id_prof_last_update_cc;
        l_dt_last_update         dt_last_update_cc;
        l_assessment_note        assessment_note_cc;
        l_plan_note              plan_note_cc;
        l_dteg_note              dteg_note_cc;
        l_id_prof_cancel         id_prof_cancel_cc;
        l_id_cancel_reason       id_cancel_reason_cc;
        l_cancel_notes           cancel_notes_cc;
        l_dt_cancel              dt_cancel_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_prob_group_ass(i) := col_in(i).id_epis_prob_group_ass;
            l_id_epis_prob_group(i) := col_in(i).id_epis_prob_group;
            l_id_prof_create(i) := col_in(i).id_prof_create;
            l_dt_create(i) := col_in(i).dt_create;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_dt_last_update(i) := col_in(i).dt_last_update;
            l_assessment_note(i) := col_in(i).assessment_note;
            l_plan_note(i) := col_in(i).plan_note;
            l_dteg_note(i) := col_in(i).dteg_note;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_cancel_notes(i) := col_in(i).cancel_notes;
            l_dt_cancel(i) := col_in(i).dt_cancel;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_prob_group_assess
                   SET id_epis_prob_group  = nvl(l_id_epis_prob_group(i), id_epis_prob_group),
                       id_prof_create      = nvl(l_id_prof_create(i), id_prof_create),
                       dt_create           = nvl(l_dt_create(i), dt_create),
                       flg_status          = nvl(l_flg_status(i), flg_status),
                       id_prof_last_update = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       dt_last_update      = nvl(l_dt_last_update(i), dt_last_update),
                       assessment_note     = nvl(l_assessment_note(i), assessment_note),
                       plan_note           = nvl(l_plan_note(i), plan_note),
                       dteg_note           = nvl(l_dteg_note(i), dteg_note),
                       id_prof_cancel      = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       id_cancel_reason    = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       cancel_notes        = nvl(l_cancel_notes(i), cancel_notes),
                       dt_cancel           = nvl(l_dt_cancel(i), dt_cancel),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution)
                 WHERE id_epis_prob_group_ass = l_id_epis_prob_group_ass(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_prob_group_assess
                   SET id_epis_prob_group  = l_id_epis_prob_group(i),
                       id_prof_create      = l_id_prof_create(i),
                       dt_create           = l_dt_create(i),
                       flg_status          = l_flg_status(i),
                       id_prof_last_update = l_id_prof_last_update(i),
                       dt_last_update      = l_dt_last_update(i),
                       assessment_note     = l_assessment_note(i),
                       plan_note           = l_plan_note(i),
                       dteg_note           = l_dteg_note(i),
                       id_prof_cancel      = l_id_prof_cancel(i),
                       id_cancel_reason    = l_id_cancel_reason(i),
                       cancel_notes        = l_cancel_notes(i),
                       dt_cancel           = l_dt_cancel(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i)
                 WHERE id_epis_prob_group_ass = l_id_epis_prob_group_ass(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_prob_group_assess_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE epis_prob_group_assess
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE epis_prob_group_assess
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE epis_prob_group_assess
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_prob_group_ass_in IN epis_prob_group_assess.id_epis_prob_group_ass%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_prob_group_assess
         WHERE id_epis_prob_group_ass = id_epis_prob_group_ass_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_prob_group_ass_in IN epis_prob_group_assess.id_epis_prob_group_ass%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_epis_prob_group_ass_in => id_epis_prob_group_ass_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END del;

    -- Delete all rows for this GPA_CR_FK foreign key value
    PROCEDURE del_gpa_cr_fk
    (
        id_cancel_reason_in IN epis_prob_group_assess.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_prob_group_assess
         WHERE id_cancel_reason = id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_gpa_cr_fk;

    -- Delete all rows for this GPA_EPG_FK foreign key value
    PROCEDURE del_gpa_epg_fk
    (
        id_epis_prob_group_in IN epis_prob_group_assess.id_epis_prob_group%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_prob_group_assess
         WHERE id_epis_prob_group = id_epis_prob_group_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_gpa_epg_fk;

    -- Delete all rows for this GPA_PROF_C_FK foreign key value
    PROCEDURE del_gpa_prof_c_fk
    (
        id_prof_cancel_in IN epis_prob_group_assess.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_prob_group_assess
         WHERE id_prof_cancel = id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_gpa_prof_c_fk;

    -- Delete all rows for this GPA_PROF_I_FK foreign key value
    PROCEDURE del_gpa_prof_i_fk
    (
        id_prof_create_in IN epis_prob_group_assess.id_prof_create%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_prob_group_assess
         WHERE id_prof_create = id_prof_create_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_gpa_prof_i_fk;

    -- Delete all rows for this GPA_PROF_U_FK foreign key value
    PROCEDURE del_gpa_prof_u_fk
    (
        id_prof_last_update_in IN epis_prob_group_assess.id_prof_last_update%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_prob_group_assess
         WHERE id_prof_last_update = id_prof_last_update_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_gpa_prof_u_fk;

    -- Delete all rows for this GPA_CR_FK foreign key value
    PROCEDURE del_gpa_cr_fk
    (
        id_cancel_reason_in IN epis_prob_group_assess.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_gpa_cr_fk(id_cancel_reason_in => id_cancel_reason_in,
                      handle_error_in     => handle_error_in,
                      rows_out            => rows_out);
    END del_gpa_cr_fk;

    -- Delete all rows for this GPA_EPG_FK foreign key value
    PROCEDURE del_gpa_epg_fk
    (
        id_epis_prob_group_in IN epis_prob_group_assess.id_epis_prob_group%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_gpa_epg_fk(id_epis_prob_group_in => id_epis_prob_group_in,
                       handle_error_in       => handle_error_in,
                       rows_out              => rows_out);
    END del_gpa_epg_fk;

    -- Delete all rows for this GPA_PROF_C_FK foreign key value
    PROCEDURE del_gpa_prof_c_fk
    (
        id_prof_cancel_in IN epis_prob_group_assess.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_gpa_prof_c_fk(id_prof_cancel_in => id_prof_cancel_in,
                          handle_error_in   => handle_error_in,
                          rows_out          => rows_out);
    END del_gpa_prof_c_fk;

    -- Delete all rows for this GPA_PROF_I_FK foreign key value
    PROCEDURE del_gpa_prof_i_fk
    (
        id_prof_create_in IN epis_prob_group_assess.id_prof_create%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_gpa_prof_i_fk(id_prof_create_in => id_prof_create_in,
                          handle_error_in   => handle_error_in,
                          rows_out          => rows_out);
    END del_gpa_prof_i_fk;

    -- Delete all rows for this GPA_PROF_U_FK foreign key value
    PROCEDURE del_gpa_prof_u_fk
    (
        id_prof_last_update_in IN epis_prob_group_assess.id_prof_last_update%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_gpa_prof_u_fk(id_prof_last_update_in => id_prof_last_update_in,
                          handle_error_in        => handle_error_in,
                          rows_out               => rows_out);
    END del_gpa_prof_u_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM epis_prob_group_assess';
        ELSE
            RETURN 'DELETE FROM epis_prob_group_assess WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(epis_prob_group_assess_inout IN OUT epis_prob_group_assess%ROWTYPE) IS
    BEGIN
        epis_prob_group_assess_inout.id_epis_prob_group_ass := NULL;
        epis_prob_group_assess_inout.id_epis_prob_group     := NULL;
        epis_prob_group_assess_inout.id_prof_create         := NULL;
        epis_prob_group_assess_inout.dt_create              := NULL;
        epis_prob_group_assess_inout.flg_status             := NULL;
        epis_prob_group_assess_inout.id_prof_last_update    := NULL;
        epis_prob_group_assess_inout.dt_last_update         := NULL;
        epis_prob_group_assess_inout.assessment_note        := NULL;
        epis_prob_group_assess_inout.plan_note              := NULL;
        epis_prob_group_assess_inout.dteg_note              := NULL;
        epis_prob_group_assess_inout.id_prof_cancel         := NULL;
        epis_prob_group_assess_inout.id_cancel_reason       := NULL;
        epis_prob_group_assess_inout.cancel_notes           := NULL;
        epis_prob_group_assess_inout.dt_cancel              := NULL;
        epis_prob_group_assess_inout.create_user            := NULL;
        epis_prob_group_assess_inout.create_time            := NULL;
        epis_prob_group_assess_inout.create_institution     := NULL;
        epis_prob_group_assess_inout.update_user            := NULL;
        epis_prob_group_assess_inout.update_time            := NULL;
        epis_prob_group_assess_inout.update_institution     := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN epis_prob_group_assess%ROWTYPE IS
        l_epis_prob_group_assess epis_prob_group_assess%ROWTYPE;
    BEGIN
        RETURN l_epis_prob_group_assess;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_prob_group_assess_tc IS
        data epis_prob_group_assess_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM epis_prob_group_assess
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_prob_group_assess_tc IS
        data epis_prob_group_assess_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_prob_group_assess;
