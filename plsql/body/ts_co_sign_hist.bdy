/*-- Last Change Revision: $Rev: 1877368 $*/
/*-- Last Change by: $Author: adriano.ferreira $*/
/*-- Date of last change: $Date: 2018-11-12 15:39:19 +0000 (seg, 12 nov 2018) $*/
CREATE OR REPLACE PACKAGE BODY ts_co_sign_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Janeiro 7, 2015 13:17:41
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_co_sign_hist_in    IN co_sign_hist.id_co_sign_hist%TYPE,
        id_co_sign_in         IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_task_in            IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_group_in      IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_type_in       IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_action_in          IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_order_type_in      IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_episode_in         IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_created_in    IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_ordered_by_in IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_co_signed_in  IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        dt_created_in         IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_ordered_by_in      IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_co_signed_in       IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        flg_status_in         IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        co_sign_notes_in      IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        flg_made_auth_in      IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        create_user_in        IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO co_sign_hist
            (id_co_sign_hist,
             id_co_sign,
             id_task,
             id_task_group,
             id_task_type,
             id_action,
             id_order_type,
             id_episode,
             id_prof_created,
             id_prof_ordered_by,
             id_prof_co_signed,
             dt_created,
             dt_ordered_by,
             dt_co_signed,
             flg_status,
             co_sign_notes,
             flg_made_auth,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_co_sign_hist_in,
             id_co_sign_in,
             id_task_in,
             id_task_group_in,
             id_task_type_in,
             id_action_in,
             id_order_type_in,
             id_episode_in,
             id_prof_created_in,
             id_prof_ordered_by_in,
             id_prof_co_signed_in,
             dt_created_in,
             dt_ordered_by_in,
             dt_co_signed_in,
             flg_status_in,
             co_sign_notes_in,
             flg_made_auth_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'CSH_PK_IDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "CSH_PK_IDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'CO_SIGN_HIST',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CO_SIGN_HIST',
                                                        value_in           => id_co_sign_hist_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'CO_SIGN_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    IF l_name = 'CSH_CO_SIGN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CO_SIGN',
                                                        value_in           => id_co_sign_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_co_sign_hist_in    IN co_sign_hist.id_co_sign_hist%TYPE,
        id_co_sign_in         IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_task_in            IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_group_in      IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_type_in       IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_action_in          IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_order_type_in      IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_episode_in         IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_created_in    IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_ordered_by_in IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_co_signed_in  IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        dt_created_in         IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_ordered_by_in      IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_co_signed_in       IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        flg_status_in         IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        co_sign_notes_in      IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        flg_made_auth_in      IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        create_user_in        IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_co_sign_hist_in    => id_co_sign_hist_in,
            id_co_sign_in         => id_co_sign_in,
            id_task_in            => id_task_in,
            id_task_group_in      => id_task_group_in,
            id_task_type_in       => id_task_type_in,
            id_action_in          => id_action_in,
            id_order_type_in      => id_order_type_in,
            id_episode_in         => id_episode_in,
            id_prof_created_in    => id_prof_created_in,
            id_prof_ordered_by_in => id_prof_ordered_by_in,
            id_prof_co_signed_in  => id_prof_co_signed_in,
            dt_created_in         => dt_created_in,
            dt_ordered_by_in      => dt_ordered_by_in,
            dt_co_signed_in       => dt_co_signed_in,
            flg_status_in         => flg_status_in,
            co_sign_notes_in      => co_sign_notes_in,
            flg_made_auth_in      => flg_made_auth_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    /*
    START Special logic for handling LOB columns....
    */

    PROCEDURE n_ins_clobs_in_chunks
    (
        id_co_sign_hist_in    IN co_sign_hist.id_co_sign_hist%TYPE,
        id_co_sign_in         IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_task_in            IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_group_in      IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_type_in       IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_action_in          IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_order_type_in      IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_episode_in         IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_created_in    IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_ordered_by_in IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_co_signed_in  IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        dt_created_in         IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_ordered_by_in      IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_co_signed_in       IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        flg_status_in         IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        flg_made_auth_in      IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        create_user_in        IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        clob_columns_in       IN varchar2_t,
        clob_pieces_in        IN varchar2_t
    ) IS
        l_co_sign_notes CLOB;
        i               PLS_INTEGER;
        current_column  VARCHAR2(30) := '';
    BEGIN
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'co_sign_notes_in' THEN
                            IF l_co_sign_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_co_sign_notes, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'co_sign_notes_in' THEN
                        dbms_lob.writeappend(l_co_sign_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        ins(id_co_sign_hist_in    => id_co_sign_hist_in,
            id_co_sign_in         => id_co_sign_in,
            id_task_in            => id_task_in,
            id_task_group_in      => id_task_group_in,
            id_task_type_in       => id_task_type_in,
            id_action_in          => id_action_in,
            id_order_type_in      => id_order_type_in,
            id_episode_in         => id_episode_in,
            id_prof_created_in    => id_prof_created_in,
            id_prof_ordered_by_in => id_prof_ordered_by_in,
            id_prof_co_signed_in  => id_prof_co_signed_in,
            dt_created_in         => dt_created_in,
            dt_ordered_by_in      => dt_ordered_by_in,
            dt_co_signed_in       => dt_co_signed_in,
            flg_status_in         => flg_status_in,
            co_sign_notes_in      => l_co_sign_notes,
            flg_made_auth_in      => flg_made_auth_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in);
    
    END n_ins_clobs_in_chunks;

    PROCEDURE n_upd_clobs_in_chunks
    (
        id_co_sign_hist_in    IN co_sign_hist.id_co_sign_hist%TYPE,
        id_co_sign_in         IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_task_in            IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_group_in      IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_type_in       IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_action_in          IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_order_type_in      IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_episode_in         IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_created_in    IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_ordered_by_in IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_co_signed_in  IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        dt_created_in         IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_ordered_by_in      IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_co_signed_in       IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        flg_status_in         IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        flg_made_auth_in      IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        create_user_in        IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        ignore_if_null_in     IN BOOLEAN := TRUE,
        handle_error_in       IN BOOLEAN := TRUE,
        clob_columns_in       IN varchar2_t,
        clob_pieces_in        IN varchar2_t
    ) IS
        l_co_sign_notes CLOB;
        i               PLS_INTEGER;
        current_column  VARCHAR2(30) := '';
        l_rows          PLS_INTEGER;
    BEGIN
    
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'co_sign_notes_in' THEN
                            IF l_co_sign_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_co_sign_notes, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'co_sign_notes_in' THEN
                        dbms_lob.writeappend(l_co_sign_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        upd(id_co_sign_hist_in    => id_co_sign_hist_in,
            id_co_sign_in         => id_co_sign_in,
            id_task_in            => id_task_in,
            id_task_group_in      => id_task_group_in,
            id_task_type_in       => id_task_type_in,
            id_action_in          => id_action_in,
            id_order_type_in      => id_order_type_in,
            id_episode_in         => id_episode_in,
            id_prof_created_in    => id_prof_created_in,
            id_prof_ordered_by_in => id_prof_ordered_by_in,
            id_prof_co_signed_in  => id_prof_co_signed_in,
            dt_created_in         => dt_created_in,
            dt_ordered_by_in      => dt_ordered_by_in,
            dt_co_signed_in       => dt_co_signed_in,
            flg_status_in         => flg_status_in,
            co_sign_notes_in      => l_co_sign_notes,
            flg_made_auth_in      => flg_made_auth_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in);
    END n_upd_clobs_in_chunks;

    PROCEDURE n_upd_ins_clobs_in_chunks
    (
        id_co_sign_hist_in    IN co_sign_hist.id_co_sign_hist%TYPE,
        id_co_sign_in         IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_task_in            IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_group_in      IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_type_in       IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_action_in          IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_order_type_in      IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_episode_in         IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_created_in    IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_ordered_by_in IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_co_signed_in  IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        dt_created_in         IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_ordered_by_in      IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_co_signed_in       IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        flg_status_in         IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        flg_made_auth_in      IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        create_user_in        IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        ignore_if_null_in     IN BOOLEAN DEFAULT TRUE,
        handle_error_in       IN BOOLEAN DEFAULT TRUE,
        clob_columns_in       IN varchar2_t,
        clob_pieces_in        IN varchar2_t
    ) IS
    BEGIN
        n_upd_clobs_in_chunks(id_co_sign_hist_in    => id_co_sign_hist_in,
                              id_co_sign_in         => id_co_sign_in,
                              id_task_in            => id_task_in,
                              id_task_group_in      => id_task_group_in,
                              id_task_type_in       => id_task_type_in,
                              id_action_in          => id_action_in,
                              id_order_type_in      => id_order_type_in,
                              id_episode_in         => id_episode_in,
                              id_prof_created_in    => id_prof_created_in,
                              id_prof_ordered_by_in => id_prof_ordered_by_in,
                              id_prof_co_signed_in  => id_prof_co_signed_in,
                              dt_created_in         => dt_created_in,
                              dt_ordered_by_in      => dt_ordered_by_in,
                              dt_co_signed_in       => dt_co_signed_in,
                              flg_status_in         => flg_status_in,
                              flg_made_auth_in      => flg_made_auth_in,
                              create_user_in        => create_user_in,
                              create_time_in        => create_time_in,
                              create_institution_in => create_institution_in,
                              update_user_in        => update_user_in,
                              update_time_in        => update_time_in,
                              update_institution_in => update_institution_in,
                              clob_columns_in       => clob_columns_in,
                              clob_pieces_in        => clob_pieces_in,
                              ignore_if_null_in     => ignore_if_null_in,
                              handle_error_in       => handle_error_in);
    
        IF SQL%ROWCOUNT = 0
        THEN
            n_ins_clobs_in_chunks(id_co_sign_hist_in    => id_co_sign_hist_in,
                                  id_co_sign_in         => id_co_sign_in,
                                  id_task_in            => id_task_in,
                                  id_task_group_in      => id_task_group_in,
                                  id_task_type_in       => id_task_type_in,
                                  id_action_in          => id_action_in,
                                  id_order_type_in      => id_order_type_in,
                                  id_episode_in         => id_episode_in,
                                  id_prof_created_in    => id_prof_created_in,
                                  id_prof_ordered_by_in => id_prof_ordered_by_in,
                                  id_prof_co_signed_in  => id_prof_co_signed_in,
                                  dt_created_in         => dt_created_in,
                                  dt_ordered_by_in      => dt_ordered_by_in,
                                  dt_co_signed_in       => dt_co_signed_in,
                                  flg_status_in         => flg_status_in,
                                  flg_made_auth_in      => flg_made_auth_in,
                                  create_user_in        => create_user_in,
                                  create_time_in        => create_time_in,
                                  create_institution_in => create_institution_in,
                                  update_user_in        => update_user_in,
                                  update_time_in        => update_time_in,
                                  update_institution_in => update_institution_in,
                                  clob_columns_in       => clob_columns_in,
                                  clob_pieces_in        => clob_pieces_in,
                                  handle_error_in       => handle_error_in);
        END IF;
    END n_upd_ins_clobs_in_chunks;

    /*
    END Special logic for handling LOB columns.
    */

    PROCEDURE ins
    (
        rec_in          IN co_sign_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec co_sign_hist%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_co_sign_hist := next_key(sequence_in);
        END IF;
        ins(id_co_sign_hist_in    => l_rec.id_co_sign_hist,
            id_co_sign_in         => l_rec.id_co_sign,
            id_task_in            => l_rec.id_task,
            id_task_group_in      => l_rec.id_task_group,
            id_task_type_in       => l_rec.id_task_type,
            id_action_in          => l_rec.id_action,
            id_order_type_in      => l_rec.id_order_type,
            id_episode_in         => l_rec.id_episode,
            id_prof_created_in    => l_rec.id_prof_created,
            id_prof_ordered_by_in => l_rec.id_prof_ordered_by,
            id_prof_co_signed_in  => l_rec.id_prof_co_signed,
            dt_created_in         => l_rec.dt_created,
            dt_ordered_by_in      => l_rec.dt_ordered_by,
            dt_co_signed_in       => l_rec.dt_co_signed,
            flg_status_in         => l_rec.flg_status,
            co_sign_notes_in      => l_rec.co_sign_notes,
            flg_made_auth_in      => l_rec.flg_made_auth,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_time_in        => l_rec.update_time,
            update_institution_in => l_rec.update_institution,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN co_sign_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN co_sign_hist.id_co_sign_hist%TYPE
    
     IS
        retval co_sign_hist.id_co_sign_hist%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_co_sign_hist.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_CO_SIGN_HIST'));
    END next_key;

    PROCEDURE ins
    (
        id_co_sign_in         IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_task_in            IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_group_in      IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_type_in       IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_action_in          IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_order_type_in      IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_episode_in         IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_created_in    IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_ordered_by_in IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_co_signed_in  IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        dt_created_in         IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_ordered_by_in      IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_co_signed_in       IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        flg_status_in         IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        co_sign_notes_in      IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        flg_made_auth_in      IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        create_user_in        IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        id_co_sign_hist_out   IN OUT co_sign_hist.id_co_sign_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky co_sign_hist.id_co_sign_hist%TYPE := next_key;
    BEGIN
        ins(id_co_sign_hist_in    => l_pky,
            id_co_sign_in         => id_co_sign_in,
            id_task_in            => id_task_in,
            id_task_group_in      => id_task_group_in,
            id_task_type_in       => id_task_type_in,
            id_action_in          => id_action_in,
            id_order_type_in      => id_order_type_in,
            id_episode_in         => id_episode_in,
            id_prof_created_in    => id_prof_created_in,
            id_prof_ordered_by_in => id_prof_ordered_by_in,
            id_prof_co_signed_in  => id_prof_co_signed_in,
            dt_created_in         => dt_created_in,
            dt_ordered_by_in      => dt_ordered_by_in,
            dt_co_signed_in       => dt_co_signed_in,
            flg_status_in         => flg_status_in,
            co_sign_notes_in      => co_sign_notes_in,
            flg_made_auth_in      => flg_made_auth_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        id_co_sign_hist_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_co_sign_in         IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_task_in            IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_group_in      IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_type_in       IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_action_in          IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_order_type_in      IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_episode_in         IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_created_in    IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_ordered_by_in IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_co_signed_in  IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        dt_created_in         IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_ordered_by_in      IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_co_signed_in       IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        flg_status_in         IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        co_sign_notes_in      IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        flg_made_auth_in      IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        create_user_in        IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        id_co_sign_hist_out   IN OUT co_sign_hist.id_co_sign_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_co_sign_in         => id_co_sign_in,
            id_task_in            => id_task_in,
            id_task_group_in      => id_task_group_in,
            id_task_type_in       => id_task_type_in,
            id_action_in          => id_action_in,
            id_order_type_in      => id_order_type_in,
            id_episode_in         => id_episode_in,
            id_prof_created_in    => id_prof_created_in,
            id_prof_ordered_by_in => id_prof_ordered_by_in,
            id_prof_co_signed_in  => id_prof_co_signed_in,
            dt_created_in         => dt_created_in,
            dt_ordered_by_in      => dt_ordered_by_in,
            dt_co_signed_in       => dt_co_signed_in,
            flg_status_in         => flg_status_in,
            co_sign_notes_in      => co_sign_notes_in,
            flg_made_auth_in      => flg_made_auth_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_co_sign_hist_out   => id_co_sign_hist_out,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    FUNCTION ins
    (
        id_co_sign_in         IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_task_in            IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_group_in      IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_type_in       IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_action_in          IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_order_type_in      IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_episode_in         IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_created_in    IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_ordered_by_in IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_co_signed_in  IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        dt_created_in         IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_ordered_by_in      IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_co_signed_in       IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        flg_status_in         IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        co_sign_notes_in      IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        flg_made_auth_in      IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        create_user_in        IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) RETURN co_sign_hist.id_co_sign_hist%TYPE IS
        l_pky co_sign_hist.id_co_sign_hist%TYPE := next_key;
    BEGIN
        ins(id_co_sign_hist_in    => l_pky,
            id_co_sign_in         => id_co_sign_in,
            id_task_in            => id_task_in,
            id_task_group_in      => id_task_group_in,
            id_task_type_in       => id_task_type_in,
            id_action_in          => id_action_in,
            id_order_type_in      => id_order_type_in,
            id_episode_in         => id_episode_in,
            id_prof_created_in    => id_prof_created_in,
            id_prof_ordered_by_in => id_prof_ordered_by_in,
            id_prof_co_signed_in  => id_prof_co_signed_in,
            dt_created_in         => dt_created_in,
            dt_ordered_by_in      => dt_ordered_by_in,
            dt_co_signed_in       => dt_co_signed_in,
            flg_status_in         => flg_status_in,
            co_sign_notes_in      => co_sign_notes_in,
            flg_made_auth_in      => flg_made_auth_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_co_sign_in         IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_task_in            IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_group_in      IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_type_in       IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_action_in          IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_order_type_in      IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_episode_in         IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_created_in    IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_ordered_by_in IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_co_signed_in  IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        dt_created_in         IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_ordered_by_in      IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_co_signed_in       IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        flg_status_in         IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        co_sign_notes_in      IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        flg_made_auth_in      IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        create_user_in        IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) RETURN co_sign_hist.id_co_sign_hist%TYPE IS
        l_pky    co_sign_hist.id_co_sign_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_co_sign_hist_in    => l_pky,
            id_co_sign_in         => id_co_sign_in,
            id_task_in            => id_task_in,
            id_task_group_in      => id_task_group_in,
            id_task_type_in       => id_task_type_in,
            id_action_in          => id_action_in,
            id_order_type_in      => id_order_type_in,
            id_episode_in         => id_episode_in,
            id_prof_created_in    => id_prof_created_in,
            id_prof_ordered_by_in => id_prof_ordered_by_in,
            id_prof_co_signed_in  => id_prof_co_signed_in,
            dt_created_in         => dt_created_in,
            dt_ordered_by_in      => dt_ordered_by_in,
            dt_co_signed_in       => dt_co_signed_in,
            flg_status_in         => flg_status_in,
            co_sign_notes_in      => co_sign_notes_in,
            flg_made_auth_in      => flg_made_auth_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_co_sign_in         IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_task_in            IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_group_in      IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_type_in       IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_action_in          IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_order_type_in      IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_episode_in         IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_created_in    IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_ordered_by_in IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_co_signed_in  IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        dt_created_in         IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_ordered_by_in      IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_co_signed_in       IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        flg_status_in         IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        co_sign_notes_in      IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        flg_made_auth_in      IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        create_user_in        IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky co_sign_hist.id_co_sign_hist%TYPE := next_key;
    BEGIN
        ins(id_co_sign_hist_in    => l_pky,
            id_co_sign_in         => id_co_sign_in,
            id_task_in            => id_task_in,
            id_task_group_in      => id_task_group_in,
            id_task_type_in       => id_task_type_in,
            id_action_in          => id_action_in,
            id_order_type_in      => id_order_type_in,
            id_episode_in         => id_episode_in,
            id_prof_created_in    => id_prof_created_in,
            id_prof_ordered_by_in => id_prof_ordered_by_in,
            id_prof_co_signed_in  => id_prof_co_signed_in,
            dt_created_in         => dt_created_in,
            dt_ordered_by_in      => dt_ordered_by_in,
            dt_co_signed_in       => dt_co_signed_in,
            flg_status_in         => flg_status_in,
            co_sign_notes_in      => co_sign_notes_in,
            flg_made_auth_in      => flg_made_auth_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_co_sign_in         IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_task_in            IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_group_in      IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_type_in       IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_action_in          IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_order_type_in      IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_episode_in         IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_created_in    IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_ordered_by_in IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_co_signed_in  IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        dt_created_in         IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_ordered_by_in      IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_co_signed_in       IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        flg_status_in         IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        co_sign_notes_in      IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        flg_made_auth_in      IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        create_user_in        IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        l_pky    co_sign_hist.id_co_sign_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_co_sign_hist_in    => l_pky,
            id_co_sign_in         => id_co_sign_in,
            id_task_in            => id_task_in,
            id_task_group_in      => id_task_group_in,
            id_task_type_in       => id_task_type_in,
            id_action_in          => id_action_in,
            id_order_type_in      => id_order_type_in,
            id_episode_in         => id_episode_in,
            id_prof_created_in    => id_prof_created_in,
            id_prof_ordered_by_in => id_prof_ordered_by_in,
            id_prof_co_signed_in  => id_prof_co_signed_in,
            dt_created_in         => dt_created_in,
            dt_ordered_by_in      => dt_ordered_by_in,
            dt_co_signed_in       => dt_co_signed_in,
            flg_status_in         => flg_status_in,
            co_sign_notes_in      => co_sign_notes_in,
            flg_made_auth_in      => flg_made_auth_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN co_sign_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO co_sign_hist
                    (id_co_sign_hist,
                     id_co_sign,
                     id_task,
                     id_task_group,
                     id_task_type,
                     id_action,
                     id_order_type,
                     id_episode,
                     id_prof_created,
                     id_prof_ordered_by,
                     id_prof_co_signed,
                     dt_created,
                     dt_ordered_by,
                     dt_co_signed,
                     flg_status,
                     co_sign_notes,
                     flg_made_auth,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution)
                VALUES
                    (rows_in(indx).id_co_sign_hist,
                     rows_in(indx).id_co_sign,
                     rows_in(indx).id_task,
                     rows_in(indx).id_task_group,
                     rows_in(indx).id_task_type,
                     rows_in(indx).id_action,
                     rows_in(indx).id_order_type,
                     rows_in(indx).id_episode,
                     rows_in(indx).id_prof_created,
                     rows_in(indx).id_prof_ordered_by,
                     rows_in(indx).id_prof_co_signed,
                     rows_in(indx).dt_created,
                     rows_in(indx).dt_ordered_by,
                     rows_in(indx).dt_co_signed,
                     rows_in(indx).flg_status,
                     rows_in(indx).co_sign_notes,
                     rows_in(indx).flg_made_auth,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CO_SIGN_HIST _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_co_sign_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CO_SIGN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_co_sign,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TASK _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_task,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TASK_GROUP _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_task_group,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TASK_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_task_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ACTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_action,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ORDER_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_order_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CREATED _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_created,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_ORDERED_BY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_ordered_by,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CO_SIGNED _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_co_signed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CREATED _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_created,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ORDERED_BY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_ordered_by,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CO_SIGNED _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_co_signed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_MADE_AUTH _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_made_auth,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'CO_SIGN_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN co_sign_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_co_sign_hist_in     IN co_sign_hist.id_co_sign_hist%TYPE,
        id_co_sign_in          IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_co_sign_nin         IN BOOLEAN := TRUE,
        id_task_in             IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_nin            IN BOOLEAN := TRUE,
        id_task_group_in       IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_group_nin      IN BOOLEAN := TRUE,
        id_task_type_in        IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_task_type_nin       IN BOOLEAN := TRUE,
        id_action_in           IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_action_nin          IN BOOLEAN := TRUE,
        id_order_type_in       IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_order_type_nin      IN BOOLEAN := TRUE,
        id_episode_in          IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_prof_created_in     IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_created_nin    IN BOOLEAN := TRUE,
        id_prof_ordered_by_in  IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_ordered_by_nin IN BOOLEAN := TRUE,
        id_prof_co_signed_in   IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        id_prof_co_signed_nin  IN BOOLEAN := TRUE,
        dt_created_in          IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_created_nin         IN BOOLEAN := TRUE,
        dt_ordered_by_in       IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_ordered_by_nin      IN BOOLEAN := TRUE,
        dt_co_signed_in        IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        dt_co_signed_nin       IN BOOLEAN := TRUE,
        flg_status_in          IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        co_sign_notes_in       IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        co_sign_notes_nin      IN BOOLEAN := TRUE,
        flg_made_auth_in       IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        flg_made_auth_nin      IN BOOLEAN := TRUE,
        create_user_in         IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_co_sign_n         NUMBER(1);
        l_id_task_n            NUMBER(1);
        l_id_task_group_n      NUMBER(1);
        l_id_task_type_n       NUMBER(1);
        l_id_action_n          NUMBER(1);
        l_id_order_type_n      NUMBER(1);
        l_id_episode_n         NUMBER(1);
        l_id_prof_created_n    NUMBER(1);
        l_id_prof_ordered_by_n NUMBER(1);
        l_id_prof_co_signed_n  NUMBER(1);
        l_dt_created_n         NUMBER(1);
        l_dt_ordered_by_n      NUMBER(1);
        l_dt_co_signed_n       NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_co_sign_notes_n      NUMBER(1);
        l_flg_made_auth_n      NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
    BEGIN
    
        l_id_co_sign_n         := sys.diutil.bool_to_int(id_co_sign_nin);
        l_id_task_n            := sys.diutil.bool_to_int(id_task_nin);
        l_id_task_group_n      := sys.diutil.bool_to_int(id_task_group_nin);
        l_id_task_type_n       := sys.diutil.bool_to_int(id_task_type_nin);
        l_id_action_n          := sys.diutil.bool_to_int(id_action_nin);
        l_id_order_type_n      := sys.diutil.bool_to_int(id_order_type_nin);
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_id_prof_created_n    := sys.diutil.bool_to_int(id_prof_created_nin);
        l_id_prof_ordered_by_n := sys.diutil.bool_to_int(id_prof_ordered_by_nin);
        l_id_prof_co_signed_n  := sys.diutil.bool_to_int(id_prof_co_signed_nin);
        l_dt_created_n         := sys.diutil.bool_to_int(dt_created_nin);
        l_dt_ordered_by_n      := sys.diutil.bool_to_int(dt_ordered_by_nin);
        l_dt_co_signed_n       := sys.diutil.bool_to_int(dt_co_signed_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_co_sign_notes_n      := sys.diutil.bool_to_int(co_sign_notes_nin);
        l_flg_made_auth_n      := sys.diutil.bool_to_int(flg_made_auth_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE co_sign_hist
           SET id_co_sign         = decode(l_id_co_sign_n, 0, id_co_sign_in, nvl(id_co_sign_in, id_co_sign)),
               id_task            = decode(l_id_task_n, 0, id_task_in, nvl(id_task_in, id_task)),
               id_task_group      = decode(l_id_task_group_n, 0, id_task_group_in, nvl(id_task_group_in, id_task_group)),
               id_task_type       = decode(l_id_task_type_n, 0, id_task_type_in, nvl(id_task_type_in, id_task_type)),
               id_action          = decode(l_id_action_n, 0, id_action_in, nvl(id_action_in, id_action)),
               id_order_type      = decode(l_id_order_type_n, 0, id_order_type_in, nvl(id_order_type_in, id_order_type)),
               id_episode         = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_prof_created    = decode(l_id_prof_created_n,
                                           0,
                                           id_prof_created_in,
                                           nvl(id_prof_created_in, id_prof_created)),
               id_prof_ordered_by = decode(l_id_prof_ordered_by_n,
                                           0,
                                           id_prof_ordered_by_in,
                                           nvl(id_prof_ordered_by_in, id_prof_ordered_by)),
               id_prof_co_signed  = decode(l_id_prof_co_signed_n,
                                           0,
                                           id_prof_co_signed_in,
                                           nvl(id_prof_co_signed_in, id_prof_co_signed)),
               dt_created         = decode(l_dt_created_n, 0, dt_created_in, nvl(dt_created_in, dt_created)),
               dt_ordered_by      = decode(l_dt_ordered_by_n, 0, dt_ordered_by_in, nvl(dt_ordered_by_in, dt_ordered_by)),
               dt_co_signed       = decode(l_dt_co_signed_n, 0, dt_co_signed_in, nvl(dt_co_signed_in, dt_co_signed)),
               flg_status         = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               co_sign_notes      = decode(l_co_sign_notes_n, 0, co_sign_notes_in, nvl(co_sign_notes_in, co_sign_notes)),
               flg_made_auth      = decode(l_flg_made_auth_n, 0, flg_made_auth_in, nvl(flg_made_auth_in, flg_made_auth)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution))
         WHERE id_co_sign_hist = id_co_sign_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'CSH_PK_IDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "CSH_PK_IDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'CO_SIGN_HIST',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CO_SIGN_HIST',
                                                        value_in           => id_co_sign_hist_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'CO_SIGN_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    IF l_name = 'CSH_CO_SIGN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CO_SIGN',
                                                        value_in           => id_co_sign_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_co_sign_hist_in     IN co_sign_hist.id_co_sign_hist%TYPE,
        id_co_sign_in          IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_co_sign_nin         IN BOOLEAN := TRUE,
        id_task_in             IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_nin            IN BOOLEAN := TRUE,
        id_task_group_in       IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_group_nin      IN BOOLEAN := TRUE,
        id_task_type_in        IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_task_type_nin       IN BOOLEAN := TRUE,
        id_action_in           IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_action_nin          IN BOOLEAN := TRUE,
        id_order_type_in       IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_order_type_nin      IN BOOLEAN := TRUE,
        id_episode_in          IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_prof_created_in     IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_created_nin    IN BOOLEAN := TRUE,
        id_prof_ordered_by_in  IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_ordered_by_nin IN BOOLEAN := TRUE,
        id_prof_co_signed_in   IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        id_prof_co_signed_nin  IN BOOLEAN := TRUE,
        dt_created_in          IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_created_nin         IN BOOLEAN := TRUE,
        dt_ordered_by_in       IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_ordered_by_nin      IN BOOLEAN := TRUE,
        dt_co_signed_in        IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        dt_co_signed_nin       IN BOOLEAN := TRUE,
        flg_status_in          IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        co_sign_notes_in       IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        co_sign_notes_nin      IN BOOLEAN := TRUE,
        flg_made_auth_in       IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        flg_made_auth_nin      IN BOOLEAN := TRUE,
        create_user_in         IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_co_sign_hist_in     => id_co_sign_hist_in,
            id_co_sign_in          => id_co_sign_in,
            id_co_sign_nin         => id_co_sign_nin,
            id_task_in             => id_task_in,
            id_task_nin            => id_task_nin,
            id_task_group_in       => id_task_group_in,
            id_task_group_nin      => id_task_group_nin,
            id_task_type_in        => id_task_type_in,
            id_task_type_nin       => id_task_type_nin,
            id_action_in           => id_action_in,
            id_action_nin          => id_action_nin,
            id_order_type_in       => id_order_type_in,
            id_order_type_nin      => id_order_type_nin,
            id_episode_in          => id_episode_in,
            id_episode_nin         => id_episode_nin,
            id_prof_created_in     => id_prof_created_in,
            id_prof_created_nin    => id_prof_created_nin,
            id_prof_ordered_by_in  => id_prof_ordered_by_in,
            id_prof_ordered_by_nin => id_prof_ordered_by_nin,
            id_prof_co_signed_in   => id_prof_co_signed_in,
            id_prof_co_signed_nin  => id_prof_co_signed_nin,
            dt_created_in          => dt_created_in,
            dt_created_nin         => dt_created_nin,
            dt_ordered_by_in       => dt_ordered_by_in,
            dt_ordered_by_nin      => dt_ordered_by_nin,
            dt_co_signed_in        => dt_co_signed_in,
            dt_co_signed_nin       => dt_co_signed_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            co_sign_notes_in       => co_sign_notes_in,
            co_sign_notes_nin      => co_sign_notes_nin,
            flg_made_auth_in       => flg_made_auth_in,
            flg_made_auth_nin      => flg_made_auth_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_co_sign_in          IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_co_sign_nin         IN BOOLEAN := TRUE,
        id_task_in             IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_nin            IN BOOLEAN := TRUE,
        id_task_group_in       IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_group_nin      IN BOOLEAN := TRUE,
        id_task_type_in        IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_task_type_nin       IN BOOLEAN := TRUE,
        id_action_in           IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_action_nin          IN BOOLEAN := TRUE,
        id_order_type_in       IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_order_type_nin      IN BOOLEAN := TRUE,
        id_episode_in          IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_prof_created_in     IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_created_nin    IN BOOLEAN := TRUE,
        id_prof_ordered_by_in  IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_ordered_by_nin IN BOOLEAN := TRUE,
        id_prof_co_signed_in   IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        id_prof_co_signed_nin  IN BOOLEAN := TRUE,
        dt_created_in          IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_created_nin         IN BOOLEAN := TRUE,
        dt_ordered_by_in       IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_ordered_by_nin      IN BOOLEAN := TRUE,
        dt_co_signed_in        IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        dt_co_signed_nin       IN BOOLEAN := TRUE,
        flg_status_in          IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        co_sign_notes_in       IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        co_sign_notes_nin      IN BOOLEAN := TRUE,
        flg_made_auth_in       IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        flg_made_auth_nin      IN BOOLEAN := TRUE,
        create_user_in         IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_id_co_sign_n         NUMBER(1);
        l_id_task_n            NUMBER(1);
        l_id_task_group_n      NUMBER(1);
        l_id_task_type_n       NUMBER(1);
        l_id_action_n          NUMBER(1);
        l_id_order_type_n      NUMBER(1);
        l_id_episode_n         NUMBER(1);
        l_id_prof_created_n    NUMBER(1);
        l_id_prof_ordered_by_n NUMBER(1);
        l_id_prof_co_signed_n  NUMBER(1);
        l_dt_created_n         NUMBER(1);
        l_dt_ordered_by_n      NUMBER(1);
        l_dt_co_signed_n       NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_co_sign_notes_n      NUMBER(1);
        l_flg_made_auth_n      NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        id_co_sign_hist_in     co_sign_hist.id_co_sign_hist%TYPE;
    BEGIN
    
        l_id_co_sign_n         := sys.diutil.bool_to_int(id_co_sign_nin);
        l_id_task_n            := sys.diutil.bool_to_int(id_task_nin);
        l_id_task_group_n      := sys.diutil.bool_to_int(id_task_group_nin);
        l_id_task_type_n       := sys.diutil.bool_to_int(id_task_type_nin);
        l_id_action_n          := sys.diutil.bool_to_int(id_action_nin);
        l_id_order_type_n      := sys.diutil.bool_to_int(id_order_type_nin);
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_id_prof_created_n    := sys.diutil.bool_to_int(id_prof_created_nin);
        l_id_prof_ordered_by_n := sys.diutil.bool_to_int(id_prof_ordered_by_nin);
        l_id_prof_co_signed_n  := sys.diutil.bool_to_int(id_prof_co_signed_nin);
        l_dt_created_n         := sys.diutil.bool_to_int(dt_created_nin);
        l_dt_ordered_by_n      := sys.diutil.bool_to_int(dt_ordered_by_nin);
        l_dt_co_signed_n       := sys.diutil.bool_to_int(dt_co_signed_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_co_sign_notes_n      := sys.diutil.bool_to_int(co_sign_notes_nin);
        l_flg_made_auth_n      := sys.diutil.bool_to_int(flg_made_auth_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE CO_SIGN_HIST SET ' || ' ID_CO_SIGN = decode (' || l_id_co_sign_n ||
                 ',0,:id_co_sign_in, NVL (:id_co_sign_in, ID_CO_SIGN)) ' || ',' || ' ID_TASK = decode (' || l_id_task_n ||
                 ',0,:id_task_in, NVL (:id_task_in, ID_TASK)) ' || ',' || ' ID_TASK_GROUP = decode (' ||
                 l_id_task_group_n || ',0,:id_task_group_in, NVL (:id_task_group_in, ID_TASK_GROUP)) ' || ',' ||
                 ' ID_TASK_TYPE = decode (' || l_id_task_type_n ||
                 ',0,:id_task_type_in, NVL (:id_task_type_in, ID_TASK_TYPE)) ' || ',' || ' ID_ACTION = decode (' ||
                 l_id_action_n || ',0,:id_action_in, NVL (:id_action_in, ID_ACTION)) ' || ',' ||
                 ' ID_ORDER_TYPE = decode (' || l_id_order_type_n ||
                 ',0,:id_order_type_in, NVL (:id_order_type_in, ID_ORDER_TYPE)) ' || ',' || ' ID_EPISODE = decode (' ||
                 l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_PROF_CREATED = decode (' || l_id_prof_created_n ||
                 ',0,:id_prof_created_in, NVL (:id_prof_created_in, ID_PROF_CREATED)) ' || ',' ||
                 ' ID_PROF_ORDERED_BY = decode (' || l_id_prof_ordered_by_n ||
                 ',0,:id_prof_ordered_by_in, NVL (:id_prof_ordered_by_in, ID_PROF_ORDERED_BY)) ' || ',' ||
                 ' ID_PROF_CO_SIGNED = decode (' || l_id_prof_co_signed_n ||
                 ',0,:id_prof_co_signed_in, NVL (:id_prof_co_signed_in, ID_PROF_CO_SIGNED)) ' || ',' ||
                 ' DT_CREATED = decode (' || l_dt_created_n || ',0,:dt_created_in, NVL (:dt_created_in, DT_CREATED)) ' || ',' ||
                 ' DT_ORDERED_BY = decode (' || l_dt_ordered_by_n ||
                 ',0,:dt_ordered_by_in, NVL (:dt_ordered_by_in, DT_ORDERED_BY)) ' || ',' || ' DT_CO_SIGNED = decode (' ||
                 l_dt_co_signed_n || ',0,:dt_co_signed_in, NVL (:dt_co_signed_in, DT_CO_SIGNED)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' CO_SIGN_NOTES = decode (' || l_co_sign_notes_n ||
                 ',0,:co_sign_notes_in, NVL (:co_sign_notes_in, CO_SIGN_NOTES)) ' || ',' || ' FLG_MADE_AUTH = decode (' ||
                 l_flg_made_auth_n || ',0,:flg_made_auth_in, NVL (:flg_made_auth_in, FLG_MADE_AUTH)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_co_sign_in, id_task_in, id_task_group_in, id_task_type_in, id_action_in, id_order_type_in, id_episode_in, id_prof_created_in, id_prof_ordered_by_in, id_prof_co_signed_in, dt_created_in, dt_ordered_by_in, dt_co_signed_in, flg_status_in, co_sign_notes_in, flg_made_auth_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'CSH_PK_IDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "CSH_PK_IDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'CO_SIGN_HIST',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CO_SIGN_HIST',
                                                        value_in           => id_co_sign_hist_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'CO_SIGN_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    IF l_name = 'CSH_CO_SIGN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CO_SIGN',
                                                        value_in           => id_co_sign_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_co_sign_in          IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_co_sign_nin         IN BOOLEAN := TRUE,
        id_task_in             IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_nin            IN BOOLEAN := TRUE,
        id_task_group_in       IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_group_nin      IN BOOLEAN := TRUE,
        id_task_type_in        IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_task_type_nin       IN BOOLEAN := TRUE,
        id_action_in           IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_action_nin          IN BOOLEAN := TRUE,
        id_order_type_in       IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_order_type_nin      IN BOOLEAN := TRUE,
        id_episode_in          IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_prof_created_in     IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_created_nin    IN BOOLEAN := TRUE,
        id_prof_ordered_by_in  IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_ordered_by_nin IN BOOLEAN := TRUE,
        id_prof_co_signed_in   IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        id_prof_co_signed_nin  IN BOOLEAN := TRUE,
        dt_created_in          IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_created_nin         IN BOOLEAN := TRUE,
        dt_ordered_by_in       IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_ordered_by_nin      IN BOOLEAN := TRUE,
        dt_co_signed_in        IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        dt_co_signed_nin       IN BOOLEAN := TRUE,
        flg_status_in          IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        co_sign_notes_in       IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        co_sign_notes_nin      IN BOOLEAN := TRUE,
        flg_made_auth_in       IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        flg_made_auth_nin      IN BOOLEAN := TRUE,
        create_user_in         IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_co_sign_in          => id_co_sign_in,
            id_co_sign_nin         => id_co_sign_nin,
            id_task_in             => id_task_in,
            id_task_nin            => id_task_nin,
            id_task_group_in       => id_task_group_in,
            id_task_group_nin      => id_task_group_nin,
            id_task_type_in        => id_task_type_in,
            id_task_type_nin       => id_task_type_nin,
            id_action_in           => id_action_in,
            id_action_nin          => id_action_nin,
            id_order_type_in       => id_order_type_in,
            id_order_type_nin      => id_order_type_nin,
            id_episode_in          => id_episode_in,
            id_episode_nin         => id_episode_nin,
            id_prof_created_in     => id_prof_created_in,
            id_prof_created_nin    => id_prof_created_nin,
            id_prof_ordered_by_in  => id_prof_ordered_by_in,
            id_prof_ordered_by_nin => id_prof_ordered_by_nin,
            id_prof_co_signed_in   => id_prof_co_signed_in,
            id_prof_co_signed_nin  => id_prof_co_signed_nin,
            dt_created_in          => dt_created_in,
            dt_created_nin         => dt_created_nin,
            dt_ordered_by_in       => dt_ordered_by_in,
            dt_ordered_by_nin      => dt_ordered_by_nin,
            dt_co_signed_in        => dt_co_signed_in,
            dt_co_signed_nin       => dt_co_signed_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            co_sign_notes_in       => co_sign_notes_in,
            co_sign_notes_nin      => co_sign_notes_nin,
            flg_made_auth_in       => flg_made_auth_in,
            flg_made_auth_nin      => flg_made_auth_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN co_sign_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_co_sign_hist_in    => rec_in.id_co_sign_hist,
            id_co_sign_in         => rec_in.id_co_sign,
            id_task_in            => rec_in.id_task,
            id_task_group_in      => rec_in.id_task_group,
            id_task_type_in       => rec_in.id_task_type,
            id_action_in          => rec_in.id_action,
            id_order_type_in      => rec_in.id_order_type,
            id_episode_in         => rec_in.id_episode,
            id_prof_created_in    => rec_in.id_prof_created,
            id_prof_ordered_by_in => rec_in.id_prof_ordered_by,
            id_prof_co_signed_in  => rec_in.id_prof_co_signed,
            dt_created_in         => rec_in.dt_created,
            dt_ordered_by_in      => rec_in.dt_ordered_by,
            dt_co_signed_in       => rec_in.dt_co_signed,
            flg_status_in         => rec_in.flg_status,
            co_sign_notes_in      => rec_in.co_sign_notes,
            flg_made_auth_in      => rec_in.flg_made_auth,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN co_sign_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_co_sign_hist_in    => rec_in.id_co_sign_hist,
            id_co_sign_in         => rec_in.id_co_sign,
            id_task_in            => rec_in.id_task,
            id_task_group_in      => rec_in.id_task_group,
            id_task_type_in       => rec_in.id_task_type,
            id_action_in          => rec_in.id_action,
            id_order_type_in      => rec_in.id_order_type,
            id_episode_in         => rec_in.id_episode,
            id_prof_created_in    => rec_in.id_prof_created,
            id_prof_ordered_by_in => rec_in.id_prof_ordered_by,
            id_prof_co_signed_in  => rec_in.id_prof_co_signed,
            dt_created_in         => rec_in.dt_created,
            dt_ordered_by_in      => rec_in.dt_ordered_by,
            dt_co_signed_in       => rec_in.dt_co_signed,
            flg_status_in         => rec_in.flg_status,
            co_sign_notes_in      => rec_in.co_sign_notes,
            flg_made_auth_in      => rec_in.flg_made_auth,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_co_sign_hist_in    IN co_sign_hist.id_co_sign_hist%TYPE,
        id_co_sign_in         IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_task_in            IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_group_in      IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_type_in       IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_action_in          IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_order_type_in      IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_episode_in         IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_created_in    IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_ordered_by_in IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_co_signed_in  IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        dt_created_in         IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_ordered_by_in      IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_co_signed_in       IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        flg_status_in         IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        co_sign_notes_in      IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        flg_made_auth_in      IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        create_user_in        IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        upd(id_co_sign_hist_in    => id_co_sign_hist_in,
            id_co_sign_in         => id_co_sign_in,
            id_task_in            => id_task_in,
            id_task_group_in      => id_task_group_in,
            id_task_type_in       => id_task_type_in,
            id_action_in          => id_action_in,
            id_order_type_in      => id_order_type_in,
            id_episode_in         => id_episode_in,
            id_prof_created_in    => id_prof_created_in,
            id_prof_ordered_by_in => id_prof_ordered_by_in,
            id_prof_co_signed_in  => id_prof_co_signed_in,
            dt_created_in         => dt_created_in,
            dt_ordered_by_in      => dt_ordered_by_in,
            dt_co_signed_in       => dt_co_signed_in,
            flg_status_in         => flg_status_in,
            co_sign_notes_in      => co_sign_notes_in,
            flg_made_auth_in      => flg_made_auth_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_co_sign_hist_in    => id_co_sign_hist_in,
                id_co_sign_in         => id_co_sign_in,
                id_task_in            => id_task_in,
                id_task_group_in      => id_task_group_in,
                id_task_type_in       => id_task_type_in,
                id_action_in          => id_action_in,
                id_order_type_in      => id_order_type_in,
                id_episode_in         => id_episode_in,
                id_prof_created_in    => id_prof_created_in,
                id_prof_ordered_by_in => id_prof_ordered_by_in,
                id_prof_co_signed_in  => id_prof_co_signed_in,
                dt_created_in         => dt_created_in,
                dt_ordered_by_in      => dt_ordered_by_in,
                dt_co_signed_in       => dt_co_signed_in,
                flg_status_in         => flg_status_in,
                co_sign_notes_in      => co_sign_notes_in,
                flg_made_auth_in      => flg_made_auth_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_time_in        => update_time_in,
                update_institution_in => update_institution_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_co_sign_hist_in    IN co_sign_hist.id_co_sign_hist%TYPE,
        id_co_sign_in         IN co_sign_hist.id_co_sign%TYPE DEFAULT NULL,
        id_task_in            IN co_sign_hist.id_task%TYPE DEFAULT NULL,
        id_task_group_in      IN co_sign_hist.id_task_group%TYPE DEFAULT NULL,
        id_task_type_in       IN co_sign_hist.id_task_type%TYPE DEFAULT NULL,
        id_action_in          IN co_sign_hist.id_action%TYPE DEFAULT NULL,
        id_order_type_in      IN co_sign_hist.id_order_type%TYPE DEFAULT NULL,
        id_episode_in         IN co_sign_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_created_in    IN co_sign_hist.id_prof_created%TYPE DEFAULT NULL,
        id_prof_ordered_by_in IN co_sign_hist.id_prof_ordered_by%TYPE DEFAULT NULL,
        id_prof_co_signed_in  IN co_sign_hist.id_prof_co_signed%TYPE DEFAULT NULL,
        dt_created_in         IN co_sign_hist.dt_created%TYPE DEFAULT NULL,
        dt_ordered_by_in      IN co_sign_hist.dt_ordered_by%TYPE DEFAULT NULL,
        dt_co_signed_in       IN co_sign_hist.dt_co_signed%TYPE DEFAULT NULL,
        flg_status_in         IN co_sign_hist.flg_status%TYPE DEFAULT NULL,
        co_sign_notes_in      IN co_sign_hist.co_sign_notes%TYPE DEFAULT NULL,
        flg_made_auth_in      IN co_sign_hist.flg_made_auth%TYPE DEFAULT NULL,
        create_user_in        IN co_sign_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN co_sign_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN co_sign_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN co_sign_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN co_sign_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN co_sign_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_co_sign_hist_in,
                id_co_sign_in,
                id_task_in,
                id_task_group_in,
                id_task_type_in,
                id_action_in,
                id_order_type_in,
                id_episode_in,
                id_prof_created_in,
                id_prof_ordered_by_in,
                id_prof_co_signed_in,
                dt_created_in,
                dt_ordered_by_in,
                dt_co_signed_in,
                flg_status_in,
                co_sign_notes_in,
                flg_made_auth_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN co_sign_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_co_sign_hist    id_co_sign_hist_cc;
        l_id_co_sign         id_co_sign_cc;
        l_id_task            id_task_cc;
        l_id_task_group      id_task_group_cc;
        l_id_task_type       id_task_type_cc;
        l_id_action          id_action_cc;
        l_id_order_type      id_order_type_cc;
        l_id_episode         id_episode_cc;
        l_id_prof_created    id_prof_created_cc;
        l_id_prof_ordered_by id_prof_ordered_by_cc;
        l_id_prof_co_signed  id_prof_co_signed_cc;
        l_dt_created         dt_created_cc;
        l_dt_ordered_by      dt_ordered_by_cc;
        l_dt_co_signed       dt_co_signed_cc;
        l_flg_status         flg_status_cc;
        l_co_sign_notes      co_sign_notes_cc;
        l_flg_made_auth      flg_made_auth_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_time        update_time_cc;
        l_update_institution update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_co_sign_hist(i) := col_in(i).id_co_sign_hist;
            l_id_co_sign(i) := col_in(i).id_co_sign;
            l_id_task(i) := col_in(i).id_task;
            l_id_task_group(i) := col_in(i).id_task_group;
            l_id_task_type(i) := col_in(i).id_task_type;
            l_id_action(i) := col_in(i).id_action;
            l_id_order_type(i) := col_in(i).id_order_type;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_prof_created(i) := col_in(i).id_prof_created;
            l_id_prof_ordered_by(i) := col_in(i).id_prof_ordered_by;
            l_id_prof_co_signed(i) := col_in(i).id_prof_co_signed;
            l_dt_created(i) := col_in(i).dt_created;
            l_dt_ordered_by(i) := col_in(i).dt_ordered_by;
            l_dt_co_signed(i) := col_in(i).dt_co_signed;
            l_flg_status(i) := col_in(i).flg_status;
            l_co_sign_notes(i) := col_in(i).co_sign_notes;
            l_flg_made_auth(i) := col_in(i).flg_made_auth;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE co_sign_hist
                   SET id_co_sign         = nvl(l_id_co_sign(i), id_co_sign),
                       id_task            = nvl(l_id_task(i), id_task),
                       id_task_group      = nvl(l_id_task_group(i), id_task_group),
                       id_task_type       = nvl(l_id_task_type(i), id_task_type),
                       id_action          = nvl(l_id_action(i), id_action),
                       id_order_type      = nvl(l_id_order_type(i), id_order_type),
                       id_episode         = nvl(l_id_episode(i), id_episode),
                       id_prof_created    = nvl(l_id_prof_created(i), id_prof_created),
                       id_prof_ordered_by = nvl(l_id_prof_ordered_by(i), id_prof_ordered_by),
                       id_prof_co_signed  = nvl(l_id_prof_co_signed(i), id_prof_co_signed),
                       dt_created         = nvl(l_dt_created(i), dt_created),
                       dt_ordered_by      = nvl(l_dt_ordered_by(i), dt_ordered_by),
                       dt_co_signed       = nvl(l_dt_co_signed(i), dt_co_signed),
                       flg_status         = nvl(l_flg_status(i), flg_status),
                       co_sign_notes      = nvl(l_co_sign_notes(i), co_sign_notes),
                       flg_made_auth      = nvl(l_flg_made_auth(i), flg_made_auth),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution)
                 WHERE id_co_sign_hist = l_id_co_sign_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE co_sign_hist
                   SET id_co_sign         = l_id_co_sign(i),
                       id_task            = l_id_task(i),
                       id_task_group      = l_id_task_group(i),
                       id_task_type       = l_id_task_type(i),
                       id_action          = l_id_action(i),
                       id_order_type      = l_id_order_type(i),
                       id_episode         = l_id_episode(i),
                       id_prof_created    = l_id_prof_created(i),
                       id_prof_ordered_by = l_id_prof_ordered_by(i),
                       id_prof_co_signed  = l_id_prof_co_signed(i),
                       dt_created         = l_dt_created(i),
                       dt_ordered_by      = l_dt_ordered_by(i),
                       dt_co_signed       = l_dt_co_signed(i),
                       flg_status         = l_flg_status(i),
                       co_sign_notes      = l_co_sign_notes(i),
                       flg_made_auth      = l_flg_made_auth(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i)
                 WHERE id_co_sign_hist = l_id_co_sign_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN co_sign_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE CO_SIGN_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE CO_SIGN_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE CO_SIGN_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE CO_SIGN_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_co_sign_hist_in IN co_sign_hist.id_co_sign_hist%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM co_sign_hist
         WHERE id_co_sign_hist = id_co_sign_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_co_sign_hist_in IN co_sign_hist.id_co_sign_hist%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_co_sign_hist_in => id_co_sign_hist_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_CO_SIGN_HIST
    PROCEDURE del_id_co_sign_hist
    (
        id_co_sign_hist_in IN co_sign_hist.id_co_sign_hist%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM co_sign_hist
         WHERE id_co_sign_hist = id_co_sign_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_co_sign_hist;

    -- Delete all rows for primary key column ID_CO_SIGN_HIST
    PROCEDURE del_id_co_sign_hist
    (
        id_co_sign_hist_in IN co_sign_hist.id_co_sign_hist%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_co_sign_hist(id_co_sign_hist_in => id_co_sign_hist_in,
                            handle_error_in    => handle_error_in,
                            rows_out           => rows_out);
    END del_id_co_sign_hist;

    -- Delete for unique value of CSH_PK_IDX
    PROCEDURE del_csh_pk_idx
    (
        id_co_sign_hist_in IN co_sign_hist.id_co_sign_hist%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM co_sign_hist
         WHERE id_co_sign_hist = id_co_sign_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_csh_pk_idx;

    -- Delete for unique value of CSH_PK_IDX
    PROCEDURE del_csh_pk_idx
    (
        id_co_sign_hist_in IN co_sign_hist.id_co_sign_hist%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_csh_pk_idx(id_co_sign_hist_in => id_co_sign_hist_in,
                       handle_error_in    => handle_error_in,
                       rows_out           => rows_out);
    END del_csh_pk_idx;

    PROCEDURE del_csh_co_sign_fk
    (
        id_co_sign_in   IN co_sign_hist.id_co_sign%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM co_sign_hist
         WHERE id_co_sign = del_csh_co_sign_fk.id_co_sign_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_csh_co_sign_fk;

    PROCEDURE del_csh_co_sign_fk
    (
        id_co_sign_in   IN co_sign_hist.id_co_sign%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_csh_co_sign_fk(id_co_sign_in => id_co_sign_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_csh_co_sign_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM CO_SIGN_HIST';
        ELSE
            RETURN 'DELETE FROM CO_SIGN_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CO_SIGN_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CO_SIGN_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(co_sign_hist_inout IN OUT co_sign_hist%ROWTYPE) IS
    BEGIN
        co_sign_hist_inout.id_co_sign_hist    := NULL;
        co_sign_hist_inout.id_co_sign         := NULL;
        co_sign_hist_inout.id_task            := NULL;
        co_sign_hist_inout.id_task_group      := NULL;
        co_sign_hist_inout.id_task_type       := NULL;
        co_sign_hist_inout.id_action          := NULL;
        co_sign_hist_inout.id_order_type      := NULL;
        co_sign_hist_inout.id_episode         := NULL;
        co_sign_hist_inout.id_prof_created    := NULL;
        co_sign_hist_inout.id_prof_ordered_by := NULL;
        co_sign_hist_inout.id_prof_co_signed  := NULL;
        co_sign_hist_inout.dt_created         := NULL;
        co_sign_hist_inout.dt_ordered_by      := NULL;
        co_sign_hist_inout.dt_co_signed       := NULL;
        co_sign_hist_inout.flg_status         := NULL;
        co_sign_hist_inout.co_sign_notes      := NULL;
        co_sign_hist_inout.flg_made_auth      := NULL;
        co_sign_hist_inout.create_user        := NULL;
        co_sign_hist_inout.create_time        := NULL;
        co_sign_hist_inout.create_institution := NULL;
        co_sign_hist_inout.update_user        := NULL;
        co_sign_hist_inout.update_time        := NULL;
        co_sign_hist_inout.update_institution := NULL;
    END initrec;

    FUNCTION initrec RETURN co_sign_hist%ROWTYPE IS
        l_co_sign_hist co_sign_hist%ROWTYPE;
    BEGIN
        RETURN l_co_sign_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN co_sign_hist_tc IS
        data co_sign_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM co_sign_hist
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN co_sign_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data co_sign_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_co_sign_hist;
/
