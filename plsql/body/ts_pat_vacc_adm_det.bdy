/*-- Last Change Revision: $Rev: 1635167 $*/
/*-- Last Change by: $Author: teresa.coutinho $*/
/*-- Date of last change: $Date: 2014-09-18 14:45:31 +0100 (qui, 18 set 2014) $*/
CREATE OR REPLACE PACKAGE BODY TS_PAT_VACC_ADM_DET
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: September 18, 2014 10:32:42
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_pat_vacc_adm_det_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE
      ,
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO PAT_VACC_ADM_DET (
         ID_PAT_VACC_ADM_DET,
         ID_PAT_VACC_ADM,
         DT_TAKE,
         ID_DRUG_PRESC_PLAN,
         ID_EPISODE,
         FLG_STATUS,
         DT_CANCEL,
         ID_PROF_CANCEL,
         NOTES_CANCEL,
         DESC_VACCINE,
         LOT_NUMBER,
         DT_EXPIRATION,
         FLG_ADVERS_REACT,
         NOTES_ADVERS_REACT,
         APPLICATION_SPOT,
         REPORT_ORIG,
         NOTES,
         EMB_ID,
         ID_UNIT_MEASURE,
         ID_PROF_WRITES,
         DT_REG,
         ADW_LAST_UPDATE,
         ID_PAT_MEDICATION_LIST,
         DT_NEXT_TAKE,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         FLG_TYPE_DATE,
         ID_VACC_MANUFACTURER,
         CODE_MVX,
         FLG_REPORTED,
         ID_INFORMATION_SOURCE,
         ID_VACC_FUNDING_CAT,
         ID_VACC_FUNDING_SOURCE,
         ID_VACC_DOC_VIS,
         ID_VACC_ORIGIN,
         ORIGIN_DESC,
         VACC_ROUTE_DATA,
         ID_ADMINISTRED,
         ADMINISTRED_DESC,
         DT_DOC_DELIVERY_TSTZ,
         ID_VACC_ADV_REACTION,
         APPLICATION_SPOT_CODE,
         DOC_VIS_DESC,
         SUSPENDED_NOTES,
         ID_REASON_SUS,
         DT_SUSPENDED,
         ID_CANCEL_REASON,
         VERS,
         FUNDING_SOURCE_DESC
         )
      VALUES (
         id_pat_vacc_adm_det_in,
         id_pat_vacc_adm_in,
         dt_take_in,
         id_drug_presc_plan_in,
         id_episode_in,
         flg_status_in,
         dt_cancel_in,
         id_prof_cancel_in,
         notes_cancel_in,
         desc_vaccine_in,
         lot_number_in,
         dt_expiration_in,
         flg_advers_react_in,
         notes_advers_react_in,
         application_spot_in,
         report_orig_in,
         notes_in,
         emb_id_in,
         id_unit_measure_in,
         id_prof_writes_in,
         dt_reg_in,
         adw_last_update_in,
         id_pat_medication_list_in,
         dt_next_take_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         flg_type_date_in,
         id_vacc_manufacturer_in,
         code_mvx_in,
         flg_reported_in,
         id_information_source_in,
         id_vacc_funding_cat_in,
         id_vacc_funding_source_in,
         id_vacc_doc_vis_in,
         id_vacc_origin_in,
         origin_desc_in,
         vacc_route_data_in,
         id_administred_in,
         administred_desc_in,
         dt_doc_delivery_tstz_in,
         id_vacc_adv_reaction_in,
         application_spot_code_in,
         doc_vis_desc_in,
         suspended_notes_in,
         id_reason_sus_in,
         dt_suspended_in,
         id_cancel_reason_in,
         vers_in,
         funding_source_desc_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              PK_ALERT_EXCEPTIONS.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_VACC_ADM_DET');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           IF l_name = 'PAVAAD_EPIS_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'PAVAAD_PAVAA_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_VACC_ADM'
               , value_in => id_pat_vacc_adm_in);
           END IF;
           IF l_name = 'PAVAAD_PML_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_MEDICATION_LIST'
               , value_in => id_pat_medication_list_in);
           END IF;
           IF l_name = 'PVAD_CANCEL_REASON_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'REP_ADV_REACTION_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_ADV_REACTION'
               , value_in => id_vacc_adv_reaction_in);
           END IF;
           IF l_name = 'REP_DOC_VIS_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_DOC_VIS'
               , value_in => id_vacc_doc_vis_in);
           END IF;
           IF l_name = 'REP_FUNDING_CAT_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_FUNDING_CAT'
               , value_in => id_vacc_funding_cat_in);
           END IF;
           IF l_name = 'REP_FUNDING_SOURCE_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_FUNDING_SOURCE'
               , value_in => id_vacc_funding_source_in);
           END IF;
           IF l_name = 'REP_ORIGIN_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_ORIGIN'
               , value_in => id_vacc_origin_in);
           END IF;
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_pat_vacc_adm_det_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE
      ,
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_pat_vacc_adm_det_in => id_pat_vacc_adm_det_in
      ,
      id_pat_vacc_adm_in => id_pat_vacc_adm_in,
      dt_take_in => dt_take_in,
      id_drug_presc_plan_in => id_drug_presc_plan_in,
      id_episode_in => id_episode_in,
      flg_status_in => flg_status_in,
      dt_cancel_in => dt_cancel_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      desc_vaccine_in => desc_vaccine_in,
      lot_number_in => lot_number_in,
      dt_expiration_in => dt_expiration_in,
      flg_advers_react_in => flg_advers_react_in,
      notes_advers_react_in => notes_advers_react_in,
      application_spot_in => application_spot_in,
      report_orig_in => report_orig_in,
      notes_in => notes_in,
      emb_id_in => emb_id_in,
      id_unit_measure_in => id_unit_measure_in,
      id_prof_writes_in => id_prof_writes_in,
      dt_reg_in => dt_reg_in,
      adw_last_update_in => adw_last_update_in,
      id_pat_medication_list_in => id_pat_medication_list_in,
      dt_next_take_in => dt_next_take_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      flg_type_date_in => flg_type_date_in,
      id_vacc_manufacturer_in => id_vacc_manufacturer_in,
      code_mvx_in => code_mvx_in,
      flg_reported_in => flg_reported_in,
      id_information_source_in => id_information_source_in,
      id_vacc_funding_cat_in => id_vacc_funding_cat_in,
      id_vacc_funding_source_in => id_vacc_funding_source_in,
      id_vacc_doc_vis_in => id_vacc_doc_vis_in,
      id_vacc_origin_in => id_vacc_origin_in,
      origin_desc_in => origin_desc_in,
      vacc_route_data_in => vacc_route_data_in,
      id_administred_in => id_administred_in,
      administred_desc_in => administred_desc_in,
      dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
      id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
      application_spot_code_in => application_spot_code_in,
      doc_vis_desc_in => doc_vis_desc_in,
      suspended_notes_in => suspended_notes_in,
      id_reason_sus_in => id_reason_sus_in,
      dt_suspended_in => dt_suspended_in,
      id_cancel_reason_in => id_cancel_reason_in,
      vers_in => vers_in,
      funding_source_desc_in => funding_source_desc_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN PAT_VACC_ADM_DET%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec PAT_VACC_ADM_DET%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_PAT_VACC_ADM_DET := next_key (sequence_in);
      END IF;
      ins (
         id_pat_vacc_adm_det_in => l_rec.ID_PAT_VACC_ADM_DET
         ,
         id_pat_vacc_adm_in => l_rec.ID_PAT_VACC_ADM,
         dt_take_in => l_rec.DT_TAKE,
         id_drug_presc_plan_in => l_rec.ID_DRUG_PRESC_PLAN,
         id_episode_in => l_rec.ID_EPISODE,
         flg_status_in => l_rec.FLG_STATUS,
         dt_cancel_in => l_rec.DT_CANCEL,
         id_prof_cancel_in => l_rec.ID_PROF_CANCEL,
         notes_cancel_in => l_rec.NOTES_CANCEL,
         desc_vaccine_in => l_rec.DESC_VACCINE,
         lot_number_in => l_rec.LOT_NUMBER,
         dt_expiration_in => l_rec.DT_EXPIRATION,
         flg_advers_react_in => l_rec.FLG_ADVERS_REACT,
         notes_advers_react_in => l_rec.NOTES_ADVERS_REACT,
         application_spot_in => l_rec.APPLICATION_SPOT,
         report_orig_in => l_rec.REPORT_ORIG,
         notes_in => l_rec.NOTES,
         emb_id_in => l_rec.EMB_ID,
         id_unit_measure_in => l_rec.ID_UNIT_MEASURE,
         id_prof_writes_in => l_rec.ID_PROF_WRITES,
         dt_reg_in => l_rec.DT_REG,
         adw_last_update_in => l_rec.ADW_LAST_UPDATE,
         id_pat_medication_list_in => l_rec.ID_PAT_MEDICATION_LIST,
         dt_next_take_in => l_rec.DT_NEXT_TAKE,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         flg_type_date_in => l_rec.FLG_TYPE_DATE,
         id_vacc_manufacturer_in => l_rec.ID_VACC_MANUFACTURER,
         code_mvx_in => l_rec.CODE_MVX,
         flg_reported_in => l_rec.FLG_REPORTED,
         id_information_source_in => l_rec.ID_INFORMATION_SOURCE,
         id_vacc_funding_cat_in => l_rec.ID_VACC_FUNDING_CAT,
         id_vacc_funding_source_in => l_rec.ID_VACC_FUNDING_SOURCE,
         id_vacc_doc_vis_in => l_rec.ID_VACC_DOC_VIS,
         id_vacc_origin_in => l_rec.ID_VACC_ORIGIN,
         origin_desc_in => l_rec.ORIGIN_DESC,
         vacc_route_data_in => l_rec.VACC_ROUTE_DATA,
         id_administred_in => l_rec.ID_ADMINISTRED,
         administred_desc_in => l_rec.ADMINISTRED_DESC,
         dt_doc_delivery_tstz_in => l_rec.DT_DOC_DELIVERY_TSTZ,
         id_vacc_adv_reaction_in => l_rec.ID_VACC_ADV_REACTION,
         application_spot_code_in => l_rec.APPLICATION_SPOT_CODE,
         doc_vis_desc_in => l_rec.DOC_VIS_DESC,
         suspended_notes_in => l_rec.SUSPENDED_NOTES,
         id_reason_sus_in => l_rec.ID_REASON_SUS,
         dt_suspended_in => l_rec.DT_SUSPENDED,
         id_cancel_reason_in => l_rec.ID_CANCEL_REASON,
         vers_in => l_rec.VERS,
         funding_source_desc_in => l_rec.FUNDING_SOURCE_DESC
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN PAT_VACC_ADM_DET%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE

   IS
     retval PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_PAT_VACC_ADM_DET.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        PK_ALERT_EXCEPTIONS.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_PAT_VACC_ADM_DET')
           );
   END next_key;

   PROCEDURE ins (
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
      id_pat_vacc_adm_det_out IN OUT PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE := next_key;
   BEGIN
      ins (
         id_pat_vacc_adm_det_in => l_pky,
         id_pat_vacc_adm_in => id_pat_vacc_adm_in,
         dt_take_in => dt_take_in,
         id_drug_presc_plan_in => id_drug_presc_plan_in,
         id_episode_in => id_episode_in,
         flg_status_in => flg_status_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         desc_vaccine_in => desc_vaccine_in,
         lot_number_in => lot_number_in,
         dt_expiration_in => dt_expiration_in,
         flg_advers_react_in => flg_advers_react_in,
         notes_advers_react_in => notes_advers_react_in,
         application_spot_in => application_spot_in,
         report_orig_in => report_orig_in,
         notes_in => notes_in,
         emb_id_in => emb_id_in,
         id_unit_measure_in => id_unit_measure_in,
         id_prof_writes_in => id_prof_writes_in,
         dt_reg_in => dt_reg_in,
         adw_last_update_in => adw_last_update_in,
         id_pat_medication_list_in => id_pat_medication_list_in,
         dt_next_take_in => dt_next_take_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_type_date_in => flg_type_date_in,
         id_vacc_manufacturer_in => id_vacc_manufacturer_in,
         code_mvx_in => code_mvx_in,
         flg_reported_in => flg_reported_in,
         id_information_source_in => id_information_source_in,
         id_vacc_funding_cat_in => id_vacc_funding_cat_in,
         id_vacc_funding_source_in => id_vacc_funding_source_in,
         id_vacc_doc_vis_in => id_vacc_doc_vis_in,
         id_vacc_origin_in => id_vacc_origin_in,
         origin_desc_in => origin_desc_in,
         vacc_route_data_in => vacc_route_data_in,
         id_administred_in => id_administred_in,
         administred_desc_in => administred_desc_in,
         dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
         id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
         application_spot_code_in => application_spot_code_in,
         doc_vis_desc_in => doc_vis_desc_in,
         suspended_notes_in => suspended_notes_in,
         id_reason_sus_in => id_reason_sus_in,
         dt_suspended_in => dt_suspended_in,
         id_cancel_reason_in => id_cancel_reason_in,
         vers_in => vers_in,
         funding_source_desc_in => funding_source_desc_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_pat_vacc_adm_det_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
      id_pat_vacc_adm_det_out IN OUT PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_pat_vacc_adm_in => id_pat_vacc_adm_in,
      dt_take_in => dt_take_in,
      id_drug_presc_plan_in => id_drug_presc_plan_in,
      id_episode_in => id_episode_in,
      flg_status_in => flg_status_in,
      dt_cancel_in => dt_cancel_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      desc_vaccine_in => desc_vaccine_in,
      lot_number_in => lot_number_in,
      dt_expiration_in => dt_expiration_in,
      flg_advers_react_in => flg_advers_react_in,
      notes_advers_react_in => notes_advers_react_in,
      application_spot_in => application_spot_in,
      report_orig_in => report_orig_in,
      notes_in => notes_in,
      emb_id_in => emb_id_in,
      id_unit_measure_in => id_unit_measure_in,
      id_prof_writes_in => id_prof_writes_in,
      dt_reg_in => dt_reg_in,
      adw_last_update_in => adw_last_update_in,
      id_pat_medication_list_in => id_pat_medication_list_in,
      dt_next_take_in => dt_next_take_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      flg_type_date_in => flg_type_date_in,
      id_vacc_manufacturer_in => id_vacc_manufacturer_in,
      code_mvx_in => code_mvx_in,
      flg_reported_in => flg_reported_in,
      id_information_source_in => id_information_source_in,
      id_vacc_funding_cat_in => id_vacc_funding_cat_in,
      id_vacc_funding_source_in => id_vacc_funding_source_in,
      id_vacc_doc_vis_in => id_vacc_doc_vis_in,
      id_vacc_origin_in => id_vacc_origin_in,
      origin_desc_in => origin_desc_in,
      vacc_route_data_in => vacc_route_data_in,
      id_administred_in => id_administred_in,
      administred_desc_in => administred_desc_in,
      dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
      id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
      application_spot_code_in => application_spot_code_in,
      doc_vis_desc_in => doc_vis_desc_in,
      suspended_notes_in => suspended_notes_in,
      id_reason_sus_in => id_reason_sus_in,
      dt_suspended_in => dt_suspended_in,
      id_cancel_reason_in => id_cancel_reason_in,
      vers_in => vers_in,
      funding_source_desc_in => funding_source_desc_in,
      id_pat_vacc_adm_det_out => id_pat_vacc_adm_det_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE
   IS
        l_pky PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE := next_key;
   BEGIN
      ins (
         id_pat_vacc_adm_det_in => l_pky,
         id_pat_vacc_adm_in => id_pat_vacc_adm_in,
         dt_take_in => dt_take_in,
         id_drug_presc_plan_in => id_drug_presc_plan_in,
         id_episode_in => id_episode_in,
         flg_status_in => flg_status_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         desc_vaccine_in => desc_vaccine_in,
         lot_number_in => lot_number_in,
         dt_expiration_in => dt_expiration_in,
         flg_advers_react_in => flg_advers_react_in,
         notes_advers_react_in => notes_advers_react_in,
         application_spot_in => application_spot_in,
         report_orig_in => report_orig_in,
         notes_in => notes_in,
         emb_id_in => emb_id_in,
         id_unit_measure_in => id_unit_measure_in,
         id_prof_writes_in => id_prof_writes_in,
         dt_reg_in => dt_reg_in,
         adw_last_update_in => adw_last_update_in,
         id_pat_medication_list_in => id_pat_medication_list_in,
         dt_next_take_in => dt_next_take_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_type_date_in => flg_type_date_in,
         id_vacc_manufacturer_in => id_vacc_manufacturer_in,
         code_mvx_in => code_mvx_in,
         flg_reported_in => flg_reported_in,
         id_information_source_in => id_information_source_in,
         id_vacc_funding_cat_in => id_vacc_funding_cat_in,
         id_vacc_funding_source_in => id_vacc_funding_source_in,
         id_vacc_doc_vis_in => id_vacc_doc_vis_in,
         id_vacc_origin_in => id_vacc_origin_in,
         origin_desc_in => origin_desc_in,
         vacc_route_data_in => vacc_route_data_in,
         id_administred_in => id_administred_in,
         administred_desc_in => administred_desc_in,
         dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
         id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
         application_spot_code_in => application_spot_code_in,
         doc_vis_desc_in => doc_vis_desc_in,
         suspended_notes_in => suspended_notes_in,
         id_reason_sus_in => id_reason_sus_in,
         dt_suspended_in => dt_suspended_in,
         id_cancel_reason_in => id_cancel_reason_in,
         vers_in => vers_in,
         funding_source_desc_in => funding_source_desc_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE
   IS
        l_pky PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_pat_vacc_adm_det_in => l_pky,
         id_pat_vacc_adm_in => id_pat_vacc_adm_in,
         dt_take_in => dt_take_in,
         id_drug_presc_plan_in => id_drug_presc_plan_in,
         id_episode_in => id_episode_in,
         flg_status_in => flg_status_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         desc_vaccine_in => desc_vaccine_in,
         lot_number_in => lot_number_in,
         dt_expiration_in => dt_expiration_in,
         flg_advers_react_in => flg_advers_react_in,
         notes_advers_react_in => notes_advers_react_in,
         application_spot_in => application_spot_in,
         report_orig_in => report_orig_in,
         notes_in => notes_in,
         emb_id_in => emb_id_in,
         id_unit_measure_in => id_unit_measure_in,
         id_prof_writes_in => id_prof_writes_in,
         dt_reg_in => dt_reg_in,
         adw_last_update_in => adw_last_update_in,
         id_pat_medication_list_in => id_pat_medication_list_in,
         dt_next_take_in => dt_next_take_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_type_date_in => flg_type_date_in,
         id_vacc_manufacturer_in => id_vacc_manufacturer_in,
         code_mvx_in => code_mvx_in,
         flg_reported_in => flg_reported_in,
         id_information_source_in => id_information_source_in,
         id_vacc_funding_cat_in => id_vacc_funding_cat_in,
         id_vacc_funding_source_in => id_vacc_funding_source_in,
         id_vacc_doc_vis_in => id_vacc_doc_vis_in,
         id_vacc_origin_in => id_vacc_origin_in,
         origin_desc_in => origin_desc_in,
         vacc_route_data_in => vacc_route_data_in,
         id_administred_in => id_administred_in,
         administred_desc_in => administred_desc_in,
         dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
         id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
         application_spot_code_in => application_spot_code_in,
         doc_vis_desc_in => doc_vis_desc_in,
         suspended_notes_in => suspended_notes_in,
         id_reason_sus_in => id_reason_sus_in,
         dt_suspended_in => dt_suspended_in,
         id_cancel_reason_in => id_cancel_reason_in,
         vers_in => vers_in,
         funding_source_desc_in => funding_source_desc_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE := next_key;
   BEGIN
      ins (
         id_pat_vacc_adm_det_in => l_pky,
         id_pat_vacc_adm_in => id_pat_vacc_adm_in,
         dt_take_in => dt_take_in,
         id_drug_presc_plan_in => id_drug_presc_plan_in,
         id_episode_in => id_episode_in,
         flg_status_in => flg_status_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         desc_vaccine_in => desc_vaccine_in,
         lot_number_in => lot_number_in,
         dt_expiration_in => dt_expiration_in,
         flg_advers_react_in => flg_advers_react_in,
         notes_advers_react_in => notes_advers_react_in,
         application_spot_in => application_spot_in,
         report_orig_in => report_orig_in,
         notes_in => notes_in,
         emb_id_in => emb_id_in,
         id_unit_measure_in => id_unit_measure_in,
         id_prof_writes_in => id_prof_writes_in,
         dt_reg_in => dt_reg_in,
         adw_last_update_in => adw_last_update_in,
         id_pat_medication_list_in => id_pat_medication_list_in,
         dt_next_take_in => dt_next_take_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_type_date_in => flg_type_date_in,
         id_vacc_manufacturer_in => id_vacc_manufacturer_in,
         code_mvx_in => code_mvx_in,
         flg_reported_in => flg_reported_in,
         id_information_source_in => id_information_source_in,
         id_vacc_funding_cat_in => id_vacc_funding_cat_in,
         id_vacc_funding_source_in => id_vacc_funding_source_in,
         id_vacc_doc_vis_in => id_vacc_doc_vis_in,
         id_vacc_origin_in => id_vacc_origin_in,
         origin_desc_in => origin_desc_in,
         vacc_route_data_in => vacc_route_data_in,
         id_administred_in => id_administred_in,
         administred_desc_in => administred_desc_in,
         dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
         id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
         application_spot_code_in => application_spot_code_in,
         doc_vis_desc_in => doc_vis_desc_in,
         suspended_notes_in => suspended_notes_in,
         id_reason_sus_in => id_reason_sus_in,
         dt_suspended_in => dt_suspended_in,
         id_cancel_reason_in => id_cancel_reason_in,
         vers_in => vers_in,
         funding_source_desc_in => funding_source_desc_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_pat_vacc_adm_det_in => l_pky,
         id_pat_vacc_adm_in => id_pat_vacc_adm_in,
         dt_take_in => dt_take_in,
         id_drug_presc_plan_in => id_drug_presc_plan_in,
         id_episode_in => id_episode_in,
         flg_status_in => flg_status_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         desc_vaccine_in => desc_vaccine_in,
         lot_number_in => lot_number_in,
         dt_expiration_in => dt_expiration_in,
         flg_advers_react_in => flg_advers_react_in,
         notes_advers_react_in => notes_advers_react_in,
         application_spot_in => application_spot_in,
         report_orig_in => report_orig_in,
         notes_in => notes_in,
         emb_id_in => emb_id_in,
         id_unit_measure_in => id_unit_measure_in,
         id_prof_writes_in => id_prof_writes_in,
         dt_reg_in => dt_reg_in,
         adw_last_update_in => adw_last_update_in,
         id_pat_medication_list_in => id_pat_medication_list_in,
         dt_next_take_in => dt_next_take_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_type_date_in => flg_type_date_in,
         id_vacc_manufacturer_in => id_vacc_manufacturer_in,
         code_mvx_in => code_mvx_in,
         flg_reported_in => flg_reported_in,
         id_information_source_in => id_information_source_in,
         id_vacc_funding_cat_in => id_vacc_funding_cat_in,
         id_vacc_funding_source_in => id_vacc_funding_source_in,
         id_vacc_doc_vis_in => id_vacc_doc_vis_in,
         id_vacc_origin_in => id_vacc_origin_in,
         origin_desc_in => origin_desc_in,
         vacc_route_data_in => vacc_route_data_in,
         id_administred_in => id_administred_in,
         administred_desc_in => administred_desc_in,
         dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
         id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
         application_spot_code_in => application_spot_code_in,
         doc_vis_desc_in => doc_vis_desc_in,
         suspended_notes_in => suspended_notes_in,
         id_reason_sus_in => id_reason_sus_in,
         dt_suspended_in => dt_suspended_in,
         id_cancel_reason_in => id_cancel_reason_in,
         vers_in => vers_in,
         funding_source_desc_in => funding_source_desc_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN PAT_VACC_ADM_DET_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
       FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO PAT_VACC_ADM_DET (
               ID_PAT_VACC_ADM_DET,
               ID_PAT_VACC_ADM,
               DT_TAKE,
               ID_DRUG_PRESC_PLAN,
               ID_EPISODE,
               FLG_STATUS,
               DT_CANCEL,
               ID_PROF_CANCEL,
               NOTES_CANCEL,
               DESC_VACCINE,
               LOT_NUMBER,
               DT_EXPIRATION,
               FLG_ADVERS_REACT,
               NOTES_ADVERS_REACT,
               APPLICATION_SPOT,
               REPORT_ORIG,
               NOTES,
               EMB_ID,
               ID_UNIT_MEASURE,
               ID_PROF_WRITES,
               DT_REG,
               ADW_LAST_UPDATE,
               ID_PAT_MEDICATION_LIST,
               DT_NEXT_TAKE,
               CREATE_USER,
               CREATE_TIME,
               CREATE_INSTITUTION,
               UPDATE_USER,
               UPDATE_TIME,
               UPDATE_INSTITUTION,
               FLG_TYPE_DATE,
               ID_VACC_MANUFACTURER,
               CODE_MVX,
               FLG_REPORTED,
               ID_INFORMATION_SOURCE,
               ID_VACC_FUNDING_CAT,
               ID_VACC_FUNDING_SOURCE,
               ID_VACC_DOC_VIS,
               ID_VACC_ORIGIN,
               ORIGIN_DESC,
               VACC_ROUTE_DATA,
               ID_ADMINISTRED,
               ADMINISTRED_DESC,
               DT_DOC_DELIVERY_TSTZ,
               ID_VACC_ADV_REACTION,
               APPLICATION_SPOT_CODE,
               DOC_VIS_DESC,
               SUSPENDED_NOTES,
               ID_REASON_SUS,
               DT_SUSPENDED,
               ID_CANCEL_REASON,
               VERS,
               FUNDING_SOURCE_DESC
               )
            VALUES (
               rows_in(indx).ID_PAT_VACC_ADM_DET,
               rows_in(indx).ID_PAT_VACC_ADM,
               rows_in(indx).DT_TAKE,
               rows_in(indx).ID_DRUG_PRESC_PLAN,
               rows_in(indx).ID_EPISODE,
               rows_in(indx).FLG_STATUS,
               rows_in(indx).DT_CANCEL,
               rows_in(indx).ID_PROF_CANCEL,
               rows_in(indx).NOTES_CANCEL,
               rows_in(indx).DESC_VACCINE,
               rows_in(indx).LOT_NUMBER,
               rows_in(indx).DT_EXPIRATION,
               rows_in(indx).FLG_ADVERS_REACT,
               rows_in(indx).NOTES_ADVERS_REACT,
               rows_in(indx).APPLICATION_SPOT,
               rows_in(indx).REPORT_ORIG,
               rows_in(indx).NOTES,
               rows_in(indx).EMB_ID,
               rows_in(indx).ID_UNIT_MEASURE,
               rows_in(indx).ID_PROF_WRITES,
               rows_in(indx).DT_REG,
               rows_in(indx).ADW_LAST_UPDATE,
               rows_in(indx).ID_PAT_MEDICATION_LIST,
               rows_in(indx).DT_NEXT_TAKE,
               rows_in(indx).CREATE_USER,
               rows_in(indx).CREATE_TIME,
               rows_in(indx).CREATE_INSTITUTION,
               rows_in(indx).UPDATE_USER,
               rows_in(indx).UPDATE_TIME,
               rows_in(indx).UPDATE_INSTITUTION,
               rows_in(indx).FLG_TYPE_DATE,
               rows_in(indx).ID_VACC_MANUFACTURER,
               rows_in(indx).CODE_MVX,
               rows_in(indx).FLG_REPORTED,
               rows_in(indx).ID_INFORMATION_SOURCE,
               rows_in(indx).ID_VACC_FUNDING_CAT,
               rows_in(indx).ID_VACC_FUNDING_SOURCE,
               rows_in(indx).ID_VACC_DOC_VIS,
               rows_in(indx).ID_VACC_ORIGIN,
               rows_in(indx).ORIGIN_DESC,
               rows_in(indx).VACC_ROUTE_DATA,
               rows_in(indx).ID_ADMINISTRED,
               rows_in(indx).ADMINISTRED_DESC,
               rows_in(indx).DT_DOC_DELIVERY_TSTZ,
               rows_in(indx).ID_VACC_ADV_REACTION,
               rows_in(indx).APPLICATION_SPOT_CODE,
               rows_in(indx).DOC_VIS_DESC,
               rows_in(indx).SUSPENDED_NOTES,
               rows_in(indx).ID_REASON_SUS,
               rows_in(indx).DT_SUSPENDED,
               rows_in(indx).ID_CANCEL_REASON,
               rows_in(indx).VERS,
               rows_in(indx).FUNDING_SOURCE_DESC
               ) RETURNING ROWID BULK COLLECT INTO rows_out;

      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                PK_ALERT_EXCEPTIONS.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQLERRM (-SQL%BULK_EXCEPTIONS (indx).ERROR_CODE)
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PAT_VACC_ADM_DET _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PAT_VACC_ADM_DET
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PAT_VACC_ADM _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PAT_VACC_ADM
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_TAKE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_TAKE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_DRUG_PRESC_PLAN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_DRUG_PRESC_PLAN
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_EPISODE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_STATUS
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_CANCEL
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_CANCEL
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NOTES_CANCEL
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DESC_VACCINE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DESC_VACCINE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'LOT_NUMBER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).LOT_NUMBER
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_EXPIRATION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_EXPIRATION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_ADVERS_REACT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_ADVERS_REACT
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_ADVERS_REACT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NOTES_ADVERS_REACT
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'APPLICATION_SPOT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).APPLICATION_SPOT
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'REPORT_ORIG _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).REPORT_ORIG
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NOTES
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'EMB_ID _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).EMB_ID
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_UNIT_MEASURE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_UNIT_MEASURE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_WRITES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_WRITES
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_REG _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_REG
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ADW_LAST_UPDATE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ADW_LAST_UPDATE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PAT_MEDICATION_LIST _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PAT_MEDICATION_LIST
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_NEXT_TAKE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_NEXT_TAKE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_TYPE_DATE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_TYPE_DATE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VACC_MANUFACTURER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_VACC_MANUFACTURER
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CODE_MVX _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CODE_MVX
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_REPORTED _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_REPORTED
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_INFORMATION_SOURCE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_INFORMATION_SOURCE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VACC_FUNDING_CAT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_VACC_FUNDING_CAT
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VACC_FUNDING_SOURCE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_VACC_FUNDING_SOURCE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VACC_DOC_VIS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_VACC_DOC_VIS
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VACC_ORIGIN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_VACC_ORIGIN
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ORIGIN_DESC _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ORIGIN_DESC
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'VACC_ROUTE_DATA _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).VACC_ROUTE_DATA
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_ADMINISTRED _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_ADMINISTRED
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ADMINISTRED_DESC _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ADMINISTRED_DESC
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_DOC_DELIVERY_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_DOC_DELIVERY_TSTZ
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VACC_ADV_REACTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_VACC_ADV_REACTION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'APPLICATION_SPOT_CODE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).APPLICATION_SPOT_CODE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DOC_VIS_DESC _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DOC_VIS_DESC
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'SUSPENDED_NOTES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).SUSPENDED_NOTES
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_REASON_SUS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_REASON_SUS
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_SUSPENDED _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_SUSPENDED
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CANCEL_REASON _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CANCEL_REASON
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'VERS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).VERS
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FUNDING_SOURCE_DESC _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FUNDING_SOURCE_DESC
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       PK_ALERT_EXCEPTIONS.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'PAT_VACC_ADM_DET'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN PAT_VACC_ADM_DET_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_pat_vacc_adm_det_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE,
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      ID_PAT_VACC_ADM_nin IN BOOLEAN := TRUE,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      DT_TAKE_nin IN BOOLEAN := TRUE,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      ID_DRUG_PRESC_PLAN_nin IN BOOLEAN := TRUE,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      DESC_VACCINE_nin IN BOOLEAN := TRUE,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      LOT_NUMBER_nin IN BOOLEAN := TRUE,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      DT_EXPIRATION_nin IN BOOLEAN := TRUE,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      FLG_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      NOTES_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      APPLICATION_SPOT_nin IN BOOLEAN := TRUE,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      REPORT_ORIG_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      EMB_ID_nin IN BOOLEAN := TRUE,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      ID_PROF_WRITES_nin IN BOOLEAN := TRUE,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      DT_REG_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      ID_PAT_MEDICATION_LIST_nin IN BOOLEAN := TRUE,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      DT_NEXT_TAKE_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      FLG_TYPE_DATE_nin IN BOOLEAN := TRUE,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      ID_VACC_MANUFACTURER_nin IN BOOLEAN := TRUE,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      CODE_MVX_nin IN BOOLEAN := TRUE,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      FLG_REPORTED_nin IN BOOLEAN := TRUE,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      ID_INFORMATION_SOURCE_nin IN BOOLEAN := TRUE,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_CAT_nin IN BOOLEAN := TRUE,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_SOURCE_nin IN BOOLEAN := TRUE,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      ID_VACC_DOC_VIS_nin IN BOOLEAN := TRUE,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      ID_VACC_ORIGIN_nin IN BOOLEAN := TRUE,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      ORIGIN_DESC_nin IN BOOLEAN := TRUE,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      VACC_ROUTE_DATA_nin IN BOOLEAN := TRUE,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      ID_ADMINISTRED_nin IN BOOLEAN := TRUE,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ADMINISTRED_DESC_nin IN BOOLEAN := TRUE,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      DT_DOC_DELIVERY_TSTZ_nin IN BOOLEAN := TRUE,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      ID_VACC_ADV_REACTION_nin IN BOOLEAN := TRUE,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      APPLICATION_SPOT_CODE_nin IN BOOLEAN := TRUE,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      DOC_VIS_DESC_nin IN BOOLEAN := TRUE,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      SUSPENDED_NOTES_nin IN BOOLEAN := TRUE,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      ID_REASON_SUS_nin IN BOOLEAN := TRUE,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      DT_SUSPENDED_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      VERS_nin IN BOOLEAN := TRUE,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
      FUNDING_SOURCE_DESC_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_PAT_VACC_ADM_n NUMBER(1);
   l_DT_TAKE_n NUMBER(1);
   l_ID_DRUG_PRESC_PLAN_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_DT_CANCEL_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_DESC_VACCINE_n NUMBER(1);
   l_LOT_NUMBER_n NUMBER(1);
   l_DT_EXPIRATION_n NUMBER(1);
   l_FLG_ADVERS_REACT_n NUMBER(1);
   l_NOTES_ADVERS_REACT_n NUMBER(1);
   l_APPLICATION_SPOT_n NUMBER(1);
   l_REPORT_ORIG_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_EMB_ID_n NUMBER(1);
   l_ID_UNIT_MEASURE_n NUMBER(1);
   l_ID_PROF_WRITES_n NUMBER(1);
   l_DT_REG_n NUMBER(1);
   l_ADW_LAST_UPDATE_n NUMBER(1);
   l_ID_PAT_MEDICATION_LIST_n NUMBER(1);
   l_DT_NEXT_TAKE_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_FLG_TYPE_DATE_n NUMBER(1);
   l_ID_VACC_MANUFACTURER_n NUMBER(1);
   l_CODE_MVX_n NUMBER(1);
   l_FLG_REPORTED_n NUMBER(1);
   l_ID_INFORMATION_SOURCE_n NUMBER(1);
   l_ID_VACC_FUNDING_CAT_n NUMBER(1);
   l_ID_VACC_FUNDING_SOURCE_n NUMBER(1);
   l_ID_VACC_DOC_VIS_n NUMBER(1);
   l_ID_VACC_ORIGIN_n NUMBER(1);
   l_ORIGIN_DESC_n NUMBER(1);
   l_VACC_ROUTE_DATA_n NUMBER(1);
   l_ID_ADMINISTRED_n NUMBER(1);
   l_ADMINISTRED_DESC_n NUMBER(1);
   l_DT_DOC_DELIVERY_TSTZ_n NUMBER(1);
   l_ID_VACC_ADV_REACTION_n NUMBER(1);
   l_APPLICATION_SPOT_CODE_n NUMBER(1);
   l_DOC_VIS_DESC_n NUMBER(1);
   l_SUSPENDED_NOTES_n NUMBER(1);
   l_ID_REASON_SUS_n NUMBER(1);
   l_DT_SUSPENDED_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_VERS_n NUMBER(1);
   l_FUNDING_SOURCE_DESC_n NUMBER(1);
   BEGIN

   l_ID_PAT_VACC_ADM_n := sys.diutil.bool_to_int(ID_PAT_VACC_ADM_nin);
   l_DT_TAKE_n := sys.diutil.bool_to_int(DT_TAKE_nin);
   l_ID_DRUG_PRESC_PLAN_n := sys.diutil.bool_to_int(ID_DRUG_PRESC_PLAN_nin);
   l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_DT_CANCEL_n := sys.diutil.bool_to_int(DT_CANCEL_nin);
   l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
   l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
   l_DESC_VACCINE_n := sys.diutil.bool_to_int(DESC_VACCINE_nin);
   l_LOT_NUMBER_n := sys.diutil.bool_to_int(LOT_NUMBER_nin);
   l_DT_EXPIRATION_n := sys.diutil.bool_to_int(DT_EXPIRATION_nin);
   l_FLG_ADVERS_REACT_n := sys.diutil.bool_to_int(FLG_ADVERS_REACT_nin);
   l_NOTES_ADVERS_REACT_n := sys.diutil.bool_to_int(NOTES_ADVERS_REACT_nin);
   l_APPLICATION_SPOT_n := sys.diutil.bool_to_int(APPLICATION_SPOT_nin);
   l_REPORT_ORIG_n := sys.diutil.bool_to_int(REPORT_ORIG_nin);
   l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
   l_EMB_ID_n := sys.diutil.bool_to_int(EMB_ID_nin);
   l_ID_UNIT_MEASURE_n := sys.diutil.bool_to_int(ID_UNIT_MEASURE_nin);
   l_ID_PROF_WRITES_n := sys.diutil.bool_to_int(ID_PROF_WRITES_nin);
   l_DT_REG_n := sys.diutil.bool_to_int(DT_REG_nin);
   l_ADW_LAST_UPDATE_n := sys.diutil.bool_to_int(ADW_LAST_UPDATE_nin);
   l_ID_PAT_MEDICATION_LIST_n := sys.diutil.bool_to_int(ID_PAT_MEDICATION_LIST_nin);
   l_DT_NEXT_TAKE_n := sys.diutil.bool_to_int(DT_NEXT_TAKE_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_FLG_TYPE_DATE_n := sys.diutil.bool_to_int(FLG_TYPE_DATE_nin);
   l_ID_VACC_MANUFACTURER_n := sys.diutil.bool_to_int(ID_VACC_MANUFACTURER_nin);
   l_CODE_MVX_n := sys.diutil.bool_to_int(CODE_MVX_nin);
   l_FLG_REPORTED_n := sys.diutil.bool_to_int(FLG_REPORTED_nin);
   l_ID_INFORMATION_SOURCE_n := sys.diutil.bool_to_int(ID_INFORMATION_SOURCE_nin);
   l_ID_VACC_FUNDING_CAT_n := sys.diutil.bool_to_int(ID_VACC_FUNDING_CAT_nin);
   l_ID_VACC_FUNDING_SOURCE_n := sys.diutil.bool_to_int(ID_VACC_FUNDING_SOURCE_nin);
   l_ID_VACC_DOC_VIS_n := sys.diutil.bool_to_int(ID_VACC_DOC_VIS_nin);
   l_ID_VACC_ORIGIN_n := sys.diutil.bool_to_int(ID_VACC_ORIGIN_nin);
   l_ORIGIN_DESC_n := sys.diutil.bool_to_int(ORIGIN_DESC_nin);
   l_VACC_ROUTE_DATA_n := sys.diutil.bool_to_int(VACC_ROUTE_DATA_nin);
   l_ID_ADMINISTRED_n := sys.diutil.bool_to_int(ID_ADMINISTRED_nin);
   l_ADMINISTRED_DESC_n := sys.diutil.bool_to_int(ADMINISTRED_DESC_nin);
   l_DT_DOC_DELIVERY_TSTZ_n := sys.diutil.bool_to_int(DT_DOC_DELIVERY_TSTZ_nin);
   l_ID_VACC_ADV_REACTION_n := sys.diutil.bool_to_int(ID_VACC_ADV_REACTION_nin);
   l_APPLICATION_SPOT_CODE_n := sys.diutil.bool_to_int(APPLICATION_SPOT_CODE_nin);
   l_DOC_VIS_DESC_n := sys.diutil.bool_to_int(DOC_VIS_DESC_nin);
   l_SUSPENDED_NOTES_n := sys.diutil.bool_to_int(SUSPENDED_NOTES_nin);
   l_ID_REASON_SUS_n := sys.diutil.bool_to_int(ID_REASON_SUS_nin);
   l_DT_SUSPENDED_n := sys.diutil.bool_to_int(DT_SUSPENDED_nin);
   l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
   l_VERS_n := sys.diutil.bool_to_int(VERS_nin);
   l_FUNDING_SOURCE_DESC_n := sys.diutil.bool_to_int(FUNDING_SOURCE_DESC_nin);


         UPDATE PAT_VACC_ADM_DET SET
     ID_PAT_VACC_ADM = decode (l_ID_PAT_VACC_ADM_n,0,id_pat_vacc_adm_in, NVL (id_pat_vacc_adm_in, ID_PAT_VACC_ADM)),
     DT_TAKE = decode (l_DT_TAKE_n,0,dt_take_in, NVL (dt_take_in, DT_TAKE)),
     ID_DRUG_PRESC_PLAN = decode (l_ID_DRUG_PRESC_PLAN_n,0,id_drug_presc_plan_in, NVL (id_drug_presc_plan_in, ID_DRUG_PRESC_PLAN)),
     ID_EPISODE = decode (l_ID_EPISODE_n,0,id_episode_in, NVL (id_episode_in, ID_EPISODE)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     DT_CANCEL = decode (l_DT_CANCEL_n,0,dt_cancel_in, NVL (dt_cancel_in, DT_CANCEL)),
     ID_PROF_CANCEL = decode (l_ID_PROF_CANCEL_n,0,id_prof_cancel_in, NVL (id_prof_cancel_in, ID_PROF_CANCEL)),
     NOTES_CANCEL = decode (l_NOTES_CANCEL_n,0,notes_cancel_in, NVL (notes_cancel_in, NOTES_CANCEL)),
     DESC_VACCINE = decode (l_DESC_VACCINE_n,0,desc_vaccine_in, NVL (desc_vaccine_in, DESC_VACCINE)),
     LOT_NUMBER = decode (l_LOT_NUMBER_n,0,lot_number_in, NVL (lot_number_in, LOT_NUMBER)),
     DT_EXPIRATION = decode (l_DT_EXPIRATION_n,0,dt_expiration_in, NVL (dt_expiration_in, DT_EXPIRATION)),
     FLG_ADVERS_REACT = decode (l_FLG_ADVERS_REACT_n,0,flg_advers_react_in, NVL (flg_advers_react_in, FLG_ADVERS_REACT)),
     NOTES_ADVERS_REACT = decode (l_NOTES_ADVERS_REACT_n,0,notes_advers_react_in, NVL (notes_advers_react_in, NOTES_ADVERS_REACT)),
     APPLICATION_SPOT = decode (l_APPLICATION_SPOT_n,0,application_spot_in, NVL (application_spot_in, APPLICATION_SPOT)),
     REPORT_ORIG = decode (l_REPORT_ORIG_n,0,report_orig_in, NVL (report_orig_in, REPORT_ORIG)),
     NOTES = decode (l_NOTES_n,0,notes_in, NVL (notes_in, NOTES)),
     EMB_ID = decode (l_EMB_ID_n,0,emb_id_in, NVL (emb_id_in, EMB_ID)),
     ID_UNIT_MEASURE = decode (l_ID_UNIT_MEASURE_n,0,id_unit_measure_in, NVL (id_unit_measure_in, ID_UNIT_MEASURE)),
     ID_PROF_WRITES = decode (l_ID_PROF_WRITES_n,0,id_prof_writes_in, NVL (id_prof_writes_in, ID_PROF_WRITES)),
     DT_REG = decode (l_DT_REG_n,0,dt_reg_in, NVL (dt_reg_in, DT_REG)),
     ADW_LAST_UPDATE = decode (l_ADW_LAST_UPDATE_n,0,adw_last_update_in, NVL (adw_last_update_in, ADW_LAST_UPDATE)),
     ID_PAT_MEDICATION_LIST = decode (l_ID_PAT_MEDICATION_LIST_n,0,id_pat_medication_list_in, NVL (id_pat_medication_list_in, ID_PAT_MEDICATION_LIST)),
     DT_NEXT_TAKE = decode (l_DT_NEXT_TAKE_n,0,dt_next_take_in, NVL (dt_next_take_in, DT_NEXT_TAKE)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     FLG_TYPE_DATE = decode (l_FLG_TYPE_DATE_n,0,flg_type_date_in, NVL (flg_type_date_in, FLG_TYPE_DATE)),
     ID_VACC_MANUFACTURER = decode (l_ID_VACC_MANUFACTURER_n,0,id_vacc_manufacturer_in, NVL (id_vacc_manufacturer_in, ID_VACC_MANUFACTURER)),
     CODE_MVX = decode (l_CODE_MVX_n,0,code_mvx_in, NVL (code_mvx_in, CODE_MVX)),
     FLG_REPORTED = decode (l_FLG_REPORTED_n,0,flg_reported_in, NVL (flg_reported_in, FLG_REPORTED)),
     ID_INFORMATION_SOURCE = decode (l_ID_INFORMATION_SOURCE_n,0,id_information_source_in, NVL (id_information_source_in, ID_INFORMATION_SOURCE)),
     ID_VACC_FUNDING_CAT = decode (l_ID_VACC_FUNDING_CAT_n,0,id_vacc_funding_cat_in, NVL (id_vacc_funding_cat_in, ID_VACC_FUNDING_CAT)),
     ID_VACC_FUNDING_SOURCE = decode (l_ID_VACC_FUNDING_SOURCE_n,0,id_vacc_funding_source_in, NVL (id_vacc_funding_source_in, ID_VACC_FUNDING_SOURCE)),
     ID_VACC_DOC_VIS = decode (l_ID_VACC_DOC_VIS_n,0,id_vacc_doc_vis_in, NVL (id_vacc_doc_vis_in, ID_VACC_DOC_VIS)),
     ID_VACC_ORIGIN = decode (l_ID_VACC_ORIGIN_n,0,id_vacc_origin_in, NVL (id_vacc_origin_in, ID_VACC_ORIGIN)),
     ORIGIN_DESC = decode (l_ORIGIN_DESC_n,0,origin_desc_in, NVL (origin_desc_in, ORIGIN_DESC)),
     VACC_ROUTE_DATA = decode (l_VACC_ROUTE_DATA_n,0,vacc_route_data_in, NVL (vacc_route_data_in, VACC_ROUTE_DATA)),
     ID_ADMINISTRED = decode (l_ID_ADMINISTRED_n,0,id_administred_in, NVL (id_administred_in, ID_ADMINISTRED)),
     ADMINISTRED_DESC = decode (l_ADMINISTRED_DESC_n,0,administred_desc_in, NVL (administred_desc_in, ADMINISTRED_DESC)),
     DT_DOC_DELIVERY_TSTZ = decode (l_DT_DOC_DELIVERY_TSTZ_n,0,dt_doc_delivery_tstz_in, NVL (dt_doc_delivery_tstz_in, DT_DOC_DELIVERY_TSTZ)),
     ID_VACC_ADV_REACTION = decode (l_ID_VACC_ADV_REACTION_n,0,id_vacc_adv_reaction_in, NVL (id_vacc_adv_reaction_in, ID_VACC_ADV_REACTION)),
     APPLICATION_SPOT_CODE = decode (l_APPLICATION_SPOT_CODE_n,0,application_spot_code_in, NVL (application_spot_code_in, APPLICATION_SPOT_CODE)),
     DOC_VIS_DESC = decode (l_DOC_VIS_DESC_n,0,doc_vis_desc_in, NVL (doc_vis_desc_in, DOC_VIS_DESC)),
     SUSPENDED_NOTES = decode (l_SUSPENDED_NOTES_n,0,suspended_notes_in, NVL (suspended_notes_in, SUSPENDED_NOTES)),
     ID_REASON_SUS = decode (l_ID_REASON_SUS_n,0,id_reason_sus_in, NVL (id_reason_sus_in, ID_REASON_SUS)),
     DT_SUSPENDED = decode (l_DT_SUSPENDED_n,0,dt_suspended_in, NVL (dt_suspended_in, DT_SUSPENDED)),
     ID_CANCEL_REASON = decode (l_ID_CANCEL_REASON_n,0,id_cancel_reason_in, NVL (id_cancel_reason_in, ID_CANCEL_REASON)),
     VERS = decode (l_VERS_n,0,vers_in, NVL (vers_in, VERS)),
     FUNDING_SOURCE_DESC = decode (l_FUNDING_SOURCE_DESC_n,0,funding_source_desc_in, NVL (funding_source_desc_in, FUNDING_SOURCE_DESC))
          WHERE
             ID_PAT_VACC_ADM_DET = id_pat_vacc_adm_det_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              PK_ALERT_EXCEPTIONS.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_VACC_ADM_DET');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           IF l_name = 'PAVAAD_EPIS_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'PAVAAD_PAVAA_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_VACC_ADM'
               , value_in => id_pat_vacc_adm_in);
           END IF;
           IF l_name = 'PAVAAD_PML_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_MEDICATION_LIST'
               , value_in => id_pat_medication_list_in);
           END IF;
           IF l_name = 'PVAD_CANCEL_REASON_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'REP_ADV_REACTION_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_ADV_REACTION'
               , value_in => id_vacc_adv_reaction_in);
           END IF;
           IF l_name = 'REP_DOC_VIS_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_DOC_VIS'
               , value_in => id_vacc_doc_vis_in);
           END IF;
           IF l_name = 'REP_FUNDING_CAT_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_FUNDING_CAT'
               , value_in => id_vacc_funding_cat_in);
           END IF;
           IF l_name = 'REP_FUNDING_SOURCE_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_FUNDING_SOURCE'
               , value_in => id_vacc_funding_source_in);
           END IF;
           IF l_name = 'REP_ORIGIN_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_ORIGIN'
               , value_in => id_vacc_origin_in);
           END IF;
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_pat_vacc_adm_det_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE,
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      ID_PAT_VACC_ADM_nin IN BOOLEAN := TRUE,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      DT_TAKE_nin IN BOOLEAN := TRUE,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      ID_DRUG_PRESC_PLAN_nin IN BOOLEAN := TRUE,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      DESC_VACCINE_nin IN BOOLEAN := TRUE,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      LOT_NUMBER_nin IN BOOLEAN := TRUE,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      DT_EXPIRATION_nin IN BOOLEAN := TRUE,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      FLG_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      NOTES_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      APPLICATION_SPOT_nin IN BOOLEAN := TRUE,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      REPORT_ORIG_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      EMB_ID_nin IN BOOLEAN := TRUE,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      ID_PROF_WRITES_nin IN BOOLEAN := TRUE,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      DT_REG_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      ID_PAT_MEDICATION_LIST_nin IN BOOLEAN := TRUE,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      DT_NEXT_TAKE_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      FLG_TYPE_DATE_nin IN BOOLEAN := TRUE,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      ID_VACC_MANUFACTURER_nin IN BOOLEAN := TRUE,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      CODE_MVX_nin IN BOOLEAN := TRUE,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      FLG_REPORTED_nin IN BOOLEAN := TRUE,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      ID_INFORMATION_SOURCE_nin IN BOOLEAN := TRUE,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_CAT_nin IN BOOLEAN := TRUE,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_SOURCE_nin IN BOOLEAN := TRUE,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      ID_VACC_DOC_VIS_nin IN BOOLEAN := TRUE,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      ID_VACC_ORIGIN_nin IN BOOLEAN := TRUE,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      ORIGIN_DESC_nin IN BOOLEAN := TRUE,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      VACC_ROUTE_DATA_nin IN BOOLEAN := TRUE,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      ID_ADMINISTRED_nin IN BOOLEAN := TRUE,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ADMINISTRED_DESC_nin IN BOOLEAN := TRUE,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      DT_DOC_DELIVERY_TSTZ_nin IN BOOLEAN := TRUE,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      ID_VACC_ADV_REACTION_nin IN BOOLEAN := TRUE,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      APPLICATION_SPOT_CODE_nin IN BOOLEAN := TRUE,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      DOC_VIS_DESC_nin IN BOOLEAN := TRUE,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      SUSPENDED_NOTES_nin IN BOOLEAN := TRUE,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      ID_REASON_SUS_nin IN BOOLEAN := TRUE,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      DT_SUSPENDED_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      VERS_nin IN BOOLEAN := TRUE,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
      FUNDING_SOURCE_DESC_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_pat_vacc_adm_det_in => id_pat_vacc_adm_det_in,
      id_pat_vacc_adm_in => id_pat_vacc_adm_in,
      ID_PAT_VACC_ADM_nin => ID_PAT_VACC_ADM_nin,
      dt_take_in => dt_take_in,
      DT_TAKE_nin => DT_TAKE_nin,
      id_drug_presc_plan_in => id_drug_presc_plan_in,
      ID_DRUG_PRESC_PLAN_nin => ID_DRUG_PRESC_PLAN_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      dt_cancel_in => dt_cancel_in,
      DT_CANCEL_nin => DT_CANCEL_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      desc_vaccine_in => desc_vaccine_in,
      DESC_VACCINE_nin => DESC_VACCINE_nin,
      lot_number_in => lot_number_in,
      LOT_NUMBER_nin => LOT_NUMBER_nin,
      dt_expiration_in => dt_expiration_in,
      DT_EXPIRATION_nin => DT_EXPIRATION_nin,
      flg_advers_react_in => flg_advers_react_in,
      FLG_ADVERS_REACT_nin => FLG_ADVERS_REACT_nin,
      notes_advers_react_in => notes_advers_react_in,
      NOTES_ADVERS_REACT_nin => NOTES_ADVERS_REACT_nin,
      application_spot_in => application_spot_in,
      APPLICATION_SPOT_nin => APPLICATION_SPOT_nin,
      report_orig_in => report_orig_in,
      REPORT_ORIG_nin => REPORT_ORIG_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      emb_id_in => emb_id_in,
      EMB_ID_nin => EMB_ID_nin,
      id_unit_measure_in => id_unit_measure_in,
      ID_UNIT_MEASURE_nin => ID_UNIT_MEASURE_nin,
      id_prof_writes_in => id_prof_writes_in,
      ID_PROF_WRITES_nin => ID_PROF_WRITES_nin,
      dt_reg_in => dt_reg_in,
      DT_REG_nin => DT_REG_nin,
      adw_last_update_in => adw_last_update_in,
      ADW_LAST_UPDATE_nin => ADW_LAST_UPDATE_nin,
      id_pat_medication_list_in => id_pat_medication_list_in,
      ID_PAT_MEDICATION_LIST_nin => ID_PAT_MEDICATION_LIST_nin,
      dt_next_take_in => dt_next_take_in,
      DT_NEXT_TAKE_nin => DT_NEXT_TAKE_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      flg_type_date_in => flg_type_date_in,
      FLG_TYPE_DATE_nin => FLG_TYPE_DATE_nin,
      id_vacc_manufacturer_in => id_vacc_manufacturer_in,
      ID_VACC_MANUFACTURER_nin => ID_VACC_MANUFACTURER_nin,
      code_mvx_in => code_mvx_in,
      CODE_MVX_nin => CODE_MVX_nin,
      flg_reported_in => flg_reported_in,
      FLG_REPORTED_nin => FLG_REPORTED_nin,
      id_information_source_in => id_information_source_in,
      ID_INFORMATION_SOURCE_nin => ID_INFORMATION_SOURCE_nin,
      id_vacc_funding_cat_in => id_vacc_funding_cat_in,
      ID_VACC_FUNDING_CAT_nin => ID_VACC_FUNDING_CAT_nin,
      id_vacc_funding_source_in => id_vacc_funding_source_in,
      ID_VACC_FUNDING_SOURCE_nin => ID_VACC_FUNDING_SOURCE_nin,
      id_vacc_doc_vis_in => id_vacc_doc_vis_in,
      ID_VACC_DOC_VIS_nin => ID_VACC_DOC_VIS_nin,
      id_vacc_origin_in => id_vacc_origin_in,
      ID_VACC_ORIGIN_nin => ID_VACC_ORIGIN_nin,
      origin_desc_in => origin_desc_in,
      ORIGIN_DESC_nin => ORIGIN_DESC_nin,
      vacc_route_data_in => vacc_route_data_in,
      VACC_ROUTE_DATA_nin => VACC_ROUTE_DATA_nin,
      id_administred_in => id_administred_in,
      ID_ADMINISTRED_nin => ID_ADMINISTRED_nin,
      administred_desc_in => administred_desc_in,
      ADMINISTRED_DESC_nin => ADMINISTRED_DESC_nin,
      dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
      DT_DOC_DELIVERY_TSTZ_nin => DT_DOC_DELIVERY_TSTZ_nin,
      id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
      ID_VACC_ADV_REACTION_nin => ID_VACC_ADV_REACTION_nin,
      application_spot_code_in => application_spot_code_in,
      APPLICATION_SPOT_CODE_nin => APPLICATION_SPOT_CODE_nin,
      doc_vis_desc_in => doc_vis_desc_in,
      DOC_VIS_DESC_nin => DOC_VIS_DESC_nin,
      suspended_notes_in => suspended_notes_in,
      SUSPENDED_NOTES_nin => SUSPENDED_NOTES_nin,
      id_reason_sus_in => id_reason_sus_in,
      ID_REASON_SUS_nin => ID_REASON_SUS_nin,
      dt_suspended_in => dt_suspended_in,
      DT_SUSPENDED_nin => DT_SUSPENDED_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      vers_in => vers_in,
      VERS_nin => VERS_nin,
      funding_source_desc_in => funding_source_desc_in,
      FUNDING_SOURCE_DESC_nin => FUNDING_SOURCE_DESC_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      ID_PAT_VACC_ADM_nin IN BOOLEAN := TRUE,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      DT_TAKE_nin IN BOOLEAN := TRUE,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      ID_DRUG_PRESC_PLAN_nin IN BOOLEAN := TRUE,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      DESC_VACCINE_nin IN BOOLEAN := TRUE,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      LOT_NUMBER_nin IN BOOLEAN := TRUE,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      DT_EXPIRATION_nin IN BOOLEAN := TRUE,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      FLG_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      NOTES_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      APPLICATION_SPOT_nin IN BOOLEAN := TRUE,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      REPORT_ORIG_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      EMB_ID_nin IN BOOLEAN := TRUE,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      ID_PROF_WRITES_nin IN BOOLEAN := TRUE,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      DT_REG_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      ID_PAT_MEDICATION_LIST_nin IN BOOLEAN := TRUE,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      DT_NEXT_TAKE_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      FLG_TYPE_DATE_nin IN BOOLEAN := TRUE,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      ID_VACC_MANUFACTURER_nin IN BOOLEAN := TRUE,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      CODE_MVX_nin IN BOOLEAN := TRUE,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      FLG_REPORTED_nin IN BOOLEAN := TRUE,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      ID_INFORMATION_SOURCE_nin IN BOOLEAN := TRUE,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_CAT_nin IN BOOLEAN := TRUE,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_SOURCE_nin IN BOOLEAN := TRUE,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      ID_VACC_DOC_VIS_nin IN BOOLEAN := TRUE,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      ID_VACC_ORIGIN_nin IN BOOLEAN := TRUE,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      ORIGIN_DESC_nin IN BOOLEAN := TRUE,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      VACC_ROUTE_DATA_nin IN BOOLEAN := TRUE,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      ID_ADMINISTRED_nin IN BOOLEAN := TRUE,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ADMINISTRED_DESC_nin IN BOOLEAN := TRUE,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      DT_DOC_DELIVERY_TSTZ_nin IN BOOLEAN := TRUE,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      ID_VACC_ADV_REACTION_nin IN BOOLEAN := TRUE,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      APPLICATION_SPOT_CODE_nin IN BOOLEAN := TRUE,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      DOC_VIS_DESC_nin IN BOOLEAN := TRUE,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      SUSPENDED_NOTES_nin IN BOOLEAN := TRUE,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      ID_REASON_SUS_nin IN BOOLEAN := TRUE,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      DT_SUSPENDED_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      VERS_nin IN BOOLEAN := TRUE,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
      FUNDING_SOURCE_DESC_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_PAT_VACC_ADM_n NUMBER(1);
   l_DT_TAKE_n NUMBER(1);
   l_ID_DRUG_PRESC_PLAN_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_DT_CANCEL_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_DESC_VACCINE_n NUMBER(1);
   l_LOT_NUMBER_n NUMBER(1);
   l_DT_EXPIRATION_n NUMBER(1);
   l_FLG_ADVERS_REACT_n NUMBER(1);
   l_NOTES_ADVERS_REACT_n NUMBER(1);
   l_APPLICATION_SPOT_n NUMBER(1);
   l_REPORT_ORIG_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_EMB_ID_n NUMBER(1);
   l_ID_UNIT_MEASURE_n NUMBER(1);
   l_ID_PROF_WRITES_n NUMBER(1);
   l_DT_REG_n NUMBER(1);
   l_ADW_LAST_UPDATE_n NUMBER(1);
   l_ID_PAT_MEDICATION_LIST_n NUMBER(1);
   l_DT_NEXT_TAKE_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_FLG_TYPE_DATE_n NUMBER(1);
   l_ID_VACC_MANUFACTURER_n NUMBER(1);
   l_CODE_MVX_n NUMBER(1);
   l_FLG_REPORTED_n NUMBER(1);
   l_ID_INFORMATION_SOURCE_n NUMBER(1);
   l_ID_VACC_FUNDING_CAT_n NUMBER(1);
   l_ID_VACC_FUNDING_SOURCE_n NUMBER(1);
   l_ID_VACC_DOC_VIS_n NUMBER(1);
   l_ID_VACC_ORIGIN_n NUMBER(1);
   l_ORIGIN_DESC_n NUMBER(1);
   l_VACC_ROUTE_DATA_n NUMBER(1);
   l_ID_ADMINISTRED_n NUMBER(1);
   l_ADMINISTRED_DESC_n NUMBER(1);
   l_DT_DOC_DELIVERY_TSTZ_n NUMBER(1);
   l_ID_VACC_ADV_REACTION_n NUMBER(1);
   l_APPLICATION_SPOT_CODE_n NUMBER(1);
   l_DOC_VIS_DESC_n NUMBER(1);
   l_SUSPENDED_NOTES_n NUMBER(1);
   l_ID_REASON_SUS_n NUMBER(1);
   l_DT_SUSPENDED_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_VERS_n NUMBER(1);
   l_FUNDING_SOURCE_DESC_n NUMBER(1);
      id_pat_vacc_adm_det_in PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE;
   BEGIN



      l_ID_PAT_VACC_ADM_n := sys.diutil.bool_to_int(ID_PAT_VACC_ADM_nin);
      l_DT_TAKE_n := sys.diutil.bool_to_int(DT_TAKE_nin);
      l_ID_DRUG_PRESC_PLAN_n := sys.diutil.bool_to_int(ID_DRUG_PRESC_PLAN_nin);
      l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_DT_CANCEL_n := sys.diutil.bool_to_int(DT_CANCEL_nin);
      l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
      l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
      l_DESC_VACCINE_n := sys.diutil.bool_to_int(DESC_VACCINE_nin);
      l_LOT_NUMBER_n := sys.diutil.bool_to_int(LOT_NUMBER_nin);
      l_DT_EXPIRATION_n := sys.diutil.bool_to_int(DT_EXPIRATION_nin);
      l_FLG_ADVERS_REACT_n := sys.diutil.bool_to_int(FLG_ADVERS_REACT_nin);
      l_NOTES_ADVERS_REACT_n := sys.diutil.bool_to_int(NOTES_ADVERS_REACT_nin);
      l_APPLICATION_SPOT_n := sys.diutil.bool_to_int(APPLICATION_SPOT_nin);
      l_REPORT_ORIG_n := sys.diutil.bool_to_int(REPORT_ORIG_nin);
      l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
      l_EMB_ID_n := sys.diutil.bool_to_int(EMB_ID_nin);
      l_ID_UNIT_MEASURE_n := sys.diutil.bool_to_int(ID_UNIT_MEASURE_nin);
      l_ID_PROF_WRITES_n := sys.diutil.bool_to_int(ID_PROF_WRITES_nin);
      l_DT_REG_n := sys.diutil.bool_to_int(DT_REG_nin);
      l_ADW_LAST_UPDATE_n := sys.diutil.bool_to_int(ADW_LAST_UPDATE_nin);
      l_ID_PAT_MEDICATION_LIST_n := sys.diutil.bool_to_int(ID_PAT_MEDICATION_LIST_nin);
      l_DT_NEXT_TAKE_n := sys.diutil.bool_to_int(DT_NEXT_TAKE_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_FLG_TYPE_DATE_n := sys.diutil.bool_to_int(FLG_TYPE_DATE_nin);
      l_ID_VACC_MANUFACTURER_n := sys.diutil.bool_to_int(ID_VACC_MANUFACTURER_nin);
      l_CODE_MVX_n := sys.diutil.bool_to_int(CODE_MVX_nin);
      l_FLG_REPORTED_n := sys.diutil.bool_to_int(FLG_REPORTED_nin);
      l_ID_INFORMATION_SOURCE_n := sys.diutil.bool_to_int(ID_INFORMATION_SOURCE_nin);
      l_ID_VACC_FUNDING_CAT_n := sys.diutil.bool_to_int(ID_VACC_FUNDING_CAT_nin);
      l_ID_VACC_FUNDING_SOURCE_n := sys.diutil.bool_to_int(ID_VACC_FUNDING_SOURCE_nin);
      l_ID_VACC_DOC_VIS_n := sys.diutil.bool_to_int(ID_VACC_DOC_VIS_nin);
      l_ID_VACC_ORIGIN_n := sys.diutil.bool_to_int(ID_VACC_ORIGIN_nin);
      l_ORIGIN_DESC_n := sys.diutil.bool_to_int(ORIGIN_DESC_nin);
      l_VACC_ROUTE_DATA_n := sys.diutil.bool_to_int(VACC_ROUTE_DATA_nin);
      l_ID_ADMINISTRED_n := sys.diutil.bool_to_int(ID_ADMINISTRED_nin);
      l_ADMINISTRED_DESC_n := sys.diutil.bool_to_int(ADMINISTRED_DESC_nin);
      l_DT_DOC_DELIVERY_TSTZ_n := sys.diutil.bool_to_int(DT_DOC_DELIVERY_TSTZ_nin);
      l_ID_VACC_ADV_REACTION_n := sys.diutil.bool_to_int(ID_VACC_ADV_REACTION_nin);
      l_APPLICATION_SPOT_CODE_n := sys.diutil.bool_to_int(APPLICATION_SPOT_CODE_nin);
      l_DOC_VIS_DESC_n := sys.diutil.bool_to_int(DOC_VIS_DESC_nin);
      l_SUSPENDED_NOTES_n := sys.diutil.bool_to_int(SUSPENDED_NOTES_nin);
      l_ID_REASON_SUS_n := sys.diutil.bool_to_int(ID_REASON_SUS_nin);
      l_DT_SUSPENDED_n := sys.diutil.bool_to_int(DT_SUSPENDED_nin);
      l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
      l_VERS_n := sys.diutil.bool_to_int(VERS_nin);
      l_FUNDING_SOURCE_DESC_n := sys.diutil.bool_to_int(FUNDING_SOURCE_DESC_nin);



l_sql := 'UPDATE PAT_VACC_ADM_DET SET '
     || ' ID_PAT_VACC_ADM = decode (' || l_ID_PAT_VACC_ADM_n || ',0,:id_pat_vacc_adm_in, NVL (:id_pat_vacc_adm_in, ID_PAT_VACC_ADM)) '|| ','
     || ' DT_TAKE = decode (' || l_DT_TAKE_n || ',0,:dt_take_in, NVL (:dt_take_in, DT_TAKE)) '|| ','
     || ' ID_DRUG_PRESC_PLAN = decode (' || l_ID_DRUG_PRESC_PLAN_n || ',0,:id_drug_presc_plan_in, NVL (:id_drug_presc_plan_in, ID_DRUG_PRESC_PLAN)) '|| ','
     || ' ID_EPISODE = decode (' || l_ID_EPISODE_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' DT_CANCEL = decode (' || l_DT_CANCEL_n || ',0,:dt_cancel_in, NVL (:dt_cancel_in, DT_CANCEL)) '|| ','
     || ' ID_PROF_CANCEL = decode (' || l_ID_PROF_CANCEL_n || ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) '|| ','
     || ' NOTES_CANCEL = decode (' || l_NOTES_CANCEL_n || ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) '|| ','
     || ' DESC_VACCINE = decode (' || l_DESC_VACCINE_n || ',0,:desc_vaccine_in, NVL (:desc_vaccine_in, DESC_VACCINE)) '|| ','
     || ' LOT_NUMBER = decode (' || l_LOT_NUMBER_n || ',0,:lot_number_in, NVL (:lot_number_in, LOT_NUMBER)) '|| ','
     || ' DT_EXPIRATION = decode (' || l_DT_EXPIRATION_n || ',0,:dt_expiration_in, NVL (:dt_expiration_in, DT_EXPIRATION)) '|| ','
     || ' FLG_ADVERS_REACT = decode (' || l_FLG_ADVERS_REACT_n || ',0,:flg_advers_react_in, NVL (:flg_advers_react_in, FLG_ADVERS_REACT)) '|| ','
     || ' NOTES_ADVERS_REACT = decode (' || l_NOTES_ADVERS_REACT_n || ',0,:notes_advers_react_in, NVL (:notes_advers_react_in, NOTES_ADVERS_REACT)) '|| ','
     || ' APPLICATION_SPOT = decode (' || l_APPLICATION_SPOT_n || ',0,:application_spot_in, NVL (:application_spot_in, APPLICATION_SPOT)) '|| ','
     || ' REPORT_ORIG = decode (' || l_REPORT_ORIG_n || ',0,:report_orig_in, NVL (:report_orig_in, REPORT_ORIG)) '|| ','
     || ' NOTES = decode (' || l_NOTES_n || ',0,:notes_in, NVL (:notes_in, NOTES)) '|| ','
     || ' EMB_ID = decode (' || l_EMB_ID_n || ',0,:emb_id_in, NVL (:emb_id_in, EMB_ID)) '|| ','
     || ' ID_UNIT_MEASURE = decode (' || l_ID_UNIT_MEASURE_n || ',0,:id_unit_measure_in, NVL (:id_unit_measure_in, ID_UNIT_MEASURE)) '|| ','
     || ' ID_PROF_WRITES = decode (' || l_ID_PROF_WRITES_n || ',0,:id_prof_writes_in, NVL (:id_prof_writes_in, ID_PROF_WRITES)) '|| ','
     || ' DT_REG = decode (' || l_DT_REG_n || ',0,:dt_reg_in, NVL (:dt_reg_in, DT_REG)) '|| ','
     || ' ADW_LAST_UPDATE = decode (' || l_ADW_LAST_UPDATE_n || ',0,:adw_last_update_in, NVL (:adw_last_update_in, ADW_LAST_UPDATE)) '|| ','
     || ' ID_PAT_MEDICATION_LIST = decode (' || l_ID_PAT_MEDICATION_LIST_n || ',0,:id_pat_medication_list_in, NVL (:id_pat_medication_list_in, ID_PAT_MEDICATION_LIST)) '|| ','
     || ' DT_NEXT_TAKE = decode (' || l_DT_NEXT_TAKE_n || ',0,:dt_next_take_in, NVL (:dt_next_take_in, DT_NEXT_TAKE)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' FLG_TYPE_DATE = decode (' || l_FLG_TYPE_DATE_n || ',0,:flg_type_date_in, NVL (:flg_type_date_in, FLG_TYPE_DATE)) '|| ','
     || ' ID_VACC_MANUFACTURER = decode (' || l_ID_VACC_MANUFACTURER_n || ',0,:id_vacc_manufacturer_in, NVL (:id_vacc_manufacturer_in, ID_VACC_MANUFACTURER)) '|| ','
     || ' CODE_MVX = decode (' || l_CODE_MVX_n || ',0,:code_mvx_in, NVL (:code_mvx_in, CODE_MVX)) '|| ','
     || ' FLG_REPORTED = decode (' || l_FLG_REPORTED_n || ',0,:flg_reported_in, NVL (:flg_reported_in, FLG_REPORTED)) '|| ','
     || ' ID_INFORMATION_SOURCE = decode (' || l_ID_INFORMATION_SOURCE_n || ',0,:id_information_source_in, NVL (:id_information_source_in, ID_INFORMATION_SOURCE)) '|| ','
     || ' ID_VACC_FUNDING_CAT = decode (' || l_ID_VACC_FUNDING_CAT_n || ',0,:id_vacc_funding_cat_in, NVL (:id_vacc_funding_cat_in, ID_VACC_FUNDING_CAT)) '|| ','
     || ' ID_VACC_FUNDING_SOURCE = decode (' || l_ID_VACC_FUNDING_SOURCE_n || ',0,:id_vacc_funding_source_in, NVL (:id_vacc_funding_source_in, ID_VACC_FUNDING_SOURCE)) '|| ','
     || ' ID_VACC_DOC_VIS = decode (' || l_ID_VACC_DOC_VIS_n || ',0,:id_vacc_doc_vis_in, NVL (:id_vacc_doc_vis_in, ID_VACC_DOC_VIS)) '|| ','
     || ' ID_VACC_ORIGIN = decode (' || l_ID_VACC_ORIGIN_n || ',0,:id_vacc_origin_in, NVL (:id_vacc_origin_in, ID_VACC_ORIGIN)) '|| ','
     || ' ORIGIN_DESC = decode (' || l_ORIGIN_DESC_n || ',0,:origin_desc_in, NVL (:origin_desc_in, ORIGIN_DESC)) '|| ','
     || ' VACC_ROUTE_DATA = decode (' || l_VACC_ROUTE_DATA_n || ',0,:vacc_route_data_in, NVL (:vacc_route_data_in, VACC_ROUTE_DATA)) '|| ','
     || ' ID_ADMINISTRED = decode (' || l_ID_ADMINISTRED_n || ',0,:id_administred_in, NVL (:id_administred_in, ID_ADMINISTRED)) '|| ','
     || ' ADMINISTRED_DESC = decode (' || l_ADMINISTRED_DESC_n || ',0,:administred_desc_in, NVL (:administred_desc_in, ADMINISTRED_DESC)) '|| ','
     || ' DT_DOC_DELIVERY_TSTZ = decode (' || l_DT_DOC_DELIVERY_TSTZ_n || ',0,:dt_doc_delivery_tstz_in, NVL (:dt_doc_delivery_tstz_in, DT_DOC_DELIVERY_TSTZ)) '|| ','
     || ' ID_VACC_ADV_REACTION = decode (' || l_ID_VACC_ADV_REACTION_n || ',0,:id_vacc_adv_reaction_in, NVL (:id_vacc_adv_reaction_in, ID_VACC_ADV_REACTION)) '|| ','
     || ' APPLICATION_SPOT_CODE = decode (' || l_APPLICATION_SPOT_CODE_n || ',0,:application_spot_code_in, NVL (:application_spot_code_in, APPLICATION_SPOT_CODE)) '|| ','
     || ' DOC_VIS_DESC = decode (' || l_DOC_VIS_DESC_n || ',0,:doc_vis_desc_in, NVL (:doc_vis_desc_in, DOC_VIS_DESC)) '|| ','
     || ' SUSPENDED_NOTES = decode (' || l_SUSPENDED_NOTES_n || ',0,:suspended_notes_in, NVL (:suspended_notes_in, SUSPENDED_NOTES)) '|| ','
     || ' ID_REASON_SUS = decode (' || l_ID_REASON_SUS_n || ',0,:id_reason_sus_in, NVL (:id_reason_sus_in, ID_REASON_SUS)) '|| ','
     || ' DT_SUSPENDED = decode (' || l_DT_SUSPENDED_n || ',0,:dt_suspended_in, NVL (:dt_suspended_in, DT_SUSPENDED)) '|| ','
     || ' ID_CANCEL_REASON = decode (' || l_ID_CANCEL_REASON_n || ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) '|| ','
     || ' VERS = decode (' || l_VERS_n || ',0,:vers_in, NVL (:vers_in, VERS)) '|| ','
     || ' FUNDING_SOURCE_DESC = decode (' || l_FUNDING_SOURCE_DESC_n || ',0,:funding_source_desc_in, NVL (:funding_source_desc_in, FUNDING_SOURCE_DESC)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_pat_vacc_adm_in,
     dt_take_in,
     id_drug_presc_plan_in,
     id_episode_in,
     flg_status_in,
     dt_cancel_in,
     id_prof_cancel_in,
     notes_cancel_in,
     desc_vaccine_in,
     lot_number_in,
     dt_expiration_in,
     flg_advers_react_in,
     notes_advers_react_in,
     application_spot_in,
     report_orig_in,
     notes_in,
     emb_id_in,
     id_unit_measure_in,
     id_prof_writes_in,
     dt_reg_in,
     adw_last_update_in,
     id_pat_medication_list_in,
     dt_next_take_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     flg_type_date_in,
     id_vacc_manufacturer_in,
     code_mvx_in,
     flg_reported_in,
     id_information_source_in,
     id_vacc_funding_cat_in,
     id_vacc_funding_source_in,
     id_vacc_doc_vis_in,
     id_vacc_origin_in,
     origin_desc_in,
     vacc_route_data_in,
     id_administred_in,
     administred_desc_in,
     dt_doc_delivery_tstz_in,
     id_vacc_adv_reaction_in,
     application_spot_code_in,
     doc_vis_desc_in,
     suspended_notes_in,
     id_reason_sus_in,
     dt_suspended_in,
     id_cancel_reason_in,
     vers_in,
     funding_source_desc_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              PK_ALERT_EXCEPTIONS.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_VACC_ADM_DET');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           IF l_name = 'PAVAAD_EPIS_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'PAVAAD_PAVAA_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_VACC_ADM'
               , value_in => id_pat_vacc_adm_in);
           END IF;
           IF l_name = 'PAVAAD_PML_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_MEDICATION_LIST'
               , value_in => id_pat_medication_list_in);
           END IF;
           IF l_name = 'PVAD_CANCEL_REASON_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'REP_ADV_REACTION_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_ADV_REACTION'
               , value_in => id_vacc_adv_reaction_in);
           END IF;
           IF l_name = 'REP_DOC_VIS_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_DOC_VIS'
               , value_in => id_vacc_doc_vis_in);
           END IF;
           IF l_name = 'REP_FUNDING_CAT_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_FUNDING_CAT'
               , value_in => id_vacc_funding_cat_in);
           END IF;
           IF l_name = 'REP_FUNDING_SOURCE_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_FUNDING_SOURCE'
               , value_in => id_vacc_funding_source_in);
           END IF;
           IF l_name = 'REP_ORIGIN_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_ORIGIN'
               , value_in => id_vacc_origin_in);
           END IF;
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      ID_PAT_VACC_ADM_nin IN BOOLEAN := TRUE,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      DT_TAKE_nin IN BOOLEAN := TRUE,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      ID_DRUG_PRESC_PLAN_nin IN BOOLEAN := TRUE,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      DESC_VACCINE_nin IN BOOLEAN := TRUE,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      LOT_NUMBER_nin IN BOOLEAN := TRUE,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      DT_EXPIRATION_nin IN BOOLEAN := TRUE,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      FLG_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      NOTES_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      APPLICATION_SPOT_nin IN BOOLEAN := TRUE,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      REPORT_ORIG_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      EMB_ID_nin IN BOOLEAN := TRUE,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      ID_PROF_WRITES_nin IN BOOLEAN := TRUE,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      DT_REG_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      ID_PAT_MEDICATION_LIST_nin IN BOOLEAN := TRUE,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      DT_NEXT_TAKE_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      FLG_TYPE_DATE_nin IN BOOLEAN := TRUE,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      ID_VACC_MANUFACTURER_nin IN BOOLEAN := TRUE,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      CODE_MVX_nin IN BOOLEAN := TRUE,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      FLG_REPORTED_nin IN BOOLEAN := TRUE,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      ID_INFORMATION_SOURCE_nin IN BOOLEAN := TRUE,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_CAT_nin IN BOOLEAN := TRUE,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_SOURCE_nin IN BOOLEAN := TRUE,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      ID_VACC_DOC_VIS_nin IN BOOLEAN := TRUE,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      ID_VACC_ORIGIN_nin IN BOOLEAN := TRUE,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      ORIGIN_DESC_nin IN BOOLEAN := TRUE,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      VACC_ROUTE_DATA_nin IN BOOLEAN := TRUE,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      ID_ADMINISTRED_nin IN BOOLEAN := TRUE,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ADMINISTRED_DESC_nin IN BOOLEAN := TRUE,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      DT_DOC_DELIVERY_TSTZ_nin IN BOOLEAN := TRUE,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      ID_VACC_ADV_REACTION_nin IN BOOLEAN := TRUE,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      APPLICATION_SPOT_CODE_nin IN BOOLEAN := TRUE,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      DOC_VIS_DESC_nin IN BOOLEAN := TRUE,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      SUSPENDED_NOTES_nin IN BOOLEAN := TRUE,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      ID_REASON_SUS_nin IN BOOLEAN := TRUE,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      DT_SUSPENDED_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      VERS_nin IN BOOLEAN := TRUE,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
      FUNDING_SOURCE_DESC_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_pat_vacc_adm_in => id_pat_vacc_adm_in,
      ID_PAT_VACC_ADM_nin => ID_PAT_VACC_ADM_nin,
      dt_take_in => dt_take_in,
      DT_TAKE_nin => DT_TAKE_nin,
      id_drug_presc_plan_in => id_drug_presc_plan_in,
      ID_DRUG_PRESC_PLAN_nin => ID_DRUG_PRESC_PLAN_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      dt_cancel_in => dt_cancel_in,
      DT_CANCEL_nin => DT_CANCEL_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      desc_vaccine_in => desc_vaccine_in,
      DESC_VACCINE_nin => DESC_VACCINE_nin,
      lot_number_in => lot_number_in,
      LOT_NUMBER_nin => LOT_NUMBER_nin,
      dt_expiration_in => dt_expiration_in,
      DT_EXPIRATION_nin => DT_EXPIRATION_nin,
      flg_advers_react_in => flg_advers_react_in,
      FLG_ADVERS_REACT_nin => FLG_ADVERS_REACT_nin,
      notes_advers_react_in => notes_advers_react_in,
      NOTES_ADVERS_REACT_nin => NOTES_ADVERS_REACT_nin,
      application_spot_in => application_spot_in,
      APPLICATION_SPOT_nin => APPLICATION_SPOT_nin,
      report_orig_in => report_orig_in,
      REPORT_ORIG_nin => REPORT_ORIG_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      emb_id_in => emb_id_in,
      EMB_ID_nin => EMB_ID_nin,
      id_unit_measure_in => id_unit_measure_in,
      ID_UNIT_MEASURE_nin => ID_UNIT_MEASURE_nin,
      id_prof_writes_in => id_prof_writes_in,
      ID_PROF_WRITES_nin => ID_PROF_WRITES_nin,
      dt_reg_in => dt_reg_in,
      DT_REG_nin => DT_REG_nin,
      adw_last_update_in => adw_last_update_in,
      ADW_LAST_UPDATE_nin => ADW_LAST_UPDATE_nin,
      id_pat_medication_list_in => id_pat_medication_list_in,
      ID_PAT_MEDICATION_LIST_nin => ID_PAT_MEDICATION_LIST_nin,
      dt_next_take_in => dt_next_take_in,
      DT_NEXT_TAKE_nin => DT_NEXT_TAKE_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      flg_type_date_in => flg_type_date_in,
      FLG_TYPE_DATE_nin => FLG_TYPE_DATE_nin,
      id_vacc_manufacturer_in => id_vacc_manufacturer_in,
      ID_VACC_MANUFACTURER_nin => ID_VACC_MANUFACTURER_nin,
      code_mvx_in => code_mvx_in,
      CODE_MVX_nin => CODE_MVX_nin,
      flg_reported_in => flg_reported_in,
      FLG_REPORTED_nin => FLG_REPORTED_nin,
      id_information_source_in => id_information_source_in,
      ID_INFORMATION_SOURCE_nin => ID_INFORMATION_SOURCE_nin,
      id_vacc_funding_cat_in => id_vacc_funding_cat_in,
      ID_VACC_FUNDING_CAT_nin => ID_VACC_FUNDING_CAT_nin,
      id_vacc_funding_source_in => id_vacc_funding_source_in,
      ID_VACC_FUNDING_SOURCE_nin => ID_VACC_FUNDING_SOURCE_nin,
      id_vacc_doc_vis_in => id_vacc_doc_vis_in,
      ID_VACC_DOC_VIS_nin => ID_VACC_DOC_VIS_nin,
      id_vacc_origin_in => id_vacc_origin_in,
      ID_VACC_ORIGIN_nin => ID_VACC_ORIGIN_nin,
      origin_desc_in => origin_desc_in,
      ORIGIN_DESC_nin => ORIGIN_DESC_nin,
      vacc_route_data_in => vacc_route_data_in,
      VACC_ROUTE_DATA_nin => VACC_ROUTE_DATA_nin,
      id_administred_in => id_administred_in,
      ID_ADMINISTRED_nin => ID_ADMINISTRED_nin,
      administred_desc_in => administred_desc_in,
      ADMINISTRED_DESC_nin => ADMINISTRED_DESC_nin,
      dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
      DT_DOC_DELIVERY_TSTZ_nin => DT_DOC_DELIVERY_TSTZ_nin,
      id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
      ID_VACC_ADV_REACTION_nin => ID_VACC_ADV_REACTION_nin,
      application_spot_code_in => application_spot_code_in,
      APPLICATION_SPOT_CODE_nin => APPLICATION_SPOT_CODE_nin,
      doc_vis_desc_in => doc_vis_desc_in,
      DOC_VIS_DESC_nin => DOC_VIS_DESC_nin,
      suspended_notes_in => suspended_notes_in,
      SUSPENDED_NOTES_nin => SUSPENDED_NOTES_nin,
      id_reason_sus_in => id_reason_sus_in,
      ID_REASON_SUS_nin => ID_REASON_SUS_nin,
      dt_suspended_in => dt_suspended_in,
      DT_SUSPENDED_nin => DT_SUSPENDED_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      vers_in => vers_in,
      VERS_nin => VERS_nin,
      funding_source_desc_in => funding_source_desc_in,
      FUNDING_SOURCE_DESC_nin => FUNDING_SOURCE_DESC_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN PAT_VACC_ADM_DET%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_pat_vacc_adm_det_in => rec_in.ID_PAT_VACC_ADM_DET,
         id_pat_vacc_adm_in => rec_in.ID_PAT_VACC_ADM,
         dt_take_in => rec_in.DT_TAKE,
         id_drug_presc_plan_in => rec_in.ID_DRUG_PRESC_PLAN,
         id_episode_in => rec_in.ID_EPISODE,
         flg_status_in => rec_in.FLG_STATUS,
         dt_cancel_in => rec_in.DT_CANCEL,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         desc_vaccine_in => rec_in.DESC_VACCINE,
         lot_number_in => rec_in.LOT_NUMBER,
         dt_expiration_in => rec_in.DT_EXPIRATION,
         flg_advers_react_in => rec_in.FLG_ADVERS_REACT,
         notes_advers_react_in => rec_in.NOTES_ADVERS_REACT,
         application_spot_in => rec_in.APPLICATION_SPOT,
         report_orig_in => rec_in.REPORT_ORIG,
         notes_in => rec_in.NOTES,
         emb_id_in => rec_in.EMB_ID,
         id_unit_measure_in => rec_in.ID_UNIT_MEASURE,
         id_prof_writes_in => rec_in.ID_PROF_WRITES,
         dt_reg_in => rec_in.DT_REG,
         adw_last_update_in => rec_in.ADW_LAST_UPDATE,
         id_pat_medication_list_in => rec_in.ID_PAT_MEDICATION_LIST,
         dt_next_take_in => rec_in.DT_NEXT_TAKE,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         flg_type_date_in => rec_in.FLG_TYPE_DATE,
         id_vacc_manufacturer_in => rec_in.ID_VACC_MANUFACTURER,
         code_mvx_in => rec_in.CODE_MVX,
         flg_reported_in => rec_in.FLG_REPORTED,
         id_information_source_in => rec_in.ID_INFORMATION_SOURCE,
         id_vacc_funding_cat_in => rec_in.ID_VACC_FUNDING_CAT,
         id_vacc_funding_source_in => rec_in.ID_VACC_FUNDING_SOURCE,
         id_vacc_doc_vis_in => rec_in.ID_VACC_DOC_VIS,
         id_vacc_origin_in => rec_in.ID_VACC_ORIGIN,
         origin_desc_in => rec_in.ORIGIN_DESC,
         vacc_route_data_in => rec_in.VACC_ROUTE_DATA,
         id_administred_in => rec_in.ID_ADMINISTRED,
         administred_desc_in => rec_in.ADMINISTRED_DESC,
         dt_doc_delivery_tstz_in => rec_in.DT_DOC_DELIVERY_TSTZ,
         id_vacc_adv_reaction_in => rec_in.ID_VACC_ADV_REACTION,
         application_spot_code_in => rec_in.APPLICATION_SPOT_CODE,
         doc_vis_desc_in => rec_in.DOC_VIS_DESC,
         suspended_notes_in => rec_in.SUSPENDED_NOTES,
         id_reason_sus_in => rec_in.ID_REASON_SUS,
         dt_suspended_in => rec_in.DT_SUSPENDED,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         vers_in => rec_in.VERS,
         funding_source_desc_in => rec_in.FUNDING_SOURCE_DESC

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN PAT_VACC_ADM_DET%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_pat_vacc_adm_det_in => rec_in.ID_PAT_VACC_ADM_DET,
         id_pat_vacc_adm_in => rec_in.ID_PAT_VACC_ADM,
         dt_take_in => rec_in.DT_TAKE,
         id_drug_presc_plan_in => rec_in.ID_DRUG_PRESC_PLAN,
         id_episode_in => rec_in.ID_EPISODE,
         flg_status_in => rec_in.FLG_STATUS,
         dt_cancel_in => rec_in.DT_CANCEL,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         desc_vaccine_in => rec_in.DESC_VACCINE,
         lot_number_in => rec_in.LOT_NUMBER,
         dt_expiration_in => rec_in.DT_EXPIRATION,
         flg_advers_react_in => rec_in.FLG_ADVERS_REACT,
         notes_advers_react_in => rec_in.NOTES_ADVERS_REACT,
         application_spot_in => rec_in.APPLICATION_SPOT,
         report_orig_in => rec_in.REPORT_ORIG,
         notes_in => rec_in.NOTES,
         emb_id_in => rec_in.EMB_ID,
         id_unit_measure_in => rec_in.ID_UNIT_MEASURE,
         id_prof_writes_in => rec_in.ID_PROF_WRITES,
         dt_reg_in => rec_in.DT_REG,
         adw_last_update_in => rec_in.ADW_LAST_UPDATE,
         id_pat_medication_list_in => rec_in.ID_PAT_MEDICATION_LIST,
         dt_next_take_in => rec_in.DT_NEXT_TAKE,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         flg_type_date_in => rec_in.FLG_TYPE_DATE,
         id_vacc_manufacturer_in => rec_in.ID_VACC_MANUFACTURER,
         code_mvx_in => rec_in.CODE_MVX,
         flg_reported_in => rec_in.FLG_REPORTED,
         id_information_source_in => rec_in.ID_INFORMATION_SOURCE,
         id_vacc_funding_cat_in => rec_in.ID_VACC_FUNDING_CAT,
         id_vacc_funding_source_in => rec_in.ID_VACC_FUNDING_SOURCE,
         id_vacc_doc_vis_in => rec_in.ID_VACC_DOC_VIS,
         id_vacc_origin_in => rec_in.ID_VACC_ORIGIN,
         origin_desc_in => rec_in.ORIGIN_DESC,
         vacc_route_data_in => rec_in.VACC_ROUTE_DATA,
         id_administred_in => rec_in.ID_ADMINISTRED,
         administred_desc_in => rec_in.ADMINISTRED_DESC,
         dt_doc_delivery_tstz_in => rec_in.DT_DOC_DELIVERY_TSTZ,
         id_vacc_adv_reaction_in => rec_in.ID_VACC_ADV_REACTION,
         application_spot_code_in => rec_in.APPLICATION_SPOT_CODE,
         doc_vis_desc_in => rec_in.DOC_VIS_DESC,
         suspended_notes_in => rec_in.SUSPENDED_NOTES,
         id_reason_sus_in => rec_in.ID_REASON_SUS,
         dt_suspended_in => rec_in.DT_SUSPENDED,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         vers_in => rec_in.VERS,
         funding_source_desc_in => rec_in.FUNDING_SOURCE_DESC

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_pat_vacc_adm_det_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE,
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_pat_vacc_adm_det_in => id_pat_vacc_adm_det_in,
         id_pat_vacc_adm_in => id_pat_vacc_adm_in,
         dt_take_in => dt_take_in,
         id_drug_presc_plan_in => id_drug_presc_plan_in,
         id_episode_in => id_episode_in,
         flg_status_in => flg_status_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         desc_vaccine_in => desc_vaccine_in,
         lot_number_in => lot_number_in,
         dt_expiration_in => dt_expiration_in,
         flg_advers_react_in => flg_advers_react_in,
         notes_advers_react_in => notes_advers_react_in,
         application_spot_in => application_spot_in,
         report_orig_in => report_orig_in,
         notes_in => notes_in,
         emb_id_in => emb_id_in,
         id_unit_measure_in => id_unit_measure_in,
         id_prof_writes_in => id_prof_writes_in,
         dt_reg_in => dt_reg_in,
         adw_last_update_in => adw_last_update_in,
         id_pat_medication_list_in => id_pat_medication_list_in,
         dt_next_take_in => dt_next_take_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_type_date_in => flg_type_date_in,
         id_vacc_manufacturer_in => id_vacc_manufacturer_in,
         code_mvx_in => code_mvx_in,
         flg_reported_in => flg_reported_in,
         id_information_source_in => id_information_source_in,
         id_vacc_funding_cat_in => id_vacc_funding_cat_in,
         id_vacc_funding_source_in => id_vacc_funding_source_in,
         id_vacc_doc_vis_in => id_vacc_doc_vis_in,
         id_vacc_origin_in => id_vacc_origin_in,
         origin_desc_in => origin_desc_in,
         vacc_route_data_in => vacc_route_data_in,
         id_administred_in => id_administred_in,
         administred_desc_in => administred_desc_in,
         dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
         id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
         application_spot_code_in => application_spot_code_in,
         doc_vis_desc_in => doc_vis_desc_in,
         suspended_notes_in => suspended_notes_in,
         id_reason_sus_in => id_reason_sus_in,
         dt_suspended_in => dt_suspended_in,
         id_cancel_reason_in => id_cancel_reason_in,
         vers_in => vers_in,
         funding_source_desc_in => funding_source_desc_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_pat_vacc_adm_det_in => id_pat_vacc_adm_det_in,
            id_pat_vacc_adm_in => id_pat_vacc_adm_in,
            dt_take_in => dt_take_in,
            id_drug_presc_plan_in => id_drug_presc_plan_in,
            id_episode_in => id_episode_in,
            flg_status_in => flg_status_in,
            dt_cancel_in => dt_cancel_in,
            id_prof_cancel_in => id_prof_cancel_in,
            notes_cancel_in => notes_cancel_in,
            desc_vaccine_in => desc_vaccine_in,
            lot_number_in => lot_number_in,
            dt_expiration_in => dt_expiration_in,
            flg_advers_react_in => flg_advers_react_in,
            notes_advers_react_in => notes_advers_react_in,
            application_spot_in => application_spot_in,
            report_orig_in => report_orig_in,
            notes_in => notes_in,
            emb_id_in => emb_id_in,
            id_unit_measure_in => id_unit_measure_in,
            id_prof_writes_in => id_prof_writes_in,
            dt_reg_in => dt_reg_in,
            adw_last_update_in => adw_last_update_in,
            id_pat_medication_list_in => id_pat_medication_list_in,
            dt_next_take_in => dt_next_take_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            flg_type_date_in => flg_type_date_in,
            id_vacc_manufacturer_in => id_vacc_manufacturer_in,
            code_mvx_in => code_mvx_in,
            flg_reported_in => flg_reported_in,
            id_information_source_in => id_information_source_in,
            id_vacc_funding_cat_in => id_vacc_funding_cat_in,
            id_vacc_funding_source_in => id_vacc_funding_source_in,
            id_vacc_doc_vis_in => id_vacc_doc_vis_in,
            id_vacc_origin_in => id_vacc_origin_in,
            origin_desc_in => origin_desc_in,
            vacc_route_data_in => vacc_route_data_in,
            id_administred_in => id_administred_in,
            administred_desc_in => administred_desc_in,
            dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
            id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
            application_spot_code_in => application_spot_code_in,
            doc_vis_desc_in => doc_vis_desc_in,
            suspended_notes_in => suspended_notes_in,
            id_reason_sus_in => id_reason_sus_in,
            dt_suspended_in => dt_suspended_in,
            id_cancel_reason_in => id_cancel_reason_in,
            vers_in => vers_in,
            funding_source_desc_in => funding_source_desc_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_pat_vacc_adm_det_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE,
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE DEFAULT NULL,
      dt_take_in IN PAT_VACC_ADM_DET.DT_TAKE%TYPE DEFAULT NULL,
      id_drug_presc_plan_in IN PAT_VACC_ADM_DET.ID_DRUG_PRESC_PLAN%TYPE DEFAULT NULL,
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_VACC_ADM_DET.FLG_STATUS%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_VACC_ADM_DET.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_VACC_ADM_DET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_VACC_ADM_DET.NOTES_CANCEL%TYPE DEFAULT NULL,
      desc_vaccine_in IN PAT_VACC_ADM_DET.DESC_VACCINE%TYPE DEFAULT NULL,
      lot_number_in IN PAT_VACC_ADM_DET.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN PAT_VACC_ADM_DET.DT_EXPIRATION%TYPE DEFAULT NULL,
      flg_advers_react_in IN PAT_VACC_ADM_DET.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_VACC_ADM_DET.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT%TYPE DEFAULT NULL,
      report_orig_in IN PAT_VACC_ADM_DET.REPORT_ORIG%TYPE DEFAULT NULL,
      notes_in IN PAT_VACC_ADM_DET.NOTES%TYPE DEFAULT NULL,
      emb_id_in IN PAT_VACC_ADM_DET.EMB_ID%TYPE DEFAULT NULL,
      id_unit_measure_in IN PAT_VACC_ADM_DET.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_writes_in IN PAT_VACC_ADM_DET.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dt_reg_in IN PAT_VACC_ADM_DET.DT_REG%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_VACC_ADM_DET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      dt_next_take_in IN PAT_VACC_ADM_DET.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      create_user_in IN PAT_VACC_ADM_DET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_VACC_ADM_DET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_VACC_ADM_DET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_VACC_ADM_DET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_VACC_ADM_DET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_VACC_ADM_DET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_type_date_in IN PAT_VACC_ADM_DET.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_manufacturer_in IN PAT_VACC_ADM_DET.ID_VACC_MANUFACTURER%TYPE DEFAULT NULL,
      code_mvx_in IN PAT_VACC_ADM_DET.CODE_MVX%TYPE DEFAULT NULL,
      flg_reported_in IN PAT_VACC_ADM_DET.FLG_REPORTED%TYPE DEFAULT NULL,
      id_information_source_in IN PAT_VACC_ADM_DET.ID_INFORMATION_SOURCE%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      origin_desc_in IN PAT_VACC_ADM_DET.ORIGIN_DESC%TYPE DEFAULT NULL,
      vacc_route_data_in IN PAT_VACC_ADM_DET.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      id_administred_in IN PAT_VACC_ADM_DET.ID_ADMINISTRED%TYPE DEFAULT NULL,
      administred_desc_in IN PAT_VACC_ADM_DET.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN PAT_VACC_ADM_DET.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN PAT_VACC_ADM_DET.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      doc_vis_desc_in IN PAT_VACC_ADM_DET.DOC_VIS_DESC%TYPE DEFAULT NULL,
      suspended_notes_in IN PAT_VACC_ADM_DET.SUSPENDED_NOTES%TYPE DEFAULT NULL,
      id_reason_sus_in IN PAT_VACC_ADM_DET.ID_REASON_SUS%TYPE DEFAULT NULL,
      dt_suspended_in IN PAT_VACC_ADM_DET.DT_SUSPENDED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      vers_in IN PAT_VACC_ADM_DET.VERS%TYPE DEFAULT NULL,
      funding_source_desc_in IN PAT_VACC_ADM_DET.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_pat_vacc_adm_det_in,
      id_pat_vacc_adm_in,
      dt_take_in,
      id_drug_presc_plan_in,
      id_episode_in,
      flg_status_in,
      dt_cancel_in,
      id_prof_cancel_in,
      notes_cancel_in,
      desc_vaccine_in,
      lot_number_in,
      dt_expiration_in,
      flg_advers_react_in,
      notes_advers_react_in,
      application_spot_in,
      report_orig_in,
      notes_in,
      emb_id_in,
      id_unit_measure_in,
      id_prof_writes_in,
      dt_reg_in,
      adw_last_update_in,
      id_pat_medication_list_in,
      dt_next_take_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      flg_type_date_in,
      id_vacc_manufacturer_in,
      code_mvx_in,
      flg_reported_in,
      id_information_source_in,
      id_vacc_funding_cat_in,
      id_vacc_funding_source_in,
      id_vacc_doc_vis_in,
      id_vacc_origin_in,
      origin_desc_in,
      vacc_route_data_in,
      id_administred_in,
      administred_desc_in,
      dt_doc_delivery_tstz_in,
      id_vacc_adv_reaction_in,
      application_spot_code_in,
      doc_vis_desc_in,
      suspended_notes_in,
      id_reason_sus_in,
      dt_suspended_in,
      id_cancel_reason_in,
      vers_in,
      funding_source_desc_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN PAT_VACC_ADM_DET_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_PAT_VACC_ADM_DET ID_PAT_VACC_ADM_DET_cc;
      l_ID_PAT_VACC_ADM ID_PAT_VACC_ADM_cc;
      l_DT_TAKE DT_TAKE_cc;
      l_ID_DRUG_PRESC_PLAN ID_DRUG_PRESC_PLAN_cc;
      l_ID_EPISODE ID_EPISODE_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_DT_CANCEL DT_CANCEL_cc;
      l_ID_PROF_CANCEL ID_PROF_CANCEL_cc;
      l_NOTES_CANCEL NOTES_CANCEL_cc;
      l_DESC_VACCINE DESC_VACCINE_cc;
      l_LOT_NUMBER LOT_NUMBER_cc;
      l_DT_EXPIRATION DT_EXPIRATION_cc;
      l_FLG_ADVERS_REACT FLG_ADVERS_REACT_cc;
      l_NOTES_ADVERS_REACT NOTES_ADVERS_REACT_cc;
      l_APPLICATION_SPOT APPLICATION_SPOT_cc;
      l_REPORT_ORIG REPORT_ORIG_cc;
      l_NOTES NOTES_cc;
      l_EMB_ID EMB_ID_cc;
      l_ID_UNIT_MEASURE ID_UNIT_MEASURE_cc;
      l_ID_PROF_WRITES ID_PROF_WRITES_cc;
      l_DT_REG DT_REG_cc;
      l_ADW_LAST_UPDATE ADW_LAST_UPDATE_cc;
      l_ID_PAT_MEDICATION_LIST ID_PAT_MEDICATION_LIST_cc;
      l_DT_NEXT_TAKE DT_NEXT_TAKE_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_FLG_TYPE_DATE FLG_TYPE_DATE_cc;
      l_ID_VACC_MANUFACTURER ID_VACC_MANUFACTURER_cc;
      l_CODE_MVX CODE_MVX_cc;
      l_FLG_REPORTED FLG_REPORTED_cc;
      l_ID_INFORMATION_SOURCE ID_INFORMATION_SOURCE_cc;
      l_ID_VACC_FUNDING_CAT ID_VACC_FUNDING_CAT_cc;
      l_ID_VACC_FUNDING_SOURCE ID_VACC_FUNDING_SOURCE_cc;
      l_ID_VACC_DOC_VIS ID_VACC_DOC_VIS_cc;
      l_ID_VACC_ORIGIN ID_VACC_ORIGIN_cc;
      l_ORIGIN_DESC ORIGIN_DESC_cc;
      l_VACC_ROUTE_DATA VACC_ROUTE_DATA_cc;
      l_ID_ADMINISTRED ID_ADMINISTRED_cc;
      l_ADMINISTRED_DESC ADMINISTRED_DESC_cc;
      l_DT_DOC_DELIVERY_TSTZ DT_DOC_DELIVERY_TSTZ_cc;
      l_ID_VACC_ADV_REACTION ID_VACC_ADV_REACTION_cc;
      l_APPLICATION_SPOT_CODE APPLICATION_SPOT_CODE_cc;
      l_DOC_VIS_DESC DOC_VIS_DESC_cc;
      l_SUSPENDED_NOTES SUSPENDED_NOTES_cc;
      l_ID_REASON_SUS ID_REASON_SUS_cc;
      l_DT_SUSPENDED DT_SUSPENDED_cc;
      l_ID_CANCEL_REASON ID_CANCEL_REASON_cc;
      l_VERS VERS_cc;
      l_FUNDING_SOURCE_DESC FUNDING_SOURCE_DESC_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_PAT_VACC_ADM_DET(i) := col_in(i).ID_PAT_VACC_ADM_DET;
         l_ID_PAT_VACC_ADM(i) := col_in(i).ID_PAT_VACC_ADM;
         l_DT_TAKE(i) := col_in(i).DT_TAKE;
         l_ID_DRUG_PRESC_PLAN(i) := col_in(i).ID_DRUG_PRESC_PLAN;
         l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_DT_CANCEL(i) := col_in(i).DT_CANCEL;
         l_ID_PROF_CANCEL(i) := col_in(i).ID_PROF_CANCEL;
         l_NOTES_CANCEL(i) := col_in(i).NOTES_CANCEL;
         l_DESC_VACCINE(i) := col_in(i).DESC_VACCINE;
         l_LOT_NUMBER(i) := col_in(i).LOT_NUMBER;
         l_DT_EXPIRATION(i) := col_in(i).DT_EXPIRATION;
         l_FLG_ADVERS_REACT(i) := col_in(i).FLG_ADVERS_REACT;
         l_NOTES_ADVERS_REACT(i) := col_in(i).NOTES_ADVERS_REACT;
         l_APPLICATION_SPOT(i) := col_in(i).APPLICATION_SPOT;
         l_REPORT_ORIG(i) := col_in(i).REPORT_ORIG;
         l_NOTES(i) := col_in(i).NOTES;
         l_EMB_ID(i) := col_in(i).EMB_ID;
         l_ID_UNIT_MEASURE(i) := col_in(i).ID_UNIT_MEASURE;
         l_ID_PROF_WRITES(i) := col_in(i).ID_PROF_WRITES;
         l_DT_REG(i) := col_in(i).DT_REG;
         l_ADW_LAST_UPDATE(i) := col_in(i).ADW_LAST_UPDATE;
         l_ID_PAT_MEDICATION_LIST(i) := col_in(i).ID_PAT_MEDICATION_LIST;
         l_DT_NEXT_TAKE(i) := col_in(i).DT_NEXT_TAKE;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_FLG_TYPE_DATE(i) := col_in(i).FLG_TYPE_DATE;
         l_ID_VACC_MANUFACTURER(i) := col_in(i).ID_VACC_MANUFACTURER;
         l_CODE_MVX(i) := col_in(i).CODE_MVX;
         l_FLG_REPORTED(i) := col_in(i).FLG_REPORTED;
         l_ID_INFORMATION_SOURCE(i) := col_in(i).ID_INFORMATION_SOURCE;
         l_ID_VACC_FUNDING_CAT(i) := col_in(i).ID_VACC_FUNDING_CAT;
         l_ID_VACC_FUNDING_SOURCE(i) := col_in(i).ID_VACC_FUNDING_SOURCE;
         l_ID_VACC_DOC_VIS(i) := col_in(i).ID_VACC_DOC_VIS;
         l_ID_VACC_ORIGIN(i) := col_in(i).ID_VACC_ORIGIN;
         l_ORIGIN_DESC(i) := col_in(i).ORIGIN_DESC;
         l_VACC_ROUTE_DATA(i) := col_in(i).VACC_ROUTE_DATA;
         l_ID_ADMINISTRED(i) := col_in(i).ID_ADMINISTRED;
         l_ADMINISTRED_DESC(i) := col_in(i).ADMINISTRED_DESC;
         l_DT_DOC_DELIVERY_TSTZ(i) := col_in(i).DT_DOC_DELIVERY_TSTZ;
         l_ID_VACC_ADV_REACTION(i) := col_in(i).ID_VACC_ADV_REACTION;
         l_APPLICATION_SPOT_CODE(i) := col_in(i).APPLICATION_SPOT_CODE;
         l_DOC_VIS_DESC(i) := col_in(i).DOC_VIS_DESC;
         l_SUSPENDED_NOTES(i) := col_in(i).SUSPENDED_NOTES;
         l_ID_REASON_SUS(i) := col_in(i).ID_REASON_SUS;
         l_DT_SUSPENDED(i) := col_in(i).DT_SUSPENDED;
         l_ID_CANCEL_REASON(i) := col_in(i).ID_CANCEL_REASON;
         l_VERS(i) := col_in(i).VERS;
         l_FUNDING_SOURCE_DESC(i) := col_in(i).FUNDING_SOURCE_DESC;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PAT_VACC_ADM_DET SET
               ID_PAT_VACC_ADM = NVL (l_ID_PAT_VACC_ADM(i), ID_PAT_VACC_ADM),
               DT_TAKE = NVL (l_DT_TAKE(i), DT_TAKE),
               ID_DRUG_PRESC_PLAN = NVL (l_ID_DRUG_PRESC_PLAN(i), ID_DRUG_PRESC_PLAN),
               ID_EPISODE = NVL (l_ID_EPISODE(i), ID_EPISODE),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               DT_CANCEL = NVL (l_DT_CANCEL(i), DT_CANCEL),
               ID_PROF_CANCEL = NVL (l_ID_PROF_CANCEL(i), ID_PROF_CANCEL),
               NOTES_CANCEL = NVL (l_NOTES_CANCEL(i), NOTES_CANCEL),
               DESC_VACCINE = NVL (l_DESC_VACCINE(i), DESC_VACCINE),
               LOT_NUMBER = NVL (l_LOT_NUMBER(i), LOT_NUMBER),
               DT_EXPIRATION = NVL (l_DT_EXPIRATION(i), DT_EXPIRATION),
               FLG_ADVERS_REACT = NVL (l_FLG_ADVERS_REACT(i), FLG_ADVERS_REACT),
               NOTES_ADVERS_REACT = NVL (l_NOTES_ADVERS_REACT(i), NOTES_ADVERS_REACT),
               APPLICATION_SPOT = NVL (l_APPLICATION_SPOT(i), APPLICATION_SPOT),
               REPORT_ORIG = NVL (l_REPORT_ORIG(i), REPORT_ORIG),
               NOTES = NVL (l_NOTES(i), NOTES),
               EMB_ID = NVL (l_EMB_ID(i), EMB_ID),
               ID_UNIT_MEASURE = NVL (l_ID_UNIT_MEASURE(i), ID_UNIT_MEASURE),
               ID_PROF_WRITES = NVL (l_ID_PROF_WRITES(i), ID_PROF_WRITES),
               DT_REG = NVL (l_DT_REG(i), DT_REG),
               ADW_LAST_UPDATE = NVL (l_ADW_LAST_UPDATE(i), ADW_LAST_UPDATE),
               ID_PAT_MEDICATION_LIST = NVL (l_ID_PAT_MEDICATION_LIST(i), ID_PAT_MEDICATION_LIST),
               DT_NEXT_TAKE = NVL (l_DT_NEXT_TAKE(i), DT_NEXT_TAKE),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               FLG_TYPE_DATE = NVL (l_FLG_TYPE_DATE(i), FLG_TYPE_DATE),
               ID_VACC_MANUFACTURER = NVL (l_ID_VACC_MANUFACTURER(i), ID_VACC_MANUFACTURER),
               CODE_MVX = NVL (l_CODE_MVX(i), CODE_MVX),
               FLG_REPORTED = NVL (l_FLG_REPORTED(i), FLG_REPORTED),
               ID_INFORMATION_SOURCE = NVL (l_ID_INFORMATION_SOURCE(i), ID_INFORMATION_SOURCE),
               ID_VACC_FUNDING_CAT = NVL (l_ID_VACC_FUNDING_CAT(i), ID_VACC_FUNDING_CAT),
               ID_VACC_FUNDING_SOURCE = NVL (l_ID_VACC_FUNDING_SOURCE(i), ID_VACC_FUNDING_SOURCE),
               ID_VACC_DOC_VIS = NVL (l_ID_VACC_DOC_VIS(i), ID_VACC_DOC_VIS),
               ID_VACC_ORIGIN = NVL (l_ID_VACC_ORIGIN(i), ID_VACC_ORIGIN),
               ORIGIN_DESC = NVL (l_ORIGIN_DESC(i), ORIGIN_DESC),
               VACC_ROUTE_DATA = NVL (l_VACC_ROUTE_DATA(i), VACC_ROUTE_DATA),
               ID_ADMINISTRED = NVL (l_ID_ADMINISTRED(i), ID_ADMINISTRED),
               ADMINISTRED_DESC = NVL (l_ADMINISTRED_DESC(i), ADMINISTRED_DESC),
               DT_DOC_DELIVERY_TSTZ = NVL (l_DT_DOC_DELIVERY_TSTZ(i), DT_DOC_DELIVERY_TSTZ),
               ID_VACC_ADV_REACTION = NVL (l_ID_VACC_ADV_REACTION(i), ID_VACC_ADV_REACTION),
               APPLICATION_SPOT_CODE = NVL (l_APPLICATION_SPOT_CODE(i), APPLICATION_SPOT_CODE),
               DOC_VIS_DESC = NVL (l_DOC_VIS_DESC(i), DOC_VIS_DESC),
               SUSPENDED_NOTES = NVL (l_SUSPENDED_NOTES(i), SUSPENDED_NOTES),
               ID_REASON_SUS = NVL (l_ID_REASON_SUS(i), ID_REASON_SUS),
               DT_SUSPENDED = NVL (l_DT_SUSPENDED(i), DT_SUSPENDED),
               ID_CANCEL_REASON = NVL (l_ID_CANCEL_REASON(i), ID_CANCEL_REASON),
               VERS = NVL (l_VERS(i), VERS),
               FUNDING_SOURCE_DESC = NVL (l_FUNDING_SOURCE_DESC(i), FUNDING_SOURCE_DESC)
             WHERE
                ID_PAT_VACC_ADM_DET = l_ID_PAT_VACC_ADM_DET(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PAT_VACC_ADM_DET SET
               ID_PAT_VACC_ADM = l_ID_PAT_VACC_ADM(i),
               DT_TAKE = l_DT_TAKE(i),
               ID_DRUG_PRESC_PLAN = l_ID_DRUG_PRESC_PLAN(i),
               ID_EPISODE = l_ID_EPISODE(i),
               FLG_STATUS = l_FLG_STATUS(i),
               DT_CANCEL = l_DT_CANCEL(i),
               ID_PROF_CANCEL = l_ID_PROF_CANCEL(i),
               NOTES_CANCEL = l_NOTES_CANCEL(i),
               DESC_VACCINE = l_DESC_VACCINE(i),
               LOT_NUMBER = l_LOT_NUMBER(i),
               DT_EXPIRATION = l_DT_EXPIRATION(i),
               FLG_ADVERS_REACT = l_FLG_ADVERS_REACT(i),
               NOTES_ADVERS_REACT = l_NOTES_ADVERS_REACT(i),
               APPLICATION_SPOT = l_APPLICATION_SPOT(i),
               REPORT_ORIG = l_REPORT_ORIG(i),
               NOTES = l_NOTES(i),
               EMB_ID = l_EMB_ID(i),
               ID_UNIT_MEASURE = l_ID_UNIT_MEASURE(i),
               ID_PROF_WRITES = l_ID_PROF_WRITES(i),
               DT_REG = l_DT_REG(i),
               ADW_LAST_UPDATE = l_ADW_LAST_UPDATE(i),
               ID_PAT_MEDICATION_LIST = l_ID_PAT_MEDICATION_LIST(i),
               DT_NEXT_TAKE = l_DT_NEXT_TAKE(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               FLG_TYPE_DATE = l_FLG_TYPE_DATE(i),
               ID_VACC_MANUFACTURER = l_ID_VACC_MANUFACTURER(i),
               CODE_MVX = l_CODE_MVX(i),
               FLG_REPORTED = l_FLG_REPORTED(i),
               ID_INFORMATION_SOURCE = l_ID_INFORMATION_SOURCE(i),
               ID_VACC_FUNDING_CAT = l_ID_VACC_FUNDING_CAT(i),
               ID_VACC_FUNDING_SOURCE = l_ID_VACC_FUNDING_SOURCE(i),
               ID_VACC_DOC_VIS = l_ID_VACC_DOC_VIS(i),
               ID_VACC_ORIGIN = l_ID_VACC_ORIGIN(i),
               ORIGIN_DESC = l_ORIGIN_DESC(i),
               VACC_ROUTE_DATA = l_VACC_ROUTE_DATA(i),
               ID_ADMINISTRED = l_ID_ADMINISTRED(i),
               ADMINISTRED_DESC = l_ADMINISTRED_DESC(i),
               DT_DOC_DELIVERY_TSTZ = l_DT_DOC_DELIVERY_TSTZ(i),
               ID_VACC_ADV_REACTION = l_ID_VACC_ADV_REACTION(i),
               APPLICATION_SPOT_CODE = l_APPLICATION_SPOT_CODE(i),
               DOC_VIS_DESC = l_DOC_VIS_DESC(i),
               SUSPENDED_NOTES = l_SUSPENDED_NOTES(i),
               ID_REASON_SUS = l_ID_REASON_SUS(i),
               DT_SUSPENDED = l_DT_SUSPENDED(i),
               ID_CANCEL_REASON = l_ID_CANCEL_REASON(i),
               VERS = l_VERS(i),
               FUNDING_SOURCE_DESC = l_FUNDING_SOURCE_DESC(i)
             WHERE
                ID_PAT_VACC_ADM_DET = l_ID_PAT_VACC_ADM_DET(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN PAT_VACC_ADM_DET_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE PAT_VACC_ADM_DET
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE PAT_VACC_ADM_DET
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_VACC_ADM_DET set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE PAT_VACC_ADM_DET set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_pat_vacc_adm_det_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_VACC_ADM_DET
       WHERE
          ID_PAT_VACC_ADM_DET = id_pat_vacc_adm_det_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_pat_vacc_adm_det_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_pat_vacc_adm_det_in => id_pat_vacc_adm_det_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_PAT_VACC_ADM_DET
   PROCEDURE del_ID_PAT_VACC_ADM_DET (
      id_pat_vacc_adm_det_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM PAT_VACC_ADM_DET
       WHERE ID_PAT_VACC_ADM_DET = id_pat_vacc_adm_det_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_PAT_VACC_ADM_DET;






   -- Delete all rows for primary key column ID_PAT_VACC_ADM_DET
   PROCEDURE del_ID_PAT_VACC_ADM_DET (
      id_pat_vacc_adm_det_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM_DET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_PAT_VACC_ADM_DET (
      id_pat_vacc_adm_det_in => id_pat_vacc_adm_det_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_PAT_VACC_ADM_DET;















   PROCEDURE del_PAVAAD_EPIS_FK (
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_VACC_ADM_DET
       WHERE
          ID_EPISODE = del_PAVAAD_EPIS_FK.id_episode_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PAVAAD_EPIS_FK;



PROCEDURE del_PAVAAD_EPIS_FK (
      id_episode_in IN PAT_VACC_ADM_DET.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PAVAAD_EPIS_FK (
      id_episode_in => id_episode_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PAVAAD_EPIS_FK;





   PROCEDURE del_PAVAAD_PAVAA_FK (
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_VACC_ADM_DET
       WHERE
          ID_PAT_VACC_ADM = del_PAVAAD_PAVAA_FK.id_pat_vacc_adm_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PAVAAD_PAVAA_FK;



PROCEDURE del_PAVAAD_PAVAA_FK (
      id_pat_vacc_adm_in IN PAT_VACC_ADM_DET.ID_PAT_VACC_ADM%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PAVAAD_PAVAA_FK (
      id_pat_vacc_adm_in => id_pat_vacc_adm_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PAVAAD_PAVAA_FK;





   PROCEDURE del_PAVAAD_PML_FK (
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_VACC_ADM_DET
       WHERE
          ID_PAT_MEDICATION_LIST = del_PAVAAD_PML_FK.id_pat_medication_list_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PAVAAD_PML_FK;



PROCEDURE del_PAVAAD_PML_FK (
      id_pat_medication_list_in IN PAT_VACC_ADM_DET.ID_PAT_MEDICATION_LIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PAVAAD_PML_FK (
      id_pat_medication_list_in => id_pat_medication_list_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PAVAAD_PML_FK;





   PROCEDURE del_PVAD_CANCEL_REASON_FK (
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_VACC_ADM_DET
       WHERE
          ID_CANCEL_REASON = del_PVAD_CANCEL_REASON_FK.id_cancel_reason_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PVAD_CANCEL_REASON_FK;



PROCEDURE del_PVAD_CANCEL_REASON_FK (
      id_cancel_reason_in IN PAT_VACC_ADM_DET.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PVAD_CANCEL_REASON_FK (
      id_cancel_reason_in => id_cancel_reason_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PVAD_CANCEL_REASON_FK;





   PROCEDURE del_REP_ADV_REACTION_CVX (
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_VACC_ADM_DET
       WHERE
          ID_VACC_ADV_REACTION = del_REP_ADV_REACTION_CVX.id_vacc_adv_reaction_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_REP_ADV_REACTION_CVX;



PROCEDURE del_REP_ADV_REACTION_CVX (
      id_vacc_adv_reaction_in IN PAT_VACC_ADM_DET.ID_VACC_ADV_REACTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_REP_ADV_REACTION_CVX (
      id_vacc_adv_reaction_in => id_vacc_adv_reaction_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_REP_ADV_REACTION_CVX;





   PROCEDURE del_REP_DOC_VIS_CVX (
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_VACC_ADM_DET
       WHERE
          ID_VACC_DOC_VIS = del_REP_DOC_VIS_CVX.id_vacc_doc_vis_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_REP_DOC_VIS_CVX;



PROCEDURE del_REP_DOC_VIS_CVX (
      id_vacc_doc_vis_in IN PAT_VACC_ADM_DET.ID_VACC_DOC_VIS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_REP_DOC_VIS_CVX (
      id_vacc_doc_vis_in => id_vacc_doc_vis_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_REP_DOC_VIS_CVX;





   PROCEDURE del_REP_FUNDING_CAT_CVX (
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_VACC_ADM_DET
       WHERE
          ID_VACC_FUNDING_CAT = del_REP_FUNDING_CAT_CVX.id_vacc_funding_cat_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_REP_FUNDING_CAT_CVX;



PROCEDURE del_REP_FUNDING_CAT_CVX (
      id_vacc_funding_cat_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_CAT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_REP_FUNDING_CAT_CVX (
      id_vacc_funding_cat_in => id_vacc_funding_cat_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_REP_FUNDING_CAT_CVX;





   PROCEDURE del_REP_FUNDING_SOURCE_CVX (
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_VACC_ADM_DET
       WHERE
          ID_VACC_FUNDING_SOURCE = del_REP_FUNDING_SOURCE_CVX.id_vacc_funding_source_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_REP_FUNDING_SOURCE_CVX;



PROCEDURE del_REP_FUNDING_SOURCE_CVX (
      id_vacc_funding_source_in IN PAT_VACC_ADM_DET.ID_VACC_FUNDING_SOURCE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_REP_FUNDING_SOURCE_CVX (
      id_vacc_funding_source_in => id_vacc_funding_source_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_REP_FUNDING_SOURCE_CVX;





   PROCEDURE del_REP_ORIGIN_CVX (
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_VACC_ADM_DET
       WHERE
          ID_VACC_ORIGIN = del_REP_ORIGIN_CVX.id_vacc_origin_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_REP_ORIGIN_CVX;



PROCEDURE del_REP_ORIGIN_CVX (
      id_vacc_origin_in IN PAT_VACC_ADM_DET.ID_VACC_ORIGIN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_REP_ORIGIN_CVX (
      id_vacc_origin_in => id_vacc_origin_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_REP_ORIGIN_CVX;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM PAT_VACC_ADM_DET';
      ELSE
         RETURN
            'DELETE FROM PAT_VACC_ADM_DET WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_VACC_ADM_DET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_VACC_ADM_DET');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      pat_vacc_adm_det_inout IN OUT PAT_VACC_ADM_DET%ROWTYPE
   )
   IS
   BEGIN
      pat_vacc_adm_det_inout.ID_PAT_VACC_ADM_DET := NULL;
      pat_vacc_adm_det_inout.ID_PAT_VACC_ADM := NULL;
      pat_vacc_adm_det_inout.DT_TAKE := NULL;
      pat_vacc_adm_det_inout.ID_DRUG_PRESC_PLAN := NULL;
      pat_vacc_adm_det_inout.ID_EPISODE := NULL;
      pat_vacc_adm_det_inout.FLG_STATUS := NULL;
      pat_vacc_adm_det_inout.DT_CANCEL := NULL;
      pat_vacc_adm_det_inout.ID_PROF_CANCEL := NULL;
      pat_vacc_adm_det_inout.NOTES_CANCEL := NULL;
      pat_vacc_adm_det_inout.DESC_VACCINE := NULL;
      pat_vacc_adm_det_inout.LOT_NUMBER := NULL;
      pat_vacc_adm_det_inout.DT_EXPIRATION := NULL;
      pat_vacc_adm_det_inout.FLG_ADVERS_REACT := NULL;
      pat_vacc_adm_det_inout.NOTES_ADVERS_REACT := NULL;
      pat_vacc_adm_det_inout.APPLICATION_SPOT := NULL;
      pat_vacc_adm_det_inout.REPORT_ORIG := NULL;
      pat_vacc_adm_det_inout.NOTES := NULL;
      pat_vacc_adm_det_inout.EMB_ID := NULL;
      pat_vacc_adm_det_inout.ID_UNIT_MEASURE := NULL;
      pat_vacc_adm_det_inout.ID_PROF_WRITES := NULL;
      pat_vacc_adm_det_inout.DT_REG := NULL;
      pat_vacc_adm_det_inout.ADW_LAST_UPDATE := NULL;
      pat_vacc_adm_det_inout.ID_PAT_MEDICATION_LIST := NULL;
      pat_vacc_adm_det_inout.DT_NEXT_TAKE := NULL;
      pat_vacc_adm_det_inout.CREATE_USER := NULL;
      pat_vacc_adm_det_inout.CREATE_TIME := NULL;
      pat_vacc_adm_det_inout.CREATE_INSTITUTION := NULL;
      pat_vacc_adm_det_inout.UPDATE_USER := NULL;
      pat_vacc_adm_det_inout.UPDATE_TIME := NULL;
      pat_vacc_adm_det_inout.UPDATE_INSTITUTION := NULL;
      pat_vacc_adm_det_inout.FLG_TYPE_DATE := NULL;
      pat_vacc_adm_det_inout.ID_VACC_MANUFACTURER := NULL;
      pat_vacc_adm_det_inout.CODE_MVX := NULL;
      pat_vacc_adm_det_inout.FLG_REPORTED := NULL;
      pat_vacc_adm_det_inout.ID_INFORMATION_SOURCE := NULL;
      pat_vacc_adm_det_inout.ID_VACC_FUNDING_CAT := NULL;
      pat_vacc_adm_det_inout.ID_VACC_FUNDING_SOURCE := NULL;
      pat_vacc_adm_det_inout.ID_VACC_DOC_VIS := NULL;
      pat_vacc_adm_det_inout.ID_VACC_ORIGIN := NULL;
      pat_vacc_adm_det_inout.ORIGIN_DESC := NULL;
      pat_vacc_adm_det_inout.VACC_ROUTE_DATA := NULL;
      pat_vacc_adm_det_inout.ID_ADMINISTRED := NULL;
      pat_vacc_adm_det_inout.ADMINISTRED_DESC := NULL;
      pat_vacc_adm_det_inout.DT_DOC_DELIVERY_TSTZ := NULL;
      pat_vacc_adm_det_inout.ID_VACC_ADV_REACTION := NULL;
      pat_vacc_adm_det_inout.APPLICATION_SPOT_CODE := NULL;
      pat_vacc_adm_det_inout.DOC_VIS_DESC := NULL;
      pat_vacc_adm_det_inout.SUSPENDED_NOTES := NULL;
      pat_vacc_adm_det_inout.ID_REASON_SUS := NULL;
      pat_vacc_adm_det_inout.DT_SUSPENDED := NULL;
      pat_vacc_adm_det_inout.ID_CANCEL_REASON := NULL;
      pat_vacc_adm_det_inout.VERS := NULL;
      pat_vacc_adm_det_inout.FUNDING_SOURCE_DESC := NULL;
   END initrec;

   FUNCTION initrec RETURN PAT_VACC_ADM_DET%ROWTYPE
   IS
      l_pat_vacc_adm_det PAT_VACC_ADM_DET%ROWTYPE;
   BEGIN
      RETURN l_pat_vacc_adm_det;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN PAT_VACC_ADM_DET_tc
   IS
        data PAT_VACC_ADM_DET_tc;
   BEGIN
        select * bulk collect into data from PAT_VACC_ADM_DET where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        PK_ALERT_EXCEPTIONS.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN PAT_VACC_ADM_DET_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data PAT_VACC_ADM_DET_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        PK_ALERT_EXCEPTIONS.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_PAT_VACC_ADM_DET;
/
