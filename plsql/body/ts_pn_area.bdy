/*-- Last Change Revision: $Rev: 1738197 $*/
/*-- Last Change by: $Author: vanessa.barsottelli $*/
/*-- Date of last change: $Date: 2016-05-19 12:02:03 +0100 (qui, 19 mai 2016) $*/
CREATE OR REPLACE PACKAGE BODY TS_PN_AREA
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: May 6, 2016 12:11:0
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_pn_area_in IN PN_AREA.ID_PN_AREA%TYPE
      ,
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO PN_AREA (
         ID_PN_AREA,
         INTERNAL_NAME,
         CODE_PN_AREA,
         SCREEN_NAME,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         CANCEL_REASON_NOTE,
         CANCEL_REASON_ADDENDUM,
         STEXT_ADDENDUM_CREATE,
         STEXT_ADDENDUM_CANCEL,
         STEXT_NOTE_CANCEL,
         ID_REPORT,
         FLG_TASK,
         ID_CATEGORY,
         ID_SYS_SHORTCUT,
         RANK
         )
      VALUES (
         id_pn_area_in,
         internal_name_in,
         code_pn_area_in,
         screen_name_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         cancel_reason_note_in,
         cancel_reason_addendum_in,
         stext_addendum_create_in,
         stext_addendum_cancel_in,
         stext_note_cancel_in,
         id_report_in,
         flg_task_in,
         id_category_in,
         id_sys_shortcut_in,
         rank_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PN_AREA');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           IF l_name = 'PA_REP_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_REPORT'
               , value_in => id_report_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_pn_area_in IN PN_AREA.ID_PN_AREA%TYPE
      ,
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_pn_area_in => id_pn_area_in
      ,
      internal_name_in => internal_name_in,
      code_pn_area_in => code_pn_area_in,
      screen_name_in => screen_name_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      cancel_reason_note_in => cancel_reason_note_in,
      cancel_reason_addendum_in => cancel_reason_addendum_in,
      stext_addendum_create_in => stext_addendum_create_in,
      stext_addendum_cancel_in => stext_addendum_cancel_in,
      stext_note_cancel_in => stext_note_cancel_in,
      id_report_in => id_report_in,
      flg_task_in => flg_task_in,
      id_category_in => id_category_in,
      id_sys_shortcut_in => id_sys_shortcut_in,
      rank_in => rank_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN PN_AREA%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec PN_AREA%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_PN_AREA := next_key (sequence_in);
      END IF;
      ins (
         id_pn_area_in => l_rec.ID_PN_AREA
         ,
         internal_name_in => l_rec.INTERNAL_NAME,
         code_pn_area_in => l_rec.CODE_PN_AREA,
         screen_name_in => l_rec.SCREEN_NAME,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         cancel_reason_note_in => l_rec.CANCEL_REASON_NOTE,
         cancel_reason_addendum_in => l_rec.CANCEL_REASON_ADDENDUM,
         stext_addendum_create_in => l_rec.STEXT_ADDENDUM_CREATE,
         stext_addendum_cancel_in => l_rec.STEXT_ADDENDUM_CANCEL,
         stext_note_cancel_in => l_rec.STEXT_NOTE_CANCEL,
         id_report_in => l_rec.ID_REPORT,
         flg_task_in => l_rec.FLG_TASK,
         id_category_in => l_rec.ID_CATEGORY,
         id_sys_shortcut_in => l_rec.ID_SYS_SHORTCUT,
         rank_in => l_rec.RANK
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN PN_AREA%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN PN_AREA.ID_PN_AREA%TYPE

   IS
     retval PN_AREA.ID_PN_AREA%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_PN_AREA.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_PN_AREA')
           );
   END next_key;

   PROCEDURE ins (
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL,
      id_pn_area_out IN OUT PN_AREA.ID_PN_AREA%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky PN_AREA.ID_PN_AREA%TYPE := next_key;
   BEGIN
      ins (
         id_pn_area_in => l_pky,
         internal_name_in => internal_name_in,
         code_pn_area_in => code_pn_area_in,
         screen_name_in => screen_name_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         cancel_reason_note_in => cancel_reason_note_in,
         cancel_reason_addendum_in => cancel_reason_addendum_in,
         stext_addendum_create_in => stext_addendum_create_in,
         stext_addendum_cancel_in => stext_addendum_cancel_in,
         stext_note_cancel_in => stext_note_cancel_in,
         id_report_in => id_report_in,
         flg_task_in => flg_task_in,
         id_category_in => id_category_in,
         id_sys_shortcut_in => id_sys_shortcut_in,
         rank_in => rank_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_pn_area_out := l_pky;
   END ins;

   PROCEDURE ins (
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL,
      id_pn_area_out IN OUT PN_AREA.ID_PN_AREA%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      internal_name_in => internal_name_in,
      code_pn_area_in => code_pn_area_in,
      screen_name_in => screen_name_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      cancel_reason_note_in => cancel_reason_note_in,
      cancel_reason_addendum_in => cancel_reason_addendum_in,
      stext_addendum_create_in => stext_addendum_create_in,
      stext_addendum_cancel_in => stext_addendum_cancel_in,
      stext_note_cancel_in => stext_note_cancel_in,
      id_report_in => id_report_in,
      flg_task_in => flg_task_in,
      id_category_in => id_category_in,
      id_sys_shortcut_in => id_sys_shortcut_in,
      rank_in => rank_in,
      id_pn_area_out => id_pn_area_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         PN_AREA.ID_PN_AREA%TYPE
   IS
        l_pky PN_AREA.ID_PN_AREA%TYPE := next_key;
   BEGIN
      ins (
         id_pn_area_in => l_pky,
         internal_name_in => internal_name_in,
         code_pn_area_in => code_pn_area_in,
         screen_name_in => screen_name_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         cancel_reason_note_in => cancel_reason_note_in,
         cancel_reason_addendum_in => cancel_reason_addendum_in,
         stext_addendum_create_in => stext_addendum_create_in,
         stext_addendum_cancel_in => stext_addendum_cancel_in,
         stext_note_cancel_in => stext_note_cancel_in,
         id_report_in => id_report_in,
         flg_task_in => flg_task_in,
         id_category_in => id_category_in,
         id_sys_shortcut_in => id_sys_shortcut_in,
         rank_in => rank_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         PN_AREA.ID_PN_AREA%TYPE
   IS
        l_pky PN_AREA.ID_PN_AREA%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_pn_area_in => l_pky,
         internal_name_in => internal_name_in,
         code_pn_area_in => code_pn_area_in,
         screen_name_in => screen_name_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         cancel_reason_note_in => cancel_reason_note_in,
         cancel_reason_addendum_in => cancel_reason_addendum_in,
         stext_addendum_create_in => stext_addendum_create_in,
         stext_addendum_cancel_in => stext_addendum_cancel_in,
         stext_note_cancel_in => stext_note_cancel_in,
         id_report_in => id_report_in,
         flg_task_in => flg_task_in,
         id_category_in => id_category_in,
         id_sys_shortcut_in => id_sys_shortcut_in,
         rank_in => rank_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky PN_AREA.ID_PN_AREA%TYPE := next_key;
   BEGIN
      ins (
         id_pn_area_in => l_pky,
         internal_name_in => internal_name_in,
         code_pn_area_in => code_pn_area_in,
         screen_name_in => screen_name_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         cancel_reason_note_in => cancel_reason_note_in,
         cancel_reason_addendum_in => cancel_reason_addendum_in,
         stext_addendum_create_in => stext_addendum_create_in,
         stext_addendum_cancel_in => stext_addendum_cancel_in,
         stext_note_cancel_in => stext_note_cancel_in,
         id_report_in => id_report_in,
         flg_task_in => flg_task_in,
         id_category_in => id_category_in,
         id_sys_shortcut_in => id_sys_shortcut_in,
         rank_in => rank_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky PN_AREA.ID_PN_AREA%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_pn_area_in => l_pky,
         internal_name_in => internal_name_in,
         code_pn_area_in => code_pn_area_in,
         screen_name_in => screen_name_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         cancel_reason_note_in => cancel_reason_note_in,
         cancel_reason_addendum_in => cancel_reason_addendum_in,
         stext_addendum_create_in => stext_addendum_create_in,
         stext_addendum_cancel_in => stext_addendum_cancel_in,
         stext_note_cancel_in => stext_note_cancel_in,
         id_report_in => id_report_in,
         flg_task_in => flg_task_in,
         id_category_in => id_category_in,
         id_sys_shortcut_in => id_sys_shortcut_in,
         rank_in => rank_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN PN_AREA_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
       FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO PN_AREA (
               ID_PN_AREA,
               INTERNAL_NAME,
               CODE_PN_AREA,
               SCREEN_NAME,
               CREATE_USER,
               CREATE_TIME,
               CREATE_INSTITUTION,
               UPDATE_USER,
               UPDATE_TIME,
               UPDATE_INSTITUTION,
               CANCEL_REASON_NOTE,
               CANCEL_REASON_ADDENDUM,
               STEXT_ADDENDUM_CREATE,
               STEXT_ADDENDUM_CANCEL,
               STEXT_NOTE_CANCEL,
               ID_REPORT,
               FLG_TASK,
               ID_CATEGORY,
               ID_SYS_SHORTCUT,
               RANK
               )
            VALUES (
               rows_in(indx).ID_PN_AREA,
               rows_in(indx).INTERNAL_NAME,
               rows_in(indx).CODE_PN_AREA,
               rows_in(indx).SCREEN_NAME,
               rows_in(indx).CREATE_USER,
               rows_in(indx).CREATE_TIME,
               rows_in(indx).CREATE_INSTITUTION,
               rows_in(indx).UPDATE_USER,
               rows_in(indx).UPDATE_TIME,
               rows_in(indx).UPDATE_INSTITUTION,
               rows_in(indx).CANCEL_REASON_NOTE,
               rows_in(indx).CANCEL_REASON_ADDENDUM,
               rows_in(indx).STEXT_ADDENDUM_CREATE,
               rows_in(indx).STEXT_ADDENDUM_CANCEL,
               rows_in(indx).STEXT_NOTE_CANCEL,
               rows_in(indx).ID_REPORT,
               rows_in(indx).FLG_TASK,
               rows_in(indx).ID_CATEGORY,
               rows_in(indx).ID_SYS_SHORTCUT,
               rows_in(indx).RANK
               ) RETURNING ROWID BULK COLLECT INTO rows_out;

      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQLERRM (-SQL%BULK_EXCEPTIONS (indx).ERROR_CODE)
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PN_AREA _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PN_AREA
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'INTERNAL_NAME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).INTERNAL_NAME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CODE_PN_AREA _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CODE_PN_AREA
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'SCREEN_NAME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).SCREEN_NAME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CANCEL_REASON_NOTE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CANCEL_REASON_NOTE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CANCEL_REASON_ADDENDUM _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CANCEL_REASON_ADDENDUM
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'STEXT_ADDENDUM_CREATE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).STEXT_ADDENDUM_CREATE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'STEXT_ADDENDUM_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).STEXT_ADDENDUM_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'STEXT_NOTE_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).STEXT_NOTE_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_REPORT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_REPORT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_TASK _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_TASK
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CATEGORY _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CATEGORY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SYS_SHORTCUT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_SYS_SHORTCUT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'RANK _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).RANK
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'PN_AREA'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN PN_AREA_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_pn_area_in IN PN_AREA.ID_PN_AREA%TYPE,
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      INTERNAL_NAME_nin IN BOOLEAN := TRUE,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      CODE_PN_AREA_nin IN BOOLEAN := TRUE,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      SCREEN_NAME_nin IN BOOLEAN := TRUE,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      CANCEL_REASON_NOTE_nin IN BOOLEAN := TRUE,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      CANCEL_REASON_ADDENDUM_nin IN BOOLEAN := TRUE,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      STEXT_ADDENDUM_CREATE_nin IN BOOLEAN := TRUE,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      STEXT_ADDENDUM_CANCEL_nin IN BOOLEAN := TRUE,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      STEXT_NOTE_CANCEL_nin IN BOOLEAN := TRUE,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      ID_REPORT_nin IN BOOLEAN := TRUE,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      FLG_TASK_nin IN BOOLEAN := TRUE,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      ID_CATEGORY_nin IN BOOLEAN := TRUE,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      ID_SYS_SHORTCUT_nin IN BOOLEAN := TRUE,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_INTERNAL_NAME_n NUMBER(1);
   l_CODE_PN_AREA_n NUMBER(1);
   l_SCREEN_NAME_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_CANCEL_REASON_NOTE_n NUMBER(1);
   l_CANCEL_REASON_ADDENDUM_n NUMBER(1);
   l_STEXT_ADDENDUM_CREATE_n NUMBER(1);
   l_STEXT_ADDENDUM_CANCEL_n NUMBER(1);
   l_STEXT_NOTE_CANCEL_n NUMBER(1);
   l_ID_REPORT_n NUMBER(1);
   l_FLG_TASK_n NUMBER(1);
   l_ID_CATEGORY_n NUMBER(1);
   l_ID_SYS_SHORTCUT_n NUMBER(1);
   l_RANK_n NUMBER(1);
   BEGIN

   l_INTERNAL_NAME_n := sys.diutil.bool_to_int(INTERNAL_NAME_nin);
   l_CODE_PN_AREA_n := sys.diutil.bool_to_int(CODE_PN_AREA_nin);
   l_SCREEN_NAME_n := sys.diutil.bool_to_int(SCREEN_NAME_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_CANCEL_REASON_NOTE_n := sys.diutil.bool_to_int(CANCEL_REASON_NOTE_nin);
   l_CANCEL_REASON_ADDENDUM_n := sys.diutil.bool_to_int(CANCEL_REASON_ADDENDUM_nin);
   l_STEXT_ADDENDUM_CREATE_n := sys.diutil.bool_to_int(STEXT_ADDENDUM_CREATE_nin);
   l_STEXT_ADDENDUM_CANCEL_n := sys.diutil.bool_to_int(STEXT_ADDENDUM_CANCEL_nin);
   l_STEXT_NOTE_CANCEL_n := sys.diutil.bool_to_int(STEXT_NOTE_CANCEL_nin);
   l_ID_REPORT_n := sys.diutil.bool_to_int(ID_REPORT_nin);
   l_FLG_TASK_n := sys.diutil.bool_to_int(FLG_TASK_nin);
   l_ID_CATEGORY_n := sys.diutil.bool_to_int(ID_CATEGORY_nin);
   l_ID_SYS_SHORTCUT_n := sys.diutil.bool_to_int(ID_SYS_SHORTCUT_nin);
   l_RANK_n := sys.diutil.bool_to_int(RANK_nin);


         UPDATE PN_AREA SET
     INTERNAL_NAME = decode (l_INTERNAL_NAME_n,0,internal_name_in, NVL (internal_name_in, INTERNAL_NAME)),
     CODE_PN_AREA = decode (l_CODE_PN_AREA_n,0,code_pn_area_in, NVL (code_pn_area_in, CODE_PN_AREA)),
     SCREEN_NAME = decode (l_SCREEN_NAME_n,0,screen_name_in, NVL (screen_name_in, SCREEN_NAME)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     CANCEL_REASON_NOTE = decode (l_CANCEL_REASON_NOTE_n,0,cancel_reason_note_in, NVL (cancel_reason_note_in, CANCEL_REASON_NOTE)),
     CANCEL_REASON_ADDENDUM = decode (l_CANCEL_REASON_ADDENDUM_n,0,cancel_reason_addendum_in, NVL (cancel_reason_addendum_in, CANCEL_REASON_ADDENDUM)),
     STEXT_ADDENDUM_CREATE = decode (l_STEXT_ADDENDUM_CREATE_n,0,stext_addendum_create_in, NVL (stext_addendum_create_in, STEXT_ADDENDUM_CREATE)),
     STEXT_ADDENDUM_CANCEL = decode (l_STEXT_ADDENDUM_CANCEL_n,0,stext_addendum_cancel_in, NVL (stext_addendum_cancel_in, STEXT_ADDENDUM_CANCEL)),
     STEXT_NOTE_CANCEL = decode (l_STEXT_NOTE_CANCEL_n,0,stext_note_cancel_in, NVL (stext_note_cancel_in, STEXT_NOTE_CANCEL)),
     ID_REPORT = decode (l_ID_REPORT_n,0,id_report_in, NVL (id_report_in, ID_REPORT)),
     FLG_TASK = decode (l_FLG_TASK_n,0,flg_task_in, NVL (flg_task_in, FLG_TASK)),
     ID_CATEGORY = decode (l_ID_CATEGORY_n,0,id_category_in, NVL (id_category_in, ID_CATEGORY)),
     ID_SYS_SHORTCUT = decode (l_ID_SYS_SHORTCUT_n,0,id_sys_shortcut_in, NVL (id_sys_shortcut_in, ID_SYS_SHORTCUT)),
     RANK = decode (l_RANK_n,0,rank_in, NVL (rank_in, RANK))
          WHERE
             ID_PN_AREA = id_pn_area_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PN_AREA');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           IF l_name = 'PA_REP_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_REPORT'
               , value_in => id_report_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_pn_area_in IN PN_AREA.ID_PN_AREA%TYPE,
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      INTERNAL_NAME_nin IN BOOLEAN := TRUE,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      CODE_PN_AREA_nin IN BOOLEAN := TRUE,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      SCREEN_NAME_nin IN BOOLEAN := TRUE,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      CANCEL_REASON_NOTE_nin IN BOOLEAN := TRUE,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      CANCEL_REASON_ADDENDUM_nin IN BOOLEAN := TRUE,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      STEXT_ADDENDUM_CREATE_nin IN BOOLEAN := TRUE,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      STEXT_ADDENDUM_CANCEL_nin IN BOOLEAN := TRUE,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      STEXT_NOTE_CANCEL_nin IN BOOLEAN := TRUE,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      ID_REPORT_nin IN BOOLEAN := TRUE,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      FLG_TASK_nin IN BOOLEAN := TRUE,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      ID_CATEGORY_nin IN BOOLEAN := TRUE,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      ID_SYS_SHORTCUT_nin IN BOOLEAN := TRUE,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_pn_area_in => id_pn_area_in,
      internal_name_in => internal_name_in,
      INTERNAL_NAME_nin => INTERNAL_NAME_nin,
      code_pn_area_in => code_pn_area_in,
      CODE_PN_AREA_nin => CODE_PN_AREA_nin,
      screen_name_in => screen_name_in,
      SCREEN_NAME_nin => SCREEN_NAME_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      cancel_reason_note_in => cancel_reason_note_in,
      CANCEL_REASON_NOTE_nin => CANCEL_REASON_NOTE_nin,
      cancel_reason_addendum_in => cancel_reason_addendum_in,
      CANCEL_REASON_ADDENDUM_nin => CANCEL_REASON_ADDENDUM_nin,
      stext_addendum_create_in => stext_addendum_create_in,
      STEXT_ADDENDUM_CREATE_nin => STEXT_ADDENDUM_CREATE_nin,
      stext_addendum_cancel_in => stext_addendum_cancel_in,
      STEXT_ADDENDUM_CANCEL_nin => STEXT_ADDENDUM_CANCEL_nin,
      stext_note_cancel_in => stext_note_cancel_in,
      STEXT_NOTE_CANCEL_nin => STEXT_NOTE_CANCEL_nin,
      id_report_in => id_report_in,
      ID_REPORT_nin => ID_REPORT_nin,
      flg_task_in => flg_task_in,
      FLG_TASK_nin => FLG_TASK_nin,
      id_category_in => id_category_in,
      ID_CATEGORY_nin => ID_CATEGORY_nin,
      id_sys_shortcut_in => id_sys_shortcut_in,
      ID_SYS_SHORTCUT_nin => ID_SYS_SHORTCUT_nin,
      rank_in => rank_in,
      RANK_nin => RANK_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      INTERNAL_NAME_nin IN BOOLEAN := TRUE,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      CODE_PN_AREA_nin IN BOOLEAN := TRUE,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      SCREEN_NAME_nin IN BOOLEAN := TRUE,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      CANCEL_REASON_NOTE_nin IN BOOLEAN := TRUE,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      CANCEL_REASON_ADDENDUM_nin IN BOOLEAN := TRUE,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      STEXT_ADDENDUM_CREATE_nin IN BOOLEAN := TRUE,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      STEXT_ADDENDUM_CANCEL_nin IN BOOLEAN := TRUE,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      STEXT_NOTE_CANCEL_nin IN BOOLEAN := TRUE,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      ID_REPORT_nin IN BOOLEAN := TRUE,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      FLG_TASK_nin IN BOOLEAN := TRUE,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      ID_CATEGORY_nin IN BOOLEAN := TRUE,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      ID_SYS_SHORTCUT_nin IN BOOLEAN := TRUE,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_INTERNAL_NAME_n NUMBER(1);
   l_CODE_PN_AREA_n NUMBER(1);
   l_SCREEN_NAME_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_CANCEL_REASON_NOTE_n NUMBER(1);
   l_CANCEL_REASON_ADDENDUM_n NUMBER(1);
   l_STEXT_ADDENDUM_CREATE_n NUMBER(1);
   l_STEXT_ADDENDUM_CANCEL_n NUMBER(1);
   l_STEXT_NOTE_CANCEL_n NUMBER(1);
   l_ID_REPORT_n NUMBER(1);
   l_FLG_TASK_n NUMBER(1);
   l_ID_CATEGORY_n NUMBER(1);
   l_ID_SYS_SHORTCUT_n NUMBER(1);
   l_RANK_n NUMBER(1);
      id_pn_area_in PN_AREA.ID_PN_AREA%TYPE;
   BEGIN



      l_INTERNAL_NAME_n := sys.diutil.bool_to_int(INTERNAL_NAME_nin);
      l_CODE_PN_AREA_n := sys.diutil.bool_to_int(CODE_PN_AREA_nin);
      l_SCREEN_NAME_n := sys.diutil.bool_to_int(SCREEN_NAME_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_CANCEL_REASON_NOTE_n := sys.diutil.bool_to_int(CANCEL_REASON_NOTE_nin);
      l_CANCEL_REASON_ADDENDUM_n := sys.diutil.bool_to_int(CANCEL_REASON_ADDENDUM_nin);
      l_STEXT_ADDENDUM_CREATE_n := sys.diutil.bool_to_int(STEXT_ADDENDUM_CREATE_nin);
      l_STEXT_ADDENDUM_CANCEL_n := sys.diutil.bool_to_int(STEXT_ADDENDUM_CANCEL_nin);
      l_STEXT_NOTE_CANCEL_n := sys.diutil.bool_to_int(STEXT_NOTE_CANCEL_nin);
      l_ID_REPORT_n := sys.diutil.bool_to_int(ID_REPORT_nin);
      l_FLG_TASK_n := sys.diutil.bool_to_int(FLG_TASK_nin);
      l_ID_CATEGORY_n := sys.diutil.bool_to_int(ID_CATEGORY_nin);
      l_ID_SYS_SHORTCUT_n := sys.diutil.bool_to_int(ID_SYS_SHORTCUT_nin);
      l_RANK_n := sys.diutil.bool_to_int(RANK_nin);



l_sql := 'UPDATE PN_AREA SET '
     || ' INTERNAL_NAME = decode (' || l_INTERNAL_NAME_n || ',0,:internal_name_in, NVL (:internal_name_in, INTERNAL_NAME)) '|| ','
     || ' CODE_PN_AREA = decode (' || l_CODE_PN_AREA_n || ',0,:code_pn_area_in, NVL (:code_pn_area_in, CODE_PN_AREA)) '|| ','
     || ' SCREEN_NAME = decode (' || l_SCREEN_NAME_n || ',0,:screen_name_in, NVL (:screen_name_in, SCREEN_NAME)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' CANCEL_REASON_NOTE = decode (' || l_CANCEL_REASON_NOTE_n || ',0,:cancel_reason_note_in, NVL (:cancel_reason_note_in, CANCEL_REASON_NOTE)) '|| ','
     || ' CANCEL_REASON_ADDENDUM = decode (' || l_CANCEL_REASON_ADDENDUM_n || ',0,:cancel_reason_addendum_in, NVL (:cancel_reason_addendum_in, CANCEL_REASON_ADDENDUM)) '|| ','
     || ' STEXT_ADDENDUM_CREATE = decode (' || l_STEXT_ADDENDUM_CREATE_n || ',0,:stext_addendum_create_in, NVL (:stext_addendum_create_in, STEXT_ADDENDUM_CREATE)) '|| ','
     || ' STEXT_ADDENDUM_CANCEL = decode (' || l_STEXT_ADDENDUM_CANCEL_n || ',0,:stext_addendum_cancel_in, NVL (:stext_addendum_cancel_in, STEXT_ADDENDUM_CANCEL)) '|| ','
     || ' STEXT_NOTE_CANCEL = decode (' || l_STEXT_NOTE_CANCEL_n || ',0,:stext_note_cancel_in, NVL (:stext_note_cancel_in, STEXT_NOTE_CANCEL)) '|| ','
     || ' ID_REPORT = decode (' || l_ID_REPORT_n || ',0,:id_report_in, NVL (:id_report_in, ID_REPORT)) '|| ','
     || ' FLG_TASK = decode (' || l_FLG_TASK_n || ',0,:flg_task_in, NVL (:flg_task_in, FLG_TASK)) '|| ','
     || ' ID_CATEGORY = decode (' || l_ID_CATEGORY_n || ',0,:id_category_in, NVL (:id_category_in, ID_CATEGORY)) '|| ','
     || ' ID_SYS_SHORTCUT = decode (' || l_ID_SYS_SHORTCUT_n || ',0,:id_sys_shortcut_in, NVL (:id_sys_shortcut_in, ID_SYS_SHORTCUT)) '|| ','
     || ' RANK = decode (' || l_RANK_n || ',0,:rank_in, NVL (:rank_in, RANK)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     internal_name_in,
     code_pn_area_in,
     screen_name_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     cancel_reason_note_in,
     cancel_reason_addendum_in,
     stext_addendum_create_in,
     stext_addendum_cancel_in,
     stext_note_cancel_in,
     id_report_in,
     flg_task_in,
     id_category_in,
     id_sys_shortcut_in,
     rank_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PN_AREA');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           IF l_name = 'PA_REP_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_REPORT'
               , value_in => id_report_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      INTERNAL_NAME_nin IN BOOLEAN := TRUE,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      CODE_PN_AREA_nin IN BOOLEAN := TRUE,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      SCREEN_NAME_nin IN BOOLEAN := TRUE,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      CANCEL_REASON_NOTE_nin IN BOOLEAN := TRUE,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      CANCEL_REASON_ADDENDUM_nin IN BOOLEAN := TRUE,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      STEXT_ADDENDUM_CREATE_nin IN BOOLEAN := TRUE,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      STEXT_ADDENDUM_CANCEL_nin IN BOOLEAN := TRUE,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      STEXT_NOTE_CANCEL_nin IN BOOLEAN := TRUE,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      ID_REPORT_nin IN BOOLEAN := TRUE,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      FLG_TASK_nin IN BOOLEAN := TRUE,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      ID_CATEGORY_nin IN BOOLEAN := TRUE,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      ID_SYS_SHORTCUT_nin IN BOOLEAN := TRUE,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      internal_name_in => internal_name_in,
      INTERNAL_NAME_nin => INTERNAL_NAME_nin,
      code_pn_area_in => code_pn_area_in,
      CODE_PN_AREA_nin => CODE_PN_AREA_nin,
      screen_name_in => screen_name_in,
      SCREEN_NAME_nin => SCREEN_NAME_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      cancel_reason_note_in => cancel_reason_note_in,
      CANCEL_REASON_NOTE_nin => CANCEL_REASON_NOTE_nin,
      cancel_reason_addendum_in => cancel_reason_addendum_in,
      CANCEL_REASON_ADDENDUM_nin => CANCEL_REASON_ADDENDUM_nin,
      stext_addendum_create_in => stext_addendum_create_in,
      STEXT_ADDENDUM_CREATE_nin => STEXT_ADDENDUM_CREATE_nin,
      stext_addendum_cancel_in => stext_addendum_cancel_in,
      STEXT_ADDENDUM_CANCEL_nin => STEXT_ADDENDUM_CANCEL_nin,
      stext_note_cancel_in => stext_note_cancel_in,
      STEXT_NOTE_CANCEL_nin => STEXT_NOTE_CANCEL_nin,
      id_report_in => id_report_in,
      ID_REPORT_nin => ID_REPORT_nin,
      flg_task_in => flg_task_in,
      FLG_TASK_nin => FLG_TASK_nin,
      id_category_in => id_category_in,
      ID_CATEGORY_nin => ID_CATEGORY_nin,
      id_sys_shortcut_in => id_sys_shortcut_in,
      ID_SYS_SHORTCUT_nin => ID_SYS_SHORTCUT_nin,
      rank_in => rank_in,
      RANK_nin => RANK_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN PN_AREA%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_pn_area_in => rec_in.ID_PN_AREA,
         internal_name_in => rec_in.INTERNAL_NAME,
         code_pn_area_in => rec_in.CODE_PN_AREA,
         screen_name_in => rec_in.SCREEN_NAME,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         cancel_reason_note_in => rec_in.CANCEL_REASON_NOTE,
         cancel_reason_addendum_in => rec_in.CANCEL_REASON_ADDENDUM,
         stext_addendum_create_in => rec_in.STEXT_ADDENDUM_CREATE,
         stext_addendum_cancel_in => rec_in.STEXT_ADDENDUM_CANCEL,
         stext_note_cancel_in => rec_in.STEXT_NOTE_CANCEL,
         id_report_in => rec_in.ID_REPORT,
         flg_task_in => rec_in.FLG_TASK,
         id_category_in => rec_in.ID_CATEGORY,
         id_sys_shortcut_in => rec_in.ID_SYS_SHORTCUT,
         rank_in => rec_in.RANK

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN PN_AREA%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_pn_area_in => rec_in.ID_PN_AREA,
         internal_name_in => rec_in.INTERNAL_NAME,
         code_pn_area_in => rec_in.CODE_PN_AREA,
         screen_name_in => rec_in.SCREEN_NAME,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         cancel_reason_note_in => rec_in.CANCEL_REASON_NOTE,
         cancel_reason_addendum_in => rec_in.CANCEL_REASON_ADDENDUM,
         stext_addendum_create_in => rec_in.STEXT_ADDENDUM_CREATE,
         stext_addendum_cancel_in => rec_in.STEXT_ADDENDUM_CANCEL,
         stext_note_cancel_in => rec_in.STEXT_NOTE_CANCEL,
         id_report_in => rec_in.ID_REPORT,
         flg_task_in => rec_in.FLG_TASK,
         id_category_in => rec_in.ID_CATEGORY,
         id_sys_shortcut_in => rec_in.ID_SYS_SHORTCUT,
         rank_in => rec_in.RANK

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_pn_area_in IN PN_AREA.ID_PN_AREA%TYPE,
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_pn_area_in => id_pn_area_in,
         internal_name_in => internal_name_in,
         code_pn_area_in => code_pn_area_in,
         screen_name_in => screen_name_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         cancel_reason_note_in => cancel_reason_note_in,
         cancel_reason_addendum_in => cancel_reason_addendum_in,
         stext_addendum_create_in => stext_addendum_create_in,
         stext_addendum_cancel_in => stext_addendum_cancel_in,
         stext_note_cancel_in => stext_note_cancel_in,
         id_report_in => id_report_in,
         flg_task_in => flg_task_in,
         id_category_in => id_category_in,
         id_sys_shortcut_in => id_sys_shortcut_in,
         rank_in => rank_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_pn_area_in => id_pn_area_in,
            internal_name_in => internal_name_in,
            code_pn_area_in => code_pn_area_in,
            screen_name_in => screen_name_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            cancel_reason_note_in => cancel_reason_note_in,
            cancel_reason_addendum_in => cancel_reason_addendum_in,
            stext_addendum_create_in => stext_addendum_create_in,
            stext_addendum_cancel_in => stext_addendum_cancel_in,
            stext_note_cancel_in => stext_note_cancel_in,
            id_report_in => id_report_in,
            flg_task_in => flg_task_in,
            id_category_in => id_category_in,
            id_sys_shortcut_in => id_sys_shortcut_in,
            rank_in => rank_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_pn_area_in IN PN_AREA.ID_PN_AREA%TYPE,
      internal_name_in IN PN_AREA.INTERNAL_NAME%TYPE DEFAULT NULL,
      code_pn_area_in IN PN_AREA.CODE_PN_AREA%TYPE DEFAULT NULL,
      screen_name_in IN PN_AREA.SCREEN_NAME%TYPE DEFAULT NULL,
      create_user_in IN PN_AREA.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PN_AREA.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PN_AREA.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PN_AREA.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PN_AREA.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PN_AREA.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      cancel_reason_note_in IN PN_AREA.CANCEL_REASON_NOTE%TYPE DEFAULT NULL,
      cancel_reason_addendum_in IN PN_AREA.CANCEL_REASON_ADDENDUM%TYPE DEFAULT NULL,
      stext_addendum_create_in IN PN_AREA.STEXT_ADDENDUM_CREATE%TYPE DEFAULT NULL,
      stext_addendum_cancel_in IN PN_AREA.STEXT_ADDENDUM_CANCEL%TYPE DEFAULT NULL,
      stext_note_cancel_in IN PN_AREA.STEXT_NOTE_CANCEL%TYPE DEFAULT NULL,
      id_report_in IN PN_AREA.ID_REPORT%TYPE DEFAULT NULL,
      flg_task_in IN PN_AREA.FLG_TASK%TYPE DEFAULT NULL,
      id_category_in IN PN_AREA.ID_CATEGORY%TYPE DEFAULT NULL,
      id_sys_shortcut_in IN PN_AREA.ID_SYS_SHORTCUT%TYPE DEFAULT NULL,
      rank_in IN PN_AREA.RANK%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_pn_area_in,
      internal_name_in,
      code_pn_area_in,
      screen_name_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      cancel_reason_note_in,
      cancel_reason_addendum_in,
      stext_addendum_create_in,
      stext_addendum_cancel_in,
      stext_note_cancel_in,
      id_report_in,
      flg_task_in,
      id_category_in,
      id_sys_shortcut_in,
      rank_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN PN_AREA_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_PN_AREA ID_PN_AREA_cc;
      l_INTERNAL_NAME INTERNAL_NAME_cc;
      l_CODE_PN_AREA CODE_PN_AREA_cc;
      l_SCREEN_NAME SCREEN_NAME_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_CANCEL_REASON_NOTE CANCEL_REASON_NOTE_cc;
      l_CANCEL_REASON_ADDENDUM CANCEL_REASON_ADDENDUM_cc;
      l_STEXT_ADDENDUM_CREATE STEXT_ADDENDUM_CREATE_cc;
      l_STEXT_ADDENDUM_CANCEL STEXT_ADDENDUM_CANCEL_cc;
      l_STEXT_NOTE_CANCEL STEXT_NOTE_CANCEL_cc;
      l_ID_REPORT ID_REPORT_cc;
      l_FLG_TASK FLG_TASK_cc;
      l_ID_CATEGORY ID_CATEGORY_cc;
      l_ID_SYS_SHORTCUT ID_SYS_SHORTCUT_cc;
      l_RANK RANK_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_PN_AREA(i) := col_in(i).ID_PN_AREA;
         l_INTERNAL_NAME(i) := col_in(i).INTERNAL_NAME;
         l_CODE_PN_AREA(i) := col_in(i).CODE_PN_AREA;
         l_SCREEN_NAME(i) := col_in(i).SCREEN_NAME;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_CANCEL_REASON_NOTE(i) := col_in(i).CANCEL_REASON_NOTE;
         l_CANCEL_REASON_ADDENDUM(i) := col_in(i).CANCEL_REASON_ADDENDUM;
         l_STEXT_ADDENDUM_CREATE(i) := col_in(i).STEXT_ADDENDUM_CREATE;
         l_STEXT_ADDENDUM_CANCEL(i) := col_in(i).STEXT_ADDENDUM_CANCEL;
         l_STEXT_NOTE_CANCEL(i) := col_in(i).STEXT_NOTE_CANCEL;
         l_ID_REPORT(i) := col_in(i).ID_REPORT;
         l_FLG_TASK(i) := col_in(i).FLG_TASK;
         l_ID_CATEGORY(i) := col_in(i).ID_CATEGORY;
         l_ID_SYS_SHORTCUT(i) := col_in(i).ID_SYS_SHORTCUT;
         l_RANK(i) := col_in(i).RANK;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PN_AREA SET
               INTERNAL_NAME = NVL (l_INTERNAL_NAME(i), INTERNAL_NAME),
               CODE_PN_AREA = NVL (l_CODE_PN_AREA(i), CODE_PN_AREA),
               SCREEN_NAME = NVL (l_SCREEN_NAME(i), SCREEN_NAME),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               CANCEL_REASON_NOTE = NVL (l_CANCEL_REASON_NOTE(i), CANCEL_REASON_NOTE),
               CANCEL_REASON_ADDENDUM = NVL (l_CANCEL_REASON_ADDENDUM(i), CANCEL_REASON_ADDENDUM),
               STEXT_ADDENDUM_CREATE = NVL (l_STEXT_ADDENDUM_CREATE(i), STEXT_ADDENDUM_CREATE),
               STEXT_ADDENDUM_CANCEL = NVL (l_STEXT_ADDENDUM_CANCEL(i), STEXT_ADDENDUM_CANCEL),
               STEXT_NOTE_CANCEL = NVL (l_STEXT_NOTE_CANCEL(i), STEXT_NOTE_CANCEL),
               ID_REPORT = NVL (l_ID_REPORT(i), ID_REPORT),
               FLG_TASK = NVL (l_FLG_TASK(i), FLG_TASK),
               ID_CATEGORY = NVL (l_ID_CATEGORY(i), ID_CATEGORY),
               ID_SYS_SHORTCUT = NVL (l_ID_SYS_SHORTCUT(i), ID_SYS_SHORTCUT),
               RANK = NVL (l_RANK(i), RANK)
             WHERE
                ID_PN_AREA = l_ID_PN_AREA(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PN_AREA SET
               INTERNAL_NAME = l_INTERNAL_NAME(i),
               CODE_PN_AREA = l_CODE_PN_AREA(i),
               SCREEN_NAME = l_SCREEN_NAME(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               CANCEL_REASON_NOTE = l_CANCEL_REASON_NOTE(i),
               CANCEL_REASON_ADDENDUM = l_CANCEL_REASON_ADDENDUM(i),
               STEXT_ADDENDUM_CREATE = l_STEXT_ADDENDUM_CREATE(i),
               STEXT_ADDENDUM_CANCEL = l_STEXT_ADDENDUM_CANCEL(i),
               STEXT_NOTE_CANCEL = l_STEXT_NOTE_CANCEL(i),
               ID_REPORT = l_ID_REPORT(i),
               FLG_TASK = l_FLG_TASK(i),
               ID_CATEGORY = l_ID_CATEGORY(i),
               ID_SYS_SHORTCUT = l_ID_SYS_SHORTCUT(i),
               RANK = l_RANK(i)
             WHERE
                ID_PN_AREA = l_ID_PN_AREA(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN PN_AREA_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE PN_AREA
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE PN_AREA
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE PN_AREA set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE PN_AREA set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_pn_area_in IN PN_AREA.ID_PN_AREA%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PN_AREA
       WHERE
          ID_PN_AREA = id_pn_area_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_pn_area_in IN PN_AREA.ID_PN_AREA%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_pn_area_in => id_pn_area_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_PN_AREA
   PROCEDURE del_ID_PN_AREA (
      id_pn_area_in IN PN_AREA.ID_PN_AREA%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM PN_AREA
       WHERE ID_PN_AREA = id_pn_area_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_PN_AREA;






   -- Delete all rows for primary key column ID_PN_AREA
   PROCEDURE del_ID_PN_AREA (
      id_pn_area_in IN PN_AREA.ID_PN_AREA%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_PN_AREA (
      id_pn_area_in => id_pn_area_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_PN_AREA;















   PROCEDURE del_PA_REP_FK (
      id_report_in IN PN_AREA.ID_REPORT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PN_AREA
       WHERE
          ID_REPORT = del_PA_REP_FK.id_report_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PA_REP_FK;



PROCEDURE del_PA_REP_FK (
      id_report_in IN PN_AREA.ID_REPORT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PA_REP_FK (
      id_report_in => id_report_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PA_REP_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM PN_AREA';
      ELSE
         RETURN
            'DELETE FROM PN_AREA WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PN_AREA');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PN_AREA');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      pn_area_inout IN OUT PN_AREA%ROWTYPE
   )
   IS
   BEGIN
      pn_area_inout.ID_PN_AREA := NULL;
      pn_area_inout.INTERNAL_NAME := NULL;
      pn_area_inout.CODE_PN_AREA := NULL;
      pn_area_inout.SCREEN_NAME := NULL;
      pn_area_inout.CREATE_USER := NULL;
      pn_area_inout.CREATE_TIME := NULL;
      pn_area_inout.CREATE_INSTITUTION := NULL;
      pn_area_inout.UPDATE_USER := NULL;
      pn_area_inout.UPDATE_TIME := NULL;
      pn_area_inout.UPDATE_INSTITUTION := NULL;
      pn_area_inout.CANCEL_REASON_NOTE := NULL;
      pn_area_inout.CANCEL_REASON_ADDENDUM := NULL;
      pn_area_inout.STEXT_ADDENDUM_CREATE := NULL;
      pn_area_inout.STEXT_ADDENDUM_CANCEL := NULL;
      pn_area_inout.STEXT_NOTE_CANCEL := NULL;
      pn_area_inout.ID_REPORT := NULL;
      pn_area_inout.FLG_TASK := NULL;
      pn_area_inout.ID_CATEGORY := NULL;
      pn_area_inout.ID_SYS_SHORTCUT := NULL;
      pn_area_inout.RANK := NULL;
   END initrec;

   FUNCTION initrec RETURN PN_AREA%ROWTYPE
   IS
      l_pn_area PN_AREA%ROWTYPE;
   BEGIN
      RETURN l_pn_area;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN PN_AREA_tc
   IS
        data PN_AREA_tc;
   BEGIN
        select * bulk collect into data from PN_AREA where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN PN_AREA_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data PN_AREA_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_PN_AREA;
/
