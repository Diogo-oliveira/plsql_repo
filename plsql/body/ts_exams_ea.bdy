/*-- Last Change Revision: $Rev: 2028166 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:22 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_exams_ea
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: April 5, 2017 10:46:21
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_exam_req_det_in       IN exams_ea.id_exam_req_det%TYPE,
        id_exam_req_in           IN exams_ea.id_exam_req%TYPE DEFAULT NULL,
        id_exam_result_in        IN exams_ea.id_exam_result%TYPE DEFAULT NULL,
        id_exam_in               IN exams_ea.id_exam%TYPE DEFAULT NULL,
        id_exam_group_in         IN exams_ea.id_exam_group%TYPE DEFAULT NULL,
        dt_req_in                IN exams_ea.dt_req%TYPE DEFAULT NULL,
        dt_begin_in              IN exams_ea.dt_begin%TYPE DEFAULT NULL,
        dt_pend_req_in           IN exams_ea.dt_pend_req%TYPE DEFAULT NULL,
        dt_result_in             IN exams_ea.dt_result%TYPE DEFAULT NULL,
        priority_in              IN exams_ea.priority%TYPE DEFAULT NULL,
        status_str_req_in        IN exams_ea.status_str_req%TYPE DEFAULT NULL,
        status_msg_req_in        IN exams_ea.status_msg_req%TYPE DEFAULT NULL,
        status_icon_req_in       IN exams_ea.status_icon_req%TYPE DEFAULT NULL,
        status_flg_req_in        IN exams_ea.status_flg_req%TYPE DEFAULT NULL,
        status_str_in            IN exams_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in            IN exams_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in           IN exams_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in            IN exams_ea.status_flg%TYPE DEFAULT NULL,
        flg_type_in              IN exams_ea.flg_type%TYPE DEFAULT NULL,
        id_exam_cat_in           IN exams_ea.id_exam_cat%TYPE DEFAULT NULL,
        flg_available_in         IN exams_ea.flg_available%TYPE DEFAULT NULL,
        flg_notes_in             IN exams_ea.flg_notes%TYPE DEFAULT NULL,
        flg_doc_in               IN exams_ea.flg_doc%TYPE DEFAULT NULL,
        flg_time_in              IN exams_ea.flg_time%TYPE DEFAULT NULL,
        flg_status_req_in        IN exams_ea.flg_status_req%TYPE DEFAULT NULL,
        flg_status_det_in        IN exams_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_referral_in          IN exams_ea.flg_referral%TYPE DEFAULT NULL,
        id_prof_req_in           IN exams_ea.id_prof_req%TYPE DEFAULT NULL,
        id_prof_performed_in     IN exams_ea.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN exams_ea.start_time%TYPE DEFAULT NULL,
        end_time_in              IN exams_ea.end_time%TYPE DEFAULT NULL,
        id_epis_doc_perform_in   IN exams_ea.id_epis_doc_perform%TYPE DEFAULT NULL,
        desc_perform_notes_in    IN exams_ea.desc_perform_notes%TYPE DEFAULT NULL,
        id_epis_doc_result_in    IN exams_ea.id_epis_doc_result%TYPE DEFAULT NULL,
        desc_result_in           IN exams_ea.desc_result%TYPE DEFAULT NULL,
        flg_status_result_in     IN exams_ea.flg_status_result%TYPE DEFAULT NULL,
        id_exam_codification_in  IN exams_ea.id_exam_codification%TYPE DEFAULT NULL,
        id_room_in               IN exams_ea.id_room%TYPE DEFAULT NULL,
        id_movement_in           IN exams_ea.id_movement%TYPE DEFAULT NULL,
        id_task_dependency_in    IN exams_ea.id_task_dependency%TYPE DEFAULT NULL,
        flg_req_origin_module_in IN exams_ea.flg_req_origin_module%TYPE DEFAULT NULL,
        id_patient_in            IN exams_ea.id_patient%TYPE DEFAULT NULL,
        id_visit_in              IN exams_ea.id_visit%TYPE DEFAULT NULL,
        id_episode_in            IN exams_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_origin_in     IN exams_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_prev_episode_in       IN exams_ea.id_prev_episode%TYPE DEFAULT NULL,
        dt_dg_last_update_in     IN exams_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        create_user_in           IN exams_ea.create_user%TYPE DEFAULT NULL,
        create_time_in           IN exams_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN exams_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN exams_ea.update_user%TYPE DEFAULT NULL,
        update_time_in           IN exams_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN exams_ea.update_institution%TYPE DEFAULT NULL,
        notes_in                 IN exams_ea.notes%TYPE DEFAULT NULL,
        notes_technician_in      IN exams_ea.notes_technician%TYPE DEFAULT NULL,
        notes_patient_in         IN exams_ea.notes_patient%TYPE DEFAULT NULL,
        notes_cancel_in          IN exams_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_scheduler_in       IN exams_ea.notes_scheduler%TYPE DEFAULT NULL,
        flg_relevant_in          IN exams_ea.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO exams_ea
            (id_exam_req,
             id_exam_req_det,
             id_exam_result,
             id_exam,
             id_exam_group,
             dt_req,
             dt_begin,
             dt_pend_req,
             dt_result,
             priority,
             status_str_req,
             status_msg_req,
             status_icon_req,
             status_flg_req,
             status_str,
             status_msg,
             status_icon,
             status_flg,
             flg_type,
             id_exam_cat,
             flg_available,
             flg_notes,
             flg_doc,
             flg_time,
             flg_status_req,
             flg_status_det,
             flg_referral,
             id_prof_req,
             id_prof_performed,
             start_time,
             end_time,
             id_epis_doc_perform,
             desc_perform_notes,
             id_epis_doc_result,
             desc_result,
             flg_status_result,
             id_exam_codification,
             id_room,
             id_movement,
             id_task_dependency,
             flg_req_origin_module,
             id_patient,
             id_visit,
             id_episode,
             id_episode_origin,
             id_prev_episode,
             dt_dg_last_update,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             notes,
             notes_technician,
             notes_patient,
             notes_cancel,
             notes_scheduler,
             flg_relevant)
        VALUES
            (id_exam_req_in,
             id_exam_req_det_in,
             id_exam_result_in,
             id_exam_in,
             id_exam_group_in,
             dt_req_in,
             dt_begin_in,
             dt_pend_req_in,
             dt_result_in,
             priority_in,
             status_str_req_in,
             status_msg_req_in,
             status_icon_req_in,
             status_flg_req_in,
             status_str_in,
             status_msg_in,
             status_icon_in,
             status_flg_in,
             flg_type_in,
             id_exam_cat_in,
             flg_available_in,
             flg_notes_in,
             flg_doc_in,
             flg_time_in,
             flg_status_req_in,
             flg_status_det_in,
             flg_referral_in,
             id_prof_req_in,
             id_prof_performed_in,
             start_time_in,
             end_time_in,
             id_epis_doc_perform_in,
             desc_perform_notes_in,
             id_epis_doc_result_in,
             desc_result_in,
             flg_status_result_in,
             id_exam_codification_in,
             id_room_in,
             id_movement_in,
             id_task_dependency_in,
             flg_req_origin_module_in,
             id_patient_in,
             id_visit_in,
             id_episode_in,
             id_episode_origin_in,
             id_prev_episode_in,
             dt_dg_last_update_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             notes_in,
             notes_technician_in,
             notes_patient_in,
             notes_cancel_in,
             notes_scheduler_in,
             flg_relevant_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EXAMS_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    IF l_name = 'EEA_ID_EPISODE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EEA_ID_EPISODE_ORIGIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'EEA_ID_EPIS_DOC_PERFORM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DOC_PERFORM',
                                                        value_in           => id_epis_doc_perform_in);
                    END IF;
                    IF l_name = 'EEA_ID_EPIS_DOC_RESULT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DOC_RESULT',
                                                        value_in           => id_epis_doc_result_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_CAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_CAT',
                                                        value_in           => id_exam_cat_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM',
                                                        value_in           => id_exam_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_GROUP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_GROUP',
                                                        value_in           => id_exam_group_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_REQ_DET_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_REQ_DET',
                                                        value_in           => id_exam_req_det_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_REQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_REQ',
                                                        value_in           => id_exam_req_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_RESULT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_RESULT',
                                                        value_in           => id_exam_result_in);
                    END IF;
                    IF l_name = 'EEA_ID_MOVEMENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MOVEMENT',
                                                        value_in           => id_movement_in);
                    END IF;
                    IF l_name = 'EEA_ID_PATIENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'EEA_ID_PREV_EPISODE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PREV_EPISODE',
                                                        value_in           => id_prev_episode_in);
                    END IF;
                    IF l_name = 'EEA_ID_PROF_PERFORMED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_PERFORMED',
                                                        value_in           => id_prof_performed_in);
                    END IF;
                    IF l_name = 'EEA_ID_PROF_REQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REQ',
                                                        value_in           => id_prof_req_in);
                    END IF;
                    IF l_name = 'EEA_ID_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'EEA_ID_VISIT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_exam_req_det_in       IN exams_ea.id_exam_req_det%TYPE,
        id_exam_req_in           IN exams_ea.id_exam_req%TYPE DEFAULT NULL,
        id_exam_result_in        IN exams_ea.id_exam_result%TYPE DEFAULT NULL,
        id_exam_in               IN exams_ea.id_exam%TYPE DEFAULT NULL,
        id_exam_group_in         IN exams_ea.id_exam_group%TYPE DEFAULT NULL,
        dt_req_in                IN exams_ea.dt_req%TYPE DEFAULT NULL,
        dt_begin_in              IN exams_ea.dt_begin%TYPE DEFAULT NULL,
        dt_pend_req_in           IN exams_ea.dt_pend_req%TYPE DEFAULT NULL,
        dt_result_in             IN exams_ea.dt_result%TYPE DEFAULT NULL,
        priority_in              IN exams_ea.priority%TYPE DEFAULT NULL,
        status_str_req_in        IN exams_ea.status_str_req%TYPE DEFAULT NULL,
        status_msg_req_in        IN exams_ea.status_msg_req%TYPE DEFAULT NULL,
        status_icon_req_in       IN exams_ea.status_icon_req%TYPE DEFAULT NULL,
        status_flg_req_in        IN exams_ea.status_flg_req%TYPE DEFAULT NULL,
        status_str_in            IN exams_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in            IN exams_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in           IN exams_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in            IN exams_ea.status_flg%TYPE DEFAULT NULL,
        flg_type_in              IN exams_ea.flg_type%TYPE DEFAULT NULL,
        id_exam_cat_in           IN exams_ea.id_exam_cat%TYPE DEFAULT NULL,
        flg_available_in         IN exams_ea.flg_available%TYPE DEFAULT NULL,
        flg_notes_in             IN exams_ea.flg_notes%TYPE DEFAULT NULL,
        flg_doc_in               IN exams_ea.flg_doc%TYPE DEFAULT NULL,
        flg_time_in              IN exams_ea.flg_time%TYPE DEFAULT NULL,
        flg_status_req_in        IN exams_ea.flg_status_req%TYPE DEFAULT NULL,
        flg_status_det_in        IN exams_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_referral_in          IN exams_ea.flg_referral%TYPE DEFAULT NULL,
        id_prof_req_in           IN exams_ea.id_prof_req%TYPE DEFAULT NULL,
        id_prof_performed_in     IN exams_ea.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN exams_ea.start_time%TYPE DEFAULT NULL,
        end_time_in              IN exams_ea.end_time%TYPE DEFAULT NULL,
        id_epis_doc_perform_in   IN exams_ea.id_epis_doc_perform%TYPE DEFAULT NULL,
        desc_perform_notes_in    IN exams_ea.desc_perform_notes%TYPE DEFAULT NULL,
        id_epis_doc_result_in    IN exams_ea.id_epis_doc_result%TYPE DEFAULT NULL,
        desc_result_in           IN exams_ea.desc_result%TYPE DEFAULT NULL,
        flg_status_result_in     IN exams_ea.flg_status_result%TYPE DEFAULT NULL,
        id_exam_codification_in  IN exams_ea.id_exam_codification%TYPE DEFAULT NULL,
        id_room_in               IN exams_ea.id_room%TYPE DEFAULT NULL,
        id_movement_in           IN exams_ea.id_movement%TYPE DEFAULT NULL,
        id_task_dependency_in    IN exams_ea.id_task_dependency%TYPE DEFAULT NULL,
        flg_req_origin_module_in IN exams_ea.flg_req_origin_module%TYPE DEFAULT NULL,
        id_patient_in            IN exams_ea.id_patient%TYPE DEFAULT NULL,
        id_visit_in              IN exams_ea.id_visit%TYPE DEFAULT NULL,
        id_episode_in            IN exams_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_origin_in     IN exams_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_prev_episode_in       IN exams_ea.id_prev_episode%TYPE DEFAULT NULL,
        dt_dg_last_update_in     IN exams_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        create_user_in           IN exams_ea.create_user%TYPE DEFAULT NULL,
        create_time_in           IN exams_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN exams_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN exams_ea.update_user%TYPE DEFAULT NULL,
        update_time_in           IN exams_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN exams_ea.update_institution%TYPE DEFAULT NULL,
        notes_in                 IN exams_ea.notes%TYPE DEFAULT NULL,
        notes_technician_in      IN exams_ea.notes_technician%TYPE DEFAULT NULL,
        notes_patient_in         IN exams_ea.notes_patient%TYPE DEFAULT NULL,
        notes_cancel_in          IN exams_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_scheduler_in       IN exams_ea.notes_scheduler%TYPE DEFAULT NULL,
        flg_relevant_in          IN exams_ea.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_exam_req_det_in       => id_exam_req_det_in,
            id_exam_req_in           => id_exam_req_in,
            id_exam_result_in        => id_exam_result_in,
            id_exam_in               => id_exam_in,
            id_exam_group_in         => id_exam_group_in,
            dt_req_in                => dt_req_in,
            dt_begin_in              => dt_begin_in,
            dt_pend_req_in           => dt_pend_req_in,
            dt_result_in             => dt_result_in,
            priority_in              => priority_in,
            status_str_req_in        => status_str_req_in,
            status_msg_req_in        => status_msg_req_in,
            status_icon_req_in       => status_icon_req_in,
            status_flg_req_in        => status_flg_req_in,
            status_str_in            => status_str_in,
            status_msg_in            => status_msg_in,
            status_icon_in           => status_icon_in,
            status_flg_in            => status_flg_in,
            flg_type_in              => flg_type_in,
            id_exam_cat_in           => id_exam_cat_in,
            flg_available_in         => flg_available_in,
            flg_notes_in             => flg_notes_in,
            flg_doc_in               => flg_doc_in,
            flg_time_in              => flg_time_in,
            flg_status_req_in        => flg_status_req_in,
            flg_status_det_in        => flg_status_det_in,
            flg_referral_in          => flg_referral_in,
            id_prof_req_in           => id_prof_req_in,
            id_prof_performed_in     => id_prof_performed_in,
            start_time_in            => start_time_in,
            end_time_in              => end_time_in,
            id_epis_doc_perform_in   => id_epis_doc_perform_in,
            desc_perform_notes_in    => desc_perform_notes_in,
            id_epis_doc_result_in    => id_epis_doc_result_in,
            desc_result_in           => desc_result_in,
            flg_status_result_in     => flg_status_result_in,
            id_exam_codification_in  => id_exam_codification_in,
            id_room_in               => id_room_in,
            id_movement_in           => id_movement_in,
            id_task_dependency_in    => id_task_dependency_in,
            flg_req_origin_module_in => flg_req_origin_module_in,
            id_patient_in            => id_patient_in,
            id_visit_in              => id_visit_in,
            id_episode_in            => id_episode_in,
            id_episode_origin_in     => id_episode_origin_in,
            id_prev_episode_in       => id_prev_episode_in,
            dt_dg_last_update_in     => dt_dg_last_update_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            notes_in                 => notes_in,
            notes_technician_in      => notes_technician_in,
            notes_patient_in         => notes_patient_in,
            notes_cancel_in          => notes_cancel_in,
            notes_scheduler_in       => notes_scheduler_in,
            flg_relevant_in          => flg_relevant_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    /*
    START Special logic for handling LOB columns....
    */

    PROCEDURE n_ins_clobs_in_chunks
    (
        id_exam_req_det_in       IN exams_ea.id_exam_req_det%TYPE,
        id_exam_req_in           IN exams_ea.id_exam_req%TYPE DEFAULT NULL,
        id_exam_result_in        IN exams_ea.id_exam_result%TYPE DEFAULT NULL,
        id_exam_in               IN exams_ea.id_exam%TYPE DEFAULT NULL,
        id_exam_group_in         IN exams_ea.id_exam_group%TYPE DEFAULT NULL,
        dt_req_in                IN exams_ea.dt_req%TYPE DEFAULT NULL,
        dt_begin_in              IN exams_ea.dt_begin%TYPE DEFAULT NULL,
        dt_pend_req_in           IN exams_ea.dt_pend_req%TYPE DEFAULT NULL,
        dt_result_in             IN exams_ea.dt_result%TYPE DEFAULT NULL,
        priority_in              IN exams_ea.priority%TYPE DEFAULT NULL,
        status_str_req_in        IN exams_ea.status_str_req%TYPE DEFAULT NULL,
        status_msg_req_in        IN exams_ea.status_msg_req%TYPE DEFAULT NULL,
        status_icon_req_in       IN exams_ea.status_icon_req%TYPE DEFAULT NULL,
        status_flg_req_in        IN exams_ea.status_flg_req%TYPE DEFAULT NULL,
        status_str_in            IN exams_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in            IN exams_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in           IN exams_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in            IN exams_ea.status_flg%TYPE DEFAULT NULL,
        flg_type_in              IN exams_ea.flg_type%TYPE DEFAULT NULL,
        id_exam_cat_in           IN exams_ea.id_exam_cat%TYPE DEFAULT NULL,
        flg_available_in         IN exams_ea.flg_available%TYPE DEFAULT NULL,
        flg_notes_in             IN exams_ea.flg_notes%TYPE DEFAULT NULL,
        flg_doc_in               IN exams_ea.flg_doc%TYPE DEFAULT NULL,
        flg_time_in              IN exams_ea.flg_time%TYPE DEFAULT NULL,
        flg_status_req_in        IN exams_ea.flg_status_req%TYPE DEFAULT NULL,
        flg_status_det_in        IN exams_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_referral_in          IN exams_ea.flg_referral%TYPE DEFAULT NULL,
        id_prof_req_in           IN exams_ea.id_prof_req%TYPE DEFAULT NULL,
        id_prof_performed_in     IN exams_ea.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN exams_ea.start_time%TYPE DEFAULT NULL,
        end_time_in              IN exams_ea.end_time%TYPE DEFAULT NULL,
        id_epis_doc_perform_in   IN exams_ea.id_epis_doc_perform%TYPE DEFAULT NULL,
        id_epis_doc_result_in    IN exams_ea.id_epis_doc_result%TYPE DEFAULT NULL,
        flg_status_result_in     IN exams_ea.flg_status_result%TYPE DEFAULT NULL,
        id_exam_codification_in  IN exams_ea.id_exam_codification%TYPE DEFAULT NULL,
        id_room_in               IN exams_ea.id_room%TYPE DEFAULT NULL,
        id_movement_in           IN exams_ea.id_movement%TYPE DEFAULT NULL,
        id_task_dependency_in    IN exams_ea.id_task_dependency%TYPE DEFAULT NULL,
        flg_req_origin_module_in IN exams_ea.flg_req_origin_module%TYPE DEFAULT NULL,
        id_patient_in            IN exams_ea.id_patient%TYPE DEFAULT NULL,
        id_visit_in              IN exams_ea.id_visit%TYPE DEFAULT NULL,
        id_episode_in            IN exams_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_origin_in     IN exams_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_prev_episode_in       IN exams_ea.id_prev_episode%TYPE DEFAULT NULL,
        dt_dg_last_update_in     IN exams_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        create_user_in           IN exams_ea.create_user%TYPE DEFAULT NULL,
        create_time_in           IN exams_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN exams_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN exams_ea.update_user%TYPE DEFAULT NULL,
        update_time_in           IN exams_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN exams_ea.update_institution%TYPE DEFAULT NULL,
        notes_in                 IN exams_ea.notes%TYPE DEFAULT NULL,
        notes_technician_in      IN exams_ea.notes_technician%TYPE DEFAULT NULL,
        notes_patient_in         IN exams_ea.notes_patient%TYPE DEFAULT NULL,
        notes_cancel_in          IN exams_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_scheduler_in       IN exams_ea.notes_scheduler%TYPE DEFAULT NULL,
        flg_relevant_in          IN exams_ea.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        clob_columns_in          IN varchar2_t,
        clob_pieces_in           IN varchar2_t
    ) IS
        l_desc_perform_notes CLOB;
        l_desc_result        CLOB;
        i                    PLS_INTEGER;
        current_column       VARCHAR2(30) := '';
    BEGIN
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'desc_perform_notes_in' THEN
                            IF l_desc_perform_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_desc_perform_notes, TRUE, dbms_lob.call);
                            END IF;
                        WHEN 'desc_result_in' THEN
                            IF l_desc_result IS NULL
                            THEN
                                dbms_lob.createtemporary(l_desc_result, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'desc_perform_notes_in' THEN
                        dbms_lob.writeappend(l_desc_perform_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                    WHEN 'desc_result_in' THEN
                        dbms_lob.writeappend(l_desc_result, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        ins(id_exam_req_det_in       => id_exam_req_det_in,
            id_exam_req_in           => id_exam_req_in,
            id_exam_result_in        => id_exam_result_in,
            id_exam_in               => id_exam_in,
            id_exam_group_in         => id_exam_group_in,
            dt_req_in                => dt_req_in,
            dt_begin_in              => dt_begin_in,
            dt_pend_req_in           => dt_pend_req_in,
            dt_result_in             => dt_result_in,
            priority_in              => priority_in,
            status_str_req_in        => status_str_req_in,
            status_msg_req_in        => status_msg_req_in,
            status_icon_req_in       => status_icon_req_in,
            status_flg_req_in        => status_flg_req_in,
            status_str_in            => status_str_in,
            status_msg_in            => status_msg_in,
            status_icon_in           => status_icon_in,
            status_flg_in            => status_flg_in,
            flg_type_in              => flg_type_in,
            id_exam_cat_in           => id_exam_cat_in,
            flg_available_in         => flg_available_in,
            flg_notes_in             => flg_notes_in,
            flg_doc_in               => flg_doc_in,
            flg_time_in              => flg_time_in,
            flg_status_req_in        => flg_status_req_in,
            flg_status_det_in        => flg_status_det_in,
            flg_referral_in          => flg_referral_in,
            id_prof_req_in           => id_prof_req_in,
            id_prof_performed_in     => id_prof_performed_in,
            start_time_in            => start_time_in,
            end_time_in              => end_time_in,
            id_epis_doc_perform_in   => id_epis_doc_perform_in,
            desc_perform_notes_in    => l_desc_perform_notes,
            id_epis_doc_result_in    => id_epis_doc_result_in,
            desc_result_in           => l_desc_result,
            flg_status_result_in     => flg_status_result_in,
            id_exam_codification_in  => id_exam_codification_in,
            id_room_in               => id_room_in,
            id_movement_in           => id_movement_in,
            id_task_dependency_in    => id_task_dependency_in,
            flg_req_origin_module_in => flg_req_origin_module_in,
            id_patient_in            => id_patient_in,
            id_visit_in              => id_visit_in,
            id_episode_in            => id_episode_in,
            id_episode_origin_in     => id_episode_origin_in,
            id_prev_episode_in       => id_prev_episode_in,
            dt_dg_last_update_in     => dt_dg_last_update_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            notes_in                 => notes_in,
            notes_technician_in      => notes_technician_in,
            notes_patient_in         => notes_patient_in,
            notes_cancel_in          => notes_cancel_in,
            notes_scheduler_in       => notes_scheduler_in,
            flg_relevant_in          => flg_relevant_in,
            handle_error_in          => handle_error_in);
    
    END n_ins_clobs_in_chunks;

    PROCEDURE n_upd_clobs_in_chunks
    (
        id_exam_req_det_in       IN exams_ea.id_exam_req_det%TYPE,
        id_exam_req_in           IN exams_ea.id_exam_req%TYPE DEFAULT NULL,
        id_exam_result_in        IN exams_ea.id_exam_result%TYPE DEFAULT NULL,
        id_exam_in               IN exams_ea.id_exam%TYPE DEFAULT NULL,
        id_exam_group_in         IN exams_ea.id_exam_group%TYPE DEFAULT NULL,
        dt_req_in                IN exams_ea.dt_req%TYPE DEFAULT NULL,
        dt_begin_in              IN exams_ea.dt_begin%TYPE DEFAULT NULL,
        dt_pend_req_in           IN exams_ea.dt_pend_req%TYPE DEFAULT NULL,
        dt_result_in             IN exams_ea.dt_result%TYPE DEFAULT NULL,
        priority_in              IN exams_ea.priority%TYPE DEFAULT NULL,
        status_str_req_in        IN exams_ea.status_str_req%TYPE DEFAULT NULL,
        status_msg_req_in        IN exams_ea.status_msg_req%TYPE DEFAULT NULL,
        status_icon_req_in       IN exams_ea.status_icon_req%TYPE DEFAULT NULL,
        status_flg_req_in        IN exams_ea.status_flg_req%TYPE DEFAULT NULL,
        status_str_in            IN exams_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in            IN exams_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in           IN exams_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in            IN exams_ea.status_flg%TYPE DEFAULT NULL,
        flg_type_in              IN exams_ea.flg_type%TYPE DEFAULT NULL,
        id_exam_cat_in           IN exams_ea.id_exam_cat%TYPE DEFAULT NULL,
        flg_available_in         IN exams_ea.flg_available%TYPE DEFAULT NULL,
        flg_notes_in             IN exams_ea.flg_notes%TYPE DEFAULT NULL,
        flg_doc_in               IN exams_ea.flg_doc%TYPE DEFAULT NULL,
        flg_time_in              IN exams_ea.flg_time%TYPE DEFAULT NULL,
        flg_status_req_in        IN exams_ea.flg_status_req%TYPE DEFAULT NULL,
        flg_status_det_in        IN exams_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_referral_in          IN exams_ea.flg_referral%TYPE DEFAULT NULL,
        id_prof_req_in           IN exams_ea.id_prof_req%TYPE DEFAULT NULL,
        id_prof_performed_in     IN exams_ea.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN exams_ea.start_time%TYPE DEFAULT NULL,
        end_time_in              IN exams_ea.end_time%TYPE DEFAULT NULL,
        id_epis_doc_perform_in   IN exams_ea.id_epis_doc_perform%TYPE DEFAULT NULL,
        id_epis_doc_result_in    IN exams_ea.id_epis_doc_result%TYPE DEFAULT NULL,
        flg_status_result_in     IN exams_ea.flg_status_result%TYPE DEFAULT NULL,
        id_exam_codification_in  IN exams_ea.id_exam_codification%TYPE DEFAULT NULL,
        id_room_in               IN exams_ea.id_room%TYPE DEFAULT NULL,
        id_movement_in           IN exams_ea.id_movement%TYPE DEFAULT NULL,
        id_task_dependency_in    IN exams_ea.id_task_dependency%TYPE DEFAULT NULL,
        flg_req_origin_module_in IN exams_ea.flg_req_origin_module%TYPE DEFAULT NULL,
        id_patient_in            IN exams_ea.id_patient%TYPE DEFAULT NULL,
        id_visit_in              IN exams_ea.id_visit%TYPE DEFAULT NULL,
        id_episode_in            IN exams_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_origin_in     IN exams_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_prev_episode_in       IN exams_ea.id_prev_episode%TYPE DEFAULT NULL,
        dt_dg_last_update_in     IN exams_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        create_user_in           IN exams_ea.create_user%TYPE DEFAULT NULL,
        create_time_in           IN exams_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN exams_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN exams_ea.update_user%TYPE DEFAULT NULL,
        update_time_in           IN exams_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN exams_ea.update_institution%TYPE DEFAULT NULL,
        notes_in                 IN exams_ea.notes%TYPE DEFAULT NULL,
        notes_technician_in      IN exams_ea.notes_technician%TYPE DEFAULT NULL,
        notes_patient_in         IN exams_ea.notes_patient%TYPE DEFAULT NULL,
        notes_cancel_in          IN exams_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_scheduler_in       IN exams_ea.notes_scheduler%TYPE DEFAULT NULL,
        flg_relevant_in          IN exams_ea.flg_relevant%TYPE DEFAULT NULL,
        ignore_if_null_in        IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE,
        clob_columns_in          IN varchar2_t,
        clob_pieces_in           IN varchar2_t
    ) IS
        l_desc_perform_notes CLOB;
        l_desc_result        CLOB;
        i                    PLS_INTEGER;
        current_column       VARCHAR2(30) := '';
        l_rows               PLS_INTEGER;
    BEGIN
    
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'desc_perform_notes_in' THEN
                            IF l_desc_perform_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_desc_perform_notes, TRUE, dbms_lob.call);
                            END IF;
                        WHEN 'desc_result_in' THEN
                            IF l_desc_result IS NULL
                            THEN
                                dbms_lob.createtemporary(l_desc_result, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'desc_perform_notes_in' THEN
                        dbms_lob.writeappend(l_desc_perform_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                    WHEN 'desc_result_in' THEN
                        dbms_lob.writeappend(l_desc_result, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        upd(id_exam_req_det_in       => id_exam_req_det_in,
            id_exam_req_in           => id_exam_req_in,
            id_exam_result_in        => id_exam_result_in,
            id_exam_in               => id_exam_in,
            id_exam_group_in         => id_exam_group_in,
            dt_req_in                => dt_req_in,
            dt_begin_in              => dt_begin_in,
            dt_pend_req_in           => dt_pend_req_in,
            dt_result_in             => dt_result_in,
            priority_in              => priority_in,
            status_str_req_in        => status_str_req_in,
            status_msg_req_in        => status_msg_req_in,
            status_icon_req_in       => status_icon_req_in,
            status_flg_req_in        => status_flg_req_in,
            status_str_in            => status_str_in,
            status_msg_in            => status_msg_in,
            status_icon_in           => status_icon_in,
            status_flg_in            => status_flg_in,
            flg_type_in              => flg_type_in,
            id_exam_cat_in           => id_exam_cat_in,
            flg_available_in         => flg_available_in,
            flg_notes_in             => flg_notes_in,
            flg_doc_in               => flg_doc_in,
            flg_time_in              => flg_time_in,
            flg_status_req_in        => flg_status_req_in,
            flg_status_det_in        => flg_status_det_in,
            flg_referral_in          => flg_referral_in,
            id_prof_req_in           => id_prof_req_in,
            id_prof_performed_in     => id_prof_performed_in,
            start_time_in            => start_time_in,
            end_time_in              => end_time_in,
            id_epis_doc_perform_in   => id_epis_doc_perform_in,
            desc_perform_notes_in    => l_desc_perform_notes,
            id_epis_doc_result_in    => id_epis_doc_result_in,
            desc_result_in           => l_desc_result,
            flg_status_result_in     => flg_status_result_in,
            id_exam_codification_in  => id_exam_codification_in,
            id_room_in               => id_room_in,
            id_movement_in           => id_movement_in,
            id_task_dependency_in    => id_task_dependency_in,
            flg_req_origin_module_in => flg_req_origin_module_in,
            id_patient_in            => id_patient_in,
            id_visit_in              => id_visit_in,
            id_episode_in            => id_episode_in,
            id_episode_origin_in     => id_episode_origin_in,
            id_prev_episode_in       => id_prev_episode_in,
            dt_dg_last_update_in     => dt_dg_last_update_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            notes_in                 => notes_in,
            notes_technician_in      => notes_technician_in,
            notes_patient_in         => notes_patient_in,
            notes_cancel_in          => notes_cancel_in,
            notes_scheduler_in       => notes_scheduler_in,
            flg_relevant_in          => flg_relevant_in,
            handle_error_in          => handle_error_in);
    END n_upd_clobs_in_chunks;

    PROCEDURE n_upd_ins_clobs_in_chunks
    (
        id_exam_req_det_in       IN exams_ea.id_exam_req_det%TYPE,
        id_exam_req_in           IN exams_ea.id_exam_req%TYPE DEFAULT NULL,
        id_exam_result_in        IN exams_ea.id_exam_result%TYPE DEFAULT NULL,
        id_exam_in               IN exams_ea.id_exam%TYPE DEFAULT NULL,
        id_exam_group_in         IN exams_ea.id_exam_group%TYPE DEFAULT NULL,
        dt_req_in                IN exams_ea.dt_req%TYPE DEFAULT NULL,
        dt_begin_in              IN exams_ea.dt_begin%TYPE DEFAULT NULL,
        dt_pend_req_in           IN exams_ea.dt_pend_req%TYPE DEFAULT NULL,
        dt_result_in             IN exams_ea.dt_result%TYPE DEFAULT NULL,
        priority_in              IN exams_ea.priority%TYPE DEFAULT NULL,
        status_str_req_in        IN exams_ea.status_str_req%TYPE DEFAULT NULL,
        status_msg_req_in        IN exams_ea.status_msg_req%TYPE DEFAULT NULL,
        status_icon_req_in       IN exams_ea.status_icon_req%TYPE DEFAULT NULL,
        status_flg_req_in        IN exams_ea.status_flg_req%TYPE DEFAULT NULL,
        status_str_in            IN exams_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in            IN exams_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in           IN exams_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in            IN exams_ea.status_flg%TYPE DEFAULT NULL,
        flg_type_in              IN exams_ea.flg_type%TYPE DEFAULT NULL,
        id_exam_cat_in           IN exams_ea.id_exam_cat%TYPE DEFAULT NULL,
        flg_available_in         IN exams_ea.flg_available%TYPE DEFAULT NULL,
        flg_notes_in             IN exams_ea.flg_notes%TYPE DEFAULT NULL,
        flg_doc_in               IN exams_ea.flg_doc%TYPE DEFAULT NULL,
        flg_time_in              IN exams_ea.flg_time%TYPE DEFAULT NULL,
        flg_status_req_in        IN exams_ea.flg_status_req%TYPE DEFAULT NULL,
        flg_status_det_in        IN exams_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_referral_in          IN exams_ea.flg_referral%TYPE DEFAULT NULL,
        id_prof_req_in           IN exams_ea.id_prof_req%TYPE DEFAULT NULL,
        id_prof_performed_in     IN exams_ea.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN exams_ea.start_time%TYPE DEFAULT NULL,
        end_time_in              IN exams_ea.end_time%TYPE DEFAULT NULL,
        id_epis_doc_perform_in   IN exams_ea.id_epis_doc_perform%TYPE DEFAULT NULL,
        id_epis_doc_result_in    IN exams_ea.id_epis_doc_result%TYPE DEFAULT NULL,
        flg_status_result_in     IN exams_ea.flg_status_result%TYPE DEFAULT NULL,
        id_exam_codification_in  IN exams_ea.id_exam_codification%TYPE DEFAULT NULL,
        id_room_in               IN exams_ea.id_room%TYPE DEFAULT NULL,
        id_movement_in           IN exams_ea.id_movement%TYPE DEFAULT NULL,
        id_task_dependency_in    IN exams_ea.id_task_dependency%TYPE DEFAULT NULL,
        flg_req_origin_module_in IN exams_ea.flg_req_origin_module%TYPE DEFAULT NULL,
        id_patient_in            IN exams_ea.id_patient%TYPE DEFAULT NULL,
        id_visit_in              IN exams_ea.id_visit%TYPE DEFAULT NULL,
        id_episode_in            IN exams_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_origin_in     IN exams_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_prev_episode_in       IN exams_ea.id_prev_episode%TYPE DEFAULT NULL,
        dt_dg_last_update_in     IN exams_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        create_user_in           IN exams_ea.create_user%TYPE DEFAULT NULL,
        create_time_in           IN exams_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN exams_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN exams_ea.update_user%TYPE DEFAULT NULL,
        update_time_in           IN exams_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN exams_ea.update_institution%TYPE DEFAULT NULL,
        notes_in                 IN exams_ea.notes%TYPE DEFAULT NULL,
        notes_technician_in      IN exams_ea.notes_technician%TYPE DEFAULT NULL,
        notes_patient_in         IN exams_ea.notes_patient%TYPE DEFAULT NULL,
        notes_cancel_in          IN exams_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_scheduler_in       IN exams_ea.notes_scheduler%TYPE DEFAULT NULL,
        flg_relevant_in          IN exams_ea.flg_relevant%TYPE DEFAULT NULL,
        ignore_if_null_in        IN BOOLEAN DEFAULT TRUE,
        handle_error_in          IN BOOLEAN DEFAULT TRUE,
        clob_columns_in          IN varchar2_t,
        clob_pieces_in           IN varchar2_t
    ) IS
    BEGIN
        n_upd_clobs_in_chunks(id_exam_req_det_in       => id_exam_req_det_in,
                              id_exam_req_in           => id_exam_req_in,
                              id_exam_result_in        => id_exam_result_in,
                              id_exam_in               => id_exam_in,
                              id_exam_group_in         => id_exam_group_in,
                              dt_req_in                => dt_req_in,
                              dt_begin_in              => dt_begin_in,
                              dt_pend_req_in           => dt_pend_req_in,
                              dt_result_in             => dt_result_in,
                              priority_in              => priority_in,
                              status_str_req_in        => status_str_req_in,
                              status_msg_req_in        => status_msg_req_in,
                              status_icon_req_in       => status_icon_req_in,
                              status_flg_req_in        => status_flg_req_in,
                              status_str_in            => status_str_in,
                              status_msg_in            => status_msg_in,
                              status_icon_in           => status_icon_in,
                              status_flg_in            => status_flg_in,
                              flg_type_in              => flg_type_in,
                              id_exam_cat_in           => id_exam_cat_in,
                              flg_available_in         => flg_available_in,
                              flg_notes_in             => flg_notes_in,
                              flg_doc_in               => flg_doc_in,
                              flg_time_in              => flg_time_in,
                              flg_status_req_in        => flg_status_req_in,
                              flg_status_det_in        => flg_status_det_in,
                              flg_referral_in          => flg_referral_in,
                              id_prof_req_in           => id_prof_req_in,
                              id_prof_performed_in     => id_prof_performed_in,
                              start_time_in            => start_time_in,
                              end_time_in              => end_time_in,
                              id_epis_doc_perform_in   => id_epis_doc_perform_in,
                              id_epis_doc_result_in    => id_epis_doc_result_in,
                              flg_status_result_in     => flg_status_result_in,
                              id_exam_codification_in  => id_exam_codification_in,
                              id_room_in               => id_room_in,
                              id_movement_in           => id_movement_in,
                              id_task_dependency_in    => id_task_dependency_in,
                              flg_req_origin_module_in => flg_req_origin_module_in,
                              id_patient_in            => id_patient_in,
                              id_visit_in              => id_visit_in,
                              id_episode_in            => id_episode_in,
                              id_episode_origin_in     => id_episode_origin_in,
                              id_prev_episode_in       => id_prev_episode_in,
                              dt_dg_last_update_in     => dt_dg_last_update_in,
                              create_user_in           => create_user_in,
                              create_time_in           => create_time_in,
                              create_institution_in    => create_institution_in,
                              update_user_in           => update_user_in,
                              update_time_in           => update_time_in,
                              update_institution_in    => update_institution_in,
                              notes_in                 => notes_in,
                              notes_technician_in      => notes_technician_in,
                              notes_patient_in         => notes_patient_in,
                              notes_cancel_in          => notes_cancel_in,
                              notes_scheduler_in       => notes_scheduler_in,
                              flg_relevant_in          => flg_relevant_in,
                              clob_columns_in          => clob_columns_in,
                              clob_pieces_in           => clob_pieces_in,
                              ignore_if_null_in        => ignore_if_null_in,
                              handle_error_in          => handle_error_in);
    
        IF SQL%ROWCOUNT = 0
        THEN
            n_ins_clobs_in_chunks(id_exam_req_det_in       => id_exam_req_det_in,
                                  id_exam_req_in           => id_exam_req_in,
                                  id_exam_result_in        => id_exam_result_in,
                                  id_exam_in               => id_exam_in,
                                  id_exam_group_in         => id_exam_group_in,
                                  dt_req_in                => dt_req_in,
                                  dt_begin_in              => dt_begin_in,
                                  dt_pend_req_in           => dt_pend_req_in,
                                  dt_result_in             => dt_result_in,
                                  priority_in              => priority_in,
                                  status_str_req_in        => status_str_req_in,
                                  status_msg_req_in        => status_msg_req_in,
                                  status_icon_req_in       => status_icon_req_in,
                                  status_flg_req_in        => status_flg_req_in,
                                  status_str_in            => status_str_in,
                                  status_msg_in            => status_msg_in,
                                  status_icon_in           => status_icon_in,
                                  status_flg_in            => status_flg_in,
                                  flg_type_in              => flg_type_in,
                                  id_exam_cat_in           => id_exam_cat_in,
                                  flg_available_in         => flg_available_in,
                                  flg_notes_in             => flg_notes_in,
                                  flg_doc_in               => flg_doc_in,
                                  flg_time_in              => flg_time_in,
                                  flg_status_req_in        => flg_status_req_in,
                                  flg_status_det_in        => flg_status_det_in,
                                  flg_referral_in          => flg_referral_in,
                                  id_prof_req_in           => id_prof_req_in,
                                  id_prof_performed_in     => id_prof_performed_in,
                                  start_time_in            => start_time_in,
                                  end_time_in              => end_time_in,
                                  id_epis_doc_perform_in   => id_epis_doc_perform_in,
                                  id_epis_doc_result_in    => id_epis_doc_result_in,
                                  flg_status_result_in     => flg_status_result_in,
                                  id_exam_codification_in  => id_exam_codification_in,
                                  id_room_in               => id_room_in,
                                  id_movement_in           => id_movement_in,
                                  id_task_dependency_in    => id_task_dependency_in,
                                  flg_req_origin_module_in => flg_req_origin_module_in,
                                  id_patient_in            => id_patient_in,
                                  id_visit_in              => id_visit_in,
                                  id_episode_in            => id_episode_in,
                                  id_episode_origin_in     => id_episode_origin_in,
                                  id_prev_episode_in       => id_prev_episode_in,
                                  dt_dg_last_update_in     => dt_dg_last_update_in,
                                  create_user_in           => create_user_in,
                                  create_time_in           => create_time_in,
                                  create_institution_in    => create_institution_in,
                                  update_user_in           => update_user_in,
                                  update_time_in           => update_time_in,
                                  update_institution_in    => update_institution_in,
                                  notes_in                 => notes_in,
                                  notes_technician_in      => notes_technician_in,
                                  notes_patient_in         => notes_patient_in,
                                  notes_cancel_in          => notes_cancel_in,
                                  notes_scheduler_in       => notes_scheduler_in,
                                  flg_relevant_in          => flg_relevant_in,
                                  clob_columns_in          => clob_columns_in,
                                  clob_pieces_in           => clob_pieces_in,
                                  handle_error_in          => handle_error_in);
        END IF;
    END n_upd_ins_clobs_in_chunks;

    /*
    END Special logic for handling LOB columns.
    */

    PROCEDURE ins
    (
        rec_in          IN exams_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec exams_ea%ROWTYPE := rec_in;
    BEGIN
        ins(id_exam_req_det_in       => l_rec.id_exam_req_det,
            id_exam_req_in           => l_rec.id_exam_req,
            id_exam_result_in        => l_rec.id_exam_result,
            id_exam_in               => l_rec.id_exam,
            id_exam_group_in         => l_rec.id_exam_group,
            dt_req_in                => l_rec.dt_req,
            dt_begin_in              => l_rec.dt_begin,
            dt_pend_req_in           => l_rec.dt_pend_req,
            dt_result_in             => l_rec.dt_result,
            priority_in              => l_rec.priority,
            status_str_req_in        => l_rec.status_str_req,
            status_msg_req_in        => l_rec.status_msg_req,
            status_icon_req_in       => l_rec.status_icon_req,
            status_flg_req_in        => l_rec.status_flg_req,
            status_str_in            => l_rec.status_str,
            status_msg_in            => l_rec.status_msg,
            status_icon_in           => l_rec.status_icon,
            status_flg_in            => l_rec.status_flg,
            flg_type_in              => l_rec.flg_type,
            id_exam_cat_in           => l_rec.id_exam_cat,
            flg_available_in         => l_rec.flg_available,
            flg_notes_in             => l_rec.flg_notes,
            flg_doc_in               => l_rec.flg_doc,
            flg_time_in              => l_rec.flg_time,
            flg_status_req_in        => l_rec.flg_status_req,
            flg_status_det_in        => l_rec.flg_status_det,
            flg_referral_in          => l_rec.flg_referral,
            id_prof_req_in           => l_rec.id_prof_req,
            id_prof_performed_in     => l_rec.id_prof_performed,
            start_time_in            => l_rec.start_time,
            end_time_in              => l_rec.end_time,
            id_epis_doc_perform_in   => l_rec.id_epis_doc_perform,
            desc_perform_notes_in    => l_rec.desc_perform_notes,
            id_epis_doc_result_in    => l_rec.id_epis_doc_result,
            desc_result_in           => l_rec.desc_result,
            flg_status_result_in     => l_rec.flg_status_result,
            id_exam_codification_in  => l_rec.id_exam_codification,
            id_room_in               => l_rec.id_room,
            id_movement_in           => l_rec.id_movement,
            id_task_dependency_in    => l_rec.id_task_dependency,
            flg_req_origin_module_in => l_rec.flg_req_origin_module,
            id_patient_in            => l_rec.id_patient,
            id_visit_in              => l_rec.id_visit,
            id_episode_in            => l_rec.id_episode,
            id_episode_origin_in     => l_rec.id_episode_origin,
            id_prev_episode_in       => l_rec.id_prev_episode,
            dt_dg_last_update_in     => l_rec.dt_dg_last_update,
            create_user_in           => l_rec.create_user,
            create_time_in           => l_rec.create_time,
            create_institution_in    => l_rec.create_institution,
            update_user_in           => l_rec.update_user,
            update_time_in           => l_rec.update_time,
            update_institution_in    => l_rec.update_institution,
            notes_in                 => l_rec.notes,
            notes_technician_in      => l_rec.notes_technician,
            notes_patient_in         => l_rec.notes_patient,
            notes_cancel_in          => l_rec.notes_cancel,
            notes_scheduler_in       => l_rec.notes_scheduler,
            flg_relevant_in          => l_rec.flg_relevant,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN exams_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN exams_ea_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO exams_ea
                    (id_exam_req,
                     id_exam_req_det,
                     id_exam_result,
                     id_exam,
                     id_exam_group,
                     dt_req,
                     dt_begin,
                     dt_pend_req,
                     dt_result,
                     priority,
                     status_str_req,
                     status_msg_req,
                     status_icon_req,
                     status_flg_req,
                     status_str,
                     status_msg,
                     status_icon,
                     status_flg,
                     flg_type,
                     id_exam_cat,
                     flg_available,
                     flg_notes,
                     flg_doc,
                     flg_time,
                     flg_status_req,
                     flg_status_det,
                     flg_referral,
                     id_prof_req,
                     id_prof_performed,
                     start_time,
                     end_time,
                     id_epis_doc_perform,
                     desc_perform_notes,
                     id_epis_doc_result,
                     desc_result,
                     flg_status_result,
                     id_exam_codification,
                     id_room,
                     id_movement,
                     id_task_dependency,
                     flg_req_origin_module,
                     id_patient,
                     id_visit,
                     id_episode,
                     id_episode_origin,
                     id_prev_episode,
                     dt_dg_last_update,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     notes,
                     notes_technician,
                     notes_patient,
                     notes_cancel,
                     notes_scheduler,
                     flg_relevant)
                VALUES
                    (rows_in(indx).id_exam_req,
                     rows_in(indx).id_exam_req_det,
                     rows_in(indx).id_exam_result,
                     rows_in(indx).id_exam,
                     rows_in(indx).id_exam_group,
                     rows_in(indx).dt_req,
                     rows_in(indx).dt_begin,
                     rows_in(indx).dt_pend_req,
                     rows_in(indx).dt_result,
                     rows_in(indx).priority,
                     rows_in(indx).status_str_req,
                     rows_in(indx).status_msg_req,
                     rows_in(indx).status_icon_req,
                     rows_in(indx).status_flg_req,
                     rows_in(indx).status_str,
                     rows_in(indx).status_msg,
                     rows_in(indx).status_icon,
                     rows_in(indx).status_flg,
                     rows_in(indx).flg_type,
                     rows_in(indx).id_exam_cat,
                     rows_in(indx).flg_available,
                     rows_in(indx).flg_notes,
                     rows_in(indx).flg_doc,
                     rows_in(indx).flg_time,
                     rows_in(indx).flg_status_req,
                     rows_in(indx).flg_status_det,
                     rows_in(indx).flg_referral,
                     rows_in(indx).id_prof_req,
                     rows_in(indx).id_prof_performed,
                     rows_in(indx).start_time,
                     rows_in(indx).end_time,
                     rows_in(indx).id_epis_doc_perform,
                     rows_in(indx).desc_perform_notes,
                     rows_in(indx).id_epis_doc_result,
                     rows_in(indx).desc_result,
                     rows_in(indx).flg_status_result,
                     rows_in(indx).id_exam_codification,
                     rows_in(indx).id_room,
                     rows_in(indx).id_movement,
                     rows_in(indx).id_task_dependency,
                     rows_in(indx).flg_req_origin_module,
                     rows_in(indx).id_patient,
                     rows_in(indx).id_visit,
                     rows_in(indx).id_episode,
                     rows_in(indx).id_episode_origin,
                     rows_in(indx).id_prev_episode,
                     rows_in(indx).dt_dg_last_update,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).notes,
                     rows_in(indx).notes_technician,
                     rows_in(indx).notes_patient,
                     rows_in(indx).notes_cancel,
                     rows_in(indx).notes_scheduler,
                     rows_in(indx).flg_relevant)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXAM_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_exam_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXAM_REQ_DET _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_exam_req_det,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXAM_RESULT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_exam_result,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXAM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_exam,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXAM_GROUP _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_exam_group,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BEGIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PEND_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_pend_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_RESULT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_result,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PRIORITY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .priority,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_STR_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .status_str_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_MSG_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .status_msg_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_ICON_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .status_icon_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_FLG_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .status_flg_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_STR _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .status_str,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_MSG _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .status_msg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_ICON _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .status_icon,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_FLG _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .status_flg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXAM_CAT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_exam_cat,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_available,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_NOTES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_DOC _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_doc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS_DET _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status_det,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_REFERRAL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_referral,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_PERFORMED _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_performed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'START_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .start_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'END_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .end_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_DOC_PERFORM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_epis_doc_perform,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_DOC_RESULT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_epis_doc_result,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS_RESULT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status_result,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXAM_CODIFICATION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_exam_codification,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROOM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_room,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MOVEMENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_movement,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TASK_DEPENDENCY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_task_dependency,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_REQ_ORIGIN_MODULE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_req_origin_module,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VISIT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_visit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode_origin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PREV_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prev_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_DG_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_dg_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_TECHNICIAN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes_technician,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_PATIENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_SCHEDULER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes_scheduler,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_RELEVANT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_relevant,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'EXAMS_EA',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN exams_ea_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_exam_req_det_in        IN exams_ea.id_exam_req_det%TYPE,
        id_exam_req_in            IN exams_ea.id_exam_req%TYPE DEFAULT NULL,
        id_exam_req_nin           IN BOOLEAN := TRUE,
        id_exam_result_in         IN exams_ea.id_exam_result%TYPE DEFAULT NULL,
        id_exam_result_nin        IN BOOLEAN := TRUE,
        id_exam_in                IN exams_ea.id_exam%TYPE DEFAULT NULL,
        id_exam_nin               IN BOOLEAN := TRUE,
        id_exam_group_in          IN exams_ea.id_exam_group%TYPE DEFAULT NULL,
        id_exam_group_nin         IN BOOLEAN := TRUE,
        dt_req_in                 IN exams_ea.dt_req%TYPE DEFAULT NULL,
        dt_req_nin                IN BOOLEAN := TRUE,
        dt_begin_in               IN exams_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin              IN BOOLEAN := TRUE,
        dt_pend_req_in            IN exams_ea.dt_pend_req%TYPE DEFAULT NULL,
        dt_pend_req_nin           IN BOOLEAN := TRUE,
        dt_result_in              IN exams_ea.dt_result%TYPE DEFAULT NULL,
        dt_result_nin             IN BOOLEAN := TRUE,
        priority_in               IN exams_ea.priority%TYPE DEFAULT NULL,
        priority_nin              IN BOOLEAN := TRUE,
        status_str_req_in         IN exams_ea.status_str_req%TYPE DEFAULT NULL,
        status_str_req_nin        IN BOOLEAN := TRUE,
        status_msg_req_in         IN exams_ea.status_msg_req%TYPE DEFAULT NULL,
        status_msg_req_nin        IN BOOLEAN := TRUE,
        status_icon_req_in        IN exams_ea.status_icon_req%TYPE DEFAULT NULL,
        status_icon_req_nin       IN BOOLEAN := TRUE,
        status_flg_req_in         IN exams_ea.status_flg_req%TYPE DEFAULT NULL,
        status_flg_req_nin        IN BOOLEAN := TRUE,
        status_str_in             IN exams_ea.status_str%TYPE DEFAULT NULL,
        status_str_nin            IN BOOLEAN := TRUE,
        status_msg_in             IN exams_ea.status_msg%TYPE DEFAULT NULL,
        status_msg_nin            IN BOOLEAN := TRUE,
        status_icon_in            IN exams_ea.status_icon%TYPE DEFAULT NULL,
        status_icon_nin           IN BOOLEAN := TRUE,
        status_flg_in             IN exams_ea.status_flg%TYPE DEFAULT NULL,
        status_flg_nin            IN BOOLEAN := TRUE,
        flg_type_in               IN exams_ea.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        id_exam_cat_in            IN exams_ea.id_exam_cat%TYPE DEFAULT NULL,
        id_exam_cat_nin           IN BOOLEAN := TRUE,
        flg_available_in          IN exams_ea.flg_available%TYPE DEFAULT NULL,
        flg_available_nin         IN BOOLEAN := TRUE,
        flg_notes_in              IN exams_ea.flg_notes%TYPE DEFAULT NULL,
        flg_notes_nin             IN BOOLEAN := TRUE,
        flg_doc_in                IN exams_ea.flg_doc%TYPE DEFAULT NULL,
        flg_doc_nin               IN BOOLEAN := TRUE,
        flg_time_in               IN exams_ea.flg_time%TYPE DEFAULT NULL,
        flg_time_nin              IN BOOLEAN := TRUE,
        flg_status_req_in         IN exams_ea.flg_status_req%TYPE DEFAULT NULL,
        flg_status_req_nin        IN BOOLEAN := TRUE,
        flg_status_det_in         IN exams_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_status_det_nin        IN BOOLEAN := TRUE,
        flg_referral_in           IN exams_ea.flg_referral%TYPE DEFAULT NULL,
        flg_referral_nin          IN BOOLEAN := TRUE,
        id_prof_req_in            IN exams_ea.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin           IN BOOLEAN := TRUE,
        id_prof_performed_in      IN exams_ea.id_prof_performed%TYPE DEFAULT NULL,
        id_prof_performed_nin     IN BOOLEAN := TRUE,
        start_time_in             IN exams_ea.start_time%TYPE DEFAULT NULL,
        start_time_nin            IN BOOLEAN := TRUE,
        end_time_in               IN exams_ea.end_time%TYPE DEFAULT NULL,
        end_time_nin              IN BOOLEAN := TRUE,
        id_epis_doc_perform_in    IN exams_ea.id_epis_doc_perform%TYPE DEFAULT NULL,
        id_epis_doc_perform_nin   IN BOOLEAN := TRUE,
        desc_perform_notes_in     IN exams_ea.desc_perform_notes%TYPE DEFAULT NULL,
        desc_perform_notes_nin    IN BOOLEAN := TRUE,
        id_epis_doc_result_in     IN exams_ea.id_epis_doc_result%TYPE DEFAULT NULL,
        id_epis_doc_result_nin    IN BOOLEAN := TRUE,
        desc_result_in            IN exams_ea.desc_result%TYPE DEFAULT NULL,
        desc_result_nin           IN BOOLEAN := TRUE,
        flg_status_result_in      IN exams_ea.flg_status_result%TYPE DEFAULT NULL,
        flg_status_result_nin     IN BOOLEAN := TRUE,
        id_exam_codification_in   IN exams_ea.id_exam_codification%TYPE DEFAULT NULL,
        id_exam_codification_nin  IN BOOLEAN := TRUE,
        id_room_in                IN exams_ea.id_room%TYPE DEFAULT NULL,
        id_room_nin               IN BOOLEAN := TRUE,
        id_movement_in            IN exams_ea.id_movement%TYPE DEFAULT NULL,
        id_movement_nin           IN BOOLEAN := TRUE,
        id_task_dependency_in     IN exams_ea.id_task_dependency%TYPE DEFAULT NULL,
        id_task_dependency_nin    IN BOOLEAN := TRUE,
        flg_req_origin_module_in  IN exams_ea.flg_req_origin_module%TYPE DEFAULT NULL,
        flg_req_origin_module_nin IN BOOLEAN := TRUE,
        id_patient_in             IN exams_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_visit_in               IN exams_ea.id_visit%TYPE DEFAULT NULL,
        id_visit_nin              IN BOOLEAN := TRUE,
        id_episode_in             IN exams_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_episode_origin_in      IN exams_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin     IN BOOLEAN := TRUE,
        id_prev_episode_in        IN exams_ea.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin       IN BOOLEAN := TRUE,
        dt_dg_last_update_in      IN exams_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin     IN BOOLEAN := TRUE,
        create_user_in            IN exams_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN exams_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN exams_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN exams_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN exams_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN exams_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        notes_in                  IN exams_ea.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        notes_technician_in       IN exams_ea.notes_technician%TYPE DEFAULT NULL,
        notes_technician_nin      IN BOOLEAN := TRUE,
        notes_patient_in          IN exams_ea.notes_patient%TYPE DEFAULT NULL,
        notes_patient_nin         IN BOOLEAN := TRUE,
        notes_cancel_in           IN exams_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        notes_scheduler_in        IN exams_ea.notes_scheduler%TYPE DEFAULT NULL,
        notes_scheduler_nin       IN BOOLEAN := TRUE,
        flg_relevant_in           IN exams_ea.flg_relevant%TYPE DEFAULT NULL,
        flg_relevant_nin          IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out                table_varchar;
        l_id_exam_req_n           NUMBER(1);
        l_id_exam_result_n        NUMBER(1);
        l_id_exam_n               NUMBER(1);
        l_id_exam_group_n         NUMBER(1);
        l_dt_req_n                NUMBER(1);
        l_dt_begin_n              NUMBER(1);
        l_dt_pend_req_n           NUMBER(1);
        l_dt_result_n             NUMBER(1);
        l_priority_n              NUMBER(1);
        l_status_str_req_n        NUMBER(1);
        l_status_msg_req_n        NUMBER(1);
        l_status_icon_req_n       NUMBER(1);
        l_status_flg_req_n        NUMBER(1);
        l_status_str_n            NUMBER(1);
        l_status_msg_n            NUMBER(1);
        l_status_icon_n           NUMBER(1);
        l_status_flg_n            NUMBER(1);
        l_flg_type_n              NUMBER(1);
        l_id_exam_cat_n           NUMBER(1);
        l_flg_available_n         NUMBER(1);
        l_flg_notes_n             NUMBER(1);
        l_flg_doc_n               NUMBER(1);
        l_flg_time_n              NUMBER(1);
        l_flg_status_req_n        NUMBER(1);
        l_flg_status_det_n        NUMBER(1);
        l_flg_referral_n          NUMBER(1);
        l_id_prof_req_n           NUMBER(1);
        l_id_prof_performed_n     NUMBER(1);
        l_start_time_n            NUMBER(1);
        l_end_time_n              NUMBER(1);
        l_id_epis_doc_perform_n   NUMBER(1);
        l_desc_perform_notes_n    NUMBER(1);
        l_id_epis_doc_result_n    NUMBER(1);
        l_desc_result_n           NUMBER(1);
        l_flg_status_result_n     NUMBER(1);
        l_id_exam_codification_n  NUMBER(1);
        l_id_room_n               NUMBER(1);
        l_id_movement_n           NUMBER(1);
        l_id_task_dependency_n    NUMBER(1);
        l_flg_req_origin_module_n NUMBER(1);
        l_id_patient_n            NUMBER(1);
        l_id_visit_n              NUMBER(1);
        l_id_episode_n            NUMBER(1);
        l_id_episode_origin_n     NUMBER(1);
        l_id_prev_episode_n       NUMBER(1);
        l_dt_dg_last_update_n     NUMBER(1);
        l_create_user_n           NUMBER(1);
        l_create_time_n           NUMBER(1);
        l_create_institution_n    NUMBER(1);
        l_update_user_n           NUMBER(1);
        l_update_time_n           NUMBER(1);
        l_update_institution_n    NUMBER(1);
        l_notes_n                 NUMBER(1);
        l_notes_technician_n      NUMBER(1);
        l_notes_patient_n         NUMBER(1);
        l_notes_cancel_n          NUMBER(1);
        l_notes_scheduler_n       NUMBER(1);
        l_flg_relevant_n          NUMBER(1);
    BEGIN
    
        l_id_exam_req_n           := sys.diutil.bool_to_int(id_exam_req_nin);
        l_id_exam_result_n        := sys.diutil.bool_to_int(id_exam_result_nin);
        l_id_exam_n               := sys.diutil.bool_to_int(id_exam_nin);
        l_id_exam_group_n         := sys.diutil.bool_to_int(id_exam_group_nin);
        l_dt_req_n                := sys.diutil.bool_to_int(dt_req_nin);
        l_dt_begin_n              := sys.diutil.bool_to_int(dt_begin_nin);
        l_dt_pend_req_n           := sys.diutil.bool_to_int(dt_pend_req_nin);
        l_dt_result_n             := sys.diutil.bool_to_int(dt_result_nin);
        l_priority_n              := sys.diutil.bool_to_int(priority_nin);
        l_status_str_req_n        := sys.diutil.bool_to_int(status_str_req_nin);
        l_status_msg_req_n        := sys.diutil.bool_to_int(status_msg_req_nin);
        l_status_icon_req_n       := sys.diutil.bool_to_int(status_icon_req_nin);
        l_status_flg_req_n        := sys.diutil.bool_to_int(status_flg_req_nin);
        l_status_str_n            := sys.diutil.bool_to_int(status_str_nin);
        l_status_msg_n            := sys.diutil.bool_to_int(status_msg_nin);
        l_status_icon_n           := sys.diutil.bool_to_int(status_icon_nin);
        l_status_flg_n            := sys.diutil.bool_to_int(status_flg_nin);
        l_flg_type_n              := sys.diutil.bool_to_int(flg_type_nin);
        l_id_exam_cat_n           := sys.diutil.bool_to_int(id_exam_cat_nin);
        l_flg_available_n         := sys.diutil.bool_to_int(flg_available_nin);
        l_flg_notes_n             := sys.diutil.bool_to_int(flg_notes_nin);
        l_flg_doc_n               := sys.diutil.bool_to_int(flg_doc_nin);
        l_flg_time_n              := sys.diutil.bool_to_int(flg_time_nin);
        l_flg_status_req_n        := sys.diutil.bool_to_int(flg_status_req_nin);
        l_flg_status_det_n        := sys.diutil.bool_to_int(flg_status_det_nin);
        l_flg_referral_n          := sys.diutil.bool_to_int(flg_referral_nin);
        l_id_prof_req_n           := sys.diutil.bool_to_int(id_prof_req_nin);
        l_id_prof_performed_n     := sys.diutil.bool_to_int(id_prof_performed_nin);
        l_start_time_n            := sys.diutil.bool_to_int(start_time_nin);
        l_end_time_n              := sys.diutil.bool_to_int(end_time_nin);
        l_id_epis_doc_perform_n   := sys.diutil.bool_to_int(id_epis_doc_perform_nin);
        l_desc_perform_notes_n    := sys.diutil.bool_to_int(desc_perform_notes_nin);
        l_id_epis_doc_result_n    := sys.diutil.bool_to_int(id_epis_doc_result_nin);
        l_desc_result_n           := sys.diutil.bool_to_int(desc_result_nin);
        l_flg_status_result_n     := sys.diutil.bool_to_int(flg_status_result_nin);
        l_id_exam_codification_n  := sys.diutil.bool_to_int(id_exam_codification_nin);
        l_id_room_n               := sys.diutil.bool_to_int(id_room_nin);
        l_id_movement_n           := sys.diutil.bool_to_int(id_movement_nin);
        l_id_task_dependency_n    := sys.diutil.bool_to_int(id_task_dependency_nin);
        l_flg_req_origin_module_n := sys.diutil.bool_to_int(flg_req_origin_module_nin);
        l_id_patient_n            := sys.diutil.bool_to_int(id_patient_nin);
        l_id_visit_n              := sys.diutil.bool_to_int(id_visit_nin);
        l_id_episode_n            := sys.diutil.bool_to_int(id_episode_nin);
        l_id_episode_origin_n     := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_prev_episode_n       := sys.diutil.bool_to_int(id_prev_episode_nin);
        l_dt_dg_last_update_n     := sys.diutil.bool_to_int(dt_dg_last_update_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
        l_notes_n                 := sys.diutil.bool_to_int(notes_nin);
        l_notes_technician_n      := sys.diutil.bool_to_int(notes_technician_nin);
        l_notes_patient_n         := sys.diutil.bool_to_int(notes_patient_nin);
        l_notes_cancel_n          := sys.diutil.bool_to_int(notes_cancel_nin);
        l_notes_scheduler_n       := sys.diutil.bool_to_int(notes_scheduler_nin);
        l_flg_relevant_n          := sys.diutil.bool_to_int(flg_relevant_nin);
    
        UPDATE exams_ea
           SET id_exam_req           = decode(l_id_exam_req_n, 0, id_exam_req_in, nvl(id_exam_req_in, id_exam_req)),
               id_exam_result        = decode(l_id_exam_result_n,
                                              0,
                                              id_exam_result_in,
                                              nvl(id_exam_result_in, id_exam_result)),
               id_exam               = decode(l_id_exam_n, 0, id_exam_in, nvl(id_exam_in, id_exam)),
               id_exam_group         = decode(l_id_exam_group_n,
                                              0,
                                              id_exam_group_in,
                                              nvl(id_exam_group_in, id_exam_group)),
               dt_req                = decode(l_dt_req_n, 0, dt_req_in, nvl(dt_req_in, dt_req)),
               dt_begin              = decode(l_dt_begin_n, 0, dt_begin_in, nvl(dt_begin_in, dt_begin)),
               dt_pend_req           = decode(l_dt_pend_req_n, 0, dt_pend_req_in, nvl(dt_pend_req_in, dt_pend_req)),
               dt_result             = decode(l_dt_result_n, 0, dt_result_in, nvl(dt_result_in, dt_result)),
               priority              = decode(l_priority_n, 0, priority_in, nvl(priority_in, priority)),
               status_str_req        = decode(l_status_str_req_n,
                                              0,
                                              status_str_req_in,
                                              nvl(status_str_req_in, status_str_req)),
               status_msg_req        = decode(l_status_msg_req_n,
                                              0,
                                              status_msg_req_in,
                                              nvl(status_msg_req_in, status_msg_req)),
               status_icon_req       = decode(l_status_icon_req_n,
                                              0,
                                              status_icon_req_in,
                                              nvl(status_icon_req_in, status_icon_req)),
               status_flg_req        = decode(l_status_flg_req_n,
                                              0,
                                              status_flg_req_in,
                                              nvl(status_flg_req_in, status_flg_req)),
               status_str            = decode(l_status_str_n, 0, status_str_in, nvl(status_str_in, status_str)),
               status_msg            = decode(l_status_msg_n, 0, status_msg_in, nvl(status_msg_in, status_msg)),
               status_icon           = decode(l_status_icon_n, 0, status_icon_in, nvl(status_icon_in, status_icon)),
               status_flg            = decode(l_status_flg_n, 0, status_flg_in, nvl(status_flg_in, status_flg)),
               flg_type              = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               id_exam_cat           = decode(l_id_exam_cat_n, 0, id_exam_cat_in, nvl(id_exam_cat_in, id_exam_cat)),
               flg_available         = decode(l_flg_available_n,
                                              0,
                                              flg_available_in,
                                              nvl(flg_available_in, flg_available)),
               flg_notes             = decode(l_flg_notes_n, 0, flg_notes_in, nvl(flg_notes_in, flg_notes)),
               flg_doc               = decode(l_flg_doc_n, 0, flg_doc_in, nvl(flg_doc_in, flg_doc)),
               flg_time              = decode(l_flg_time_n, 0, flg_time_in, nvl(flg_time_in, flg_time)),
               flg_status_req        = decode(l_flg_status_req_n,
                                              0,
                                              flg_status_req_in,
                                              nvl(flg_status_req_in, flg_status_req)),
               flg_status_det        = decode(l_flg_status_det_n,
                                              0,
                                              flg_status_det_in,
                                              nvl(flg_status_det_in, flg_status_det)),
               flg_referral          = decode(l_flg_referral_n, 0, flg_referral_in, nvl(flg_referral_in, flg_referral)),
               id_prof_req           = decode(l_id_prof_req_n, 0, id_prof_req_in, nvl(id_prof_req_in, id_prof_req)),
               id_prof_performed     = decode(l_id_prof_performed_n,
                                              0,
                                              id_prof_performed_in,
                                              nvl(id_prof_performed_in, id_prof_performed)),
               start_time            = decode(l_start_time_n, 0, start_time_in, nvl(start_time_in, start_time)),
               end_time              = decode(l_end_time_n, 0, end_time_in, nvl(end_time_in, end_time)),
               id_epis_doc_perform   = decode(l_id_epis_doc_perform_n,
                                              0,
                                              id_epis_doc_perform_in,
                                              nvl(id_epis_doc_perform_in, id_epis_doc_perform)),
               desc_perform_notes    = decode(l_desc_perform_notes_n,
                                              0,
                                              desc_perform_notes_in,
                                              nvl(desc_perform_notes_in, desc_perform_notes)),
               id_epis_doc_result    = decode(l_id_epis_doc_result_n,
                                              0,
                                              id_epis_doc_result_in,
                                              nvl(id_epis_doc_result_in, id_epis_doc_result)),
               desc_result           = decode(l_desc_result_n, 0, desc_result_in, nvl(desc_result_in, desc_result)),
               flg_status_result     = decode(l_flg_status_result_n,
                                              0,
                                              flg_status_result_in,
                                              nvl(flg_status_result_in, flg_status_result)),
               id_exam_codification  = decode(l_id_exam_codification_n,
                                              0,
                                              id_exam_codification_in,
                                              nvl(id_exam_codification_in, id_exam_codification)),
               id_room               = decode(l_id_room_n, 0, id_room_in, nvl(id_room_in, id_room)),
               id_movement           = decode(l_id_movement_n, 0, id_movement_in, nvl(id_movement_in, id_movement)),
               id_task_dependency    = decode(l_id_task_dependency_n,
                                              0,
                                              id_task_dependency_in,
                                              nvl(id_task_dependency_in, id_task_dependency)),
               flg_req_origin_module = decode(l_flg_req_origin_module_n,
                                              0,
                                              flg_req_origin_module_in,
                                              nvl(flg_req_origin_module_in, flg_req_origin_module)),
               id_patient            = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_visit              = decode(l_id_visit_n, 0, id_visit_in, nvl(id_visit_in, id_visit)),
               id_episode            = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_episode_origin     = decode(l_id_episode_origin_n,
                                              0,
                                              id_episode_origin_in,
                                              nvl(id_episode_origin_in, id_episode_origin)),
               id_prev_episode       = decode(l_id_prev_episode_n,
                                              0,
                                              id_prev_episode_in,
                                              nvl(id_prev_episode_in, id_prev_episode)),
               dt_dg_last_update     = nvl(dt_dg_last_update_in, current_timestamp),
               create_user           = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time           = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution    = decode(l_create_institution_n,
                                              0,
                                              create_institution_in,
                                              nvl(create_institution_in, create_institution)),
               update_user           = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time           = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution    = decode(l_update_institution_n,
                                              0,
                                              update_institution_in,
                                              nvl(update_institution_in, update_institution)),
               notes                 = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               notes_technician      = decode(l_notes_technician_n,
                                              0,
                                              notes_technician_in,
                                              nvl(notes_technician_in, notes_technician)),
               notes_patient         = decode(l_notes_patient_n,
                                              0,
                                              notes_patient_in,
                                              nvl(notes_patient_in, notes_patient)),
               notes_cancel          = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               notes_scheduler       = decode(l_notes_scheduler_n,
                                              0,
                                              notes_scheduler_in,
                                              nvl(notes_scheduler_in, notes_scheduler)),
               flg_relevant          = decode(l_flg_relevant_n, 0, flg_relevant_in, nvl(flg_relevant_in, flg_relevant))
         WHERE id_exam_req_det = id_exam_req_det_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EXAMS_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    IF l_name = 'EEA_ID_EPISODE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EEA_ID_EPISODE_ORIGIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'EEA_ID_EPIS_DOC_PERFORM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DOC_PERFORM',
                                                        value_in           => id_epis_doc_perform_in);
                    END IF;
                    IF l_name = 'EEA_ID_EPIS_DOC_RESULT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DOC_RESULT',
                                                        value_in           => id_epis_doc_result_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_CAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_CAT',
                                                        value_in           => id_exam_cat_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM',
                                                        value_in           => id_exam_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_GROUP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_GROUP',
                                                        value_in           => id_exam_group_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_REQ_DET_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_REQ_DET',
                                                        value_in           => id_exam_req_det_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_REQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_REQ',
                                                        value_in           => id_exam_req_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_RESULT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_RESULT',
                                                        value_in           => id_exam_result_in);
                    END IF;
                    IF l_name = 'EEA_ID_MOVEMENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MOVEMENT',
                                                        value_in           => id_movement_in);
                    END IF;
                    IF l_name = 'EEA_ID_PATIENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'EEA_ID_PREV_EPISODE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PREV_EPISODE',
                                                        value_in           => id_prev_episode_in);
                    END IF;
                    IF l_name = 'EEA_ID_PROF_PERFORMED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_PERFORMED',
                                                        value_in           => id_prof_performed_in);
                    END IF;
                    IF l_name = 'EEA_ID_PROF_REQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REQ',
                                                        value_in           => id_prof_req_in);
                    END IF;
                    IF l_name = 'EEA_ID_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'EEA_ID_VISIT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_exam_req_det_in        IN exams_ea.id_exam_req_det%TYPE,
        id_exam_req_in            IN exams_ea.id_exam_req%TYPE DEFAULT NULL,
        id_exam_req_nin           IN BOOLEAN := TRUE,
        id_exam_result_in         IN exams_ea.id_exam_result%TYPE DEFAULT NULL,
        id_exam_result_nin        IN BOOLEAN := TRUE,
        id_exam_in                IN exams_ea.id_exam%TYPE DEFAULT NULL,
        id_exam_nin               IN BOOLEAN := TRUE,
        id_exam_group_in          IN exams_ea.id_exam_group%TYPE DEFAULT NULL,
        id_exam_group_nin         IN BOOLEAN := TRUE,
        dt_req_in                 IN exams_ea.dt_req%TYPE DEFAULT NULL,
        dt_req_nin                IN BOOLEAN := TRUE,
        dt_begin_in               IN exams_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin              IN BOOLEAN := TRUE,
        dt_pend_req_in            IN exams_ea.dt_pend_req%TYPE DEFAULT NULL,
        dt_pend_req_nin           IN BOOLEAN := TRUE,
        dt_result_in              IN exams_ea.dt_result%TYPE DEFAULT NULL,
        dt_result_nin             IN BOOLEAN := TRUE,
        priority_in               IN exams_ea.priority%TYPE DEFAULT NULL,
        priority_nin              IN BOOLEAN := TRUE,
        status_str_req_in         IN exams_ea.status_str_req%TYPE DEFAULT NULL,
        status_str_req_nin        IN BOOLEAN := TRUE,
        status_msg_req_in         IN exams_ea.status_msg_req%TYPE DEFAULT NULL,
        status_msg_req_nin        IN BOOLEAN := TRUE,
        status_icon_req_in        IN exams_ea.status_icon_req%TYPE DEFAULT NULL,
        status_icon_req_nin       IN BOOLEAN := TRUE,
        status_flg_req_in         IN exams_ea.status_flg_req%TYPE DEFAULT NULL,
        status_flg_req_nin        IN BOOLEAN := TRUE,
        status_str_in             IN exams_ea.status_str%TYPE DEFAULT NULL,
        status_str_nin            IN BOOLEAN := TRUE,
        status_msg_in             IN exams_ea.status_msg%TYPE DEFAULT NULL,
        status_msg_nin            IN BOOLEAN := TRUE,
        status_icon_in            IN exams_ea.status_icon%TYPE DEFAULT NULL,
        status_icon_nin           IN BOOLEAN := TRUE,
        status_flg_in             IN exams_ea.status_flg%TYPE DEFAULT NULL,
        status_flg_nin            IN BOOLEAN := TRUE,
        flg_type_in               IN exams_ea.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        id_exam_cat_in            IN exams_ea.id_exam_cat%TYPE DEFAULT NULL,
        id_exam_cat_nin           IN BOOLEAN := TRUE,
        flg_available_in          IN exams_ea.flg_available%TYPE DEFAULT NULL,
        flg_available_nin         IN BOOLEAN := TRUE,
        flg_notes_in              IN exams_ea.flg_notes%TYPE DEFAULT NULL,
        flg_notes_nin             IN BOOLEAN := TRUE,
        flg_doc_in                IN exams_ea.flg_doc%TYPE DEFAULT NULL,
        flg_doc_nin               IN BOOLEAN := TRUE,
        flg_time_in               IN exams_ea.flg_time%TYPE DEFAULT NULL,
        flg_time_nin              IN BOOLEAN := TRUE,
        flg_status_req_in         IN exams_ea.flg_status_req%TYPE DEFAULT NULL,
        flg_status_req_nin        IN BOOLEAN := TRUE,
        flg_status_det_in         IN exams_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_status_det_nin        IN BOOLEAN := TRUE,
        flg_referral_in           IN exams_ea.flg_referral%TYPE DEFAULT NULL,
        flg_referral_nin          IN BOOLEAN := TRUE,
        id_prof_req_in            IN exams_ea.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin           IN BOOLEAN := TRUE,
        id_prof_performed_in      IN exams_ea.id_prof_performed%TYPE DEFAULT NULL,
        id_prof_performed_nin     IN BOOLEAN := TRUE,
        start_time_in             IN exams_ea.start_time%TYPE DEFAULT NULL,
        start_time_nin            IN BOOLEAN := TRUE,
        end_time_in               IN exams_ea.end_time%TYPE DEFAULT NULL,
        end_time_nin              IN BOOLEAN := TRUE,
        id_epis_doc_perform_in    IN exams_ea.id_epis_doc_perform%TYPE DEFAULT NULL,
        id_epis_doc_perform_nin   IN BOOLEAN := TRUE,
        desc_perform_notes_in     IN exams_ea.desc_perform_notes%TYPE DEFAULT NULL,
        desc_perform_notes_nin    IN BOOLEAN := TRUE,
        id_epis_doc_result_in     IN exams_ea.id_epis_doc_result%TYPE DEFAULT NULL,
        id_epis_doc_result_nin    IN BOOLEAN := TRUE,
        desc_result_in            IN exams_ea.desc_result%TYPE DEFAULT NULL,
        desc_result_nin           IN BOOLEAN := TRUE,
        flg_status_result_in      IN exams_ea.flg_status_result%TYPE DEFAULT NULL,
        flg_status_result_nin     IN BOOLEAN := TRUE,
        id_exam_codification_in   IN exams_ea.id_exam_codification%TYPE DEFAULT NULL,
        id_exam_codification_nin  IN BOOLEAN := TRUE,
        id_room_in                IN exams_ea.id_room%TYPE DEFAULT NULL,
        id_room_nin               IN BOOLEAN := TRUE,
        id_movement_in            IN exams_ea.id_movement%TYPE DEFAULT NULL,
        id_movement_nin           IN BOOLEAN := TRUE,
        id_task_dependency_in     IN exams_ea.id_task_dependency%TYPE DEFAULT NULL,
        id_task_dependency_nin    IN BOOLEAN := TRUE,
        flg_req_origin_module_in  IN exams_ea.flg_req_origin_module%TYPE DEFAULT NULL,
        flg_req_origin_module_nin IN BOOLEAN := TRUE,
        id_patient_in             IN exams_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_visit_in               IN exams_ea.id_visit%TYPE DEFAULT NULL,
        id_visit_nin              IN BOOLEAN := TRUE,
        id_episode_in             IN exams_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_episode_origin_in      IN exams_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin     IN BOOLEAN := TRUE,
        id_prev_episode_in        IN exams_ea.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin       IN BOOLEAN := TRUE,
        dt_dg_last_update_in      IN exams_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin     IN BOOLEAN := TRUE,
        create_user_in            IN exams_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN exams_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN exams_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN exams_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN exams_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN exams_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        notes_in                  IN exams_ea.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        notes_technician_in       IN exams_ea.notes_technician%TYPE DEFAULT NULL,
        notes_technician_nin      IN BOOLEAN := TRUE,
        notes_patient_in          IN exams_ea.notes_patient%TYPE DEFAULT NULL,
        notes_patient_nin         IN BOOLEAN := TRUE,
        notes_cancel_in           IN exams_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        notes_scheduler_in        IN exams_ea.notes_scheduler%TYPE DEFAULT NULL,
        notes_scheduler_nin       IN BOOLEAN := TRUE,
        flg_relevant_in           IN exams_ea.flg_relevant%TYPE DEFAULT NULL,
        flg_relevant_nin          IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_exam_req_det_in        => id_exam_req_det_in,
            id_exam_req_in            => id_exam_req_in,
            id_exam_req_nin           => id_exam_req_nin,
            id_exam_result_in         => id_exam_result_in,
            id_exam_result_nin        => id_exam_result_nin,
            id_exam_in                => id_exam_in,
            id_exam_nin               => id_exam_nin,
            id_exam_group_in          => id_exam_group_in,
            id_exam_group_nin         => id_exam_group_nin,
            dt_req_in                 => dt_req_in,
            dt_req_nin                => dt_req_nin,
            dt_begin_in               => dt_begin_in,
            dt_begin_nin              => dt_begin_nin,
            dt_pend_req_in            => dt_pend_req_in,
            dt_pend_req_nin           => dt_pend_req_nin,
            dt_result_in              => dt_result_in,
            dt_result_nin             => dt_result_nin,
            priority_in               => priority_in,
            priority_nin              => priority_nin,
            status_str_req_in         => status_str_req_in,
            status_str_req_nin        => status_str_req_nin,
            status_msg_req_in         => status_msg_req_in,
            status_msg_req_nin        => status_msg_req_nin,
            status_icon_req_in        => status_icon_req_in,
            status_icon_req_nin       => status_icon_req_nin,
            status_flg_req_in         => status_flg_req_in,
            status_flg_req_nin        => status_flg_req_nin,
            status_str_in             => status_str_in,
            status_str_nin            => status_str_nin,
            status_msg_in             => status_msg_in,
            status_msg_nin            => status_msg_nin,
            status_icon_in            => status_icon_in,
            status_icon_nin           => status_icon_nin,
            status_flg_in             => status_flg_in,
            status_flg_nin            => status_flg_nin,
            flg_type_in               => flg_type_in,
            flg_type_nin              => flg_type_nin,
            id_exam_cat_in            => id_exam_cat_in,
            id_exam_cat_nin           => id_exam_cat_nin,
            flg_available_in          => flg_available_in,
            flg_available_nin         => flg_available_nin,
            flg_notes_in              => flg_notes_in,
            flg_notes_nin             => flg_notes_nin,
            flg_doc_in                => flg_doc_in,
            flg_doc_nin               => flg_doc_nin,
            flg_time_in               => flg_time_in,
            flg_time_nin              => flg_time_nin,
            flg_status_req_in         => flg_status_req_in,
            flg_status_req_nin        => flg_status_req_nin,
            flg_status_det_in         => flg_status_det_in,
            flg_status_det_nin        => flg_status_det_nin,
            flg_referral_in           => flg_referral_in,
            flg_referral_nin          => flg_referral_nin,
            id_prof_req_in            => id_prof_req_in,
            id_prof_req_nin           => id_prof_req_nin,
            id_prof_performed_in      => id_prof_performed_in,
            id_prof_performed_nin     => id_prof_performed_nin,
            start_time_in             => start_time_in,
            start_time_nin            => start_time_nin,
            end_time_in               => end_time_in,
            end_time_nin              => end_time_nin,
            id_epis_doc_perform_in    => id_epis_doc_perform_in,
            id_epis_doc_perform_nin   => id_epis_doc_perform_nin,
            desc_perform_notes_in     => desc_perform_notes_in,
            desc_perform_notes_nin    => desc_perform_notes_nin,
            id_epis_doc_result_in     => id_epis_doc_result_in,
            id_epis_doc_result_nin    => id_epis_doc_result_nin,
            desc_result_in            => desc_result_in,
            desc_result_nin           => desc_result_nin,
            flg_status_result_in      => flg_status_result_in,
            flg_status_result_nin     => flg_status_result_nin,
            id_exam_codification_in   => id_exam_codification_in,
            id_exam_codification_nin  => id_exam_codification_nin,
            id_room_in                => id_room_in,
            id_room_nin               => id_room_nin,
            id_movement_in            => id_movement_in,
            id_movement_nin           => id_movement_nin,
            id_task_dependency_in     => id_task_dependency_in,
            id_task_dependency_nin    => id_task_dependency_nin,
            flg_req_origin_module_in  => flg_req_origin_module_in,
            flg_req_origin_module_nin => flg_req_origin_module_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            id_visit_in               => id_visit_in,
            id_visit_nin              => id_visit_nin,
            id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_origin_nin     => id_episode_origin_nin,
            id_prev_episode_in        => id_prev_episode_in,
            id_prev_episode_nin       => id_prev_episode_nin,
            dt_dg_last_update_in      => dt_dg_last_update_in,
            dt_dg_last_update_nin     => dt_dg_last_update_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            notes_in                  => notes_in,
            notes_nin                 => notes_nin,
            notes_technician_in       => notes_technician_in,
            notes_technician_nin      => notes_technician_nin,
            notes_patient_in          => notes_patient_in,
            notes_patient_nin         => notes_patient_nin,
            notes_cancel_in           => notes_cancel_in,
            notes_cancel_nin          => notes_cancel_nin,
            notes_scheduler_in        => notes_scheduler_in,
            notes_scheduler_nin       => notes_scheduler_nin,
            flg_relevant_in           => flg_relevant_in,
            flg_relevant_nin          => flg_relevant_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_exam_req_in            IN exams_ea.id_exam_req%TYPE DEFAULT NULL,
        id_exam_req_nin           IN BOOLEAN := TRUE,
        id_exam_result_in         IN exams_ea.id_exam_result%TYPE DEFAULT NULL,
        id_exam_result_nin        IN BOOLEAN := TRUE,
        id_exam_in                IN exams_ea.id_exam%TYPE DEFAULT NULL,
        id_exam_nin               IN BOOLEAN := TRUE,
        id_exam_group_in          IN exams_ea.id_exam_group%TYPE DEFAULT NULL,
        id_exam_group_nin         IN BOOLEAN := TRUE,
        dt_req_in                 IN exams_ea.dt_req%TYPE DEFAULT NULL,
        dt_req_nin                IN BOOLEAN := TRUE,
        dt_begin_in               IN exams_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin              IN BOOLEAN := TRUE,
        dt_pend_req_in            IN exams_ea.dt_pend_req%TYPE DEFAULT NULL,
        dt_pend_req_nin           IN BOOLEAN := TRUE,
        dt_result_in              IN exams_ea.dt_result%TYPE DEFAULT NULL,
        dt_result_nin             IN BOOLEAN := TRUE,
        priority_in               IN exams_ea.priority%TYPE DEFAULT NULL,
        priority_nin              IN BOOLEAN := TRUE,
        status_str_req_in         IN exams_ea.status_str_req%TYPE DEFAULT NULL,
        status_str_req_nin        IN BOOLEAN := TRUE,
        status_msg_req_in         IN exams_ea.status_msg_req%TYPE DEFAULT NULL,
        status_msg_req_nin        IN BOOLEAN := TRUE,
        status_icon_req_in        IN exams_ea.status_icon_req%TYPE DEFAULT NULL,
        status_icon_req_nin       IN BOOLEAN := TRUE,
        status_flg_req_in         IN exams_ea.status_flg_req%TYPE DEFAULT NULL,
        status_flg_req_nin        IN BOOLEAN := TRUE,
        status_str_in             IN exams_ea.status_str%TYPE DEFAULT NULL,
        status_str_nin            IN BOOLEAN := TRUE,
        status_msg_in             IN exams_ea.status_msg%TYPE DEFAULT NULL,
        status_msg_nin            IN BOOLEAN := TRUE,
        status_icon_in            IN exams_ea.status_icon%TYPE DEFAULT NULL,
        status_icon_nin           IN BOOLEAN := TRUE,
        status_flg_in             IN exams_ea.status_flg%TYPE DEFAULT NULL,
        status_flg_nin            IN BOOLEAN := TRUE,
        flg_type_in               IN exams_ea.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        id_exam_cat_in            IN exams_ea.id_exam_cat%TYPE DEFAULT NULL,
        id_exam_cat_nin           IN BOOLEAN := TRUE,
        flg_available_in          IN exams_ea.flg_available%TYPE DEFAULT NULL,
        flg_available_nin         IN BOOLEAN := TRUE,
        flg_notes_in              IN exams_ea.flg_notes%TYPE DEFAULT NULL,
        flg_notes_nin             IN BOOLEAN := TRUE,
        flg_doc_in                IN exams_ea.flg_doc%TYPE DEFAULT NULL,
        flg_doc_nin               IN BOOLEAN := TRUE,
        flg_time_in               IN exams_ea.flg_time%TYPE DEFAULT NULL,
        flg_time_nin              IN BOOLEAN := TRUE,
        flg_status_req_in         IN exams_ea.flg_status_req%TYPE DEFAULT NULL,
        flg_status_req_nin        IN BOOLEAN := TRUE,
        flg_status_det_in         IN exams_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_status_det_nin        IN BOOLEAN := TRUE,
        flg_referral_in           IN exams_ea.flg_referral%TYPE DEFAULT NULL,
        flg_referral_nin          IN BOOLEAN := TRUE,
        id_prof_req_in            IN exams_ea.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin           IN BOOLEAN := TRUE,
        id_prof_performed_in      IN exams_ea.id_prof_performed%TYPE DEFAULT NULL,
        id_prof_performed_nin     IN BOOLEAN := TRUE,
        start_time_in             IN exams_ea.start_time%TYPE DEFAULT NULL,
        start_time_nin            IN BOOLEAN := TRUE,
        end_time_in               IN exams_ea.end_time%TYPE DEFAULT NULL,
        end_time_nin              IN BOOLEAN := TRUE,
        id_epis_doc_perform_in    IN exams_ea.id_epis_doc_perform%TYPE DEFAULT NULL,
        id_epis_doc_perform_nin   IN BOOLEAN := TRUE,
        desc_perform_notes_in     IN exams_ea.desc_perform_notes%TYPE DEFAULT NULL,
        desc_perform_notes_nin    IN BOOLEAN := TRUE,
        id_epis_doc_result_in     IN exams_ea.id_epis_doc_result%TYPE DEFAULT NULL,
        id_epis_doc_result_nin    IN BOOLEAN := TRUE,
        desc_result_in            IN exams_ea.desc_result%TYPE DEFAULT NULL,
        desc_result_nin           IN BOOLEAN := TRUE,
        flg_status_result_in      IN exams_ea.flg_status_result%TYPE DEFAULT NULL,
        flg_status_result_nin     IN BOOLEAN := TRUE,
        id_exam_codification_in   IN exams_ea.id_exam_codification%TYPE DEFAULT NULL,
        id_exam_codification_nin  IN BOOLEAN := TRUE,
        id_room_in                IN exams_ea.id_room%TYPE DEFAULT NULL,
        id_room_nin               IN BOOLEAN := TRUE,
        id_movement_in            IN exams_ea.id_movement%TYPE DEFAULT NULL,
        id_movement_nin           IN BOOLEAN := TRUE,
        id_task_dependency_in     IN exams_ea.id_task_dependency%TYPE DEFAULT NULL,
        id_task_dependency_nin    IN BOOLEAN := TRUE,
        flg_req_origin_module_in  IN exams_ea.flg_req_origin_module%TYPE DEFAULT NULL,
        flg_req_origin_module_nin IN BOOLEAN := TRUE,
        id_patient_in             IN exams_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_visit_in               IN exams_ea.id_visit%TYPE DEFAULT NULL,
        id_visit_nin              IN BOOLEAN := TRUE,
        id_episode_in             IN exams_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_episode_origin_in      IN exams_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin     IN BOOLEAN := TRUE,
        id_prev_episode_in        IN exams_ea.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin       IN BOOLEAN := TRUE,
        dt_dg_last_update_in      IN exams_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin     IN BOOLEAN := TRUE,
        create_user_in            IN exams_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN exams_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN exams_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN exams_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN exams_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN exams_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        notes_in                  IN exams_ea.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        notes_technician_in       IN exams_ea.notes_technician%TYPE DEFAULT NULL,
        notes_technician_nin      IN BOOLEAN := TRUE,
        notes_patient_in          IN exams_ea.notes_patient%TYPE DEFAULT NULL,
        notes_patient_nin         IN BOOLEAN := TRUE,
        notes_cancel_in           IN exams_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        notes_scheduler_in        IN exams_ea.notes_scheduler%TYPE DEFAULT NULL,
        notes_scheduler_nin       IN BOOLEAN := TRUE,
        flg_relevant_in           IN exams_ea.flg_relevant%TYPE DEFAULT NULL,
        flg_relevant_nin          IN BOOLEAN := TRUE,
        where_in                  VARCHAR2,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_exam_req_n           NUMBER(1);
        l_id_exam_result_n        NUMBER(1);
        l_id_exam_n               NUMBER(1);
        l_id_exam_group_n         NUMBER(1);
        l_dt_req_n                NUMBER(1);
        l_dt_begin_n              NUMBER(1);
        l_dt_pend_req_n           NUMBER(1);
        l_dt_result_n             NUMBER(1);
        l_priority_n              NUMBER(1);
        l_status_str_req_n        NUMBER(1);
        l_status_msg_req_n        NUMBER(1);
        l_status_icon_req_n       NUMBER(1);
        l_status_flg_req_n        NUMBER(1);
        l_status_str_n            NUMBER(1);
        l_status_msg_n            NUMBER(1);
        l_status_icon_n           NUMBER(1);
        l_status_flg_n            NUMBER(1);
        l_flg_type_n              NUMBER(1);
        l_id_exam_cat_n           NUMBER(1);
        l_flg_available_n         NUMBER(1);
        l_flg_notes_n             NUMBER(1);
        l_flg_doc_n               NUMBER(1);
        l_flg_time_n              NUMBER(1);
        l_flg_status_req_n        NUMBER(1);
        l_flg_status_det_n        NUMBER(1);
        l_flg_referral_n          NUMBER(1);
        l_id_prof_req_n           NUMBER(1);
        l_id_prof_performed_n     NUMBER(1);
        l_start_time_n            NUMBER(1);
        l_end_time_n              NUMBER(1);
        l_id_epis_doc_perform_n   NUMBER(1);
        l_desc_perform_notes_n    NUMBER(1);
        l_id_epis_doc_result_n    NUMBER(1);
        l_desc_result_n           NUMBER(1);
        l_flg_status_result_n     NUMBER(1);
        l_id_exam_codification_n  NUMBER(1);
        l_id_room_n               NUMBER(1);
        l_id_movement_n           NUMBER(1);
        l_id_task_dependency_n    NUMBER(1);
        l_flg_req_origin_module_n NUMBER(1);
        l_id_patient_n            NUMBER(1);
        l_id_visit_n              NUMBER(1);
        l_id_episode_n            NUMBER(1);
        l_id_episode_origin_n     NUMBER(1);
        l_id_prev_episode_n       NUMBER(1);
        l_dt_dg_last_update_n     NUMBER(1);
        l_create_user_n           NUMBER(1);
        l_create_time_n           NUMBER(1);
        l_create_institution_n    NUMBER(1);
        l_update_user_n           NUMBER(1);
        l_update_time_n           NUMBER(1);
        l_update_institution_n    NUMBER(1);
        l_notes_n                 NUMBER(1);
        l_notes_technician_n      NUMBER(1);
        l_notes_patient_n         NUMBER(1);
        l_notes_cancel_n          NUMBER(1);
        l_notes_scheduler_n       NUMBER(1);
        l_flg_relevant_n          NUMBER(1);
        id_exam_req_det_in        exams_ea.id_exam_req_det%TYPE;
    BEGIN
    
        l_id_exam_req_n           := sys.diutil.bool_to_int(id_exam_req_nin);
        l_id_exam_result_n        := sys.diutil.bool_to_int(id_exam_result_nin);
        l_id_exam_n               := sys.diutil.bool_to_int(id_exam_nin);
        l_id_exam_group_n         := sys.diutil.bool_to_int(id_exam_group_nin);
        l_dt_req_n                := sys.diutil.bool_to_int(dt_req_nin);
        l_dt_begin_n              := sys.diutil.bool_to_int(dt_begin_nin);
        l_dt_pend_req_n           := sys.diutil.bool_to_int(dt_pend_req_nin);
        l_dt_result_n             := sys.diutil.bool_to_int(dt_result_nin);
        l_priority_n              := sys.diutil.bool_to_int(priority_nin);
        l_status_str_req_n        := sys.diutil.bool_to_int(status_str_req_nin);
        l_status_msg_req_n        := sys.diutil.bool_to_int(status_msg_req_nin);
        l_status_icon_req_n       := sys.diutil.bool_to_int(status_icon_req_nin);
        l_status_flg_req_n        := sys.diutil.bool_to_int(status_flg_req_nin);
        l_status_str_n            := sys.diutil.bool_to_int(status_str_nin);
        l_status_msg_n            := sys.diutil.bool_to_int(status_msg_nin);
        l_status_icon_n           := sys.diutil.bool_to_int(status_icon_nin);
        l_status_flg_n            := sys.diutil.bool_to_int(status_flg_nin);
        l_flg_type_n              := sys.diutil.bool_to_int(flg_type_nin);
        l_id_exam_cat_n           := sys.diutil.bool_to_int(id_exam_cat_nin);
        l_flg_available_n         := sys.diutil.bool_to_int(flg_available_nin);
        l_flg_notes_n             := sys.diutil.bool_to_int(flg_notes_nin);
        l_flg_doc_n               := sys.diutil.bool_to_int(flg_doc_nin);
        l_flg_time_n              := sys.diutil.bool_to_int(flg_time_nin);
        l_flg_status_req_n        := sys.diutil.bool_to_int(flg_status_req_nin);
        l_flg_status_det_n        := sys.diutil.bool_to_int(flg_status_det_nin);
        l_flg_referral_n          := sys.diutil.bool_to_int(flg_referral_nin);
        l_id_prof_req_n           := sys.diutil.bool_to_int(id_prof_req_nin);
        l_id_prof_performed_n     := sys.diutil.bool_to_int(id_prof_performed_nin);
        l_start_time_n            := sys.diutil.bool_to_int(start_time_nin);
        l_end_time_n              := sys.diutil.bool_to_int(end_time_nin);
        l_id_epis_doc_perform_n   := sys.diutil.bool_to_int(id_epis_doc_perform_nin);
        l_desc_perform_notes_n    := sys.diutil.bool_to_int(desc_perform_notes_nin);
        l_id_epis_doc_result_n    := sys.diutil.bool_to_int(id_epis_doc_result_nin);
        l_desc_result_n           := sys.diutil.bool_to_int(desc_result_nin);
        l_flg_status_result_n     := sys.diutil.bool_to_int(flg_status_result_nin);
        l_id_exam_codification_n  := sys.diutil.bool_to_int(id_exam_codification_nin);
        l_id_room_n               := sys.diutil.bool_to_int(id_room_nin);
        l_id_movement_n           := sys.diutil.bool_to_int(id_movement_nin);
        l_id_task_dependency_n    := sys.diutil.bool_to_int(id_task_dependency_nin);
        l_flg_req_origin_module_n := sys.diutil.bool_to_int(flg_req_origin_module_nin);
        l_id_patient_n            := sys.diutil.bool_to_int(id_patient_nin);
        l_id_visit_n              := sys.diutil.bool_to_int(id_visit_nin);
        l_id_episode_n            := sys.diutil.bool_to_int(id_episode_nin);
        l_id_episode_origin_n     := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_prev_episode_n       := sys.diutil.bool_to_int(id_prev_episode_nin);
        l_dt_dg_last_update_n     := sys.diutil.bool_to_int(dt_dg_last_update_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
        l_notes_n                 := sys.diutil.bool_to_int(notes_nin);
        l_notes_technician_n      := sys.diutil.bool_to_int(notes_technician_nin);
        l_notes_patient_n         := sys.diutil.bool_to_int(notes_patient_nin);
        l_notes_cancel_n          := sys.diutil.bool_to_int(notes_cancel_nin);
        l_notes_scheduler_n       := sys.diutil.bool_to_int(notes_scheduler_nin);
        l_flg_relevant_n          := sys.diutil.bool_to_int(flg_relevant_nin);
    
        l_sql := 'UPDATE EXAMS_EA SET ' || ' ID_EXAM_REQ = decode (' || l_id_exam_req_n ||
                 ',0,:id_exam_req_in, NVL (:id_exam_req_in, ID_EXAM_REQ)) ' || ',' || ' ID_EXAM_RESULT = decode (' ||
                 l_id_exam_result_n || ',0,:id_exam_result_in, NVL (:id_exam_result_in, ID_EXAM_RESULT)) ' || ',' ||
                 ' ID_EXAM = decode (' || l_id_exam_n || ',0,:id_exam_in, NVL (:id_exam_in, ID_EXAM)) ' || ',' ||
                 ' ID_EXAM_GROUP = decode (' || l_id_exam_group_n ||
                 ',0,:id_exam_group_in, NVL (:id_exam_group_in, ID_EXAM_GROUP)) ' || ',' || ' DT_REQ = decode (' ||
                 l_dt_req_n || ',0,:dt_req_in, NVL (:dt_req_in, DT_REQ)) ' || ',' || ' DT_BEGIN = decode (' ||
                 l_dt_begin_n || ',0,:dt_begin_in, NVL (:dt_begin_in, DT_BEGIN)) ' || ',' || ' DT_PEND_REQ = decode (' ||
                 l_dt_pend_req_n || ',0,:dt_pend_req_in, NVL (:dt_pend_req_in, DT_PEND_REQ)) ' || ',' ||
                 ' DT_RESULT = decode (' || l_dt_result_n || ',0,:dt_result_in, NVL (:dt_result_in, DT_RESULT)) ' || ',' ||
                 ' PRIORITY = decode (' || l_priority_n || ',0,:priority_in, NVL (:priority_in, PRIORITY)) ' || ',' ||
                 ' STATUS_STR_REQ = decode (' || l_status_str_req_n ||
                 ',0,:status_str_req_in, NVL (:status_str_req_in, STATUS_STR_REQ)) ' || ',' ||
                 ' STATUS_MSG_REQ = decode (' || l_status_msg_req_n ||
                 ',0,:status_msg_req_in, NVL (:status_msg_req_in, STATUS_MSG_REQ)) ' || ',' ||
                 ' STATUS_ICON_REQ = decode (' || l_status_icon_req_n ||
                 ',0,:status_icon_req_in, NVL (:status_icon_req_in, STATUS_ICON_REQ)) ' || ',' ||
                 ' STATUS_FLG_REQ = decode (' || l_status_flg_req_n ||
                 ',0,:status_flg_req_in, NVL (:status_flg_req_in, STATUS_FLG_REQ)) ' || ',' || ' STATUS_STR = decode (' ||
                 l_status_str_n || ',0,:status_str_in, NVL (:status_str_in, STATUS_STR)) ' || ',' ||
                 ' STATUS_MSG = decode (' || l_status_msg_n || ',0,:status_msg_in, NVL (:status_msg_in, STATUS_MSG)) ' || ',' ||
                 ' STATUS_ICON = decode (' || l_status_icon_n ||
                 ',0,:status_icon_in, NVL (:status_icon_in, STATUS_ICON)) ' || ',' || ' STATUS_FLG = decode (' ||
                 l_status_flg_n || ',0,:status_flg_in, NVL (:status_flg_in, STATUS_FLG)) ' || ',' ||
                 ' FLG_TYPE = decode (' || l_flg_type_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' ||
                 ' ID_EXAM_CAT = decode (' || l_id_exam_cat_n ||
                 ',0,:id_exam_cat_in, NVL (:id_exam_cat_in, ID_EXAM_CAT)) ' || ',' || ' FLG_AVAILABLE = decode (' ||
                 l_flg_available_n || ',0,:flg_available_in, NVL (:flg_available_in, FLG_AVAILABLE)) ' || ',' ||
                 ' FLG_NOTES = decode (' || l_flg_notes_n || ',0,:flg_notes_in, NVL (:flg_notes_in, FLG_NOTES)) ' || ',' ||
                 ' FLG_DOC = decode (' || l_flg_doc_n || ',0,:flg_doc_in, NVL (:flg_doc_in, FLG_DOC)) ' || ',' ||
                 ' FLG_TIME = decode (' || l_flg_time_n || ',0,:flg_time_in, NVL (:flg_time_in, FLG_TIME)) ' || ',' ||
                 ' FLG_STATUS_REQ = decode (' || l_flg_status_req_n ||
                 ',0,:flg_status_req_in, NVL (:flg_status_req_in, FLG_STATUS_REQ)) ' || ',' ||
                 ' FLG_STATUS_DET = decode (' || l_flg_status_det_n ||
                 ',0,:flg_status_det_in, NVL (:flg_status_det_in, FLG_STATUS_DET)) ' || ',' ||
                 ' FLG_REFERRAL = decode (' || l_flg_referral_n ||
                 ',0,:flg_referral_in, NVL (:flg_referral_in, FLG_REFERRAL)) ' || ',' || ' ID_PROF_REQ = decode (' ||
                 l_id_prof_req_n || ',0,:id_prof_req_in, NVL (:id_prof_req_in, ID_PROF_REQ)) ' || ',' ||
                 ' ID_PROF_PERFORMED = decode (' || l_id_prof_performed_n ||
                 ',0,:id_prof_performed_in, NVL (:id_prof_performed_in, ID_PROF_PERFORMED)) ' || ',' ||
                 ' START_TIME = decode (' || l_start_time_n || ',0,:start_time_in, NVL (:start_time_in, START_TIME)) ' || ',' ||
                 ' END_TIME = decode (' || l_end_time_n || ',0,:end_time_in, NVL (:end_time_in, END_TIME)) ' || ',' ||
                 ' ID_EPIS_DOC_PERFORM = decode (' || l_id_epis_doc_perform_n ||
                 ',0,:id_epis_doc_perform_in, NVL (:id_epis_doc_perform_in, ID_EPIS_DOC_PERFORM)) ' || ',' ||
                 ' DESC_PERFORM_NOTES = decode (' || l_desc_perform_notes_n ||
                 ',0,:desc_perform_notes_in, NVL (:desc_perform_notes_in, DESC_PERFORM_NOTES)) ' || ',' ||
                 ' ID_EPIS_DOC_RESULT = decode (' || l_id_epis_doc_result_n ||
                 ',0,:id_epis_doc_result_in, NVL (:id_epis_doc_result_in, ID_EPIS_DOC_RESULT)) ' || ',' ||
                 ' DESC_RESULT = decode (' || l_desc_result_n ||
                 ',0,:desc_result_in, NVL (:desc_result_in, DESC_RESULT)) ' || ',' || ' FLG_STATUS_RESULT = decode (' ||
                 l_flg_status_result_n || ',0,:flg_status_result_in, NVL (:flg_status_result_in, FLG_STATUS_RESULT)) ' || ',' ||
                 ' ID_EXAM_CODIFICATION = decode (' || l_id_exam_codification_n ||
                 ',0,:id_exam_codification_in, NVL (:id_exam_codification_in, ID_EXAM_CODIFICATION)) ' || ',' ||
                 ' ID_ROOM = decode (' || l_id_room_n || ',0,:id_room_in, NVL (:id_room_in, ID_ROOM)) ' || ',' ||
                 ' ID_MOVEMENT = decode (' || l_id_movement_n ||
                 ',0,:id_movement_in, NVL (:id_movement_in, ID_MOVEMENT)) ' || ',' || ' ID_TASK_DEPENDENCY = decode (' ||
                 l_id_task_dependency_n ||
                 ',0,:id_task_dependency_in, NVL (:id_task_dependency_in, ID_TASK_DEPENDENCY)) ' || ',' ||
                 ' FLG_REQ_ORIGIN_MODULE = decode (' || l_flg_req_origin_module_n ||
                 ',0,:flg_req_origin_module_in, NVL (:flg_req_origin_module_in, FLG_REQ_ORIGIN_MODULE)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_VISIT = decode (' || l_id_visit_n || ',0,:id_visit_in, NVL (:id_visit_in, ID_VISIT)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_EPISODE_ORIGIN = decode (' || l_id_episode_origin_n ||
                 ',0,:id_episode_origin_in, NVL (:id_episode_origin_in, ID_EPISODE_ORIGIN)) ' || ',' ||
                 ' ID_PREV_EPISODE = decode (' || l_id_prev_episode_n ||
                 ',0,:id_prev_episode_in, NVL (:id_prev_episode_in, ID_PREV_EPISODE)) ' || ',' ||
                 ' DT_DG_LAST_UPDATE = nvl(:dt_dg_last_update_in,current_timestamp) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' NOTES_TECHNICIAN = decode (' || l_notes_technician_n ||
                 ',0,:notes_technician_in, NVL (:notes_technician_in, NOTES_TECHNICIAN)) ' || ',' ||
                 ' NOTES_PATIENT = decode (' || l_notes_patient_n ||
                 ',0,:notes_patient_in, NVL (:notes_patient_in, NOTES_PATIENT)) ' || ',' || ' NOTES_CANCEL = decode (' ||
                 l_notes_cancel_n || ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' ||
                 ' NOTES_SCHEDULER = decode (' || l_notes_scheduler_n ||
                 ',0,:notes_scheduler_in, NVL (:notes_scheduler_in, NOTES_SCHEDULER)) ' || ',' ||
                 ' FLG_RELEVANT = decode (' || l_flg_relevant_n ||
                 ',0,:flg_relevant_in, NVL (:flg_relevant_in, FLG_RELEVANT)) ' || ' where ' || nvl(where_in, '(1=1)') ||
                 ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_exam_req_in, id_exam_result_in, id_exam_in, id_exam_group_in, dt_req_in, dt_begin_in, dt_pend_req_in, dt_result_in, priority_in, status_str_req_in, status_msg_req_in, status_icon_req_in, status_flg_req_in, status_str_in, status_msg_in, status_icon_in, status_flg_in, flg_type_in, id_exam_cat_in, flg_available_in, flg_notes_in, flg_doc_in, flg_time_in, flg_status_req_in, flg_status_det_in, flg_referral_in, id_prof_req_in, id_prof_performed_in, start_time_in, end_time_in, id_epis_doc_perform_in, desc_perform_notes_in, id_epis_doc_result_in, desc_result_in, flg_status_result_in, id_exam_codification_in, id_room_in, id_movement_in, id_task_dependency_in, flg_req_origin_module_in, id_patient_in, id_visit_in, id_episode_in, id_episode_origin_in, id_prev_episode_in, dt_dg_last_update_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, notes_in, notes_technician_in, notes_patient_in, notes_cancel_in, notes_scheduler_in, flg_relevant_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EXAMS_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    IF l_name = 'EEA_ID_EPISODE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EEA_ID_EPISODE_ORIGIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'EEA_ID_EPIS_DOC_PERFORM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DOC_PERFORM',
                                                        value_in           => id_epis_doc_perform_in);
                    END IF;
                    IF l_name = 'EEA_ID_EPIS_DOC_RESULT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DOC_RESULT',
                                                        value_in           => id_epis_doc_result_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_CAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_CAT',
                                                        value_in           => id_exam_cat_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM',
                                                        value_in           => id_exam_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_GROUP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_GROUP',
                                                        value_in           => id_exam_group_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_REQ_DET_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_REQ_DET',
                                                        value_in           => id_exam_req_det_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_REQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_REQ',
                                                        value_in           => id_exam_req_in);
                    END IF;
                    IF l_name = 'EEA_ID_EXAM_RESULT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_RESULT',
                                                        value_in           => id_exam_result_in);
                    END IF;
                    IF l_name = 'EEA_ID_MOVEMENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MOVEMENT',
                                                        value_in           => id_movement_in);
                    END IF;
                    IF l_name = 'EEA_ID_PATIENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'EEA_ID_PREV_EPISODE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PREV_EPISODE',
                                                        value_in           => id_prev_episode_in);
                    END IF;
                    IF l_name = 'EEA_ID_PROF_PERFORMED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_PERFORMED',
                                                        value_in           => id_prof_performed_in);
                    END IF;
                    IF l_name = 'EEA_ID_PROF_REQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REQ',
                                                        value_in           => id_prof_req_in);
                    END IF;
                    IF l_name = 'EEA_ID_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'EEA_ID_VISIT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_exam_req_in            IN exams_ea.id_exam_req%TYPE DEFAULT NULL,
        id_exam_req_nin           IN BOOLEAN := TRUE,
        id_exam_result_in         IN exams_ea.id_exam_result%TYPE DEFAULT NULL,
        id_exam_result_nin        IN BOOLEAN := TRUE,
        id_exam_in                IN exams_ea.id_exam%TYPE DEFAULT NULL,
        id_exam_nin               IN BOOLEAN := TRUE,
        id_exam_group_in          IN exams_ea.id_exam_group%TYPE DEFAULT NULL,
        id_exam_group_nin         IN BOOLEAN := TRUE,
        dt_req_in                 IN exams_ea.dt_req%TYPE DEFAULT NULL,
        dt_req_nin                IN BOOLEAN := TRUE,
        dt_begin_in               IN exams_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin              IN BOOLEAN := TRUE,
        dt_pend_req_in            IN exams_ea.dt_pend_req%TYPE DEFAULT NULL,
        dt_pend_req_nin           IN BOOLEAN := TRUE,
        dt_result_in              IN exams_ea.dt_result%TYPE DEFAULT NULL,
        dt_result_nin             IN BOOLEAN := TRUE,
        priority_in               IN exams_ea.priority%TYPE DEFAULT NULL,
        priority_nin              IN BOOLEAN := TRUE,
        status_str_req_in         IN exams_ea.status_str_req%TYPE DEFAULT NULL,
        status_str_req_nin        IN BOOLEAN := TRUE,
        status_msg_req_in         IN exams_ea.status_msg_req%TYPE DEFAULT NULL,
        status_msg_req_nin        IN BOOLEAN := TRUE,
        status_icon_req_in        IN exams_ea.status_icon_req%TYPE DEFAULT NULL,
        status_icon_req_nin       IN BOOLEAN := TRUE,
        status_flg_req_in         IN exams_ea.status_flg_req%TYPE DEFAULT NULL,
        status_flg_req_nin        IN BOOLEAN := TRUE,
        status_str_in             IN exams_ea.status_str%TYPE DEFAULT NULL,
        status_str_nin            IN BOOLEAN := TRUE,
        status_msg_in             IN exams_ea.status_msg%TYPE DEFAULT NULL,
        status_msg_nin            IN BOOLEAN := TRUE,
        status_icon_in            IN exams_ea.status_icon%TYPE DEFAULT NULL,
        status_icon_nin           IN BOOLEAN := TRUE,
        status_flg_in             IN exams_ea.status_flg%TYPE DEFAULT NULL,
        status_flg_nin            IN BOOLEAN := TRUE,
        flg_type_in               IN exams_ea.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        id_exam_cat_in            IN exams_ea.id_exam_cat%TYPE DEFAULT NULL,
        id_exam_cat_nin           IN BOOLEAN := TRUE,
        flg_available_in          IN exams_ea.flg_available%TYPE DEFAULT NULL,
        flg_available_nin         IN BOOLEAN := TRUE,
        flg_notes_in              IN exams_ea.flg_notes%TYPE DEFAULT NULL,
        flg_notes_nin             IN BOOLEAN := TRUE,
        flg_doc_in                IN exams_ea.flg_doc%TYPE DEFAULT NULL,
        flg_doc_nin               IN BOOLEAN := TRUE,
        flg_time_in               IN exams_ea.flg_time%TYPE DEFAULT NULL,
        flg_time_nin              IN BOOLEAN := TRUE,
        flg_status_req_in         IN exams_ea.flg_status_req%TYPE DEFAULT NULL,
        flg_status_req_nin        IN BOOLEAN := TRUE,
        flg_status_det_in         IN exams_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_status_det_nin        IN BOOLEAN := TRUE,
        flg_referral_in           IN exams_ea.flg_referral%TYPE DEFAULT NULL,
        flg_referral_nin          IN BOOLEAN := TRUE,
        id_prof_req_in            IN exams_ea.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin           IN BOOLEAN := TRUE,
        id_prof_performed_in      IN exams_ea.id_prof_performed%TYPE DEFAULT NULL,
        id_prof_performed_nin     IN BOOLEAN := TRUE,
        start_time_in             IN exams_ea.start_time%TYPE DEFAULT NULL,
        start_time_nin            IN BOOLEAN := TRUE,
        end_time_in               IN exams_ea.end_time%TYPE DEFAULT NULL,
        end_time_nin              IN BOOLEAN := TRUE,
        id_epis_doc_perform_in    IN exams_ea.id_epis_doc_perform%TYPE DEFAULT NULL,
        id_epis_doc_perform_nin   IN BOOLEAN := TRUE,
        desc_perform_notes_in     IN exams_ea.desc_perform_notes%TYPE DEFAULT NULL,
        desc_perform_notes_nin    IN BOOLEAN := TRUE,
        id_epis_doc_result_in     IN exams_ea.id_epis_doc_result%TYPE DEFAULT NULL,
        id_epis_doc_result_nin    IN BOOLEAN := TRUE,
        desc_result_in            IN exams_ea.desc_result%TYPE DEFAULT NULL,
        desc_result_nin           IN BOOLEAN := TRUE,
        flg_status_result_in      IN exams_ea.flg_status_result%TYPE DEFAULT NULL,
        flg_status_result_nin     IN BOOLEAN := TRUE,
        id_exam_codification_in   IN exams_ea.id_exam_codification%TYPE DEFAULT NULL,
        id_exam_codification_nin  IN BOOLEAN := TRUE,
        id_room_in                IN exams_ea.id_room%TYPE DEFAULT NULL,
        id_room_nin               IN BOOLEAN := TRUE,
        id_movement_in            IN exams_ea.id_movement%TYPE DEFAULT NULL,
        id_movement_nin           IN BOOLEAN := TRUE,
        id_task_dependency_in     IN exams_ea.id_task_dependency%TYPE DEFAULT NULL,
        id_task_dependency_nin    IN BOOLEAN := TRUE,
        flg_req_origin_module_in  IN exams_ea.flg_req_origin_module%TYPE DEFAULT NULL,
        flg_req_origin_module_nin IN BOOLEAN := TRUE,
        id_patient_in             IN exams_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_visit_in               IN exams_ea.id_visit%TYPE DEFAULT NULL,
        id_visit_nin              IN BOOLEAN := TRUE,
        id_episode_in             IN exams_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_episode_origin_in      IN exams_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin     IN BOOLEAN := TRUE,
        id_prev_episode_in        IN exams_ea.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin       IN BOOLEAN := TRUE,
        dt_dg_last_update_in      IN exams_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin     IN BOOLEAN := TRUE,
        create_user_in            IN exams_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN exams_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN exams_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN exams_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN exams_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN exams_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        notes_in                  IN exams_ea.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        notes_technician_in       IN exams_ea.notes_technician%TYPE DEFAULT NULL,
        notes_technician_nin      IN BOOLEAN := TRUE,
        notes_patient_in          IN exams_ea.notes_patient%TYPE DEFAULT NULL,
        notes_patient_nin         IN BOOLEAN := TRUE,
        notes_cancel_in           IN exams_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        notes_scheduler_in        IN exams_ea.notes_scheduler%TYPE DEFAULT NULL,
        notes_scheduler_nin       IN BOOLEAN := TRUE,
        flg_relevant_in           IN exams_ea.flg_relevant%TYPE DEFAULT NULL,
        flg_relevant_nin          IN BOOLEAN := TRUE,
        where_in                  VARCHAR2,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_exam_req_in            => id_exam_req_in,
            id_exam_req_nin           => id_exam_req_nin,
            id_exam_result_in         => id_exam_result_in,
            id_exam_result_nin        => id_exam_result_nin,
            id_exam_in                => id_exam_in,
            id_exam_nin               => id_exam_nin,
            id_exam_group_in          => id_exam_group_in,
            id_exam_group_nin         => id_exam_group_nin,
            dt_req_in                 => dt_req_in,
            dt_req_nin                => dt_req_nin,
            dt_begin_in               => dt_begin_in,
            dt_begin_nin              => dt_begin_nin,
            dt_pend_req_in            => dt_pend_req_in,
            dt_pend_req_nin           => dt_pend_req_nin,
            dt_result_in              => dt_result_in,
            dt_result_nin             => dt_result_nin,
            priority_in               => priority_in,
            priority_nin              => priority_nin,
            status_str_req_in         => status_str_req_in,
            status_str_req_nin        => status_str_req_nin,
            status_msg_req_in         => status_msg_req_in,
            status_msg_req_nin        => status_msg_req_nin,
            status_icon_req_in        => status_icon_req_in,
            status_icon_req_nin       => status_icon_req_nin,
            status_flg_req_in         => status_flg_req_in,
            status_flg_req_nin        => status_flg_req_nin,
            status_str_in             => status_str_in,
            status_str_nin            => status_str_nin,
            status_msg_in             => status_msg_in,
            status_msg_nin            => status_msg_nin,
            status_icon_in            => status_icon_in,
            status_icon_nin           => status_icon_nin,
            status_flg_in             => status_flg_in,
            status_flg_nin            => status_flg_nin,
            flg_type_in               => flg_type_in,
            flg_type_nin              => flg_type_nin,
            id_exam_cat_in            => id_exam_cat_in,
            id_exam_cat_nin           => id_exam_cat_nin,
            flg_available_in          => flg_available_in,
            flg_available_nin         => flg_available_nin,
            flg_notes_in              => flg_notes_in,
            flg_notes_nin             => flg_notes_nin,
            flg_doc_in                => flg_doc_in,
            flg_doc_nin               => flg_doc_nin,
            flg_time_in               => flg_time_in,
            flg_time_nin              => flg_time_nin,
            flg_status_req_in         => flg_status_req_in,
            flg_status_req_nin        => flg_status_req_nin,
            flg_status_det_in         => flg_status_det_in,
            flg_status_det_nin        => flg_status_det_nin,
            flg_referral_in           => flg_referral_in,
            flg_referral_nin          => flg_referral_nin,
            id_prof_req_in            => id_prof_req_in,
            id_prof_req_nin           => id_prof_req_nin,
            id_prof_performed_in      => id_prof_performed_in,
            id_prof_performed_nin     => id_prof_performed_nin,
            start_time_in             => start_time_in,
            start_time_nin            => start_time_nin,
            end_time_in               => end_time_in,
            end_time_nin              => end_time_nin,
            id_epis_doc_perform_in    => id_epis_doc_perform_in,
            id_epis_doc_perform_nin   => id_epis_doc_perform_nin,
            desc_perform_notes_in     => desc_perform_notes_in,
            desc_perform_notes_nin    => desc_perform_notes_nin,
            id_epis_doc_result_in     => id_epis_doc_result_in,
            id_epis_doc_result_nin    => id_epis_doc_result_nin,
            desc_result_in            => desc_result_in,
            desc_result_nin           => desc_result_nin,
            flg_status_result_in      => flg_status_result_in,
            flg_status_result_nin     => flg_status_result_nin,
            id_exam_codification_in   => id_exam_codification_in,
            id_exam_codification_nin  => id_exam_codification_nin,
            id_room_in                => id_room_in,
            id_room_nin               => id_room_nin,
            id_movement_in            => id_movement_in,
            id_movement_nin           => id_movement_nin,
            id_task_dependency_in     => id_task_dependency_in,
            id_task_dependency_nin    => id_task_dependency_nin,
            flg_req_origin_module_in  => flg_req_origin_module_in,
            flg_req_origin_module_nin => flg_req_origin_module_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            id_visit_in               => id_visit_in,
            id_visit_nin              => id_visit_nin,
            id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_origin_nin     => id_episode_origin_nin,
            id_prev_episode_in        => id_prev_episode_in,
            id_prev_episode_nin       => id_prev_episode_nin,
            dt_dg_last_update_in      => dt_dg_last_update_in,
            dt_dg_last_update_nin     => dt_dg_last_update_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            notes_in                  => notes_in,
            notes_nin                 => notes_nin,
            notes_technician_in       => notes_technician_in,
            notes_technician_nin      => notes_technician_nin,
            notes_patient_in          => notes_patient_in,
            notes_patient_nin         => notes_patient_nin,
            notes_cancel_in           => notes_cancel_in,
            notes_cancel_nin          => notes_cancel_nin,
            notes_scheduler_in        => notes_scheduler_in,
            notes_scheduler_nin       => notes_scheduler_nin,
            flg_relevant_in           => flg_relevant_in,
            flg_relevant_nin          => flg_relevant_nin,
            where_in                  => where_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN exams_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_exam_req_in           => rec_in.id_exam_req,
            id_exam_req_det_in       => rec_in.id_exam_req_det,
            id_exam_result_in        => rec_in.id_exam_result,
            id_exam_in               => rec_in.id_exam,
            id_exam_group_in         => rec_in.id_exam_group,
            dt_req_in                => rec_in.dt_req,
            dt_begin_in              => rec_in.dt_begin,
            dt_pend_req_in           => rec_in.dt_pend_req,
            dt_result_in             => rec_in.dt_result,
            priority_in              => rec_in.priority,
            status_str_req_in        => rec_in.status_str_req,
            status_msg_req_in        => rec_in.status_msg_req,
            status_icon_req_in       => rec_in.status_icon_req,
            status_flg_req_in        => rec_in.status_flg_req,
            status_str_in            => rec_in.status_str,
            status_msg_in            => rec_in.status_msg,
            status_icon_in           => rec_in.status_icon,
            status_flg_in            => rec_in.status_flg,
            flg_type_in              => rec_in.flg_type,
            id_exam_cat_in           => rec_in.id_exam_cat,
            flg_available_in         => rec_in.flg_available,
            flg_notes_in             => rec_in.flg_notes,
            flg_doc_in               => rec_in.flg_doc,
            flg_time_in              => rec_in.flg_time,
            flg_status_req_in        => rec_in.flg_status_req,
            flg_status_det_in        => rec_in.flg_status_det,
            flg_referral_in          => rec_in.flg_referral,
            id_prof_req_in           => rec_in.id_prof_req,
            id_prof_performed_in     => rec_in.id_prof_performed,
            start_time_in            => rec_in.start_time,
            end_time_in              => rec_in.end_time,
            id_epis_doc_perform_in   => rec_in.id_epis_doc_perform,
            desc_perform_notes_in    => rec_in.desc_perform_notes,
            id_epis_doc_result_in    => rec_in.id_epis_doc_result,
            desc_result_in           => rec_in.desc_result,
            flg_status_result_in     => rec_in.flg_status_result,
            id_exam_codification_in  => rec_in.id_exam_codification,
            id_room_in               => rec_in.id_room,
            id_movement_in           => rec_in.id_movement,
            id_task_dependency_in    => rec_in.id_task_dependency,
            flg_req_origin_module_in => rec_in.flg_req_origin_module,
            id_patient_in            => rec_in.id_patient,
            id_visit_in              => rec_in.id_visit,
            id_episode_in            => rec_in.id_episode,
            id_episode_origin_in     => rec_in.id_episode_origin,
            id_prev_episode_in       => rec_in.id_prev_episode,
            dt_dg_last_update_in     => rec_in.dt_dg_last_update,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            notes_in                 => rec_in.notes,
            notes_technician_in      => rec_in.notes_technician,
            notes_patient_in         => rec_in.notes_patient,
            notes_cancel_in          => rec_in.notes_cancel,
            notes_scheduler_in       => rec_in.notes_scheduler,
            flg_relevant_in          => rec_in.flg_relevant
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN exams_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_exam_req_in           => rec_in.id_exam_req,
            id_exam_req_det_in       => rec_in.id_exam_req_det,
            id_exam_result_in        => rec_in.id_exam_result,
            id_exam_in               => rec_in.id_exam,
            id_exam_group_in         => rec_in.id_exam_group,
            dt_req_in                => rec_in.dt_req,
            dt_begin_in              => rec_in.dt_begin,
            dt_pend_req_in           => rec_in.dt_pend_req,
            dt_result_in             => rec_in.dt_result,
            priority_in              => rec_in.priority,
            status_str_req_in        => rec_in.status_str_req,
            status_msg_req_in        => rec_in.status_msg_req,
            status_icon_req_in       => rec_in.status_icon_req,
            status_flg_req_in        => rec_in.status_flg_req,
            status_str_in            => rec_in.status_str,
            status_msg_in            => rec_in.status_msg,
            status_icon_in           => rec_in.status_icon,
            status_flg_in            => rec_in.status_flg,
            flg_type_in              => rec_in.flg_type,
            id_exam_cat_in           => rec_in.id_exam_cat,
            flg_available_in         => rec_in.flg_available,
            flg_notes_in             => rec_in.flg_notes,
            flg_doc_in               => rec_in.flg_doc,
            flg_time_in              => rec_in.flg_time,
            flg_status_req_in        => rec_in.flg_status_req,
            flg_status_det_in        => rec_in.flg_status_det,
            flg_referral_in          => rec_in.flg_referral,
            id_prof_req_in           => rec_in.id_prof_req,
            id_prof_performed_in     => rec_in.id_prof_performed,
            start_time_in            => rec_in.start_time,
            end_time_in              => rec_in.end_time,
            id_epis_doc_perform_in   => rec_in.id_epis_doc_perform,
            desc_perform_notes_in    => rec_in.desc_perform_notes,
            id_epis_doc_result_in    => rec_in.id_epis_doc_result,
            desc_result_in           => rec_in.desc_result,
            flg_status_result_in     => rec_in.flg_status_result,
            id_exam_codification_in  => rec_in.id_exam_codification,
            id_room_in               => rec_in.id_room,
            id_movement_in           => rec_in.id_movement,
            id_task_dependency_in    => rec_in.id_task_dependency,
            flg_req_origin_module_in => rec_in.flg_req_origin_module,
            id_patient_in            => rec_in.id_patient,
            id_visit_in              => rec_in.id_visit,
            id_episode_in            => rec_in.id_episode,
            id_episode_origin_in     => rec_in.id_episode_origin,
            id_prev_episode_in       => rec_in.id_prev_episode,
            dt_dg_last_update_in     => rec_in.dt_dg_last_update,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            notes_in                 => rec_in.notes,
            notes_technician_in      => rec_in.notes_technician,
            notes_patient_in         => rec_in.notes_patient,
            notes_cancel_in          => rec_in.notes_cancel,
            notes_scheduler_in       => rec_in.notes_scheduler,
            flg_relevant_in          => rec_in.flg_relevant
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_exam_req_det_in       IN exams_ea.id_exam_req_det%TYPE,
        id_exam_req_in           IN exams_ea.id_exam_req%TYPE DEFAULT NULL,
        id_exam_result_in        IN exams_ea.id_exam_result%TYPE DEFAULT NULL,
        id_exam_in               IN exams_ea.id_exam%TYPE DEFAULT NULL,
        id_exam_group_in         IN exams_ea.id_exam_group%TYPE DEFAULT NULL,
        dt_req_in                IN exams_ea.dt_req%TYPE DEFAULT NULL,
        dt_begin_in              IN exams_ea.dt_begin%TYPE DEFAULT NULL,
        dt_pend_req_in           IN exams_ea.dt_pend_req%TYPE DEFAULT NULL,
        dt_result_in             IN exams_ea.dt_result%TYPE DEFAULT NULL,
        priority_in              IN exams_ea.priority%TYPE DEFAULT NULL,
        status_str_req_in        IN exams_ea.status_str_req%TYPE DEFAULT NULL,
        status_msg_req_in        IN exams_ea.status_msg_req%TYPE DEFAULT NULL,
        status_icon_req_in       IN exams_ea.status_icon_req%TYPE DEFAULT NULL,
        status_flg_req_in        IN exams_ea.status_flg_req%TYPE DEFAULT NULL,
        status_str_in            IN exams_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in            IN exams_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in           IN exams_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in            IN exams_ea.status_flg%TYPE DEFAULT NULL,
        flg_type_in              IN exams_ea.flg_type%TYPE DEFAULT NULL,
        id_exam_cat_in           IN exams_ea.id_exam_cat%TYPE DEFAULT NULL,
        flg_available_in         IN exams_ea.flg_available%TYPE DEFAULT NULL,
        flg_notes_in             IN exams_ea.flg_notes%TYPE DEFAULT NULL,
        flg_doc_in               IN exams_ea.flg_doc%TYPE DEFAULT NULL,
        flg_time_in              IN exams_ea.flg_time%TYPE DEFAULT NULL,
        flg_status_req_in        IN exams_ea.flg_status_req%TYPE DEFAULT NULL,
        flg_status_det_in        IN exams_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_referral_in          IN exams_ea.flg_referral%TYPE DEFAULT NULL,
        id_prof_req_in           IN exams_ea.id_prof_req%TYPE DEFAULT NULL,
        id_prof_performed_in     IN exams_ea.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN exams_ea.start_time%TYPE DEFAULT NULL,
        end_time_in              IN exams_ea.end_time%TYPE DEFAULT NULL,
        id_epis_doc_perform_in   IN exams_ea.id_epis_doc_perform%TYPE DEFAULT NULL,
        desc_perform_notes_in    IN exams_ea.desc_perform_notes%TYPE DEFAULT NULL,
        id_epis_doc_result_in    IN exams_ea.id_epis_doc_result%TYPE DEFAULT NULL,
        desc_result_in           IN exams_ea.desc_result%TYPE DEFAULT NULL,
        flg_status_result_in     IN exams_ea.flg_status_result%TYPE DEFAULT NULL,
        id_exam_codification_in  IN exams_ea.id_exam_codification%TYPE DEFAULT NULL,
        id_room_in               IN exams_ea.id_room%TYPE DEFAULT NULL,
        id_movement_in           IN exams_ea.id_movement%TYPE DEFAULT NULL,
        id_task_dependency_in    IN exams_ea.id_task_dependency%TYPE DEFAULT NULL,
        flg_req_origin_module_in IN exams_ea.flg_req_origin_module%TYPE DEFAULT NULL,
        id_patient_in            IN exams_ea.id_patient%TYPE DEFAULT NULL,
        id_visit_in              IN exams_ea.id_visit%TYPE DEFAULT NULL,
        id_episode_in            IN exams_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_origin_in     IN exams_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_prev_episode_in       IN exams_ea.id_prev_episode%TYPE DEFAULT NULL,
        dt_dg_last_update_in     IN exams_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        create_user_in           IN exams_ea.create_user%TYPE DEFAULT NULL,
        create_time_in           IN exams_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN exams_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN exams_ea.update_user%TYPE DEFAULT NULL,
        update_time_in           IN exams_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN exams_ea.update_institution%TYPE DEFAULT NULL,
        notes_in                 IN exams_ea.notes%TYPE DEFAULT NULL,
        notes_technician_in      IN exams_ea.notes_technician%TYPE DEFAULT NULL,
        notes_patient_in         IN exams_ea.notes_patient%TYPE DEFAULT NULL,
        notes_cancel_in          IN exams_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_scheduler_in       IN exams_ea.notes_scheduler%TYPE DEFAULT NULL,
        flg_relevant_in          IN exams_ea.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        upd(id_exam_req_det_in       => id_exam_req_det_in,
            id_exam_req_in           => id_exam_req_in,
            id_exam_result_in        => id_exam_result_in,
            id_exam_in               => id_exam_in,
            id_exam_group_in         => id_exam_group_in,
            dt_req_in                => dt_req_in,
            dt_begin_in              => dt_begin_in,
            dt_pend_req_in           => dt_pend_req_in,
            dt_result_in             => dt_result_in,
            priority_in              => priority_in,
            status_str_req_in        => status_str_req_in,
            status_msg_req_in        => status_msg_req_in,
            status_icon_req_in       => status_icon_req_in,
            status_flg_req_in        => status_flg_req_in,
            status_str_in            => status_str_in,
            status_msg_in            => status_msg_in,
            status_icon_in           => status_icon_in,
            status_flg_in            => status_flg_in,
            flg_type_in              => flg_type_in,
            id_exam_cat_in           => id_exam_cat_in,
            flg_available_in         => flg_available_in,
            flg_notes_in             => flg_notes_in,
            flg_doc_in               => flg_doc_in,
            flg_time_in              => flg_time_in,
            flg_status_req_in        => flg_status_req_in,
            flg_status_det_in        => flg_status_det_in,
            flg_referral_in          => flg_referral_in,
            id_prof_req_in           => id_prof_req_in,
            id_prof_performed_in     => id_prof_performed_in,
            start_time_in            => start_time_in,
            end_time_in              => end_time_in,
            id_epis_doc_perform_in   => id_epis_doc_perform_in,
            desc_perform_notes_in    => desc_perform_notes_in,
            id_epis_doc_result_in    => id_epis_doc_result_in,
            desc_result_in           => desc_result_in,
            flg_status_result_in     => flg_status_result_in,
            id_exam_codification_in  => id_exam_codification_in,
            id_room_in               => id_room_in,
            id_movement_in           => id_movement_in,
            id_task_dependency_in    => id_task_dependency_in,
            flg_req_origin_module_in => flg_req_origin_module_in,
            id_patient_in            => id_patient_in,
            id_visit_in              => id_visit_in,
            id_episode_in            => id_episode_in,
            id_episode_origin_in     => id_episode_origin_in,
            id_prev_episode_in       => id_prev_episode_in,
            dt_dg_last_update_in     => dt_dg_last_update_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            notes_in                 => notes_in,
            notes_technician_in      => notes_technician_in,
            notes_patient_in         => notes_patient_in,
            notes_cancel_in          => notes_cancel_in,
            notes_scheduler_in       => notes_scheduler_in,
            flg_relevant_in          => flg_relevant_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_exam_req_det_in       => id_exam_req_det_in,
                id_exam_req_in           => id_exam_req_in,
                id_exam_result_in        => id_exam_result_in,
                id_exam_in               => id_exam_in,
                id_exam_group_in         => id_exam_group_in,
                dt_req_in                => dt_req_in,
                dt_begin_in              => dt_begin_in,
                dt_pend_req_in           => dt_pend_req_in,
                dt_result_in             => dt_result_in,
                priority_in              => priority_in,
                status_str_req_in        => status_str_req_in,
                status_msg_req_in        => status_msg_req_in,
                status_icon_req_in       => status_icon_req_in,
                status_flg_req_in        => status_flg_req_in,
                status_str_in            => status_str_in,
                status_msg_in            => status_msg_in,
                status_icon_in           => status_icon_in,
                status_flg_in            => status_flg_in,
                flg_type_in              => flg_type_in,
                id_exam_cat_in           => id_exam_cat_in,
                flg_available_in         => flg_available_in,
                flg_notes_in             => flg_notes_in,
                flg_doc_in               => flg_doc_in,
                flg_time_in              => flg_time_in,
                flg_status_req_in        => flg_status_req_in,
                flg_status_det_in        => flg_status_det_in,
                flg_referral_in          => flg_referral_in,
                id_prof_req_in           => id_prof_req_in,
                id_prof_performed_in     => id_prof_performed_in,
                start_time_in            => start_time_in,
                end_time_in              => end_time_in,
                id_epis_doc_perform_in   => id_epis_doc_perform_in,
                desc_perform_notes_in    => desc_perform_notes_in,
                id_epis_doc_result_in    => id_epis_doc_result_in,
                desc_result_in           => desc_result_in,
                flg_status_result_in     => flg_status_result_in,
                id_exam_codification_in  => id_exam_codification_in,
                id_room_in               => id_room_in,
                id_movement_in           => id_movement_in,
                id_task_dependency_in    => id_task_dependency_in,
                flg_req_origin_module_in => flg_req_origin_module_in,
                id_patient_in            => id_patient_in,
                id_visit_in              => id_visit_in,
                id_episode_in            => id_episode_in,
                id_episode_origin_in     => id_episode_origin_in,
                id_prev_episode_in       => id_prev_episode_in,
                dt_dg_last_update_in     => dt_dg_last_update_in,
                create_user_in           => create_user_in,
                create_time_in           => create_time_in,
                create_institution_in    => create_institution_in,
                update_user_in           => update_user_in,
                update_time_in           => update_time_in,
                update_institution_in    => update_institution_in,
                notes_in                 => notes_in,
                notes_technician_in      => notes_technician_in,
                notes_patient_in         => notes_patient_in,
                notes_cancel_in          => notes_cancel_in,
                notes_scheduler_in       => notes_scheduler_in,
                flg_relevant_in          => flg_relevant_in,
                handle_error_in          => handle_error_in,
                rows_out                 => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_exam_req_det_in       IN exams_ea.id_exam_req_det%TYPE,
        id_exam_req_in           IN exams_ea.id_exam_req%TYPE DEFAULT NULL,
        id_exam_result_in        IN exams_ea.id_exam_result%TYPE DEFAULT NULL,
        id_exam_in               IN exams_ea.id_exam%TYPE DEFAULT NULL,
        id_exam_group_in         IN exams_ea.id_exam_group%TYPE DEFAULT NULL,
        dt_req_in                IN exams_ea.dt_req%TYPE DEFAULT NULL,
        dt_begin_in              IN exams_ea.dt_begin%TYPE DEFAULT NULL,
        dt_pend_req_in           IN exams_ea.dt_pend_req%TYPE DEFAULT NULL,
        dt_result_in             IN exams_ea.dt_result%TYPE DEFAULT NULL,
        priority_in              IN exams_ea.priority%TYPE DEFAULT NULL,
        status_str_req_in        IN exams_ea.status_str_req%TYPE DEFAULT NULL,
        status_msg_req_in        IN exams_ea.status_msg_req%TYPE DEFAULT NULL,
        status_icon_req_in       IN exams_ea.status_icon_req%TYPE DEFAULT NULL,
        status_flg_req_in        IN exams_ea.status_flg_req%TYPE DEFAULT NULL,
        status_str_in            IN exams_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in            IN exams_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in           IN exams_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in            IN exams_ea.status_flg%TYPE DEFAULT NULL,
        flg_type_in              IN exams_ea.flg_type%TYPE DEFAULT NULL,
        id_exam_cat_in           IN exams_ea.id_exam_cat%TYPE DEFAULT NULL,
        flg_available_in         IN exams_ea.flg_available%TYPE DEFAULT NULL,
        flg_notes_in             IN exams_ea.flg_notes%TYPE DEFAULT NULL,
        flg_doc_in               IN exams_ea.flg_doc%TYPE DEFAULT NULL,
        flg_time_in              IN exams_ea.flg_time%TYPE DEFAULT NULL,
        flg_status_req_in        IN exams_ea.flg_status_req%TYPE DEFAULT NULL,
        flg_status_det_in        IN exams_ea.flg_status_det%TYPE DEFAULT NULL,
        flg_referral_in          IN exams_ea.flg_referral%TYPE DEFAULT NULL,
        id_prof_req_in           IN exams_ea.id_prof_req%TYPE DEFAULT NULL,
        id_prof_performed_in     IN exams_ea.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN exams_ea.start_time%TYPE DEFAULT NULL,
        end_time_in              IN exams_ea.end_time%TYPE DEFAULT NULL,
        id_epis_doc_perform_in   IN exams_ea.id_epis_doc_perform%TYPE DEFAULT NULL,
        desc_perform_notes_in    IN exams_ea.desc_perform_notes%TYPE DEFAULT NULL,
        id_epis_doc_result_in    IN exams_ea.id_epis_doc_result%TYPE DEFAULT NULL,
        desc_result_in           IN exams_ea.desc_result%TYPE DEFAULT NULL,
        flg_status_result_in     IN exams_ea.flg_status_result%TYPE DEFAULT NULL,
        id_exam_codification_in  IN exams_ea.id_exam_codification%TYPE DEFAULT NULL,
        id_room_in               IN exams_ea.id_room%TYPE DEFAULT NULL,
        id_movement_in           IN exams_ea.id_movement%TYPE DEFAULT NULL,
        id_task_dependency_in    IN exams_ea.id_task_dependency%TYPE DEFAULT NULL,
        flg_req_origin_module_in IN exams_ea.flg_req_origin_module%TYPE DEFAULT NULL,
        id_patient_in            IN exams_ea.id_patient%TYPE DEFAULT NULL,
        id_visit_in              IN exams_ea.id_visit%TYPE DEFAULT NULL,
        id_episode_in            IN exams_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_origin_in     IN exams_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_prev_episode_in       IN exams_ea.id_prev_episode%TYPE DEFAULT NULL,
        dt_dg_last_update_in     IN exams_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        create_user_in           IN exams_ea.create_user%TYPE DEFAULT NULL,
        create_time_in           IN exams_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN exams_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN exams_ea.update_user%TYPE DEFAULT NULL,
        update_time_in           IN exams_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN exams_ea.update_institution%TYPE DEFAULT NULL,
        notes_in                 IN exams_ea.notes%TYPE DEFAULT NULL,
        notes_technician_in      IN exams_ea.notes_technician%TYPE DEFAULT NULL,
        notes_patient_in         IN exams_ea.notes_patient%TYPE DEFAULT NULL,
        notes_cancel_in          IN exams_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_scheduler_in       IN exams_ea.notes_scheduler%TYPE DEFAULT NULL,
        flg_relevant_in          IN exams_ea.flg_relevant%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_exam_req_det_in,
                id_exam_req_in,
                id_exam_result_in,
                id_exam_in,
                id_exam_group_in,
                dt_req_in,
                dt_begin_in,
                dt_pend_req_in,
                dt_result_in,
                priority_in,
                status_str_req_in,
                status_msg_req_in,
                status_icon_req_in,
                status_flg_req_in,
                status_str_in,
                status_msg_in,
                status_icon_in,
                status_flg_in,
                flg_type_in,
                id_exam_cat_in,
                flg_available_in,
                flg_notes_in,
                flg_doc_in,
                flg_time_in,
                flg_status_req_in,
                flg_status_det_in,
                flg_referral_in,
                id_prof_req_in,
                id_prof_performed_in,
                start_time_in,
                end_time_in,
                id_epis_doc_perform_in,
                desc_perform_notes_in,
                id_epis_doc_result_in,
                desc_result_in,
                flg_status_result_in,
                id_exam_codification_in,
                id_room_in,
                id_movement_in,
                id_task_dependency_in,
                flg_req_origin_module_in,
                id_patient_in,
                id_visit_in,
                id_episode_in,
                id_episode_origin_in,
                id_prev_episode_in,
                dt_dg_last_update_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                notes_in,
                notes_technician_in,
                notes_patient_in,
                notes_cancel_in,
                notes_scheduler_in,
                flg_relevant_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN exams_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_exam_req           id_exam_req_cc;
        l_id_exam_req_det       id_exam_req_det_cc;
        l_id_exam_result        id_exam_result_cc;
        l_id_exam               id_exam_cc;
        l_id_exam_group         id_exam_group_cc;
        l_dt_req                dt_req_cc;
        l_dt_begin              dt_begin_cc;
        l_dt_pend_req           dt_pend_req_cc;
        l_dt_result             dt_result_cc;
        l_priority              priority_cc;
        l_status_str_req        status_str_req_cc;
        l_status_msg_req        status_msg_req_cc;
        l_status_icon_req       status_icon_req_cc;
        l_status_flg_req        status_flg_req_cc;
        l_status_str            status_str_cc;
        l_status_msg            status_msg_cc;
        l_status_icon           status_icon_cc;
        l_status_flg            status_flg_cc;
        l_flg_type              flg_type_cc;
        l_id_exam_cat           id_exam_cat_cc;
        l_flg_available         flg_available_cc;
        l_flg_notes             flg_notes_cc;
        l_flg_doc               flg_doc_cc;
        l_flg_time              flg_time_cc;
        l_flg_status_req        flg_status_req_cc;
        l_flg_status_det        flg_status_det_cc;
        l_flg_referral          flg_referral_cc;
        l_id_prof_req           id_prof_req_cc;
        l_id_prof_performed     id_prof_performed_cc;
        l_start_time            start_time_cc;
        l_end_time              end_time_cc;
        l_id_epis_doc_perform   id_epis_doc_perform_cc;
        l_desc_perform_notes    desc_perform_notes_cc;
        l_id_epis_doc_result    id_epis_doc_result_cc;
        l_desc_result           desc_result_cc;
        l_flg_status_result     flg_status_result_cc;
        l_id_exam_codification  id_exam_codification_cc;
        l_id_room               id_room_cc;
        l_id_movement           id_movement_cc;
        l_id_task_dependency    id_task_dependency_cc;
        l_flg_req_origin_module flg_req_origin_module_cc;
        l_id_patient            id_patient_cc;
        l_id_visit              id_visit_cc;
        l_id_episode            id_episode_cc;
        l_id_episode_origin     id_episode_origin_cc;
        l_id_prev_episode       id_prev_episode_cc;
        l_dt_dg_last_update     dt_dg_last_update_cc;
        l_create_user           create_user_cc;
        l_create_time           create_time_cc;
        l_create_institution    create_institution_cc;
        l_update_user           update_user_cc;
        l_update_time           update_time_cc;
        l_update_institution    update_institution_cc;
        l_notes                 notes_cc;
        l_notes_technician      notes_technician_cc;
        l_notes_patient         notes_patient_cc;
        l_notes_cancel          notes_cancel_cc;
        l_notes_scheduler       notes_scheduler_cc;
        l_flg_relevant          flg_relevant_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_exam_req(i) := col_in(i).id_exam_req;
            l_id_exam_req_det(i) := col_in(i).id_exam_req_det;
            l_id_exam_result(i) := col_in(i).id_exam_result;
            l_id_exam(i) := col_in(i).id_exam;
            l_id_exam_group(i) := col_in(i).id_exam_group;
            l_dt_req(i) := col_in(i).dt_req;
            l_dt_begin(i) := col_in(i).dt_begin;
            l_dt_pend_req(i) := col_in(i).dt_pend_req;
            l_dt_result(i) := col_in(i).dt_result;
            l_priority(i) := col_in(i).priority;
            l_status_str_req(i) := col_in(i).status_str_req;
            l_status_msg_req(i) := col_in(i).status_msg_req;
            l_status_icon_req(i) := col_in(i).status_icon_req;
            l_status_flg_req(i) := col_in(i).status_flg_req;
            l_status_str(i) := col_in(i).status_str;
            l_status_msg(i) := col_in(i).status_msg;
            l_status_icon(i) := col_in(i).status_icon;
            l_status_flg(i) := col_in(i).status_flg;
            l_flg_type(i) := col_in(i).flg_type;
            l_id_exam_cat(i) := col_in(i).id_exam_cat;
            l_flg_available(i) := col_in(i).flg_available;
            l_flg_notes(i) := col_in(i).flg_notes;
            l_flg_doc(i) := col_in(i).flg_doc;
            l_flg_time(i) := col_in(i).flg_time;
            l_flg_status_req(i) := col_in(i).flg_status_req;
            l_flg_status_det(i) := col_in(i).flg_status_det;
            l_flg_referral(i) := col_in(i).flg_referral;
            l_id_prof_req(i) := col_in(i).id_prof_req;
            l_id_prof_performed(i) := col_in(i).id_prof_performed;
            l_start_time(i) := col_in(i).start_time;
            l_end_time(i) := col_in(i).end_time;
            l_id_epis_doc_perform(i) := col_in(i).id_epis_doc_perform;
            l_desc_perform_notes(i) := col_in(i).desc_perform_notes;
            l_id_epis_doc_result(i) := col_in(i).id_epis_doc_result;
            l_desc_result(i) := col_in(i).desc_result;
            l_flg_status_result(i) := col_in(i).flg_status_result;
            l_id_exam_codification(i) := col_in(i).id_exam_codification;
            l_id_room(i) := col_in(i).id_room;
            l_id_movement(i) := col_in(i).id_movement;
            l_id_task_dependency(i) := col_in(i).id_task_dependency;
            l_flg_req_origin_module(i) := col_in(i).flg_req_origin_module;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_visit(i) := col_in(i).id_visit;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_episode_origin(i) := col_in(i).id_episode_origin;
            l_id_prev_episode(i) := col_in(i).id_prev_episode;
            l_dt_dg_last_update(i) := col_in(i).dt_dg_last_update;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_notes(i) := col_in(i).notes;
            l_notes_technician(i) := col_in(i).notes_technician;
            l_notes_patient(i) := col_in(i).notes_patient;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_notes_scheduler(i) := col_in(i).notes_scheduler;
            l_flg_relevant(i) := col_in(i).flg_relevant;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE exams_ea
                   SET id_exam_req           = nvl(l_id_exam_req(i), id_exam_req),
                       id_exam_result        = nvl(l_id_exam_result(i), id_exam_result),
                       id_exam               = nvl(l_id_exam(i), id_exam),
                       id_exam_group         = nvl(l_id_exam_group(i), id_exam_group),
                       dt_req                = nvl(l_dt_req(i), dt_req),
                       dt_begin              = nvl(l_dt_begin(i), dt_begin),
                       dt_pend_req           = nvl(l_dt_pend_req(i), dt_pend_req),
                       dt_result             = nvl(l_dt_result(i), dt_result),
                       priority              = nvl(l_priority(i), priority),
                       status_str_req        = nvl(l_status_str_req(i), status_str_req),
                       status_msg_req        = nvl(l_status_msg_req(i), status_msg_req),
                       status_icon_req       = nvl(l_status_icon_req(i), status_icon_req),
                       status_flg_req        = nvl(l_status_flg_req(i), status_flg_req),
                       status_str            = nvl(l_status_str(i), status_str),
                       status_msg            = nvl(l_status_msg(i), status_msg),
                       status_icon           = nvl(l_status_icon(i), status_icon),
                       status_flg            = nvl(l_status_flg(i), status_flg),
                       flg_type              = nvl(l_flg_type(i), flg_type),
                       id_exam_cat           = nvl(l_id_exam_cat(i), id_exam_cat),
                       flg_available         = nvl(l_flg_available(i), flg_available),
                       flg_notes             = nvl(l_flg_notes(i), flg_notes),
                       flg_doc               = nvl(l_flg_doc(i), flg_doc),
                       flg_time              = nvl(l_flg_time(i), flg_time),
                       flg_status_req        = nvl(l_flg_status_req(i), flg_status_req),
                       flg_status_det        = nvl(l_flg_status_det(i), flg_status_det),
                       flg_referral          = nvl(l_flg_referral(i), flg_referral),
                       id_prof_req           = nvl(l_id_prof_req(i), id_prof_req),
                       id_prof_performed     = nvl(l_id_prof_performed(i), id_prof_performed),
                       start_time            = nvl(l_start_time(i), start_time),
                       end_time              = nvl(l_end_time(i), end_time),
                       id_epis_doc_perform   = nvl(l_id_epis_doc_perform(i), id_epis_doc_perform),
                       desc_perform_notes    = nvl(l_desc_perform_notes(i), desc_perform_notes),
                       id_epis_doc_result    = nvl(l_id_epis_doc_result(i), id_epis_doc_result),
                       desc_result           = nvl(l_desc_result(i), desc_result),
                       flg_status_result     = nvl(l_flg_status_result(i), flg_status_result),
                       id_exam_codification  = nvl(l_id_exam_codification(i), id_exam_codification),
                       id_room               = nvl(l_id_room(i), id_room),
                       id_movement           = nvl(l_id_movement(i), id_movement),
                       id_task_dependency    = nvl(l_id_task_dependency(i), id_task_dependency),
                       flg_req_origin_module = nvl(l_flg_req_origin_module(i), flg_req_origin_module),
                       id_patient            = nvl(l_id_patient(i), id_patient),
                       id_visit              = nvl(l_id_visit(i), id_visit),
                       id_episode            = nvl(l_id_episode(i), id_episode),
                       id_episode_origin     = nvl(l_id_episode_origin(i), id_episode_origin),
                       id_prev_episode       = nvl(l_id_prev_episode(i), id_prev_episode),
                       dt_dg_last_update     = nvl(l_dt_dg_last_update(i), current_timestamp),
                       create_user           = nvl(l_create_user(i), create_user),
                       create_time           = nvl(l_create_time(i), create_time),
                       create_institution    = nvl(l_create_institution(i), create_institution),
                       update_user           = nvl(l_update_user(i), update_user),
                       update_time           = nvl(l_update_time(i), update_time),
                       update_institution    = nvl(l_update_institution(i), update_institution),
                       notes                 = nvl(l_notes(i), notes),
                       notes_technician      = nvl(l_notes_technician(i), notes_technician),
                       notes_patient         = nvl(l_notes_patient(i), notes_patient),
                       notes_cancel          = nvl(l_notes_cancel(i), notes_cancel),
                       notes_scheduler       = nvl(l_notes_scheduler(i), notes_scheduler),
                       flg_relevant          = nvl(l_flg_relevant(i), flg_relevant)
                 WHERE id_exam_req_det = l_id_exam_req_det(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE exams_ea
                   SET id_exam_req           = l_id_exam_req(i),
                       id_exam_result        = l_id_exam_result(i),
                       id_exam               = l_id_exam(i),
                       id_exam_group         = l_id_exam_group(i),
                       dt_req                = l_dt_req(i),
                       dt_begin              = l_dt_begin(i),
                       dt_pend_req           = l_dt_pend_req(i),
                       dt_result             = l_dt_result(i),
                       priority              = l_priority(i),
                       status_str_req        = l_status_str_req(i),
                       status_msg_req        = l_status_msg_req(i),
                       status_icon_req       = l_status_icon_req(i),
                       status_flg_req        = l_status_flg_req(i),
                       status_str            = l_status_str(i),
                       status_msg            = l_status_msg(i),
                       status_icon           = l_status_icon(i),
                       status_flg            = l_status_flg(i),
                       flg_type              = l_flg_type(i),
                       id_exam_cat           = l_id_exam_cat(i),
                       flg_available         = l_flg_available(i),
                       flg_notes             = l_flg_notes(i),
                       flg_doc               = l_flg_doc(i),
                       flg_time              = l_flg_time(i),
                       flg_status_req        = l_flg_status_req(i),
                       flg_status_det        = l_flg_status_det(i),
                       flg_referral          = l_flg_referral(i),
                       id_prof_req           = l_id_prof_req(i),
                       id_prof_performed     = l_id_prof_performed(i),
                       start_time            = l_start_time(i),
                       end_time              = l_end_time(i),
                       id_epis_doc_perform   = l_id_epis_doc_perform(i),
                       desc_perform_notes    = l_desc_perform_notes(i),
                       id_epis_doc_result    = l_id_epis_doc_result(i),
                       desc_result           = l_desc_result(i),
                       flg_status_result     = l_flg_status_result(i),
                       id_exam_codification  = l_id_exam_codification(i),
                       id_room               = l_id_room(i),
                       id_movement           = l_id_movement(i),
                       id_task_dependency    = l_id_task_dependency(i),
                       flg_req_origin_module = l_flg_req_origin_module(i),
                       id_patient            = l_id_patient(i),
                       id_visit              = l_id_visit(i),
                       id_episode            = l_id_episode(i),
                       id_episode_origin     = l_id_episode_origin(i),
                       id_prev_episode       = l_id_prev_episode(i),
                       dt_dg_last_update     = nvl(l_dt_dg_last_update(i), current_timestamp),
                       create_user           = l_create_user(i),
                       create_time           = l_create_time(i),
                       create_institution    = l_create_institution(i),
                       update_user           = l_update_user(i),
                       update_time           = l_update_time(i),
                       update_institution    = l_update_institution(i),
                       notes                 = l_notes(i),
                       notes_technician      = l_notes_technician(i),
                       notes_patient         = l_notes_patient(i),
                       notes_cancel          = l_notes_cancel(i),
                       notes_scheduler       = l_notes_scheduler(i),
                       flg_relevant          = l_flg_relevant(i)
                 WHERE id_exam_req_det = l_id_exam_req_det(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN exams_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE EXAMS_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE EXAMS_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE EXAMS_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE EXAMS_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_exam_req_det_in IN exams_ea.id_exam_req_det%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_exam_req_det = id_exam_req_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_exam_req_det_in IN exams_ea.id_exam_req_det%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_exam_req_det_in => id_exam_req_det_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_EXAM_REQ_DET
    PROCEDURE del_id_exam_req_det
    (
        id_exam_req_det_in IN exams_ea.id_exam_req_det%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_exam_req_det = id_exam_req_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_exam_req_det;

    -- Delete all rows for primary key column ID_EXAM_REQ_DET
    PROCEDURE del_id_exam_req_det
    (
        id_exam_req_det_in IN exams_ea.id_exam_req_det%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_exam_req_det(id_exam_req_det_in => id_exam_req_det_in,
                            handle_error_in    => handle_error_in,
                            rows_out           => rows_out);
    END del_id_exam_req_det;

    PROCEDURE del_eea_id_episode_fk
    (
        id_episode_in   IN exams_ea.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_episode = del_eea_id_episode_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_episode_fk;

    PROCEDURE del_eea_id_episode_fk
    (
        id_episode_in   IN exams_ea.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_episode_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eea_id_episode_fk;

    PROCEDURE del_eea_id_episode_origin_fk
    (
        id_episode_origin_in IN exams_ea.id_episode_origin%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_episode_origin = del_eea_id_episode_origin_fk.id_episode_origin_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_episode_origin_fk;

    PROCEDURE del_eea_id_episode_origin_fk
    (
        id_episode_origin_in IN exams_ea.id_episode_origin%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_episode_origin_fk(id_episode_origin_in => id_episode_origin_in,
                                     handle_error_in      => handle_error_in,
                                     rows_out             => rows_out);
    END del_eea_id_episode_origin_fk;

    PROCEDURE del_eea_id_epis_doc_perform_fk
    (
        id_epis_doc_perform_in IN exams_ea.id_epis_doc_perform%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_epis_doc_perform = del_eea_id_epis_doc_perform_fk.id_epis_doc_perform_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_epis_doc_perform_fk;

    PROCEDURE del_eea_id_epis_doc_perform_fk
    (
        id_epis_doc_perform_in IN exams_ea.id_epis_doc_perform%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_epis_doc_perform_fk(id_epis_doc_perform_in => id_epis_doc_perform_in,
                                       handle_error_in        => handle_error_in,
                                       rows_out               => rows_out);
    END del_eea_id_epis_doc_perform_fk;

    PROCEDURE del_eea_id_epis_doc_result_fk
    (
        id_epis_doc_result_in IN exams_ea.id_epis_doc_result%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_epis_doc_result = del_eea_id_epis_doc_result_fk.id_epis_doc_result_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_epis_doc_result_fk;

    PROCEDURE del_eea_id_epis_doc_result_fk
    (
        id_epis_doc_result_in IN exams_ea.id_epis_doc_result%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_epis_doc_result_fk(id_epis_doc_result_in => id_epis_doc_result_in,
                                      handle_error_in       => handle_error_in,
                                      rows_out              => rows_out);
    END del_eea_id_epis_doc_result_fk;

    PROCEDURE del_eea_id_exam_cat_fk
    (
        id_exam_cat_in  IN exams_ea.id_exam_cat%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_exam_cat = del_eea_id_exam_cat_fk.id_exam_cat_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_exam_cat_fk;

    PROCEDURE del_eea_id_exam_cat_fk
    (
        id_exam_cat_in  IN exams_ea.id_exam_cat%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_exam_cat_fk(id_exam_cat_in  => id_exam_cat_in,
                               handle_error_in => handle_error_in,
                               rows_out        => rows_out);
    END del_eea_id_exam_cat_fk;

    PROCEDURE del_eea_id_exam_fk
    (
        id_exam_in      IN exams_ea.id_exam%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_exam = del_eea_id_exam_fk.id_exam_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_exam_fk;

    PROCEDURE del_eea_id_exam_fk
    (
        id_exam_in      IN exams_ea.id_exam%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_exam_fk(id_exam_in => id_exam_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eea_id_exam_fk;

    PROCEDURE del_eea_id_exam_group_fk
    (
        id_exam_group_in IN exams_ea.id_exam_group%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_exam_group = del_eea_id_exam_group_fk.id_exam_group_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_exam_group_fk;

    PROCEDURE del_eea_id_exam_group_fk
    (
        id_exam_group_in IN exams_ea.id_exam_group%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_exam_group_fk(id_exam_group_in => id_exam_group_in,
                                 handle_error_in  => handle_error_in,
                                 rows_out         => rows_out);
    END del_eea_id_exam_group_fk;

    PROCEDURE del_eea_id_exam_req_det_fk
    (
        id_exam_req_det_in IN exams_ea.id_exam_req_det%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_exam_req_det = del_eea_id_exam_req_det_fk.id_exam_req_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_exam_req_det_fk;

    PROCEDURE del_eea_id_exam_req_det_fk
    (
        id_exam_req_det_in IN exams_ea.id_exam_req_det%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_exam_req_det_fk(id_exam_req_det_in => id_exam_req_det_in,
                                   handle_error_in    => handle_error_in,
                                   rows_out           => rows_out);
    END del_eea_id_exam_req_det_fk;

    PROCEDURE del_eea_id_exam_req_fk
    (
        id_exam_req_in  IN exams_ea.id_exam_req%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_exam_req = del_eea_id_exam_req_fk.id_exam_req_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_exam_req_fk;

    PROCEDURE del_eea_id_exam_req_fk
    (
        id_exam_req_in  IN exams_ea.id_exam_req%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_exam_req_fk(id_exam_req_in  => id_exam_req_in,
                               handle_error_in => handle_error_in,
                               rows_out        => rows_out);
    END del_eea_id_exam_req_fk;

    PROCEDURE del_eea_id_exam_result_fk
    (
        id_exam_result_in IN exams_ea.id_exam_result%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_exam_result = del_eea_id_exam_result_fk.id_exam_result_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_exam_result_fk;

    PROCEDURE del_eea_id_exam_result_fk
    (
        id_exam_result_in IN exams_ea.id_exam_result%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_exam_result_fk(id_exam_result_in => id_exam_result_in,
                                  handle_error_in   => handle_error_in,
                                  rows_out          => rows_out);
    END del_eea_id_exam_result_fk;

    PROCEDURE del_eea_id_movement_fk
    (
        id_movement_in  IN exams_ea.id_movement%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_movement = del_eea_id_movement_fk.id_movement_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_movement_fk;

    PROCEDURE del_eea_id_movement_fk
    (
        id_movement_in  IN exams_ea.id_movement%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_movement_fk(id_movement_in  => id_movement_in,
                               handle_error_in => handle_error_in,
                               rows_out        => rows_out);
    END del_eea_id_movement_fk;

    PROCEDURE del_eea_id_patient_fk
    (
        id_patient_in   IN exams_ea.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_patient = del_eea_id_patient_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_patient_fk;

    PROCEDURE del_eea_id_patient_fk
    (
        id_patient_in   IN exams_ea.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_patient_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eea_id_patient_fk;

    PROCEDURE del_eea_id_prev_episode_fk
    (
        id_prev_episode_in IN exams_ea.id_prev_episode%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_prev_episode = del_eea_id_prev_episode_fk.id_prev_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_prev_episode_fk;

    PROCEDURE del_eea_id_prev_episode_fk
    (
        id_prev_episode_in IN exams_ea.id_prev_episode%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_prev_episode_fk(id_prev_episode_in => id_prev_episode_in,
                                   handle_error_in    => handle_error_in,
                                   rows_out           => rows_out);
    END del_eea_id_prev_episode_fk;

    PROCEDURE del_eea_id_prof_performed_fk
    (
        id_prof_performed_in IN exams_ea.id_prof_performed%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_prof_performed = del_eea_id_prof_performed_fk.id_prof_performed_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_prof_performed_fk;

    PROCEDURE del_eea_id_prof_performed_fk
    (
        id_prof_performed_in IN exams_ea.id_prof_performed%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_prof_performed_fk(id_prof_performed_in => id_prof_performed_in,
                                     handle_error_in      => handle_error_in,
                                     rows_out             => rows_out);
    END del_eea_id_prof_performed_fk;

    PROCEDURE del_eea_id_prof_req_fk
    (
        id_prof_req_in  IN exams_ea.id_prof_req%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_prof_req = del_eea_id_prof_req_fk.id_prof_req_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_prof_req_fk;

    PROCEDURE del_eea_id_prof_req_fk
    (
        id_prof_req_in  IN exams_ea.id_prof_req%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_prof_req_fk(id_prof_req_in  => id_prof_req_in,
                               handle_error_in => handle_error_in,
                               rows_out        => rows_out);
    END del_eea_id_prof_req_fk;

    PROCEDURE del_eea_id_room_fk
    (
        id_room_in      IN exams_ea.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_room = del_eea_id_room_fk.id_room_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_room_fk;

    PROCEDURE del_eea_id_room_fk
    (
        id_room_in      IN exams_ea.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_room_fk(id_room_in => id_room_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eea_id_room_fk;

    PROCEDURE del_eea_id_visit_fk
    (
        id_visit_in     IN exams_ea.id_visit%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exams_ea
         WHERE id_visit = del_eea_id_visit_fk.id_visit_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eea_id_visit_fk;

    PROCEDURE del_eea_id_visit_fk
    (
        id_visit_in     IN exams_ea.id_visit%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eea_id_visit_fk(id_visit_in => id_visit_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eea_id_visit_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM EXAMS_EA';
        ELSE
            RETURN 'DELETE FROM EXAMS_EA WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EXAMS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EXAMS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(exams_ea_inout IN OUT exams_ea%ROWTYPE) IS
    BEGIN
        exams_ea_inout.id_exam_req           := NULL;
        exams_ea_inout.id_exam_req_det       := NULL;
        exams_ea_inout.id_exam_result        := NULL;
        exams_ea_inout.id_exam               := NULL;
        exams_ea_inout.id_exam_group         := NULL;
        exams_ea_inout.dt_req                := NULL;
        exams_ea_inout.dt_begin              := NULL;
        exams_ea_inout.dt_pend_req           := NULL;
        exams_ea_inout.dt_result             := NULL;
        exams_ea_inout.priority              := NULL;
        exams_ea_inout.status_str_req        := NULL;
        exams_ea_inout.status_msg_req        := NULL;
        exams_ea_inout.status_icon_req       := NULL;
        exams_ea_inout.status_flg_req        := NULL;
        exams_ea_inout.status_str            := NULL;
        exams_ea_inout.status_msg            := NULL;
        exams_ea_inout.status_icon           := NULL;
        exams_ea_inout.status_flg            := NULL;
        exams_ea_inout.flg_type              := NULL;
        exams_ea_inout.id_exam_cat           := NULL;
        exams_ea_inout.flg_available         := NULL;
        exams_ea_inout.flg_notes             := NULL;
        exams_ea_inout.flg_doc               := NULL;
        exams_ea_inout.flg_time              := NULL;
        exams_ea_inout.flg_status_req        := NULL;
        exams_ea_inout.flg_status_det        := NULL;
        exams_ea_inout.flg_referral          := NULL;
        exams_ea_inout.id_prof_req           := NULL;
        exams_ea_inout.id_prof_performed     := NULL;
        exams_ea_inout.start_time            := NULL;
        exams_ea_inout.end_time              := NULL;
        exams_ea_inout.id_epis_doc_perform   := NULL;
        exams_ea_inout.desc_perform_notes    := NULL;
        exams_ea_inout.id_epis_doc_result    := NULL;
        exams_ea_inout.desc_result           := NULL;
        exams_ea_inout.flg_status_result     := NULL;
        exams_ea_inout.id_exam_codification  := NULL;
        exams_ea_inout.id_room               := NULL;
        exams_ea_inout.id_movement           := NULL;
        exams_ea_inout.id_task_dependency    := NULL;
        exams_ea_inout.flg_req_origin_module := NULL;
        exams_ea_inout.id_patient            := NULL;
        exams_ea_inout.id_visit              := NULL;
        exams_ea_inout.id_episode            := NULL;
        exams_ea_inout.id_episode_origin     := NULL;
        exams_ea_inout.id_prev_episode       := NULL;
        exams_ea_inout.dt_dg_last_update     := current_timestamp;
        exams_ea_inout.create_user           := NULL;
        exams_ea_inout.create_time           := NULL;
        exams_ea_inout.create_institution    := NULL;
        exams_ea_inout.update_user           := NULL;
        exams_ea_inout.update_time           := NULL;
        exams_ea_inout.update_institution    := NULL;
        exams_ea_inout.notes                 := NULL;
        exams_ea_inout.notes_technician      := NULL;
        exams_ea_inout.notes_patient         := NULL;
        exams_ea_inout.notes_cancel          := NULL;
        exams_ea_inout.notes_scheduler       := NULL;
        exams_ea_inout.flg_relevant          := NULL;
    END initrec;

    FUNCTION initrec RETURN exams_ea%ROWTYPE IS
        l_exams_ea exams_ea%ROWTYPE;
    BEGIN
        l_exams_ea.dt_dg_last_update := current_timestamp;
        RETURN l_exams_ea;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN exams_ea_tc IS
        data exams_ea_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM exams_ea
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN exams_ea_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data exams_ea_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_exams_ea;
/
