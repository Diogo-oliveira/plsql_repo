/*-- Last Change Revision: $Rev: 2027926 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:42 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_analysis_req_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: May 19, 2016 15:5:52
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        dt_analysis_req_hist_in   IN analysis_req_hist.dt_analysis_req_hist%TYPE,
        id_analysis_req_in        IN analysis_req_hist.id_analysis_req%TYPE,
        id_patient_in             IN analysis_req_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN analysis_req_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_origin_in      IN analysis_req_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN analysis_req_hist.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in        IN analysis_req_hist.id_prev_episode%TYPE DEFAULT NULL,
        id_visit_in               IN analysis_req_hist.id_visit%TYPE DEFAULT NULL,
        id_institution_in         IN analysis_req_hist.id_institution%TYPE DEFAULT NULL,
        flg_time_in               IN analysis_req_hist.flg_time%TYPE DEFAULT NULL,
        flg_status_in             IN analysis_req_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_writes_in         IN analysis_req_hist.id_prof_writes%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN analysis_req_hist.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in          IN analysis_req_hist.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_schedule_tstz_in       IN analysis_req_hist.dt_schedule_tstz%TYPE DEFAULT NULL,
        dt_pend_req_tstz_in       IN analysis_req_hist.dt_pend_req_tstz%TYPE DEFAULT NULL,
        flg_priority_in           IN analysis_req_hist.flg_priority%TYPE DEFAULT NULL,
        id_exec_institution_in    IN analysis_req_hist.id_exec_institution%TYPE DEFAULT NULL,
        barcode_in                IN analysis_req_hist.barcode%TYPE DEFAULT NULL,
        id_prof_authorize_in      IN analysis_req_hist.id_prof_authorize%TYPE DEFAULT NULL,
        id_prof_approve_in        IN analysis_req_hist.id_prof_approve%TYPE DEFAULT NULL,
        id_schedule_in            IN analysis_req_hist.id_schedule%TYPE DEFAULT NULL,
        id_sched_consult_in       IN analysis_req_hist.id_sched_consult%TYPE DEFAULT NULL,
        notes_in                  IN analysis_req_hist.notes%TYPE DEFAULT NULL,
        notes_tech_in             IN analysis_req_hist.notes_tech%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN analysis_req_hist.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN analysis_req_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN analysis_req_hist.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN analysis_req_hist.notes_cancel%TYPE DEFAULT NULL,
        id_analysis_group_in      IN analysis_req_hist.id_analysis_group%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN analysis_req_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in    IN analysis_req_hist.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in            IN analysis_req_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN analysis_req_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN analysis_req_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN analysis_req_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN analysis_req_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN analysis_req_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO analysis_req_hist
            (dt_analysis_req_hist,
             id_analysis_req,
             id_patient,
             id_episode,
             id_episode_origin,
             id_episode_destination,
             id_prev_episode,
             id_visit,
             id_institution,
             flg_time,
             flg_status,
             id_prof_writes,
             dt_req_tstz,
             dt_begin_tstz,
             dt_schedule_tstz,
             dt_pend_req_tstz,
             flg_priority,
             id_exec_institution,
             barcode,
             id_prof_authorize,
             id_prof_approve,
             id_schedule,
             id_sched_consult,
             notes,
             notes_tech,
             id_prof_cancel,
             dt_cancel_tstz,
             id_cancel_reason,
             notes_cancel,
             id_analysis_group,
             id_prof_last_update,
             dt_last_update_tstz,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (dt_analysis_req_hist_in,
             id_analysis_req_in,
             id_patient_in,
             id_episode_in,
             id_episode_origin_in,
             id_episode_destination_in,
             id_prev_episode_in,
             id_visit_in,
             id_institution_in,
             flg_time_in,
             flg_status_in,
             id_prof_writes_in,
             dt_req_tstz_in,
             dt_begin_tstz_in,
             dt_schedule_tstz_in,
             dt_pend_req_tstz_in,
             flg_priority_in,
             id_exec_institution_in,
             barcode_in,
             id_prof_authorize_in,
             id_prof_approve_in,
             id_schedule_in,
             id_sched_consult_in,
             notes_in,
             notes_tech_in,
             id_prof_cancel_in,
             dt_cancel_tstz_in,
             id_cancel_reason_in,
             notes_cancel_in,
             id_analysis_group_in,
             id_prof_last_update_in,
             dt_last_update_tstz_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ANALYSIS_REQ_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    IF l_name = 'ARQH_ARQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANALYSIS_REQ',
                                                        value_in           => id_analysis_req_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        dt_analysis_req_hist_in   IN analysis_req_hist.dt_analysis_req_hist%TYPE,
        id_analysis_req_in        IN analysis_req_hist.id_analysis_req%TYPE,
        id_patient_in             IN analysis_req_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN analysis_req_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_origin_in      IN analysis_req_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN analysis_req_hist.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in        IN analysis_req_hist.id_prev_episode%TYPE DEFAULT NULL,
        id_visit_in               IN analysis_req_hist.id_visit%TYPE DEFAULT NULL,
        id_institution_in         IN analysis_req_hist.id_institution%TYPE DEFAULT NULL,
        flg_time_in               IN analysis_req_hist.flg_time%TYPE DEFAULT NULL,
        flg_status_in             IN analysis_req_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_writes_in         IN analysis_req_hist.id_prof_writes%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN analysis_req_hist.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in          IN analysis_req_hist.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_schedule_tstz_in       IN analysis_req_hist.dt_schedule_tstz%TYPE DEFAULT NULL,
        dt_pend_req_tstz_in       IN analysis_req_hist.dt_pend_req_tstz%TYPE DEFAULT NULL,
        flg_priority_in           IN analysis_req_hist.flg_priority%TYPE DEFAULT NULL,
        id_exec_institution_in    IN analysis_req_hist.id_exec_institution%TYPE DEFAULT NULL,
        barcode_in                IN analysis_req_hist.barcode%TYPE DEFAULT NULL,
        id_prof_authorize_in      IN analysis_req_hist.id_prof_authorize%TYPE DEFAULT NULL,
        id_prof_approve_in        IN analysis_req_hist.id_prof_approve%TYPE DEFAULT NULL,
        id_schedule_in            IN analysis_req_hist.id_schedule%TYPE DEFAULT NULL,
        id_sched_consult_in       IN analysis_req_hist.id_sched_consult%TYPE DEFAULT NULL,
        notes_in                  IN analysis_req_hist.notes%TYPE DEFAULT NULL,
        notes_tech_in             IN analysis_req_hist.notes_tech%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN analysis_req_hist.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN analysis_req_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN analysis_req_hist.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN analysis_req_hist.notes_cancel%TYPE DEFAULT NULL,
        id_analysis_group_in      IN analysis_req_hist.id_analysis_group%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN analysis_req_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in    IN analysis_req_hist.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in            IN analysis_req_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN analysis_req_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN analysis_req_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN analysis_req_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN analysis_req_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN analysis_req_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(dt_analysis_req_hist_in   => dt_analysis_req_hist_in,
            id_analysis_req_in        => id_analysis_req_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_destination_in => id_episode_destination_in,
            id_prev_episode_in        => id_prev_episode_in,
            id_visit_in               => id_visit_in,
            id_institution_in         => id_institution_in,
            flg_time_in               => flg_time_in,
            flg_status_in             => flg_status_in,
            id_prof_writes_in         => id_prof_writes_in,
            dt_req_tstz_in            => dt_req_tstz_in,
            dt_begin_tstz_in          => dt_begin_tstz_in,
            dt_schedule_tstz_in       => dt_schedule_tstz_in,
            dt_pend_req_tstz_in       => dt_pend_req_tstz_in,
            flg_priority_in           => flg_priority_in,
            id_exec_institution_in    => id_exec_institution_in,
            barcode_in                => barcode_in,
            id_prof_authorize_in      => id_prof_authorize_in,
            id_prof_approve_in        => id_prof_approve_in,
            id_schedule_in            => id_schedule_in,
            id_sched_consult_in       => id_sched_consult_in,
            notes_in                  => notes_in,
            notes_tech_in             => notes_tech_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            id_analysis_group_in      => id_analysis_group_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_tstz_in    => dt_last_update_tstz_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN analysis_req_hist%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec analysis_req_hist%ROWTYPE := rec_in;
    BEGIN
        ins(dt_analysis_req_hist_in   => l_rec.dt_analysis_req_hist,
            id_analysis_req_in        => l_rec.id_analysis_req,
            id_patient_in             => l_rec.id_patient,
            id_episode_in             => l_rec.id_episode,
            id_episode_origin_in      => l_rec.id_episode_origin,
            id_episode_destination_in => l_rec.id_episode_destination,
            id_prev_episode_in        => l_rec.id_prev_episode,
            id_visit_in               => l_rec.id_visit,
            id_institution_in         => l_rec.id_institution,
            flg_time_in               => l_rec.flg_time,
            flg_status_in             => l_rec.flg_status,
            id_prof_writes_in         => l_rec.id_prof_writes,
            dt_req_tstz_in            => l_rec.dt_req_tstz,
            dt_begin_tstz_in          => l_rec.dt_begin_tstz,
            dt_schedule_tstz_in       => l_rec.dt_schedule_tstz,
            dt_pend_req_tstz_in       => l_rec.dt_pend_req_tstz,
            flg_priority_in           => l_rec.flg_priority,
            id_exec_institution_in    => l_rec.id_exec_institution,
            barcode_in                => l_rec.barcode,
            id_prof_authorize_in      => l_rec.id_prof_authorize,
            id_prof_approve_in        => l_rec.id_prof_approve,
            id_schedule_in            => l_rec.id_schedule,
            id_sched_consult_in       => l_rec.id_sched_consult,
            notes_in                  => l_rec.notes,
            notes_tech_in             => l_rec.notes_tech,
            id_prof_cancel_in         => l_rec.id_prof_cancel,
            dt_cancel_tstz_in         => l_rec.dt_cancel_tstz,
            id_cancel_reason_in       => l_rec.id_cancel_reason,
            notes_cancel_in           => l_rec.notes_cancel,
            id_analysis_group_in      => l_rec.id_analysis_group,
            id_prof_last_update_in    => l_rec.id_prof_last_update,
            dt_last_update_tstz_in    => l_rec.dt_last_update_tstz,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN analysis_req_hist%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN analysis_req_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO analysis_req_hist
                    (dt_analysis_req_hist,
                     id_analysis_req,
                     id_patient,
                     id_episode,
                     id_episode_origin,
                     id_episode_destination,
                     id_prev_episode,
                     id_visit,
                     id_institution,
                     flg_time,
                     flg_status,
                     id_prof_writes,
                     dt_req_tstz,
                     dt_begin_tstz,
                     dt_schedule_tstz,
                     dt_pend_req_tstz,
                     flg_priority,
                     id_exec_institution,
                     barcode,
                     id_prof_authorize,
                     id_prof_approve,
                     id_schedule,
                     id_sched_consult,
                     notes,
                     notes_tech,
                     id_prof_cancel,
                     dt_cancel_tstz,
                     id_cancel_reason,
                     notes_cancel,
                     id_analysis_group,
                     id_prof_last_update,
                     dt_last_update_tstz,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution)
                VALUES
                    (rows_in(indx).dt_analysis_req_hist,
                     rows_in(indx).id_analysis_req,
                     rows_in(indx).id_patient,
                     rows_in(indx).id_episode,
                     rows_in(indx).id_episode_origin,
                     rows_in(indx).id_episode_destination,
                     rows_in(indx).id_prev_episode,
                     rows_in(indx).id_visit,
                     rows_in(indx).id_institution,
                     rows_in(indx).flg_time,
                     rows_in(indx).flg_status,
                     rows_in(indx).id_prof_writes,
                     rows_in(indx).dt_req_tstz,
                     rows_in(indx).dt_begin_tstz,
                     rows_in(indx).dt_schedule_tstz,
                     rows_in(indx).dt_pend_req_tstz,
                     rows_in(indx).flg_priority,
                     rows_in(indx).id_exec_institution,
                     rows_in(indx).barcode,
                     rows_in(indx).id_prof_authorize,
                     rows_in(indx).id_prof_approve,
                     rows_in(indx).id_schedule,
                     rows_in(indx).id_sched_consult,
                     rows_in(indx).notes,
                     rows_in(indx).notes_tech,
                     rows_in(indx).id_prof_cancel,
                     rows_in(indx).dt_cancel_tstz,
                     rows_in(indx).id_cancel_reason,
                     rows_in(indx).notes_cancel,
                     rows_in(indx).id_analysis_group,
                     rows_in(indx).id_prof_last_update,
                     rows_in(indx).dt_last_update_tstz,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ANALYSIS_REQ_HIST _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_analysis_req_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ANALYSIS_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_analysis_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode_origin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_DESTINATION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode_destination,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PREV_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prev_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VISIT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_visit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_WRITES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_writes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REQ_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_req_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BEGIN_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_begin_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_SCHEDULE_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_schedule_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PEND_REQ_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_pend_req_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_PRIORITY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_priority,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXEC_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_exec_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BARCODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .barcode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_AUTHORIZE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_authorize,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_APPROVE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_approve,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHEDULE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_schedule,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHED_CONSULT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_sched_consult,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_TECH _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes_tech,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_cancel_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ANALYSIS_GROUP _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_analysis_group,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_LAST_UPDATE_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_last_update_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'ANALYSIS_REQ_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN analysis_req_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        dt_analysis_req_hist_in    IN analysis_req_hist.dt_analysis_req_hist%TYPE,
        id_analysis_req_in         IN analysis_req_hist.id_analysis_req%TYPE,
        id_patient_in              IN analysis_req_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        id_episode_in              IN analysis_req_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        id_episode_origin_in       IN analysis_req_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin      IN BOOLEAN := TRUE,
        id_episode_destination_in  IN analysis_req_hist.id_episode_destination%TYPE DEFAULT NULL,
        id_episode_destination_nin IN BOOLEAN := TRUE,
        id_prev_episode_in         IN analysis_req_hist.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin        IN BOOLEAN := TRUE,
        id_visit_in                IN analysis_req_hist.id_visit%TYPE DEFAULT NULL,
        id_visit_nin               IN BOOLEAN := TRUE,
        id_institution_in          IN analysis_req_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        flg_time_in                IN analysis_req_hist.flg_time%TYPE DEFAULT NULL,
        flg_time_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN analysis_req_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_prof_writes_in          IN analysis_req_hist.id_prof_writes%TYPE DEFAULT NULL,
        id_prof_writes_nin         IN BOOLEAN := TRUE,
        dt_req_tstz_in             IN analysis_req_hist.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin            IN BOOLEAN := TRUE,
        dt_begin_tstz_in           IN analysis_req_hist.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin          IN BOOLEAN := TRUE,
        dt_schedule_tstz_in        IN analysis_req_hist.dt_schedule_tstz%TYPE DEFAULT NULL,
        dt_schedule_tstz_nin       IN BOOLEAN := TRUE,
        dt_pend_req_tstz_in        IN analysis_req_hist.dt_pend_req_tstz%TYPE DEFAULT NULL,
        dt_pend_req_tstz_nin       IN BOOLEAN := TRUE,
        flg_priority_in            IN analysis_req_hist.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin           IN BOOLEAN := TRUE,
        id_exec_institution_in     IN analysis_req_hist.id_exec_institution%TYPE DEFAULT NULL,
        id_exec_institution_nin    IN BOOLEAN := TRUE,
        barcode_in                 IN analysis_req_hist.barcode%TYPE DEFAULT NULL,
        barcode_nin                IN BOOLEAN := TRUE,
        id_prof_authorize_in       IN analysis_req_hist.id_prof_authorize%TYPE DEFAULT NULL,
        id_prof_authorize_nin      IN BOOLEAN := TRUE,
        id_prof_approve_in         IN analysis_req_hist.id_prof_approve%TYPE DEFAULT NULL,
        id_prof_approve_nin        IN BOOLEAN := TRUE,
        id_schedule_in             IN analysis_req_hist.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin            IN BOOLEAN := TRUE,
        id_sched_consult_in        IN analysis_req_hist.id_sched_consult%TYPE DEFAULT NULL,
        id_sched_consult_nin       IN BOOLEAN := TRUE,
        notes_in                   IN analysis_req_hist.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        notes_tech_in              IN analysis_req_hist.notes_tech%TYPE DEFAULT NULL,
        notes_tech_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN analysis_req_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        dt_cancel_tstz_in          IN analysis_req_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin         IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN analysis_req_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN analysis_req_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_analysis_group_in       IN analysis_req_hist.id_analysis_group%TYPE DEFAULT NULL,
        id_analysis_group_nin      IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN analysis_req_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_tstz_in     IN analysis_req_hist.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin    IN BOOLEAN := TRUE,
        create_user_in             IN analysis_req_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN analysis_req_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN analysis_req_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN analysis_req_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN analysis_req_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN analysis_req_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_id_patient_n             NUMBER(1);
        l_id_episode_n             NUMBER(1);
        l_id_episode_origin_n      NUMBER(1);
        l_id_episode_destination_n NUMBER(1);
        l_id_prev_episode_n        NUMBER(1);
        l_id_visit_n               NUMBER(1);
        l_id_institution_n         NUMBER(1);
        l_flg_time_n               NUMBER(1);
        l_flg_status_n             NUMBER(1);
        l_id_prof_writes_n         NUMBER(1);
        l_dt_req_tstz_n            NUMBER(1);
        l_dt_begin_tstz_n          NUMBER(1);
        l_dt_schedule_tstz_n       NUMBER(1);
        l_dt_pend_req_tstz_n       NUMBER(1);
        l_flg_priority_n           NUMBER(1);
        l_id_exec_institution_n    NUMBER(1);
        l_barcode_n                NUMBER(1);
        l_id_prof_authorize_n      NUMBER(1);
        l_id_prof_approve_n        NUMBER(1);
        l_id_schedule_n            NUMBER(1);
        l_id_sched_consult_n       NUMBER(1);
        l_notes_n                  NUMBER(1);
        l_notes_tech_n             NUMBER(1);
        l_id_prof_cancel_n         NUMBER(1);
        l_dt_cancel_tstz_n         NUMBER(1);
        l_id_cancel_reason_n       NUMBER(1);
        l_notes_cancel_n           NUMBER(1);
        l_id_analysis_group_n      NUMBER(1);
        l_id_prof_last_update_n    NUMBER(1);
        l_dt_last_update_tstz_n    NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
    BEGIN
    
        l_id_patient_n             := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n             := sys.diutil.bool_to_int(id_episode_nin);
        l_id_episode_origin_n      := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_episode_destination_n := sys.diutil.bool_to_int(id_episode_destination_nin);
        l_id_prev_episode_n        := sys.diutil.bool_to_int(id_prev_episode_nin);
        l_id_visit_n               := sys.diutil.bool_to_int(id_visit_nin);
        l_id_institution_n         := sys.diutil.bool_to_int(id_institution_nin);
        l_flg_time_n               := sys.diutil.bool_to_int(flg_time_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_writes_n         := sys.diutil.bool_to_int(id_prof_writes_nin);
        l_dt_req_tstz_n            := sys.diutil.bool_to_int(dt_req_tstz_nin);
        l_dt_begin_tstz_n          := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_schedule_tstz_n       := sys.diutil.bool_to_int(dt_schedule_tstz_nin);
        l_dt_pend_req_tstz_n       := sys.diutil.bool_to_int(dt_pend_req_tstz_nin);
        l_flg_priority_n           := sys.diutil.bool_to_int(flg_priority_nin);
        l_id_exec_institution_n    := sys.diutil.bool_to_int(id_exec_institution_nin);
        l_barcode_n                := sys.diutil.bool_to_int(barcode_nin);
        l_id_prof_authorize_n      := sys.diutil.bool_to_int(id_prof_authorize_nin);
        l_id_prof_approve_n        := sys.diutil.bool_to_int(id_prof_approve_nin);
        l_id_schedule_n            := sys.diutil.bool_to_int(id_schedule_nin);
        l_id_sched_consult_n       := sys.diutil.bool_to_int(id_sched_consult_nin);
        l_notes_n                  := sys.diutil.bool_to_int(notes_nin);
        l_notes_tech_n             := sys.diutil.bool_to_int(notes_tech_nin);
        l_id_prof_cancel_n         := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_tstz_n         := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_cancel_reason_n       := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n           := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_analysis_group_n      := sys.diutil.bool_to_int(id_analysis_group_nin);
        l_id_prof_last_update_n    := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_tstz_n    := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE analysis_req_hist
           SET id_patient             = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_episode             = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_episode_origin      = decode(l_id_episode_origin_n,
                                               0,
                                               id_episode_origin_in,
                                               nvl(id_episode_origin_in, id_episode_origin)),
               id_episode_destination = decode(l_id_episode_destination_n,
                                               0,
                                               id_episode_destination_in,
                                               nvl(id_episode_destination_in, id_episode_destination)),
               id_prev_episode        = decode(l_id_prev_episode_n,
                                               0,
                                               id_prev_episode_in,
                                               nvl(id_prev_episode_in, id_prev_episode)),
               id_visit               = decode(l_id_visit_n, 0, id_visit_in, nvl(id_visit_in, id_visit)),
               id_institution         = decode(l_id_institution_n,
                                               0,
                                               id_institution_in,
                                               nvl(id_institution_in, id_institution)),
               flg_time               = decode(l_flg_time_n, 0, flg_time_in, nvl(flg_time_in, flg_time)),
               flg_status             = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_writes         = decode(l_id_prof_writes_n,
                                               0,
                                               id_prof_writes_in,
                                               nvl(id_prof_writes_in, id_prof_writes)),
               dt_req_tstz            = decode(l_dt_req_tstz_n, 0, dt_req_tstz_in, nvl(dt_req_tstz_in, dt_req_tstz)),
               dt_begin_tstz          = decode(l_dt_begin_tstz_n,
                                               0,
                                               dt_begin_tstz_in,
                                               nvl(dt_begin_tstz_in, dt_begin_tstz)),
               dt_schedule_tstz       = decode(l_dt_schedule_tstz_n,
                                               0,
                                               dt_schedule_tstz_in,
                                               nvl(dt_schedule_tstz_in, dt_schedule_tstz)),
               dt_pend_req_tstz       = decode(l_dt_pend_req_tstz_n,
                                               0,
                                               dt_pend_req_tstz_in,
                                               nvl(dt_pend_req_tstz_in, dt_pend_req_tstz)),
               flg_priority           = decode(l_flg_priority_n, 0, flg_priority_in, nvl(flg_priority_in, flg_priority)),
               id_exec_institution    = decode(l_id_exec_institution_n,
                                               0,
                                               id_exec_institution_in,
                                               nvl(id_exec_institution_in, id_exec_institution)),
               barcode                = decode(l_barcode_n, 0, barcode_in, nvl(barcode_in, barcode)),
               id_prof_authorize      = decode(l_id_prof_authorize_n,
                                               0,
                                               id_prof_authorize_in,
                                               nvl(id_prof_authorize_in, id_prof_authorize)),
               id_prof_approve        = decode(l_id_prof_approve_n,
                                               0,
                                               id_prof_approve_in,
                                               nvl(id_prof_approve_in, id_prof_approve)),
               id_schedule            = decode(l_id_schedule_n, 0, id_schedule_in, nvl(id_schedule_in, id_schedule)),
               id_sched_consult       = decode(l_id_sched_consult_n,
                                               0,
                                               id_sched_consult_in,
                                               nvl(id_sched_consult_in, id_sched_consult)),
               notes                  = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               notes_tech             = decode(l_notes_tech_n, 0, notes_tech_in, nvl(notes_tech_in, notes_tech)),
               id_prof_cancel         = decode(l_id_prof_cancel_n,
                                               0,
                                               id_prof_cancel_in,
                                               nvl(id_prof_cancel_in, id_prof_cancel)),
               dt_cancel_tstz         = decode(l_dt_cancel_tstz_n,
                                               0,
                                               dt_cancel_tstz_in,
                                               nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               id_cancel_reason       = decode(l_id_cancel_reason_n,
                                               0,
                                               id_cancel_reason_in,
                                               nvl(id_cancel_reason_in, id_cancel_reason)),
               notes_cancel           = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               id_analysis_group      = decode(l_id_analysis_group_n,
                                               0,
                                               id_analysis_group_in,
                                               nvl(id_analysis_group_in, id_analysis_group)),
               id_prof_last_update    = decode(l_id_prof_last_update_n,
                                               0,
                                               id_prof_last_update_in,
                                               nvl(id_prof_last_update_in, id_prof_last_update)),
               dt_last_update_tstz    = decode(l_dt_last_update_tstz_n,
                                               0,
                                               dt_last_update_tstz_in,
                                               nvl(dt_last_update_tstz_in, dt_last_update_tstz)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution))
         WHERE dt_analysis_req_hist = dt_analysis_req_hist_in
           AND id_analysis_req = id_analysis_req_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ANALYSIS_REQ_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    IF l_name = 'ARQH_ARQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANALYSIS_REQ',
                                                        value_in           => id_analysis_req_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        dt_analysis_req_hist_in    IN analysis_req_hist.dt_analysis_req_hist%TYPE,
        id_analysis_req_in         IN analysis_req_hist.id_analysis_req%TYPE,
        id_patient_in              IN analysis_req_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        id_episode_in              IN analysis_req_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        id_episode_origin_in       IN analysis_req_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin      IN BOOLEAN := TRUE,
        id_episode_destination_in  IN analysis_req_hist.id_episode_destination%TYPE DEFAULT NULL,
        id_episode_destination_nin IN BOOLEAN := TRUE,
        id_prev_episode_in         IN analysis_req_hist.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin        IN BOOLEAN := TRUE,
        id_visit_in                IN analysis_req_hist.id_visit%TYPE DEFAULT NULL,
        id_visit_nin               IN BOOLEAN := TRUE,
        id_institution_in          IN analysis_req_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        flg_time_in                IN analysis_req_hist.flg_time%TYPE DEFAULT NULL,
        flg_time_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN analysis_req_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_prof_writes_in          IN analysis_req_hist.id_prof_writes%TYPE DEFAULT NULL,
        id_prof_writes_nin         IN BOOLEAN := TRUE,
        dt_req_tstz_in             IN analysis_req_hist.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin            IN BOOLEAN := TRUE,
        dt_begin_tstz_in           IN analysis_req_hist.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin          IN BOOLEAN := TRUE,
        dt_schedule_tstz_in        IN analysis_req_hist.dt_schedule_tstz%TYPE DEFAULT NULL,
        dt_schedule_tstz_nin       IN BOOLEAN := TRUE,
        dt_pend_req_tstz_in        IN analysis_req_hist.dt_pend_req_tstz%TYPE DEFAULT NULL,
        dt_pend_req_tstz_nin       IN BOOLEAN := TRUE,
        flg_priority_in            IN analysis_req_hist.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin           IN BOOLEAN := TRUE,
        id_exec_institution_in     IN analysis_req_hist.id_exec_institution%TYPE DEFAULT NULL,
        id_exec_institution_nin    IN BOOLEAN := TRUE,
        barcode_in                 IN analysis_req_hist.barcode%TYPE DEFAULT NULL,
        barcode_nin                IN BOOLEAN := TRUE,
        id_prof_authorize_in       IN analysis_req_hist.id_prof_authorize%TYPE DEFAULT NULL,
        id_prof_authorize_nin      IN BOOLEAN := TRUE,
        id_prof_approve_in         IN analysis_req_hist.id_prof_approve%TYPE DEFAULT NULL,
        id_prof_approve_nin        IN BOOLEAN := TRUE,
        id_schedule_in             IN analysis_req_hist.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin            IN BOOLEAN := TRUE,
        id_sched_consult_in        IN analysis_req_hist.id_sched_consult%TYPE DEFAULT NULL,
        id_sched_consult_nin       IN BOOLEAN := TRUE,
        notes_in                   IN analysis_req_hist.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        notes_tech_in              IN analysis_req_hist.notes_tech%TYPE DEFAULT NULL,
        notes_tech_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN analysis_req_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        dt_cancel_tstz_in          IN analysis_req_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin         IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN analysis_req_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN analysis_req_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_analysis_group_in       IN analysis_req_hist.id_analysis_group%TYPE DEFAULT NULL,
        id_analysis_group_nin      IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN analysis_req_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_tstz_in     IN analysis_req_hist.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin    IN BOOLEAN := TRUE,
        create_user_in             IN analysis_req_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN analysis_req_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN analysis_req_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN analysis_req_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN analysis_req_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN analysis_req_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(dt_analysis_req_hist_in    => dt_analysis_req_hist_in,
            id_analysis_req_in         => id_analysis_req_in,
            id_patient_in              => id_patient_in,
            id_patient_nin             => id_patient_nin,
            id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            id_episode_origin_in       => id_episode_origin_in,
            id_episode_origin_nin      => id_episode_origin_nin,
            id_episode_destination_in  => id_episode_destination_in,
            id_episode_destination_nin => id_episode_destination_nin,
            id_prev_episode_in         => id_prev_episode_in,
            id_prev_episode_nin        => id_prev_episode_nin,
            id_visit_in                => id_visit_in,
            id_visit_nin               => id_visit_nin,
            id_institution_in          => id_institution_in,
            id_institution_nin         => id_institution_nin,
            flg_time_in                => flg_time_in,
            flg_time_nin               => flg_time_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            id_prof_writes_in          => id_prof_writes_in,
            id_prof_writes_nin         => id_prof_writes_nin,
            dt_req_tstz_in             => dt_req_tstz_in,
            dt_req_tstz_nin            => dt_req_tstz_nin,
            dt_begin_tstz_in           => dt_begin_tstz_in,
            dt_begin_tstz_nin          => dt_begin_tstz_nin,
            dt_schedule_tstz_in        => dt_schedule_tstz_in,
            dt_schedule_tstz_nin       => dt_schedule_tstz_nin,
            dt_pend_req_tstz_in        => dt_pend_req_tstz_in,
            dt_pend_req_tstz_nin       => dt_pend_req_tstz_nin,
            flg_priority_in            => flg_priority_in,
            flg_priority_nin           => flg_priority_nin,
            id_exec_institution_in     => id_exec_institution_in,
            id_exec_institution_nin    => id_exec_institution_nin,
            barcode_in                 => barcode_in,
            barcode_nin                => barcode_nin,
            id_prof_authorize_in       => id_prof_authorize_in,
            id_prof_authorize_nin      => id_prof_authorize_nin,
            id_prof_approve_in         => id_prof_approve_in,
            id_prof_approve_nin        => id_prof_approve_nin,
            id_schedule_in             => id_schedule_in,
            id_schedule_nin            => id_schedule_nin,
            id_sched_consult_in        => id_sched_consult_in,
            id_sched_consult_nin       => id_sched_consult_nin,
            notes_in                   => notes_in,
            notes_nin                  => notes_nin,
            notes_tech_in              => notes_tech_in,
            notes_tech_nin             => notes_tech_nin,
            id_prof_cancel_in          => id_prof_cancel_in,
            id_prof_cancel_nin         => id_prof_cancel_nin,
            dt_cancel_tstz_in          => dt_cancel_tstz_in,
            dt_cancel_tstz_nin         => dt_cancel_tstz_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            notes_cancel_in            => notes_cancel_in,
            notes_cancel_nin           => notes_cancel_nin,
            id_analysis_group_in       => id_analysis_group_in,
            id_analysis_group_nin      => id_analysis_group_nin,
            id_prof_last_update_in     => id_prof_last_update_in,
            id_prof_last_update_nin    => id_prof_last_update_nin,
            dt_last_update_tstz_in     => dt_last_update_tstz_in,
            dt_last_update_tstz_nin    => dt_last_update_tstz_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_patient_in              IN analysis_req_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        id_episode_in              IN analysis_req_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        id_episode_origin_in       IN analysis_req_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin      IN BOOLEAN := TRUE,
        id_episode_destination_in  IN analysis_req_hist.id_episode_destination%TYPE DEFAULT NULL,
        id_episode_destination_nin IN BOOLEAN := TRUE,
        id_prev_episode_in         IN analysis_req_hist.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin        IN BOOLEAN := TRUE,
        id_visit_in                IN analysis_req_hist.id_visit%TYPE DEFAULT NULL,
        id_visit_nin               IN BOOLEAN := TRUE,
        id_institution_in          IN analysis_req_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        flg_time_in                IN analysis_req_hist.flg_time%TYPE DEFAULT NULL,
        flg_time_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN analysis_req_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_prof_writes_in          IN analysis_req_hist.id_prof_writes%TYPE DEFAULT NULL,
        id_prof_writes_nin         IN BOOLEAN := TRUE,
        dt_req_tstz_in             IN analysis_req_hist.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin            IN BOOLEAN := TRUE,
        dt_begin_tstz_in           IN analysis_req_hist.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin          IN BOOLEAN := TRUE,
        dt_schedule_tstz_in        IN analysis_req_hist.dt_schedule_tstz%TYPE DEFAULT NULL,
        dt_schedule_tstz_nin       IN BOOLEAN := TRUE,
        dt_pend_req_tstz_in        IN analysis_req_hist.dt_pend_req_tstz%TYPE DEFAULT NULL,
        dt_pend_req_tstz_nin       IN BOOLEAN := TRUE,
        flg_priority_in            IN analysis_req_hist.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin           IN BOOLEAN := TRUE,
        id_exec_institution_in     IN analysis_req_hist.id_exec_institution%TYPE DEFAULT NULL,
        id_exec_institution_nin    IN BOOLEAN := TRUE,
        barcode_in                 IN analysis_req_hist.barcode%TYPE DEFAULT NULL,
        barcode_nin                IN BOOLEAN := TRUE,
        id_prof_authorize_in       IN analysis_req_hist.id_prof_authorize%TYPE DEFAULT NULL,
        id_prof_authorize_nin      IN BOOLEAN := TRUE,
        id_prof_approve_in         IN analysis_req_hist.id_prof_approve%TYPE DEFAULT NULL,
        id_prof_approve_nin        IN BOOLEAN := TRUE,
        id_schedule_in             IN analysis_req_hist.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin            IN BOOLEAN := TRUE,
        id_sched_consult_in        IN analysis_req_hist.id_sched_consult%TYPE DEFAULT NULL,
        id_sched_consult_nin       IN BOOLEAN := TRUE,
        notes_in                   IN analysis_req_hist.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        notes_tech_in              IN analysis_req_hist.notes_tech%TYPE DEFAULT NULL,
        notes_tech_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN analysis_req_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        dt_cancel_tstz_in          IN analysis_req_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin         IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN analysis_req_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN analysis_req_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_analysis_group_in       IN analysis_req_hist.id_analysis_group%TYPE DEFAULT NULL,
        id_analysis_group_nin      IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN analysis_req_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_tstz_in     IN analysis_req_hist.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin    IN BOOLEAN := TRUE,
        create_user_in             IN analysis_req_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN analysis_req_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN analysis_req_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN analysis_req_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN analysis_req_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN analysis_req_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        where_in                   VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_id_patient_n             NUMBER(1);
        l_id_episode_n             NUMBER(1);
        l_id_episode_origin_n      NUMBER(1);
        l_id_episode_destination_n NUMBER(1);
        l_id_prev_episode_n        NUMBER(1);
        l_id_visit_n               NUMBER(1);
        l_id_institution_n         NUMBER(1);
        l_flg_time_n               NUMBER(1);
        l_flg_status_n             NUMBER(1);
        l_id_prof_writes_n         NUMBER(1);
        l_dt_req_tstz_n            NUMBER(1);
        l_dt_begin_tstz_n          NUMBER(1);
        l_dt_schedule_tstz_n       NUMBER(1);
        l_dt_pend_req_tstz_n       NUMBER(1);
        l_flg_priority_n           NUMBER(1);
        l_id_exec_institution_n    NUMBER(1);
        l_barcode_n                NUMBER(1);
        l_id_prof_authorize_n      NUMBER(1);
        l_id_prof_approve_n        NUMBER(1);
        l_id_schedule_n            NUMBER(1);
        l_id_sched_consult_n       NUMBER(1);
        l_notes_n                  NUMBER(1);
        l_notes_tech_n             NUMBER(1);
        l_id_prof_cancel_n         NUMBER(1);
        l_dt_cancel_tstz_n         NUMBER(1);
        l_id_cancel_reason_n       NUMBER(1);
        l_notes_cancel_n           NUMBER(1);
        l_id_analysis_group_n      NUMBER(1);
        l_id_prof_last_update_n    NUMBER(1);
        l_dt_last_update_tstz_n    NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        dt_analysis_req_hist_in    analysis_req_hist.dt_analysis_req_hist%TYPE;
        id_analysis_req_in         analysis_req_hist.id_analysis_req%TYPE;
    BEGIN
    
        l_id_patient_n             := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n             := sys.diutil.bool_to_int(id_episode_nin);
        l_id_episode_origin_n      := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_episode_destination_n := sys.diutil.bool_to_int(id_episode_destination_nin);
        l_id_prev_episode_n        := sys.diutil.bool_to_int(id_prev_episode_nin);
        l_id_visit_n               := sys.diutil.bool_to_int(id_visit_nin);
        l_id_institution_n         := sys.diutil.bool_to_int(id_institution_nin);
        l_flg_time_n               := sys.diutil.bool_to_int(flg_time_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_writes_n         := sys.diutil.bool_to_int(id_prof_writes_nin);
        l_dt_req_tstz_n            := sys.diutil.bool_to_int(dt_req_tstz_nin);
        l_dt_begin_tstz_n          := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_schedule_tstz_n       := sys.diutil.bool_to_int(dt_schedule_tstz_nin);
        l_dt_pend_req_tstz_n       := sys.diutil.bool_to_int(dt_pend_req_tstz_nin);
        l_flg_priority_n           := sys.diutil.bool_to_int(flg_priority_nin);
        l_id_exec_institution_n    := sys.diutil.bool_to_int(id_exec_institution_nin);
        l_barcode_n                := sys.diutil.bool_to_int(barcode_nin);
        l_id_prof_authorize_n      := sys.diutil.bool_to_int(id_prof_authorize_nin);
        l_id_prof_approve_n        := sys.diutil.bool_to_int(id_prof_approve_nin);
        l_id_schedule_n            := sys.diutil.bool_to_int(id_schedule_nin);
        l_id_sched_consult_n       := sys.diutil.bool_to_int(id_sched_consult_nin);
        l_notes_n                  := sys.diutil.bool_to_int(notes_nin);
        l_notes_tech_n             := sys.diutil.bool_to_int(notes_tech_nin);
        l_id_prof_cancel_n         := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_tstz_n         := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_cancel_reason_n       := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n           := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_analysis_group_n      := sys.diutil.bool_to_int(id_analysis_group_nin);
        l_id_prof_last_update_n    := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_tstz_n    := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE ANALYSIS_REQ_HIST SET ' || ' ID_PATIENT = decode (' || l_id_patient_n ||
                 ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' || ' ID_EPISODE = decode (' ||
                 l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_EPISODE_ORIGIN = decode (' || l_id_episode_origin_n ||
                 ',0,:id_episode_origin_in, NVL (:id_episode_origin_in, ID_EPISODE_ORIGIN)) ' || ',' ||
                 ' ID_EPISODE_DESTINATION = decode (' || l_id_episode_destination_n ||
                 ',0,:id_episode_destination_in, NVL (:id_episode_destination_in, ID_EPISODE_DESTINATION)) ' || ',' ||
                 ' ID_PREV_EPISODE = decode (' || l_id_prev_episode_n ||
                 ',0,:id_prev_episode_in, NVL (:id_prev_episode_in, ID_PREV_EPISODE)) ' || ',' ||
                 ' ID_VISIT = decode (' || l_id_visit_n || ',0,:id_visit_in, NVL (:id_visit_in, ID_VISIT)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' || ' FLG_TIME = decode (' ||
                 l_flg_time_n || ',0,:flg_time_in, NVL (:flg_time_in, FLG_TIME)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_PROF_WRITES = decode (' || l_id_prof_writes_n ||
                 ',0,:id_prof_writes_in, NVL (:id_prof_writes_in, ID_PROF_WRITES)) ' || ',' ||
                 ' DT_REQ_TSTZ = decode (' || l_dt_req_tstz_n ||
                 ',0,:dt_req_tstz_in, NVL (:dt_req_tstz_in, DT_REQ_TSTZ)) ' || ',' || ' DT_BEGIN_TSTZ = decode (' ||
                 l_dt_begin_tstz_n || ',0,:dt_begin_tstz_in, NVL (:dt_begin_tstz_in, DT_BEGIN_TSTZ)) ' || ',' ||
                 ' DT_SCHEDULE_TSTZ = decode (' || l_dt_schedule_tstz_n ||
                 ',0,:dt_schedule_tstz_in, NVL (:dt_schedule_tstz_in, DT_SCHEDULE_TSTZ)) ' || ',' ||
                 ' DT_PEND_REQ_TSTZ = decode (' || l_dt_pend_req_tstz_n ||
                 ',0,:dt_pend_req_tstz_in, NVL (:dt_pend_req_tstz_in, DT_PEND_REQ_TSTZ)) ' || ',' ||
                 ' FLG_PRIORITY = decode (' || l_flg_priority_n ||
                 ',0,:flg_priority_in, NVL (:flg_priority_in, FLG_PRIORITY)) ' || ',' ||
                 ' ID_EXEC_INSTITUTION = decode (' || l_id_exec_institution_n ||
                 ',0,:id_exec_institution_in, NVL (:id_exec_institution_in, ID_EXEC_INSTITUTION)) ' || ',' ||
                 ' BARCODE = decode (' || l_barcode_n || ',0,:barcode_in, NVL (:barcode_in, BARCODE)) ' || ',' ||
                 ' ID_PROF_AUTHORIZE = decode (' || l_id_prof_authorize_n ||
                 ',0,:id_prof_authorize_in, NVL (:id_prof_authorize_in, ID_PROF_AUTHORIZE)) ' || ',' ||
                 ' ID_PROF_APPROVE = decode (' || l_id_prof_approve_n ||
                 ',0,:id_prof_approve_in, NVL (:id_prof_approve_in, ID_PROF_APPROVE)) ' || ',' ||
                 ' ID_SCHEDULE = decode (' || l_id_schedule_n ||
                 ',0,:id_schedule_in, NVL (:id_schedule_in, ID_SCHEDULE)) ' || ',' || ' ID_SCHED_CONSULT = decode (' ||
                 l_id_sched_consult_n || ',0,:id_sched_consult_in, NVL (:id_sched_consult_in, ID_SCHED_CONSULT)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' NOTES_TECH = decode (' || l_notes_tech_n || ',0,:notes_tech_in, NVL (:notes_tech_in, NOTES_TECH)) ' || ',' ||
                 ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                 ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' ||
                 ' DT_CANCEL_TSTZ = decode (' || l_dt_cancel_tstz_n ||
                 ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' ||
                 ' ID_ANALYSIS_GROUP = decode (' || l_id_analysis_group_n ||
                 ',0,:id_analysis_group_in, NVL (:id_analysis_group_in, ID_ANALYSIS_GROUP)) ' || ',' ||
                 ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                 ',0,:id_prof_last_update_in, NVL (:id_prof_last_update_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                 ' DT_LAST_UPDATE_TSTZ = decode (' || l_dt_last_update_tstz_n ||
                 ',0,:dt_last_update_tstz_in, NVL (:dt_last_update_tstz_in, DT_LAST_UPDATE_TSTZ)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_patient_in, id_episode_in, id_episode_origin_in, id_episode_destination_in, id_prev_episode_in, id_visit_in, id_institution_in, flg_time_in, flg_status_in, id_prof_writes_in, dt_req_tstz_in, dt_begin_tstz_in, dt_schedule_tstz_in, dt_pend_req_tstz_in, flg_priority_in, id_exec_institution_in, barcode_in, id_prof_authorize_in, id_prof_approve_in, id_schedule_in, id_sched_consult_in, notes_in, notes_tech_in, id_prof_cancel_in, dt_cancel_tstz_in, id_cancel_reason_in, notes_cancel_in, id_analysis_group_in, id_prof_last_update_in, dt_last_update_tstz_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ANALYSIS_REQ_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    IF l_name = 'ARQH_ARQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANALYSIS_REQ',
                                                        value_in           => id_analysis_req_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_patient_in              IN analysis_req_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        id_episode_in              IN analysis_req_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        id_episode_origin_in       IN analysis_req_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin      IN BOOLEAN := TRUE,
        id_episode_destination_in  IN analysis_req_hist.id_episode_destination%TYPE DEFAULT NULL,
        id_episode_destination_nin IN BOOLEAN := TRUE,
        id_prev_episode_in         IN analysis_req_hist.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin        IN BOOLEAN := TRUE,
        id_visit_in                IN analysis_req_hist.id_visit%TYPE DEFAULT NULL,
        id_visit_nin               IN BOOLEAN := TRUE,
        id_institution_in          IN analysis_req_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        flg_time_in                IN analysis_req_hist.flg_time%TYPE DEFAULT NULL,
        flg_time_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN analysis_req_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_prof_writes_in          IN analysis_req_hist.id_prof_writes%TYPE DEFAULT NULL,
        id_prof_writes_nin         IN BOOLEAN := TRUE,
        dt_req_tstz_in             IN analysis_req_hist.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin            IN BOOLEAN := TRUE,
        dt_begin_tstz_in           IN analysis_req_hist.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin          IN BOOLEAN := TRUE,
        dt_schedule_tstz_in        IN analysis_req_hist.dt_schedule_tstz%TYPE DEFAULT NULL,
        dt_schedule_tstz_nin       IN BOOLEAN := TRUE,
        dt_pend_req_tstz_in        IN analysis_req_hist.dt_pend_req_tstz%TYPE DEFAULT NULL,
        dt_pend_req_tstz_nin       IN BOOLEAN := TRUE,
        flg_priority_in            IN analysis_req_hist.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin           IN BOOLEAN := TRUE,
        id_exec_institution_in     IN analysis_req_hist.id_exec_institution%TYPE DEFAULT NULL,
        id_exec_institution_nin    IN BOOLEAN := TRUE,
        barcode_in                 IN analysis_req_hist.barcode%TYPE DEFAULT NULL,
        barcode_nin                IN BOOLEAN := TRUE,
        id_prof_authorize_in       IN analysis_req_hist.id_prof_authorize%TYPE DEFAULT NULL,
        id_prof_authorize_nin      IN BOOLEAN := TRUE,
        id_prof_approve_in         IN analysis_req_hist.id_prof_approve%TYPE DEFAULT NULL,
        id_prof_approve_nin        IN BOOLEAN := TRUE,
        id_schedule_in             IN analysis_req_hist.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin            IN BOOLEAN := TRUE,
        id_sched_consult_in        IN analysis_req_hist.id_sched_consult%TYPE DEFAULT NULL,
        id_sched_consult_nin       IN BOOLEAN := TRUE,
        notes_in                   IN analysis_req_hist.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        notes_tech_in              IN analysis_req_hist.notes_tech%TYPE DEFAULT NULL,
        notes_tech_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN analysis_req_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        dt_cancel_tstz_in          IN analysis_req_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin         IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN analysis_req_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN analysis_req_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_analysis_group_in       IN analysis_req_hist.id_analysis_group%TYPE DEFAULT NULL,
        id_analysis_group_nin      IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN analysis_req_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_tstz_in     IN analysis_req_hist.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin    IN BOOLEAN := TRUE,
        create_user_in             IN analysis_req_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN analysis_req_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN analysis_req_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN analysis_req_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN analysis_req_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN analysis_req_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        where_in                   VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_patient_in              => id_patient_in,
            id_patient_nin             => id_patient_nin,
            id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            id_episode_origin_in       => id_episode_origin_in,
            id_episode_origin_nin      => id_episode_origin_nin,
            id_episode_destination_in  => id_episode_destination_in,
            id_episode_destination_nin => id_episode_destination_nin,
            id_prev_episode_in         => id_prev_episode_in,
            id_prev_episode_nin        => id_prev_episode_nin,
            id_visit_in                => id_visit_in,
            id_visit_nin               => id_visit_nin,
            id_institution_in          => id_institution_in,
            id_institution_nin         => id_institution_nin,
            flg_time_in                => flg_time_in,
            flg_time_nin               => flg_time_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            id_prof_writes_in          => id_prof_writes_in,
            id_prof_writes_nin         => id_prof_writes_nin,
            dt_req_tstz_in             => dt_req_tstz_in,
            dt_req_tstz_nin            => dt_req_tstz_nin,
            dt_begin_tstz_in           => dt_begin_tstz_in,
            dt_begin_tstz_nin          => dt_begin_tstz_nin,
            dt_schedule_tstz_in        => dt_schedule_tstz_in,
            dt_schedule_tstz_nin       => dt_schedule_tstz_nin,
            dt_pend_req_tstz_in        => dt_pend_req_tstz_in,
            dt_pend_req_tstz_nin       => dt_pend_req_tstz_nin,
            flg_priority_in            => flg_priority_in,
            flg_priority_nin           => flg_priority_nin,
            id_exec_institution_in     => id_exec_institution_in,
            id_exec_institution_nin    => id_exec_institution_nin,
            barcode_in                 => barcode_in,
            barcode_nin                => barcode_nin,
            id_prof_authorize_in       => id_prof_authorize_in,
            id_prof_authorize_nin      => id_prof_authorize_nin,
            id_prof_approve_in         => id_prof_approve_in,
            id_prof_approve_nin        => id_prof_approve_nin,
            id_schedule_in             => id_schedule_in,
            id_schedule_nin            => id_schedule_nin,
            id_sched_consult_in        => id_sched_consult_in,
            id_sched_consult_nin       => id_sched_consult_nin,
            notes_in                   => notes_in,
            notes_nin                  => notes_nin,
            notes_tech_in              => notes_tech_in,
            notes_tech_nin             => notes_tech_nin,
            id_prof_cancel_in          => id_prof_cancel_in,
            id_prof_cancel_nin         => id_prof_cancel_nin,
            dt_cancel_tstz_in          => dt_cancel_tstz_in,
            dt_cancel_tstz_nin         => dt_cancel_tstz_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            notes_cancel_in            => notes_cancel_in,
            notes_cancel_nin           => notes_cancel_nin,
            id_analysis_group_in       => id_analysis_group_in,
            id_analysis_group_nin      => id_analysis_group_nin,
            id_prof_last_update_in     => id_prof_last_update_in,
            id_prof_last_update_nin    => id_prof_last_update_nin,
            dt_last_update_tstz_in     => dt_last_update_tstz_in,
            dt_last_update_tstz_nin    => dt_last_update_tstz_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN analysis_req_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(dt_analysis_req_hist_in   => rec_in.dt_analysis_req_hist,
            id_analysis_req_in        => rec_in.id_analysis_req,
            id_patient_in             => rec_in.id_patient,
            id_episode_in             => rec_in.id_episode,
            id_episode_origin_in      => rec_in.id_episode_origin,
            id_episode_destination_in => rec_in.id_episode_destination,
            id_prev_episode_in        => rec_in.id_prev_episode,
            id_visit_in               => rec_in.id_visit,
            id_institution_in         => rec_in.id_institution,
            flg_time_in               => rec_in.flg_time,
            flg_status_in             => rec_in.flg_status,
            id_prof_writes_in         => rec_in.id_prof_writes,
            dt_req_tstz_in            => rec_in.dt_req_tstz,
            dt_begin_tstz_in          => rec_in.dt_begin_tstz,
            dt_schedule_tstz_in       => rec_in.dt_schedule_tstz,
            dt_pend_req_tstz_in       => rec_in.dt_pend_req_tstz,
            flg_priority_in           => rec_in.flg_priority,
            id_exec_institution_in    => rec_in.id_exec_institution,
            barcode_in                => rec_in.barcode,
            id_prof_authorize_in      => rec_in.id_prof_authorize,
            id_prof_approve_in        => rec_in.id_prof_approve,
            id_schedule_in            => rec_in.id_schedule,
            id_sched_consult_in       => rec_in.id_sched_consult,
            notes_in                  => rec_in.notes,
            notes_tech_in             => rec_in.notes_tech,
            id_prof_cancel_in         => rec_in.id_prof_cancel,
            dt_cancel_tstz_in         => rec_in.dt_cancel_tstz,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            notes_cancel_in           => rec_in.notes_cancel,
            id_analysis_group_in      => rec_in.id_analysis_group,
            id_prof_last_update_in    => rec_in.id_prof_last_update,
            dt_last_update_tstz_in    => rec_in.dt_last_update_tstz,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN analysis_req_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(dt_analysis_req_hist_in   => rec_in.dt_analysis_req_hist,
            id_analysis_req_in        => rec_in.id_analysis_req,
            id_patient_in             => rec_in.id_patient,
            id_episode_in             => rec_in.id_episode,
            id_episode_origin_in      => rec_in.id_episode_origin,
            id_episode_destination_in => rec_in.id_episode_destination,
            id_prev_episode_in        => rec_in.id_prev_episode,
            id_visit_in               => rec_in.id_visit,
            id_institution_in         => rec_in.id_institution,
            flg_time_in               => rec_in.flg_time,
            flg_status_in             => rec_in.flg_status,
            id_prof_writes_in         => rec_in.id_prof_writes,
            dt_req_tstz_in            => rec_in.dt_req_tstz,
            dt_begin_tstz_in          => rec_in.dt_begin_tstz,
            dt_schedule_tstz_in       => rec_in.dt_schedule_tstz,
            dt_pend_req_tstz_in       => rec_in.dt_pend_req_tstz,
            flg_priority_in           => rec_in.flg_priority,
            id_exec_institution_in    => rec_in.id_exec_institution,
            barcode_in                => rec_in.barcode,
            id_prof_authorize_in      => rec_in.id_prof_authorize,
            id_prof_approve_in        => rec_in.id_prof_approve,
            id_schedule_in            => rec_in.id_schedule,
            id_sched_consult_in       => rec_in.id_sched_consult,
            notes_in                  => rec_in.notes,
            notes_tech_in             => rec_in.notes_tech,
            id_prof_cancel_in         => rec_in.id_prof_cancel,
            dt_cancel_tstz_in         => rec_in.dt_cancel_tstz,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            notes_cancel_in           => rec_in.notes_cancel,
            id_analysis_group_in      => rec_in.id_analysis_group,
            id_prof_last_update_in    => rec_in.id_prof_last_update,
            dt_last_update_tstz_in    => rec_in.dt_last_update_tstz,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        dt_analysis_req_hist_in   IN analysis_req_hist.dt_analysis_req_hist%TYPE,
        id_analysis_req_in        IN analysis_req_hist.id_analysis_req%TYPE,
        id_patient_in             IN analysis_req_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN analysis_req_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_origin_in      IN analysis_req_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN analysis_req_hist.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in        IN analysis_req_hist.id_prev_episode%TYPE DEFAULT NULL,
        id_visit_in               IN analysis_req_hist.id_visit%TYPE DEFAULT NULL,
        id_institution_in         IN analysis_req_hist.id_institution%TYPE DEFAULT NULL,
        flg_time_in               IN analysis_req_hist.flg_time%TYPE DEFAULT NULL,
        flg_status_in             IN analysis_req_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_writes_in         IN analysis_req_hist.id_prof_writes%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN analysis_req_hist.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in          IN analysis_req_hist.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_schedule_tstz_in       IN analysis_req_hist.dt_schedule_tstz%TYPE DEFAULT NULL,
        dt_pend_req_tstz_in       IN analysis_req_hist.dt_pend_req_tstz%TYPE DEFAULT NULL,
        flg_priority_in           IN analysis_req_hist.flg_priority%TYPE DEFAULT NULL,
        id_exec_institution_in    IN analysis_req_hist.id_exec_institution%TYPE DEFAULT NULL,
        barcode_in                IN analysis_req_hist.barcode%TYPE DEFAULT NULL,
        id_prof_authorize_in      IN analysis_req_hist.id_prof_authorize%TYPE DEFAULT NULL,
        id_prof_approve_in        IN analysis_req_hist.id_prof_approve%TYPE DEFAULT NULL,
        id_schedule_in            IN analysis_req_hist.id_schedule%TYPE DEFAULT NULL,
        id_sched_consult_in       IN analysis_req_hist.id_sched_consult%TYPE DEFAULT NULL,
        notes_in                  IN analysis_req_hist.notes%TYPE DEFAULT NULL,
        notes_tech_in             IN analysis_req_hist.notes_tech%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN analysis_req_hist.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN analysis_req_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN analysis_req_hist.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN analysis_req_hist.notes_cancel%TYPE DEFAULT NULL,
        id_analysis_group_in      IN analysis_req_hist.id_analysis_group%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN analysis_req_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in    IN analysis_req_hist.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in            IN analysis_req_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN analysis_req_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN analysis_req_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN analysis_req_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN analysis_req_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN analysis_req_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        upd(dt_analysis_req_hist_in   => dt_analysis_req_hist_in,
            id_analysis_req_in        => id_analysis_req_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_destination_in => id_episode_destination_in,
            id_prev_episode_in        => id_prev_episode_in,
            id_visit_in               => id_visit_in,
            id_institution_in         => id_institution_in,
            flg_time_in               => flg_time_in,
            flg_status_in             => flg_status_in,
            id_prof_writes_in         => id_prof_writes_in,
            dt_req_tstz_in            => dt_req_tstz_in,
            dt_begin_tstz_in          => dt_begin_tstz_in,
            dt_schedule_tstz_in       => dt_schedule_tstz_in,
            dt_pend_req_tstz_in       => dt_pend_req_tstz_in,
            flg_priority_in           => flg_priority_in,
            id_exec_institution_in    => id_exec_institution_in,
            barcode_in                => barcode_in,
            id_prof_authorize_in      => id_prof_authorize_in,
            id_prof_approve_in        => id_prof_approve_in,
            id_schedule_in            => id_schedule_in,
            id_sched_consult_in       => id_sched_consult_in,
            notes_in                  => notes_in,
            notes_tech_in             => notes_tech_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            id_analysis_group_in      => id_analysis_group_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_tstz_in    => dt_last_update_tstz_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(dt_analysis_req_hist_in   => dt_analysis_req_hist_in,
                id_analysis_req_in        => id_analysis_req_in,
                id_patient_in             => id_patient_in,
                id_episode_in             => id_episode_in,
                id_episode_origin_in      => id_episode_origin_in,
                id_episode_destination_in => id_episode_destination_in,
                id_prev_episode_in        => id_prev_episode_in,
                id_visit_in               => id_visit_in,
                id_institution_in         => id_institution_in,
                flg_time_in               => flg_time_in,
                flg_status_in             => flg_status_in,
                id_prof_writes_in         => id_prof_writes_in,
                dt_req_tstz_in            => dt_req_tstz_in,
                dt_begin_tstz_in          => dt_begin_tstz_in,
                dt_schedule_tstz_in       => dt_schedule_tstz_in,
                dt_pend_req_tstz_in       => dt_pend_req_tstz_in,
                flg_priority_in           => flg_priority_in,
                id_exec_institution_in    => id_exec_institution_in,
                barcode_in                => barcode_in,
                id_prof_authorize_in      => id_prof_authorize_in,
                id_prof_approve_in        => id_prof_approve_in,
                id_schedule_in            => id_schedule_in,
                id_sched_consult_in       => id_sched_consult_in,
                notes_in                  => notes_in,
                notes_tech_in             => notes_tech_in,
                id_prof_cancel_in         => id_prof_cancel_in,
                dt_cancel_tstz_in         => dt_cancel_tstz_in,
                id_cancel_reason_in       => id_cancel_reason_in,
                notes_cancel_in           => notes_cancel_in,
                id_analysis_group_in      => id_analysis_group_in,
                id_prof_last_update_in    => id_prof_last_update_in,
                dt_last_update_tstz_in    => dt_last_update_tstz_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        dt_analysis_req_hist_in   IN analysis_req_hist.dt_analysis_req_hist%TYPE,
        id_analysis_req_in        IN analysis_req_hist.id_analysis_req%TYPE,
        id_patient_in             IN analysis_req_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN analysis_req_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_origin_in      IN analysis_req_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN analysis_req_hist.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in        IN analysis_req_hist.id_prev_episode%TYPE DEFAULT NULL,
        id_visit_in               IN analysis_req_hist.id_visit%TYPE DEFAULT NULL,
        id_institution_in         IN analysis_req_hist.id_institution%TYPE DEFAULT NULL,
        flg_time_in               IN analysis_req_hist.flg_time%TYPE DEFAULT NULL,
        flg_status_in             IN analysis_req_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_writes_in         IN analysis_req_hist.id_prof_writes%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN analysis_req_hist.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in          IN analysis_req_hist.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_schedule_tstz_in       IN analysis_req_hist.dt_schedule_tstz%TYPE DEFAULT NULL,
        dt_pend_req_tstz_in       IN analysis_req_hist.dt_pend_req_tstz%TYPE DEFAULT NULL,
        flg_priority_in           IN analysis_req_hist.flg_priority%TYPE DEFAULT NULL,
        id_exec_institution_in    IN analysis_req_hist.id_exec_institution%TYPE DEFAULT NULL,
        barcode_in                IN analysis_req_hist.barcode%TYPE DEFAULT NULL,
        id_prof_authorize_in      IN analysis_req_hist.id_prof_authorize%TYPE DEFAULT NULL,
        id_prof_approve_in        IN analysis_req_hist.id_prof_approve%TYPE DEFAULT NULL,
        id_schedule_in            IN analysis_req_hist.id_schedule%TYPE DEFAULT NULL,
        id_sched_consult_in       IN analysis_req_hist.id_sched_consult%TYPE DEFAULT NULL,
        notes_in                  IN analysis_req_hist.notes%TYPE DEFAULT NULL,
        notes_tech_in             IN analysis_req_hist.notes_tech%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN analysis_req_hist.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN analysis_req_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN analysis_req_hist.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN analysis_req_hist.notes_cancel%TYPE DEFAULT NULL,
        id_analysis_group_in      IN analysis_req_hist.id_analysis_group%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN analysis_req_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in    IN analysis_req_hist.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in            IN analysis_req_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN analysis_req_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN analysis_req_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN analysis_req_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN analysis_req_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN analysis_req_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(dt_analysis_req_hist_in,
                id_analysis_req_in,
                id_patient_in,
                id_episode_in,
                id_episode_origin_in,
                id_episode_destination_in,
                id_prev_episode_in,
                id_visit_in,
                id_institution_in,
                flg_time_in,
                flg_status_in,
                id_prof_writes_in,
                dt_req_tstz_in,
                dt_begin_tstz_in,
                dt_schedule_tstz_in,
                dt_pend_req_tstz_in,
                flg_priority_in,
                id_exec_institution_in,
                barcode_in,
                id_prof_authorize_in,
                id_prof_approve_in,
                id_schedule_in,
                id_sched_consult_in,
                notes_in,
                notes_tech_in,
                id_prof_cancel_in,
                dt_cancel_tstz_in,
                id_cancel_reason_in,
                notes_cancel_in,
                id_analysis_group_in,
                id_prof_last_update_in,
                dt_last_update_tstz_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN analysis_req_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_dt_analysis_req_hist   dt_analysis_req_hist_cc;
        l_id_analysis_req        id_analysis_req_cc;
        l_id_patient             id_patient_cc;
        l_id_episode             id_episode_cc;
        l_id_episode_origin      id_episode_origin_cc;
        l_id_episode_destination id_episode_destination_cc;
        l_id_prev_episode        id_prev_episode_cc;
        l_id_visit               id_visit_cc;
        l_id_institution         id_institution_cc;
        l_flg_time               flg_time_cc;
        l_flg_status             flg_status_cc;
        l_id_prof_writes         id_prof_writes_cc;
        l_dt_req_tstz            dt_req_tstz_cc;
        l_dt_begin_tstz          dt_begin_tstz_cc;
        l_dt_schedule_tstz       dt_schedule_tstz_cc;
        l_dt_pend_req_tstz       dt_pend_req_tstz_cc;
        l_flg_priority           flg_priority_cc;
        l_id_exec_institution    id_exec_institution_cc;
        l_barcode                barcode_cc;
        l_id_prof_authorize      id_prof_authorize_cc;
        l_id_prof_approve        id_prof_approve_cc;
        l_id_schedule            id_schedule_cc;
        l_id_sched_consult       id_sched_consult_cc;
        l_notes                  notes_cc;
        l_notes_tech             notes_tech_cc;
        l_id_prof_cancel         id_prof_cancel_cc;
        l_dt_cancel_tstz         dt_cancel_tstz_cc;
        l_id_cancel_reason       id_cancel_reason_cc;
        l_notes_cancel           notes_cancel_cc;
        l_id_analysis_group      id_analysis_group_cc;
        l_id_prof_last_update    id_prof_last_update_cc;
        l_dt_last_update_tstz    dt_last_update_tstz_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_dt_analysis_req_hist(i) := col_in(i).dt_analysis_req_hist;
            l_id_analysis_req(i) := col_in(i).id_analysis_req;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_episode_origin(i) := col_in(i).id_episode_origin;
            l_id_episode_destination(i) := col_in(i).id_episode_destination;
            l_id_prev_episode(i) := col_in(i).id_prev_episode;
            l_id_visit(i) := col_in(i).id_visit;
            l_id_institution(i) := col_in(i).id_institution;
            l_flg_time(i) := col_in(i).flg_time;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_writes(i) := col_in(i).id_prof_writes;
            l_dt_req_tstz(i) := col_in(i).dt_req_tstz;
            l_dt_begin_tstz(i) := col_in(i).dt_begin_tstz;
            l_dt_schedule_tstz(i) := col_in(i).dt_schedule_tstz;
            l_dt_pend_req_tstz(i) := col_in(i).dt_pend_req_tstz;
            l_flg_priority(i) := col_in(i).flg_priority;
            l_id_exec_institution(i) := col_in(i).id_exec_institution;
            l_barcode(i) := col_in(i).barcode;
            l_id_prof_authorize(i) := col_in(i).id_prof_authorize;
            l_id_prof_approve(i) := col_in(i).id_prof_approve;
            l_id_schedule(i) := col_in(i).id_schedule;
            l_id_sched_consult(i) := col_in(i).id_sched_consult;
            l_notes(i) := col_in(i).notes;
            l_notes_tech(i) := col_in(i).notes_tech;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_analysis_group(i) := col_in(i).id_analysis_group;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_dt_last_update_tstz(i) := col_in(i).dt_last_update_tstz;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE analysis_req_hist
                   SET id_patient             = nvl(l_id_patient(i), id_patient),
                       id_episode             = nvl(l_id_episode(i), id_episode),
                       id_episode_origin      = nvl(l_id_episode_origin(i), id_episode_origin),
                       id_episode_destination = nvl(l_id_episode_destination(i), id_episode_destination),
                       id_prev_episode        = nvl(l_id_prev_episode(i), id_prev_episode),
                       id_visit               = nvl(l_id_visit(i), id_visit),
                       id_institution         = nvl(l_id_institution(i), id_institution),
                       flg_time               = nvl(l_flg_time(i), flg_time),
                       flg_status             = nvl(l_flg_status(i), flg_status),
                       id_prof_writes         = nvl(l_id_prof_writes(i), id_prof_writes),
                       dt_req_tstz            = nvl(l_dt_req_tstz(i), dt_req_tstz),
                       dt_begin_tstz          = nvl(l_dt_begin_tstz(i), dt_begin_tstz),
                       dt_schedule_tstz       = nvl(l_dt_schedule_tstz(i), dt_schedule_tstz),
                       dt_pend_req_tstz       = nvl(l_dt_pend_req_tstz(i), dt_pend_req_tstz),
                       flg_priority           = nvl(l_flg_priority(i), flg_priority),
                       id_exec_institution    = nvl(l_id_exec_institution(i), id_exec_institution),
                       barcode                = nvl(l_barcode(i), barcode),
                       id_prof_authorize      = nvl(l_id_prof_authorize(i), id_prof_authorize),
                       id_prof_approve        = nvl(l_id_prof_approve(i), id_prof_approve),
                       id_schedule            = nvl(l_id_schedule(i), id_schedule),
                       id_sched_consult       = nvl(l_id_sched_consult(i), id_sched_consult),
                       notes                  = nvl(l_notes(i), notes),
                       notes_tech             = nvl(l_notes_tech(i), notes_tech),
                       id_prof_cancel         = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       dt_cancel_tstz         = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       id_cancel_reason       = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       notes_cancel           = nvl(l_notes_cancel(i), notes_cancel),
                       id_analysis_group      = nvl(l_id_analysis_group(i), id_analysis_group),
                       id_prof_last_update    = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       dt_last_update_tstz    = nvl(l_dt_last_update_tstz(i), dt_last_update_tstz),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution)
                 WHERE dt_analysis_req_hist = l_dt_analysis_req_hist(i)
                   AND id_analysis_req = l_id_analysis_req(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE analysis_req_hist
                   SET id_patient             = l_id_patient(i),
                       id_episode             = l_id_episode(i),
                       id_episode_origin      = l_id_episode_origin(i),
                       id_episode_destination = l_id_episode_destination(i),
                       id_prev_episode        = l_id_prev_episode(i),
                       id_visit               = l_id_visit(i),
                       id_institution         = l_id_institution(i),
                       flg_time               = l_flg_time(i),
                       flg_status             = l_flg_status(i),
                       id_prof_writes         = l_id_prof_writes(i),
                       dt_req_tstz            = l_dt_req_tstz(i),
                       dt_begin_tstz          = l_dt_begin_tstz(i),
                       dt_schedule_tstz       = l_dt_schedule_tstz(i),
                       dt_pend_req_tstz       = l_dt_pend_req_tstz(i),
                       flg_priority           = l_flg_priority(i),
                       id_exec_institution    = l_id_exec_institution(i),
                       barcode                = l_barcode(i),
                       id_prof_authorize      = l_id_prof_authorize(i),
                       id_prof_approve        = l_id_prof_approve(i),
                       id_schedule            = l_id_schedule(i),
                       id_sched_consult       = l_id_sched_consult(i),
                       notes                  = l_notes(i),
                       notes_tech             = l_notes_tech(i),
                       id_prof_cancel         = l_id_prof_cancel(i),
                       dt_cancel_tstz         = l_dt_cancel_tstz(i),
                       id_cancel_reason       = l_id_cancel_reason(i),
                       notes_cancel           = l_notes_cancel(i),
                       id_analysis_group      = l_id_analysis_group(i),
                       id_prof_last_update    = l_id_prof_last_update(i),
                       dt_last_update_tstz    = l_dt_last_update_tstz(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i)
                 WHERE dt_analysis_req_hist = l_dt_analysis_req_hist(i)
                   AND id_analysis_req = l_id_analysis_req(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN analysis_req_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE ANALYSIS_REQ_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE ANALYSIS_REQ_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE ANALYSIS_REQ_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE ANALYSIS_REQ_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        dt_analysis_req_hist_in IN analysis_req_hist.dt_analysis_req_hist%TYPE,
        id_analysis_req_in      IN analysis_req_hist.id_analysis_req%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_req_hist
         WHERE dt_analysis_req_hist = dt_analysis_req_hist_in
           AND id_analysis_req = id_analysis_req_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        dt_analysis_req_hist_in IN analysis_req_hist.dt_analysis_req_hist%TYPE,
        id_analysis_req_in      IN analysis_req_hist.id_analysis_req%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(dt_analysis_req_hist_in => dt_analysis_req_hist_in,
            id_analysis_req_in      => id_analysis_req_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    
    END del;

    -- Delete all rows for primary key column DT_ANALYSIS_REQ_HIST
    PROCEDURE del_dt_analysis_req_hist
    (
        dt_analysis_req_hist_in IN analysis_req_hist.dt_analysis_req_hist%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_req_hist
         WHERE dt_analysis_req_hist = dt_analysis_req_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_dt_analysis_req_hist;

    -- Delete all rows for primary key column ID_ANALYSIS_REQ
    PROCEDURE del_id_analysis_req
    (
        id_analysis_req_in IN analysis_req_hist.id_analysis_req%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_req_hist
         WHERE id_analysis_req = id_analysis_req_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_analysis_req;

    -- Delete all rows for primary key column DT_ANALYSIS_REQ_HIST
    PROCEDURE del_dt_analysis_req_hist
    (
        dt_analysis_req_hist_in IN analysis_req_hist.dt_analysis_req_hist%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dt_analysis_req_hist(dt_analysis_req_hist_in => dt_analysis_req_hist_in,
                                 handle_error_in         => handle_error_in,
                                 rows_out                => rows_out);
    END del_dt_analysis_req_hist;

    -- Delete all rows for primary key column ID_ANALYSIS_REQ
    PROCEDURE del_id_analysis_req
    (
        id_analysis_req_in IN analysis_req_hist.id_analysis_req%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_analysis_req(id_analysis_req_in => id_analysis_req_in,
                            handle_error_in    => handle_error_in,
                            rows_out           => rows_out);
    END del_id_analysis_req;

    PROCEDURE del_arqh_arq_fk
    (
        id_analysis_req_in IN analysis_req_hist.id_analysis_req%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_req_hist
         WHERE id_analysis_req = del_arqh_arq_fk.id_analysis_req_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_arqh_arq_fk;

    PROCEDURE del_arqh_arq_fk
    (
        id_analysis_req_in IN analysis_req_hist.id_analysis_req%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_arqh_arq_fk(id_analysis_req_in => id_analysis_req_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_arqh_arq_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM ANALYSIS_REQ_HIST';
        ELSE
            RETURN 'DELETE FROM ANALYSIS_REQ_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_REQ_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_REQ_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(analysis_req_hist_inout IN OUT analysis_req_hist%ROWTYPE) IS
    BEGIN
        analysis_req_hist_inout.dt_analysis_req_hist   := current_timestamp;
        analysis_req_hist_inout.id_analysis_req        := NULL;
        analysis_req_hist_inout.id_patient             := NULL;
        analysis_req_hist_inout.id_episode             := NULL;
        analysis_req_hist_inout.id_episode_origin      := NULL;
        analysis_req_hist_inout.id_episode_destination := NULL;
        analysis_req_hist_inout.id_prev_episode        := NULL;
        analysis_req_hist_inout.id_visit               := NULL;
        analysis_req_hist_inout.id_institution         := NULL;
        analysis_req_hist_inout.flg_time               := NULL;
        analysis_req_hist_inout.flg_status             := NULL;
        analysis_req_hist_inout.id_prof_writes         := NULL;
        analysis_req_hist_inout.dt_req_tstz            := NULL;
        analysis_req_hist_inout.dt_begin_tstz          := NULL;
        analysis_req_hist_inout.dt_schedule_tstz       := NULL;
        analysis_req_hist_inout.dt_pend_req_tstz       := NULL;
        analysis_req_hist_inout.flg_priority           := NULL;
        analysis_req_hist_inout.id_exec_institution    := NULL;
        analysis_req_hist_inout.barcode                := NULL;
        analysis_req_hist_inout.id_prof_authorize      := NULL;
        analysis_req_hist_inout.id_prof_approve        := NULL;
        analysis_req_hist_inout.id_schedule            := NULL;
        analysis_req_hist_inout.id_sched_consult       := NULL;
        analysis_req_hist_inout.notes                  := NULL;
        analysis_req_hist_inout.notes_tech             := NULL;
        analysis_req_hist_inout.id_prof_cancel         := NULL;
        analysis_req_hist_inout.dt_cancel_tstz         := NULL;
        analysis_req_hist_inout.id_cancel_reason       := NULL;
        analysis_req_hist_inout.notes_cancel           := NULL;
        analysis_req_hist_inout.id_analysis_group      := NULL;
        analysis_req_hist_inout.id_prof_last_update    := NULL;
        analysis_req_hist_inout.dt_last_update_tstz    := NULL;
        analysis_req_hist_inout.create_user            := NULL;
        analysis_req_hist_inout.create_time            := NULL;
        analysis_req_hist_inout.create_institution     := NULL;
        analysis_req_hist_inout.update_user            := NULL;
        analysis_req_hist_inout.update_time            := NULL;
        analysis_req_hist_inout.update_institution     := NULL;
    END initrec;

    FUNCTION initrec RETURN analysis_req_hist%ROWTYPE IS
        l_analysis_req_hist analysis_req_hist%ROWTYPE;
    BEGIN
        l_analysis_req_hist.dt_analysis_req_hist := current_timestamp;
        RETURN l_analysis_req_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN analysis_req_hist_tc IS
        data analysis_req_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM analysis_req_hist
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN analysis_req_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data analysis_req_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_analysis_req_hist;
/
