/*-- Last Change Revision: $Rev: 2028299 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:56 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_pat_cli_attributes
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 21, 2008 18:24:13
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_pat_cli_attributes_in IN pat_cli_attributes.id_pat_cli_attributes%TYPE,
        id_patient_in            IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        flg_breast_feed_in       IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_pregnancy_in         IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        adw_last_update_in       IN pat_cli_attributes.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in        IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_recm_in               IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        dt_val_recm_in           IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        id_episode_in            IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pat_cli_attributes
            (id_pat_cli_attributes,
             id_patient,
             flg_breast_feed,
             flg_pregnancy,
             adw_last_update,
             id_institution,
             id_recm,
             dt_val_recm,
             id_episode)
        VALUES
            (id_pat_cli_attributes_in,
             id_patient_in,
             flg_breast_feed_in,
             flg_pregnancy_in,
             adw_last_update_in,
             id_institution_in,
             id_recm_in,
             dt_val_recm_in,
             id_episode_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_CLI_ATTRIBUTES');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    IF l_name = 'PTCAT_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PTCAT_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PTCAT_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PTCAT_RECM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RECM',
                                                        value_in           => id_recm_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_pat_cli_attributes_in IN pat_cli_attributes.id_pat_cli_attributes%TYPE,
        id_patient_in            IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        flg_breast_feed_in       IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_pregnancy_in         IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        adw_last_update_in       IN pat_cli_attributes.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in        IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_recm_in               IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        dt_val_recm_in           IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        id_episode_in            IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_pat_cli_attributes_in => id_pat_cli_attributes_in,
            id_patient_in            => id_patient_in,
            flg_breast_feed_in       => flg_breast_feed_in,
            flg_pregnancy_in         => flg_pregnancy_in,
            adw_last_update_in       => adw_last_update_in,
            id_institution_in        => id_institution_in,
            id_recm_in               => id_recm_in,
            dt_val_recm_in           => dt_val_recm_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_cli_attributes%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pat_cli_attributes%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_pat_cli_attributes := next_key(sequence_in);
        END IF;
        ins(id_pat_cli_attributes_in => l_rec.id_pat_cli_attributes,
            id_patient_in            => l_rec.id_patient,
            flg_breast_feed_in       => l_rec.flg_breast_feed,
            flg_pregnancy_in         => l_rec.flg_pregnancy,
            adw_last_update_in       => l_rec.adw_last_update,
            id_institution_in        => l_rec.id_institution,
            id_recm_in               => l_rec.id_recm,
            dt_val_recm_in           => l_rec.dt_val_recm,
            id_episode_in            => l_rec.id_episode,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_cli_attributes%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN pat_cli_attributes.id_pat_cli_attributes%TYPE
    
     IS
        retval pat_cli_attributes.id_pat_cli_attributes%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_pat_cli_attributes.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PAT_CLI_ATTRIBUTES'));
    END next_key;

    PROCEDURE ins
    (
        id_patient_in             IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        flg_breast_feed_in        IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_pregnancy_in          IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        adw_last_update_in        IN pat_cli_attributes.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in         IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_recm_in                IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        dt_val_recm_in            IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        id_episode_in             IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        id_pat_cli_attributes_out IN OUT pat_cli_attributes.id_pat_cli_attributes%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
        l_pky pat_cli_attributes.id_pat_cli_attributes%TYPE := next_key;
    BEGIN
        ins(id_pat_cli_attributes_in => l_pky,
            id_patient_in            => id_patient_in,
            flg_breast_feed_in       => flg_breast_feed_in,
            flg_pregnancy_in         => flg_pregnancy_in,
            adw_last_update_in       => adw_last_update_in,
            id_institution_in        => id_institution_in,
            id_recm_in               => id_recm_in,
            dt_val_recm_in           => dt_val_recm_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        id_pat_cli_attributes_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_patient_in             IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        flg_breast_feed_in        IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_pregnancy_in          IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        adw_last_update_in        IN pat_cli_attributes.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in         IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_recm_in                IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        dt_val_recm_in            IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        id_episode_in             IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        id_pat_cli_attributes_out IN OUT pat_cli_attributes.id_pat_cli_attributes%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_patient_in             => id_patient_in,
            flg_breast_feed_in        => flg_breast_feed_in,
            flg_pregnancy_in          => flg_pregnancy_in,
            adw_last_update_in        => adw_last_update_in,
            id_institution_in         => id_institution_in,
            id_recm_in                => id_recm_in,
            dt_val_recm_in            => dt_val_recm_in,
            id_episode_in             => id_episode_in,
            id_pat_cli_attributes_out => id_pat_cli_attributes_out,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    FUNCTION ins
    (
        id_patient_in      IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        flg_breast_feed_in IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_pregnancy_in   IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        adw_last_update_in IN pat_cli_attributes.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in  IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_recm_in         IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        dt_val_recm_in     IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        id_episode_in      IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) RETURN pat_cli_attributes.id_pat_cli_attributes%TYPE IS
        l_pky pat_cli_attributes.id_pat_cli_attributes%TYPE := next_key;
    BEGIN
        ins(id_pat_cli_attributes_in => l_pky,
            id_patient_in            => id_patient_in,
            flg_breast_feed_in       => flg_breast_feed_in,
            flg_pregnancy_in         => flg_pregnancy_in,
            adw_last_update_in       => adw_last_update_in,
            id_institution_in        => id_institution_in,
            id_recm_in               => id_recm_in,
            dt_val_recm_in           => dt_val_recm_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_patient_in      IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        flg_breast_feed_in IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_pregnancy_in   IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        adw_last_update_in IN pat_cli_attributes.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in  IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_recm_in         IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        dt_val_recm_in     IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        id_episode_in      IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in    IN BOOLEAN := TRUE
    ) RETURN pat_cli_attributes.id_pat_cli_attributes%TYPE IS
        l_pky    pat_cli_attributes.id_pat_cli_attributes%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_cli_attributes_in => l_pky,
            id_patient_in            => id_patient_in,
            flg_breast_feed_in       => flg_breast_feed_in,
            flg_pregnancy_in         => flg_pregnancy_in,
            adw_last_update_in       => adw_last_update_in,
            id_institution_in        => id_institution_in,
            id_recm_in               => id_recm_in,
            dt_val_recm_in           => dt_val_recm_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_patient_in      IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        flg_breast_feed_in IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_pregnancy_in   IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        adw_last_update_in IN pat_cli_attributes.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in  IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_recm_in         IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        dt_val_recm_in     IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        id_episode_in      IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
        l_pky pat_cli_attributes.id_pat_cli_attributes%TYPE := next_key;
    BEGIN
        ins(id_pat_cli_attributes_in => l_pky,
            id_patient_in            => id_patient_in,
            flg_breast_feed_in       => flg_breast_feed_in,
            flg_pregnancy_in         => flg_pregnancy_in,
            adw_last_update_in       => adw_last_update_in,
            id_institution_in        => id_institution_in,
            id_recm_in               => id_recm_in,
            dt_val_recm_in           => dt_val_recm_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_patient_in      IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        flg_breast_feed_in IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_pregnancy_in   IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        adw_last_update_in IN pat_cli_attributes.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in  IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_recm_in         IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        dt_val_recm_in     IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        id_episode_in      IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        l_pky    pat_cli_attributes.id_pat_cli_attributes%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_cli_attributes_in => l_pky,
            id_patient_in            => id_patient_in,
            flg_breast_feed_in       => flg_breast_feed_in,
            flg_pregnancy_in         => flg_pregnancy_in,
            adw_last_update_in       => adw_last_update_in,
            id_institution_in        => id_institution_in,
            id_recm_in               => id_recm_in,
            dt_val_recm_in           => dt_val_recm_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_cli_attributes_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO pat_cli_attributes
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_CLI_ATTRIBUTES _' || indx,
                                                        value_in           => rows_in(indx).id_pat_cli_attributes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_BREAST_FEED _' || indx,
                                                        value_in           => rows_in(indx).flg_breast_feed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_PREGNANCY _' || indx,
                                                        value_in           => rows_in(indx).flg_pregnancy,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ADW_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).adw_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RECM _' || indx,
                                                        value_in           => rows_in(indx).id_recm,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_VAL_RECM _' || indx,
                                                        value_in           => rows_in(indx).dt_val_recm,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PAT_CLI_ATTRIBUTES',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_cli_attributes_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_pat_cli_attributes_in IN pat_cli_attributes.id_pat_cli_attributes%TYPE,
        id_patient_in            IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        id_patient_nin           IN BOOLEAN := TRUE,
        flg_breast_feed_in       IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_breast_feed_nin      IN BOOLEAN := TRUE,
        flg_pregnancy_in         IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        flg_pregnancy_nin        IN BOOLEAN := TRUE,
        adw_last_update_in       IN pat_cli_attributes.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin      IN BOOLEAN := TRUE,
        id_institution_in        IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_institution_nin       IN BOOLEAN := TRUE,
        id_recm_in               IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        id_recm_nin              IN BOOLEAN := TRUE,
        dt_val_recm_in           IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        dt_val_recm_nin          IN BOOLEAN := TRUE,
        id_episode_in            IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_rows_out          table_varchar;
        l_id_patient_n      NUMBER(1);
        l_flg_breast_feed_n NUMBER(1);
        l_flg_pregnancy_n   NUMBER(1);
        l_adw_last_update_n NUMBER(1);
        l_id_institution_n  NUMBER(1);
        l_id_recm_n         NUMBER(1);
        l_dt_val_recm_n     NUMBER(1);
        l_id_episode_n      NUMBER(1);
    BEGIN
    
        l_id_patient_n      := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_breast_feed_n := sys.diutil.bool_to_int(flg_breast_feed_nin);
        l_flg_pregnancy_n   := sys.diutil.bool_to_int(flg_pregnancy_nin);
        l_adw_last_update_n := sys.diutil.bool_to_int(adw_last_update_nin);
        l_id_institution_n  := sys.diutil.bool_to_int(id_institution_nin);
        l_id_recm_n         := sys.diutil.bool_to_int(id_recm_nin);
        l_dt_val_recm_n     := sys.diutil.bool_to_int(dt_val_recm_nin);
        l_id_episode_n      := sys.diutil.bool_to_int(id_episode_nin);
    
        UPDATE pat_cli_attributes
           SET id_patient      = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               flg_breast_feed = decode(l_flg_breast_feed_n,
                                        0,
                                        flg_breast_feed_in,
                                        nvl(flg_breast_feed_in, flg_breast_feed)),
               flg_pregnancy   = decode(l_flg_pregnancy_n, 0, flg_pregnancy_in, nvl(flg_pregnancy_in, flg_pregnancy)),
               adw_last_update = decode(l_adw_last_update_n,
                                        0,
                                        adw_last_update_in,
                                        nvl(adw_last_update_in, adw_last_update)),
               id_institution  = decode(l_id_institution_n, 0, id_institution_in, nvl(id_institution_in, id_institution)),
               id_recm         = decode(l_id_recm_n, 0, id_recm_in, nvl(id_recm_in, id_recm)),
               dt_val_recm     = decode(l_dt_val_recm_n, 0, dt_val_recm_in, nvl(dt_val_recm_in, dt_val_recm)),
               id_episode      = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode))
         WHERE id_pat_cli_attributes = id_pat_cli_attributes_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_CLI_ATTRIBUTES');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    IF l_name = 'PTCAT_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PTCAT_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PTCAT_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PTCAT_RECM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RECM',
                                                        value_in           => id_recm_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pat_cli_attributes_in IN pat_cli_attributes.id_pat_cli_attributes%TYPE,
        id_patient_in            IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        id_patient_nin           IN BOOLEAN := TRUE,
        flg_breast_feed_in       IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_breast_feed_nin      IN BOOLEAN := TRUE,
        flg_pregnancy_in         IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        flg_pregnancy_nin        IN BOOLEAN := TRUE,
        adw_last_update_in       IN pat_cli_attributes.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin      IN BOOLEAN := TRUE,
        id_institution_in        IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_institution_nin       IN BOOLEAN := TRUE,
        id_recm_in               IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        id_recm_nin              IN BOOLEAN := TRUE,
        dt_val_recm_in           IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        dt_val_recm_nin          IN BOOLEAN := TRUE,
        id_episode_in            IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_cli_attributes_in => id_pat_cli_attributes_in,
            id_patient_in            => id_patient_in,
            id_patient_nin           => id_patient_nin,
            flg_breast_feed_in       => flg_breast_feed_in,
            flg_breast_feed_nin      => flg_breast_feed_nin,
            flg_pregnancy_in         => flg_pregnancy_in,
            flg_pregnancy_nin        => flg_pregnancy_nin,
            adw_last_update_in       => adw_last_update_in,
            adw_last_update_nin      => adw_last_update_nin,
            id_institution_in        => id_institution_in,
            id_institution_nin       => id_institution_nin,
            id_recm_in               => id_recm_in,
            id_recm_nin              => id_recm_nin,
            dt_val_recm_in           => dt_val_recm_in,
            dt_val_recm_nin          => dt_val_recm_nin,
            id_episode_in            => id_episode_in,
            id_episode_nin           => id_episode_nin,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_patient_in       IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        id_patient_nin      IN BOOLEAN := TRUE,
        flg_breast_feed_in  IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_breast_feed_nin IN BOOLEAN := TRUE,
        flg_pregnancy_in    IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        flg_pregnancy_nin   IN BOOLEAN := TRUE,
        adw_last_update_in  IN pat_cli_attributes.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin IN BOOLEAN := TRUE,
        id_institution_in   IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_institution_nin  IN BOOLEAN := TRUE,
        id_recm_in          IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        id_recm_nin         IN BOOLEAN := TRUE,
        dt_val_recm_in      IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        dt_val_recm_nin     IN BOOLEAN := TRUE,
        id_episode_in       IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        id_episode_nin      IN BOOLEAN := TRUE,
        where_in            VARCHAR2 DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            IN OUT table_varchar
    ) IS
        l_sql                    VARCHAR2(32767);
        l_rows_out               table_varchar;
        l_id_patient_n           NUMBER(1);
        l_flg_breast_feed_n      NUMBER(1);
        l_flg_pregnancy_n        NUMBER(1);
        l_adw_last_update_n      NUMBER(1);
        l_id_institution_n       NUMBER(1);
        l_id_recm_n              NUMBER(1);
        l_dt_val_recm_n          NUMBER(1);
        l_id_episode_n           NUMBER(1);
        id_pat_cli_attributes_in pat_cli_attributes.id_pat_cli_attributes%TYPE;
    BEGIN
    
        l_id_patient_n      := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_breast_feed_n := sys.diutil.bool_to_int(flg_breast_feed_nin);
        l_flg_pregnancy_n   := sys.diutil.bool_to_int(flg_pregnancy_nin);
        l_adw_last_update_n := sys.diutil.bool_to_int(adw_last_update_nin);
        l_id_institution_n  := sys.diutil.bool_to_int(id_institution_nin);
        l_id_recm_n         := sys.diutil.bool_to_int(id_recm_nin);
        l_dt_val_recm_n     := sys.diutil.bool_to_int(dt_val_recm_nin);
        l_id_episode_n      := sys.diutil.bool_to_int(id_episode_nin);
    
        l_sql := 'UPDATE PAT_CLI_ATTRIBUTES SET ' || ' ID_PATIENT = decode (' || l_id_patient_n ||
                 ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' || ' FLG_BREAST_FEED = decode (' ||
                 l_flg_breast_feed_n || ',0,:flg_breast_feed_in, NVL (:flg_breast_feed_in, FLG_BREAST_FEED)) ' || ',' ||
                 ' FLG_PREGNANCY = decode (' || l_flg_pregnancy_n ||
                 ',0,:flg_pregnancy_in, NVL (:flg_pregnancy_in, FLG_PREGNANCY)) ' || ',' ||
                 ' ADW_LAST_UPDATE = decode (' || l_adw_last_update_n ||
                 ',0,:adw_last_update_in, NVL (:adw_last_update_in, ADW_LAST_UPDATE)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' || ' ID_RECM = decode (' ||
                 l_id_recm_n || ',0,:id_recm_in, NVL (:id_recm_in, ID_RECM)) ' || ',' || ' DT_VAL_RECM = decode (' ||
                 l_dt_val_recm_n || ',0,:dt_val_recm_in, NVL (:dt_val_recm_in, DT_VAL_RECM)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_patient_in, flg_breast_feed_in, flg_pregnancy_in, adw_last_update_in, id_institution_in, id_recm_in, dt_val_recm_in, id_episode_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_CLI_ATTRIBUTES');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    IF l_name = 'PTCAT_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PTCAT_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PTCAT_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PTCAT_RECM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RECM',
                                                        value_in           => id_recm_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_patient_in       IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        id_patient_nin      IN BOOLEAN := TRUE,
        flg_breast_feed_in  IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_breast_feed_nin IN BOOLEAN := TRUE,
        flg_pregnancy_in    IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        flg_pregnancy_nin   IN BOOLEAN := TRUE,
        adw_last_update_in  IN pat_cli_attributes.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin IN BOOLEAN := TRUE,
        id_institution_in   IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_institution_nin  IN BOOLEAN := TRUE,
        id_recm_in          IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        id_recm_nin         IN BOOLEAN := TRUE,
        dt_val_recm_in      IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        dt_val_recm_nin     IN BOOLEAN := TRUE,
        id_episode_in       IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        id_episode_nin      IN BOOLEAN := TRUE,
        where_in            VARCHAR2 DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_patient_in       => id_patient_in,
            id_patient_nin      => id_patient_nin,
            flg_breast_feed_in  => flg_breast_feed_in,
            flg_breast_feed_nin => flg_breast_feed_nin,
            flg_pregnancy_in    => flg_pregnancy_in,
            flg_pregnancy_nin   => flg_pregnancy_nin,
            adw_last_update_in  => adw_last_update_in,
            adw_last_update_nin => adw_last_update_nin,
            id_institution_in   => id_institution_in,
            id_institution_nin  => id_institution_nin,
            id_recm_in          => id_recm_in,
            id_recm_nin         => id_recm_nin,
            dt_val_recm_in      => dt_val_recm_in,
            dt_val_recm_nin     => dt_val_recm_nin,
            id_episode_in       => id_episode_in,
            id_episode_nin      => id_episode_nin,
            where_in            => where_in,
            handle_error_in     => handle_error_in,
            rows_out            => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_cli_attributes%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_cli_attributes_in => rec_in.id_pat_cli_attributes,
            id_patient_in            => rec_in.id_patient,
            flg_breast_feed_in       => rec_in.flg_breast_feed,
            flg_pregnancy_in         => rec_in.flg_pregnancy,
            adw_last_update_in       => rec_in.adw_last_update,
            id_institution_in        => rec_in.id_institution,
            id_recm_in               => rec_in.id_recm,
            dt_val_recm_in           => rec_in.dt_val_recm,
            id_episode_in            => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_cli_attributes%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_cli_attributes_in => rec_in.id_pat_cli_attributes,
            id_patient_in            => rec_in.id_patient,
            flg_breast_feed_in       => rec_in.flg_breast_feed,
            flg_pregnancy_in         => rec_in.flg_pregnancy,
            adw_last_update_in       => rec_in.adw_last_update,
            id_institution_in        => rec_in.id_institution,
            id_recm_in               => rec_in.id_recm,
            dt_val_recm_in           => rec_in.dt_val_recm,
            id_episode_in            => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_pat_cli_attributes_in IN pat_cli_attributes.id_pat_cli_attributes%TYPE,
        id_patient_in            IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        flg_breast_feed_in       IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_pregnancy_in         IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        adw_last_update_in       IN pat_cli_attributes.adw_last_update%TYPE DEFAULT NULL,
        id_institution_in        IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_recm_in               IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        dt_val_recm_in           IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        id_episode_in            IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_cli_attributes_in => id_pat_cli_attributes_in,
            id_patient_in            => id_patient_in,
            flg_breast_feed_in       => flg_breast_feed_in,
            flg_pregnancy_in         => flg_pregnancy_in,
            adw_last_update_in       => adw_last_update_in,
            id_institution_in        => id_institution_in,
            id_recm_in               => id_recm_in,
            dt_val_recm_in           => dt_val_recm_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_pat_cli_attributes_in => id_pat_cli_attributes_in,
                id_patient_in            => id_patient_in,
                flg_breast_feed_in       => flg_breast_feed_in,
                flg_pregnancy_in         => flg_pregnancy_in,
                adw_last_update_in       => adw_last_update_in,
                id_institution_in        => id_institution_in,
                id_recm_in               => id_recm_in,
                dt_val_recm_in           => dt_val_recm_in,
                id_episode_in            => id_episode_in,
                handle_error_in          => handle_error_in,
                rows_out                 => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_pat_cli_attributes_in IN pat_cli_attributes.id_pat_cli_attributes%TYPE,
        id_patient_in            IN pat_cli_attributes.id_patient%TYPE DEFAULT NULL,
        flg_breast_feed_in       IN pat_cli_attributes.flg_breast_feed%TYPE DEFAULT NULL,
        flg_pregnancy_in         IN pat_cli_attributes.flg_pregnancy%TYPE DEFAULT NULL,
        adw_last_update_in       IN pat_cli_attributes.adw_last_update%TYPE DEFAULT NULL,
        id_institution_in        IN pat_cli_attributes.id_institution%TYPE DEFAULT NULL,
        id_recm_in               IN pat_cli_attributes.id_recm%TYPE DEFAULT NULL,
        dt_val_recm_in           IN pat_cli_attributes.dt_val_recm%TYPE DEFAULT NULL,
        id_episode_in            IN pat_cli_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_pat_cli_attributes_in,
                id_patient_in,
                flg_breast_feed_in,
                flg_pregnancy_in,
                adw_last_update_in,
                id_institution_in,
                id_recm_in,
                dt_val_recm_in,
                id_episode_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pat_cli_attributes_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_pat_cli_attributes id_pat_cli_attributes_cc;
        l_id_patient            id_patient_cc;
        l_flg_breast_feed       flg_breast_feed_cc;
        l_flg_pregnancy         flg_pregnancy_cc;
        l_adw_last_update       adw_last_update_cc;
        l_id_institution        id_institution_cc;
        l_id_recm               id_recm_cc;
        l_dt_val_recm           dt_val_recm_cc;
        l_id_episode            id_episode_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_pat_cli_attributes(i) := col_in(i).id_pat_cli_attributes;
            l_id_patient(i) := col_in(i).id_patient;
            l_flg_breast_feed(i) := col_in(i).flg_breast_feed;
            l_flg_pregnancy(i) := col_in(i).flg_pregnancy;
            l_adw_last_update(i) := col_in(i).adw_last_update;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_recm(i) := col_in(i).id_recm;
            l_dt_val_recm(i) := col_in(i).dt_val_recm;
            l_id_episode(i) := col_in(i).id_episode;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_cli_attributes
                   SET id_patient      = nvl(l_id_patient(i), id_patient),
                       flg_breast_feed = nvl(l_flg_breast_feed(i), flg_breast_feed),
                       flg_pregnancy   = nvl(l_flg_pregnancy(i), flg_pregnancy),
                       adw_last_update = nvl(l_adw_last_update(i), adw_last_update),
                       id_institution  = nvl(l_id_institution(i), id_institution),
                       id_recm         = nvl(l_id_recm(i), id_recm),
                       dt_val_recm     = nvl(l_dt_val_recm(i), dt_val_recm),
                       id_episode      = nvl(l_id_episode(i), id_episode)
                 WHERE id_pat_cli_attributes = l_id_pat_cli_attributes(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_cli_attributes
                   SET id_patient      = l_id_patient(i),
                       flg_breast_feed = l_flg_breast_feed(i),
                       flg_pregnancy   = l_flg_pregnancy(i),
                       adw_last_update = l_adw_last_update(i),
                       id_institution  = l_id_institution(i),
                       id_recm         = l_id_recm(i),
                       dt_val_recm     = l_dt_val_recm(i),
                       id_episode      = l_id_episode(i)
                 WHERE id_pat_cli_attributes = l_id_pat_cli_attributes(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pat_cli_attributes_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PAT_CLI_ATTRIBUTES
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PAT_CLI_ATTRIBUTES
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_CLI_ATTRIBUTES set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PAT_CLI_ATTRIBUTES set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_pat_cli_attributes_in IN pat_cli_attributes.id_pat_cli_attributes%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_cli_attributes
         WHERE id_pat_cli_attributes = id_pat_cli_attributes_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_pat_cli_attributes_in IN pat_cli_attributes.id_pat_cli_attributes%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_pat_cli_attributes_in => id_pat_cli_attributes_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PAT_CLI_ATTRIBUTES
    PROCEDURE del_id_pat_cli_attributes
    (
        id_pat_cli_attributes_in IN pat_cli_attributes.id_pat_cli_attributes%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_cli_attributes
         WHERE id_pat_cli_attributes = id_pat_cli_attributes_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_pat_cli_attributes;

    -- Delete all rows for primary key column ID_PAT_CLI_ATTRIBUTES
    PROCEDURE del_id_pat_cli_attributes
    (
        id_pat_cli_attributes_in IN pat_cli_attributes.id_pat_cli_attributes%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_pat_cli_attributes(id_pat_cli_attributes_in => id_pat_cli_attributes_in,
                                  handle_error_in          => handle_error_in,
                                  rows_out                 => rows_out);
    END del_id_pat_cli_attributes;

    PROCEDURE del_ptcat_epis_fk
    (
        id_episode_in   IN pat_cli_attributes.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_cli_attributes
         WHERE id_episode = del_ptcat_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptcat_epis_fk;

    PROCEDURE del_ptcat_epis_fk
    (
        id_episode_in   IN pat_cli_attributes.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptcat_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptcat_epis_fk;

    PROCEDURE del_ptcat_inst_fk
    (
        id_institution_in IN pat_cli_attributes.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_cli_attributes
         WHERE id_institution = del_ptcat_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptcat_inst_fk;

    PROCEDURE del_ptcat_inst_fk
    (
        id_institution_in IN pat_cli_attributes.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptcat_inst_fk(id_institution_in => id_institution_in,
                          handle_error_in   => handle_error_in,
                          rows_out          => rows_out);
    END del_ptcat_inst_fk;

    PROCEDURE del_ptcat_pat_fk
    (
        id_patient_in   IN pat_cli_attributes.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_cli_attributes
         WHERE id_patient = del_ptcat_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptcat_pat_fk;

    PROCEDURE del_ptcat_pat_fk
    (
        id_patient_in   IN pat_cli_attributes.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptcat_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptcat_pat_fk;

    PROCEDURE del_ptcat_recm_fk
    (
        id_recm_in      IN pat_cli_attributes.id_recm%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_cli_attributes
         WHERE id_recm = del_ptcat_recm_fk.id_recm_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptcat_recm_fk;

    PROCEDURE del_ptcat_recm_fk
    (
        id_recm_in      IN pat_cli_attributes.id_recm%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptcat_recm_fk(id_recm_in => id_recm_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptcat_recm_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PAT_CLI_ATTRIBUTES';
        ELSE
            RETURN 'DELETE FROM PAT_CLI_ATTRIBUTES WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_CLI_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_CLI_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pat_cli_attributes_inout IN OUT pat_cli_attributes%ROWTYPE) IS
    BEGIN
        pat_cli_attributes_inout.id_pat_cli_attributes := NULL;
        pat_cli_attributes_inout.id_patient            := NULL;
        pat_cli_attributes_inout.flg_breast_feed       := NULL;
        pat_cli_attributes_inout.flg_pregnancy         := NULL;
        pat_cli_attributes_inout.adw_last_update       := SYSDATE;
        pat_cli_attributes_inout.id_institution        := NULL;
        pat_cli_attributes_inout.id_recm               := NULL;
        pat_cli_attributes_inout.dt_val_recm           := NULL;
        pat_cli_attributes_inout.id_episode            := NULL;
    END initrec;

    FUNCTION initrec RETURN pat_cli_attributes%ROWTYPE IS
        l_pat_cli_attributes pat_cli_attributes%ROWTYPE;
    BEGIN
        l_pat_cli_attributes.adw_last_update := SYSDATE;
        RETURN l_pat_cli_attributes;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pat_cli_attributes_tc IS
        data pat_cli_attributes_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pat_cli_attributes
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pat_cli_attributes_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pat_cli_attributes_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pat_cli_attributes;
/
