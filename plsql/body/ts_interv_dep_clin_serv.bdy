/*-- Last Change Revision: $Rev: 2028231 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:33 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_interv_dep_clin_serv
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: October 16, 2008 18:36:21
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;

    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    --
    e_existing_fky_reference EXCEPTION;

    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    --
    e_check_constraint_failure EXCEPTION;

    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    --
    e_no_parent_key EXCEPTION;

    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    --
    e_child_record_found EXCEPTION;

    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    --
    e_forall_error EXCEPTION;

    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;

    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;

    -- Public programs
    PROCEDURE ins
    (
        id_interv_dep_clin_serv_in IN interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE,
        id_intervention_in         IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_dep_clin_serv_in        IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_type_in                IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        rank_in                    IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        adw_last_update_in         IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in          IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_professional_in         IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_software_in             IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        flg_bandaid_in             IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_chargeable_in          IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO interv_dep_clin_serv
            (id_interv_dep_clin_serv,
             id_intervention,
             id_dep_clin_serv,
             flg_type,
             rank,
             adw_last_update,
             id_institution,
             id_professional,
             id_software,
             flg_bandaid,
             flg_chargeable)
        VALUES
            (id_interv_dep_clin_serv_in,
             id_intervention_in,
             id_dep_clin_serv_in,
             flg_type_in,
             rank_in,
             adw_last_update_in,
             id_institution_in,
             id_professional_in,
             id_software_in,
             flg_bandaid_in,
             flg_chargeable_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'IDCS_INTDCSFTPINSPRFSFT_UIDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "IDCS_INTDCSFTPINSPRFSFT_UIDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'INTERV_DEP_CLIN_SERV',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INTERVENTION',
                                                        value_in           => id_intervention_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE',
                                                        value_in           => flg_type_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'INTERV_DEP_CLIN_SERV');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    IF l_name = 'ICS_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'ICS_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'ICS_INT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INTERVENTION',
                                                        value_in           => id_intervention_in);
                    END IF;
                    IF l_name = 'ICS_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'ICS_S_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_interv_dep_clin_serv_in IN interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE,
        id_intervention_in         IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_dep_clin_serv_in        IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_type_in                IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        rank_in                    IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        adw_last_update_in         IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in          IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_professional_in         IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_software_in             IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        flg_bandaid_in             IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_chargeable_in          IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_interv_dep_clin_serv_in => id_interv_dep_clin_serv_in,
            id_intervention_in         => id_intervention_in,
            id_dep_clin_serv_in        => id_dep_clin_serv_in,
            flg_type_in                => flg_type_in,
            rank_in                    => rank_in,
            adw_last_update_in         => adw_last_update_in,
            id_institution_in          => id_institution_in,
            id_professional_in         => id_professional_in,
            id_software_in             => id_software_in,
            flg_bandaid_in             => flg_bandaid_in,
            flg_chargeable_in          => flg_chargeable_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN interv_dep_clin_serv%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec interv_dep_clin_serv%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_interv_dep_clin_serv := next_key(sequence_in);
        END IF;
        ins(id_interv_dep_clin_serv_in => l_rec.id_interv_dep_clin_serv,
            id_intervention_in         => l_rec.id_intervention,
            id_dep_clin_serv_in        => l_rec.id_dep_clin_serv,
            flg_type_in                => l_rec.flg_type,
            rank_in                    => l_rec.rank,
            adw_last_update_in         => l_rec.adw_last_update,
            id_institution_in          => l_rec.id_institution,
            id_professional_in         => l_rec.id_professional,
            id_software_in             => l_rec.id_software,
            flg_bandaid_in             => l_rec.flg_bandaid,
            flg_chargeable_in          => l_rec.flg_chargeable,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN interv_dep_clin_serv%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE IS
        retval interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_interv_dep_clin_serv.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_INTERV_DEP_CLIN_SERV'));
    END next_key;

    PROCEDURE ins
    (
        id_intervention_in          IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_dep_clin_serv_in         IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_type_in                 IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        rank_in                     IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        adw_last_update_in          IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in           IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_professional_in          IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_software_in              IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        flg_bandaid_in              IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_chargeable_in           IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        id_interv_dep_clin_serv_out IN OUT interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
        l_pky interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE := next_key;
    BEGIN
        ins(id_interv_dep_clin_serv_in => l_pky,
            id_intervention_in         => id_intervention_in,
            id_dep_clin_serv_in        => id_dep_clin_serv_in,
            flg_type_in                => flg_type_in,
            rank_in                    => rank_in,
            adw_last_update_in         => adw_last_update_in,
            id_institution_in          => id_institution_in,
            id_professional_in         => id_professional_in,
            id_software_in             => id_software_in,
            flg_bandaid_in             => flg_bandaid_in,
            flg_chargeable_in          => flg_chargeable_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        id_interv_dep_clin_serv_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_intervention_in          IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_dep_clin_serv_in         IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_type_in                 IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        rank_in                     IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        adw_last_update_in          IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in           IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_professional_in          IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_software_in              IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        flg_bandaid_in              IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_chargeable_in           IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        id_interv_dep_clin_serv_out IN OUT interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_intervention_in          => id_intervention_in,
            id_dep_clin_serv_in         => id_dep_clin_serv_in,
            flg_type_in                 => flg_type_in,
            rank_in                     => rank_in,
            adw_last_update_in          => adw_last_update_in,
            id_institution_in           => id_institution_in,
            id_professional_in          => id_professional_in,
            id_software_in              => id_software_in,
            flg_bandaid_in              => flg_bandaid_in,
            flg_chargeable_in           => flg_chargeable_in,
            id_interv_dep_clin_serv_out => id_interv_dep_clin_serv_out,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    FUNCTION ins
    (
        id_intervention_in  IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_dep_clin_serv_in IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_type_in         IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        rank_in             IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        adw_last_update_in  IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in   IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_professional_in  IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_software_in      IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        flg_bandaid_in      IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_chargeable_in   IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) RETURN interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE IS
        l_pky interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE := next_key;
    BEGIN
        ins(id_interv_dep_clin_serv_in => l_pky,
            id_intervention_in         => id_intervention_in,
            id_dep_clin_serv_in        => id_dep_clin_serv_in,
            flg_type_in                => flg_type_in,
            rank_in                    => rank_in,
            adw_last_update_in         => adw_last_update_in,
            id_institution_in          => id_institution_in,
            id_professional_in         => id_professional_in,
            id_software_in             => id_software_in,
            flg_bandaid_in             => flg_bandaid_in,
            flg_chargeable_in          => flg_chargeable_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_intervention_in  IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_dep_clin_serv_in IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_type_in         IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        rank_in             IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        adw_last_update_in  IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in   IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_professional_in  IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_software_in      IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        flg_bandaid_in      IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_chargeable_in   IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE
    ) RETURN interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE IS
        l_pky    interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_interv_dep_clin_serv_in => l_pky,
            id_intervention_in         => id_intervention_in,
            id_dep_clin_serv_in        => id_dep_clin_serv_in,
            flg_type_in                => flg_type_in,
            rank_in                    => rank_in,
            adw_last_update_in         => adw_last_update_in,
            id_institution_in          => id_institution_in,
            id_professional_in         => id_professional_in,
            id_software_in             => id_software_in,
            flg_bandaid_in             => flg_bandaid_in,
            flg_chargeable_in          => flg_chargeable_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_intervention_in  IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_dep_clin_serv_in IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_type_in         IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        rank_in             IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        adw_last_update_in  IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in   IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_professional_in  IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_software_in      IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        flg_bandaid_in      IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_chargeable_in   IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
        l_pky interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE := next_key;
    BEGIN
        ins(id_interv_dep_clin_serv_in => l_pky,
            id_intervention_in         => id_intervention_in,
            id_dep_clin_serv_in        => id_dep_clin_serv_in,
            flg_type_in                => flg_type_in,
            rank_in                    => rank_in,
            adw_last_update_in         => adw_last_update_in,
            id_institution_in          => id_institution_in,
            id_professional_in         => id_professional_in,
            id_software_in             => id_software_in,
            flg_bandaid_in             => flg_bandaid_in,
            flg_chargeable_in          => flg_chargeable_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_intervention_in  IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_dep_clin_serv_in IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_type_in         IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        rank_in             IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        adw_last_update_in  IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT SYSDATE,
        id_institution_in   IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_professional_in  IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_software_in      IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        flg_bandaid_in      IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_chargeable_in   IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        l_pky    interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_interv_dep_clin_serv_in => l_pky,
            id_intervention_in         => id_intervention_in,
            id_dep_clin_serv_in        => id_dep_clin_serv_in,
            flg_type_in                => flg_type_in,
            rank_in                    => rank_in,
            adw_last_update_in         => adw_last_update_in,
            id_institution_in          => id_institution_in,
            id_professional_in         => id_professional_in,
            id_software_in             => id_software_in,
            flg_bandaid_in             => flg_bandaid_in,
            flg_chargeable_in          => flg_chargeable_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN interv_dep_clin_serv_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO interv_dep_clin_serv
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INTERV_DEP_CLIN_SERV _' || indx,
                                                        value_in           => rows_in(indx).id_interv_dep_clin_serv,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INTERVENTION _' || indx,
                                                        value_in           => rows_in(indx).id_intervention,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV _' || indx,
                                                        value_in           => rows_in(indx).id_dep_clin_serv,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_type,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RANK _' || indx,
                                                        value_in           => rows_in(indx).rank,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ADW_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).adw_last_update,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE _' || indx,
                                                        value_in           => rows_in(indx).id_software,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_BANDAID _' || indx,
                                                        value_in           => rows_in(indx).flg_bandaid,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_CHARGEABLE _' || indx,
                                                        value_in           => rows_in(indx).flg_chargeable,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'INTERV_DEP_CLIN_SERV',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN interv_dep_clin_serv_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_interv_dep_clin_serv_in IN interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE,
        id_intervention_in         IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_intervention_nin        IN BOOLEAN := TRUE,
        id_dep_clin_serv_in        IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin       IN BOOLEAN := TRUE,
        flg_type_in                IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        flg_type_nin               IN BOOLEAN := TRUE,
        rank_in                    IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        rank_nin                   IN BOOLEAN := TRUE,
        adw_last_update_in         IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin        IN BOOLEAN := TRUE,
        id_institution_in          IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        id_professional_in         IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        id_software_in             IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        id_software_nin            IN BOOLEAN := TRUE,
        flg_bandaid_in             IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_bandaid_nin            IN BOOLEAN := TRUE,
        flg_chargeable_in          IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        flg_chargeable_nin         IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out           table_varchar;
        l_id_intervention_n  NUMBER(1);
        l_id_dep_clin_serv_n NUMBER(1);
        l_flg_type_n         NUMBER(1);
        l_rank_n             NUMBER(1);
        l_adw_last_update_n  NUMBER(1);
        l_id_institution_n   NUMBER(1);
        l_id_professional_n  NUMBER(1);
        l_id_software_n      NUMBER(1);
        l_flg_bandaid_n      NUMBER(1);
        l_flg_chargeable_n   NUMBER(1);
    BEGIN
        l_id_intervention_n  := sys.diutil.bool_to_int(id_intervention_nin);
        l_id_dep_clin_serv_n := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_flg_type_n         := sys.diutil.bool_to_int(flg_type_nin);
        l_rank_n             := sys.diutil.bool_to_int(rank_nin);
        l_adw_last_update_n  := sys.diutil.bool_to_int(adw_last_update_nin);
        l_id_institution_n   := sys.diutil.bool_to_int(id_institution_nin);
        l_id_professional_n  := sys.diutil.bool_to_int(id_professional_nin);
        l_id_software_n      := sys.diutil.bool_to_int(id_software_nin);
        l_flg_bandaid_n      := sys.diutil.bool_to_int(flg_bandaid_nin);
        l_flg_chargeable_n   := sys.diutil.bool_to_int(flg_chargeable_nin);
        UPDATE interv_dep_clin_serv
           SET id_intervention  = decode(l_id_intervention_n,
                                         0,
                                         id_intervention_in,
                                         nvl(id_intervention_in, id_intervention)),
               id_dep_clin_serv = decode(l_id_dep_clin_serv_n,
                                         0,
                                         id_dep_clin_serv_in,
                                         nvl(id_dep_clin_serv_in, id_dep_clin_serv)),
               flg_type         = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               rank             = decode(l_rank_n, 0, rank_in, nvl(rank_in, rank)),
               adw_last_update  = decode(l_adw_last_update_n,
                                         0,
                                         adw_last_update_in,
                                         nvl(adw_last_update_in, adw_last_update)),
               id_institution   = decode(l_id_institution_n,
                                         0,
                                         id_institution_in,
                                         nvl(id_institution_in, id_institution)),
               id_professional  = decode(l_id_professional_n,
                                         0,
                                         id_professional_in,
                                         nvl(id_professional_in, id_professional)),
               id_software      = decode(l_id_software_n, 0, id_software_in, nvl(id_software_in, id_software)),
               flg_bandaid      = decode(l_flg_bandaid_n, 0, flg_bandaid_in, nvl(flg_bandaid_in, flg_bandaid)),
               flg_chargeable   = decode(l_flg_chargeable_n,
                                         0,
                                         flg_chargeable_in,
                                         nvl(flg_chargeable_in, flg_chargeable))
         WHERE id_interv_dep_clin_serv = id_interv_dep_clin_serv_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'IDCS_INTDCSFTPINSPRFSFT_UIDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "IDCS_INTDCSFTPINSPRFSFT_UIDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'INTERV_DEP_CLIN_SERV',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INTERVENTION',
                                                        value_in           => id_intervention_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE',
                                                        value_in           => flg_type_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'INTERV_DEP_CLIN_SERV');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    IF l_name = 'ICS_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'ICS_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'ICS_INT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INTERVENTION',
                                                        value_in           => id_intervention_in);
                    END IF;
                    IF l_name = 'ICS_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'ICS_S_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_interv_dep_clin_serv_in IN interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE,
        id_intervention_in         IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_intervention_nin        IN BOOLEAN := TRUE,
        id_dep_clin_serv_in        IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin       IN BOOLEAN := TRUE,
        flg_type_in                IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        flg_type_nin               IN BOOLEAN := TRUE,
        rank_in                    IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        rank_nin                   IN BOOLEAN := TRUE,
        adw_last_update_in         IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin        IN BOOLEAN := TRUE,
        id_institution_in          IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        id_professional_in         IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        id_software_in             IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        id_software_nin            IN BOOLEAN := TRUE,
        flg_bandaid_in             IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_bandaid_nin            IN BOOLEAN := TRUE,
        flg_chargeable_in          IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        flg_chargeable_nin         IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_interv_dep_clin_serv_in => id_interv_dep_clin_serv_in,
            id_intervention_in         => id_intervention_in,
            id_intervention_nin        => id_intervention_nin,
            id_dep_clin_serv_in        => id_dep_clin_serv_in,
            id_dep_clin_serv_nin       => id_dep_clin_serv_nin,
            flg_type_in                => flg_type_in,
            flg_type_nin               => flg_type_nin,
            rank_in                    => rank_in,
            rank_nin                   => rank_nin,
            adw_last_update_in         => adw_last_update_in,
            adw_last_update_nin        => adw_last_update_nin,
            id_institution_in          => id_institution_in,
            id_institution_nin         => id_institution_nin,
            id_professional_in         => id_professional_in,
            id_professional_nin        => id_professional_nin,
            id_software_in             => id_software_in,
            id_software_nin            => id_software_nin,
            flg_bandaid_in             => flg_bandaid_in,
            flg_bandaid_nin            => flg_bandaid_nin,
            flg_chargeable_in          => flg_chargeable_in,
            flg_chargeable_nin         => flg_chargeable_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_intervention_in   IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_intervention_nin  IN BOOLEAN := TRUE,
        id_dep_clin_serv_in  IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin IN BOOLEAN := TRUE,
        flg_type_in          IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        flg_type_nin         IN BOOLEAN := TRUE,
        rank_in              IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        rank_nin             IN BOOLEAN := TRUE,
        adw_last_update_in   IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin  IN BOOLEAN := TRUE,
        id_institution_in    IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_institution_nin   IN BOOLEAN := TRUE,
        id_professional_in   IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_professional_nin  IN BOOLEAN := TRUE,
        id_software_in       IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        id_software_nin      IN BOOLEAN := TRUE,
        flg_bandaid_in       IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_bandaid_nin      IN BOOLEAN := TRUE,
        flg_chargeable_in    IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        flg_chargeable_nin   IN BOOLEAN := TRUE,
        where_in             VARCHAR2 DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(4000);
        l_rows_out                 table_varchar;
        l_id_intervention_n        NUMBER(1);
        l_id_dep_clin_serv_n       NUMBER(1);
        l_flg_type_n               NUMBER(1);
        l_rank_n                   NUMBER(1);
        l_adw_last_update_n        NUMBER(1);
        l_id_institution_n         NUMBER(1);
        l_id_professional_n        NUMBER(1);
        l_id_software_n            NUMBER(1);
        l_flg_bandaid_n            NUMBER(1);
        l_flg_chargeable_n         NUMBER(1);
        id_interv_dep_clin_serv_in interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE;
    BEGIN
        l_id_intervention_n  := sys.diutil.bool_to_int(id_intervention_nin);
        l_id_dep_clin_serv_n := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_flg_type_n         := sys.diutil.bool_to_int(flg_type_nin);
        l_rank_n             := sys.diutil.bool_to_int(rank_nin);
        l_adw_last_update_n  := sys.diutil.bool_to_int(adw_last_update_nin);
        l_id_institution_n   := sys.diutil.bool_to_int(id_institution_nin);
        l_id_professional_n  := sys.diutil.bool_to_int(id_professional_nin);
        l_id_software_n      := sys.diutil.bool_to_int(id_software_nin);
        l_flg_bandaid_n      := sys.diutil.bool_to_int(flg_bandaid_nin);
        l_flg_chargeable_n   := sys.diutil.bool_to_int(flg_chargeable_nin);
        l_sql                := 'UPDATE INTERV_DEP_CLIN_SERV SET ' || ' ID_INTERVENTION = decode (' ||
                                l_id_intervention_n ||
                                ',0,:id_intervention_in, NVL (:id_intervention_in, ID_INTERVENTION)) ' || ',' ||
                                ' ID_DEP_CLIN_SERV = decode (' || l_id_dep_clin_serv_n ||
                                ',0,:id_dep_clin_serv_in, NVL (:id_dep_clin_serv_in, ID_DEP_CLIN_SERV)) ' || ',' ||
                                ' FLG_TYPE = decode (' || l_flg_type_n ||
                                ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' || ' RANK = decode (' ||
                                l_rank_n || ',0,:rank_in, NVL (:rank_in, RANK)) ' || ',' ||
                                ' ADW_LAST_UPDATE = decode (' || l_adw_last_update_n ||
                                ',0,:adw_last_update_in, NVL (:adw_last_update_in, ADW_LAST_UPDATE)) ' || ',' ||
                                ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                                ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                                ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                                ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                                ' ID_SOFTWARE = decode (' || l_id_software_n ||
                                ',0,:id_software_in, NVL (:id_software_in, ID_SOFTWARE)) ' || ',' ||
                                ' FLG_BANDAID = decode (' || l_flg_bandaid_n ||
                                ',0,:flg_bandaid_in, NVL (:flg_bandaid_in, FLG_BANDAID)) ' || ',' ||
                                ' FLG_CHARGEABLE = decode (' || l_flg_chargeable_n ||
                                ',0,:flg_chargeable_in, NVL (:flg_chargeable_in, FLG_CHARGEABLE)) ' || ' where ' ||
                                nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_intervention_in, id_dep_clin_serv_in, flg_type_in, rank_in, adw_last_update_in, id_institution_in, id_professional_in, id_software_in, flg_bandaid_in, flg_chargeable_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'IDCS_INTDCSFTPINSPRFSFT_UIDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "IDCS_INTDCSFTPINSPRFSFT_UIDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'INTERV_DEP_CLIN_SERV',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INTERVENTION',
                                                        value_in           => id_intervention_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE',
                                                        value_in           => flg_type_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'INTERV_DEP_CLIN_SERV');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    IF l_name = 'ICS_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'ICS_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'ICS_INT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INTERVENTION',
                                                        value_in           => id_intervention_in);
                    END IF;
                    IF l_name = 'ICS_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'ICS_S_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_intervention_in   IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_intervention_nin  IN BOOLEAN := TRUE,
        id_dep_clin_serv_in  IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin IN BOOLEAN := TRUE,
        flg_type_in          IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        flg_type_nin         IN BOOLEAN := TRUE,
        rank_in              IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        rank_nin             IN BOOLEAN := TRUE,
        adw_last_update_in   IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin  IN BOOLEAN := TRUE,
        id_institution_in    IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_institution_nin   IN BOOLEAN := TRUE,
        id_professional_in   IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_professional_nin  IN BOOLEAN := TRUE,
        id_software_in       IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        id_software_nin      IN BOOLEAN := TRUE,
        flg_bandaid_in       IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_bandaid_nin      IN BOOLEAN := TRUE,
        flg_chargeable_in    IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        flg_chargeable_nin   IN BOOLEAN := TRUE,
        where_in             VARCHAR2 DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_intervention_in   => id_intervention_in,
            id_intervention_nin  => id_intervention_nin,
            id_dep_clin_serv_in  => id_dep_clin_serv_in,
            id_dep_clin_serv_nin => id_dep_clin_serv_nin,
            flg_type_in          => flg_type_in,
            flg_type_nin         => flg_type_nin,
            rank_in              => rank_in,
            rank_nin             => rank_nin,
            adw_last_update_in   => adw_last_update_in,
            adw_last_update_nin  => adw_last_update_nin,
            id_institution_in    => id_institution_in,
            id_institution_nin   => id_institution_nin,
            id_professional_in   => id_professional_in,
            id_professional_nin  => id_professional_nin,
            id_software_in       => id_software_in,
            id_software_nin      => id_software_nin,
            flg_bandaid_in       => flg_bandaid_in,
            flg_bandaid_nin      => flg_bandaid_nin,
            flg_chargeable_in    => flg_chargeable_in,
            flg_chargeable_nin   => flg_chargeable_nin,
            where_in             => where_in,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN interv_dep_clin_serv%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_interv_dep_clin_serv_in => rec_in.id_interv_dep_clin_serv,
            id_intervention_in         => rec_in.id_intervention,
            id_dep_clin_serv_in        => rec_in.id_dep_clin_serv,
            flg_type_in                => rec_in.flg_type,
            rank_in                    => rec_in.rank,
            adw_last_update_in         => rec_in.adw_last_update,
            id_institution_in          => rec_in.id_institution,
            id_professional_in         => rec_in.id_professional,
            id_software_in             => rec_in.id_software,
            flg_bandaid_in             => rec_in.flg_bandaid,
            flg_chargeable_in          => rec_in.flg_chargeable,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN interv_dep_clin_serv%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_interv_dep_clin_serv_in => rec_in.id_interv_dep_clin_serv,
            id_intervention_in         => rec_in.id_intervention,
            id_dep_clin_serv_in        => rec_in.id_dep_clin_serv,
            flg_type_in                => rec_in.flg_type,
            rank_in                    => rec_in.rank,
            adw_last_update_in         => rec_in.adw_last_update,
            id_institution_in          => rec_in.id_institution,
            id_professional_in         => rec_in.id_professional,
            id_software_in             => rec_in.id_software,
            flg_bandaid_in             => rec_in.flg_bandaid,
            flg_chargeable_in          => rec_in.flg_chargeable,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_interv_dep_clin_serv_in IN interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE,
        id_intervention_in         IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_dep_clin_serv_in        IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_type_in                IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        rank_in                    IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        adw_last_update_in         IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT NULL,
        id_institution_in          IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_professional_in         IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_software_in             IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        flg_bandaid_in             IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_chargeable_in          IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        upd(id_interv_dep_clin_serv_in => id_interv_dep_clin_serv_in,
            id_intervention_in         => id_intervention_in,
            id_dep_clin_serv_in        => id_dep_clin_serv_in,
            flg_type_in                => flg_type_in,
            rank_in                    => rank_in,
            adw_last_update_in         => adw_last_update_in,
            id_institution_in          => id_institution_in,
            id_professional_in         => id_professional_in,
            id_software_in             => id_software_in,
            flg_bandaid_in             => flg_bandaid_in,
            flg_chargeable_in          => flg_chargeable_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_interv_dep_clin_serv_in => id_interv_dep_clin_serv_in,
                id_intervention_in         => id_intervention_in,
                id_dep_clin_serv_in        => id_dep_clin_serv_in,
                flg_type_in                => flg_type_in,
                rank_in                    => rank_in,
                adw_last_update_in         => adw_last_update_in,
                id_institution_in          => id_institution_in,
                id_professional_in         => id_professional_in,
                id_software_in             => id_software_in,
                flg_bandaid_in             => flg_bandaid_in,
                flg_chargeable_in          => flg_chargeable_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_interv_dep_clin_serv_in IN interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE,
        id_intervention_in         IN interv_dep_clin_serv.id_intervention%TYPE DEFAULT NULL,
        id_dep_clin_serv_in        IN interv_dep_clin_serv.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_type_in                IN interv_dep_clin_serv.flg_type%TYPE DEFAULT NULL,
        rank_in                    IN interv_dep_clin_serv.rank%TYPE DEFAULT NULL,
        adw_last_update_in         IN interv_dep_clin_serv.adw_last_update%TYPE DEFAULT NULL,
        id_institution_in          IN interv_dep_clin_serv.id_institution%TYPE DEFAULT NULL,
        id_professional_in         IN interv_dep_clin_serv.id_professional%TYPE DEFAULT NULL,
        id_software_in             IN interv_dep_clin_serv.id_software%TYPE DEFAULT NULL,
        flg_bandaid_in             IN interv_dep_clin_serv.flg_bandaid%TYPE DEFAULT NULL,
        flg_chargeable_in          IN interv_dep_clin_serv.flg_chargeable%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_interv_dep_clin_serv_in,
                id_intervention_in,
                id_dep_clin_serv_in,
                flg_type_in,
                rank_in,
                adw_last_update_in,
                id_institution_in,
                id_professional_in,
                id_software_in,
                flg_bandaid_in,
                flg_chargeable_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN interv_dep_clin_serv_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_interv_dep_clin_serv id_interv_dep_clin_serv_cc;
        l_id_intervention         id_intervention_cc;
        l_id_dep_clin_serv        id_dep_clin_serv_cc;
        l_flg_type                flg_type_cc;
        l_rank                    rank_cc;
        l_adw_last_update         adw_last_update_cc;
        l_id_institution          id_institution_cc;
        l_id_professional         id_professional_cc;
        l_id_software             id_software_cc;
        l_flg_bandaid             flg_bandaid_cc;
        l_flg_chargeable          flg_chargeable_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_interv_dep_clin_serv(i) := col_in(i).id_interv_dep_clin_serv;
            l_id_intervention(i) := col_in(i).id_intervention;
            l_id_dep_clin_serv(i) := col_in(i).id_dep_clin_serv;
            l_flg_type(i) := col_in(i).flg_type;
            l_rank(i) := col_in(i).rank;
            l_adw_last_update(i) := col_in(i).adw_last_update;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_professional(i) := col_in(i).id_professional;
            l_id_software(i) := col_in(i).id_software;
            l_flg_bandaid(i) := col_in(i).flg_bandaid;
            l_flg_chargeable(i) := col_in(i).flg_chargeable;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE interv_dep_clin_serv
                   SET id_intervention  = nvl(l_id_intervention(i), id_intervention),
                       id_dep_clin_serv = nvl(l_id_dep_clin_serv(i), id_dep_clin_serv),
                       flg_type         = nvl(l_flg_type(i), flg_type),
                       rank             = nvl(l_rank(i), rank),
                       adw_last_update  = nvl(l_adw_last_update(i), adw_last_update),
                       id_institution   = nvl(l_id_institution(i), id_institution),
                       id_professional  = nvl(l_id_professional(i), id_professional),
                       id_software      = nvl(l_id_software(i), id_software),
                       flg_bandaid      = nvl(l_flg_bandaid(i), flg_bandaid),
                       flg_chargeable   = nvl(l_flg_chargeable(i), flg_chargeable)
                 WHERE id_interv_dep_clin_serv = l_id_interv_dep_clin_serv(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE interv_dep_clin_serv
                   SET id_intervention  = l_id_intervention(i),
                       id_dep_clin_serv = l_id_dep_clin_serv(i),
                       flg_type         = l_flg_type(i),
                       rank             = l_rank(i),
                       adw_last_update  = l_adw_last_update(i),
                       id_institution   = l_id_institution(i),
                       id_professional  = l_id_professional(i),
                       id_software      = l_id_software(i),
                       flg_bandaid      = l_flg_bandaid(i),
                       flg_chargeable   = l_flg_chargeable(i)
                 WHERE id_interv_dep_clin_serv = l_id_interv_dep_clin_serv(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN interv_dep_clin_serv_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE INTERV_DEP_CLIN_SERV
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE INTERV_DEP_CLIN_SERV
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE INTERV_DEP_CLIN_SERV set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE INTERV_DEP_CLIN_SERV set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality
    PROCEDURE del
    (
        id_interv_dep_clin_serv_in IN interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_dep_clin_serv
         WHERE id_interv_dep_clin_serv = id_interv_dep_clin_serv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_interv_dep_clin_serv_in IN interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_interv_dep_clin_serv_in => id_interv_dep_clin_serv_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END del;

    -- Delete all rows for primary key column ID_INTERV_DEP_CLIN_SERV
    PROCEDURE del_id_interv_dep_clin_serv
    (
        id_interv_dep_clin_serv_in IN interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_dep_clin_serv
         WHERE id_interv_dep_clin_serv = id_interv_dep_clin_serv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_interv_dep_clin_serv;

    -- Delete all rows for primary key column ID_INTERV_DEP_CLIN_SERV
    PROCEDURE del_id_interv_dep_clin_serv
    (
        id_interv_dep_clin_serv_in IN interv_dep_clin_serv.id_interv_dep_clin_serv%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_interv_dep_clin_serv(id_interv_dep_clin_serv_in => id_interv_dep_clin_serv_in,
                                    handle_error_in            => handle_error_in,
                                    rows_out                   => rows_out);
    END del_id_interv_dep_clin_serv;

    -- Delete for unique value of IDCS_INTDCSFTPINSPRFSFT_UIDX
    PROCEDURE del_idcs_intdcsftpinsprfsft_ui
    (
        id_intervention_in  IN interv_dep_clin_serv.id_intervention%TYPE,
        id_dep_clin_serv_in IN interv_dep_clin_serv.id_dep_clin_serv%TYPE,
        flg_type_in         IN interv_dep_clin_serv.flg_type%TYPE,
        id_institution_in   IN interv_dep_clin_serv.id_institution%TYPE,
        id_professional_in  IN interv_dep_clin_serv.id_professional%TYPE,
        id_software_in      IN interv_dep_clin_serv.id_software%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_dep_clin_serv
         WHERE id_intervention = id_intervention_in
           AND id_dep_clin_serv = id_dep_clin_serv_in
           AND flg_type = flg_type_in
           AND id_institution = id_institution_in
           AND id_professional = id_professional_in
           AND id_software = id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_idcs_intdcsftpinsprfsft_ui;

    -- Delete for unique value of IDCS_INTDCSFTPINSPRFSFT_UIDX
    PROCEDURE del_idcs_intdcsftpinsprfsft_ui
    (
        id_intervention_in  IN interv_dep_clin_serv.id_intervention%TYPE,
        id_dep_clin_serv_in IN interv_dep_clin_serv.id_dep_clin_serv%TYPE,
        flg_type_in         IN interv_dep_clin_serv.flg_type%TYPE,
        id_institution_in   IN interv_dep_clin_serv.id_institution%TYPE,
        id_professional_in  IN interv_dep_clin_serv.id_professional%TYPE,
        id_software_in      IN interv_dep_clin_serv.id_software%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_idcs_intdcsftpinsprfsft_ui(id_intervention_in  => id_intervention_in,
                                       id_dep_clin_serv_in => id_dep_clin_serv_in,
                                       flg_type_in         => flg_type_in,
                                       id_institution_in   => id_institution_in,
                                       id_professional_in  => id_professional_in,
                                       id_software_in      => id_software_in,
                                       handle_error_in     => handle_error_in,
                                       rows_out            => rows_out);
    END del_idcs_intdcsftpinsprfsft_ui;

    PROCEDURE del_ics_dcs_fk
    (
        id_dep_clin_serv_in IN interv_dep_clin_serv.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_dep_clin_serv
         WHERE id_dep_clin_serv = del_ics_dcs_fk.id_dep_clin_serv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ics_dcs_fk;

    PROCEDURE del_ics_dcs_fk
    (
        id_dep_clin_serv_in IN interv_dep_clin_serv.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ics_dcs_fk(id_dep_clin_serv_in => id_dep_clin_serv_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_ics_dcs_fk;

    PROCEDURE del_ics_inst_fk
    (
        id_institution_in IN interv_dep_clin_serv.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_dep_clin_serv
         WHERE id_institution = del_ics_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ics_inst_fk;

    PROCEDURE del_ics_inst_fk
    (
        id_institution_in IN interv_dep_clin_serv.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ics_inst_fk(id_institution_in => id_institution_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_ics_inst_fk;

    PROCEDURE del_ics_int_fk
    (
        id_intervention_in IN interv_dep_clin_serv.id_intervention%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_dep_clin_serv
         WHERE id_intervention = del_ics_int_fk.id_intervention_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ics_int_fk;

    PROCEDURE del_ics_int_fk
    (
        id_intervention_in IN interv_dep_clin_serv.id_intervention%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ics_int_fk(id_intervention_in => id_intervention_in,
                       handle_error_in    => handle_error_in,
                       rows_out           => rows_out);
    END del_ics_int_fk;

    PROCEDURE del_ics_prof_fk
    (
        id_professional_in IN interv_dep_clin_serv.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_dep_clin_serv
         WHERE id_professional = del_ics_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ics_prof_fk;

    PROCEDURE del_ics_prof_fk
    (
        id_professional_in IN interv_dep_clin_serv.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ics_prof_fk(id_professional_in => id_professional_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_ics_prof_fk;

    PROCEDURE del_ics_s_fk
    (
        id_software_in  IN interv_dep_clin_serv.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_dep_clin_serv
         WHERE id_software = del_ics_s_fk.id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ics_s_fk;

    PROCEDURE del_ics_s_fk
    (
        id_software_in  IN interv_dep_clin_serv.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ics_s_fk(id_software_in => id_software_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ics_s_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM INTERV_DEP_CLIN_SERV';
        ELSE
            RETURN 'DELETE FROM INTERV_DEP_CLIN_SERV WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_DEP_CLIN_SERV');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_DEP_CLIN_SERV');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(interv_dep_clin_serv_inout IN OUT interv_dep_clin_serv%ROWTYPE) IS
    BEGIN
        interv_dep_clin_serv_inout.id_interv_dep_clin_serv := NULL;
        interv_dep_clin_serv_inout.id_intervention         := NULL;
        interv_dep_clin_serv_inout.id_dep_clin_serv        := NULL;
        interv_dep_clin_serv_inout.flg_type                := NULL;
        interv_dep_clin_serv_inout.rank                    := NULL;
        interv_dep_clin_serv_inout.adw_last_update         := SYSDATE;
        interv_dep_clin_serv_inout.id_institution          := NULL;
        interv_dep_clin_serv_inout.id_professional         := NULL;
        interv_dep_clin_serv_inout.id_software             := NULL;
        interv_dep_clin_serv_inout.flg_bandaid             := NULL;
        interv_dep_clin_serv_inout.flg_chargeable          := NULL;
    END initrec;

    FUNCTION initrec RETURN interv_dep_clin_serv%ROWTYPE IS
        l_interv_dep_clin_serv interv_dep_clin_serv%ROWTYPE;
    BEGIN
        l_interv_dep_clin_serv.adw_last_update := SYSDATE;
        RETURN l_interv_dep_clin_serv;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN interv_dep_clin_serv_tc IS
        data interv_dep_clin_serv_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM interv_dep_clin_serv
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN interv_dep_clin_serv_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data interv_dep_clin_serv_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_interv_dep_clin_serv;
/
