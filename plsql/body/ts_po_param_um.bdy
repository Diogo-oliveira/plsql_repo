/*-- Last Change Revision: $Rev: 1687004 $*/
/*-- Last Change by: $Author: luis.r.silva $*/
/*-- Date of last change: $Date: 2015-03-03 16:04:32 +0000 (ter, 03 mar 2015) $*/

CREATE OR REPLACE PACKAGE BODY ts_po_param_um
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Fevereiro 9, 2015 9:48:38
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_po_param_um_in          IN po_param_um.id_po_param_um%TYPE,
        id_po_param_in             IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_inst_owner_in           IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_institution_in          IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_unit_measure_type_in    IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_subtype_in IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        val_min_in                 IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_max_in                 IN po_param_um.val_max%TYPE DEFAULT NULL,
        format_num_in              IN po_param_um.format_num%TYPE DEFAULT NULL,
        flg_available_in           IN po_param_um.flg_available%TYPE DEFAULT NULL,
        create_user_in             IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_time_in             IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN po_param_um.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_time_in             IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN po_param_um.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO po_param_um
            (id_po_param_um,
             id_po_param,
             id_inst_owner,
             id_institution,
             id_software,
             id_unit_measure_type,
             id_unit_measure_subtype,
             val_min,
             val_max,
             format_num,
             flg_available,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_po_param_um_in,
             id_po_param_in,
             id_inst_owner_in,
             id_institution_in,
             id_software_in,
             id_unit_measure_type_in,
             id_unit_measure_subtype_in,
             val_min_in,
             val_max_in,
             format_num_in,
             flg_available_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PO_PARAM_UM');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    IF l_name = 'POPUM_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'POPUM_POP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PO_PARAM',
                                                        value_in           => id_po_param_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INST_OWNER',
                                                        value_in           => id_inst_owner_in);
                    END IF;
                    IF l_name = 'POPUM_SOFT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    IF l_name = 'POPUM_UMS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_UNIT_MEASURE_SUBTYPE',
                                                        value_in           => id_unit_measure_subtype_in);
                    END IF;
                    IF l_name = 'POPUM_UMTYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_UNIT_MEASURE_TYPE',
                                                        value_in           => id_unit_measure_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_po_param_um_in          IN po_param_um.id_po_param_um%TYPE,
        id_po_param_in             IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_inst_owner_in           IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_institution_in          IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_unit_measure_type_in    IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_subtype_in IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        val_min_in                 IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_max_in                 IN po_param_um.val_max%TYPE DEFAULT NULL,
        format_num_in              IN po_param_um.format_num%TYPE DEFAULT NULL,
        flg_available_in           IN po_param_um.flg_available%TYPE DEFAULT NULL,
        create_user_in             IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_time_in             IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN po_param_um.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_time_in             IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN po_param_um.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_po_param_um_in          => id_po_param_um_in,
            id_po_param_in             => id_po_param_in,
            id_inst_owner_in           => id_inst_owner_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            id_unit_measure_type_in    => id_unit_measure_type_in,
            id_unit_measure_subtype_in => id_unit_measure_subtype_in,
            val_min_in                 => val_min_in,
            val_max_in                 => val_max_in,
            format_num_in              => format_num_in,
            flg_available_in           => flg_available_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN po_param_um%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec po_param_um%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_po_param_um := next_key(sequence_in);
        END IF;
        ins(id_po_param_um_in          => l_rec.id_po_param_um,
            id_po_param_in             => l_rec.id_po_param,
            id_inst_owner_in           => l_rec.id_inst_owner,
            id_institution_in          => l_rec.id_institution,
            id_software_in             => l_rec.id_software,
            id_unit_measure_type_in    => l_rec.id_unit_measure_type,
            id_unit_measure_subtype_in => l_rec.id_unit_measure_subtype,
            val_min_in                 => l_rec.val_min,
            val_max_in                 => l_rec.val_max,
            format_num_in              => l_rec.format_num,
            flg_available_in           => l_rec.flg_available,
            create_user_in             => l_rec.create_user,
            create_time_in             => l_rec.create_time,
            create_institution_in      => l_rec.create_institution,
            update_user_in             => l_rec.update_user,
            update_time_in             => l_rec.update_time,
            update_institution_in      => l_rec.update_institution,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN po_param_um%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN po_param_um.id_po_param_um%TYPE
    
     IS
        retval po_param_um.id_po_param_um%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_po_param_um.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PO_PARAM_UM'));
    END next_key;

    PROCEDURE ins
    (
        id_po_param_in             IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_inst_owner_in           IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_institution_in          IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_unit_measure_type_in    IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_subtype_in IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        val_min_in                 IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_max_in                 IN po_param_um.val_max%TYPE DEFAULT NULL,
        format_num_in              IN po_param_um.format_num%TYPE DEFAULT NULL,
        flg_available_in           IN po_param_um.flg_available%TYPE DEFAULT NULL,
        create_user_in             IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_time_in             IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN po_param_um.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_time_in             IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN po_param_um.update_institution%TYPE DEFAULT NULL,
        id_po_param_um_out         IN OUT po_param_um.id_po_param_um%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky po_param_um.id_po_param_um%TYPE := next_key;
    BEGIN
        ins(id_po_param_um_in          => l_pky,
            id_po_param_in             => id_po_param_in,
            id_inst_owner_in           => id_inst_owner_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            id_unit_measure_type_in    => id_unit_measure_type_in,
            id_unit_measure_subtype_in => id_unit_measure_subtype_in,
            val_min_in                 => val_min_in,
            val_max_in                 => val_max_in,
            format_num_in              => format_num_in,
            flg_available_in           => flg_available_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        id_po_param_um_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_po_param_in             IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_inst_owner_in           IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_institution_in          IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_unit_measure_type_in    IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_subtype_in IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        val_min_in                 IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_max_in                 IN po_param_um.val_max%TYPE DEFAULT NULL,
        format_num_in              IN po_param_um.format_num%TYPE DEFAULT NULL,
        flg_available_in           IN po_param_um.flg_available%TYPE DEFAULT NULL,
        create_user_in             IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_time_in             IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN po_param_um.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_time_in             IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN po_param_um.update_institution%TYPE DEFAULT NULL,
        id_po_param_um_out         IN OUT po_param_um.id_po_param_um%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_po_param_in             => id_po_param_in,
            id_inst_owner_in           => id_inst_owner_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            id_unit_measure_type_in    => id_unit_measure_type_in,
            id_unit_measure_subtype_in => id_unit_measure_subtype_in,
            val_min_in                 => val_min_in,
            val_max_in                 => val_max_in,
            format_num_in              => format_num_in,
            flg_available_in           => flg_available_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_po_param_um_out         => id_po_param_um_out,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    FUNCTION ins
    (
        id_po_param_in             IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_inst_owner_in           IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_institution_in          IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_unit_measure_type_in    IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_subtype_in IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        val_min_in                 IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_max_in                 IN po_param_um.val_max%TYPE DEFAULT NULL,
        format_num_in              IN po_param_um.format_num%TYPE DEFAULT NULL,
        flg_available_in           IN po_param_um.flg_available%TYPE DEFAULT NULL,
        create_user_in             IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_time_in             IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN po_param_um.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_time_in             IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN po_param_um.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) RETURN po_param_um.id_po_param_um%TYPE IS
        l_pky po_param_um.id_po_param_um%TYPE := next_key;
    BEGIN
        ins(id_po_param_um_in          => l_pky,
            id_po_param_in             => id_po_param_in,
            id_inst_owner_in           => id_inst_owner_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            id_unit_measure_type_in    => id_unit_measure_type_in,
            id_unit_measure_subtype_in => id_unit_measure_subtype_in,
            val_min_in                 => val_min_in,
            val_max_in                 => val_max_in,
            format_num_in              => format_num_in,
            flg_available_in           => flg_available_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_po_param_in             IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_inst_owner_in           IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_institution_in          IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_unit_measure_type_in    IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_subtype_in IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        val_min_in                 IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_max_in                 IN po_param_um.val_max%TYPE DEFAULT NULL,
        format_num_in              IN po_param_um.format_num%TYPE DEFAULT NULL,
        flg_available_in           IN po_param_um.flg_available%TYPE DEFAULT NULL,
        create_user_in             IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_time_in             IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN po_param_um.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_time_in             IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN po_param_um.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) RETURN po_param_um.id_po_param_um%TYPE IS
        l_pky    po_param_um.id_po_param_um%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_po_param_um_in          => l_pky,
            id_po_param_in             => id_po_param_in,
            id_inst_owner_in           => id_inst_owner_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            id_unit_measure_type_in    => id_unit_measure_type_in,
            id_unit_measure_subtype_in => id_unit_measure_subtype_in,
            val_min_in                 => val_min_in,
            val_max_in                 => val_max_in,
            format_num_in              => format_num_in,
            flg_available_in           => flg_available_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_po_param_in             IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_inst_owner_in           IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_institution_in          IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_unit_measure_type_in    IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_subtype_in IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        val_min_in                 IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_max_in                 IN po_param_um.val_max%TYPE DEFAULT NULL,
        format_num_in              IN po_param_um.format_num%TYPE DEFAULT NULL,
        flg_available_in           IN po_param_um.flg_available%TYPE DEFAULT NULL,
        create_user_in             IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_time_in             IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN po_param_um.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_time_in             IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN po_param_um.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky po_param_um.id_po_param_um%TYPE := next_key;
    BEGIN
        ins(id_po_param_um_in          => l_pky,
            id_po_param_in             => id_po_param_in,
            id_inst_owner_in           => id_inst_owner_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            id_unit_measure_type_in    => id_unit_measure_type_in,
            id_unit_measure_subtype_in => id_unit_measure_subtype_in,
            val_min_in                 => val_min_in,
            val_max_in                 => val_max_in,
            format_num_in              => format_num_in,
            flg_available_in           => flg_available_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_po_param_in             IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_inst_owner_in           IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_institution_in          IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_unit_measure_type_in    IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_subtype_in IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        val_min_in                 IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_max_in                 IN po_param_um.val_max%TYPE DEFAULT NULL,
        format_num_in              IN po_param_um.format_num%TYPE DEFAULT NULL,
        flg_available_in           IN po_param_um.flg_available%TYPE DEFAULT NULL,
        create_user_in             IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_time_in             IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN po_param_um.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_time_in             IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN po_param_um.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        l_pky    po_param_um.id_po_param_um%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_po_param_um_in          => l_pky,
            id_po_param_in             => id_po_param_in,
            id_inst_owner_in           => id_inst_owner_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            id_unit_measure_type_in    => id_unit_measure_type_in,
            id_unit_measure_subtype_in => id_unit_measure_subtype_in,
            val_min_in                 => val_min_in,
            val_max_in                 => val_max_in,
            format_num_in              => format_num_in,
            flg_available_in           => flg_available_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN po_param_um_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO po_param_um
                    (id_po_param_um,
                     id_po_param,
                     id_inst_owner,
                     id_institution,
                     id_software,
                     id_unit_measure_type,
                     id_unit_measure_subtype,
                     val_min,
                     val_max,
                     format_num,
                     flg_available,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution)
                VALUES
                    (rows_in(indx).id_po_param_um,
                     rows_in(indx).id_po_param,
                     rows_in(indx).id_inst_owner,
                     rows_in(indx).id_institution,
                     rows_in(indx).id_software,
                     rows_in(indx).id_unit_measure_type,
                     rows_in(indx).id_unit_measure_subtype,
                     rows_in(indx).val_min,
                     rows_in(indx).val_max,
                     rows_in(indx).format_num,
                     rows_in(indx).flg_available,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PO_PARAM_UM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_po_param_um,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PO_PARAM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_po_param,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_software,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_UNIT_MEASURE_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_unit_measure_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_UNIT_MEASURE_SUBTYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_unit_measure_subtype,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'VAL_MIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .val_min,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'VAL_MAX _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .val_max,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FORMAT_NUM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .format_num,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_available,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PO_PARAM_UM',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN po_param_um_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_po_param_um_in           IN po_param_um.id_po_param_um%TYPE,
        id_po_param_in              IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_po_param_nin             IN BOOLEAN := TRUE,
        id_inst_owner_in            IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_inst_owner_nin           IN BOOLEAN := TRUE,
        id_institution_in           IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_software_in              IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_software_nin             IN BOOLEAN := TRUE,
        id_unit_measure_type_in     IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_type_nin    IN BOOLEAN := TRUE,
        id_unit_measure_subtype_in  IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        id_unit_measure_subtype_nin IN BOOLEAN := TRUE,
        val_min_in                  IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_min_nin                 IN BOOLEAN := TRUE,
        val_max_in                  IN po_param_um.val_max%TYPE DEFAULT NULL,
        val_max_nin                 IN BOOLEAN := TRUE,
        format_num_in               IN po_param_um.format_num%TYPE DEFAULT NULL,
        format_num_nin              IN BOOLEAN := TRUE,
        flg_available_in            IN po_param_um.flg_available%TYPE DEFAULT NULL,
        flg_available_nin           IN BOOLEAN := TRUE,
        create_user_in              IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN po_param_um.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN po_param_um.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_rows_out                  table_varchar;
        l_id_po_param_n             NUMBER(1);
        l_id_inst_owner_n           NUMBER(1);
        l_id_institution_n          NUMBER(1);
        l_id_software_n             NUMBER(1);
        l_id_unit_measure_type_n    NUMBER(1);
        l_id_unit_measure_subtype_n NUMBER(1);
        l_val_min_n                 NUMBER(1);
        l_val_max_n                 NUMBER(1);
        l_format_num_n              NUMBER(1);
        l_flg_available_n           NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
    BEGIN
    
        l_id_po_param_n             := sys.diutil.bool_to_int(id_po_param_nin);
        l_id_inst_owner_n           := sys.diutil.bool_to_int(id_inst_owner_nin);
        l_id_institution_n          := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n             := sys.diutil.bool_to_int(id_software_nin);
        l_id_unit_measure_type_n    := sys.diutil.bool_to_int(id_unit_measure_type_nin);
        l_id_unit_measure_subtype_n := sys.diutil.bool_to_int(id_unit_measure_subtype_nin);
        l_val_min_n                 := sys.diutil.bool_to_int(val_min_nin);
        l_val_max_n                 := sys.diutil.bool_to_int(val_max_nin);
        l_format_num_n              := sys.diutil.bool_to_int(format_num_nin);
        l_flg_available_n           := sys.diutil.bool_to_int(flg_available_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE po_param_um
           SET id_po_param             = decode(l_id_po_param_n, 0, id_po_param_in, nvl(id_po_param_in, id_po_param)),
               id_inst_owner           = decode(l_id_inst_owner_n,
                                                0,
                                                id_inst_owner_in,
                                                nvl(id_inst_owner_in, id_inst_owner)),
               id_institution          = decode(l_id_institution_n,
                                                0,
                                                id_institution_in,
                                                nvl(id_institution_in, id_institution)),
               id_software             = decode(l_id_software_n, 0, id_software_in, nvl(id_software_in, id_software)),
               id_unit_measure_type    = decode(l_id_unit_measure_type_n,
                                                0,
                                                id_unit_measure_type_in,
                                                nvl(id_unit_measure_type_in, id_unit_measure_type)),
               id_unit_measure_subtype = decode(l_id_unit_measure_subtype_n,
                                                0,
                                                id_unit_measure_subtype_in,
                                                nvl(id_unit_measure_subtype_in, id_unit_measure_subtype)),
               val_min                 = decode(l_val_min_n, 0, val_min_in, nvl(val_min_in, val_min)),
               val_max                 = decode(l_val_max_n, 0, val_max_in, nvl(val_max_in, val_max)),
               format_num              = decode(l_format_num_n, 0, format_num_in, nvl(format_num_in, format_num)),
               flg_available           = decode(l_flg_available_n,
                                                0,
                                                flg_available_in,
                                                nvl(flg_available_in, flg_available)),
               create_user             = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time             = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution      = decode(l_create_institution_n,
                                                0,
                                                create_institution_in,
                                                nvl(create_institution_in, create_institution)),
               update_user             = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time             = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution      = decode(l_update_institution_n,
                                                0,
                                                update_institution_in,
                                                nvl(update_institution_in, update_institution))
         WHERE id_po_param_um = id_po_param_um_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PO_PARAM_UM');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    IF l_name = 'POPUM_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'POPUM_POP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PO_PARAM',
                                                        value_in           => id_po_param_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INST_OWNER',
                                                        value_in           => id_inst_owner_in);
                    END IF;
                    IF l_name = 'POPUM_SOFT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    IF l_name = 'POPUM_UMS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_UNIT_MEASURE_SUBTYPE',
                                                        value_in           => id_unit_measure_subtype_in);
                    END IF;
                    IF l_name = 'POPUM_UMTYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_UNIT_MEASURE_TYPE',
                                                        value_in           => id_unit_measure_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_po_param_um_in           IN po_param_um.id_po_param_um%TYPE,
        id_po_param_in              IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_po_param_nin             IN BOOLEAN := TRUE,
        id_inst_owner_in            IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_inst_owner_nin           IN BOOLEAN := TRUE,
        id_institution_in           IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_software_in              IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_software_nin             IN BOOLEAN := TRUE,
        id_unit_measure_type_in     IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_type_nin    IN BOOLEAN := TRUE,
        id_unit_measure_subtype_in  IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        id_unit_measure_subtype_nin IN BOOLEAN := TRUE,
        val_min_in                  IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_min_nin                 IN BOOLEAN := TRUE,
        val_max_in                  IN po_param_um.val_max%TYPE DEFAULT NULL,
        val_max_nin                 IN BOOLEAN := TRUE,
        format_num_in               IN po_param_um.format_num%TYPE DEFAULT NULL,
        format_num_nin              IN BOOLEAN := TRUE,
        flg_available_in            IN po_param_um.flg_available%TYPE DEFAULT NULL,
        flg_available_nin           IN BOOLEAN := TRUE,
        create_user_in              IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN po_param_um.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN po_param_um.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_po_param_um_in           => id_po_param_um_in,
            id_po_param_in              => id_po_param_in,
            id_po_param_nin             => id_po_param_nin,
            id_inst_owner_in            => id_inst_owner_in,
            id_inst_owner_nin           => id_inst_owner_nin,
            id_institution_in           => id_institution_in,
            id_institution_nin          => id_institution_nin,
            id_software_in              => id_software_in,
            id_software_nin             => id_software_nin,
            id_unit_measure_type_in     => id_unit_measure_type_in,
            id_unit_measure_type_nin    => id_unit_measure_type_nin,
            id_unit_measure_subtype_in  => id_unit_measure_subtype_in,
            id_unit_measure_subtype_nin => id_unit_measure_subtype_nin,
            val_min_in                  => val_min_in,
            val_min_nin                 => val_min_nin,
            val_max_in                  => val_max_in,
            val_max_nin                 => val_max_nin,
            format_num_in               => format_num_in,
            format_num_nin              => format_num_nin,
            flg_available_in            => flg_available_in,
            flg_available_nin           => flg_available_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_po_param_in              IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_po_param_nin             IN BOOLEAN := TRUE,
        id_inst_owner_in            IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_inst_owner_nin           IN BOOLEAN := TRUE,
        id_institution_in           IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_software_in              IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_software_nin             IN BOOLEAN := TRUE,
        id_unit_measure_type_in     IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_type_nin    IN BOOLEAN := TRUE,
        id_unit_measure_subtype_in  IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        id_unit_measure_subtype_nin IN BOOLEAN := TRUE,
        val_min_in                  IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_min_nin                 IN BOOLEAN := TRUE,
        val_max_in                  IN po_param_um.val_max%TYPE DEFAULT NULL,
        val_max_nin                 IN BOOLEAN := TRUE,
        format_num_in               IN po_param_um.format_num%TYPE DEFAULT NULL,
        format_num_nin              IN BOOLEAN := TRUE,
        flg_available_in            IN po_param_um.flg_available%TYPE DEFAULT NULL,
        flg_available_nin           IN BOOLEAN := TRUE,
        create_user_in              IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN po_param_um.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN po_param_um.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        where_in                    VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_sql                       VARCHAR2(32767);
        l_rows_out                  table_varchar;
        l_id_po_param_n             NUMBER(1);
        l_id_inst_owner_n           NUMBER(1);
        l_id_institution_n          NUMBER(1);
        l_id_software_n             NUMBER(1);
        l_id_unit_measure_type_n    NUMBER(1);
        l_id_unit_measure_subtype_n NUMBER(1);
        l_val_min_n                 NUMBER(1);
        l_val_max_n                 NUMBER(1);
        l_format_num_n              NUMBER(1);
        l_flg_available_n           NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
        id_po_param_um_in           po_param_um.id_po_param_um%TYPE;
    BEGIN
    
        l_id_po_param_n             := sys.diutil.bool_to_int(id_po_param_nin);
        l_id_inst_owner_n           := sys.diutil.bool_to_int(id_inst_owner_nin);
        l_id_institution_n          := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n             := sys.diutil.bool_to_int(id_software_nin);
        l_id_unit_measure_type_n    := sys.diutil.bool_to_int(id_unit_measure_type_nin);
        l_id_unit_measure_subtype_n := sys.diutil.bool_to_int(id_unit_measure_subtype_nin);
        l_val_min_n                 := sys.diutil.bool_to_int(val_min_nin);
        l_val_max_n                 := sys.diutil.bool_to_int(val_max_nin);
        l_format_num_n              := sys.diutil.bool_to_int(format_num_nin);
        l_flg_available_n           := sys.diutil.bool_to_int(flg_available_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE PO_PARAM_UM SET ' || ' ID_PO_PARAM = decode (' || l_id_po_param_n ||
                 ',0,:id_po_param_in, NVL (:id_po_param_in, ID_PO_PARAM)) ' || ',' || ' ID_INST_OWNER = decode (' ||
                 l_id_inst_owner_n || ',0,:id_inst_owner_in, NVL (:id_inst_owner_in, ID_INST_OWNER)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' ID_SOFTWARE = decode (' || l_id_software_n ||
                 ',0,:id_software_in, NVL (:id_software_in, ID_SOFTWARE)) ' || ',' ||
                 ' ID_UNIT_MEASURE_TYPE = decode (' || l_id_unit_measure_type_n ||
                 ',0,:id_unit_measure_type_in, NVL (:id_unit_measure_type_in, ID_UNIT_MEASURE_TYPE)) ' || ',' ||
                 ' ID_UNIT_MEASURE_SUBTYPE = decode (' || l_id_unit_measure_subtype_n ||
                 ',0,:id_unit_measure_subtype_in, NVL (:id_unit_measure_subtype_in, ID_UNIT_MEASURE_SUBTYPE)) ' || ',' ||
                 ' VAL_MIN = decode (' || l_val_min_n || ',0,:val_min_in, NVL (:val_min_in, VAL_MIN)) ' || ',' ||
                 ' VAL_MAX = decode (' || l_val_max_n || ',0,:val_max_in, NVL (:val_max_in, VAL_MAX)) ' || ',' ||
                 ' FORMAT_NUM = decode (' || l_format_num_n || ',0,:format_num_in, NVL (:format_num_in, FORMAT_NUM)) ' || ',' ||
                 ' FLG_AVAILABLE = decode (' || l_flg_available_n ||
                 ',0,:flg_available_in, NVL (:flg_available_in, FLG_AVAILABLE)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_po_param_in, id_inst_owner_in, id_institution_in, id_software_in, id_unit_measure_type_in, id_unit_measure_subtype_in, val_min_in, val_max_in, format_num_in, flg_available_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PO_PARAM_UM');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    IF l_name = 'POPUM_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'POPUM_POP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PO_PARAM',
                                                        value_in           => id_po_param_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INST_OWNER',
                                                        value_in           => id_inst_owner_in);
                    END IF;
                    IF l_name = 'POPUM_SOFT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    IF l_name = 'POPUM_UMS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_UNIT_MEASURE_SUBTYPE',
                                                        value_in           => id_unit_measure_subtype_in);
                    END IF;
                    IF l_name = 'POPUM_UMTYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_UNIT_MEASURE_TYPE',
                                                        value_in           => id_unit_measure_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_po_param_in              IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_po_param_nin             IN BOOLEAN := TRUE,
        id_inst_owner_in            IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_inst_owner_nin           IN BOOLEAN := TRUE,
        id_institution_in           IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_software_in              IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_software_nin             IN BOOLEAN := TRUE,
        id_unit_measure_type_in     IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_type_nin    IN BOOLEAN := TRUE,
        id_unit_measure_subtype_in  IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        id_unit_measure_subtype_nin IN BOOLEAN := TRUE,
        val_min_in                  IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_min_nin                 IN BOOLEAN := TRUE,
        val_max_in                  IN po_param_um.val_max%TYPE DEFAULT NULL,
        val_max_nin                 IN BOOLEAN := TRUE,
        format_num_in               IN po_param_um.format_num%TYPE DEFAULT NULL,
        format_num_nin              IN BOOLEAN := TRUE,
        flg_available_in            IN po_param_um.flg_available%TYPE DEFAULT NULL,
        flg_available_nin           IN BOOLEAN := TRUE,
        create_user_in              IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN po_param_um.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN po_param_um.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        where_in                    VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_po_param_in              => id_po_param_in,
            id_po_param_nin             => id_po_param_nin,
            id_inst_owner_in            => id_inst_owner_in,
            id_inst_owner_nin           => id_inst_owner_nin,
            id_institution_in           => id_institution_in,
            id_institution_nin          => id_institution_nin,
            id_software_in              => id_software_in,
            id_software_nin             => id_software_nin,
            id_unit_measure_type_in     => id_unit_measure_type_in,
            id_unit_measure_type_nin    => id_unit_measure_type_nin,
            id_unit_measure_subtype_in  => id_unit_measure_subtype_in,
            id_unit_measure_subtype_nin => id_unit_measure_subtype_nin,
            val_min_in                  => val_min_in,
            val_min_nin                 => val_min_nin,
            val_max_in                  => val_max_in,
            val_max_nin                 => val_max_nin,
            format_num_in               => format_num_in,
            format_num_nin              => format_num_nin,
            flg_available_in            => flg_available_in,
            flg_available_nin           => flg_available_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            where_in                    => where_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN po_param_um%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_po_param_um_in          => rec_in.id_po_param_um,
            id_po_param_in             => rec_in.id_po_param,
            id_inst_owner_in           => rec_in.id_inst_owner,
            id_institution_in          => rec_in.id_institution,
            id_software_in             => rec_in.id_software,
            id_unit_measure_type_in    => rec_in.id_unit_measure_type,
            id_unit_measure_subtype_in => rec_in.id_unit_measure_subtype,
            val_min_in                 => rec_in.val_min,
            val_max_in                 => rec_in.val_max,
            format_num_in              => rec_in.format_num,
            flg_available_in           => rec_in.flg_available,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN po_param_um%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_po_param_um_in          => rec_in.id_po_param_um,
            id_po_param_in             => rec_in.id_po_param,
            id_inst_owner_in           => rec_in.id_inst_owner,
            id_institution_in          => rec_in.id_institution,
            id_software_in             => rec_in.id_software,
            id_unit_measure_type_in    => rec_in.id_unit_measure_type,
            id_unit_measure_subtype_in => rec_in.id_unit_measure_subtype,
            val_min_in                 => rec_in.val_min,
            val_max_in                 => rec_in.val_max,
            format_num_in              => rec_in.format_num,
            flg_available_in           => rec_in.flg_available,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_po_param_um_in          IN po_param_um.id_po_param_um%TYPE,
        id_po_param_in             IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_inst_owner_in           IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_institution_in          IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_unit_measure_type_in    IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_subtype_in IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        val_min_in                 IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_max_in                 IN po_param_um.val_max%TYPE DEFAULT NULL,
        format_num_in              IN po_param_um.format_num%TYPE DEFAULT NULL,
        flg_available_in           IN po_param_um.flg_available%TYPE DEFAULT NULL,
        create_user_in             IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_time_in             IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN po_param_um.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_time_in             IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN po_param_um.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        upd(id_po_param_um_in          => id_po_param_um_in,
            id_po_param_in             => id_po_param_in,
            id_inst_owner_in           => id_inst_owner_in,
            id_institution_in          => id_institution_in,
            id_software_in             => id_software_in,
            id_unit_measure_type_in    => id_unit_measure_type_in,
            id_unit_measure_subtype_in => id_unit_measure_subtype_in,
            val_min_in                 => val_min_in,
            val_max_in                 => val_max_in,
            format_num_in              => format_num_in,
            flg_available_in           => flg_available_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_po_param_um_in          => id_po_param_um_in,
                id_po_param_in             => id_po_param_in,
                id_inst_owner_in           => id_inst_owner_in,
                id_institution_in          => id_institution_in,
                id_software_in             => id_software_in,
                id_unit_measure_type_in    => id_unit_measure_type_in,
                id_unit_measure_subtype_in => id_unit_measure_subtype_in,
                val_min_in                 => val_min_in,
                val_max_in                 => val_max_in,
                format_num_in              => format_num_in,
                flg_available_in           => flg_available_in,
                create_user_in             => create_user_in,
                create_time_in             => create_time_in,
                create_institution_in      => create_institution_in,
                update_user_in             => update_user_in,
                update_time_in             => update_time_in,
                update_institution_in      => update_institution_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_po_param_um_in          IN po_param_um.id_po_param_um%TYPE,
        id_po_param_in             IN po_param_um.id_po_param%TYPE DEFAULT NULL,
        id_inst_owner_in           IN po_param_um.id_inst_owner%TYPE DEFAULT NULL,
        id_institution_in          IN po_param_um.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN po_param_um.id_software%TYPE DEFAULT NULL,
        id_unit_measure_type_in    IN po_param_um.id_unit_measure_type%TYPE DEFAULT NULL,
        id_unit_measure_subtype_in IN po_param_um.id_unit_measure_subtype%TYPE DEFAULT NULL,
        val_min_in                 IN po_param_um.val_min%TYPE DEFAULT NULL,
        val_max_in                 IN po_param_um.val_max%TYPE DEFAULT NULL,
        format_num_in              IN po_param_um.format_num%TYPE DEFAULT NULL,
        flg_available_in           IN po_param_um.flg_available%TYPE DEFAULT NULL,
        create_user_in             IN po_param_um.create_user%TYPE DEFAULT NULL,
        create_time_in             IN po_param_um.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN po_param_um.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN po_param_um.update_user%TYPE DEFAULT NULL,
        update_time_in             IN po_param_um.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN po_param_um.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_po_param_um_in,
                id_po_param_in,
                id_inst_owner_in,
                id_institution_in,
                id_software_in,
                id_unit_measure_type_in,
                id_unit_measure_subtype_in,
                val_min_in,
                val_max_in,
                format_num_in,
                flg_available_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN po_param_um_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_po_param_um          id_po_param_um_cc;
        l_id_po_param             id_po_param_cc;
        l_id_inst_owner           id_inst_owner_cc;
        l_id_institution          id_institution_cc;
        l_id_software             id_software_cc;
        l_id_unit_measure_type    id_unit_measure_type_cc;
        l_id_unit_measure_subtype id_unit_measure_subtype_cc;
        l_val_min                 val_min_cc;
        l_val_max                 val_max_cc;
        l_format_num              format_num_cc;
        l_flg_available           flg_available_cc;
        l_create_user             create_user_cc;
        l_create_time             create_time_cc;
        l_create_institution      create_institution_cc;
        l_update_user             update_user_cc;
        l_update_time             update_time_cc;
        l_update_institution      update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_po_param_um(i) := col_in(i).id_po_param_um;
            l_id_po_param(i) := col_in(i).id_po_param;
            l_id_inst_owner(i) := col_in(i).id_inst_owner;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_software(i) := col_in(i).id_software;
            l_id_unit_measure_type(i) := col_in(i).id_unit_measure_type;
            l_id_unit_measure_subtype(i) := col_in(i).id_unit_measure_subtype;
            l_val_min(i) := col_in(i).val_min;
            l_val_max(i) := col_in(i).val_max;
            l_format_num(i) := col_in(i).format_num;
            l_flg_available(i) := col_in(i).flg_available;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE po_param_um
                   SET id_po_param             = nvl(l_id_po_param(i), id_po_param),
                       id_inst_owner           = nvl(l_id_inst_owner(i), id_inst_owner),
                       id_institution          = nvl(l_id_institution(i), id_institution),
                       id_software             = nvl(l_id_software(i), id_software),
                       id_unit_measure_type    = nvl(l_id_unit_measure_type(i), id_unit_measure_type),
                       id_unit_measure_subtype = nvl(l_id_unit_measure_subtype(i), id_unit_measure_subtype),
                       val_min                 = nvl(l_val_min(i), val_min),
                       val_max                 = nvl(l_val_max(i), val_max),
                       format_num              = nvl(l_format_num(i), format_num),
                       flg_available           = nvl(l_flg_available(i), flg_available),
                       create_user             = nvl(l_create_user(i), create_user),
                       create_time             = nvl(l_create_time(i), create_time),
                       create_institution      = nvl(l_create_institution(i), create_institution),
                       update_user             = nvl(l_update_user(i), update_user),
                       update_time             = nvl(l_update_time(i), update_time),
                       update_institution      = nvl(l_update_institution(i), update_institution)
                 WHERE id_po_param_um = l_id_po_param_um(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE po_param_um
                   SET id_po_param             = l_id_po_param(i),
                       id_inst_owner           = l_id_inst_owner(i),
                       id_institution          = l_id_institution(i),
                       id_software             = l_id_software(i),
                       id_unit_measure_type    = l_id_unit_measure_type(i),
                       id_unit_measure_subtype = l_id_unit_measure_subtype(i),
                       val_min                 = l_val_min(i),
                       val_max                 = l_val_max(i),
                       format_num              = l_format_num(i),
                       flg_available           = l_flg_available(i),
                       create_user             = l_create_user(i),
                       create_time             = l_create_time(i),
                       create_institution      = l_create_institution(i),
                       update_user             = l_update_user(i),
                       update_time             = l_update_time(i),
                       update_institution      = l_update_institution(i)
                 WHERE id_po_param_um = l_id_po_param_um(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN po_param_um_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PO_PARAM_UM
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PO_PARAM_UM
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PO_PARAM_UM set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PO_PARAM_UM set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_po_param_um_in IN po_param_um.id_po_param_um%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM po_param_um
         WHERE id_po_param_um = id_po_param_um_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_po_param_um_in IN po_param_um.id_po_param_um%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_po_param_um_in => id_po_param_um_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PO_PARAM_UM
    PROCEDURE del_id_po_param_um
    (
        id_po_param_um_in IN po_param_um.id_po_param_um%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM po_param_um
         WHERE id_po_param_um = id_po_param_um_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_po_param_um;

    -- Delete all rows for primary key column ID_PO_PARAM_UM
    PROCEDURE del_id_po_param_um
    (
        id_po_param_um_in IN po_param_um.id_po_param_um%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_po_param_um(id_po_param_um_in => id_po_param_um_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_id_po_param_um;

    PROCEDURE del_popum_inst_fk
    (
        id_institution_in IN po_param_um.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM po_param_um
         WHERE id_institution = del_popum_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_popum_inst_fk;

    PROCEDURE del_popum_inst_fk
    (
        id_institution_in IN po_param_um.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_popum_inst_fk(id_institution_in => id_institution_in,
                          handle_error_in   => handle_error_in,
                          rows_out          => rows_out);
    END del_popum_inst_fk;

    PROCEDURE del_popum_pop_fk
    (
        id_po_param_in   IN po_param_um.id_po_param%TYPE,
        id_inst_owner_in IN po_param_um.id_inst_owner%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM po_param_um
         WHERE id_po_param = del_popum_pop_fk.id_po_param_in
           AND id_inst_owner = del_popum_pop_fk.id_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_popum_pop_fk;

    PROCEDURE del_popum_pop_fk
    (
        id_po_param_in   IN po_param_um.id_po_param%TYPE,
        id_inst_owner_in IN po_param_um.id_inst_owner%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_popum_pop_fk(id_po_param_in   => id_po_param_in,
                         id_inst_owner_in => id_inst_owner_in,
                         handle_error_in  => handle_error_in,
                         rows_out         => rows_out);
    END del_popum_pop_fk;

    PROCEDURE del_popum_soft_fk
    (
        id_software_in  IN po_param_um.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM po_param_um
         WHERE id_software = del_popum_soft_fk.id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_popum_soft_fk;

    PROCEDURE del_popum_soft_fk
    (
        id_software_in  IN po_param_um.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_popum_soft_fk(id_software_in => id_software_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_popum_soft_fk;

    PROCEDURE del_popum_ums_fk
    (
        id_unit_measure_subtype_in IN po_param_um.id_unit_measure_subtype%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM po_param_um
         WHERE id_unit_measure_subtype = del_popum_ums_fk.id_unit_measure_subtype_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_popum_ums_fk;

    PROCEDURE del_popum_ums_fk
    (
        id_unit_measure_subtype_in IN po_param_um.id_unit_measure_subtype%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_popum_ums_fk(id_unit_measure_subtype_in => id_unit_measure_subtype_in,
                         handle_error_in            => handle_error_in,
                         rows_out                   => rows_out);
    END del_popum_ums_fk;

    PROCEDURE del_popum_umtype_fk
    (
        id_unit_measure_type_in IN po_param_um.id_unit_measure_type%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM po_param_um
         WHERE id_unit_measure_type = del_popum_umtype_fk.id_unit_measure_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_popum_umtype_fk;

    PROCEDURE del_popum_umtype_fk
    (
        id_unit_measure_type_in IN po_param_um.id_unit_measure_type%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_popum_umtype_fk(id_unit_measure_type_in => id_unit_measure_type_in,
                            handle_error_in         => handle_error_in,
                            rows_out                => rows_out);
    END del_popum_umtype_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PO_PARAM_UM';
        ELSE
            RETURN 'DELETE FROM PO_PARAM_UM WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PO_PARAM_UM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PO_PARAM_UM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(po_param_um_inout IN OUT po_param_um%ROWTYPE) IS
    BEGIN
        po_param_um_inout.id_po_param_um          := NULL;
        po_param_um_inout.id_po_param             := NULL;
        po_param_um_inout.id_inst_owner           := NULL;
        po_param_um_inout.id_institution          := NULL;
        po_param_um_inout.id_software             := NULL;
        po_param_um_inout.id_unit_measure_type    := NULL;
        po_param_um_inout.id_unit_measure_subtype := NULL;
        po_param_um_inout.val_min                 := NULL;
        po_param_um_inout.val_max                 := NULL;
        po_param_um_inout.format_num              := NULL;
        po_param_um_inout.flg_available           := NULL;
        po_param_um_inout.create_user             := NULL;
        po_param_um_inout.create_time             := NULL;
        po_param_um_inout.create_institution      := NULL;
        po_param_um_inout.update_user             := NULL;
        po_param_um_inout.update_time             := NULL;
        po_param_um_inout.update_institution      := NULL;
    END initrec;

    FUNCTION initrec RETURN po_param_um%ROWTYPE IS
        l_po_param_um po_param_um%ROWTYPE;
    BEGIN
        RETURN l_po_param_um;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN po_param_um_tc IS
        data po_param_um_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM po_param_um
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN po_param_um_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data po_param_um_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_po_param_um;
/