/*-- Last Change Revision: $Rev: 2028053 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:03 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_diag_stag_pfact
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Outubro 16, 2013 10:44:50
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_epis_diagnosis_in    IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in    IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in             IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in  IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        field_rank_in           IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        id_value_in             IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_inst_owner_in  IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        desc_value_in           IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        create_user_in          IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        id_staging_basis_in     IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_in IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT 0,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO epis_diag_stag_pfact
            (id_epis_diagnosis,
             num_staging_basis,
             id_field,
             id_field_inst_owner,
             field_rank,
             id_value,
             id_value_inst_owner,
             desc_value,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_staging_basis,
             id_sbasis_inst_owner)
        VALUES
            (id_epis_diagnosis_in,
             num_staging_basis_in,
             id_field_in,
             id_field_inst_owner_in,
             field_rank_in,
             id_value_in,
             id_value_inst_owner_in,
             desc_value_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_staging_basis_in,
             id_sbasis_inst_owner_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_DIAG_STAG_PFACT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    IF l_name = 'EDSPF_CNCPTTR1_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIELD',
                                                        value_in           => id_field_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIELD_INST_OWNER',
                                                        value_in           => id_field_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSPF_CNCPTTR2_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VALUE',
                                                        value_in           => id_value_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VALUE_INST_OWNER',
                                                        value_in           => id_value_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSPF_EDSTGG_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DIAGNOSIS',
                                                        value_in           => id_epis_diagnosis_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_STAGING_BASIS',
                                                        value_in           => id_staging_basis_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SBASIS_INST_OWNER',
                                                        value_in           => id_sbasis_inst_owner_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'NUM_STAGING_BASIS',
                                                        value_in           => num_staging_basis_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_epis_diagnosis_in    IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in    IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in             IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in  IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        field_rank_in           IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        id_value_in             IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_inst_owner_in  IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        desc_value_in           IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        create_user_in          IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        id_staging_basis_in     IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_in IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT 0,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_epis_diagnosis_in    => id_epis_diagnosis_in,
            num_staging_basis_in    => num_staging_basis_in,
            id_field_in             => id_field_in,
            id_field_inst_owner_in  => id_field_inst_owner_in,
            field_rank_in           => field_rank_in,
            id_value_in             => id_value_in,
            id_value_inst_owner_in  => id_value_inst_owner_in,
            desc_value_in           => desc_value_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            id_staging_basis_in     => id_staging_basis_in,
            id_sbasis_inst_owner_in => id_sbasis_inst_owner_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_diag_stag_pfact%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_diag_stag_pfact%ROWTYPE := rec_in;
    BEGIN
        ins(id_epis_diagnosis_in    => l_rec.id_epis_diagnosis,
            num_staging_basis_in    => l_rec.num_staging_basis,
            id_field_in             => l_rec.id_field,
            id_field_inst_owner_in  => l_rec.id_field_inst_owner,
            field_rank_in           => l_rec.field_rank,
            id_value_in             => l_rec.id_value,
            id_value_inst_owner_in  => l_rec.id_value_inst_owner,
            desc_value_in           => l_rec.desc_value,
            create_user_in          => l_rec.create_user,
            create_time_in          => l_rec.create_time,
            create_institution_in   => l_rec.create_institution,
            update_user_in          => l_rec.update_user,
            update_time_in          => l_rec.update_time,
            update_institution_in   => l_rec.update_institution,
            id_staging_basis_in     => l_rec.id_staging_basis,
            id_sbasis_inst_owner_in => l_rec.id_sbasis_inst_owner,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_diag_stag_pfact%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_diag_stag_pfact_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_diag_stag_pfact
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_DIAGNOSIS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_epis_diagnosis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_STAGING_BASIS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .num_staging_basis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_FIELD _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_field,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_FIELD_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_field_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FIELD_RANK _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .field_rank,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VALUE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_value,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VALUE_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_value_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DESC_VALUE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .desc_value,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_STAGING_BASIS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_staging_basis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SBASIS_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_sbasis_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'EPIS_DIAG_STAG_PFACT',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_diag_stag_pfact_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_epis_diagnosis_in     IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in     IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in              IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in   IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        field_rank_in            IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        field_rank_nin           IN BOOLEAN := TRUE,
        id_value_in              IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_nin             IN BOOLEAN := TRUE,
        id_value_inst_owner_in   IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        id_value_inst_owner_nin  IN BOOLEAN := TRUE,
        desc_value_in            IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        desc_value_nin           IN BOOLEAN := TRUE,
        create_user_in           IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_staging_basis_in      IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_staging_basis_nin     IN BOOLEAN := TRUE,
        id_sbasis_inst_owner_in  IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_nin IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_rows_out               table_varchar;
        l_field_rank_n           NUMBER(1);
        l_id_value_n             NUMBER(1);
        l_id_value_inst_owner_n  NUMBER(1);
        l_desc_value_n           NUMBER(1);
        l_create_user_n          NUMBER(1);
        l_create_time_n          NUMBER(1);
        l_create_institution_n   NUMBER(1);
        l_update_user_n          NUMBER(1);
        l_update_time_n          NUMBER(1);
        l_update_institution_n   NUMBER(1);
        l_id_staging_basis_n     NUMBER(1);
        l_id_sbasis_inst_owner_n NUMBER(1);
    BEGIN
    
        l_field_rank_n           := sys.diutil.bool_to_int(field_rank_nin);
        l_id_value_n             := sys.diutil.bool_to_int(id_value_nin);
        l_id_value_inst_owner_n  := sys.diutil.bool_to_int(id_value_inst_owner_nin);
        l_desc_value_n           := sys.diutil.bool_to_int(desc_value_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_id_staging_basis_n     := sys.diutil.bool_to_int(id_staging_basis_nin);
        l_id_sbasis_inst_owner_n := sys.diutil.bool_to_int(id_sbasis_inst_owner_nin);
    
        UPDATE epis_diag_stag_pfact
           SET field_rank           = decode(l_field_rank_n, 0, field_rank_in, nvl(field_rank_in, field_rank)),
               id_value             = decode(l_id_value_n, 0, id_value_in, nvl(id_value_in, id_value)),
               id_value_inst_owner  = decode(l_id_value_inst_owner_n,
                                             0,
                                             id_value_inst_owner_in,
                                             nvl(id_value_inst_owner_in, id_value_inst_owner)),
               desc_value           = decode(l_desc_value_n, 0, desc_value_in, nvl(desc_value_in, desc_value)),
               create_user          = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time          = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution   = decode(l_create_institution_n,
                                             0,
                                             create_institution_in,
                                             nvl(create_institution_in, create_institution)),
               update_user          = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time          = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution   = decode(l_update_institution_n,
                                             0,
                                             update_institution_in,
                                             nvl(update_institution_in, update_institution)),
               id_staging_basis     = decode(l_id_staging_basis_n,
                                             0,
                                             id_staging_basis_in,
                                             nvl(id_staging_basis_in, id_staging_basis)),
               id_sbasis_inst_owner = decode(l_id_sbasis_inst_owner_n,
                                             0,
                                             id_sbasis_inst_owner_in,
                                             nvl(id_sbasis_inst_owner_in, id_sbasis_inst_owner))
         WHERE id_epis_diagnosis = id_epis_diagnosis_in
           AND num_staging_basis = num_staging_basis_in
           AND id_field = id_field_in
           AND id_field_inst_owner = id_field_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_DIAG_STAG_PFACT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    IF l_name = 'EDSPF_CNCPTTR1_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIELD',
                                                        value_in           => id_field_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIELD_INST_OWNER',
                                                        value_in           => id_field_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSPF_CNCPTTR2_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VALUE',
                                                        value_in           => id_value_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VALUE_INST_OWNER',
                                                        value_in           => id_value_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSPF_EDSTGG_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DIAGNOSIS',
                                                        value_in           => id_epis_diagnosis_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_STAGING_BASIS',
                                                        value_in           => id_staging_basis_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SBASIS_INST_OWNER',
                                                        value_in           => id_sbasis_inst_owner_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'NUM_STAGING_BASIS',
                                                        value_in           => num_staging_basis_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_epis_diagnosis_in     IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in     IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in              IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in   IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        field_rank_in            IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        field_rank_nin           IN BOOLEAN := TRUE,
        id_value_in              IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_nin             IN BOOLEAN := TRUE,
        id_value_inst_owner_in   IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        id_value_inst_owner_nin  IN BOOLEAN := TRUE,
        desc_value_in            IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        desc_value_nin           IN BOOLEAN := TRUE,
        create_user_in           IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_staging_basis_in      IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_staging_basis_nin     IN BOOLEAN := TRUE,
        id_sbasis_inst_owner_in  IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_nin IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_diagnosis_in     => id_epis_diagnosis_in,
            num_staging_basis_in     => num_staging_basis_in,
            id_field_in              => id_field_in,
            id_field_inst_owner_in   => id_field_inst_owner_in,
            field_rank_in            => field_rank_in,
            field_rank_nin           => field_rank_nin,
            id_value_in              => id_value_in,
            id_value_nin             => id_value_nin,
            id_value_inst_owner_in   => id_value_inst_owner_in,
            id_value_inst_owner_nin  => id_value_inst_owner_nin,
            desc_value_in            => desc_value_in,
            desc_value_nin           => desc_value_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            id_staging_basis_in      => id_staging_basis_in,
            id_staging_basis_nin     => id_staging_basis_nin,
            id_sbasis_inst_owner_in  => id_sbasis_inst_owner_in,
            id_sbasis_inst_owner_nin => id_sbasis_inst_owner_nin,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        field_rank_in            IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        field_rank_nin           IN BOOLEAN := TRUE,
        id_value_in              IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_nin             IN BOOLEAN := TRUE,
        id_value_inst_owner_in   IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        id_value_inst_owner_nin  IN BOOLEAN := TRUE,
        desc_value_in            IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        desc_value_nin           IN BOOLEAN := TRUE,
        create_user_in           IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_staging_basis_in      IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_staging_basis_nin     IN BOOLEAN := TRUE,
        id_sbasis_inst_owner_in  IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_nin IN BOOLEAN := TRUE,
        where_in                 VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_sql                    VARCHAR2(32767);
        l_rows_out               table_varchar;
        l_field_rank_n           NUMBER(1);
        l_id_value_n             NUMBER(1);
        l_id_value_inst_owner_n  NUMBER(1);
        l_desc_value_n           NUMBER(1);
        l_create_user_n          NUMBER(1);
        l_create_time_n          NUMBER(1);
        l_create_institution_n   NUMBER(1);
        l_update_user_n          NUMBER(1);
        l_update_time_n          NUMBER(1);
        l_update_institution_n   NUMBER(1);
        l_id_staging_basis_n     NUMBER(1);
        l_id_sbasis_inst_owner_n NUMBER(1);
        id_epis_diagnosis_in     epis_diag_stag_pfact.id_epis_diagnosis%TYPE;
        num_staging_basis_in     epis_diag_stag_pfact.num_staging_basis%TYPE;
        id_field_in              epis_diag_stag_pfact.id_field%TYPE;
        id_field_inst_owner_in   epis_diag_stag_pfact.id_field_inst_owner%TYPE;
    BEGIN
    
        l_field_rank_n           := sys.diutil.bool_to_int(field_rank_nin);
        l_id_value_n             := sys.diutil.bool_to_int(id_value_nin);
        l_id_value_inst_owner_n  := sys.diutil.bool_to_int(id_value_inst_owner_nin);
        l_desc_value_n           := sys.diutil.bool_to_int(desc_value_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_id_staging_basis_n     := sys.diutil.bool_to_int(id_staging_basis_nin);
        l_id_sbasis_inst_owner_n := sys.diutil.bool_to_int(id_sbasis_inst_owner_nin);
    
        l_sql := 'UPDATE EPIS_DIAG_STAG_PFACT SET ' || ' FIELD_RANK = decode (' || l_field_rank_n ||
                 ',0,:field_rank_in, NVL (:field_rank_in, FIELD_RANK)) ' || ',' || ' ID_VALUE = decode (' ||
                 l_id_value_n || ',0,:id_value_in, NVL (:id_value_in, ID_VALUE)) ' || ',' ||
                 ' ID_VALUE_INST_OWNER = decode (' || l_id_value_inst_owner_n ||
                 ',0,:id_value_inst_owner_in, NVL (:id_value_inst_owner_in, ID_VALUE_INST_OWNER)) ' || ',' ||
                 ' DESC_VALUE = decode (' || l_desc_value_n || ',0,:desc_value_in, NVL (:desc_value_in, DESC_VALUE)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_STAGING_BASIS = decode (' || l_id_staging_basis_n ||
                 ',0,:id_staging_basis_in, NVL (:id_staging_basis_in, ID_STAGING_BASIS)) ' || ',' ||
                 ' ID_SBASIS_INST_OWNER = decode (' || l_id_sbasis_inst_owner_n ||
                 ',0,:id_sbasis_inst_owner_in, NVL (:id_sbasis_inst_owner_in, ID_SBASIS_INST_OWNER)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN field_rank_in, id_value_in, id_value_inst_owner_in, desc_value_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_staging_basis_in, id_sbasis_inst_owner_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_DIAG_STAG_PFACT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    IF l_name = 'EDSPF_CNCPTTR1_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIELD',
                                                        value_in           => id_field_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIELD_INST_OWNER',
                                                        value_in           => id_field_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSPF_CNCPTTR2_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VALUE',
                                                        value_in           => id_value_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VALUE_INST_OWNER',
                                                        value_in           => id_value_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSPF_EDSTGG_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DIAGNOSIS',
                                                        value_in           => id_epis_diagnosis_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_STAGING_BASIS',
                                                        value_in           => id_staging_basis_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SBASIS_INST_OWNER',
                                                        value_in           => id_sbasis_inst_owner_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'NUM_STAGING_BASIS',
                                                        value_in           => num_staging_basis_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        field_rank_in            IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        field_rank_nin           IN BOOLEAN := TRUE,
        id_value_in              IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_nin             IN BOOLEAN := TRUE,
        id_value_inst_owner_in   IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        id_value_inst_owner_nin  IN BOOLEAN := TRUE,
        desc_value_in            IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        desc_value_nin           IN BOOLEAN := TRUE,
        create_user_in           IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_staging_basis_in      IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_staging_basis_nin     IN BOOLEAN := TRUE,
        id_sbasis_inst_owner_in  IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_nin IN BOOLEAN := TRUE,
        where_in                 VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(field_rank_in            => field_rank_in,
            field_rank_nin           => field_rank_nin,
            id_value_in              => id_value_in,
            id_value_nin             => id_value_nin,
            id_value_inst_owner_in   => id_value_inst_owner_in,
            id_value_inst_owner_nin  => id_value_inst_owner_nin,
            desc_value_in            => desc_value_in,
            desc_value_nin           => desc_value_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            id_staging_basis_in      => id_staging_basis_in,
            id_staging_basis_nin     => id_staging_basis_nin,
            id_sbasis_inst_owner_in  => id_sbasis_inst_owner_in,
            id_sbasis_inst_owner_nin => id_sbasis_inst_owner_nin,
            where_in                 => where_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_diag_stag_pfact%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_diagnosis_in    => rec_in.id_epis_diagnosis,
            num_staging_basis_in    => rec_in.num_staging_basis,
            id_field_in             => rec_in.id_field,
            id_field_inst_owner_in  => rec_in.id_field_inst_owner,
            field_rank_in           => rec_in.field_rank,
            id_value_in             => rec_in.id_value,
            id_value_inst_owner_in  => rec_in.id_value_inst_owner,
            desc_value_in           => rec_in.desc_value,
            create_user_in          => rec_in.create_user,
            create_time_in          => rec_in.create_time,
            create_institution_in   => rec_in.create_institution,
            update_user_in          => rec_in.update_user,
            update_time_in          => rec_in.update_time,
            update_institution_in   => rec_in.update_institution,
            id_staging_basis_in     => rec_in.id_staging_basis,
            id_sbasis_inst_owner_in => rec_in.id_sbasis_inst_owner
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_diag_stag_pfact%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_diagnosis_in    => rec_in.id_epis_diagnosis,
            num_staging_basis_in    => rec_in.num_staging_basis,
            id_field_in             => rec_in.id_field,
            id_field_inst_owner_in  => rec_in.id_field_inst_owner,
            field_rank_in           => rec_in.field_rank,
            id_value_in             => rec_in.id_value,
            id_value_inst_owner_in  => rec_in.id_value_inst_owner,
            desc_value_in           => rec_in.desc_value,
            create_user_in          => rec_in.create_user,
            create_time_in          => rec_in.create_time,
            create_institution_in   => rec_in.create_institution,
            update_user_in          => rec_in.update_user,
            update_time_in          => rec_in.update_time,
            update_institution_in   => rec_in.update_institution,
            id_staging_basis_in     => rec_in.id_staging_basis,
            id_sbasis_inst_owner_in => rec_in.id_sbasis_inst_owner
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_epis_diagnosis_in    IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in    IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in             IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in  IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        field_rank_in           IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        id_value_in             IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_inst_owner_in  IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        desc_value_in           IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        create_user_in          IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        id_staging_basis_in     IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_in IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_diagnosis_in    => id_epis_diagnosis_in,
            num_staging_basis_in    => num_staging_basis_in,
            id_field_in             => id_field_in,
            id_field_inst_owner_in  => id_field_inst_owner_in,
            field_rank_in           => field_rank_in,
            id_value_in             => id_value_in,
            id_value_inst_owner_in  => id_value_inst_owner_in,
            desc_value_in           => desc_value_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            id_staging_basis_in     => id_staging_basis_in,
            id_sbasis_inst_owner_in => id_sbasis_inst_owner_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_diagnosis_in    => id_epis_diagnosis_in,
                num_staging_basis_in    => num_staging_basis_in,
                id_field_in             => id_field_in,
                id_field_inst_owner_in  => id_field_inst_owner_in,
                field_rank_in           => field_rank_in,
                id_value_in             => id_value_in,
                id_value_inst_owner_in  => id_value_inst_owner_in,
                desc_value_in           => desc_value_in,
                create_user_in          => create_user_in,
                create_time_in          => create_time_in,
                create_institution_in   => create_institution_in,
                update_user_in          => update_user_in,
                update_time_in          => update_time_in,
                update_institution_in   => update_institution_in,
                id_staging_basis_in     => id_staging_basis_in,
                id_sbasis_inst_owner_in => id_sbasis_inst_owner_in,
                handle_error_in         => handle_error_in,
                rows_out                => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_epis_diagnosis_in    IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in    IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in             IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in  IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        field_rank_in           IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        id_value_in             IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_inst_owner_in  IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        desc_value_in           IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        create_user_in          IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        id_staging_basis_in     IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_in IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_diagnosis_in,
                num_staging_basis_in,
                id_field_in,
                id_field_inst_owner_in,
                field_rank_in,
                id_value_in,
                id_value_inst_owner_in,
                desc_value_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_staging_basis_in,
                id_sbasis_inst_owner_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN epis_diag_stag_pfact_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_diagnosis    id_epis_diagnosis_cc;
        l_num_staging_basis    num_staging_basis_cc;
        l_id_field             id_field_cc;
        l_id_field_inst_owner  id_field_inst_owner_cc;
        l_field_rank           field_rank_cc;
        l_id_value             id_value_cc;
        l_id_value_inst_owner  id_value_inst_owner_cc;
        l_desc_value           desc_value_cc;
        l_create_user          create_user_cc;
        l_create_time          create_time_cc;
        l_create_institution   create_institution_cc;
        l_update_user          update_user_cc;
        l_update_time          update_time_cc;
        l_update_institution   update_institution_cc;
        l_id_staging_basis     id_staging_basis_cc;
        l_id_sbasis_inst_owner id_sbasis_inst_owner_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_diagnosis(i) := col_in(i).id_epis_diagnosis;
            l_num_staging_basis(i) := col_in(i).num_staging_basis;
            l_id_field(i) := col_in(i).id_field;
            l_id_field_inst_owner(i) := col_in(i).id_field_inst_owner;
            l_field_rank(i) := col_in(i).field_rank;
            l_id_value(i) := col_in(i).id_value;
            l_id_value_inst_owner(i) := col_in(i).id_value_inst_owner;
            l_desc_value(i) := col_in(i).desc_value;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_staging_basis(i) := col_in(i).id_staging_basis;
            l_id_sbasis_inst_owner(i) := col_in(i).id_sbasis_inst_owner;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_diag_stag_pfact
                   SET field_rank           = nvl(l_field_rank(i), field_rank),
                       id_value             = nvl(l_id_value(i), id_value),
                       id_value_inst_owner  = nvl(l_id_value_inst_owner(i), id_value_inst_owner),
                       desc_value           = nvl(l_desc_value(i), desc_value),
                       create_user          = nvl(l_create_user(i), create_user),
                       create_time          = nvl(l_create_time(i), create_time),
                       create_institution   = nvl(l_create_institution(i), create_institution),
                       update_user          = nvl(l_update_user(i), update_user),
                       update_time          = nvl(l_update_time(i), update_time),
                       update_institution   = nvl(l_update_institution(i), update_institution),
                       id_staging_basis     = nvl(l_id_staging_basis(i), id_staging_basis),
                       id_sbasis_inst_owner = nvl(l_id_sbasis_inst_owner(i), id_sbasis_inst_owner)
                 WHERE id_epis_diagnosis = l_id_epis_diagnosis(i)
                   AND num_staging_basis = l_num_staging_basis(i)
                   AND id_field = l_id_field(i)
                   AND id_field_inst_owner = l_id_field_inst_owner(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_diag_stag_pfact
                   SET field_rank           = l_field_rank(i),
                       id_value             = l_id_value(i),
                       id_value_inst_owner  = l_id_value_inst_owner(i),
                       desc_value           = l_desc_value(i),
                       create_user          = l_create_user(i),
                       create_time          = l_create_time(i),
                       create_institution   = l_create_institution(i),
                       update_user          = l_update_user(i),
                       update_time          = l_update_time(i),
                       update_institution   = l_update_institution(i),
                       id_staging_basis     = l_id_staging_basis(i),
                       id_sbasis_inst_owner = l_id_sbasis_inst_owner(i)
                 WHERE id_epis_diagnosis = l_id_epis_diagnosis(i)
                   AND num_staging_basis = l_num_staging_basis(i)
                   AND id_field = l_id_field(i)
                   AND id_field_inst_owner = l_id_field_inst_owner(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN epis_diag_stag_pfact_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE EPIS_DIAG_STAG_PFACT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE EPIS_DIAG_STAG_PFACT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE EPIS_DIAG_STAG_PFACT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE EPIS_DIAG_STAG_PFACT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_epis_diagnosis_in   IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in   IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in            IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag_pfact
         WHERE id_epis_diagnosis = id_epis_diagnosis_in
           AND num_staging_basis = num_staging_basis_in
           AND id_field = id_field_in
           AND id_field_inst_owner = id_field_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_epis_diagnosis_in   IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in   IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in            IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_epis_diagnosis_in   => id_epis_diagnosis_in,
            num_staging_basis_in   => num_staging_basis_in,
            id_field_in            => id_field_in,
            id_field_inst_owner_in => id_field_inst_owner_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_EPIS_DIAGNOSIS
    PROCEDURE del_id_epis_diagnosis
    (
        id_epis_diagnosis_in IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag_pfact
         WHERE id_epis_diagnosis = id_epis_diagnosis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_epis_diagnosis;

    -- Delete all rows for primary key column NUM_STAGING_BASIS
    PROCEDURE del_num_staging_basis
    (
        num_staging_basis_in IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag_pfact
         WHERE num_staging_basis = num_staging_basis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_num_staging_basis;

    -- Delete all rows for primary key column ID_FIELD
    PROCEDURE del_id_field
    (
        id_field_in     IN epis_diag_stag_pfact.id_field%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag_pfact
         WHERE id_field = id_field_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_field;

    -- Delete all rows for primary key column ID_FIELD_INST_OWNER
    PROCEDURE del_id_field_inst_owner
    (
        id_field_inst_owner_in IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag_pfact
         WHERE id_field_inst_owner = id_field_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_field_inst_owner;

    -- Delete all rows for primary key column ID_EPIS_DIAGNOSIS
    PROCEDURE del_id_epis_diagnosis
    (
        id_epis_diagnosis_in IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_epis_diagnosis(id_epis_diagnosis_in => id_epis_diagnosis_in,
                              handle_error_in      => handle_error_in,
                              rows_out             => rows_out);
    END del_id_epis_diagnosis;

    -- Delete all rows for primary key column NUM_STAGING_BASIS
    PROCEDURE del_num_staging_basis
    (
        num_staging_basis_in IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_num_staging_basis(num_staging_basis_in => num_staging_basis_in,
                              handle_error_in      => handle_error_in,
                              rows_out             => rows_out);
    END del_num_staging_basis;

    -- Delete all rows for primary key column ID_FIELD
    PROCEDURE del_id_field
    (
        id_field_in     IN epis_diag_stag_pfact.id_field%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_field(id_field_in => id_field_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_field;

    -- Delete all rows for primary key column ID_FIELD_INST_OWNER
    PROCEDURE del_id_field_inst_owner
    (
        id_field_inst_owner_in IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_field_inst_owner(id_field_inst_owner_in => id_field_inst_owner_in,
                                handle_error_in        => handle_error_in,
                                rows_out               => rows_out);
    END del_id_field_inst_owner;

    PROCEDURE del_edspf_cncpttr1_fk
    (
        id_field_in            IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag_pfact
         WHERE id_field = del_edspf_cncpttr1_fk.id_field_in
           AND id_field_inst_owner = del_edspf_cncpttr1_fk.id_field_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edspf_cncpttr1_fk;

    PROCEDURE del_edspf_cncpttr1_fk
    (
        id_field_in            IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edspf_cncpttr1_fk(id_field_in            => id_field_in,
                              id_field_inst_owner_in => id_field_inst_owner_in,
                              handle_error_in        => handle_error_in,
                              rows_out               => rows_out);
    END del_edspf_cncpttr1_fk;

    PROCEDURE del_edspf_cncpttr2_fk
    (
        id_value_in            IN epis_diag_stag_pfact.id_value%TYPE,
        id_value_inst_owner_in IN epis_diag_stag_pfact.id_value_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag_pfact
         WHERE id_value = del_edspf_cncpttr2_fk.id_value_in
           AND id_value_inst_owner = del_edspf_cncpttr2_fk.id_value_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edspf_cncpttr2_fk;

    PROCEDURE del_edspf_cncpttr2_fk
    (
        id_value_in            IN epis_diag_stag_pfact.id_value%TYPE,
        id_value_inst_owner_in IN epis_diag_stag_pfact.id_value_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edspf_cncpttr2_fk(id_value_in            => id_value_in,
                              id_value_inst_owner_in => id_value_inst_owner_in,
                              handle_error_in        => handle_error_in,
                              rows_out               => rows_out);
    END del_edspf_cncpttr2_fk;

    PROCEDURE del_edspf_edstgg_fk
    (
        id_epis_diagnosis_in    IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        id_staging_basis_in     IN epis_diag_stag_pfact.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE,
        num_staging_basis_in    IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag_pfact
         WHERE id_epis_diagnosis = del_edspf_edstgg_fk.id_epis_diagnosis_in
           AND id_staging_basis = del_edspf_edstgg_fk.id_staging_basis_in
           AND id_sbasis_inst_owner = del_edspf_edstgg_fk.id_sbasis_inst_owner_in
           AND num_staging_basis = del_edspf_edstgg_fk.num_staging_basis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edspf_edstgg_fk;

    PROCEDURE del_edspf_edstgg_fk
    (
        id_epis_diagnosis_in    IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        id_staging_basis_in     IN epis_diag_stag_pfact.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE,
        num_staging_basis_in    IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edspf_edstgg_fk(id_epis_diagnosis_in    => id_epis_diagnosis_in,
                            id_staging_basis_in     => id_staging_basis_in,
                            id_sbasis_inst_owner_in => id_sbasis_inst_owner_in,
                            num_staging_basis_in    => num_staging_basis_in,
                            handle_error_in         => handle_error_in,
                            rows_out                => rows_out);
    END del_edspf_edstgg_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM EPIS_DIAG_STAG_PFACT';
        ELSE
            RETURN 'DELETE FROM EPIS_DIAG_STAG_PFACT WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG_PFACT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG_PFACT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(epis_diag_stag_pfact_inout IN OUT epis_diag_stag_pfact%ROWTYPE) IS
    BEGIN
        epis_diag_stag_pfact_inout.id_epis_diagnosis    := NULL;
        epis_diag_stag_pfact_inout.num_staging_basis    := NULL;
        epis_diag_stag_pfact_inout.id_field             := NULL;
        epis_diag_stag_pfact_inout.id_field_inst_owner  := NULL;
        epis_diag_stag_pfact_inout.field_rank           := NULL;
        epis_diag_stag_pfact_inout.id_value             := NULL;
        epis_diag_stag_pfact_inout.id_value_inst_owner  := NULL;
        epis_diag_stag_pfact_inout.desc_value           := NULL;
        epis_diag_stag_pfact_inout.create_user          := NULL;
        epis_diag_stag_pfact_inout.create_time          := NULL;
        epis_diag_stag_pfact_inout.create_institution   := NULL;
        epis_diag_stag_pfact_inout.update_user          := NULL;
        epis_diag_stag_pfact_inout.update_time          := NULL;
        epis_diag_stag_pfact_inout.update_institution   := NULL;
        epis_diag_stag_pfact_inout.id_staging_basis     := NULL;
        epis_diag_stag_pfact_inout.id_sbasis_inst_owner := 0;
    END initrec;

    FUNCTION initrec RETURN epis_diag_stag_pfact%ROWTYPE IS
        l_epis_diag_stag_pfact epis_diag_stag_pfact%ROWTYPE;
    BEGIN
        l_epis_diag_stag_pfact.id_sbasis_inst_owner := 0;
        RETURN l_epis_diag_stag_pfact;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_diag_stag_pfact_tc IS
        data epis_diag_stag_pfact_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM epis_diag_stag_pfact
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_diag_stag_pfact_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data epis_diag_stag_pfact_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_diag_stag_pfact;
/
