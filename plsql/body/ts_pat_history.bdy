/*-- Last Change Revision: $Rev: 2028311 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:02 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_pat_history
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 21, 2008 18:24:56
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_pat_history_in      IN pat_history.id_pat_history%TYPE,
        id_patient_in          IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_prof_writes_in      IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_diagnosis_in        IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        flg_status_in          IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_type_in            IN pat_history.flg_type%TYPE DEFAULT NULL,
        desc_diagnosis_in      IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        notes_in               IN pat_history.notes%TYPE DEFAULT NULL,
        flg_type_hist_in       IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        note_cancel_in         IN pat_history.note_cancel%TYPE DEFAULT NULL,
        month_begin_in         IN pat_history.month_begin%TYPE DEFAULT NULL,
        year_begin_in          IN pat_history.year_begin%TYPE DEFAULT NULL,
        day_begin_in           IN pat_history.day_begin%TYPE DEFAULT NULL,
        year_end_in            IN pat_history.year_end%TYPE DEFAULT NULL,
        month_end_in           IN pat_history.month_end%TYPE DEFAULT NULL,
        day_end_in             IN pat_history.day_end%TYPE DEFAULT NULL,
        id_prof_confirmed_in   IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_rulled_out_in  IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_base_in        IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        adw_last_update_in     IN pat_history.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_base_tstz_in        IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_in   IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_in IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_in  IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_history.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pat_history
            (id_pat_history,
             id_patient,
             id_prof_writes,
             id_diagnosis,
             flg_status,
             flg_type,
             desc_diagnosis,
             notes,
             flg_type_hist,
             id_prof_cancel,
             note_cancel,
             month_begin,
             year_begin,
             day_begin,
             year_end,
             month_end,
             day_end,
             id_prof_confirmed,
             id_prof_rulled_out,
             id_prof_base,
             adw_last_update,
             dt_base_tstz,
             dt_cancel_tstz,
             dt_confirmed_tstz,
             dt_pat_history_tstz,
             dt_rulled_out_tstz,
             id_episode)
        VALUES
            (id_pat_history_in,
             id_patient_in,
             id_prof_writes_in,
             id_diagnosis_in,
             flg_status_in,
             flg_type_in,
             desc_diagnosis_in,
             notes_in,
             flg_type_hist_in,
             id_prof_cancel_in,
             note_cancel_in,
             month_begin_in,
             year_begin_in,
             day_begin_in,
             year_end_in,
             month_end_in,
             day_end_in,
             id_prof_confirmed_in,
             id_prof_rulled_out_in,
             id_prof_base_in,
             adw_last_update_in,
             dt_base_tstz_in,
             dt_cancel_tstz_in,
             dt_confirmed_tstz_in,
             dt_pat_history_tstz_in,
             dt_rulled_out_tstz_in,
             id_episode_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_HISTORY');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    IF l_name = 'PHY_DIAG_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DIAGNOSIS',
                                                        value_in           => id_diagnosis_in);
                    END IF;
                    IF l_name = 'PHY_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PHY_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_WRITES',
                                                        value_in           => id_prof_writes_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_BASE',
                                                        value_in           => id_prof_base_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK4'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CONFIRMED',
                                                        value_in           => id_prof_confirmed_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK5'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_RULLED_OUT',
                                                        value_in           => id_prof_rulled_out_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_pat_history_in      IN pat_history.id_pat_history%TYPE,
        id_patient_in          IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_prof_writes_in      IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_diagnosis_in        IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        flg_status_in          IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_type_in            IN pat_history.flg_type%TYPE DEFAULT NULL,
        desc_diagnosis_in      IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        notes_in               IN pat_history.notes%TYPE DEFAULT NULL,
        flg_type_hist_in       IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        note_cancel_in         IN pat_history.note_cancel%TYPE DEFAULT NULL,
        month_begin_in         IN pat_history.month_begin%TYPE DEFAULT NULL,
        year_begin_in          IN pat_history.year_begin%TYPE DEFAULT NULL,
        day_begin_in           IN pat_history.day_begin%TYPE DEFAULT NULL,
        year_end_in            IN pat_history.year_end%TYPE DEFAULT NULL,
        month_end_in           IN pat_history.month_end%TYPE DEFAULT NULL,
        day_end_in             IN pat_history.day_end%TYPE DEFAULT NULL,
        id_prof_confirmed_in   IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_rulled_out_in  IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_base_in        IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        adw_last_update_in     IN pat_history.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_base_tstz_in        IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_in   IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_in IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_in  IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_history.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_pat_history_in      => id_pat_history_in,
            id_patient_in          => id_patient_in,
            id_prof_writes_in      => id_prof_writes_in,
            id_diagnosis_in        => id_diagnosis_in,
            flg_status_in          => flg_status_in,
            flg_type_in            => flg_type_in,
            desc_diagnosis_in      => desc_diagnosis_in,
            notes_in               => notes_in,
            flg_type_hist_in       => flg_type_hist_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            note_cancel_in         => note_cancel_in,
            month_begin_in         => month_begin_in,
            year_begin_in          => year_begin_in,
            day_begin_in           => day_begin_in,
            year_end_in            => year_end_in,
            month_end_in           => month_end_in,
            day_end_in             => day_end_in,
            id_prof_confirmed_in   => id_prof_confirmed_in,
            id_prof_rulled_out_in  => id_prof_rulled_out_in,
            id_prof_base_in        => id_prof_base_in,
            adw_last_update_in     => adw_last_update_in,
            dt_base_tstz_in        => dt_base_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_confirmed_tstz_in   => dt_confirmed_tstz_in,
            dt_pat_history_tstz_in => dt_pat_history_tstz_in,
            dt_rulled_out_tstz_in  => dt_rulled_out_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_history%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pat_history%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_pat_history := next_key(sequence_in);
        END IF;
        ins(id_pat_history_in      => l_rec.id_pat_history,
            id_patient_in          => l_rec.id_patient,
            id_prof_writes_in      => l_rec.id_prof_writes,
            id_diagnosis_in        => l_rec.id_diagnosis,
            flg_status_in          => l_rec.flg_status,
            flg_type_in            => l_rec.flg_type,
            desc_diagnosis_in      => l_rec.desc_diagnosis,
            notes_in               => l_rec.notes,
            flg_type_hist_in       => l_rec.flg_type_hist,
            id_prof_cancel_in      => l_rec.id_prof_cancel,
            note_cancel_in         => l_rec.note_cancel,
            month_begin_in         => l_rec.month_begin,
            year_begin_in          => l_rec.year_begin,
            day_begin_in           => l_rec.day_begin,
            year_end_in            => l_rec.year_end,
            month_end_in           => l_rec.month_end,
            day_end_in             => l_rec.day_end,
            id_prof_confirmed_in   => l_rec.id_prof_confirmed,
            id_prof_rulled_out_in  => l_rec.id_prof_rulled_out,
            id_prof_base_in        => l_rec.id_prof_base,
            adw_last_update_in     => l_rec.adw_last_update,
            dt_base_tstz_in        => l_rec.dt_base_tstz,
            dt_cancel_tstz_in      => l_rec.dt_cancel_tstz,
            dt_confirmed_tstz_in   => l_rec.dt_confirmed_tstz,
            dt_pat_history_tstz_in => l_rec.dt_pat_history_tstz,
            dt_rulled_out_tstz_in  => l_rec.dt_rulled_out_tstz,
            id_episode_in          => l_rec.id_episode,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_history%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN pat_history.id_pat_history%TYPE
    
     IS
        retval pat_history.id_pat_history%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_pat_history.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PAT_HISTORY'));
    END next_key;

    PROCEDURE ins
    (
        id_patient_in          IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_prof_writes_in      IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_diagnosis_in        IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        flg_status_in          IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_type_in            IN pat_history.flg_type%TYPE DEFAULT NULL,
        desc_diagnosis_in      IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        notes_in               IN pat_history.notes%TYPE DEFAULT NULL,
        flg_type_hist_in       IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        note_cancel_in         IN pat_history.note_cancel%TYPE DEFAULT NULL,
        month_begin_in         IN pat_history.month_begin%TYPE DEFAULT NULL,
        year_begin_in          IN pat_history.year_begin%TYPE DEFAULT NULL,
        day_begin_in           IN pat_history.day_begin%TYPE DEFAULT NULL,
        year_end_in            IN pat_history.year_end%TYPE DEFAULT NULL,
        month_end_in           IN pat_history.month_end%TYPE DEFAULT NULL,
        day_end_in             IN pat_history.day_end%TYPE DEFAULT NULL,
        id_prof_confirmed_in   IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_rulled_out_in  IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_base_in        IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        adw_last_update_in     IN pat_history.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_base_tstz_in        IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_in   IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_in IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_in  IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_history.id_episode%TYPE DEFAULT NULL,
        id_pat_history_out     IN OUT pat_history.id_pat_history%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky pat_history.id_pat_history%TYPE := next_key;
    BEGIN
        ins(id_pat_history_in      => l_pky,
            id_patient_in          => id_patient_in,
            id_prof_writes_in      => id_prof_writes_in,
            id_diagnosis_in        => id_diagnosis_in,
            flg_status_in          => flg_status_in,
            flg_type_in            => flg_type_in,
            desc_diagnosis_in      => desc_diagnosis_in,
            notes_in               => notes_in,
            flg_type_hist_in       => flg_type_hist_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            note_cancel_in         => note_cancel_in,
            month_begin_in         => month_begin_in,
            year_begin_in          => year_begin_in,
            day_begin_in           => day_begin_in,
            year_end_in            => year_end_in,
            month_end_in           => month_end_in,
            day_end_in             => day_end_in,
            id_prof_confirmed_in   => id_prof_confirmed_in,
            id_prof_rulled_out_in  => id_prof_rulled_out_in,
            id_prof_base_in        => id_prof_base_in,
            adw_last_update_in     => adw_last_update_in,
            dt_base_tstz_in        => dt_base_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_confirmed_tstz_in   => dt_confirmed_tstz_in,
            dt_pat_history_tstz_in => dt_pat_history_tstz_in,
            dt_rulled_out_tstz_in  => dt_rulled_out_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_pat_history_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_patient_in          IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_prof_writes_in      IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_diagnosis_in        IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        flg_status_in          IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_type_in            IN pat_history.flg_type%TYPE DEFAULT NULL,
        desc_diagnosis_in      IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        notes_in               IN pat_history.notes%TYPE DEFAULT NULL,
        flg_type_hist_in       IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        note_cancel_in         IN pat_history.note_cancel%TYPE DEFAULT NULL,
        month_begin_in         IN pat_history.month_begin%TYPE DEFAULT NULL,
        year_begin_in          IN pat_history.year_begin%TYPE DEFAULT NULL,
        day_begin_in           IN pat_history.day_begin%TYPE DEFAULT NULL,
        year_end_in            IN pat_history.year_end%TYPE DEFAULT NULL,
        month_end_in           IN pat_history.month_end%TYPE DEFAULT NULL,
        day_end_in             IN pat_history.day_end%TYPE DEFAULT NULL,
        id_prof_confirmed_in   IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_rulled_out_in  IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_base_in        IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        adw_last_update_in     IN pat_history.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_base_tstz_in        IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_in   IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_in IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_in  IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_history.id_episode%TYPE DEFAULT NULL,
        id_pat_history_out     IN OUT pat_history.id_pat_history%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_patient_in          => id_patient_in,
            id_prof_writes_in      => id_prof_writes_in,
            id_diagnosis_in        => id_diagnosis_in,
            flg_status_in          => flg_status_in,
            flg_type_in            => flg_type_in,
            desc_diagnosis_in      => desc_diagnosis_in,
            notes_in               => notes_in,
            flg_type_hist_in       => flg_type_hist_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            note_cancel_in         => note_cancel_in,
            month_begin_in         => month_begin_in,
            year_begin_in          => year_begin_in,
            day_begin_in           => day_begin_in,
            year_end_in            => year_end_in,
            month_end_in           => month_end_in,
            day_end_in             => day_end_in,
            id_prof_confirmed_in   => id_prof_confirmed_in,
            id_prof_rulled_out_in  => id_prof_rulled_out_in,
            id_prof_base_in        => id_prof_base_in,
            adw_last_update_in     => adw_last_update_in,
            dt_base_tstz_in        => dt_base_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_confirmed_tstz_in   => dt_confirmed_tstz_in,
            dt_pat_history_tstz_in => dt_pat_history_tstz_in,
            dt_rulled_out_tstz_in  => dt_rulled_out_tstz_in,
            id_episode_in          => id_episode_in,
            id_pat_history_out     => id_pat_history_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    FUNCTION ins
    (
        id_patient_in          IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_prof_writes_in      IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_diagnosis_in        IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        flg_status_in          IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_type_in            IN pat_history.flg_type%TYPE DEFAULT NULL,
        desc_diagnosis_in      IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        notes_in               IN pat_history.notes%TYPE DEFAULT NULL,
        flg_type_hist_in       IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        note_cancel_in         IN pat_history.note_cancel%TYPE DEFAULT NULL,
        month_begin_in         IN pat_history.month_begin%TYPE DEFAULT NULL,
        year_begin_in          IN pat_history.year_begin%TYPE DEFAULT NULL,
        day_begin_in           IN pat_history.day_begin%TYPE DEFAULT NULL,
        year_end_in            IN pat_history.year_end%TYPE DEFAULT NULL,
        month_end_in           IN pat_history.month_end%TYPE DEFAULT NULL,
        day_end_in             IN pat_history.day_end%TYPE DEFAULT NULL,
        id_prof_confirmed_in   IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_rulled_out_in  IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_base_in        IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        adw_last_update_in     IN pat_history.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_base_tstz_in        IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_in   IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_in IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_in  IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_history.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) RETURN pat_history.id_pat_history%TYPE IS
        l_pky pat_history.id_pat_history%TYPE := next_key;
    BEGIN
        ins(id_pat_history_in      => l_pky,
            id_patient_in          => id_patient_in,
            id_prof_writes_in      => id_prof_writes_in,
            id_diagnosis_in        => id_diagnosis_in,
            flg_status_in          => flg_status_in,
            flg_type_in            => flg_type_in,
            desc_diagnosis_in      => desc_diagnosis_in,
            notes_in               => notes_in,
            flg_type_hist_in       => flg_type_hist_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            note_cancel_in         => note_cancel_in,
            month_begin_in         => month_begin_in,
            year_begin_in          => year_begin_in,
            day_begin_in           => day_begin_in,
            year_end_in            => year_end_in,
            month_end_in           => month_end_in,
            day_end_in             => day_end_in,
            id_prof_confirmed_in   => id_prof_confirmed_in,
            id_prof_rulled_out_in  => id_prof_rulled_out_in,
            id_prof_base_in        => id_prof_base_in,
            adw_last_update_in     => adw_last_update_in,
            dt_base_tstz_in        => dt_base_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_confirmed_tstz_in   => dt_confirmed_tstz_in,
            dt_pat_history_tstz_in => dt_pat_history_tstz_in,
            dt_rulled_out_tstz_in  => dt_rulled_out_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_patient_in          IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_prof_writes_in      IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_diagnosis_in        IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        flg_status_in          IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_type_in            IN pat_history.flg_type%TYPE DEFAULT NULL,
        desc_diagnosis_in      IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        notes_in               IN pat_history.notes%TYPE DEFAULT NULL,
        flg_type_hist_in       IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        note_cancel_in         IN pat_history.note_cancel%TYPE DEFAULT NULL,
        month_begin_in         IN pat_history.month_begin%TYPE DEFAULT NULL,
        year_begin_in          IN pat_history.year_begin%TYPE DEFAULT NULL,
        day_begin_in           IN pat_history.day_begin%TYPE DEFAULT NULL,
        year_end_in            IN pat_history.year_end%TYPE DEFAULT NULL,
        month_end_in           IN pat_history.month_end%TYPE DEFAULT NULL,
        day_end_in             IN pat_history.day_end%TYPE DEFAULT NULL,
        id_prof_confirmed_in   IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_rulled_out_in  IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_base_in        IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        adw_last_update_in     IN pat_history.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_base_tstz_in        IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_in   IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_in IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_in  IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_history.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) RETURN pat_history.id_pat_history%TYPE IS
        l_pky    pat_history.id_pat_history%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_history_in      => l_pky,
            id_patient_in          => id_patient_in,
            id_prof_writes_in      => id_prof_writes_in,
            id_diagnosis_in        => id_diagnosis_in,
            flg_status_in          => flg_status_in,
            flg_type_in            => flg_type_in,
            desc_diagnosis_in      => desc_diagnosis_in,
            notes_in               => notes_in,
            flg_type_hist_in       => flg_type_hist_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            note_cancel_in         => note_cancel_in,
            month_begin_in         => month_begin_in,
            year_begin_in          => year_begin_in,
            day_begin_in           => day_begin_in,
            year_end_in            => year_end_in,
            month_end_in           => month_end_in,
            day_end_in             => day_end_in,
            id_prof_confirmed_in   => id_prof_confirmed_in,
            id_prof_rulled_out_in  => id_prof_rulled_out_in,
            id_prof_base_in        => id_prof_base_in,
            adw_last_update_in     => adw_last_update_in,
            dt_base_tstz_in        => dt_base_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_confirmed_tstz_in   => dt_confirmed_tstz_in,
            dt_pat_history_tstz_in => dt_pat_history_tstz_in,
            dt_rulled_out_tstz_in  => dt_rulled_out_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_patient_in          IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_prof_writes_in      IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_diagnosis_in        IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        flg_status_in          IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_type_in            IN pat_history.flg_type%TYPE DEFAULT NULL,
        desc_diagnosis_in      IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        notes_in               IN pat_history.notes%TYPE DEFAULT NULL,
        flg_type_hist_in       IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        note_cancel_in         IN pat_history.note_cancel%TYPE DEFAULT NULL,
        month_begin_in         IN pat_history.month_begin%TYPE DEFAULT NULL,
        year_begin_in          IN pat_history.year_begin%TYPE DEFAULT NULL,
        day_begin_in           IN pat_history.day_begin%TYPE DEFAULT NULL,
        year_end_in            IN pat_history.year_end%TYPE DEFAULT NULL,
        month_end_in           IN pat_history.month_end%TYPE DEFAULT NULL,
        day_end_in             IN pat_history.day_end%TYPE DEFAULT NULL,
        id_prof_confirmed_in   IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_rulled_out_in  IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_base_in        IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        adw_last_update_in     IN pat_history.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_base_tstz_in        IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_in   IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_in IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_in  IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_history.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky pat_history.id_pat_history%TYPE := next_key;
    BEGIN
        ins(id_pat_history_in      => l_pky,
            id_patient_in          => id_patient_in,
            id_prof_writes_in      => id_prof_writes_in,
            id_diagnosis_in        => id_diagnosis_in,
            flg_status_in          => flg_status_in,
            flg_type_in            => flg_type_in,
            desc_diagnosis_in      => desc_diagnosis_in,
            notes_in               => notes_in,
            flg_type_hist_in       => flg_type_hist_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            note_cancel_in         => note_cancel_in,
            month_begin_in         => month_begin_in,
            year_begin_in          => year_begin_in,
            day_begin_in           => day_begin_in,
            year_end_in            => year_end_in,
            month_end_in           => month_end_in,
            day_end_in             => day_end_in,
            id_prof_confirmed_in   => id_prof_confirmed_in,
            id_prof_rulled_out_in  => id_prof_rulled_out_in,
            id_prof_base_in        => id_prof_base_in,
            adw_last_update_in     => adw_last_update_in,
            dt_base_tstz_in        => dt_base_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_confirmed_tstz_in   => dt_confirmed_tstz_in,
            dt_pat_history_tstz_in => dt_pat_history_tstz_in,
            dt_rulled_out_tstz_in  => dt_rulled_out_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_patient_in          IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_prof_writes_in      IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_diagnosis_in        IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        flg_status_in          IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_type_in            IN pat_history.flg_type%TYPE DEFAULT NULL,
        desc_diagnosis_in      IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        notes_in               IN pat_history.notes%TYPE DEFAULT NULL,
        flg_type_hist_in       IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        note_cancel_in         IN pat_history.note_cancel%TYPE DEFAULT NULL,
        month_begin_in         IN pat_history.month_begin%TYPE DEFAULT NULL,
        year_begin_in          IN pat_history.year_begin%TYPE DEFAULT NULL,
        day_begin_in           IN pat_history.day_begin%TYPE DEFAULT NULL,
        year_end_in            IN pat_history.year_end%TYPE DEFAULT NULL,
        month_end_in           IN pat_history.month_end%TYPE DEFAULT NULL,
        day_end_in             IN pat_history.day_end%TYPE DEFAULT NULL,
        id_prof_confirmed_in   IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_rulled_out_in  IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_base_in        IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        adw_last_update_in     IN pat_history.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_base_tstz_in        IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_in   IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_in IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_in  IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_history.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        l_pky    pat_history.id_pat_history%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_history_in      => l_pky,
            id_patient_in          => id_patient_in,
            id_prof_writes_in      => id_prof_writes_in,
            id_diagnosis_in        => id_diagnosis_in,
            flg_status_in          => flg_status_in,
            flg_type_in            => flg_type_in,
            desc_diagnosis_in      => desc_diagnosis_in,
            notes_in               => notes_in,
            flg_type_hist_in       => flg_type_hist_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            note_cancel_in         => note_cancel_in,
            month_begin_in         => month_begin_in,
            year_begin_in          => year_begin_in,
            day_begin_in           => day_begin_in,
            year_end_in            => year_end_in,
            month_end_in           => month_end_in,
            day_end_in             => day_end_in,
            id_prof_confirmed_in   => id_prof_confirmed_in,
            id_prof_rulled_out_in  => id_prof_rulled_out_in,
            id_prof_base_in        => id_prof_base_in,
            adw_last_update_in     => adw_last_update_in,
            dt_base_tstz_in        => dt_base_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_confirmed_tstz_in   => dt_confirmed_tstz_in,
            dt_pat_history_tstz_in => dt_pat_history_tstz_in,
            dt_rulled_out_tstz_in  => dt_rulled_out_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_history_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO pat_history
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_HISTORY _' || indx,
                                                        value_in           => rows_in(indx).id_pat_history,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_WRITES _' || indx,
                                                        value_in           => rows_in(indx).id_prof_writes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DIAGNOSIS _' || indx,
                                                        value_in           => rows_in(indx).id_diagnosis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DESC_DIAGNOSIS _' || indx,
                                                        value_in           => rows_in(indx).desc_diagnosis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE_HIST _' || indx,
                                                        value_in           => rows_in(indx).flg_type_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTE_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).note_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MONTH_BEGIN _' || indx,
                                                        value_in           => rows_in(indx).month_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'YEAR_BEGIN _' || indx,
                                                        value_in           => rows_in(indx).year_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DAY_BEGIN _' || indx,
                                                        value_in           => rows_in(indx).day_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'YEAR_END _' || indx,
                                                        value_in           => rows_in(indx).year_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MONTH_END _' || indx,
                                                        value_in           => rows_in(indx).month_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DAY_END _' || indx,
                                                        value_in           => rows_in(indx).day_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CONFIRMED _' || indx,
                                                        value_in           => rows_in(indx).id_prof_confirmed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_RULLED_OUT _' || indx,
                                                        value_in           => rows_in(indx).id_prof_rulled_out,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_BASE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_base,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ADW_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).adw_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BASE_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_base_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CONFIRMED_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_confirmed_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PAT_HISTORY_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_pat_history_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_RULLED_OUT_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_rulled_out_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PAT_HISTORY',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_history_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_pat_history_in       IN pat_history.id_pat_history%TYPE,
        id_patient_in           IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_prof_writes_in       IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_prof_writes_nin      IN BOOLEAN := TRUE,
        id_diagnosis_in         IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        id_diagnosis_nin        IN BOOLEAN := TRUE,
        flg_status_in           IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        flg_type_in             IN pat_history.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        desc_diagnosis_in       IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        desc_diagnosis_nin      IN BOOLEAN := TRUE,
        notes_in                IN pat_history.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        flg_type_hist_in        IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        flg_type_hist_nin       IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        note_cancel_in          IN pat_history.note_cancel%TYPE DEFAULT NULL,
        note_cancel_nin         IN BOOLEAN := TRUE,
        month_begin_in          IN pat_history.month_begin%TYPE DEFAULT NULL,
        month_begin_nin         IN BOOLEAN := TRUE,
        year_begin_in           IN pat_history.year_begin%TYPE DEFAULT NULL,
        year_begin_nin          IN BOOLEAN := TRUE,
        day_begin_in            IN pat_history.day_begin%TYPE DEFAULT NULL,
        day_begin_nin           IN BOOLEAN := TRUE,
        year_end_in             IN pat_history.year_end%TYPE DEFAULT NULL,
        year_end_nin            IN BOOLEAN := TRUE,
        month_end_in            IN pat_history.month_end%TYPE DEFAULT NULL,
        month_end_nin           IN BOOLEAN := TRUE,
        day_end_in              IN pat_history.day_end%TYPE DEFAULT NULL,
        day_end_nin             IN BOOLEAN := TRUE,
        id_prof_confirmed_in    IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_confirmed_nin   IN BOOLEAN := TRUE,
        id_prof_rulled_out_in   IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_rulled_out_nin  IN BOOLEAN := TRUE,
        id_prof_base_in         IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        id_prof_base_nin        IN BOOLEAN := TRUE,
        adw_last_update_in      IN pat_history.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        dt_base_tstz_in         IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_base_tstz_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        dt_confirmed_tstz_in    IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_nin   IN BOOLEAN := TRUE,
        dt_pat_history_tstz_in  IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_nin IN BOOLEAN := TRUE,
        dt_rulled_out_tstz_in   IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_nin  IN BOOLEAN := TRUE,
        id_episode_in           IN pat_history.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_patient_n          NUMBER(1);
        l_id_prof_writes_n      NUMBER(1);
        l_id_diagnosis_n        NUMBER(1);
        l_flg_status_n          NUMBER(1);
        l_flg_type_n            NUMBER(1);
        l_desc_diagnosis_n      NUMBER(1);
        l_notes_n               NUMBER(1);
        l_flg_type_hist_n       NUMBER(1);
        l_id_prof_cancel_n      NUMBER(1);
        l_note_cancel_n         NUMBER(1);
        l_month_begin_n         NUMBER(1);
        l_year_begin_n          NUMBER(1);
        l_day_begin_n           NUMBER(1);
        l_year_end_n            NUMBER(1);
        l_month_end_n           NUMBER(1);
        l_day_end_n             NUMBER(1);
        l_id_prof_confirmed_n   NUMBER(1);
        l_id_prof_rulled_out_n  NUMBER(1);
        l_id_prof_base_n        NUMBER(1);
        l_adw_last_update_n     NUMBER(1);
        l_dt_base_tstz_n        NUMBER(1);
        l_dt_cancel_tstz_n      NUMBER(1);
        l_dt_confirmed_tstz_n   NUMBER(1);
        l_dt_pat_history_tstz_n NUMBER(1);
        l_dt_rulled_out_tstz_n  NUMBER(1);
        l_id_episode_n          NUMBER(1);
    BEGIN
    
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_id_prof_writes_n      := sys.diutil.bool_to_int(id_prof_writes_nin);
        l_id_diagnosis_n        := sys.diutil.bool_to_int(id_diagnosis_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_type_n            := sys.diutil.bool_to_int(flg_type_nin);
        l_desc_diagnosis_n      := sys.diutil.bool_to_int(desc_diagnosis_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_flg_type_hist_n       := sys.diutil.bool_to_int(flg_type_hist_nin);
        l_id_prof_cancel_n      := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_note_cancel_n         := sys.diutil.bool_to_int(note_cancel_nin);
        l_month_begin_n         := sys.diutil.bool_to_int(month_begin_nin);
        l_year_begin_n          := sys.diutil.bool_to_int(year_begin_nin);
        l_day_begin_n           := sys.diutil.bool_to_int(day_begin_nin);
        l_year_end_n            := sys.diutil.bool_to_int(year_end_nin);
        l_month_end_n           := sys.diutil.bool_to_int(month_end_nin);
        l_day_end_n             := sys.diutil.bool_to_int(day_end_nin);
        l_id_prof_confirmed_n   := sys.diutil.bool_to_int(id_prof_confirmed_nin);
        l_id_prof_rulled_out_n  := sys.diutil.bool_to_int(id_prof_rulled_out_nin);
        l_id_prof_base_n        := sys.diutil.bool_to_int(id_prof_base_nin);
        l_adw_last_update_n     := sys.diutil.bool_to_int(adw_last_update_nin);
        l_dt_base_tstz_n        := sys.diutil.bool_to_int(dt_base_tstz_nin);
        l_dt_cancel_tstz_n      := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_dt_confirmed_tstz_n   := sys.diutil.bool_to_int(dt_confirmed_tstz_nin);
        l_dt_pat_history_tstz_n := sys.diutil.bool_to_int(dt_pat_history_tstz_nin);
        l_dt_rulled_out_tstz_n  := sys.diutil.bool_to_int(dt_rulled_out_tstz_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
    
        UPDATE pat_history
           SET id_patient          = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_prof_writes      = decode(l_id_prof_writes_n,
                                            0,
                                            id_prof_writes_in,
                                            nvl(id_prof_writes_in, id_prof_writes)),
               id_diagnosis        = decode(l_id_diagnosis_n, 0, id_diagnosis_in, nvl(id_diagnosis_in, id_diagnosis)),
               flg_status          = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               flg_type            = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               desc_diagnosis      = decode(l_desc_diagnosis_n,
                                            0,
                                            desc_diagnosis_in,
                                            nvl(desc_diagnosis_in, desc_diagnosis)),
               notes               = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               flg_type_hist       = decode(l_flg_type_hist_n, 0, flg_type_hist_in, nvl(flg_type_hist_in, flg_type_hist)),
               id_prof_cancel      = decode(l_id_prof_cancel_n,
                                            0,
                                            id_prof_cancel_in,
                                            nvl(id_prof_cancel_in, id_prof_cancel)),
               note_cancel         = decode(l_note_cancel_n, 0, note_cancel_in, nvl(note_cancel_in, note_cancel)),
               month_begin         = decode(l_month_begin_n, 0, month_begin_in, nvl(month_begin_in, month_begin)),
               year_begin          = decode(l_year_begin_n, 0, year_begin_in, nvl(year_begin_in, year_begin)),
               day_begin           = decode(l_day_begin_n, 0, day_begin_in, nvl(day_begin_in, day_begin)),
               year_end            = decode(l_year_end_n, 0, year_end_in, nvl(year_end_in, year_end)),
               month_end           = decode(l_month_end_n, 0, month_end_in, nvl(month_end_in, month_end)),
               day_end             = decode(l_day_end_n, 0, day_end_in, nvl(day_end_in, day_end)),
               id_prof_confirmed   = decode(l_id_prof_confirmed_n,
                                            0,
                                            id_prof_confirmed_in,
                                            nvl(id_prof_confirmed_in, id_prof_confirmed)),
               id_prof_rulled_out  = decode(l_id_prof_rulled_out_n,
                                            0,
                                            id_prof_rulled_out_in,
                                            nvl(id_prof_rulled_out_in, id_prof_rulled_out)),
               id_prof_base        = decode(l_id_prof_base_n, 0, id_prof_base_in, nvl(id_prof_base_in, id_prof_base)),
               adw_last_update     = decode(l_adw_last_update_n,
                                            0,
                                            adw_last_update_in,
                                            nvl(adw_last_update_in, adw_last_update)),
               dt_base_tstz        = decode(l_dt_base_tstz_n, 0, dt_base_tstz_in, nvl(dt_base_tstz_in, dt_base_tstz)),
               dt_cancel_tstz      = decode(l_dt_cancel_tstz_n,
                                            0,
                                            dt_cancel_tstz_in,
                                            nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               dt_confirmed_tstz   = decode(l_dt_confirmed_tstz_n,
                                            0,
                                            dt_confirmed_tstz_in,
                                            nvl(dt_confirmed_tstz_in, dt_confirmed_tstz)),
               dt_pat_history_tstz = decode(l_dt_pat_history_tstz_n,
                                            0,
                                            dt_pat_history_tstz_in,
                                            nvl(dt_pat_history_tstz_in, dt_pat_history_tstz)),
               dt_rulled_out_tstz  = decode(l_dt_rulled_out_tstz_n,
                                            0,
                                            dt_rulled_out_tstz_in,
                                            nvl(dt_rulled_out_tstz_in, dt_rulled_out_tstz)),
               id_episode          = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode))
         WHERE id_pat_history = id_pat_history_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_HISTORY');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    IF l_name = 'PHY_DIAG_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DIAGNOSIS',
                                                        value_in           => id_diagnosis_in);
                    END IF;
                    IF l_name = 'PHY_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PHY_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_WRITES',
                                                        value_in           => id_prof_writes_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_BASE',
                                                        value_in           => id_prof_base_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK4'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CONFIRMED',
                                                        value_in           => id_prof_confirmed_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK5'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_RULLED_OUT',
                                                        value_in           => id_prof_rulled_out_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pat_history_in       IN pat_history.id_pat_history%TYPE,
        id_patient_in           IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_prof_writes_in       IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_prof_writes_nin      IN BOOLEAN := TRUE,
        id_diagnosis_in         IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        id_diagnosis_nin        IN BOOLEAN := TRUE,
        flg_status_in           IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        flg_type_in             IN pat_history.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        desc_diagnosis_in       IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        desc_diagnosis_nin      IN BOOLEAN := TRUE,
        notes_in                IN pat_history.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        flg_type_hist_in        IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        flg_type_hist_nin       IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        note_cancel_in          IN pat_history.note_cancel%TYPE DEFAULT NULL,
        note_cancel_nin         IN BOOLEAN := TRUE,
        month_begin_in          IN pat_history.month_begin%TYPE DEFAULT NULL,
        month_begin_nin         IN BOOLEAN := TRUE,
        year_begin_in           IN pat_history.year_begin%TYPE DEFAULT NULL,
        year_begin_nin          IN BOOLEAN := TRUE,
        day_begin_in            IN pat_history.day_begin%TYPE DEFAULT NULL,
        day_begin_nin           IN BOOLEAN := TRUE,
        year_end_in             IN pat_history.year_end%TYPE DEFAULT NULL,
        year_end_nin            IN BOOLEAN := TRUE,
        month_end_in            IN pat_history.month_end%TYPE DEFAULT NULL,
        month_end_nin           IN BOOLEAN := TRUE,
        day_end_in              IN pat_history.day_end%TYPE DEFAULT NULL,
        day_end_nin             IN BOOLEAN := TRUE,
        id_prof_confirmed_in    IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_confirmed_nin   IN BOOLEAN := TRUE,
        id_prof_rulled_out_in   IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_rulled_out_nin  IN BOOLEAN := TRUE,
        id_prof_base_in         IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        id_prof_base_nin        IN BOOLEAN := TRUE,
        adw_last_update_in      IN pat_history.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        dt_base_tstz_in         IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_base_tstz_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        dt_confirmed_tstz_in    IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_nin   IN BOOLEAN := TRUE,
        dt_pat_history_tstz_in  IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_nin IN BOOLEAN := TRUE,
        dt_rulled_out_tstz_in   IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_nin  IN BOOLEAN := TRUE,
        id_episode_in           IN pat_history.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_history_in       => id_pat_history_in,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            id_prof_writes_in       => id_prof_writes_in,
            id_prof_writes_nin      => id_prof_writes_nin,
            id_diagnosis_in         => id_diagnosis_in,
            id_diagnosis_nin        => id_diagnosis_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            flg_type_in             => flg_type_in,
            flg_type_nin            => flg_type_nin,
            desc_diagnosis_in       => desc_diagnosis_in,
            desc_diagnosis_nin      => desc_diagnosis_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            flg_type_hist_in        => flg_type_hist_in,
            flg_type_hist_nin       => flg_type_hist_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            note_cancel_in          => note_cancel_in,
            note_cancel_nin         => note_cancel_nin,
            month_begin_in          => month_begin_in,
            month_begin_nin         => month_begin_nin,
            year_begin_in           => year_begin_in,
            year_begin_nin          => year_begin_nin,
            day_begin_in            => day_begin_in,
            day_begin_nin           => day_begin_nin,
            year_end_in             => year_end_in,
            year_end_nin            => year_end_nin,
            month_end_in            => month_end_in,
            month_end_nin           => month_end_nin,
            day_end_in              => day_end_in,
            day_end_nin             => day_end_nin,
            id_prof_confirmed_in    => id_prof_confirmed_in,
            id_prof_confirmed_nin   => id_prof_confirmed_nin,
            id_prof_rulled_out_in   => id_prof_rulled_out_in,
            id_prof_rulled_out_nin  => id_prof_rulled_out_nin,
            id_prof_base_in         => id_prof_base_in,
            id_prof_base_nin        => id_prof_base_nin,
            adw_last_update_in      => adw_last_update_in,
            adw_last_update_nin     => adw_last_update_nin,
            dt_base_tstz_in         => dt_base_tstz_in,
            dt_base_tstz_nin        => dt_base_tstz_nin,
            dt_cancel_tstz_in       => dt_cancel_tstz_in,
            dt_cancel_tstz_nin      => dt_cancel_tstz_nin,
            dt_confirmed_tstz_in    => dt_confirmed_tstz_in,
            dt_confirmed_tstz_nin   => dt_confirmed_tstz_nin,
            dt_pat_history_tstz_in  => dt_pat_history_tstz_in,
            dt_pat_history_tstz_nin => dt_pat_history_tstz_nin,
            dt_rulled_out_tstz_in   => dt_rulled_out_tstz_in,
            dt_rulled_out_tstz_nin  => dt_rulled_out_tstz_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_patient_in           IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_prof_writes_in       IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_prof_writes_nin      IN BOOLEAN := TRUE,
        id_diagnosis_in         IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        id_diagnosis_nin        IN BOOLEAN := TRUE,
        flg_status_in           IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        flg_type_in             IN pat_history.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        desc_diagnosis_in       IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        desc_diagnosis_nin      IN BOOLEAN := TRUE,
        notes_in                IN pat_history.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        flg_type_hist_in        IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        flg_type_hist_nin       IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        note_cancel_in          IN pat_history.note_cancel%TYPE DEFAULT NULL,
        note_cancel_nin         IN BOOLEAN := TRUE,
        month_begin_in          IN pat_history.month_begin%TYPE DEFAULT NULL,
        month_begin_nin         IN BOOLEAN := TRUE,
        year_begin_in           IN pat_history.year_begin%TYPE DEFAULT NULL,
        year_begin_nin          IN BOOLEAN := TRUE,
        day_begin_in            IN pat_history.day_begin%TYPE DEFAULT NULL,
        day_begin_nin           IN BOOLEAN := TRUE,
        year_end_in             IN pat_history.year_end%TYPE DEFAULT NULL,
        year_end_nin            IN BOOLEAN := TRUE,
        month_end_in            IN pat_history.month_end%TYPE DEFAULT NULL,
        month_end_nin           IN BOOLEAN := TRUE,
        day_end_in              IN pat_history.day_end%TYPE DEFAULT NULL,
        day_end_nin             IN BOOLEAN := TRUE,
        id_prof_confirmed_in    IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_confirmed_nin   IN BOOLEAN := TRUE,
        id_prof_rulled_out_in   IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_rulled_out_nin  IN BOOLEAN := TRUE,
        id_prof_base_in         IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        id_prof_base_nin        IN BOOLEAN := TRUE,
        adw_last_update_in      IN pat_history.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        dt_base_tstz_in         IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_base_tstz_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        dt_confirmed_tstz_in    IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_nin   IN BOOLEAN := TRUE,
        dt_pat_history_tstz_in  IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_nin IN BOOLEAN := TRUE,
        dt_rulled_out_tstz_in   IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_nin  IN BOOLEAN := TRUE,
        id_episode_in           IN pat_history.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_patient_n          NUMBER(1);
        l_id_prof_writes_n      NUMBER(1);
        l_id_diagnosis_n        NUMBER(1);
        l_flg_status_n          NUMBER(1);
        l_flg_type_n            NUMBER(1);
        l_desc_diagnosis_n      NUMBER(1);
        l_notes_n               NUMBER(1);
        l_flg_type_hist_n       NUMBER(1);
        l_id_prof_cancel_n      NUMBER(1);
        l_note_cancel_n         NUMBER(1);
        l_month_begin_n         NUMBER(1);
        l_year_begin_n          NUMBER(1);
        l_day_begin_n           NUMBER(1);
        l_year_end_n            NUMBER(1);
        l_month_end_n           NUMBER(1);
        l_day_end_n             NUMBER(1);
        l_id_prof_confirmed_n   NUMBER(1);
        l_id_prof_rulled_out_n  NUMBER(1);
        l_id_prof_base_n        NUMBER(1);
        l_adw_last_update_n     NUMBER(1);
        l_dt_base_tstz_n        NUMBER(1);
        l_dt_cancel_tstz_n      NUMBER(1);
        l_dt_confirmed_tstz_n   NUMBER(1);
        l_dt_pat_history_tstz_n NUMBER(1);
        l_dt_rulled_out_tstz_n  NUMBER(1);
        l_id_episode_n          NUMBER(1);
        id_pat_history_in       pat_history.id_pat_history%TYPE;
    BEGIN
    
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_id_prof_writes_n      := sys.diutil.bool_to_int(id_prof_writes_nin);
        l_id_diagnosis_n        := sys.diutil.bool_to_int(id_diagnosis_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_type_n            := sys.diutil.bool_to_int(flg_type_nin);
        l_desc_diagnosis_n      := sys.diutil.bool_to_int(desc_diagnosis_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_flg_type_hist_n       := sys.diutil.bool_to_int(flg_type_hist_nin);
        l_id_prof_cancel_n      := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_note_cancel_n         := sys.diutil.bool_to_int(note_cancel_nin);
        l_month_begin_n         := sys.diutil.bool_to_int(month_begin_nin);
        l_year_begin_n          := sys.diutil.bool_to_int(year_begin_nin);
        l_day_begin_n           := sys.diutil.bool_to_int(day_begin_nin);
        l_year_end_n            := sys.diutil.bool_to_int(year_end_nin);
        l_month_end_n           := sys.diutil.bool_to_int(month_end_nin);
        l_day_end_n             := sys.diutil.bool_to_int(day_end_nin);
        l_id_prof_confirmed_n   := sys.diutil.bool_to_int(id_prof_confirmed_nin);
        l_id_prof_rulled_out_n  := sys.diutil.bool_to_int(id_prof_rulled_out_nin);
        l_id_prof_base_n        := sys.diutil.bool_to_int(id_prof_base_nin);
        l_adw_last_update_n     := sys.diutil.bool_to_int(adw_last_update_nin);
        l_dt_base_tstz_n        := sys.diutil.bool_to_int(dt_base_tstz_nin);
        l_dt_cancel_tstz_n      := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_dt_confirmed_tstz_n   := sys.diutil.bool_to_int(dt_confirmed_tstz_nin);
        l_dt_pat_history_tstz_n := sys.diutil.bool_to_int(dt_pat_history_tstz_nin);
        l_dt_rulled_out_tstz_n  := sys.diutil.bool_to_int(dt_rulled_out_tstz_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
    
        l_sql := 'UPDATE PAT_HISTORY SET ' || ' ID_PATIENT = decode (' || l_id_patient_n ||
                 ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' || ' ID_PROF_WRITES = decode (' ||
                 l_id_prof_writes_n || ',0,:id_prof_writes_in, NVL (:id_prof_writes_in, ID_PROF_WRITES)) ' || ',' ||
                 ' ID_DIAGNOSIS = decode (' || l_id_diagnosis_n ||
                 ',0,:id_diagnosis_in, NVL (:id_diagnosis_in, ID_DIAGNOSIS)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' FLG_TYPE = decode (' || l_flg_type_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' ||
                 ' DESC_DIAGNOSIS = decode (' || l_desc_diagnosis_n ||
                 ',0,:desc_diagnosis_in, NVL (:desc_diagnosis_in, DESC_DIAGNOSIS)) ' || ',' || ' NOTES = decode (' ||
                 l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' || ' FLG_TYPE_HIST = decode (' ||
                 l_flg_type_hist_n || ',0,:flg_type_hist_in, NVL (:flg_type_hist_in, FLG_TYPE_HIST)) ' || ',' ||
                 ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                 ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' ||
                 ' NOTE_CANCEL = decode (' || l_note_cancel_n ||
                 ',0,:note_cancel_in, NVL (:note_cancel_in, NOTE_CANCEL)) ' || ',' || ' MONTH_BEGIN = decode (' ||
                 l_month_begin_n || ',0,:month_begin_in, NVL (:month_begin_in, MONTH_BEGIN)) ' || ',' ||
                 ' YEAR_BEGIN = decode (' || l_year_begin_n || ',0,:year_begin_in, NVL (:year_begin_in, YEAR_BEGIN)) ' || ',' ||
                 ' DAY_BEGIN = decode (' || l_day_begin_n || ',0,:day_begin_in, NVL (:day_begin_in, DAY_BEGIN)) ' || ',' ||
                 ' YEAR_END = decode (' || l_year_end_n || ',0,:year_end_in, NVL (:year_end_in, YEAR_END)) ' || ',' ||
                 ' MONTH_END = decode (' || l_month_end_n || ',0,:month_end_in, NVL (:month_end_in, MONTH_END)) ' || ',' ||
                 ' DAY_END = decode (' || l_day_end_n || ',0,:day_end_in, NVL (:day_end_in, DAY_END)) ' || ',' ||
                 ' ID_PROF_CONFIRMED = decode (' || l_id_prof_confirmed_n ||
                 ',0,:id_prof_confirmed_in, NVL (:id_prof_confirmed_in, ID_PROF_CONFIRMED)) ' || ',' ||
                 ' ID_PROF_RULLED_OUT = decode (' || l_id_prof_rulled_out_n ||
                 ',0,:id_prof_rulled_out_in, NVL (:id_prof_rulled_out_in, ID_PROF_RULLED_OUT)) ' || ',' ||
                 ' ID_PROF_BASE = decode (' || l_id_prof_base_n ||
                 ',0,:id_prof_base_in, NVL (:id_prof_base_in, ID_PROF_BASE)) ' || ',' || ' ADW_LAST_UPDATE = decode (' ||
                 l_adw_last_update_n || ',0,:adw_last_update_in, NVL (:adw_last_update_in, ADW_LAST_UPDATE)) ' || ',' ||
                 ' DT_BASE_TSTZ = decode (' || l_dt_base_tstz_n ||
                 ',0,:dt_base_tstz_in, NVL (:dt_base_tstz_in, DT_BASE_TSTZ)) ' || ',' || ' DT_CANCEL_TSTZ = decode (' ||
                 l_dt_cancel_tstz_n || ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) ' || ',' ||
                 ' DT_CONFIRMED_TSTZ = decode (' || l_dt_confirmed_tstz_n ||
                 ',0,:dt_confirmed_tstz_in, NVL (:dt_confirmed_tstz_in, DT_CONFIRMED_TSTZ)) ' || ',' ||
                 ' DT_PAT_HISTORY_TSTZ = decode (' || l_dt_pat_history_tstz_n ||
                 ',0,:dt_pat_history_tstz_in, NVL (:dt_pat_history_tstz_in, DT_PAT_HISTORY_TSTZ)) ' || ',' ||
                 ' DT_RULLED_OUT_TSTZ = decode (' || l_dt_rulled_out_tstz_n ||
                 ',0,:dt_rulled_out_tstz_in, NVL (:dt_rulled_out_tstz_in, DT_RULLED_OUT_TSTZ)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_patient_in, id_prof_writes_in, id_diagnosis_in, flg_status_in, flg_type_in, desc_diagnosis_in, notes_in, flg_type_hist_in, id_prof_cancel_in, note_cancel_in, month_begin_in, year_begin_in, day_begin_in, year_end_in, month_end_in, day_end_in, id_prof_confirmed_in, id_prof_rulled_out_in, id_prof_base_in, adw_last_update_in, dt_base_tstz_in, dt_cancel_tstz_in, dt_confirmed_tstz_in, dt_pat_history_tstz_in, dt_rulled_out_tstz_in, id_episode_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_HISTORY');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    IF l_name = 'PHY_DIAG_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DIAGNOSIS',
                                                        value_in           => id_diagnosis_in);
                    END IF;
                    IF l_name = 'PHY_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PHY_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_WRITES',
                                                        value_in           => id_prof_writes_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_BASE',
                                                        value_in           => id_prof_base_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK4'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CONFIRMED',
                                                        value_in           => id_prof_confirmed_in);
                    END IF;
                    IF l_name = 'PHY_PROF_FK5'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_RULLED_OUT',
                                                        value_in           => id_prof_rulled_out_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_patient_in           IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_prof_writes_in       IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_prof_writes_nin      IN BOOLEAN := TRUE,
        id_diagnosis_in         IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        id_diagnosis_nin        IN BOOLEAN := TRUE,
        flg_status_in           IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        flg_type_in             IN pat_history.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        desc_diagnosis_in       IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        desc_diagnosis_nin      IN BOOLEAN := TRUE,
        notes_in                IN pat_history.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        flg_type_hist_in        IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        flg_type_hist_nin       IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        note_cancel_in          IN pat_history.note_cancel%TYPE DEFAULT NULL,
        note_cancel_nin         IN BOOLEAN := TRUE,
        month_begin_in          IN pat_history.month_begin%TYPE DEFAULT NULL,
        month_begin_nin         IN BOOLEAN := TRUE,
        year_begin_in           IN pat_history.year_begin%TYPE DEFAULT NULL,
        year_begin_nin          IN BOOLEAN := TRUE,
        day_begin_in            IN pat_history.day_begin%TYPE DEFAULT NULL,
        day_begin_nin           IN BOOLEAN := TRUE,
        year_end_in             IN pat_history.year_end%TYPE DEFAULT NULL,
        year_end_nin            IN BOOLEAN := TRUE,
        month_end_in            IN pat_history.month_end%TYPE DEFAULT NULL,
        month_end_nin           IN BOOLEAN := TRUE,
        day_end_in              IN pat_history.day_end%TYPE DEFAULT NULL,
        day_end_nin             IN BOOLEAN := TRUE,
        id_prof_confirmed_in    IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_confirmed_nin   IN BOOLEAN := TRUE,
        id_prof_rulled_out_in   IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_rulled_out_nin  IN BOOLEAN := TRUE,
        id_prof_base_in         IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        id_prof_base_nin        IN BOOLEAN := TRUE,
        adw_last_update_in      IN pat_history.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        dt_base_tstz_in         IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_base_tstz_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        dt_confirmed_tstz_in    IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_nin   IN BOOLEAN := TRUE,
        dt_pat_history_tstz_in  IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_nin IN BOOLEAN := TRUE,
        dt_rulled_out_tstz_in   IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_nin  IN BOOLEAN := TRUE,
        id_episode_in           IN pat_history.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            id_prof_writes_in       => id_prof_writes_in,
            id_prof_writes_nin      => id_prof_writes_nin,
            id_diagnosis_in         => id_diagnosis_in,
            id_diagnosis_nin        => id_diagnosis_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            flg_type_in             => flg_type_in,
            flg_type_nin            => flg_type_nin,
            desc_diagnosis_in       => desc_diagnosis_in,
            desc_diagnosis_nin      => desc_diagnosis_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            flg_type_hist_in        => flg_type_hist_in,
            flg_type_hist_nin       => flg_type_hist_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            note_cancel_in          => note_cancel_in,
            note_cancel_nin         => note_cancel_nin,
            month_begin_in          => month_begin_in,
            month_begin_nin         => month_begin_nin,
            year_begin_in           => year_begin_in,
            year_begin_nin          => year_begin_nin,
            day_begin_in            => day_begin_in,
            day_begin_nin           => day_begin_nin,
            year_end_in             => year_end_in,
            year_end_nin            => year_end_nin,
            month_end_in            => month_end_in,
            month_end_nin           => month_end_nin,
            day_end_in              => day_end_in,
            day_end_nin             => day_end_nin,
            id_prof_confirmed_in    => id_prof_confirmed_in,
            id_prof_confirmed_nin   => id_prof_confirmed_nin,
            id_prof_rulled_out_in   => id_prof_rulled_out_in,
            id_prof_rulled_out_nin  => id_prof_rulled_out_nin,
            id_prof_base_in         => id_prof_base_in,
            id_prof_base_nin        => id_prof_base_nin,
            adw_last_update_in      => adw_last_update_in,
            adw_last_update_nin     => adw_last_update_nin,
            dt_base_tstz_in         => dt_base_tstz_in,
            dt_base_tstz_nin        => dt_base_tstz_nin,
            dt_cancel_tstz_in       => dt_cancel_tstz_in,
            dt_cancel_tstz_nin      => dt_cancel_tstz_nin,
            dt_confirmed_tstz_in    => dt_confirmed_tstz_in,
            dt_confirmed_tstz_nin   => dt_confirmed_tstz_nin,
            dt_pat_history_tstz_in  => dt_pat_history_tstz_in,
            dt_pat_history_tstz_nin => dt_pat_history_tstz_nin,
            dt_rulled_out_tstz_in   => dt_rulled_out_tstz_in,
            dt_rulled_out_tstz_nin  => dt_rulled_out_tstz_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_history%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_history_in      => rec_in.id_pat_history,
            id_patient_in          => rec_in.id_patient,
            id_prof_writes_in      => rec_in.id_prof_writes,
            id_diagnosis_in        => rec_in.id_diagnosis,
            flg_status_in          => rec_in.flg_status,
            flg_type_in            => rec_in.flg_type,
            desc_diagnosis_in      => rec_in.desc_diagnosis,
            notes_in               => rec_in.notes,
            flg_type_hist_in       => rec_in.flg_type_hist,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            note_cancel_in         => rec_in.note_cancel,
            month_begin_in         => rec_in.month_begin,
            year_begin_in          => rec_in.year_begin,
            day_begin_in           => rec_in.day_begin,
            year_end_in            => rec_in.year_end,
            month_end_in           => rec_in.month_end,
            day_end_in             => rec_in.day_end,
            id_prof_confirmed_in   => rec_in.id_prof_confirmed,
            id_prof_rulled_out_in  => rec_in.id_prof_rulled_out,
            id_prof_base_in        => rec_in.id_prof_base,
            adw_last_update_in     => rec_in.adw_last_update,
            dt_base_tstz_in        => rec_in.dt_base_tstz,
            dt_cancel_tstz_in      => rec_in.dt_cancel_tstz,
            dt_confirmed_tstz_in   => rec_in.dt_confirmed_tstz,
            dt_pat_history_tstz_in => rec_in.dt_pat_history_tstz,
            dt_rulled_out_tstz_in  => rec_in.dt_rulled_out_tstz,
            id_episode_in          => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_history%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_history_in      => rec_in.id_pat_history,
            id_patient_in          => rec_in.id_patient,
            id_prof_writes_in      => rec_in.id_prof_writes,
            id_diagnosis_in        => rec_in.id_diagnosis,
            flg_status_in          => rec_in.flg_status,
            flg_type_in            => rec_in.flg_type,
            desc_diagnosis_in      => rec_in.desc_diagnosis,
            notes_in               => rec_in.notes,
            flg_type_hist_in       => rec_in.flg_type_hist,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            note_cancel_in         => rec_in.note_cancel,
            month_begin_in         => rec_in.month_begin,
            year_begin_in          => rec_in.year_begin,
            day_begin_in           => rec_in.day_begin,
            year_end_in            => rec_in.year_end,
            month_end_in           => rec_in.month_end,
            day_end_in             => rec_in.day_end,
            id_prof_confirmed_in   => rec_in.id_prof_confirmed,
            id_prof_rulled_out_in  => rec_in.id_prof_rulled_out,
            id_prof_base_in        => rec_in.id_prof_base,
            adw_last_update_in     => rec_in.adw_last_update,
            dt_base_tstz_in        => rec_in.dt_base_tstz,
            dt_cancel_tstz_in      => rec_in.dt_cancel_tstz,
            dt_confirmed_tstz_in   => rec_in.dt_confirmed_tstz,
            dt_pat_history_tstz_in => rec_in.dt_pat_history_tstz,
            dt_rulled_out_tstz_in  => rec_in.dt_rulled_out_tstz,
            id_episode_in          => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_pat_history_in      IN pat_history.id_pat_history%TYPE,
        id_patient_in          IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_prof_writes_in      IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_diagnosis_in        IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        flg_status_in          IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_type_in            IN pat_history.flg_type%TYPE DEFAULT NULL,
        desc_diagnosis_in      IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        notes_in               IN pat_history.notes%TYPE DEFAULT NULL,
        flg_type_hist_in       IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        note_cancel_in         IN pat_history.note_cancel%TYPE DEFAULT NULL,
        month_begin_in         IN pat_history.month_begin%TYPE DEFAULT NULL,
        year_begin_in          IN pat_history.year_begin%TYPE DEFAULT NULL,
        day_begin_in           IN pat_history.day_begin%TYPE DEFAULT NULL,
        year_end_in            IN pat_history.year_end%TYPE DEFAULT NULL,
        month_end_in           IN pat_history.month_end%TYPE DEFAULT NULL,
        day_end_in             IN pat_history.day_end%TYPE DEFAULT NULL,
        id_prof_confirmed_in   IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_rulled_out_in  IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_base_in        IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        adw_last_update_in     IN pat_history.adw_last_update%TYPE DEFAULT NULL,
        dt_base_tstz_in        IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_in   IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_in IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_in  IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_history.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_history_in      => id_pat_history_in,
            id_patient_in          => id_patient_in,
            id_prof_writes_in      => id_prof_writes_in,
            id_diagnosis_in        => id_diagnosis_in,
            flg_status_in          => flg_status_in,
            flg_type_in            => flg_type_in,
            desc_diagnosis_in      => desc_diagnosis_in,
            notes_in               => notes_in,
            flg_type_hist_in       => flg_type_hist_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            note_cancel_in         => note_cancel_in,
            month_begin_in         => month_begin_in,
            year_begin_in          => year_begin_in,
            day_begin_in           => day_begin_in,
            year_end_in            => year_end_in,
            month_end_in           => month_end_in,
            day_end_in             => day_end_in,
            id_prof_confirmed_in   => id_prof_confirmed_in,
            id_prof_rulled_out_in  => id_prof_rulled_out_in,
            id_prof_base_in        => id_prof_base_in,
            adw_last_update_in     => adw_last_update_in,
            dt_base_tstz_in        => dt_base_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_confirmed_tstz_in   => dt_confirmed_tstz_in,
            dt_pat_history_tstz_in => dt_pat_history_tstz_in,
            dt_rulled_out_tstz_in  => dt_rulled_out_tstz_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_pat_history_in      => id_pat_history_in,
                id_patient_in          => id_patient_in,
                id_prof_writes_in      => id_prof_writes_in,
                id_diagnosis_in        => id_diagnosis_in,
                flg_status_in          => flg_status_in,
                flg_type_in            => flg_type_in,
                desc_diagnosis_in      => desc_diagnosis_in,
                notes_in               => notes_in,
                flg_type_hist_in       => flg_type_hist_in,
                id_prof_cancel_in      => id_prof_cancel_in,
                note_cancel_in         => note_cancel_in,
                month_begin_in         => month_begin_in,
                year_begin_in          => year_begin_in,
                day_begin_in           => day_begin_in,
                year_end_in            => year_end_in,
                month_end_in           => month_end_in,
                day_end_in             => day_end_in,
                id_prof_confirmed_in   => id_prof_confirmed_in,
                id_prof_rulled_out_in  => id_prof_rulled_out_in,
                id_prof_base_in        => id_prof_base_in,
                adw_last_update_in     => adw_last_update_in,
                dt_base_tstz_in        => dt_base_tstz_in,
                dt_cancel_tstz_in      => dt_cancel_tstz_in,
                dt_confirmed_tstz_in   => dt_confirmed_tstz_in,
                dt_pat_history_tstz_in => dt_pat_history_tstz_in,
                dt_rulled_out_tstz_in  => dt_rulled_out_tstz_in,
                id_episode_in          => id_episode_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_pat_history_in      IN pat_history.id_pat_history%TYPE,
        id_patient_in          IN pat_history.id_patient%TYPE DEFAULT NULL,
        id_prof_writes_in      IN pat_history.id_prof_writes%TYPE DEFAULT NULL,
        id_diagnosis_in        IN pat_history.id_diagnosis%TYPE DEFAULT NULL,
        flg_status_in          IN pat_history.flg_status%TYPE DEFAULT NULL,
        flg_type_in            IN pat_history.flg_type%TYPE DEFAULT NULL,
        desc_diagnosis_in      IN pat_history.desc_diagnosis%TYPE DEFAULT NULL,
        notes_in               IN pat_history.notes%TYPE DEFAULT NULL,
        flg_type_hist_in       IN pat_history.flg_type_hist%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN pat_history.id_prof_cancel%TYPE DEFAULT NULL,
        note_cancel_in         IN pat_history.note_cancel%TYPE DEFAULT NULL,
        month_begin_in         IN pat_history.month_begin%TYPE DEFAULT NULL,
        year_begin_in          IN pat_history.year_begin%TYPE DEFAULT NULL,
        day_begin_in           IN pat_history.day_begin%TYPE DEFAULT NULL,
        year_end_in            IN pat_history.year_end%TYPE DEFAULT NULL,
        month_end_in           IN pat_history.month_end%TYPE DEFAULT NULL,
        day_end_in             IN pat_history.day_end%TYPE DEFAULT NULL,
        id_prof_confirmed_in   IN pat_history.id_prof_confirmed%TYPE DEFAULT NULL,
        id_prof_rulled_out_in  IN pat_history.id_prof_rulled_out%TYPE DEFAULT NULL,
        id_prof_base_in        IN pat_history.id_prof_base%TYPE DEFAULT NULL,
        adw_last_update_in     IN pat_history.adw_last_update%TYPE DEFAULT NULL,
        dt_base_tstz_in        IN pat_history.dt_base_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN pat_history.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_confirmed_tstz_in   IN pat_history.dt_confirmed_tstz%TYPE DEFAULT NULL,
        dt_pat_history_tstz_in IN pat_history.dt_pat_history_tstz%TYPE DEFAULT NULL,
        dt_rulled_out_tstz_in  IN pat_history.dt_rulled_out_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_history.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_pat_history_in,
                id_patient_in,
                id_prof_writes_in,
                id_diagnosis_in,
                flg_status_in,
                flg_type_in,
                desc_diagnosis_in,
                notes_in,
                flg_type_hist_in,
                id_prof_cancel_in,
                note_cancel_in,
                month_begin_in,
                year_begin_in,
                day_begin_in,
                year_end_in,
                month_end_in,
                day_end_in,
                id_prof_confirmed_in,
                id_prof_rulled_out_in,
                id_prof_base_in,
                adw_last_update_in,
                dt_base_tstz_in,
                dt_cancel_tstz_in,
                dt_confirmed_tstz_in,
                dt_pat_history_tstz_in,
                dt_rulled_out_tstz_in,
                id_episode_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pat_history_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_pat_history      id_pat_history_cc;
        l_id_patient          id_patient_cc;
        l_id_prof_writes      id_prof_writes_cc;
        l_id_diagnosis        id_diagnosis_cc;
        l_flg_status          flg_status_cc;
        l_flg_type            flg_type_cc;
        l_desc_diagnosis      desc_diagnosis_cc;
        l_notes               notes_cc;
        l_flg_type_hist       flg_type_hist_cc;
        l_id_prof_cancel      id_prof_cancel_cc;
        l_note_cancel         note_cancel_cc;
        l_month_begin         month_begin_cc;
        l_year_begin          year_begin_cc;
        l_day_begin           day_begin_cc;
        l_year_end            year_end_cc;
        l_month_end           month_end_cc;
        l_day_end             day_end_cc;
        l_id_prof_confirmed   id_prof_confirmed_cc;
        l_id_prof_rulled_out  id_prof_rulled_out_cc;
        l_id_prof_base        id_prof_base_cc;
        l_adw_last_update     adw_last_update_cc;
        l_dt_base_tstz        dt_base_tstz_cc;
        l_dt_cancel_tstz      dt_cancel_tstz_cc;
        l_dt_confirmed_tstz   dt_confirmed_tstz_cc;
        l_dt_pat_history_tstz dt_pat_history_tstz_cc;
        l_dt_rulled_out_tstz  dt_rulled_out_tstz_cc;
        l_id_episode          id_episode_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_pat_history(i) := col_in(i).id_pat_history;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_prof_writes(i) := col_in(i).id_prof_writes;
            l_id_diagnosis(i) := col_in(i).id_diagnosis;
            l_flg_status(i) := col_in(i).flg_status;
            l_flg_type(i) := col_in(i).flg_type;
            l_desc_diagnosis(i) := col_in(i).desc_diagnosis;
            l_notes(i) := col_in(i).notes;
            l_flg_type_hist(i) := col_in(i).flg_type_hist;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_note_cancel(i) := col_in(i).note_cancel;
            l_month_begin(i) := col_in(i).month_begin;
            l_year_begin(i) := col_in(i).year_begin;
            l_day_begin(i) := col_in(i).day_begin;
            l_year_end(i) := col_in(i).year_end;
            l_month_end(i) := col_in(i).month_end;
            l_day_end(i) := col_in(i).day_end;
            l_id_prof_confirmed(i) := col_in(i).id_prof_confirmed;
            l_id_prof_rulled_out(i) := col_in(i).id_prof_rulled_out;
            l_id_prof_base(i) := col_in(i).id_prof_base;
            l_adw_last_update(i) := col_in(i).adw_last_update;
            l_dt_base_tstz(i) := col_in(i).dt_base_tstz;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_dt_confirmed_tstz(i) := col_in(i).dt_confirmed_tstz;
            l_dt_pat_history_tstz(i) := col_in(i).dt_pat_history_tstz;
            l_dt_rulled_out_tstz(i) := col_in(i).dt_rulled_out_tstz;
            l_id_episode(i) := col_in(i).id_episode;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_history
                   SET id_patient          = nvl(l_id_patient(i), id_patient),
                       id_prof_writes      = nvl(l_id_prof_writes(i), id_prof_writes),
                       id_diagnosis        = nvl(l_id_diagnosis(i), id_diagnosis),
                       flg_status          = nvl(l_flg_status(i), flg_status),
                       flg_type            = nvl(l_flg_type(i), flg_type),
                       desc_diagnosis      = nvl(l_desc_diagnosis(i), desc_diagnosis),
                       notes               = nvl(l_notes(i), notes),
                       flg_type_hist       = nvl(l_flg_type_hist(i), flg_type_hist),
                       id_prof_cancel      = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       note_cancel         = nvl(l_note_cancel(i), note_cancel),
                       month_begin         = nvl(l_month_begin(i), month_begin),
                       year_begin          = nvl(l_year_begin(i), year_begin),
                       day_begin           = nvl(l_day_begin(i), day_begin),
                       year_end            = nvl(l_year_end(i), year_end),
                       month_end           = nvl(l_month_end(i), month_end),
                       day_end             = nvl(l_day_end(i), day_end),
                       id_prof_confirmed   = nvl(l_id_prof_confirmed(i), id_prof_confirmed),
                       id_prof_rulled_out  = nvl(l_id_prof_rulled_out(i), id_prof_rulled_out),
                       id_prof_base        = nvl(l_id_prof_base(i), id_prof_base),
                       adw_last_update     = nvl(l_adw_last_update(i), adw_last_update),
                       dt_base_tstz        = nvl(l_dt_base_tstz(i), dt_base_tstz),
                       dt_cancel_tstz      = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       dt_confirmed_tstz   = nvl(l_dt_confirmed_tstz(i), dt_confirmed_tstz),
                       dt_pat_history_tstz = nvl(l_dt_pat_history_tstz(i), dt_pat_history_tstz),
                       dt_rulled_out_tstz  = nvl(l_dt_rulled_out_tstz(i), dt_rulled_out_tstz),
                       id_episode          = nvl(l_id_episode(i), id_episode)
                 WHERE id_pat_history = l_id_pat_history(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_history
                   SET id_patient          = l_id_patient(i),
                       id_prof_writes      = l_id_prof_writes(i),
                       id_diagnosis        = l_id_diagnosis(i),
                       flg_status          = l_flg_status(i),
                       flg_type            = l_flg_type(i),
                       desc_diagnosis      = l_desc_diagnosis(i),
                       notes               = l_notes(i),
                       flg_type_hist       = l_flg_type_hist(i),
                       id_prof_cancel      = l_id_prof_cancel(i),
                       note_cancel         = l_note_cancel(i),
                       month_begin         = l_month_begin(i),
                       year_begin          = l_year_begin(i),
                       day_begin           = l_day_begin(i),
                       year_end            = l_year_end(i),
                       month_end           = l_month_end(i),
                       day_end             = l_day_end(i),
                       id_prof_confirmed   = l_id_prof_confirmed(i),
                       id_prof_rulled_out  = l_id_prof_rulled_out(i),
                       id_prof_base        = l_id_prof_base(i),
                       adw_last_update     = l_adw_last_update(i),
                       dt_base_tstz        = l_dt_base_tstz(i),
                       dt_cancel_tstz      = l_dt_cancel_tstz(i),
                       dt_confirmed_tstz   = l_dt_confirmed_tstz(i),
                       dt_pat_history_tstz = l_dt_pat_history_tstz(i),
                       dt_rulled_out_tstz  = l_dt_rulled_out_tstz(i),
                       id_episode          = l_id_episode(i)
                 WHERE id_pat_history = l_id_pat_history(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pat_history_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PAT_HISTORY
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PAT_HISTORY
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_HISTORY set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PAT_HISTORY set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_pat_history_in IN pat_history.id_pat_history%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_history
         WHERE id_pat_history = id_pat_history_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_pat_history_in IN pat_history.id_pat_history%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_pat_history_in => id_pat_history_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PAT_HISTORY
    PROCEDURE del_id_pat_history
    (
        id_pat_history_in IN pat_history.id_pat_history%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_history
         WHERE id_pat_history = id_pat_history_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_pat_history;

    -- Delete all rows for primary key column ID_PAT_HISTORY
    PROCEDURE del_id_pat_history
    (
        id_pat_history_in IN pat_history.id_pat_history%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_pat_history(id_pat_history_in => id_pat_history_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_id_pat_history;

    PROCEDURE del_phy_diag_fk
    (
        id_diagnosis_in IN pat_history.id_diagnosis%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_history
         WHERE id_diagnosis = del_phy_diag_fk.id_diagnosis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_phy_diag_fk;

    PROCEDURE del_phy_diag_fk
    (
        id_diagnosis_in IN pat_history.id_diagnosis%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_phy_diag_fk(id_diagnosis_in => id_diagnosis_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_phy_diag_fk;

    PROCEDURE del_phy_epis_fk
    (
        id_episode_in   IN pat_history.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_history
         WHERE id_episode = del_phy_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_phy_epis_fk;

    PROCEDURE del_phy_epis_fk
    (
        id_episode_in   IN pat_history.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_phy_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_phy_epis_fk;

    PROCEDURE del_phy_pat_fk
    (
        id_patient_in   IN pat_history.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_history
         WHERE id_patient = del_phy_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_phy_pat_fk;

    PROCEDURE del_phy_pat_fk
    (
        id_patient_in   IN pat_history.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_phy_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_phy_pat_fk;

    PROCEDURE del_phy_prof_fk
    (
        id_prof_writes_in IN pat_history.id_prof_writes%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_history
         WHERE id_prof_writes = del_phy_prof_fk.id_prof_writes_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_phy_prof_fk;

    PROCEDURE del_phy_prof_fk
    (
        id_prof_writes_in IN pat_history.id_prof_writes%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_phy_prof_fk(id_prof_writes_in => id_prof_writes_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_phy_prof_fk;

    PROCEDURE del_phy_prof_fk2
    (
        id_prof_cancel_in IN pat_history.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_history
         WHERE id_prof_cancel = del_phy_prof_fk2.id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_phy_prof_fk2;

    PROCEDURE del_phy_prof_fk2
    (
        id_prof_cancel_in IN pat_history.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_phy_prof_fk2(id_prof_cancel_in => id_prof_cancel_in,
                         handle_error_in   => handle_error_in,
                         rows_out          => rows_out);
    END del_phy_prof_fk2;

    PROCEDURE del_phy_prof_fk3
    (
        id_prof_base_in IN pat_history.id_prof_base%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_history
         WHERE id_prof_base = del_phy_prof_fk3.id_prof_base_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_phy_prof_fk3;

    PROCEDURE del_phy_prof_fk3
    (
        id_prof_base_in IN pat_history.id_prof_base%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_phy_prof_fk3(id_prof_base_in => id_prof_base_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_phy_prof_fk3;

    PROCEDURE del_phy_prof_fk4
    (
        id_prof_confirmed_in IN pat_history.id_prof_confirmed%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_history
         WHERE id_prof_confirmed = del_phy_prof_fk4.id_prof_confirmed_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_phy_prof_fk4;

    PROCEDURE del_phy_prof_fk4
    (
        id_prof_confirmed_in IN pat_history.id_prof_confirmed%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_phy_prof_fk4(id_prof_confirmed_in => id_prof_confirmed_in,
                         handle_error_in      => handle_error_in,
                         rows_out             => rows_out);
    END del_phy_prof_fk4;

    PROCEDURE del_phy_prof_fk5
    (
        id_prof_rulled_out_in IN pat_history.id_prof_rulled_out%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_history
         WHERE id_prof_rulled_out = del_phy_prof_fk5.id_prof_rulled_out_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_phy_prof_fk5;

    PROCEDURE del_phy_prof_fk5
    (
        id_prof_rulled_out_in IN pat_history.id_prof_rulled_out%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_phy_prof_fk5(id_prof_rulled_out_in => id_prof_rulled_out_in,
                         handle_error_in       => handle_error_in,
                         rows_out              => rows_out);
    END del_phy_prof_fk5;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PAT_HISTORY';
        ELSE
            RETURN 'DELETE FROM PAT_HISTORY WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HISTORY');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HISTORY');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pat_history_inout IN OUT pat_history%ROWTYPE) IS
    BEGIN
        pat_history_inout.id_pat_history      := NULL;
        pat_history_inout.id_patient          := NULL;
        pat_history_inout.id_prof_writes      := NULL;
        pat_history_inout.id_diagnosis        := NULL;
        pat_history_inout.flg_status          := NULL;
        pat_history_inout.flg_type            := NULL;
        pat_history_inout.desc_diagnosis      := NULL;
        pat_history_inout.notes               := NULL;
        pat_history_inout.flg_type_hist       := NULL;
        pat_history_inout.id_prof_cancel      := NULL;
        pat_history_inout.note_cancel         := NULL;
        pat_history_inout.month_begin         := NULL;
        pat_history_inout.year_begin          := NULL;
        pat_history_inout.day_begin           := NULL;
        pat_history_inout.year_end            := NULL;
        pat_history_inout.month_end           := NULL;
        pat_history_inout.day_end             := NULL;
        pat_history_inout.id_prof_confirmed   := NULL;
        pat_history_inout.id_prof_rulled_out  := NULL;
        pat_history_inout.id_prof_base        := NULL;
        pat_history_inout.adw_last_update     := SYSDATE;
        pat_history_inout.dt_base_tstz        := NULL;
        pat_history_inout.dt_cancel_tstz      := NULL;
        pat_history_inout.dt_confirmed_tstz   := NULL;
        pat_history_inout.dt_pat_history_tstz := NULL;
        pat_history_inout.dt_rulled_out_tstz  := NULL;
        pat_history_inout.id_episode          := NULL;
    END initrec;

    FUNCTION initrec RETURN pat_history%ROWTYPE IS
        l_pat_history pat_history%ROWTYPE;
    BEGIN
        l_pat_history.adw_last_update := SYSDATE;
        RETURN l_pat_history;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pat_history_tc IS
        data pat_history_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pat_history
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pat_history_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pat_history_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pat_history;
/
