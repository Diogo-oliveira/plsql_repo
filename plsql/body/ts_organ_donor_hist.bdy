/*-- Last Change Revision: $Rev: 2028282 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:50 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY TS_ORGAN_DONOR_HIST
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Junho 14, 2010 10:12:14
| Created By: ALERT
*/
IS

   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_organ_donor_hist_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE
      ,
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO ORGAN_DONOR_HIST (
         ID_ORGAN_DONOR_HIST,
         ID_ORGAN_DONOR,
         ID_PATIENT,
         ID_EPISODE,
         ID_SL_ABLE_DON_ORGANS,
         REASON_NOT_ABLE_DON_ORG,
         ID_SL_ABLE_DON_TISSUES,
         REASON_NOT_ABLE_DON_TIS,
         ID_SL_WILL_CONSULTED,
         ID_SL_WILL_RESULT,
         REASON_WILL_NOT_CONS,
         ID_SL_OTHER_DECLARATION,
         OTHER_DECLARATION_NOTES,
         ID_SL_DON_AUTHORIZED,
         RESPONSIBLE_NAME,
         ID_FAMILY_RELATIONSHIP,
         REASON_NOT_AUTHORIZED,
         ID_SL_DONATION_APPROVED,
         ID_SL_OBJECT_RESEARCH,
         REASON_NOT_APPROVED,
         ID_SL_FAMILY_LETTER,
         FAMILY_NAME,
         FAMILY_ADDRESS,
         ID_SL_JUSTICE_CONSENT,
         ID_SL_DONOR_CENTER,
         REASON_DONOR_CENTER,
         ID_PROF_ORGAN_DONOR,
         DT_ORGAN_DONOR,
         ID_CANCEL_REASON,
         NOTES_CANCEL,
         FLG_STATUS,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION
         )
      VALUES (
         id_organ_donor_hist_in,
         id_organ_donor_in,
         id_patient_in,
         id_episode_in,
         id_sl_able_don_organs_in,
         reason_not_able_don_org_in,
         id_sl_able_don_tissues_in,
         reason_not_able_don_tis_in,
         id_sl_will_consulted_in,
         id_sl_will_result_in,
         reason_will_not_cons_in,
         id_sl_other_declaration_in,
         other_declaration_notes_in,
         id_sl_don_authorized_in,
         responsible_name_in,
         id_family_relationship_in,
         reason_not_authorized_in,
         id_sl_donation_approved_in,
         id_sl_object_research_in,
         reason_not_approved_in,
         id_sl_family_letter_in,
         family_name_in,
         family_address_in,
         id_sl_justice_consent_in,
         id_sl_donor_center_in,
         reason_donor_center_in,
         id_prof_organ_donor_in,
         dt_organ_donor_in,
         id_cancel_reason_in,
         notes_cancel_in,
         flg_status_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'ORGAN_DONOR_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           IF l_name = 'ODH_OD_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ORGAN_DONOR'
               , value_in => id_organ_donor_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_organ_donor_hist_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE
      ,
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_organ_donor_hist_in => id_organ_donor_hist_in
      ,
      id_organ_donor_in => id_organ_donor_in,
      id_patient_in => id_patient_in,
      id_episode_in => id_episode_in,
      id_sl_able_don_organs_in => id_sl_able_don_organs_in,
      reason_not_able_don_org_in => reason_not_able_don_org_in,
      id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
      reason_not_able_don_tis_in => reason_not_able_don_tis_in,
      id_sl_will_consulted_in => id_sl_will_consulted_in,
      id_sl_will_result_in => id_sl_will_result_in,
      reason_will_not_cons_in => reason_will_not_cons_in,
      id_sl_other_declaration_in => id_sl_other_declaration_in,
      other_declaration_notes_in => other_declaration_notes_in,
      id_sl_don_authorized_in => id_sl_don_authorized_in,
      responsible_name_in => responsible_name_in,
      id_family_relationship_in => id_family_relationship_in,
      reason_not_authorized_in => reason_not_authorized_in,
      id_sl_donation_approved_in => id_sl_donation_approved_in,
      id_sl_object_research_in => id_sl_object_research_in,
      reason_not_approved_in => reason_not_approved_in,
      id_sl_family_letter_in => id_sl_family_letter_in,
      family_name_in => family_name_in,
      family_address_in => family_address_in,
      id_sl_justice_consent_in => id_sl_justice_consent_in,
      id_sl_donor_center_in => id_sl_donor_center_in,
      reason_donor_center_in => reason_donor_center_in,
      id_prof_organ_donor_in => id_prof_organ_donor_in,
      dt_organ_donor_in => dt_organ_donor_in,
      id_cancel_reason_in => id_cancel_reason_in,
      notes_cancel_in => notes_cancel_in,
      flg_status_in => flg_status_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;

   /*
   START Special logic for handling LOB columns....
   */

   PROCEDURE n_ins_clobs_in_chunks (
      id_organ_donor_hist_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE,
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      handle_error_in IN BOOLEAN := TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
   ) IS
        l_NOTES_CANCEL clob;
      i                PLS_INTEGER;
      current_column varchar2(30) := '';
   BEGIN
      /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
         variables from pointing to the same temporary CLOB (it creates copies).
         Otherwise, the code could have been written a bit more compactly. */

      FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
      LOOP
         /* Even when all clobs are null, DOA must send 1 row so skip it. */
         IF clob_columns_in (i) IS NOT NULL
         THEN
            IF current_column <> clob_columns_in (i) OR current_column IS NULL
            THEN
               current_column := LOWER (clob_columns_in (i));

               CASE current_column
                  WHEN 'notes_cancel_in'
                  THEN
                     IF l_NOTES_CANCEL IS NULL
                     THEN
                       DBMS_LOB.createtemporary (
                         l_NOTES_CANCEL, TRUE, DBMS_LOB.CALL);
                     END IF;
               END CASE;
            END IF;

            CASE current_column
              WHEN 'notes_cancel_in'
              THEN
                  DBMS_LOB.writeappend (l_NOTES_CANCEL
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
            END CASE;
         END IF;
      END LOOP;

      ins (
         id_organ_donor_hist_in => id_organ_donor_hist_in,
         id_organ_donor_in => id_organ_donor_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         id_sl_able_don_organs_in => id_sl_able_don_organs_in,
         reason_not_able_don_org_in => reason_not_able_don_org_in,
         id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
         reason_not_able_don_tis_in => reason_not_able_don_tis_in,
         id_sl_will_consulted_in => id_sl_will_consulted_in,
         id_sl_will_result_in => id_sl_will_result_in,
         reason_will_not_cons_in => reason_will_not_cons_in,
         id_sl_other_declaration_in => id_sl_other_declaration_in,
         other_declaration_notes_in => other_declaration_notes_in,
         id_sl_don_authorized_in => id_sl_don_authorized_in,
         responsible_name_in => responsible_name_in,
         id_family_relationship_in => id_family_relationship_in,
         reason_not_authorized_in => reason_not_authorized_in,
         id_sl_donation_approved_in => id_sl_donation_approved_in,
         id_sl_object_research_in => id_sl_object_research_in,
         reason_not_approved_in => reason_not_approved_in,
         id_sl_family_letter_in => id_sl_family_letter_in,
         family_name_in => family_name_in,
         family_address_in => family_address_in,
         id_sl_justice_consent_in => id_sl_justice_consent_in,
         id_sl_donor_center_in => id_sl_donor_center_in,
         reason_donor_center_in => reason_donor_center_in,
         id_prof_organ_donor_in => id_prof_organ_donor_in,
         dt_organ_donor_in => dt_organ_donor_in,
         id_cancel_reason_in => id_cancel_reason_in,
         notes_cancel_in => l_NOTES_CANCEL,
         flg_status_in => flg_status_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         handle_error_in => handle_error_in
         );

   END n_ins_clobs_in_chunks;

   PROCEDURE n_upd_clobs_in_chunks (
      id_organ_donor_hist_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE,
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      ignore_if_null_in IN BOOLEAN := TRUE,
      handle_error_in IN BOOLEAN := TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
      )
   IS
       l_NOTES_CANCEL clob;
      i                PLS_INTEGER;
      current_column varchar2(30) := '';
      l_rows PLS_INTEGER;
   BEGIN

      /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
         variables from pointing to the same temporary CLOB (it creates copies).
         Otherwise, the code could have been written a bit more compactly. */

      FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
      LOOP
         /* Even when all clobs are null, DOA must send 1 row so skip it. */
         IF clob_columns_in (i) IS NOT NULL
         THEN
            IF current_column <> clob_columns_in (i) OR current_column IS NULL
            THEN
               current_column := LOWER (clob_columns_in (i));

               CASE current_column
                  WHEN 'notes_cancel_in'
                  THEN
                    IF l_NOTES_CANCEL IS NULL
                    THEN
                      DBMS_LOB.createtemporary (
                         l_NOTES_CANCEL, TRUE, DBMS_LOB.CALL);
                    END IF;
               END CASE;
            END IF;

            CASE current_column
              WHEN 'notes_cancel_in'
              THEN
                  DBMS_LOB.writeappend (l_NOTES_CANCEL
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
            END CASE;
         END IF;
      END LOOP;

      upd (
         id_organ_donor_hist_in => id_organ_donor_hist_in,
         id_organ_donor_in => id_organ_donor_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         id_sl_able_don_organs_in => id_sl_able_don_organs_in,
         reason_not_able_don_org_in => reason_not_able_don_org_in,
         id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
         reason_not_able_don_tis_in => reason_not_able_don_tis_in,
         id_sl_will_consulted_in => id_sl_will_consulted_in,
         id_sl_will_result_in => id_sl_will_result_in,
         reason_will_not_cons_in => reason_will_not_cons_in,
         id_sl_other_declaration_in => id_sl_other_declaration_in,
         other_declaration_notes_in => other_declaration_notes_in,
         id_sl_don_authorized_in => id_sl_don_authorized_in,
         responsible_name_in => responsible_name_in,
         id_family_relationship_in => id_family_relationship_in,
         reason_not_authorized_in => reason_not_authorized_in,
         id_sl_donation_approved_in => id_sl_donation_approved_in,
         id_sl_object_research_in => id_sl_object_research_in,
         reason_not_approved_in => reason_not_approved_in,
         id_sl_family_letter_in => id_sl_family_letter_in,
         family_name_in => family_name_in,
         family_address_in => family_address_in,
         id_sl_justice_consent_in => id_sl_justice_consent_in,
         id_sl_donor_center_in => id_sl_donor_center_in,
         reason_donor_center_in => reason_donor_center_in,
         id_prof_organ_donor_in => id_prof_organ_donor_in,
         dt_organ_donor_in => dt_organ_donor_in,
         id_cancel_reason_in => id_cancel_reason_in,
         notes_cancel_in => l_NOTES_CANCEL,
         flg_status_in => flg_status_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         handle_error_in => handle_error_in
         );
   END n_upd_clobs_in_chunks;

   PROCEDURE n_upd_ins_clobs_in_chunks (
      id_organ_donor_hist_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE,
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      ignore_if_null_in IN BOOLEAN DEFAULT TRUE,
      handle_error_in IN BOOLEAN DEFAULT TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
      )
   IS
   BEGIN
      n_upd_clobs_in_chunks (
         id_organ_donor_hist_in => id_organ_donor_hist_in,
         id_organ_donor_in => id_organ_donor_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         id_sl_able_don_organs_in => id_sl_able_don_organs_in,
         reason_not_able_don_org_in => reason_not_able_don_org_in,
         id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
         reason_not_able_don_tis_in => reason_not_able_don_tis_in,
         id_sl_will_consulted_in => id_sl_will_consulted_in,
         id_sl_will_result_in => id_sl_will_result_in,
         reason_will_not_cons_in => reason_will_not_cons_in,
         id_sl_other_declaration_in => id_sl_other_declaration_in,
         other_declaration_notes_in => other_declaration_notes_in,
         id_sl_don_authorized_in => id_sl_don_authorized_in,
         responsible_name_in => responsible_name_in,
         id_family_relationship_in => id_family_relationship_in,
         reason_not_authorized_in => reason_not_authorized_in,
         id_sl_donation_approved_in => id_sl_donation_approved_in,
         id_sl_object_research_in => id_sl_object_research_in,
         reason_not_approved_in => reason_not_approved_in,
         id_sl_family_letter_in => id_sl_family_letter_in,
         family_name_in => family_name_in,
         family_address_in => family_address_in,
         id_sl_justice_consent_in => id_sl_justice_consent_in,
         id_sl_donor_center_in => id_sl_donor_center_in,
         reason_donor_center_in => reason_donor_center_in,
         id_prof_organ_donor_in => id_prof_organ_donor_in,
         dt_organ_donor_in => dt_organ_donor_in,
         id_cancel_reason_in => id_cancel_reason_in,
         flg_status_in => flg_status_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         clob_columns_in => clob_columns_in ,
         clob_pieces_in => clob_pieces_in ,
         ignore_if_null_in => ignore_if_null_in,
         handle_error_in => handle_error_in
       );

      IF SQL%ROWCOUNT = 0
      THEN
         n_ins_clobs_in_chunks (
            id_organ_donor_hist_in => id_organ_donor_hist_in,
            id_organ_donor_in => id_organ_donor_in,
            id_patient_in => id_patient_in,
            id_episode_in => id_episode_in,
            id_sl_able_don_organs_in => id_sl_able_don_organs_in,
            reason_not_able_don_org_in => reason_not_able_don_org_in,
            id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
            reason_not_able_don_tis_in => reason_not_able_don_tis_in,
            id_sl_will_consulted_in => id_sl_will_consulted_in,
            id_sl_will_result_in => id_sl_will_result_in,
            reason_will_not_cons_in => reason_will_not_cons_in,
            id_sl_other_declaration_in => id_sl_other_declaration_in,
            other_declaration_notes_in => other_declaration_notes_in,
            id_sl_don_authorized_in => id_sl_don_authorized_in,
            responsible_name_in => responsible_name_in,
            id_family_relationship_in => id_family_relationship_in,
            reason_not_authorized_in => reason_not_authorized_in,
            id_sl_donation_approved_in => id_sl_donation_approved_in,
            id_sl_object_research_in => id_sl_object_research_in,
            reason_not_approved_in => reason_not_approved_in,
            id_sl_family_letter_in => id_sl_family_letter_in,
            family_name_in => family_name_in,
            family_address_in => family_address_in,
            id_sl_justice_consent_in => id_sl_justice_consent_in,
            id_sl_donor_center_in => id_sl_donor_center_in,
            reason_donor_center_in => reason_donor_center_in,
            id_prof_organ_donor_in => id_prof_organ_donor_in,
            dt_organ_donor_in => dt_organ_donor_in,
            id_cancel_reason_in => id_cancel_reason_in,
            flg_status_in => flg_status_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            clob_columns_in => clob_columns_in ,
            clob_pieces_in => clob_pieces_in ,
            handle_error_in => handle_error_in
         );
      END IF;
   END n_upd_ins_clobs_in_chunks;

   /*
   END Special logic for handling LOB columns.
   */

   PROCEDURE ins (
      rec_in IN ORGAN_DONOR_HIST%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec ORGAN_DONOR_HIST%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_ORGAN_DONOR_HIST := next_key (sequence_in);
      END IF;
      ins (
         id_organ_donor_hist_in => l_rec.ID_ORGAN_DONOR_HIST
         ,
         id_organ_donor_in => l_rec.ID_ORGAN_DONOR,
         id_patient_in => l_rec.ID_PATIENT,
         id_episode_in => l_rec.ID_EPISODE,
         id_sl_able_don_organs_in => l_rec.ID_SL_ABLE_DON_ORGANS,
         reason_not_able_don_org_in => l_rec.REASON_NOT_ABLE_DON_ORG,
         id_sl_able_don_tissues_in => l_rec.ID_SL_ABLE_DON_TISSUES,
         reason_not_able_don_tis_in => l_rec.REASON_NOT_ABLE_DON_TIS,
         id_sl_will_consulted_in => l_rec.ID_SL_WILL_CONSULTED,
         id_sl_will_result_in => l_rec.ID_SL_WILL_RESULT,
         reason_will_not_cons_in => l_rec.REASON_WILL_NOT_CONS,
         id_sl_other_declaration_in => l_rec.ID_SL_OTHER_DECLARATION,
         other_declaration_notes_in => l_rec.OTHER_DECLARATION_NOTES,
         id_sl_don_authorized_in => l_rec.ID_SL_DON_AUTHORIZED,
         responsible_name_in => l_rec.RESPONSIBLE_NAME,
         id_family_relationship_in => l_rec.ID_FAMILY_RELATIONSHIP,
         reason_not_authorized_in => l_rec.REASON_NOT_AUTHORIZED,
         id_sl_donation_approved_in => l_rec.ID_SL_DONATION_APPROVED,
         id_sl_object_research_in => l_rec.ID_SL_OBJECT_RESEARCH,
         reason_not_approved_in => l_rec.REASON_NOT_APPROVED,
         id_sl_family_letter_in => l_rec.ID_SL_FAMILY_LETTER,
         family_name_in => l_rec.FAMILY_NAME,
         family_address_in => l_rec.FAMILY_ADDRESS,
         id_sl_justice_consent_in => l_rec.ID_SL_JUSTICE_CONSENT,
         id_sl_donor_center_in => l_rec.ID_SL_DONOR_CENTER,
         reason_donor_center_in => l_rec.REASON_DONOR_CENTER,
         id_prof_organ_donor_in => l_rec.ID_PROF_ORGAN_DONOR,
         dt_organ_donor_in => l_rec.DT_ORGAN_DONOR,
         id_cancel_reason_in => l_rec.ID_CANCEL_REASON,
         notes_cancel_in => l_rec.NOTES_CANCEL,
         flg_status_in => l_rec.FLG_STATUS,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN ORGAN_DONOR_HIST%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE

   IS
     retval ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_ORGAN_DONOR_HIST.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_ORGAN_DONOR_HIST')
           );
   END next_key;

   PROCEDURE ins (
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_organ_donor_hist_out IN OUT ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_organ_donor_hist_in => l_pky,
         id_organ_donor_in => id_organ_donor_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         id_sl_able_don_organs_in => id_sl_able_don_organs_in,
         reason_not_able_don_org_in => reason_not_able_don_org_in,
         id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
         reason_not_able_don_tis_in => reason_not_able_don_tis_in,
         id_sl_will_consulted_in => id_sl_will_consulted_in,
         id_sl_will_result_in => id_sl_will_result_in,
         reason_will_not_cons_in => reason_will_not_cons_in,
         id_sl_other_declaration_in => id_sl_other_declaration_in,
         other_declaration_notes_in => other_declaration_notes_in,
         id_sl_don_authorized_in => id_sl_don_authorized_in,
         responsible_name_in => responsible_name_in,
         id_family_relationship_in => id_family_relationship_in,
         reason_not_authorized_in => reason_not_authorized_in,
         id_sl_donation_approved_in => id_sl_donation_approved_in,
         id_sl_object_research_in => id_sl_object_research_in,
         reason_not_approved_in => reason_not_approved_in,
         id_sl_family_letter_in => id_sl_family_letter_in,
         family_name_in => family_name_in,
         family_address_in => family_address_in,
         id_sl_justice_consent_in => id_sl_justice_consent_in,
         id_sl_donor_center_in => id_sl_donor_center_in,
         reason_donor_center_in => reason_donor_center_in,
         id_prof_organ_donor_in => id_prof_organ_donor_in,
         dt_organ_donor_in => dt_organ_donor_in,
         id_cancel_reason_in => id_cancel_reason_in,
         notes_cancel_in => notes_cancel_in,
         flg_status_in => flg_status_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_organ_donor_hist_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_organ_donor_hist_out IN OUT ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_organ_donor_in => id_organ_donor_in,
      id_patient_in => id_patient_in,
      id_episode_in => id_episode_in,
      id_sl_able_don_organs_in => id_sl_able_don_organs_in,
      reason_not_able_don_org_in => reason_not_able_don_org_in,
      id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
      reason_not_able_don_tis_in => reason_not_able_don_tis_in,
      id_sl_will_consulted_in => id_sl_will_consulted_in,
      id_sl_will_result_in => id_sl_will_result_in,
      reason_will_not_cons_in => reason_will_not_cons_in,
      id_sl_other_declaration_in => id_sl_other_declaration_in,
      other_declaration_notes_in => other_declaration_notes_in,
      id_sl_don_authorized_in => id_sl_don_authorized_in,
      responsible_name_in => responsible_name_in,
      id_family_relationship_in => id_family_relationship_in,
      reason_not_authorized_in => reason_not_authorized_in,
      id_sl_donation_approved_in => id_sl_donation_approved_in,
      id_sl_object_research_in => id_sl_object_research_in,
      reason_not_approved_in => reason_not_approved_in,
      id_sl_family_letter_in => id_sl_family_letter_in,
      family_name_in => family_name_in,
      family_address_in => family_address_in,
      id_sl_justice_consent_in => id_sl_justice_consent_in,
      id_sl_donor_center_in => id_sl_donor_center_in,
      reason_donor_center_in => reason_donor_center_in,
      id_prof_organ_donor_in => id_prof_organ_donor_in,
      dt_organ_donor_in => dt_organ_donor_in,
      id_cancel_reason_in => id_cancel_reason_in,
      notes_cancel_in => notes_cancel_in,
      flg_status_in => flg_status_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_organ_donor_hist_out => id_organ_donor_hist_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE
   IS
        l_pky ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_organ_donor_hist_in => l_pky,
         id_organ_donor_in => id_organ_donor_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         id_sl_able_don_organs_in => id_sl_able_don_organs_in,
         reason_not_able_don_org_in => reason_not_able_don_org_in,
         id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
         reason_not_able_don_tis_in => reason_not_able_don_tis_in,
         id_sl_will_consulted_in => id_sl_will_consulted_in,
         id_sl_will_result_in => id_sl_will_result_in,
         reason_will_not_cons_in => reason_will_not_cons_in,
         id_sl_other_declaration_in => id_sl_other_declaration_in,
         other_declaration_notes_in => other_declaration_notes_in,
         id_sl_don_authorized_in => id_sl_don_authorized_in,
         responsible_name_in => responsible_name_in,
         id_family_relationship_in => id_family_relationship_in,
         reason_not_authorized_in => reason_not_authorized_in,
         id_sl_donation_approved_in => id_sl_donation_approved_in,
         id_sl_object_research_in => id_sl_object_research_in,
         reason_not_approved_in => reason_not_approved_in,
         id_sl_family_letter_in => id_sl_family_letter_in,
         family_name_in => family_name_in,
         family_address_in => family_address_in,
         id_sl_justice_consent_in => id_sl_justice_consent_in,
         id_sl_donor_center_in => id_sl_donor_center_in,
         reason_donor_center_in => reason_donor_center_in,
         id_prof_organ_donor_in => id_prof_organ_donor_in,
         dt_organ_donor_in => dt_organ_donor_in,
         id_cancel_reason_in => id_cancel_reason_in,
         notes_cancel_in => notes_cancel_in,
         flg_status_in => flg_status_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE
   IS
        l_pky ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_organ_donor_hist_in => l_pky,
         id_organ_donor_in => id_organ_donor_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         id_sl_able_don_organs_in => id_sl_able_don_organs_in,
         reason_not_able_don_org_in => reason_not_able_don_org_in,
         id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
         reason_not_able_don_tis_in => reason_not_able_don_tis_in,
         id_sl_will_consulted_in => id_sl_will_consulted_in,
         id_sl_will_result_in => id_sl_will_result_in,
         reason_will_not_cons_in => reason_will_not_cons_in,
         id_sl_other_declaration_in => id_sl_other_declaration_in,
         other_declaration_notes_in => other_declaration_notes_in,
         id_sl_don_authorized_in => id_sl_don_authorized_in,
         responsible_name_in => responsible_name_in,
         id_family_relationship_in => id_family_relationship_in,
         reason_not_authorized_in => reason_not_authorized_in,
         id_sl_donation_approved_in => id_sl_donation_approved_in,
         id_sl_object_research_in => id_sl_object_research_in,
         reason_not_approved_in => reason_not_approved_in,
         id_sl_family_letter_in => id_sl_family_letter_in,
         family_name_in => family_name_in,
         family_address_in => family_address_in,
         id_sl_justice_consent_in => id_sl_justice_consent_in,
         id_sl_donor_center_in => id_sl_donor_center_in,
         reason_donor_center_in => reason_donor_center_in,
         id_prof_organ_donor_in => id_prof_organ_donor_in,
         dt_organ_donor_in => dt_organ_donor_in,
         id_cancel_reason_in => id_cancel_reason_in,
         notes_cancel_in => notes_cancel_in,
         flg_status_in => flg_status_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_organ_donor_hist_in => l_pky,
         id_organ_donor_in => id_organ_donor_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         id_sl_able_don_organs_in => id_sl_able_don_organs_in,
         reason_not_able_don_org_in => reason_not_able_don_org_in,
         id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
         reason_not_able_don_tis_in => reason_not_able_don_tis_in,
         id_sl_will_consulted_in => id_sl_will_consulted_in,
         id_sl_will_result_in => id_sl_will_result_in,
         reason_will_not_cons_in => reason_will_not_cons_in,
         id_sl_other_declaration_in => id_sl_other_declaration_in,
         other_declaration_notes_in => other_declaration_notes_in,
         id_sl_don_authorized_in => id_sl_don_authorized_in,
         responsible_name_in => responsible_name_in,
         id_family_relationship_in => id_family_relationship_in,
         reason_not_authorized_in => reason_not_authorized_in,
         id_sl_donation_approved_in => id_sl_donation_approved_in,
         id_sl_object_research_in => id_sl_object_research_in,
         reason_not_approved_in => reason_not_approved_in,
         id_sl_family_letter_in => id_sl_family_letter_in,
         family_name_in => family_name_in,
         family_address_in => family_address_in,
         id_sl_justice_consent_in => id_sl_justice_consent_in,
         id_sl_donor_center_in => id_sl_donor_center_in,
         reason_donor_center_in => reason_donor_center_in,
         id_prof_organ_donor_in => id_prof_organ_donor_in,
         dt_organ_donor_in => dt_organ_donor_in,
         id_cancel_reason_in => id_cancel_reason_in,
         notes_cancel_in => notes_cancel_in,
         flg_status_in => flg_status_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_organ_donor_hist_in => l_pky,
         id_organ_donor_in => id_organ_donor_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         id_sl_able_don_organs_in => id_sl_able_don_organs_in,
         reason_not_able_don_org_in => reason_not_able_don_org_in,
         id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
         reason_not_able_don_tis_in => reason_not_able_don_tis_in,
         id_sl_will_consulted_in => id_sl_will_consulted_in,
         id_sl_will_result_in => id_sl_will_result_in,
         reason_will_not_cons_in => reason_will_not_cons_in,
         id_sl_other_declaration_in => id_sl_other_declaration_in,
         other_declaration_notes_in => other_declaration_notes_in,
         id_sl_don_authorized_in => id_sl_don_authorized_in,
         responsible_name_in => responsible_name_in,
         id_family_relationship_in => id_family_relationship_in,
         reason_not_authorized_in => reason_not_authorized_in,
         id_sl_donation_approved_in => id_sl_donation_approved_in,
         id_sl_object_research_in => id_sl_object_research_in,
         reason_not_approved_in => reason_not_approved_in,
         id_sl_family_letter_in => id_sl_family_letter_in,
         family_name_in => family_name_in,
         family_address_in => family_address_in,
         id_sl_justice_consent_in => id_sl_justice_consent_in,
         id_sl_donor_center_in => id_sl_donor_center_in,
         reason_donor_center_in => reason_donor_center_in,
         id_prof_organ_donor_in => id_prof_organ_donor_in,
         dt_organ_donor_in => dt_organ_donor_in,
         id_cancel_reason_in => id_cancel_reason_in,
         notes_cancel_in => notes_cancel_in,
         flg_status_in => flg_status_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN ORGAN_DONOR_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO ORGAN_DONOR_HIST VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_ORGAN_DONOR_HIST _' || indx
                  ,value_in => rows_in(indx).ID_ORGAN_DONOR_HIST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_ORGAN_DONOR _' || indx
                  ,value_in => rows_in(indx).ID_ORGAN_DONOR
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PATIENT _' || indx
                  ,value_in => rows_in(indx).ID_PATIENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE _' || indx
                  ,value_in => rows_in(indx).ID_EPISODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SL_ABLE_DON_ORGANS _' || indx
                  ,value_in => rows_in(indx).ID_SL_ABLE_DON_ORGANS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'REASON_NOT_ABLE_DON_ORG _' || indx
                  ,value_in => rows_in(indx).REASON_NOT_ABLE_DON_ORG
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SL_ABLE_DON_TISSUES _' || indx
                  ,value_in => rows_in(indx).ID_SL_ABLE_DON_TISSUES
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'REASON_NOT_ABLE_DON_TIS _' || indx
                  ,value_in => rows_in(indx).REASON_NOT_ABLE_DON_TIS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SL_WILL_CONSULTED _' || indx
                  ,value_in => rows_in(indx).ID_SL_WILL_CONSULTED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SL_WILL_RESULT _' || indx
                  ,value_in => rows_in(indx).ID_SL_WILL_RESULT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'REASON_WILL_NOT_CONS _' || indx
                  ,value_in => rows_in(indx).REASON_WILL_NOT_CONS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SL_OTHER_DECLARATION _' || indx
                  ,value_in => rows_in(indx).ID_SL_OTHER_DECLARATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'OTHER_DECLARATION_NOTES _' || indx
                  ,value_in => rows_in(indx).OTHER_DECLARATION_NOTES
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SL_DON_AUTHORIZED _' || indx
                  ,value_in => rows_in(indx).ID_SL_DON_AUTHORIZED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'RESPONSIBLE_NAME _' || indx
                  ,value_in => rows_in(indx).RESPONSIBLE_NAME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_FAMILY_RELATIONSHIP _' || indx
                  ,value_in => rows_in(indx).ID_FAMILY_RELATIONSHIP
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'REASON_NOT_AUTHORIZED _' || indx
                  ,value_in => rows_in(indx).REASON_NOT_AUTHORIZED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SL_DONATION_APPROVED _' || indx
                  ,value_in => rows_in(indx).ID_SL_DONATION_APPROVED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SL_OBJECT_RESEARCH _' || indx
                  ,value_in => rows_in(indx).ID_SL_OBJECT_RESEARCH
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'REASON_NOT_APPROVED _' || indx
                  ,value_in => rows_in(indx).REASON_NOT_APPROVED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SL_FAMILY_LETTER _' || indx
                  ,value_in => rows_in(indx).ID_SL_FAMILY_LETTER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FAMILY_NAME _' || indx
                  ,value_in => rows_in(indx).FAMILY_NAME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FAMILY_ADDRESS _' || indx
                  ,value_in => rows_in(indx).FAMILY_ADDRESS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SL_JUSTICE_CONSENT _' || indx
                  ,value_in => rows_in(indx).ID_SL_JUSTICE_CONSENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SL_DONOR_CENTER _' || indx
                  ,value_in => rows_in(indx).ID_SL_DONOR_CENTER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'REASON_DONOR_CENTER _' || indx
                  ,value_in => rows_in(indx).REASON_DONOR_CENTER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_ORGAN_DONOR _' || indx
                  ,value_in => rows_in(indx).ID_PROF_ORGAN_DONOR
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_ORGAN_DONOR _' || indx
                  ,value_in => rows_in(indx).DT_ORGAN_DONOR
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CANCEL_REASON _' || indx
                  ,value_in => rows_in(indx).ID_CANCEL_REASON
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(indx).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(indx).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(indx).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(indx).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(indx).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'ORGAN_DONOR_HIST'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN ORGAN_DONOR_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_organ_donor_hist_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE,
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      ID_ORGAN_DONOR_nin IN BOOLEAN := TRUE,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      ID_SL_ABLE_DON_ORGANS_nin IN BOOLEAN := TRUE,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      REASON_NOT_ABLE_DON_ORG_nin IN BOOLEAN := TRUE,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      ID_SL_ABLE_DON_TISSUES_nin IN BOOLEAN := TRUE,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      REASON_NOT_ABLE_DON_TIS_nin IN BOOLEAN := TRUE,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      ID_SL_WILL_CONSULTED_nin IN BOOLEAN := TRUE,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      ID_SL_WILL_RESULT_nin IN BOOLEAN := TRUE,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      REASON_WILL_NOT_CONS_nin IN BOOLEAN := TRUE,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      ID_SL_OTHER_DECLARATION_nin IN BOOLEAN := TRUE,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      OTHER_DECLARATION_NOTES_nin IN BOOLEAN := TRUE,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      ID_SL_DON_AUTHORIZED_nin IN BOOLEAN := TRUE,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      RESPONSIBLE_NAME_nin IN BOOLEAN := TRUE,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      ID_FAMILY_RELATIONSHIP_nin IN BOOLEAN := TRUE,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      REASON_NOT_AUTHORIZED_nin IN BOOLEAN := TRUE,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      ID_SL_DONATION_APPROVED_nin IN BOOLEAN := TRUE,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      ID_SL_OBJECT_RESEARCH_nin IN BOOLEAN := TRUE,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      REASON_NOT_APPROVED_nin IN BOOLEAN := TRUE,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      ID_SL_FAMILY_LETTER_nin IN BOOLEAN := TRUE,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      FAMILY_NAME_nin IN BOOLEAN := TRUE,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      FAMILY_ADDRESS_nin IN BOOLEAN := TRUE,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      ID_SL_JUSTICE_CONSENT_nin IN BOOLEAN := TRUE,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      ID_SL_DONOR_CENTER_nin IN BOOLEAN := TRUE,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      REASON_DONOR_CENTER_nin IN BOOLEAN := TRUE,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      ID_PROF_ORGAN_DONOR_nin IN BOOLEAN := TRUE,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      DT_ORGAN_DONOR_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_ORGAN_DONOR_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_ID_SL_ABLE_DON_ORGANS_n NUMBER(1);
   l_REASON_NOT_ABLE_DON_ORG_n NUMBER(1);
   l_ID_SL_ABLE_DON_TISSUES_n NUMBER(1);
   l_REASON_NOT_ABLE_DON_TIS_n NUMBER(1);
   l_ID_SL_WILL_CONSULTED_n NUMBER(1);
   l_ID_SL_WILL_RESULT_n NUMBER(1);
   l_REASON_WILL_NOT_CONS_n NUMBER(1);
   l_ID_SL_OTHER_DECLARATION_n NUMBER(1);
   l_OTHER_DECLARATION_NOTES_n NUMBER(1);
   l_ID_SL_DON_AUTHORIZED_n NUMBER(1);
   l_RESPONSIBLE_NAME_n NUMBER(1);
   l_ID_FAMILY_RELATIONSHIP_n NUMBER(1);
   l_REASON_NOT_AUTHORIZED_n NUMBER(1);
   l_ID_SL_DONATION_APPROVED_n NUMBER(1);
   l_ID_SL_OBJECT_RESEARCH_n NUMBER(1);
   l_REASON_NOT_APPROVED_n NUMBER(1);
   l_ID_SL_FAMILY_LETTER_n NUMBER(1);
   l_FAMILY_NAME_n NUMBER(1);
   l_FAMILY_ADDRESS_n NUMBER(1);
   l_ID_SL_JUSTICE_CONSENT_n NUMBER(1);
   l_ID_SL_DONOR_CENTER_n NUMBER(1);
   l_REASON_DONOR_CENTER_n NUMBER(1);
   l_ID_PROF_ORGAN_DONOR_n NUMBER(1);
   l_DT_ORGAN_DONOR_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   BEGIN

   l_ID_ORGAN_DONOR_n := sys.diutil.bool_to_int(ID_ORGAN_DONOR_nin);
   l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
   l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
   l_ID_SL_ABLE_DON_ORGANS_n := sys.diutil.bool_to_int(ID_SL_ABLE_DON_ORGANS_nin);
   l_REASON_NOT_ABLE_DON_ORG_n := sys.diutil.bool_to_int(REASON_NOT_ABLE_DON_ORG_nin);
   l_ID_SL_ABLE_DON_TISSUES_n := sys.diutil.bool_to_int(ID_SL_ABLE_DON_TISSUES_nin);
   l_REASON_NOT_ABLE_DON_TIS_n := sys.diutil.bool_to_int(REASON_NOT_ABLE_DON_TIS_nin);
   l_ID_SL_WILL_CONSULTED_n := sys.diutil.bool_to_int(ID_SL_WILL_CONSULTED_nin);
   l_ID_SL_WILL_RESULT_n := sys.diutil.bool_to_int(ID_SL_WILL_RESULT_nin);
   l_REASON_WILL_NOT_CONS_n := sys.diutil.bool_to_int(REASON_WILL_NOT_CONS_nin);
   l_ID_SL_OTHER_DECLARATION_n := sys.diutil.bool_to_int(ID_SL_OTHER_DECLARATION_nin);
   l_OTHER_DECLARATION_NOTES_n := sys.diutil.bool_to_int(OTHER_DECLARATION_NOTES_nin);
   l_ID_SL_DON_AUTHORIZED_n := sys.diutil.bool_to_int(ID_SL_DON_AUTHORIZED_nin);
   l_RESPONSIBLE_NAME_n := sys.diutil.bool_to_int(RESPONSIBLE_NAME_nin);
   l_ID_FAMILY_RELATIONSHIP_n := sys.diutil.bool_to_int(ID_FAMILY_RELATIONSHIP_nin);
   l_REASON_NOT_AUTHORIZED_n := sys.diutil.bool_to_int(REASON_NOT_AUTHORIZED_nin);
   l_ID_SL_DONATION_APPROVED_n := sys.diutil.bool_to_int(ID_SL_DONATION_APPROVED_nin);
   l_ID_SL_OBJECT_RESEARCH_n := sys.diutil.bool_to_int(ID_SL_OBJECT_RESEARCH_nin);
   l_REASON_NOT_APPROVED_n := sys.diutil.bool_to_int(REASON_NOT_APPROVED_nin);
   l_ID_SL_FAMILY_LETTER_n := sys.diutil.bool_to_int(ID_SL_FAMILY_LETTER_nin);
   l_FAMILY_NAME_n := sys.diutil.bool_to_int(FAMILY_NAME_nin);
   l_FAMILY_ADDRESS_n := sys.diutil.bool_to_int(FAMILY_ADDRESS_nin);
   l_ID_SL_JUSTICE_CONSENT_n := sys.diutil.bool_to_int(ID_SL_JUSTICE_CONSENT_nin);
   l_ID_SL_DONOR_CENTER_n := sys.diutil.bool_to_int(ID_SL_DONOR_CENTER_nin);
   l_REASON_DONOR_CENTER_n := sys.diutil.bool_to_int(REASON_DONOR_CENTER_nin);
   l_ID_PROF_ORGAN_DONOR_n := sys.diutil.bool_to_int(ID_PROF_ORGAN_DONOR_nin);
   l_DT_ORGAN_DONOR_n := sys.diutil.bool_to_int(DT_ORGAN_DONOR_nin);
   l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
   l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);


         UPDATE ORGAN_DONOR_HIST SET
     ID_ORGAN_DONOR = decode (l_ID_ORGAN_DONOR_n,0,id_organ_donor_in, NVL (id_organ_donor_in, ID_ORGAN_DONOR)),
     ID_PATIENT = decode (l_ID_PATIENT_n,0,id_patient_in, NVL (id_patient_in, ID_PATIENT)),
     ID_EPISODE = decode (l_ID_EPISODE_n,0,id_episode_in, NVL (id_episode_in, ID_EPISODE)),
     ID_SL_ABLE_DON_ORGANS = decode (l_ID_SL_ABLE_DON_ORGANS_n,0,id_sl_able_don_organs_in, NVL (id_sl_able_don_organs_in, ID_SL_ABLE_DON_ORGANS)),
     REASON_NOT_ABLE_DON_ORG = decode (l_REASON_NOT_ABLE_DON_ORG_n,0,reason_not_able_don_org_in, NVL (reason_not_able_don_org_in, REASON_NOT_ABLE_DON_ORG)),
     ID_SL_ABLE_DON_TISSUES = decode (l_ID_SL_ABLE_DON_TISSUES_n,0,id_sl_able_don_tissues_in, NVL (id_sl_able_don_tissues_in, ID_SL_ABLE_DON_TISSUES)),
     REASON_NOT_ABLE_DON_TIS = decode (l_REASON_NOT_ABLE_DON_TIS_n,0,reason_not_able_don_tis_in, NVL (reason_not_able_don_tis_in, REASON_NOT_ABLE_DON_TIS)),
     ID_SL_WILL_CONSULTED = decode (l_ID_SL_WILL_CONSULTED_n,0,id_sl_will_consulted_in, NVL (id_sl_will_consulted_in, ID_SL_WILL_CONSULTED)),
     ID_SL_WILL_RESULT = decode (l_ID_SL_WILL_RESULT_n,0,id_sl_will_result_in, NVL (id_sl_will_result_in, ID_SL_WILL_RESULT)),
     REASON_WILL_NOT_CONS = decode (l_REASON_WILL_NOT_CONS_n,0,reason_will_not_cons_in, NVL (reason_will_not_cons_in, REASON_WILL_NOT_CONS)),
     ID_SL_OTHER_DECLARATION = decode (l_ID_SL_OTHER_DECLARATION_n,0,id_sl_other_declaration_in, NVL (id_sl_other_declaration_in, ID_SL_OTHER_DECLARATION)),
     OTHER_DECLARATION_NOTES = decode (l_OTHER_DECLARATION_NOTES_n,0,other_declaration_notes_in, NVL (other_declaration_notes_in, OTHER_DECLARATION_NOTES)),
     ID_SL_DON_AUTHORIZED = decode (l_ID_SL_DON_AUTHORIZED_n,0,id_sl_don_authorized_in, NVL (id_sl_don_authorized_in, ID_SL_DON_AUTHORIZED)),
     RESPONSIBLE_NAME = decode (l_RESPONSIBLE_NAME_n,0,responsible_name_in, NVL (responsible_name_in, RESPONSIBLE_NAME)),
     ID_FAMILY_RELATIONSHIP = decode (l_ID_FAMILY_RELATIONSHIP_n,0,id_family_relationship_in, NVL (id_family_relationship_in, ID_FAMILY_RELATIONSHIP)),
     REASON_NOT_AUTHORIZED = decode (l_REASON_NOT_AUTHORIZED_n,0,reason_not_authorized_in, NVL (reason_not_authorized_in, REASON_NOT_AUTHORIZED)),
     ID_SL_DONATION_APPROVED = decode (l_ID_SL_DONATION_APPROVED_n,0,id_sl_donation_approved_in, NVL (id_sl_donation_approved_in, ID_SL_DONATION_APPROVED)),
     ID_SL_OBJECT_RESEARCH = decode (l_ID_SL_OBJECT_RESEARCH_n,0,id_sl_object_research_in, NVL (id_sl_object_research_in, ID_SL_OBJECT_RESEARCH)),
     REASON_NOT_APPROVED = decode (l_REASON_NOT_APPROVED_n,0,reason_not_approved_in, NVL (reason_not_approved_in, REASON_NOT_APPROVED)),
     ID_SL_FAMILY_LETTER = decode (l_ID_SL_FAMILY_LETTER_n,0,id_sl_family_letter_in, NVL (id_sl_family_letter_in, ID_SL_FAMILY_LETTER)),
     FAMILY_NAME = decode (l_FAMILY_NAME_n,0,family_name_in, NVL (family_name_in, FAMILY_NAME)),
     FAMILY_ADDRESS = decode (l_FAMILY_ADDRESS_n,0,family_address_in, NVL (family_address_in, FAMILY_ADDRESS)),
     ID_SL_JUSTICE_CONSENT = decode (l_ID_SL_JUSTICE_CONSENT_n,0,id_sl_justice_consent_in, NVL (id_sl_justice_consent_in, ID_SL_JUSTICE_CONSENT)),
     ID_SL_DONOR_CENTER = decode (l_ID_SL_DONOR_CENTER_n,0,id_sl_donor_center_in, NVL (id_sl_donor_center_in, ID_SL_DONOR_CENTER)),
     REASON_DONOR_CENTER = decode (l_REASON_DONOR_CENTER_n,0,reason_donor_center_in, NVL (reason_donor_center_in, REASON_DONOR_CENTER)),
     ID_PROF_ORGAN_DONOR = decode (l_ID_PROF_ORGAN_DONOR_n,0,id_prof_organ_donor_in, NVL (id_prof_organ_donor_in, ID_PROF_ORGAN_DONOR)),
     DT_ORGAN_DONOR = decode (l_DT_ORGAN_DONOR_n,0,dt_organ_donor_in, NVL (dt_organ_donor_in, DT_ORGAN_DONOR)),
     ID_CANCEL_REASON = decode (l_ID_CANCEL_REASON_n,0,id_cancel_reason_in, NVL (id_cancel_reason_in, ID_CANCEL_REASON)),
     NOTES_CANCEL = decode (l_NOTES_CANCEL_n,0,notes_cancel_in, NVL (notes_cancel_in, NOTES_CANCEL)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION))
          WHERE
             ID_ORGAN_DONOR_HIST = id_organ_donor_hist_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'ORGAN_DONOR_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           IF l_name = 'ODH_OD_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ORGAN_DONOR'
               , value_in => id_organ_donor_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_organ_donor_hist_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE,
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      ID_ORGAN_DONOR_nin IN BOOLEAN := TRUE,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      ID_SL_ABLE_DON_ORGANS_nin IN BOOLEAN := TRUE,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      REASON_NOT_ABLE_DON_ORG_nin IN BOOLEAN := TRUE,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      ID_SL_ABLE_DON_TISSUES_nin IN BOOLEAN := TRUE,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      REASON_NOT_ABLE_DON_TIS_nin IN BOOLEAN := TRUE,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      ID_SL_WILL_CONSULTED_nin IN BOOLEAN := TRUE,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      ID_SL_WILL_RESULT_nin IN BOOLEAN := TRUE,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      REASON_WILL_NOT_CONS_nin IN BOOLEAN := TRUE,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      ID_SL_OTHER_DECLARATION_nin IN BOOLEAN := TRUE,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      OTHER_DECLARATION_NOTES_nin IN BOOLEAN := TRUE,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      ID_SL_DON_AUTHORIZED_nin IN BOOLEAN := TRUE,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      RESPONSIBLE_NAME_nin IN BOOLEAN := TRUE,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      ID_FAMILY_RELATIONSHIP_nin IN BOOLEAN := TRUE,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      REASON_NOT_AUTHORIZED_nin IN BOOLEAN := TRUE,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      ID_SL_DONATION_APPROVED_nin IN BOOLEAN := TRUE,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      ID_SL_OBJECT_RESEARCH_nin IN BOOLEAN := TRUE,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      REASON_NOT_APPROVED_nin IN BOOLEAN := TRUE,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      ID_SL_FAMILY_LETTER_nin IN BOOLEAN := TRUE,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      FAMILY_NAME_nin IN BOOLEAN := TRUE,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      FAMILY_ADDRESS_nin IN BOOLEAN := TRUE,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      ID_SL_JUSTICE_CONSENT_nin IN BOOLEAN := TRUE,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      ID_SL_DONOR_CENTER_nin IN BOOLEAN := TRUE,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      REASON_DONOR_CENTER_nin IN BOOLEAN := TRUE,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      ID_PROF_ORGAN_DONOR_nin IN BOOLEAN := TRUE,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      DT_ORGAN_DONOR_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_organ_donor_hist_in => id_organ_donor_hist_in,
      id_organ_donor_in => id_organ_donor_in,
      ID_ORGAN_DONOR_nin => ID_ORGAN_DONOR_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      id_sl_able_don_organs_in => id_sl_able_don_organs_in,
      ID_SL_ABLE_DON_ORGANS_nin => ID_SL_ABLE_DON_ORGANS_nin,
      reason_not_able_don_org_in => reason_not_able_don_org_in,
      REASON_NOT_ABLE_DON_ORG_nin => REASON_NOT_ABLE_DON_ORG_nin,
      id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
      ID_SL_ABLE_DON_TISSUES_nin => ID_SL_ABLE_DON_TISSUES_nin,
      reason_not_able_don_tis_in => reason_not_able_don_tis_in,
      REASON_NOT_ABLE_DON_TIS_nin => REASON_NOT_ABLE_DON_TIS_nin,
      id_sl_will_consulted_in => id_sl_will_consulted_in,
      ID_SL_WILL_CONSULTED_nin => ID_SL_WILL_CONSULTED_nin,
      id_sl_will_result_in => id_sl_will_result_in,
      ID_SL_WILL_RESULT_nin => ID_SL_WILL_RESULT_nin,
      reason_will_not_cons_in => reason_will_not_cons_in,
      REASON_WILL_NOT_CONS_nin => REASON_WILL_NOT_CONS_nin,
      id_sl_other_declaration_in => id_sl_other_declaration_in,
      ID_SL_OTHER_DECLARATION_nin => ID_SL_OTHER_DECLARATION_nin,
      other_declaration_notes_in => other_declaration_notes_in,
      OTHER_DECLARATION_NOTES_nin => OTHER_DECLARATION_NOTES_nin,
      id_sl_don_authorized_in => id_sl_don_authorized_in,
      ID_SL_DON_AUTHORIZED_nin => ID_SL_DON_AUTHORIZED_nin,
      responsible_name_in => responsible_name_in,
      RESPONSIBLE_NAME_nin => RESPONSIBLE_NAME_nin,
      id_family_relationship_in => id_family_relationship_in,
      ID_FAMILY_RELATIONSHIP_nin => ID_FAMILY_RELATIONSHIP_nin,
      reason_not_authorized_in => reason_not_authorized_in,
      REASON_NOT_AUTHORIZED_nin => REASON_NOT_AUTHORIZED_nin,
      id_sl_donation_approved_in => id_sl_donation_approved_in,
      ID_SL_DONATION_APPROVED_nin => ID_SL_DONATION_APPROVED_nin,
      id_sl_object_research_in => id_sl_object_research_in,
      ID_SL_OBJECT_RESEARCH_nin => ID_SL_OBJECT_RESEARCH_nin,
      reason_not_approved_in => reason_not_approved_in,
      REASON_NOT_APPROVED_nin => REASON_NOT_APPROVED_nin,
      id_sl_family_letter_in => id_sl_family_letter_in,
      ID_SL_FAMILY_LETTER_nin => ID_SL_FAMILY_LETTER_nin,
      family_name_in => family_name_in,
      FAMILY_NAME_nin => FAMILY_NAME_nin,
      family_address_in => family_address_in,
      FAMILY_ADDRESS_nin => FAMILY_ADDRESS_nin,
      id_sl_justice_consent_in => id_sl_justice_consent_in,
      ID_SL_JUSTICE_CONSENT_nin => ID_SL_JUSTICE_CONSENT_nin,
      id_sl_donor_center_in => id_sl_donor_center_in,
      ID_SL_DONOR_CENTER_nin => ID_SL_DONOR_CENTER_nin,
      reason_donor_center_in => reason_donor_center_in,
      REASON_DONOR_CENTER_nin => REASON_DONOR_CENTER_nin,
      id_prof_organ_donor_in => id_prof_organ_donor_in,
      ID_PROF_ORGAN_DONOR_nin => ID_PROF_ORGAN_DONOR_nin,
      dt_organ_donor_in => dt_organ_donor_in,
      DT_ORGAN_DONOR_nin => DT_ORGAN_DONOR_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      ID_ORGAN_DONOR_nin IN BOOLEAN := TRUE,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      ID_SL_ABLE_DON_ORGANS_nin IN BOOLEAN := TRUE,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      REASON_NOT_ABLE_DON_ORG_nin IN BOOLEAN := TRUE,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      ID_SL_ABLE_DON_TISSUES_nin IN BOOLEAN := TRUE,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      REASON_NOT_ABLE_DON_TIS_nin IN BOOLEAN := TRUE,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      ID_SL_WILL_CONSULTED_nin IN BOOLEAN := TRUE,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      ID_SL_WILL_RESULT_nin IN BOOLEAN := TRUE,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      REASON_WILL_NOT_CONS_nin IN BOOLEAN := TRUE,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      ID_SL_OTHER_DECLARATION_nin IN BOOLEAN := TRUE,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      OTHER_DECLARATION_NOTES_nin IN BOOLEAN := TRUE,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      ID_SL_DON_AUTHORIZED_nin IN BOOLEAN := TRUE,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      RESPONSIBLE_NAME_nin IN BOOLEAN := TRUE,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      ID_FAMILY_RELATIONSHIP_nin IN BOOLEAN := TRUE,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      REASON_NOT_AUTHORIZED_nin IN BOOLEAN := TRUE,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      ID_SL_DONATION_APPROVED_nin IN BOOLEAN := TRUE,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      ID_SL_OBJECT_RESEARCH_nin IN BOOLEAN := TRUE,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      REASON_NOT_APPROVED_nin IN BOOLEAN := TRUE,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      ID_SL_FAMILY_LETTER_nin IN BOOLEAN := TRUE,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      FAMILY_NAME_nin IN BOOLEAN := TRUE,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      FAMILY_ADDRESS_nin IN BOOLEAN := TRUE,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      ID_SL_JUSTICE_CONSENT_nin IN BOOLEAN := TRUE,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      ID_SL_DONOR_CENTER_nin IN BOOLEAN := TRUE,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      REASON_DONOR_CENTER_nin IN BOOLEAN := TRUE,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      ID_PROF_ORGAN_DONOR_nin IN BOOLEAN := TRUE,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      DT_ORGAN_DONOR_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_ORGAN_DONOR_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_ID_SL_ABLE_DON_ORGANS_n NUMBER(1);
   l_REASON_NOT_ABLE_DON_ORG_n NUMBER(1);
   l_ID_SL_ABLE_DON_TISSUES_n NUMBER(1);
   l_REASON_NOT_ABLE_DON_TIS_n NUMBER(1);
   l_ID_SL_WILL_CONSULTED_n NUMBER(1);
   l_ID_SL_WILL_RESULT_n NUMBER(1);
   l_REASON_WILL_NOT_CONS_n NUMBER(1);
   l_ID_SL_OTHER_DECLARATION_n NUMBER(1);
   l_OTHER_DECLARATION_NOTES_n NUMBER(1);
   l_ID_SL_DON_AUTHORIZED_n NUMBER(1);
   l_RESPONSIBLE_NAME_n NUMBER(1);
   l_ID_FAMILY_RELATIONSHIP_n NUMBER(1);
   l_REASON_NOT_AUTHORIZED_n NUMBER(1);
   l_ID_SL_DONATION_APPROVED_n NUMBER(1);
   l_ID_SL_OBJECT_RESEARCH_n NUMBER(1);
   l_REASON_NOT_APPROVED_n NUMBER(1);
   l_ID_SL_FAMILY_LETTER_n NUMBER(1);
   l_FAMILY_NAME_n NUMBER(1);
   l_FAMILY_ADDRESS_n NUMBER(1);
   l_ID_SL_JUSTICE_CONSENT_n NUMBER(1);
   l_ID_SL_DONOR_CENTER_n NUMBER(1);
   l_REASON_DONOR_CENTER_n NUMBER(1);
   l_ID_PROF_ORGAN_DONOR_n NUMBER(1);
   l_DT_ORGAN_DONOR_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
      id_organ_donor_hist_in ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE;
   BEGIN



      l_ID_ORGAN_DONOR_n := sys.diutil.bool_to_int(ID_ORGAN_DONOR_nin);
      l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
      l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
      l_ID_SL_ABLE_DON_ORGANS_n := sys.diutil.bool_to_int(ID_SL_ABLE_DON_ORGANS_nin);
      l_REASON_NOT_ABLE_DON_ORG_n := sys.diutil.bool_to_int(REASON_NOT_ABLE_DON_ORG_nin);
      l_ID_SL_ABLE_DON_TISSUES_n := sys.diutil.bool_to_int(ID_SL_ABLE_DON_TISSUES_nin);
      l_REASON_NOT_ABLE_DON_TIS_n := sys.diutil.bool_to_int(REASON_NOT_ABLE_DON_TIS_nin);
      l_ID_SL_WILL_CONSULTED_n := sys.diutil.bool_to_int(ID_SL_WILL_CONSULTED_nin);
      l_ID_SL_WILL_RESULT_n := sys.diutil.bool_to_int(ID_SL_WILL_RESULT_nin);
      l_REASON_WILL_NOT_CONS_n := sys.diutil.bool_to_int(REASON_WILL_NOT_CONS_nin);
      l_ID_SL_OTHER_DECLARATION_n := sys.diutil.bool_to_int(ID_SL_OTHER_DECLARATION_nin);
      l_OTHER_DECLARATION_NOTES_n := sys.diutil.bool_to_int(OTHER_DECLARATION_NOTES_nin);
      l_ID_SL_DON_AUTHORIZED_n := sys.diutil.bool_to_int(ID_SL_DON_AUTHORIZED_nin);
      l_RESPONSIBLE_NAME_n := sys.diutil.bool_to_int(RESPONSIBLE_NAME_nin);
      l_ID_FAMILY_RELATIONSHIP_n := sys.diutil.bool_to_int(ID_FAMILY_RELATIONSHIP_nin);
      l_REASON_NOT_AUTHORIZED_n := sys.diutil.bool_to_int(REASON_NOT_AUTHORIZED_nin);
      l_ID_SL_DONATION_APPROVED_n := sys.diutil.bool_to_int(ID_SL_DONATION_APPROVED_nin);
      l_ID_SL_OBJECT_RESEARCH_n := sys.diutil.bool_to_int(ID_SL_OBJECT_RESEARCH_nin);
      l_REASON_NOT_APPROVED_n := sys.diutil.bool_to_int(REASON_NOT_APPROVED_nin);
      l_ID_SL_FAMILY_LETTER_n := sys.diutil.bool_to_int(ID_SL_FAMILY_LETTER_nin);
      l_FAMILY_NAME_n := sys.diutil.bool_to_int(FAMILY_NAME_nin);
      l_FAMILY_ADDRESS_n := sys.diutil.bool_to_int(FAMILY_ADDRESS_nin);
      l_ID_SL_JUSTICE_CONSENT_n := sys.diutil.bool_to_int(ID_SL_JUSTICE_CONSENT_nin);
      l_ID_SL_DONOR_CENTER_n := sys.diutil.bool_to_int(ID_SL_DONOR_CENTER_nin);
      l_REASON_DONOR_CENTER_n := sys.diutil.bool_to_int(REASON_DONOR_CENTER_nin);
      l_ID_PROF_ORGAN_DONOR_n := sys.diutil.bool_to_int(ID_PROF_ORGAN_DONOR_nin);
      l_DT_ORGAN_DONOR_n := sys.diutil.bool_to_int(DT_ORGAN_DONOR_nin);
      l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
      l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);



l_sql := 'UPDATE ORGAN_DONOR_HIST SET '
     || ' ID_ORGAN_DONOR = decode (' || l_ID_ORGAN_DONOR_n || ',0,:id_organ_donor_in, NVL (:id_organ_donor_in, ID_ORGAN_DONOR)) '|| ','
     || ' ID_PATIENT = decode (' || l_ID_PATIENT_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) '|| ','
     || ' ID_EPISODE = decode (' || l_ID_EPISODE_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) '|| ','
     || ' ID_SL_ABLE_DON_ORGANS = decode (' || l_ID_SL_ABLE_DON_ORGANS_n || ',0,:id_sl_able_don_organs_in, NVL (:id_sl_able_don_organs_in, ID_SL_ABLE_DON_ORGANS)) '|| ','
     || ' REASON_NOT_ABLE_DON_ORG = decode (' || l_REASON_NOT_ABLE_DON_ORG_n || ',0,:reason_not_able_don_org_in, NVL (:reason_not_able_don_org_in, REASON_NOT_ABLE_DON_ORG)) '|| ','
     || ' ID_SL_ABLE_DON_TISSUES = decode (' || l_ID_SL_ABLE_DON_TISSUES_n || ',0,:id_sl_able_don_tissues_in, NVL (:id_sl_able_don_tissues_in, ID_SL_ABLE_DON_TISSUES)) '|| ','
     || ' REASON_NOT_ABLE_DON_TIS = decode (' || l_REASON_NOT_ABLE_DON_TIS_n || ',0,:reason_not_able_don_tis_in, NVL (:reason_not_able_don_tis_in, REASON_NOT_ABLE_DON_TIS)) '|| ','
     || ' ID_SL_WILL_CONSULTED = decode (' || l_ID_SL_WILL_CONSULTED_n || ',0,:id_sl_will_consulted_in, NVL (:id_sl_will_consulted_in, ID_SL_WILL_CONSULTED)) '|| ','
     || ' ID_SL_WILL_RESULT = decode (' || l_ID_SL_WILL_RESULT_n || ',0,:id_sl_will_result_in, NVL (:id_sl_will_result_in, ID_SL_WILL_RESULT)) '|| ','
     || ' REASON_WILL_NOT_CONS = decode (' || l_REASON_WILL_NOT_CONS_n || ',0,:reason_will_not_cons_in, NVL (:reason_will_not_cons_in, REASON_WILL_NOT_CONS)) '|| ','
     || ' ID_SL_OTHER_DECLARATION = decode (' || l_ID_SL_OTHER_DECLARATION_n || ',0,:id_sl_other_declaration_in, NVL (:id_sl_other_declaration_in, ID_SL_OTHER_DECLARATION)) '|| ','
     || ' OTHER_DECLARATION_NOTES = decode (' || l_OTHER_DECLARATION_NOTES_n || ',0,:other_declaration_notes_in, NVL (:other_declaration_notes_in, OTHER_DECLARATION_NOTES)) '|| ','
     || ' ID_SL_DON_AUTHORIZED = decode (' || l_ID_SL_DON_AUTHORIZED_n || ',0,:id_sl_don_authorized_in, NVL (:id_sl_don_authorized_in, ID_SL_DON_AUTHORIZED)) '|| ','
     || ' RESPONSIBLE_NAME = decode (' || l_RESPONSIBLE_NAME_n || ',0,:responsible_name_in, NVL (:responsible_name_in, RESPONSIBLE_NAME)) '|| ','
     || ' ID_FAMILY_RELATIONSHIP = decode (' || l_ID_FAMILY_RELATIONSHIP_n || ',0,:id_family_relationship_in, NVL (:id_family_relationship_in, ID_FAMILY_RELATIONSHIP)) '|| ','
     || ' REASON_NOT_AUTHORIZED = decode (' || l_REASON_NOT_AUTHORIZED_n || ',0,:reason_not_authorized_in, NVL (:reason_not_authorized_in, REASON_NOT_AUTHORIZED)) '|| ','
     || ' ID_SL_DONATION_APPROVED = decode (' || l_ID_SL_DONATION_APPROVED_n || ',0,:id_sl_donation_approved_in, NVL (:id_sl_donation_approved_in, ID_SL_DONATION_APPROVED)) '|| ','
     || ' ID_SL_OBJECT_RESEARCH = decode (' || l_ID_SL_OBJECT_RESEARCH_n || ',0,:id_sl_object_research_in, NVL (:id_sl_object_research_in, ID_SL_OBJECT_RESEARCH)) '|| ','
     || ' REASON_NOT_APPROVED = decode (' || l_REASON_NOT_APPROVED_n || ',0,:reason_not_approved_in, NVL (:reason_not_approved_in, REASON_NOT_APPROVED)) '|| ','
     || ' ID_SL_FAMILY_LETTER = decode (' || l_ID_SL_FAMILY_LETTER_n || ',0,:id_sl_family_letter_in, NVL (:id_sl_family_letter_in, ID_SL_FAMILY_LETTER)) '|| ','
     || ' FAMILY_NAME = decode (' || l_FAMILY_NAME_n || ',0,:family_name_in, NVL (:family_name_in, FAMILY_NAME)) '|| ','
     || ' FAMILY_ADDRESS = decode (' || l_FAMILY_ADDRESS_n || ',0,:family_address_in, NVL (:family_address_in, FAMILY_ADDRESS)) '|| ','
     || ' ID_SL_JUSTICE_CONSENT = decode (' || l_ID_SL_JUSTICE_CONSENT_n || ',0,:id_sl_justice_consent_in, NVL (:id_sl_justice_consent_in, ID_SL_JUSTICE_CONSENT)) '|| ','
     || ' ID_SL_DONOR_CENTER = decode (' || l_ID_SL_DONOR_CENTER_n || ',0,:id_sl_donor_center_in, NVL (:id_sl_donor_center_in, ID_SL_DONOR_CENTER)) '|| ','
     || ' REASON_DONOR_CENTER = decode (' || l_REASON_DONOR_CENTER_n || ',0,:reason_donor_center_in, NVL (:reason_donor_center_in, REASON_DONOR_CENTER)) '|| ','
     || ' ID_PROF_ORGAN_DONOR = decode (' || l_ID_PROF_ORGAN_DONOR_n || ',0,:id_prof_organ_donor_in, NVL (:id_prof_organ_donor_in, ID_PROF_ORGAN_DONOR)) '|| ','
     || ' DT_ORGAN_DONOR = decode (' || l_DT_ORGAN_DONOR_n || ',0,:dt_organ_donor_in, NVL (:dt_organ_donor_in, DT_ORGAN_DONOR)) '|| ','
     || ' ID_CANCEL_REASON = decode (' || l_ID_CANCEL_REASON_n || ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) '|| ','
     || ' NOTES_CANCEL = decode (' || l_NOTES_CANCEL_n || ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_organ_donor_in,
     id_patient_in,
     id_episode_in,
     id_sl_able_don_organs_in,
     reason_not_able_don_org_in,
     id_sl_able_don_tissues_in,
     reason_not_able_don_tis_in,
     id_sl_will_consulted_in,
     id_sl_will_result_in,
     reason_will_not_cons_in,
     id_sl_other_declaration_in,
     other_declaration_notes_in,
     id_sl_don_authorized_in,
     responsible_name_in,
     id_family_relationship_in,
     reason_not_authorized_in,
     id_sl_donation_approved_in,
     id_sl_object_research_in,
     reason_not_approved_in,
     id_sl_family_letter_in,
     family_name_in,
     family_address_in,
     id_sl_justice_consent_in,
     id_sl_donor_center_in,
     reason_donor_center_in,
     id_prof_organ_donor_in,
     dt_organ_donor_in,
     id_cancel_reason_in,
     notes_cancel_in,
     flg_status_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'ORGAN_DONOR_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           IF l_name = 'ODH_OD_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ORGAN_DONOR'
               , value_in => id_organ_donor_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      ID_ORGAN_DONOR_nin IN BOOLEAN := TRUE,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      ID_SL_ABLE_DON_ORGANS_nin IN BOOLEAN := TRUE,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      REASON_NOT_ABLE_DON_ORG_nin IN BOOLEAN := TRUE,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      ID_SL_ABLE_DON_TISSUES_nin IN BOOLEAN := TRUE,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      REASON_NOT_ABLE_DON_TIS_nin IN BOOLEAN := TRUE,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      ID_SL_WILL_CONSULTED_nin IN BOOLEAN := TRUE,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      ID_SL_WILL_RESULT_nin IN BOOLEAN := TRUE,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      REASON_WILL_NOT_CONS_nin IN BOOLEAN := TRUE,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      ID_SL_OTHER_DECLARATION_nin IN BOOLEAN := TRUE,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      OTHER_DECLARATION_NOTES_nin IN BOOLEAN := TRUE,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      ID_SL_DON_AUTHORIZED_nin IN BOOLEAN := TRUE,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      RESPONSIBLE_NAME_nin IN BOOLEAN := TRUE,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      ID_FAMILY_RELATIONSHIP_nin IN BOOLEAN := TRUE,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      REASON_NOT_AUTHORIZED_nin IN BOOLEAN := TRUE,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      ID_SL_DONATION_APPROVED_nin IN BOOLEAN := TRUE,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      ID_SL_OBJECT_RESEARCH_nin IN BOOLEAN := TRUE,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      REASON_NOT_APPROVED_nin IN BOOLEAN := TRUE,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      ID_SL_FAMILY_LETTER_nin IN BOOLEAN := TRUE,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      FAMILY_NAME_nin IN BOOLEAN := TRUE,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      FAMILY_ADDRESS_nin IN BOOLEAN := TRUE,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      ID_SL_JUSTICE_CONSENT_nin IN BOOLEAN := TRUE,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      ID_SL_DONOR_CENTER_nin IN BOOLEAN := TRUE,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      REASON_DONOR_CENTER_nin IN BOOLEAN := TRUE,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      ID_PROF_ORGAN_DONOR_nin IN BOOLEAN := TRUE,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      DT_ORGAN_DONOR_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_organ_donor_in => id_organ_donor_in,
      ID_ORGAN_DONOR_nin => ID_ORGAN_DONOR_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      id_sl_able_don_organs_in => id_sl_able_don_organs_in,
      ID_SL_ABLE_DON_ORGANS_nin => ID_SL_ABLE_DON_ORGANS_nin,
      reason_not_able_don_org_in => reason_not_able_don_org_in,
      REASON_NOT_ABLE_DON_ORG_nin => REASON_NOT_ABLE_DON_ORG_nin,
      id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
      ID_SL_ABLE_DON_TISSUES_nin => ID_SL_ABLE_DON_TISSUES_nin,
      reason_not_able_don_tis_in => reason_not_able_don_tis_in,
      REASON_NOT_ABLE_DON_TIS_nin => REASON_NOT_ABLE_DON_TIS_nin,
      id_sl_will_consulted_in => id_sl_will_consulted_in,
      ID_SL_WILL_CONSULTED_nin => ID_SL_WILL_CONSULTED_nin,
      id_sl_will_result_in => id_sl_will_result_in,
      ID_SL_WILL_RESULT_nin => ID_SL_WILL_RESULT_nin,
      reason_will_not_cons_in => reason_will_not_cons_in,
      REASON_WILL_NOT_CONS_nin => REASON_WILL_NOT_CONS_nin,
      id_sl_other_declaration_in => id_sl_other_declaration_in,
      ID_SL_OTHER_DECLARATION_nin => ID_SL_OTHER_DECLARATION_nin,
      other_declaration_notes_in => other_declaration_notes_in,
      OTHER_DECLARATION_NOTES_nin => OTHER_DECLARATION_NOTES_nin,
      id_sl_don_authorized_in => id_sl_don_authorized_in,
      ID_SL_DON_AUTHORIZED_nin => ID_SL_DON_AUTHORIZED_nin,
      responsible_name_in => responsible_name_in,
      RESPONSIBLE_NAME_nin => RESPONSIBLE_NAME_nin,
      id_family_relationship_in => id_family_relationship_in,
      ID_FAMILY_RELATIONSHIP_nin => ID_FAMILY_RELATIONSHIP_nin,
      reason_not_authorized_in => reason_not_authorized_in,
      REASON_NOT_AUTHORIZED_nin => REASON_NOT_AUTHORIZED_nin,
      id_sl_donation_approved_in => id_sl_donation_approved_in,
      ID_SL_DONATION_APPROVED_nin => ID_SL_DONATION_APPROVED_nin,
      id_sl_object_research_in => id_sl_object_research_in,
      ID_SL_OBJECT_RESEARCH_nin => ID_SL_OBJECT_RESEARCH_nin,
      reason_not_approved_in => reason_not_approved_in,
      REASON_NOT_APPROVED_nin => REASON_NOT_APPROVED_nin,
      id_sl_family_letter_in => id_sl_family_letter_in,
      ID_SL_FAMILY_LETTER_nin => ID_SL_FAMILY_LETTER_nin,
      family_name_in => family_name_in,
      FAMILY_NAME_nin => FAMILY_NAME_nin,
      family_address_in => family_address_in,
      FAMILY_ADDRESS_nin => FAMILY_ADDRESS_nin,
      id_sl_justice_consent_in => id_sl_justice_consent_in,
      ID_SL_JUSTICE_CONSENT_nin => ID_SL_JUSTICE_CONSENT_nin,
      id_sl_donor_center_in => id_sl_donor_center_in,
      ID_SL_DONOR_CENTER_nin => ID_SL_DONOR_CENTER_nin,
      reason_donor_center_in => reason_donor_center_in,
      REASON_DONOR_CENTER_nin => REASON_DONOR_CENTER_nin,
      id_prof_organ_donor_in => id_prof_organ_donor_in,
      ID_PROF_ORGAN_DONOR_nin => ID_PROF_ORGAN_DONOR_nin,
      dt_organ_donor_in => dt_organ_donor_in,
      DT_ORGAN_DONOR_nin => DT_ORGAN_DONOR_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN ORGAN_DONOR_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_organ_donor_hist_in => rec_in.ID_ORGAN_DONOR_HIST,
         id_organ_donor_in => rec_in.ID_ORGAN_DONOR,
         id_patient_in => rec_in.ID_PATIENT,
         id_episode_in => rec_in.ID_EPISODE,
         id_sl_able_don_organs_in => rec_in.ID_SL_ABLE_DON_ORGANS,
         reason_not_able_don_org_in => rec_in.REASON_NOT_ABLE_DON_ORG,
         id_sl_able_don_tissues_in => rec_in.ID_SL_ABLE_DON_TISSUES,
         reason_not_able_don_tis_in => rec_in.REASON_NOT_ABLE_DON_TIS,
         id_sl_will_consulted_in => rec_in.ID_SL_WILL_CONSULTED,
         id_sl_will_result_in => rec_in.ID_SL_WILL_RESULT,
         reason_will_not_cons_in => rec_in.REASON_WILL_NOT_CONS,
         id_sl_other_declaration_in => rec_in.ID_SL_OTHER_DECLARATION,
         other_declaration_notes_in => rec_in.OTHER_DECLARATION_NOTES,
         id_sl_don_authorized_in => rec_in.ID_SL_DON_AUTHORIZED,
         responsible_name_in => rec_in.RESPONSIBLE_NAME,
         id_family_relationship_in => rec_in.ID_FAMILY_RELATIONSHIP,
         reason_not_authorized_in => rec_in.REASON_NOT_AUTHORIZED,
         id_sl_donation_approved_in => rec_in.ID_SL_DONATION_APPROVED,
         id_sl_object_research_in => rec_in.ID_SL_OBJECT_RESEARCH,
         reason_not_approved_in => rec_in.REASON_NOT_APPROVED,
         id_sl_family_letter_in => rec_in.ID_SL_FAMILY_LETTER,
         family_name_in => rec_in.FAMILY_NAME,
         family_address_in => rec_in.FAMILY_ADDRESS,
         id_sl_justice_consent_in => rec_in.ID_SL_JUSTICE_CONSENT,
         id_sl_donor_center_in => rec_in.ID_SL_DONOR_CENTER,
         reason_donor_center_in => rec_in.REASON_DONOR_CENTER,
         id_prof_organ_donor_in => rec_in.ID_PROF_ORGAN_DONOR,
         dt_organ_donor_in => rec_in.DT_ORGAN_DONOR,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         flg_status_in => rec_in.FLG_STATUS,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN ORGAN_DONOR_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_organ_donor_hist_in => rec_in.ID_ORGAN_DONOR_HIST,
         id_organ_donor_in => rec_in.ID_ORGAN_DONOR,
         id_patient_in => rec_in.ID_PATIENT,
         id_episode_in => rec_in.ID_EPISODE,
         id_sl_able_don_organs_in => rec_in.ID_SL_ABLE_DON_ORGANS,
         reason_not_able_don_org_in => rec_in.REASON_NOT_ABLE_DON_ORG,
         id_sl_able_don_tissues_in => rec_in.ID_SL_ABLE_DON_TISSUES,
         reason_not_able_don_tis_in => rec_in.REASON_NOT_ABLE_DON_TIS,
         id_sl_will_consulted_in => rec_in.ID_SL_WILL_CONSULTED,
         id_sl_will_result_in => rec_in.ID_SL_WILL_RESULT,
         reason_will_not_cons_in => rec_in.REASON_WILL_NOT_CONS,
         id_sl_other_declaration_in => rec_in.ID_SL_OTHER_DECLARATION,
         other_declaration_notes_in => rec_in.OTHER_DECLARATION_NOTES,
         id_sl_don_authorized_in => rec_in.ID_SL_DON_AUTHORIZED,
         responsible_name_in => rec_in.RESPONSIBLE_NAME,
         id_family_relationship_in => rec_in.ID_FAMILY_RELATIONSHIP,
         reason_not_authorized_in => rec_in.REASON_NOT_AUTHORIZED,
         id_sl_donation_approved_in => rec_in.ID_SL_DONATION_APPROVED,
         id_sl_object_research_in => rec_in.ID_SL_OBJECT_RESEARCH,
         reason_not_approved_in => rec_in.REASON_NOT_APPROVED,
         id_sl_family_letter_in => rec_in.ID_SL_FAMILY_LETTER,
         family_name_in => rec_in.FAMILY_NAME,
         family_address_in => rec_in.FAMILY_ADDRESS,
         id_sl_justice_consent_in => rec_in.ID_SL_JUSTICE_CONSENT,
         id_sl_donor_center_in => rec_in.ID_SL_DONOR_CENTER,
         reason_donor_center_in => rec_in.REASON_DONOR_CENTER,
         id_prof_organ_donor_in => rec_in.ID_PROF_ORGAN_DONOR,
         dt_organ_donor_in => rec_in.DT_ORGAN_DONOR,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         flg_status_in => rec_in.FLG_STATUS,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_organ_donor_hist_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE,
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_organ_donor_hist_in => id_organ_donor_hist_in,
         id_organ_donor_in => id_organ_donor_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         id_sl_able_don_organs_in => id_sl_able_don_organs_in,
         reason_not_able_don_org_in => reason_not_able_don_org_in,
         id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
         reason_not_able_don_tis_in => reason_not_able_don_tis_in,
         id_sl_will_consulted_in => id_sl_will_consulted_in,
         id_sl_will_result_in => id_sl_will_result_in,
         reason_will_not_cons_in => reason_will_not_cons_in,
         id_sl_other_declaration_in => id_sl_other_declaration_in,
         other_declaration_notes_in => other_declaration_notes_in,
         id_sl_don_authorized_in => id_sl_don_authorized_in,
         responsible_name_in => responsible_name_in,
         id_family_relationship_in => id_family_relationship_in,
         reason_not_authorized_in => reason_not_authorized_in,
         id_sl_donation_approved_in => id_sl_donation_approved_in,
         id_sl_object_research_in => id_sl_object_research_in,
         reason_not_approved_in => reason_not_approved_in,
         id_sl_family_letter_in => id_sl_family_letter_in,
         family_name_in => family_name_in,
         family_address_in => family_address_in,
         id_sl_justice_consent_in => id_sl_justice_consent_in,
         id_sl_donor_center_in => id_sl_donor_center_in,
         reason_donor_center_in => reason_donor_center_in,
         id_prof_organ_donor_in => id_prof_organ_donor_in,
         dt_organ_donor_in => dt_organ_donor_in,
         id_cancel_reason_in => id_cancel_reason_in,
         notes_cancel_in => notes_cancel_in,
         flg_status_in => flg_status_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_organ_donor_hist_in => id_organ_donor_hist_in,
            id_organ_donor_in => id_organ_donor_in,
            id_patient_in => id_patient_in,
            id_episode_in => id_episode_in,
            id_sl_able_don_organs_in => id_sl_able_don_organs_in,
            reason_not_able_don_org_in => reason_not_able_don_org_in,
            id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
            reason_not_able_don_tis_in => reason_not_able_don_tis_in,
            id_sl_will_consulted_in => id_sl_will_consulted_in,
            id_sl_will_result_in => id_sl_will_result_in,
            reason_will_not_cons_in => reason_will_not_cons_in,
            id_sl_other_declaration_in => id_sl_other_declaration_in,
            other_declaration_notes_in => other_declaration_notes_in,
            id_sl_don_authorized_in => id_sl_don_authorized_in,
            responsible_name_in => responsible_name_in,
            id_family_relationship_in => id_family_relationship_in,
            reason_not_authorized_in => reason_not_authorized_in,
            id_sl_donation_approved_in => id_sl_donation_approved_in,
            id_sl_object_research_in => id_sl_object_research_in,
            reason_not_approved_in => reason_not_approved_in,
            id_sl_family_letter_in => id_sl_family_letter_in,
            family_name_in => family_name_in,
            family_address_in => family_address_in,
            id_sl_justice_consent_in => id_sl_justice_consent_in,
            id_sl_donor_center_in => id_sl_donor_center_in,
            reason_donor_center_in => reason_donor_center_in,
            id_prof_organ_donor_in => id_prof_organ_donor_in,
            dt_organ_donor_in => dt_organ_donor_in,
            id_cancel_reason_in => id_cancel_reason_in,
            notes_cancel_in => notes_cancel_in,
            flg_status_in => flg_status_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_organ_donor_hist_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE,
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_patient_in IN ORGAN_DONOR_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN ORGAN_DONOR_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_sl_able_don_organs_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_ORGANS%TYPE DEFAULT NULL,
      reason_not_able_don_org_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_ORG%TYPE DEFAULT NULL,
      id_sl_able_don_tissues_in IN ORGAN_DONOR_HIST.ID_SL_ABLE_DON_TISSUES%TYPE DEFAULT NULL,
      reason_not_able_don_tis_in IN ORGAN_DONOR_HIST.REASON_NOT_ABLE_DON_TIS%TYPE DEFAULT NULL,
      id_sl_will_consulted_in IN ORGAN_DONOR_HIST.ID_SL_WILL_CONSULTED%TYPE DEFAULT NULL,
      id_sl_will_result_in IN ORGAN_DONOR_HIST.ID_SL_WILL_RESULT%TYPE DEFAULT NULL,
      reason_will_not_cons_in IN ORGAN_DONOR_HIST.REASON_WILL_NOT_CONS%TYPE DEFAULT NULL,
      id_sl_other_declaration_in IN ORGAN_DONOR_HIST.ID_SL_OTHER_DECLARATION%TYPE DEFAULT NULL,
      other_declaration_notes_in IN ORGAN_DONOR_HIST.OTHER_DECLARATION_NOTES%TYPE DEFAULT NULL,
      id_sl_don_authorized_in IN ORGAN_DONOR_HIST.ID_SL_DON_AUTHORIZED%TYPE DEFAULT NULL,
      responsible_name_in IN ORGAN_DONOR_HIST.RESPONSIBLE_NAME%TYPE DEFAULT NULL,
      id_family_relationship_in IN ORGAN_DONOR_HIST.ID_FAMILY_RELATIONSHIP%TYPE DEFAULT NULL,
      reason_not_authorized_in IN ORGAN_DONOR_HIST.REASON_NOT_AUTHORIZED%TYPE DEFAULT NULL,
      id_sl_donation_approved_in IN ORGAN_DONOR_HIST.ID_SL_DONATION_APPROVED%TYPE DEFAULT NULL,
      id_sl_object_research_in IN ORGAN_DONOR_HIST.ID_SL_OBJECT_RESEARCH%TYPE DEFAULT NULL,
      reason_not_approved_in IN ORGAN_DONOR_HIST.REASON_NOT_APPROVED%TYPE DEFAULT NULL,
      id_sl_family_letter_in IN ORGAN_DONOR_HIST.ID_SL_FAMILY_LETTER%TYPE DEFAULT NULL,
      family_name_in IN ORGAN_DONOR_HIST.FAMILY_NAME%TYPE DEFAULT NULL,
      family_address_in IN ORGAN_DONOR_HIST.FAMILY_ADDRESS%TYPE DEFAULT NULL,
      id_sl_justice_consent_in IN ORGAN_DONOR_HIST.ID_SL_JUSTICE_CONSENT%TYPE DEFAULT NULL,
      id_sl_donor_center_in IN ORGAN_DONOR_HIST.ID_SL_DONOR_CENTER%TYPE DEFAULT NULL,
      reason_donor_center_in IN ORGAN_DONOR_HIST.REASON_DONOR_CENTER%TYPE DEFAULT NULL,
      id_prof_organ_donor_in IN ORGAN_DONOR_HIST.ID_PROF_ORGAN_DONOR%TYPE DEFAULT NULL,
      dt_organ_donor_in IN ORGAN_DONOR_HIST.DT_ORGAN_DONOR%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ORGAN_DONOR_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN ORGAN_DONOR_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      flg_status_in IN ORGAN_DONOR_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      create_user_in IN ORGAN_DONOR_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ORGAN_DONOR_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ORGAN_DONOR_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ORGAN_DONOR_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ORGAN_DONOR_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ORGAN_DONOR_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_organ_donor_hist_in,
      id_organ_donor_in,
      id_patient_in,
      id_episode_in,
      id_sl_able_don_organs_in,
      reason_not_able_don_org_in,
      id_sl_able_don_tissues_in,
      reason_not_able_don_tis_in,
      id_sl_will_consulted_in,
      id_sl_will_result_in,
      reason_will_not_cons_in,
      id_sl_other_declaration_in,
      other_declaration_notes_in,
      id_sl_don_authorized_in,
      responsible_name_in,
      id_family_relationship_in,
      reason_not_authorized_in,
      id_sl_donation_approved_in,
      id_sl_object_research_in,
      reason_not_approved_in,
      id_sl_family_letter_in,
      family_name_in,
      family_address_in,
      id_sl_justice_consent_in,
      id_sl_donor_center_in,
      reason_donor_center_in,
      id_prof_organ_donor_in,
      dt_organ_donor_in,
      id_cancel_reason_in,
      notes_cancel_in,
      flg_status_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN ORGAN_DONOR_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_ORGAN_DONOR_HIST ID_ORGAN_DONOR_HIST_cc;
      l_ID_ORGAN_DONOR ID_ORGAN_DONOR_cc;
      l_ID_PATIENT ID_PATIENT_cc;
      l_ID_EPISODE ID_EPISODE_cc;
      l_ID_SL_ABLE_DON_ORGANS ID_SL_ABLE_DON_ORGANS_cc;
      l_REASON_NOT_ABLE_DON_ORG REASON_NOT_ABLE_DON_ORG_cc;
      l_ID_SL_ABLE_DON_TISSUES ID_SL_ABLE_DON_TISSUES_cc;
      l_REASON_NOT_ABLE_DON_TIS REASON_NOT_ABLE_DON_TIS_cc;
      l_ID_SL_WILL_CONSULTED ID_SL_WILL_CONSULTED_cc;
      l_ID_SL_WILL_RESULT ID_SL_WILL_RESULT_cc;
      l_REASON_WILL_NOT_CONS REASON_WILL_NOT_CONS_cc;
      l_ID_SL_OTHER_DECLARATION ID_SL_OTHER_DECLARATION_cc;
      l_OTHER_DECLARATION_NOTES OTHER_DECLARATION_NOTES_cc;
      l_ID_SL_DON_AUTHORIZED ID_SL_DON_AUTHORIZED_cc;
      l_RESPONSIBLE_NAME RESPONSIBLE_NAME_cc;
      l_ID_FAMILY_RELATIONSHIP ID_FAMILY_RELATIONSHIP_cc;
      l_REASON_NOT_AUTHORIZED REASON_NOT_AUTHORIZED_cc;
      l_ID_SL_DONATION_APPROVED ID_SL_DONATION_APPROVED_cc;
      l_ID_SL_OBJECT_RESEARCH ID_SL_OBJECT_RESEARCH_cc;
      l_REASON_NOT_APPROVED REASON_NOT_APPROVED_cc;
      l_ID_SL_FAMILY_LETTER ID_SL_FAMILY_LETTER_cc;
      l_FAMILY_NAME FAMILY_NAME_cc;
      l_FAMILY_ADDRESS FAMILY_ADDRESS_cc;
      l_ID_SL_JUSTICE_CONSENT ID_SL_JUSTICE_CONSENT_cc;
      l_ID_SL_DONOR_CENTER ID_SL_DONOR_CENTER_cc;
      l_REASON_DONOR_CENTER REASON_DONOR_CENTER_cc;
      l_ID_PROF_ORGAN_DONOR ID_PROF_ORGAN_DONOR_cc;
      l_DT_ORGAN_DONOR DT_ORGAN_DONOR_cc;
      l_ID_CANCEL_REASON ID_CANCEL_REASON_cc;
      l_NOTES_CANCEL NOTES_CANCEL_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_ORGAN_DONOR_HIST(i) := col_in(i).ID_ORGAN_DONOR_HIST;
         l_ID_ORGAN_DONOR(i) := col_in(i).ID_ORGAN_DONOR;
         l_ID_PATIENT(i) := col_in(i).ID_PATIENT;
         l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
         l_ID_SL_ABLE_DON_ORGANS(i) := col_in(i).ID_SL_ABLE_DON_ORGANS;
         l_REASON_NOT_ABLE_DON_ORG(i) := col_in(i).REASON_NOT_ABLE_DON_ORG;
         l_ID_SL_ABLE_DON_TISSUES(i) := col_in(i).ID_SL_ABLE_DON_TISSUES;
         l_REASON_NOT_ABLE_DON_TIS(i) := col_in(i).REASON_NOT_ABLE_DON_TIS;
         l_ID_SL_WILL_CONSULTED(i) := col_in(i).ID_SL_WILL_CONSULTED;
         l_ID_SL_WILL_RESULT(i) := col_in(i).ID_SL_WILL_RESULT;
         l_REASON_WILL_NOT_CONS(i) := col_in(i).REASON_WILL_NOT_CONS;
         l_ID_SL_OTHER_DECLARATION(i) := col_in(i).ID_SL_OTHER_DECLARATION;
         l_OTHER_DECLARATION_NOTES(i) := col_in(i).OTHER_DECLARATION_NOTES;
         l_ID_SL_DON_AUTHORIZED(i) := col_in(i).ID_SL_DON_AUTHORIZED;
         l_RESPONSIBLE_NAME(i) := col_in(i).RESPONSIBLE_NAME;
         l_ID_FAMILY_RELATIONSHIP(i) := col_in(i).ID_FAMILY_RELATIONSHIP;
         l_REASON_NOT_AUTHORIZED(i) := col_in(i).REASON_NOT_AUTHORIZED;
         l_ID_SL_DONATION_APPROVED(i) := col_in(i).ID_SL_DONATION_APPROVED;
         l_ID_SL_OBJECT_RESEARCH(i) := col_in(i).ID_SL_OBJECT_RESEARCH;
         l_REASON_NOT_APPROVED(i) := col_in(i).REASON_NOT_APPROVED;
         l_ID_SL_FAMILY_LETTER(i) := col_in(i).ID_SL_FAMILY_LETTER;
         l_FAMILY_NAME(i) := col_in(i).FAMILY_NAME;
         l_FAMILY_ADDRESS(i) := col_in(i).FAMILY_ADDRESS;
         l_ID_SL_JUSTICE_CONSENT(i) := col_in(i).ID_SL_JUSTICE_CONSENT;
         l_ID_SL_DONOR_CENTER(i) := col_in(i).ID_SL_DONOR_CENTER;
         l_REASON_DONOR_CENTER(i) := col_in(i).REASON_DONOR_CENTER;
         l_ID_PROF_ORGAN_DONOR(i) := col_in(i).ID_PROF_ORGAN_DONOR;
         l_DT_ORGAN_DONOR(i) := col_in(i).DT_ORGAN_DONOR;
         l_ID_CANCEL_REASON(i) := col_in(i).ID_CANCEL_REASON;
         l_NOTES_CANCEL(i) := col_in(i).NOTES_CANCEL;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE ORGAN_DONOR_HIST SET
               ID_ORGAN_DONOR = NVL (l_ID_ORGAN_DONOR(i), ID_ORGAN_DONOR),
               ID_PATIENT = NVL (l_ID_PATIENT(i), ID_PATIENT),
               ID_EPISODE = NVL (l_ID_EPISODE(i), ID_EPISODE),
               ID_SL_ABLE_DON_ORGANS = NVL (l_ID_SL_ABLE_DON_ORGANS(i), ID_SL_ABLE_DON_ORGANS),
               REASON_NOT_ABLE_DON_ORG = NVL (l_REASON_NOT_ABLE_DON_ORG(i), REASON_NOT_ABLE_DON_ORG),
               ID_SL_ABLE_DON_TISSUES = NVL (l_ID_SL_ABLE_DON_TISSUES(i), ID_SL_ABLE_DON_TISSUES),
               REASON_NOT_ABLE_DON_TIS = NVL (l_REASON_NOT_ABLE_DON_TIS(i), REASON_NOT_ABLE_DON_TIS),
               ID_SL_WILL_CONSULTED = NVL (l_ID_SL_WILL_CONSULTED(i), ID_SL_WILL_CONSULTED),
               ID_SL_WILL_RESULT = NVL (l_ID_SL_WILL_RESULT(i), ID_SL_WILL_RESULT),
               REASON_WILL_NOT_CONS = NVL (l_REASON_WILL_NOT_CONS(i), REASON_WILL_NOT_CONS),
               ID_SL_OTHER_DECLARATION = NVL (l_ID_SL_OTHER_DECLARATION(i), ID_SL_OTHER_DECLARATION),
               OTHER_DECLARATION_NOTES = NVL (l_OTHER_DECLARATION_NOTES(i), OTHER_DECLARATION_NOTES),
               ID_SL_DON_AUTHORIZED = NVL (l_ID_SL_DON_AUTHORIZED(i), ID_SL_DON_AUTHORIZED),
               RESPONSIBLE_NAME = NVL (l_RESPONSIBLE_NAME(i), RESPONSIBLE_NAME),
               ID_FAMILY_RELATIONSHIP = NVL (l_ID_FAMILY_RELATIONSHIP(i), ID_FAMILY_RELATIONSHIP),
               REASON_NOT_AUTHORIZED = NVL (l_REASON_NOT_AUTHORIZED(i), REASON_NOT_AUTHORIZED),
               ID_SL_DONATION_APPROVED = NVL (l_ID_SL_DONATION_APPROVED(i), ID_SL_DONATION_APPROVED),
               ID_SL_OBJECT_RESEARCH = NVL (l_ID_SL_OBJECT_RESEARCH(i), ID_SL_OBJECT_RESEARCH),
               REASON_NOT_APPROVED = NVL (l_REASON_NOT_APPROVED(i), REASON_NOT_APPROVED),
               ID_SL_FAMILY_LETTER = NVL (l_ID_SL_FAMILY_LETTER(i), ID_SL_FAMILY_LETTER),
               FAMILY_NAME = NVL (l_FAMILY_NAME(i), FAMILY_NAME),
               FAMILY_ADDRESS = NVL (l_FAMILY_ADDRESS(i), FAMILY_ADDRESS),
               ID_SL_JUSTICE_CONSENT = NVL (l_ID_SL_JUSTICE_CONSENT(i), ID_SL_JUSTICE_CONSENT),
               ID_SL_DONOR_CENTER = NVL (l_ID_SL_DONOR_CENTER(i), ID_SL_DONOR_CENTER),
               REASON_DONOR_CENTER = NVL (l_REASON_DONOR_CENTER(i), REASON_DONOR_CENTER),
               ID_PROF_ORGAN_DONOR = NVL (l_ID_PROF_ORGAN_DONOR(i), ID_PROF_ORGAN_DONOR),
               DT_ORGAN_DONOR = NVL (l_DT_ORGAN_DONOR(i), DT_ORGAN_DONOR),
               ID_CANCEL_REASON = NVL (l_ID_CANCEL_REASON(i), ID_CANCEL_REASON),
               NOTES_CANCEL = NVL (l_NOTES_CANCEL(i), NOTES_CANCEL),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION)
             WHERE
                ID_ORGAN_DONOR_HIST = l_ID_ORGAN_DONOR_HIST(i)
         ;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE ORGAN_DONOR_HIST SET
               ID_ORGAN_DONOR = l_ID_ORGAN_DONOR(i),
               ID_PATIENT = l_ID_PATIENT(i),
               ID_EPISODE = l_ID_EPISODE(i),
               ID_SL_ABLE_DON_ORGANS = l_ID_SL_ABLE_DON_ORGANS(i),
               REASON_NOT_ABLE_DON_ORG = l_REASON_NOT_ABLE_DON_ORG(i),
               ID_SL_ABLE_DON_TISSUES = l_ID_SL_ABLE_DON_TISSUES(i),
               REASON_NOT_ABLE_DON_TIS = l_REASON_NOT_ABLE_DON_TIS(i),
               ID_SL_WILL_CONSULTED = l_ID_SL_WILL_CONSULTED(i),
               ID_SL_WILL_RESULT = l_ID_SL_WILL_RESULT(i),
               REASON_WILL_NOT_CONS = l_REASON_WILL_NOT_CONS(i),
               ID_SL_OTHER_DECLARATION = l_ID_SL_OTHER_DECLARATION(i),
               OTHER_DECLARATION_NOTES = l_OTHER_DECLARATION_NOTES(i),
               ID_SL_DON_AUTHORIZED = l_ID_SL_DON_AUTHORIZED(i),
               RESPONSIBLE_NAME = l_RESPONSIBLE_NAME(i),
               ID_FAMILY_RELATIONSHIP = l_ID_FAMILY_RELATIONSHIP(i),
               REASON_NOT_AUTHORIZED = l_REASON_NOT_AUTHORIZED(i),
               ID_SL_DONATION_APPROVED = l_ID_SL_DONATION_APPROVED(i),
               ID_SL_OBJECT_RESEARCH = l_ID_SL_OBJECT_RESEARCH(i),
               REASON_NOT_APPROVED = l_REASON_NOT_APPROVED(i),
               ID_SL_FAMILY_LETTER = l_ID_SL_FAMILY_LETTER(i),
               FAMILY_NAME = l_FAMILY_NAME(i),
               FAMILY_ADDRESS = l_FAMILY_ADDRESS(i),
               ID_SL_JUSTICE_CONSENT = l_ID_SL_JUSTICE_CONSENT(i),
               ID_SL_DONOR_CENTER = l_ID_SL_DONOR_CENTER(i),
               REASON_DONOR_CENTER = l_REASON_DONOR_CENTER(i),
               ID_PROF_ORGAN_DONOR = l_ID_PROF_ORGAN_DONOR(i),
               DT_ORGAN_DONOR = l_DT_ORGAN_DONOR(i),
               ID_CANCEL_REASON = l_ID_CANCEL_REASON(i),
               NOTES_CANCEL = l_NOTES_CANCEL(i),
               FLG_STATUS = l_FLG_STATUS(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i)
             WHERE
                ID_ORGAN_DONOR_HIST = l_ID_ORGAN_DONOR_HIST(i)
         ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN ORGAN_DONOR_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE ORGAN_DONOR_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE ORGAN_DONOR_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE ORGAN_DONOR_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE ORGAN_DONOR_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_organ_donor_hist_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ORGAN_DONOR_HIST
       WHERE
          ID_ORGAN_DONOR_HIST = id_organ_donor_hist_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_organ_donor_hist_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_organ_donor_hist_in => id_organ_donor_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_ORGAN_DONOR_HIST
   PROCEDURE del_ID_ORGAN_DONOR_HIST (
      id_organ_donor_hist_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM ORGAN_DONOR_HIST
       WHERE ID_ORGAN_DONOR_HIST = id_organ_donor_hist_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_ORGAN_DONOR_HIST;






   -- Delete all rows for primary key column ID_ORGAN_DONOR_HIST
   PROCEDURE del_ID_ORGAN_DONOR_HIST (
      id_organ_donor_hist_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_ORGAN_DONOR_HIST (
      id_organ_donor_hist_in => id_organ_donor_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_ORGAN_DONOR_HIST;















   PROCEDURE del_ODH_OD_FK (
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ORGAN_DONOR_HIST
       WHERE
          ID_ORGAN_DONOR = del_ODH_OD_FK.id_organ_donor_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ODH_OD_FK;



PROCEDURE del_ODH_OD_FK (
      id_organ_donor_in IN ORGAN_DONOR_HIST.ID_ORGAN_DONOR%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ODH_OD_FK (
      id_organ_donor_in => id_organ_donor_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_ODH_OD_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM ORGAN_DONOR_HIST';
      ELSE
         RETURN
            'DELETE FROM ORGAN_DONOR_HIST WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ORGAN_DONOR_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ORGAN_DONOR_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      organ_donor_hist_inout IN OUT ORGAN_DONOR_HIST%ROWTYPE
   )
   IS
   BEGIN
      organ_donor_hist_inout.ID_ORGAN_DONOR_HIST := NULL;
      organ_donor_hist_inout.ID_ORGAN_DONOR := NULL;
      organ_donor_hist_inout.ID_PATIENT := NULL;
      organ_donor_hist_inout.ID_EPISODE := NULL;
      organ_donor_hist_inout.ID_SL_ABLE_DON_ORGANS := NULL;
      organ_donor_hist_inout.REASON_NOT_ABLE_DON_ORG := NULL;
      organ_donor_hist_inout.ID_SL_ABLE_DON_TISSUES := NULL;
      organ_donor_hist_inout.REASON_NOT_ABLE_DON_TIS := NULL;
      organ_donor_hist_inout.ID_SL_WILL_CONSULTED := NULL;
      organ_donor_hist_inout.ID_SL_WILL_RESULT := NULL;
      organ_donor_hist_inout.REASON_WILL_NOT_CONS := NULL;
      organ_donor_hist_inout.ID_SL_OTHER_DECLARATION := NULL;
      organ_donor_hist_inout.OTHER_DECLARATION_NOTES := NULL;
      organ_donor_hist_inout.ID_SL_DON_AUTHORIZED := NULL;
      organ_donor_hist_inout.RESPONSIBLE_NAME := NULL;
      organ_donor_hist_inout.ID_FAMILY_RELATIONSHIP := NULL;
      organ_donor_hist_inout.REASON_NOT_AUTHORIZED := NULL;
      organ_donor_hist_inout.ID_SL_DONATION_APPROVED := NULL;
      organ_donor_hist_inout.ID_SL_OBJECT_RESEARCH := NULL;
      organ_donor_hist_inout.REASON_NOT_APPROVED := NULL;
      organ_donor_hist_inout.ID_SL_FAMILY_LETTER := NULL;
      organ_donor_hist_inout.FAMILY_NAME := NULL;
      organ_donor_hist_inout.FAMILY_ADDRESS := NULL;
      organ_donor_hist_inout.ID_SL_JUSTICE_CONSENT := NULL;
      organ_donor_hist_inout.ID_SL_DONOR_CENTER := NULL;
      organ_donor_hist_inout.REASON_DONOR_CENTER := NULL;
      organ_donor_hist_inout.ID_PROF_ORGAN_DONOR := NULL;
      organ_donor_hist_inout.DT_ORGAN_DONOR := NULL;
      organ_donor_hist_inout.ID_CANCEL_REASON := NULL;
      organ_donor_hist_inout.NOTES_CANCEL := NULL;
      organ_donor_hist_inout.FLG_STATUS := NULL;
      organ_donor_hist_inout.CREATE_USER := NULL;
      organ_donor_hist_inout.CREATE_TIME := NULL;
      organ_donor_hist_inout.CREATE_INSTITUTION := NULL;
      organ_donor_hist_inout.UPDATE_USER := NULL;
      organ_donor_hist_inout.UPDATE_TIME := NULL;
      organ_donor_hist_inout.UPDATE_INSTITUTION := NULL;
   END initrec;

   FUNCTION initrec RETURN ORGAN_DONOR_HIST%ROWTYPE
   IS
      l_organ_donor_hist ORGAN_DONOR_HIST%ROWTYPE;
   BEGIN
      RETURN l_organ_donor_hist;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN ORGAN_DONOR_HIST_tc
   IS
        data ORGAN_DONOR_HIST_tc;
   BEGIN
        select * bulk collect into data from ORGAN_DONOR_HIST where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN ORGAN_DONOR_HIST_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data ORGAN_DONOR_HIST_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_ORGAN_DONOR_HIST;
/
