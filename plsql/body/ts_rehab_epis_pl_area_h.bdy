/*-- Last Change Revision: $Rev: 2028358 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:19 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_rehab_epis_pl_area_h
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Dezembro 23, 2010 11:26:38
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_rehab_epis_pl_area_h_in IN rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE,
        id_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        current_situation_in       IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        goals_in                   IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        methodology_in             IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        time_in                    IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        flg_time_unit_in           IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        id_prof_create_in          IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        create_user_in             IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_time_in             IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_time_in             IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO rehab_epis_pl_area_h
            (id_rehab_epis_pl_area_h,
             id_rehab_epis_plan_area,
             current_situation,
             goals,
             methodology,
             TIME,
             flg_time_unit,
             id_prof_create,
             dt_rehab_epis_plan_area,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_rehab_epis_pl_area_h_in,
             id_rehab_epis_plan_area_in,
             current_situation_in,
             goals_in,
             methodology_in,
             time_in,
             flg_time_unit_in,
             id_prof_create_in,
             dt_rehab_epis_plan_area_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'REHAB_EPIS_PL_AREA_H');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    IF l_name = 'REPAHT_REA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REHAB_EPIS_PLAN_AREA',
                                                        value_in           => id_rehab_epis_plan_area_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_rehab_epis_pl_area_h_in IN rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE,
        id_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        current_situation_in       IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        goals_in                   IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        methodology_in             IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        time_in                    IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        flg_time_unit_in           IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        id_prof_create_in          IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        create_user_in             IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_time_in             IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_time_in             IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_rehab_epis_pl_area_h_in => id_rehab_epis_pl_area_h_in,
            id_rehab_epis_plan_area_in => id_rehab_epis_plan_area_in,
            current_situation_in       => current_situation_in,
            goals_in                   => goals_in,
            methodology_in             => methodology_in,
            time_in                    => time_in,
            flg_time_unit_in           => flg_time_unit_in,
            id_prof_create_in          => id_prof_create_in,
            dt_rehab_epis_plan_area_in => dt_rehab_epis_plan_area_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN rehab_epis_pl_area_h%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec rehab_epis_pl_area_h%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_rehab_epis_pl_area_h := next_key(sequence_in);
        END IF;
        ins(id_rehab_epis_pl_area_h_in => l_rec.id_rehab_epis_pl_area_h,
            id_rehab_epis_plan_area_in => l_rec.id_rehab_epis_plan_area,
            current_situation_in       => l_rec.current_situation,
            goals_in                   => l_rec.goals,
            methodology_in             => l_rec.methodology,
            time_in                    => l_rec.TIME,
            flg_time_unit_in           => l_rec.flg_time_unit,
            id_prof_create_in          => l_rec.id_prof_create,
            dt_rehab_epis_plan_area_in => l_rec.dt_rehab_epis_plan_area,
            create_user_in             => l_rec.create_user,
            create_time_in             => l_rec.create_time,
            create_institution_in      => l_rec.create_institution,
            update_user_in             => l_rec.update_user,
            update_time_in             => l_rec.update_time,
            update_institution_in      => l_rec.update_institution,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN rehab_epis_pl_area_h%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE
    
     IS
        retval rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_rehab_epis_pl_area_h.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_REHAB_EPIS_PL_AREA_H'));
    END next_key;

    PROCEDURE ins
    (
        id_rehab_epis_plan_area_in  IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        current_situation_in        IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        goals_in                    IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        methodology_in              IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        time_in                     IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        flg_time_unit_in            IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        id_prof_create_in           IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_in  IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        create_user_in              IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_time_in              IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_time_in              IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        id_rehab_epis_pl_area_h_out IN OUT rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
        l_pky rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE := next_key;
    BEGIN
        ins(id_rehab_epis_pl_area_h_in => l_pky,
            id_rehab_epis_plan_area_in => id_rehab_epis_plan_area_in,
            current_situation_in       => current_situation_in,
            goals_in                   => goals_in,
            methodology_in             => methodology_in,
            time_in                    => time_in,
            flg_time_unit_in           => flg_time_unit_in,
            id_prof_create_in          => id_prof_create_in,
            dt_rehab_epis_plan_area_in => dt_rehab_epis_plan_area_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        id_rehab_epis_pl_area_h_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_rehab_epis_plan_area_in  IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        current_situation_in        IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        goals_in                    IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        methodology_in              IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        time_in                     IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        flg_time_unit_in            IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        id_prof_create_in           IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_in  IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        create_user_in              IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_time_in              IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_time_in              IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        id_rehab_epis_pl_area_h_out IN OUT rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_rehab_epis_plan_area_in  => id_rehab_epis_plan_area_in,
            current_situation_in        => current_situation_in,
            goals_in                    => goals_in,
            methodology_in              => methodology_in,
            time_in                     => time_in,
            flg_time_unit_in            => flg_time_unit_in,
            id_prof_create_in           => id_prof_create_in,
            dt_rehab_epis_plan_area_in  => dt_rehab_epis_plan_area_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_rehab_epis_pl_area_h_out => id_rehab_epis_pl_area_h_out,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    FUNCTION ins
    (
        id_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        current_situation_in       IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        goals_in                   IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        methodology_in             IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        time_in                    IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        flg_time_unit_in           IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        id_prof_create_in          IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        create_user_in             IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_time_in             IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_time_in             IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) RETURN rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE IS
        l_pky rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE := next_key;
    BEGIN
        ins(id_rehab_epis_pl_area_h_in => l_pky,
            id_rehab_epis_plan_area_in => id_rehab_epis_plan_area_in,
            current_situation_in       => current_situation_in,
            goals_in                   => goals_in,
            methodology_in             => methodology_in,
            time_in                    => time_in,
            flg_time_unit_in           => flg_time_unit_in,
            id_prof_create_in          => id_prof_create_in,
            dt_rehab_epis_plan_area_in => dt_rehab_epis_plan_area_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        current_situation_in       IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        goals_in                   IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        methodology_in             IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        time_in                    IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        flg_time_unit_in           IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        id_prof_create_in          IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        create_user_in             IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_time_in             IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_time_in             IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) RETURN rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE IS
        l_pky    rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_rehab_epis_pl_area_h_in => l_pky,
            id_rehab_epis_plan_area_in => id_rehab_epis_plan_area_in,
            current_situation_in       => current_situation_in,
            goals_in                   => goals_in,
            methodology_in             => methodology_in,
            time_in                    => time_in,
            flg_time_unit_in           => flg_time_unit_in,
            id_prof_create_in          => id_prof_create_in,
            dt_rehab_epis_plan_area_in => dt_rehab_epis_plan_area_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        current_situation_in       IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        goals_in                   IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        methodology_in             IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        time_in                    IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        flg_time_unit_in           IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        id_prof_create_in          IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        create_user_in             IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_time_in             IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_time_in             IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE := next_key;
    BEGIN
        ins(id_rehab_epis_pl_area_h_in => l_pky,
            id_rehab_epis_plan_area_in => id_rehab_epis_plan_area_in,
            current_situation_in       => current_situation_in,
            goals_in                   => goals_in,
            methodology_in             => methodology_in,
            time_in                    => time_in,
            flg_time_unit_in           => flg_time_unit_in,
            id_prof_create_in          => id_prof_create_in,
            dt_rehab_epis_plan_area_in => dt_rehab_epis_plan_area_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        current_situation_in       IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        goals_in                   IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        methodology_in             IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        time_in                    IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        flg_time_unit_in           IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        id_prof_create_in          IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        create_user_in             IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_time_in             IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_time_in             IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        l_pky    rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_rehab_epis_pl_area_h_in => l_pky,
            id_rehab_epis_plan_area_in => id_rehab_epis_plan_area_in,
            current_situation_in       => current_situation_in,
            goals_in                   => goals_in,
            methodology_in             => methodology_in,
            time_in                    => time_in,
            flg_time_unit_in           => flg_time_unit_in,
            id_prof_create_in          => id_prof_create_in,
            dt_rehab_epis_plan_area_in => dt_rehab_epis_plan_area_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN rehab_epis_pl_area_h_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO rehab_epis_pl_area_h
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REHAB_EPIS_PL_AREA_H _' || indx,
                                                        value_in           => rows_in(indx).id_rehab_epis_pl_area_h,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REHAB_EPIS_PLAN_AREA _' || indx,
                                                        value_in           => rows_in(indx).id_rehab_epis_plan_area,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CURRENT_SITUATION _' || indx,
                                                        value_in           => rows_in(indx).current_situation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'GOALS _' || indx,
                                                        value_in           => rows_in(indx).goals,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'METHODOLOGY _' || indx,
                                                        value_in           => rows_in(indx).methodology,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TIME _' || indx,
                                                        value_in           => rows_in(indx).TIME,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TIME_UNIT _' || indx,
                                                        value_in           => rows_in(indx).flg_time_unit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CREATE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_create,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REHAB_EPIS_PLAN_AREA _' || indx,
                                                        value_in           => rows_in(indx).dt_rehab_epis_plan_area,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'REHAB_EPIS_PL_AREA_H',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN rehab_epis_pl_area_h_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_rehab_epis_pl_area_h_in  IN rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE,
        id_rehab_epis_plan_area_in  IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        id_rehab_epis_plan_area_nin IN BOOLEAN := TRUE,
        current_situation_in        IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        current_situation_nin       IN BOOLEAN := TRUE,
        goals_in                    IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        goals_nin                   IN BOOLEAN := TRUE,
        methodology_in              IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        methodology_nin             IN BOOLEAN := TRUE,
        time_in                     IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        time_nin                    IN BOOLEAN := TRUE,
        flg_time_unit_in            IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        flg_time_unit_nin           IN BOOLEAN := TRUE,
        id_prof_create_in           IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin          IN BOOLEAN := TRUE,
        dt_rehab_epis_plan_area_in  IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_nin IN BOOLEAN := TRUE,
        create_user_in              IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_rows_out                  table_varchar;
        l_id_rehab_epis_plan_area_n NUMBER(1);
        l_current_situation_n       NUMBER(1);
        l_goals_n                   NUMBER(1);
        l_methodology_n             NUMBER(1);
        l_time_n                    NUMBER(1);
        l_flg_time_unit_n           NUMBER(1);
        l_id_prof_create_n          NUMBER(1);
        l_dt_rehab_epis_plan_area_n NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
    BEGIN
    
        l_id_rehab_epis_plan_area_n := sys.diutil.bool_to_int(id_rehab_epis_plan_area_nin);
        l_current_situation_n       := sys.diutil.bool_to_int(current_situation_nin);
        l_goals_n                   := sys.diutil.bool_to_int(goals_nin);
        l_methodology_n             := sys.diutil.bool_to_int(methodology_nin);
        l_time_n                    := sys.diutil.bool_to_int(time_nin);
        l_flg_time_unit_n           := sys.diutil.bool_to_int(flg_time_unit_nin);
        l_id_prof_create_n          := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_rehab_epis_plan_area_n := sys.diutil.bool_to_int(dt_rehab_epis_plan_area_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE rehab_epis_pl_area_h
           SET id_rehab_epis_plan_area = decode(l_id_rehab_epis_plan_area_n,
                                                0,
                                                id_rehab_epis_plan_area_in,
                                                nvl(id_rehab_epis_plan_area_in, id_rehab_epis_plan_area)),
               current_situation       = decode(l_current_situation_n,
                                                0,
                                                current_situation_in,
                                                nvl(current_situation_in, current_situation)),
               goals                   = decode(l_goals_n, 0, goals_in, nvl(goals_in, goals)),
               methodology             = decode(l_methodology_n, 0, methodology_in, nvl(methodology_in, methodology)),
               TIME                    = decode(l_time_n, 0, time_in, nvl(time_in, TIME)),
               flg_time_unit           = decode(l_flg_time_unit_n,
                                                0,
                                                flg_time_unit_in,
                                                nvl(flg_time_unit_in, flg_time_unit)),
               id_prof_create          = decode(l_id_prof_create_n,
                                                0,
                                                id_prof_create_in,
                                                nvl(id_prof_create_in, id_prof_create)),
               dt_rehab_epis_plan_area = decode(l_dt_rehab_epis_plan_area_n,
                                                0,
                                                dt_rehab_epis_plan_area_in,
                                                nvl(dt_rehab_epis_plan_area_in, dt_rehab_epis_plan_area)),
               create_user             = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time             = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution      = decode(l_create_institution_n,
                                                0,
                                                create_institution_in,
                                                nvl(create_institution_in, create_institution)),
               update_user             = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time             = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution      = decode(l_update_institution_n,
                                                0,
                                                update_institution_in,
                                                nvl(update_institution_in, update_institution))
         WHERE id_rehab_epis_pl_area_h = id_rehab_epis_pl_area_h_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'REHAB_EPIS_PL_AREA_H');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    IF l_name = 'REPAHT_REA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REHAB_EPIS_PLAN_AREA',
                                                        value_in           => id_rehab_epis_plan_area_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_rehab_epis_pl_area_h_in  IN rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE,
        id_rehab_epis_plan_area_in  IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        id_rehab_epis_plan_area_nin IN BOOLEAN := TRUE,
        current_situation_in        IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        current_situation_nin       IN BOOLEAN := TRUE,
        goals_in                    IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        goals_nin                   IN BOOLEAN := TRUE,
        methodology_in              IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        methodology_nin             IN BOOLEAN := TRUE,
        time_in                     IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        time_nin                    IN BOOLEAN := TRUE,
        flg_time_unit_in            IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        flg_time_unit_nin           IN BOOLEAN := TRUE,
        id_prof_create_in           IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin          IN BOOLEAN := TRUE,
        dt_rehab_epis_plan_area_in  IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_nin IN BOOLEAN := TRUE,
        create_user_in              IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_rehab_epis_pl_area_h_in  => id_rehab_epis_pl_area_h_in,
            id_rehab_epis_plan_area_in  => id_rehab_epis_plan_area_in,
            id_rehab_epis_plan_area_nin => id_rehab_epis_plan_area_nin,
            current_situation_in        => current_situation_in,
            current_situation_nin       => current_situation_nin,
            goals_in                    => goals_in,
            goals_nin                   => goals_nin,
            methodology_in              => methodology_in,
            methodology_nin             => methodology_nin,
            time_in                     => time_in,
            time_nin                    => time_nin,
            flg_time_unit_in            => flg_time_unit_in,
            flg_time_unit_nin           => flg_time_unit_nin,
            id_prof_create_in           => id_prof_create_in,
            id_prof_create_nin          => id_prof_create_nin,
            dt_rehab_epis_plan_area_in  => dt_rehab_epis_plan_area_in,
            dt_rehab_epis_plan_area_nin => dt_rehab_epis_plan_area_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_rehab_epis_plan_area_in  IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        id_rehab_epis_plan_area_nin IN BOOLEAN := TRUE,
        current_situation_in        IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        current_situation_nin       IN BOOLEAN := TRUE,
        goals_in                    IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        goals_nin                   IN BOOLEAN := TRUE,
        methodology_in              IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        methodology_nin             IN BOOLEAN := TRUE,
        time_in                     IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        time_nin                    IN BOOLEAN := TRUE,
        flg_time_unit_in            IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        flg_time_unit_nin           IN BOOLEAN := TRUE,
        id_prof_create_in           IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin          IN BOOLEAN := TRUE,
        dt_rehab_epis_plan_area_in  IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_nin IN BOOLEAN := TRUE,
        create_user_in              IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        where_in                    VARCHAR2 DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_sql                       VARCHAR2(32767);
        l_rows_out                  table_varchar;
        l_id_rehab_epis_plan_area_n NUMBER(1);
        l_current_situation_n       NUMBER(1);
        l_goals_n                   NUMBER(1);
        l_methodology_n             NUMBER(1);
        l_time_n                    NUMBER(1);
        l_flg_time_unit_n           NUMBER(1);
        l_id_prof_create_n          NUMBER(1);
        l_dt_rehab_epis_plan_area_n NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
        id_rehab_epis_pl_area_h_in  rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE;
    BEGIN
    
        l_id_rehab_epis_plan_area_n := sys.diutil.bool_to_int(id_rehab_epis_plan_area_nin);
        l_current_situation_n       := sys.diutil.bool_to_int(current_situation_nin);
        l_goals_n                   := sys.diutil.bool_to_int(goals_nin);
        l_methodology_n             := sys.diutil.bool_to_int(methodology_nin);
        l_time_n                    := sys.diutil.bool_to_int(time_nin);
        l_flg_time_unit_n           := sys.diutil.bool_to_int(flg_time_unit_nin);
        l_id_prof_create_n          := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_rehab_epis_plan_area_n := sys.diutil.bool_to_int(dt_rehab_epis_plan_area_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE REHAB_EPIS_PL_AREA_H SET ' || ' ID_REHAB_EPIS_PLAN_AREA = decode (' ||
                 l_id_rehab_epis_plan_area_n ||
                 ',0,:id_rehab_epis_plan_area_in, NVL (:id_rehab_epis_plan_area_in, ID_REHAB_EPIS_PLAN_AREA)) ' || ',' ||
                 ' CURRENT_SITUATION = decode (' || l_current_situation_n ||
                 ',0,:current_situation_in, NVL (:current_situation_in, CURRENT_SITUATION)) ' || ',' ||
                 ' GOALS = decode (' || l_goals_n || ',0,:goals_in, NVL (:goals_in, GOALS)) ' || ',' ||
                 ' METHODOLOGY = decode (' || l_methodology_n ||
                 ',0,:methodology_in, NVL (:methodology_in, METHODOLOGY)) ' || ',' || ' TIME = decode (' || l_time_n ||
                 ',0,:time_in, NVL (:time_in, TIME)) ' || ',' || ' FLG_TIME_UNIT = decode (' || l_flg_time_unit_n ||
                 ',0,:flg_time_unit_in, NVL (:flg_time_unit_in, FLG_TIME_UNIT)) ' || ',' ||
                 ' ID_PROF_CREATE = decode (' || l_id_prof_create_n ||
                 ',0,:id_prof_create_in, NVL (:id_prof_create_in, ID_PROF_CREATE)) ' || ',' ||
                 ' DT_REHAB_EPIS_PLAN_AREA = decode (' || l_dt_rehab_epis_plan_area_n ||
                 ',0,:dt_rehab_epis_plan_area_in, NVL (:dt_rehab_epis_plan_area_in, DT_REHAB_EPIS_PLAN_AREA)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_rehab_epis_plan_area_in, current_situation_in, goals_in, methodology_in, time_in, flg_time_unit_in, id_prof_create_in, dt_rehab_epis_plan_area_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'REHAB_EPIS_PL_AREA_H');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    IF l_name = 'REPAHT_REA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REHAB_EPIS_PLAN_AREA',
                                                        value_in           => id_rehab_epis_plan_area_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_rehab_epis_plan_area_in  IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        id_rehab_epis_plan_area_nin IN BOOLEAN := TRUE,
        current_situation_in        IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        current_situation_nin       IN BOOLEAN := TRUE,
        goals_in                    IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        goals_nin                   IN BOOLEAN := TRUE,
        methodology_in              IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        methodology_nin             IN BOOLEAN := TRUE,
        time_in                     IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        time_nin                    IN BOOLEAN := TRUE,
        flg_time_unit_in            IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        flg_time_unit_nin           IN BOOLEAN := TRUE,
        id_prof_create_in           IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin          IN BOOLEAN := TRUE,
        dt_rehab_epis_plan_area_in  IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_nin IN BOOLEAN := TRUE,
        create_user_in              IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        where_in                    VARCHAR2 DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_rehab_epis_plan_area_in  => id_rehab_epis_plan_area_in,
            id_rehab_epis_plan_area_nin => id_rehab_epis_plan_area_nin,
            current_situation_in        => current_situation_in,
            current_situation_nin       => current_situation_nin,
            goals_in                    => goals_in,
            goals_nin                   => goals_nin,
            methodology_in              => methodology_in,
            methodology_nin             => methodology_nin,
            time_in                     => time_in,
            time_nin                    => time_nin,
            flg_time_unit_in            => flg_time_unit_in,
            flg_time_unit_nin           => flg_time_unit_nin,
            id_prof_create_in           => id_prof_create_in,
            id_prof_create_nin          => id_prof_create_nin,
            dt_rehab_epis_plan_area_in  => dt_rehab_epis_plan_area_in,
            dt_rehab_epis_plan_area_nin => dt_rehab_epis_plan_area_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            where_in                    => where_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN rehab_epis_pl_area_h%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_rehab_epis_pl_area_h_in => rec_in.id_rehab_epis_pl_area_h,
            id_rehab_epis_plan_area_in => rec_in.id_rehab_epis_plan_area,
            current_situation_in       => rec_in.current_situation,
            goals_in                   => rec_in.goals,
            methodology_in             => rec_in.methodology,
            time_in                    => rec_in.TIME,
            flg_time_unit_in           => rec_in.flg_time_unit,
            id_prof_create_in          => rec_in.id_prof_create,
            dt_rehab_epis_plan_area_in => rec_in.dt_rehab_epis_plan_area,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN rehab_epis_pl_area_h%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_rehab_epis_pl_area_h_in => rec_in.id_rehab_epis_pl_area_h,
            id_rehab_epis_plan_area_in => rec_in.id_rehab_epis_plan_area,
            current_situation_in       => rec_in.current_situation,
            goals_in                   => rec_in.goals,
            methodology_in             => rec_in.methodology,
            time_in                    => rec_in.TIME,
            flg_time_unit_in           => rec_in.flg_time_unit,
            id_prof_create_in          => rec_in.id_prof_create,
            dt_rehab_epis_plan_area_in => rec_in.dt_rehab_epis_plan_area,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_rehab_epis_pl_area_h_in IN rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE,
        id_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        current_situation_in       IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        goals_in                   IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        methodology_in             IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        time_in                    IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        flg_time_unit_in           IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        id_prof_create_in          IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        create_user_in             IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_time_in             IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_time_in             IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        upd(id_rehab_epis_pl_area_h_in => id_rehab_epis_pl_area_h_in,
            id_rehab_epis_plan_area_in => id_rehab_epis_plan_area_in,
            current_situation_in       => current_situation_in,
            goals_in                   => goals_in,
            methodology_in             => methodology_in,
            time_in                    => time_in,
            flg_time_unit_in           => flg_time_unit_in,
            id_prof_create_in          => id_prof_create_in,
            dt_rehab_epis_plan_area_in => dt_rehab_epis_plan_area_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_rehab_epis_pl_area_h_in => id_rehab_epis_pl_area_h_in,
                id_rehab_epis_plan_area_in => id_rehab_epis_plan_area_in,
                current_situation_in       => current_situation_in,
                goals_in                   => goals_in,
                methodology_in             => methodology_in,
                time_in                    => time_in,
                flg_time_unit_in           => flg_time_unit_in,
                id_prof_create_in          => id_prof_create_in,
                dt_rehab_epis_plan_area_in => dt_rehab_epis_plan_area_in,
                create_user_in             => create_user_in,
                create_time_in             => create_time_in,
                create_institution_in      => create_institution_in,
                update_user_in             => update_user_in,
                update_time_in             => update_time_in,
                update_institution_in      => update_institution_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_rehab_epis_pl_area_h_in IN rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE,
        id_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE DEFAULT NULL,
        current_situation_in       IN rehab_epis_pl_area_h.current_situation%TYPE DEFAULT NULL,
        goals_in                   IN rehab_epis_pl_area_h.goals%TYPE DEFAULT NULL,
        methodology_in             IN rehab_epis_pl_area_h.methodology%TYPE DEFAULT NULL,
        time_in                    IN rehab_epis_pl_area_h.TIME%TYPE DEFAULT NULL,
        flg_time_unit_in           IN rehab_epis_pl_area_h.flg_time_unit%TYPE DEFAULT NULL,
        id_prof_create_in          IN rehab_epis_pl_area_h.id_prof_create%TYPE DEFAULT NULL,
        dt_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.dt_rehab_epis_plan_area%TYPE DEFAULT NULL,
        create_user_in             IN rehab_epis_pl_area_h.create_user%TYPE DEFAULT NULL,
        create_time_in             IN rehab_epis_pl_area_h.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN rehab_epis_pl_area_h.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN rehab_epis_pl_area_h.update_user%TYPE DEFAULT NULL,
        update_time_in             IN rehab_epis_pl_area_h.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN rehab_epis_pl_area_h.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_rehab_epis_pl_area_h_in,
                id_rehab_epis_plan_area_in,
                current_situation_in,
                goals_in,
                methodology_in,
                time_in,
                flg_time_unit_in,
                id_prof_create_in,
                dt_rehab_epis_plan_area_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN rehab_epis_pl_area_h_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_rehab_epis_pl_area_h id_rehab_epis_pl_area_h_cc;
        l_id_rehab_epis_plan_area id_rehab_epis_plan_area_cc;
        l_current_situation       current_situation_cc;
        l_goals                   goals_cc;
        l_methodology             methodology_cc;
        l_time                    time_cc;
        l_flg_time_unit           flg_time_unit_cc;
        l_id_prof_create          id_prof_create_cc;
        l_dt_rehab_epis_plan_area dt_rehab_epis_plan_area_cc;
        l_create_user             create_user_cc;
        l_create_time             create_time_cc;
        l_create_institution      create_institution_cc;
        l_update_user             update_user_cc;
        l_update_time             update_time_cc;
        l_update_institution      update_institution_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_rehab_epis_pl_area_h(i) := col_in(i).id_rehab_epis_pl_area_h;
            l_id_rehab_epis_plan_area(i) := col_in(i).id_rehab_epis_plan_area;
            l_current_situation(i) := col_in(i).current_situation;
            l_goals(i) := col_in(i).goals;
            l_methodology(i) := col_in(i).methodology;
            l_time(i) := col_in(i).TIME;
            l_flg_time_unit(i) := col_in(i).flg_time_unit;
            l_id_prof_create(i) := col_in(i).id_prof_create;
            l_dt_rehab_epis_plan_area(i) := col_in(i).dt_rehab_epis_plan_area;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE rehab_epis_pl_area_h
                   SET id_rehab_epis_plan_area = nvl(l_id_rehab_epis_plan_area(i), id_rehab_epis_plan_area),
                       current_situation       = nvl(l_current_situation(i), current_situation),
                       goals                   = nvl(l_goals(i), goals),
                       methodology             = nvl(l_methodology(i), methodology),
                       TIME                    = nvl(l_time(i), TIME),
                       flg_time_unit           = nvl(l_flg_time_unit(i), flg_time_unit),
                       id_prof_create          = nvl(l_id_prof_create(i), id_prof_create),
                       dt_rehab_epis_plan_area = nvl(l_dt_rehab_epis_plan_area(i), dt_rehab_epis_plan_area),
                       create_user             = nvl(l_create_user(i), create_user),
                       create_time             = nvl(l_create_time(i), create_time),
                       create_institution      = nvl(l_create_institution(i), create_institution),
                       update_user             = nvl(l_update_user(i), update_user),
                       update_time             = nvl(l_update_time(i), update_time),
                       update_institution      = nvl(l_update_institution(i), update_institution)
                 WHERE id_rehab_epis_pl_area_h = l_id_rehab_epis_pl_area_h(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE rehab_epis_pl_area_h
                   SET id_rehab_epis_plan_area = l_id_rehab_epis_plan_area(i),
                       current_situation       = l_current_situation(i),
                       goals                   = l_goals(i),
                       methodology             = l_methodology(i),
                       TIME                    = l_time(i),
                       flg_time_unit           = l_flg_time_unit(i),
                       id_prof_create          = l_id_prof_create(i),
                       dt_rehab_epis_plan_area = l_dt_rehab_epis_plan_area(i),
                       create_user             = l_create_user(i),
                       create_time             = l_create_time(i),
                       create_institution      = l_create_institution(i),
                       update_user             = l_update_user(i),
                       update_time             = l_update_time(i),
                       update_institution      = l_update_institution(i)
                 WHERE id_rehab_epis_pl_area_h = l_id_rehab_epis_pl_area_h(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN rehab_epis_pl_area_h_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE REHAB_EPIS_PL_AREA_H
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE REHAB_EPIS_PL_AREA_H
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE REHAB_EPIS_PL_AREA_H set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE REHAB_EPIS_PL_AREA_H set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_rehab_epis_pl_area_h_in IN rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_epis_pl_area_h
         WHERE id_rehab_epis_pl_area_h = id_rehab_epis_pl_area_h_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_rehab_epis_pl_area_h_in IN rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_rehab_epis_pl_area_h_in => id_rehab_epis_pl_area_h_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_REHAB_EPIS_PL_AREA_H
    PROCEDURE del_id_rehab_epis_pl_area_h
    (
        id_rehab_epis_pl_area_h_in IN rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_epis_pl_area_h
         WHERE id_rehab_epis_pl_area_h = id_rehab_epis_pl_area_h_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_rehab_epis_pl_area_h;

    -- Delete all rows for primary key column ID_REHAB_EPIS_PL_AREA_H
    PROCEDURE del_id_rehab_epis_pl_area_h
    (
        id_rehab_epis_pl_area_h_in IN rehab_epis_pl_area_h.id_rehab_epis_pl_area_h%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_rehab_epis_pl_area_h(id_rehab_epis_pl_area_h_in => id_rehab_epis_pl_area_h_in,
                                    handle_error_in            => handle_error_in,
                                    rows_out                   => rows_out);
    END del_id_rehab_epis_pl_area_h;

    PROCEDURE del_repaht_rea_fk
    (
        id_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_epis_pl_area_h
         WHERE id_rehab_epis_plan_area = del_repaht_rea_fk.id_rehab_epis_plan_area_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_repaht_rea_fk;

    PROCEDURE del_repaht_rea_fk
    (
        id_rehab_epis_plan_area_in IN rehab_epis_pl_area_h.id_rehab_epis_plan_area%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_repaht_rea_fk(id_rehab_epis_plan_area_in => id_rehab_epis_plan_area_in,
                          handle_error_in            => handle_error_in,
                          rows_out                   => rows_out);
    END del_repaht_rea_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM REHAB_EPIS_PL_AREA_H';
        ELSE
            RETURN 'DELETE FROM REHAB_EPIS_PL_AREA_H WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_EPIS_PL_AREA_H');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_EPIS_PL_AREA_H');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(rehab_epis_pl_area_h_inout IN OUT rehab_epis_pl_area_h%ROWTYPE) IS
    BEGIN
        rehab_epis_pl_area_h_inout.id_rehab_epis_pl_area_h := NULL;
        rehab_epis_pl_area_h_inout.id_rehab_epis_plan_area := NULL;
        rehab_epis_pl_area_h_inout.current_situation       := NULL;
        rehab_epis_pl_area_h_inout.goals                   := NULL;
        rehab_epis_pl_area_h_inout.methodology             := NULL;
        rehab_epis_pl_area_h_inout.TIME                    := NULL;
        rehab_epis_pl_area_h_inout.flg_time_unit           := NULL;
        rehab_epis_pl_area_h_inout.id_prof_create          := NULL;
        rehab_epis_pl_area_h_inout.dt_rehab_epis_plan_area := NULL;
        rehab_epis_pl_area_h_inout.create_user             := NULL;
        rehab_epis_pl_area_h_inout.create_time             := NULL;
        rehab_epis_pl_area_h_inout.create_institution      := NULL;
        rehab_epis_pl_area_h_inout.update_user             := NULL;
        rehab_epis_pl_area_h_inout.update_time             := NULL;
        rehab_epis_pl_area_h_inout.update_institution      := NULL;
    END initrec;

    FUNCTION initrec RETURN rehab_epis_pl_area_h%ROWTYPE IS
        l_rehab_epis_pl_area_h rehab_epis_pl_area_h%ROWTYPE;
    BEGIN
        RETURN l_rehab_epis_pl_area_h;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN rehab_epis_pl_area_h_tc IS
        data rehab_epis_pl_area_h_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM rehab_epis_pl_area_h
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN rehab_epis_pl_area_h_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data rehab_epis_pl_area_h_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_rehab_epis_pl_area_h;
/
