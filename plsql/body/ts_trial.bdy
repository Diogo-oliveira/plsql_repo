/*-- Last Change Revision: $Rev: 1877368 $*/
/*-- Last Change by: $Author: adriano.ferreira $*/
/*-- Date of last change: $Date: 2018-11-12 15:39:19 +0000 (seg, 12 nov 2018) $*/

CREATE OR REPLACE PACKAGE BODY ts_trial
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Março 25, 2011 15:42:42
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_trial_in           IN trial.id_trial%TYPE,
        name_in               IN trial.name%TYPE DEFAULT NULL,
        code_in               IN trial.code%TYPE DEFAULT NULL,
        flg_status_in         IN trial.flg_status%TYPE DEFAULT NULL,
        dt_record_in          IN trial.dt_record%TYPE DEFAULT NULL,
        id_prof_record_in     IN trial.id_prof_record%TYPE DEFAULT NULL,
        responsible_in        IN trial.responsible%TYPE DEFAULT NULL,
        resp_contact_det_in   IN trial.resp_contact_det%TYPE DEFAULT NULL,
        notes_in              IN trial.notes%TYPE DEFAULT NULL,
        dt_start_in           IN trial.dt_start%TYPE DEFAULT NULL,
        dt_end_in             IN trial.dt_end%TYPE DEFAULT NULL,
        id_institution_in     IN trial.id_institution%TYPE DEFAULT NULL,
        flg_trial_type_in     IN trial.flg_trial_type%TYPE DEFAULT NULL,
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        create_user_in        IN trial.create_user%TYPE DEFAULT NULL,
        create_time_in        IN trial.create_time%TYPE DEFAULT NULL,
        create_institution_in IN trial.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN trial.update_user%TYPE DEFAULT NULL,
        update_time_in        IN trial.update_time%TYPE DEFAULT NULL,
        update_institution_in IN trial.update_institution%TYPE DEFAULT NULL,
        pharma_code_in        IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_name_in        IN trial.pharma_name%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO trial
            (id_trial,
             name,
             code,
             flg_status,
             dt_record,
             id_prof_record,
             responsible,
             resp_contact_det,
             notes,
             dt_start,
             dt_end,
             id_institution,
             flg_trial_type,
             id_cancel_info_det,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             pharma_code,
             pharma_name)
        VALUES
            (id_trial_in,
             name_in,
             code_in,
             flg_status_in,
             dt_record_in,
             id_prof_record_in,
             responsible_in,
             resp_contact_det_in,
             notes_in,
             dt_start_in,
             dt_end_in,
             id_institution_in,
             flg_trial_type_in,
             id_cancel_info_det_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             pharma_code_in,
             pharma_name_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'TRIAL');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    IF l_name = 'T_CID_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_INFO_DET',
                                                        value_in           => id_cancel_info_det_in);
                    END IF;
                    IF l_name = 'T_INN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'T_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_RECORD',
                                                        value_in           => id_prof_record_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_trial_in           IN trial.id_trial%TYPE,
        name_in               IN trial.name%TYPE DEFAULT NULL,
        code_in               IN trial.code%TYPE DEFAULT NULL,
        flg_status_in         IN trial.flg_status%TYPE DEFAULT NULL,
        dt_record_in          IN trial.dt_record%TYPE DEFAULT NULL,
        id_prof_record_in     IN trial.id_prof_record%TYPE DEFAULT NULL,
        responsible_in        IN trial.responsible%TYPE DEFAULT NULL,
        resp_contact_det_in   IN trial.resp_contact_det%TYPE DEFAULT NULL,
        notes_in              IN trial.notes%TYPE DEFAULT NULL,
        dt_start_in           IN trial.dt_start%TYPE DEFAULT NULL,
        dt_end_in             IN trial.dt_end%TYPE DEFAULT NULL,
        id_institution_in     IN trial.id_institution%TYPE DEFAULT NULL,
        flg_trial_type_in     IN trial.flg_trial_type%TYPE DEFAULT NULL,
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        create_user_in        IN trial.create_user%TYPE DEFAULT NULL,
        create_time_in        IN trial.create_time%TYPE DEFAULT NULL,
        create_institution_in IN trial.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN trial.update_user%TYPE DEFAULT NULL,
        update_time_in        IN trial.update_time%TYPE DEFAULT NULL,
        update_institution_in IN trial.update_institution%TYPE DEFAULT NULL,
        pharma_code_in        IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_name_in        IN trial.pharma_name%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_trial_in           => id_trial_in,
            name_in               => name_in,
            code_in               => code_in,
            flg_status_in         => flg_status_in,
            dt_record_in          => dt_record_in,
            id_prof_record_in     => id_prof_record_in,
            responsible_in        => responsible_in,
            resp_contact_det_in   => resp_contact_det_in,
            notes_in              => notes_in,
            dt_start_in           => dt_start_in,
            dt_end_in             => dt_end_in,
            id_institution_in     => id_institution_in,
            flg_trial_type_in     => flg_trial_type_in,
            id_cancel_info_det_in => id_cancel_info_det_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            pharma_code_in        => pharma_code_in,
            pharma_name_in        => pharma_name_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    /*
    START Special logic for handling LOB columns....
    */

    PROCEDURE n_ins_clobs_in_chunks
    (
        id_trial_in           IN trial.id_trial%TYPE,
        name_in               IN trial.name%TYPE DEFAULT NULL,
        code_in               IN trial.code%TYPE DEFAULT NULL,
        flg_status_in         IN trial.flg_status%TYPE DEFAULT NULL,
        dt_record_in          IN trial.dt_record%TYPE DEFAULT NULL,
        id_prof_record_in     IN trial.id_prof_record%TYPE DEFAULT NULL,
        responsible_in        IN trial.responsible%TYPE DEFAULT NULL,
        resp_contact_det_in   IN trial.resp_contact_det%TYPE DEFAULT NULL,
        dt_start_in           IN trial.dt_start%TYPE DEFAULT NULL,
        dt_end_in             IN trial.dt_end%TYPE DEFAULT NULL,
        id_institution_in     IN trial.id_institution%TYPE DEFAULT NULL,
        flg_trial_type_in     IN trial.flg_trial_type%TYPE DEFAULT NULL,
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        create_user_in        IN trial.create_user%TYPE DEFAULT NULL,
        create_time_in        IN trial.create_time%TYPE DEFAULT NULL,
        create_institution_in IN trial.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN trial.update_user%TYPE DEFAULT NULL,
        update_time_in        IN trial.update_time%TYPE DEFAULT NULL,
        update_institution_in IN trial.update_institution%TYPE DEFAULT NULL,
        pharma_code_in        IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_name_in        IN trial.pharma_name%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        clob_columns_in       IN varchar2_t,
        clob_pieces_in        IN varchar2_t
    ) IS
        l_notes        CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
    BEGIN
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'notes_in' THEN
                            IF l_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'notes_in' THEN
                        dbms_lob.writeappend(l_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        ins(id_trial_in           => id_trial_in,
            name_in               => name_in,
            code_in               => code_in,
            flg_status_in         => flg_status_in,
            dt_record_in          => dt_record_in,
            id_prof_record_in     => id_prof_record_in,
            responsible_in        => responsible_in,
            resp_contact_det_in   => resp_contact_det_in,
            notes_in              => l_notes,
            dt_start_in           => dt_start_in,
            dt_end_in             => dt_end_in,
            id_institution_in     => id_institution_in,
            flg_trial_type_in     => flg_trial_type_in,
            id_cancel_info_det_in => id_cancel_info_det_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            pharma_code_in        => pharma_code_in,
            pharma_name_in        => pharma_name_in,
            handle_error_in       => handle_error_in);
    
    END n_ins_clobs_in_chunks;

    PROCEDURE n_upd_clobs_in_chunks
    (
        id_trial_in           IN trial.id_trial%TYPE,
        name_in               IN trial.name%TYPE DEFAULT NULL,
        code_in               IN trial.code%TYPE DEFAULT NULL,
        flg_status_in         IN trial.flg_status%TYPE DEFAULT NULL,
        dt_record_in          IN trial.dt_record%TYPE DEFAULT NULL,
        id_prof_record_in     IN trial.id_prof_record%TYPE DEFAULT NULL,
        responsible_in        IN trial.responsible%TYPE DEFAULT NULL,
        resp_contact_det_in   IN trial.resp_contact_det%TYPE DEFAULT NULL,
        dt_start_in           IN trial.dt_start%TYPE DEFAULT NULL,
        dt_end_in             IN trial.dt_end%TYPE DEFAULT NULL,
        id_institution_in     IN trial.id_institution%TYPE DEFAULT NULL,
        flg_trial_type_in     IN trial.flg_trial_type%TYPE DEFAULT NULL,
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        create_user_in        IN trial.create_user%TYPE DEFAULT NULL,
        create_time_in        IN trial.create_time%TYPE DEFAULT NULL,
        create_institution_in IN trial.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN trial.update_user%TYPE DEFAULT NULL,
        update_time_in        IN trial.update_time%TYPE DEFAULT NULL,
        update_institution_in IN trial.update_institution%TYPE DEFAULT NULL,
        pharma_code_in        IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_name_in        IN trial.pharma_name%TYPE DEFAULT NULL,
        ignore_if_null_in     IN BOOLEAN := TRUE,
        handle_error_in       IN BOOLEAN := TRUE,
        clob_columns_in       IN varchar2_t,
        clob_pieces_in        IN varchar2_t
    ) IS
        l_notes        CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
        l_rows         PLS_INTEGER;
    BEGIN
    
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'notes_in' THEN
                            IF l_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'notes_in' THEN
                        dbms_lob.writeappend(l_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        upd(id_trial_in           => id_trial_in,
            name_in               => name_in,
            code_in               => code_in,
            flg_status_in         => flg_status_in,
            dt_record_in          => dt_record_in,
            id_prof_record_in     => id_prof_record_in,
            responsible_in        => responsible_in,
            resp_contact_det_in   => resp_contact_det_in,
            notes_in              => l_notes,
            dt_start_in           => dt_start_in,
            dt_end_in             => dt_end_in,
            id_institution_in     => id_institution_in,
            flg_trial_type_in     => flg_trial_type_in,
            id_cancel_info_det_in => id_cancel_info_det_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            pharma_code_in        => pharma_code_in,
            pharma_name_in        => pharma_name_in,
            handle_error_in       => handle_error_in);
    END n_upd_clobs_in_chunks;

    PROCEDURE n_upd_ins_clobs_in_chunks
    (
        id_trial_in           IN trial.id_trial%TYPE,
        name_in               IN trial.name%TYPE DEFAULT NULL,
        code_in               IN trial.code%TYPE DEFAULT NULL,
        flg_status_in         IN trial.flg_status%TYPE DEFAULT NULL,
        dt_record_in          IN trial.dt_record%TYPE DEFAULT NULL,
        id_prof_record_in     IN trial.id_prof_record%TYPE DEFAULT NULL,
        responsible_in        IN trial.responsible%TYPE DEFAULT NULL,
        resp_contact_det_in   IN trial.resp_contact_det%TYPE DEFAULT NULL,
        dt_start_in           IN trial.dt_start%TYPE DEFAULT NULL,
        dt_end_in             IN trial.dt_end%TYPE DEFAULT NULL,
        id_institution_in     IN trial.id_institution%TYPE DEFAULT NULL,
        flg_trial_type_in     IN trial.flg_trial_type%TYPE DEFAULT NULL,
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        create_user_in        IN trial.create_user%TYPE DEFAULT NULL,
        create_time_in        IN trial.create_time%TYPE DEFAULT NULL,
        create_institution_in IN trial.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN trial.update_user%TYPE DEFAULT NULL,
        update_time_in        IN trial.update_time%TYPE DEFAULT NULL,
        update_institution_in IN trial.update_institution%TYPE DEFAULT NULL,
        pharma_code_in        IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_name_in        IN trial.pharma_name%TYPE DEFAULT NULL,
        ignore_if_null_in     IN BOOLEAN DEFAULT TRUE,
        handle_error_in       IN BOOLEAN DEFAULT TRUE,
        clob_columns_in       IN varchar2_t,
        clob_pieces_in        IN varchar2_t
    ) IS
    BEGIN
        n_upd_clobs_in_chunks(id_trial_in           => id_trial_in,
                              name_in               => name_in,
                              code_in               => code_in,
                              flg_status_in         => flg_status_in,
                              dt_record_in          => dt_record_in,
                              id_prof_record_in     => id_prof_record_in,
                              responsible_in        => responsible_in,
                              resp_contact_det_in   => resp_contact_det_in,
                              dt_start_in           => dt_start_in,
                              dt_end_in             => dt_end_in,
                              id_institution_in     => id_institution_in,
                              flg_trial_type_in     => flg_trial_type_in,
                              id_cancel_info_det_in => id_cancel_info_det_in,
                              create_user_in        => create_user_in,
                              create_time_in        => create_time_in,
                              create_institution_in => create_institution_in,
                              update_user_in        => update_user_in,
                              update_time_in        => update_time_in,
                              update_institution_in => update_institution_in,
                              pharma_code_in        => pharma_code_in,
                              pharma_name_in        => pharma_name_in,
                              clob_columns_in       => clob_columns_in,
                              clob_pieces_in        => clob_pieces_in,
                              ignore_if_null_in     => ignore_if_null_in,
                              handle_error_in       => handle_error_in);
    
        IF SQL%ROWCOUNT = 0
        THEN
            n_ins_clobs_in_chunks(id_trial_in           => id_trial_in,
                                  name_in               => name_in,
                                  code_in               => code_in,
                                  flg_status_in         => flg_status_in,
                                  dt_record_in          => dt_record_in,
                                  id_prof_record_in     => id_prof_record_in,
                                  responsible_in        => responsible_in,
                                  resp_contact_det_in   => resp_contact_det_in,
                                  dt_start_in           => dt_start_in,
                                  dt_end_in             => dt_end_in,
                                  id_institution_in     => id_institution_in,
                                  flg_trial_type_in     => flg_trial_type_in,
                                  id_cancel_info_det_in => id_cancel_info_det_in,
                                  create_user_in        => create_user_in,
                                  create_time_in        => create_time_in,
                                  create_institution_in => create_institution_in,
                                  update_user_in        => update_user_in,
                                  update_time_in        => update_time_in,
                                  update_institution_in => update_institution_in,
                                  pharma_code_in        => pharma_code_in,
                                  pharma_name_in        => pharma_name_in,
                                  clob_columns_in       => clob_columns_in,
                                  clob_pieces_in        => clob_pieces_in,
                                  handle_error_in       => handle_error_in);
        END IF;
    END n_upd_ins_clobs_in_chunks;

    /*
    END Special logic for handling LOB columns.
    */

    PROCEDURE ins
    (
        rec_in          IN trial%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec trial%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_trial := next_key(sequence_in);
        END IF;
        ins(id_trial_in           => l_rec.id_trial,
            name_in               => l_rec.name,
            code_in               => l_rec.code,
            flg_status_in         => l_rec.flg_status,
            dt_record_in          => l_rec.dt_record,
            id_prof_record_in     => l_rec.id_prof_record,
            responsible_in        => l_rec.responsible,
            resp_contact_det_in   => l_rec.resp_contact_det,
            notes_in              => l_rec.notes,
            dt_start_in           => l_rec.dt_start,
            dt_end_in             => l_rec.dt_end,
            id_institution_in     => l_rec.id_institution,
            flg_trial_type_in     => l_rec.flg_trial_type,
            id_cancel_info_det_in => l_rec.id_cancel_info_det,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_time_in        => l_rec.update_time,
            update_institution_in => l_rec.update_institution,
            pharma_code_in        => l_rec.pharma_code,
            pharma_name_in        => l_rec.pharma_name,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN trial%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN trial.id_trial%TYPE
    
     IS
        retval trial.id_trial%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_trial.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_TRIAL'));
    END next_key;

    PROCEDURE ins
    (
        name_in               IN trial.name%TYPE DEFAULT NULL,
        code_in               IN trial.code%TYPE DEFAULT NULL,
        flg_status_in         IN trial.flg_status%TYPE DEFAULT NULL,
        dt_record_in          IN trial.dt_record%TYPE DEFAULT NULL,
        id_prof_record_in     IN trial.id_prof_record%TYPE DEFAULT NULL,
        responsible_in        IN trial.responsible%TYPE DEFAULT NULL,
        resp_contact_det_in   IN trial.resp_contact_det%TYPE DEFAULT NULL,
        notes_in              IN trial.notes%TYPE DEFAULT NULL,
        dt_start_in           IN trial.dt_start%TYPE DEFAULT NULL,
        dt_end_in             IN trial.dt_end%TYPE DEFAULT NULL,
        id_institution_in     IN trial.id_institution%TYPE DEFAULT NULL,
        flg_trial_type_in     IN trial.flg_trial_type%TYPE DEFAULT NULL,
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        create_user_in        IN trial.create_user%TYPE DEFAULT NULL,
        create_time_in        IN trial.create_time%TYPE DEFAULT NULL,
        create_institution_in IN trial.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN trial.update_user%TYPE DEFAULT NULL,
        update_time_in        IN trial.update_time%TYPE DEFAULT NULL,
        update_institution_in IN trial.update_institution%TYPE DEFAULT NULL,
        pharma_code_in        IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_name_in        IN trial.pharma_name%TYPE DEFAULT NULL,
        id_trial_out          IN OUT trial.id_trial%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky trial.id_trial%TYPE := next_key;
    BEGIN
        ins(id_trial_in           => l_pky,
            name_in               => name_in,
            code_in               => code_in,
            flg_status_in         => flg_status_in,
            dt_record_in          => dt_record_in,
            id_prof_record_in     => id_prof_record_in,
            responsible_in        => responsible_in,
            resp_contact_det_in   => resp_contact_det_in,
            notes_in              => notes_in,
            dt_start_in           => dt_start_in,
            dt_end_in             => dt_end_in,
            id_institution_in     => id_institution_in,
            flg_trial_type_in     => flg_trial_type_in,
            id_cancel_info_det_in => id_cancel_info_det_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            pharma_code_in        => pharma_code_in,
            pharma_name_in        => pharma_name_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        id_trial_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        name_in               IN trial.name%TYPE DEFAULT NULL,
        code_in               IN trial.code%TYPE DEFAULT NULL,
        flg_status_in         IN trial.flg_status%TYPE DEFAULT NULL,
        dt_record_in          IN trial.dt_record%TYPE DEFAULT NULL,
        id_prof_record_in     IN trial.id_prof_record%TYPE DEFAULT NULL,
        responsible_in        IN trial.responsible%TYPE DEFAULT NULL,
        resp_contact_det_in   IN trial.resp_contact_det%TYPE DEFAULT NULL,
        notes_in              IN trial.notes%TYPE DEFAULT NULL,
        dt_start_in           IN trial.dt_start%TYPE DEFAULT NULL,
        dt_end_in             IN trial.dt_end%TYPE DEFAULT NULL,
        id_institution_in     IN trial.id_institution%TYPE DEFAULT NULL,
        flg_trial_type_in     IN trial.flg_trial_type%TYPE DEFAULT NULL,
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        create_user_in        IN trial.create_user%TYPE DEFAULT NULL,
        create_time_in        IN trial.create_time%TYPE DEFAULT NULL,
        create_institution_in IN trial.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN trial.update_user%TYPE DEFAULT NULL,
        update_time_in        IN trial.update_time%TYPE DEFAULT NULL,
        update_institution_in IN trial.update_institution%TYPE DEFAULT NULL,
        pharma_code_in        IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_name_in        IN trial.pharma_name%TYPE DEFAULT NULL,
        id_trial_out          IN OUT trial.id_trial%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(name_in               => name_in,
            code_in               => code_in,
            flg_status_in         => flg_status_in,
            dt_record_in          => dt_record_in,
            id_prof_record_in     => id_prof_record_in,
            responsible_in        => responsible_in,
            resp_contact_det_in   => resp_contact_det_in,
            notes_in              => notes_in,
            dt_start_in           => dt_start_in,
            dt_end_in             => dt_end_in,
            id_institution_in     => id_institution_in,
            flg_trial_type_in     => flg_trial_type_in,
            id_cancel_info_det_in => id_cancel_info_det_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            pharma_code_in        => pharma_code_in,
            pharma_name_in        => pharma_name_in,
            id_trial_out          => id_trial_out,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    FUNCTION ins
    (
        name_in               IN trial.name%TYPE DEFAULT NULL,
        code_in               IN trial.code%TYPE DEFAULT NULL,
        flg_status_in         IN trial.flg_status%TYPE DEFAULT NULL,
        dt_record_in          IN trial.dt_record%TYPE DEFAULT NULL,
        id_prof_record_in     IN trial.id_prof_record%TYPE DEFAULT NULL,
        responsible_in        IN trial.responsible%TYPE DEFAULT NULL,
        resp_contact_det_in   IN trial.resp_contact_det%TYPE DEFAULT NULL,
        notes_in              IN trial.notes%TYPE DEFAULT NULL,
        dt_start_in           IN trial.dt_start%TYPE DEFAULT NULL,
        dt_end_in             IN trial.dt_end%TYPE DEFAULT NULL,
        id_institution_in     IN trial.id_institution%TYPE DEFAULT NULL,
        flg_trial_type_in     IN trial.flg_trial_type%TYPE DEFAULT NULL,
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        create_user_in        IN trial.create_user%TYPE DEFAULT NULL,
        create_time_in        IN trial.create_time%TYPE DEFAULT NULL,
        create_institution_in IN trial.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN trial.update_user%TYPE DEFAULT NULL,
        update_time_in        IN trial.update_time%TYPE DEFAULT NULL,
        update_institution_in IN trial.update_institution%TYPE DEFAULT NULL,
        pharma_code_in        IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_name_in        IN trial.pharma_name%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) RETURN trial.id_trial%TYPE IS
        l_pky trial.id_trial%TYPE := next_key;
    BEGIN
        ins(id_trial_in           => l_pky,
            name_in               => name_in,
            code_in               => code_in,
            flg_status_in         => flg_status_in,
            dt_record_in          => dt_record_in,
            id_prof_record_in     => id_prof_record_in,
            responsible_in        => responsible_in,
            resp_contact_det_in   => resp_contact_det_in,
            notes_in              => notes_in,
            dt_start_in           => dt_start_in,
            dt_end_in             => dt_end_in,
            id_institution_in     => id_institution_in,
            flg_trial_type_in     => flg_trial_type_in,
            id_cancel_info_det_in => id_cancel_info_det_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            pharma_code_in        => pharma_code_in,
            pharma_name_in        => pharma_name_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        name_in               IN trial.name%TYPE DEFAULT NULL,
        code_in               IN trial.code%TYPE DEFAULT NULL,
        flg_status_in         IN trial.flg_status%TYPE DEFAULT NULL,
        dt_record_in          IN trial.dt_record%TYPE DEFAULT NULL,
        id_prof_record_in     IN trial.id_prof_record%TYPE DEFAULT NULL,
        responsible_in        IN trial.responsible%TYPE DEFAULT NULL,
        resp_contact_det_in   IN trial.resp_contact_det%TYPE DEFAULT NULL,
        notes_in              IN trial.notes%TYPE DEFAULT NULL,
        dt_start_in           IN trial.dt_start%TYPE DEFAULT NULL,
        dt_end_in             IN trial.dt_end%TYPE DEFAULT NULL,
        id_institution_in     IN trial.id_institution%TYPE DEFAULT NULL,
        flg_trial_type_in     IN trial.flg_trial_type%TYPE DEFAULT NULL,
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        create_user_in        IN trial.create_user%TYPE DEFAULT NULL,
        create_time_in        IN trial.create_time%TYPE DEFAULT NULL,
        create_institution_in IN trial.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN trial.update_user%TYPE DEFAULT NULL,
        update_time_in        IN trial.update_time%TYPE DEFAULT NULL,
        update_institution_in IN trial.update_institution%TYPE DEFAULT NULL,
        pharma_code_in        IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_name_in        IN trial.pharma_name%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) RETURN trial.id_trial%TYPE IS
        l_pky    trial.id_trial%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_trial_in           => l_pky,
            name_in               => name_in,
            code_in               => code_in,
            flg_status_in         => flg_status_in,
            dt_record_in          => dt_record_in,
            id_prof_record_in     => id_prof_record_in,
            responsible_in        => responsible_in,
            resp_contact_det_in   => resp_contact_det_in,
            notes_in              => notes_in,
            dt_start_in           => dt_start_in,
            dt_end_in             => dt_end_in,
            id_institution_in     => id_institution_in,
            flg_trial_type_in     => flg_trial_type_in,
            id_cancel_info_det_in => id_cancel_info_det_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            pharma_code_in        => pharma_code_in,
            pharma_name_in        => pharma_name_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        name_in               IN trial.name%TYPE DEFAULT NULL,
        code_in               IN trial.code%TYPE DEFAULT NULL,
        flg_status_in         IN trial.flg_status%TYPE DEFAULT NULL,
        dt_record_in          IN trial.dt_record%TYPE DEFAULT NULL,
        id_prof_record_in     IN trial.id_prof_record%TYPE DEFAULT NULL,
        responsible_in        IN trial.responsible%TYPE DEFAULT NULL,
        resp_contact_det_in   IN trial.resp_contact_det%TYPE DEFAULT NULL,
        notes_in              IN trial.notes%TYPE DEFAULT NULL,
        dt_start_in           IN trial.dt_start%TYPE DEFAULT NULL,
        dt_end_in             IN trial.dt_end%TYPE DEFAULT NULL,
        id_institution_in     IN trial.id_institution%TYPE DEFAULT NULL,
        flg_trial_type_in     IN trial.flg_trial_type%TYPE DEFAULT NULL,
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        create_user_in        IN trial.create_user%TYPE DEFAULT NULL,
        create_time_in        IN trial.create_time%TYPE DEFAULT NULL,
        create_institution_in IN trial.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN trial.update_user%TYPE DEFAULT NULL,
        update_time_in        IN trial.update_time%TYPE DEFAULT NULL,
        update_institution_in IN trial.update_institution%TYPE DEFAULT NULL,
        pharma_code_in        IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_name_in        IN trial.pharma_name%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky trial.id_trial%TYPE := next_key;
    BEGIN
        ins(id_trial_in           => l_pky,
            name_in               => name_in,
            code_in               => code_in,
            flg_status_in         => flg_status_in,
            dt_record_in          => dt_record_in,
            id_prof_record_in     => id_prof_record_in,
            responsible_in        => responsible_in,
            resp_contact_det_in   => resp_contact_det_in,
            notes_in              => notes_in,
            dt_start_in           => dt_start_in,
            dt_end_in             => dt_end_in,
            id_institution_in     => id_institution_in,
            flg_trial_type_in     => flg_trial_type_in,
            id_cancel_info_det_in => id_cancel_info_det_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            pharma_code_in        => pharma_code_in,
            pharma_name_in        => pharma_name_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        name_in               IN trial.name%TYPE DEFAULT NULL,
        code_in               IN trial.code%TYPE DEFAULT NULL,
        flg_status_in         IN trial.flg_status%TYPE DEFAULT NULL,
        dt_record_in          IN trial.dt_record%TYPE DEFAULT NULL,
        id_prof_record_in     IN trial.id_prof_record%TYPE DEFAULT NULL,
        responsible_in        IN trial.responsible%TYPE DEFAULT NULL,
        resp_contact_det_in   IN trial.resp_contact_det%TYPE DEFAULT NULL,
        notes_in              IN trial.notes%TYPE DEFAULT NULL,
        dt_start_in           IN trial.dt_start%TYPE DEFAULT NULL,
        dt_end_in             IN trial.dt_end%TYPE DEFAULT NULL,
        id_institution_in     IN trial.id_institution%TYPE DEFAULT NULL,
        flg_trial_type_in     IN trial.flg_trial_type%TYPE DEFAULT NULL,
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        create_user_in        IN trial.create_user%TYPE DEFAULT NULL,
        create_time_in        IN trial.create_time%TYPE DEFAULT NULL,
        create_institution_in IN trial.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN trial.update_user%TYPE DEFAULT NULL,
        update_time_in        IN trial.update_time%TYPE DEFAULT NULL,
        update_institution_in IN trial.update_institution%TYPE DEFAULT NULL,
        pharma_code_in        IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_name_in        IN trial.pharma_name%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        l_pky    trial.id_trial%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_trial_in           => l_pky,
            name_in               => name_in,
            code_in               => code_in,
            flg_status_in         => flg_status_in,
            dt_record_in          => dt_record_in,
            id_prof_record_in     => id_prof_record_in,
            responsible_in        => responsible_in,
            resp_contact_det_in   => resp_contact_det_in,
            notes_in              => notes_in,
            dt_start_in           => dt_start_in,
            dt_end_in             => dt_end_in,
            id_institution_in     => id_institution_in,
            flg_trial_type_in     => flg_trial_type_in,
            id_cancel_info_det_in => id_cancel_info_det_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            pharma_code_in        => pharma_code_in,
            pharma_name_in        => pharma_name_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN trial_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO trial
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TRIAL _' || indx,
                                                        value_in           => rows_in(indx).id_trial,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NAME _' || indx,
                                                        value_in           => rows_in(indx).name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CODE _' || indx,
                                                        value_in           => rows_in(indx).code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_RECORD _' || indx,
                                                        value_in           => rows_in(indx).dt_record,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_RECORD _' || indx,
                                                        value_in           => rows_in(indx).id_prof_record,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RESPONSIBLE _' || indx,
                                                        value_in           => rows_in(indx).responsible,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RESP_CONTACT_DET _' || indx,
                                                        value_in           => rows_in(indx).resp_contact_det,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_START _' || indx,
                                                        value_in           => rows_in(indx).dt_start,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_END _' || indx,
                                                        value_in           => rows_in(indx).dt_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TRIAL_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_trial_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_INFO_DET _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_info_det,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PHARMA_CODE _' || indx,
                                                        value_in           => rows_in(indx).pharma_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PHARMA_NAME _' || indx,
                                                        value_in           => rows_in(indx).pharma_name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'TRIAL',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN trial_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_trial_in            IN trial.id_trial%TYPE,
        name_in                IN trial.name%TYPE DEFAULT NULL,
        name_nin               IN BOOLEAN := TRUE,
        code_in                IN trial.code%TYPE DEFAULT NULL,
        code_nin               IN BOOLEAN := TRUE,
        flg_status_in          IN trial.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        dt_record_in           IN trial.dt_record%TYPE DEFAULT NULL,
        dt_record_nin          IN BOOLEAN := TRUE,
        id_prof_record_in      IN trial.id_prof_record%TYPE DEFAULT NULL,
        id_prof_record_nin     IN BOOLEAN := TRUE,
        responsible_in         IN trial.responsible%TYPE DEFAULT NULL,
        responsible_nin        IN BOOLEAN := TRUE,
        resp_contact_det_in    IN trial.resp_contact_det%TYPE DEFAULT NULL,
        resp_contact_det_nin   IN BOOLEAN := TRUE,
        notes_in               IN trial.notes%TYPE DEFAULT NULL,
        notes_nin              IN BOOLEAN := TRUE,
        dt_start_in            IN trial.dt_start%TYPE DEFAULT NULL,
        dt_start_nin           IN BOOLEAN := TRUE,
        dt_end_in              IN trial.dt_end%TYPE DEFAULT NULL,
        dt_end_nin             IN BOOLEAN := TRUE,
        id_institution_in      IN trial.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        flg_trial_type_in      IN trial.flg_trial_type%TYPE DEFAULT NULL,
        flg_trial_type_nin     IN BOOLEAN := TRUE,
        id_cancel_info_det_in  IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        id_cancel_info_det_nin IN BOOLEAN := TRUE,
        create_user_in         IN trial.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN trial.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN trial.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN trial.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN trial.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN trial.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        pharma_code_in         IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_code_nin        IN BOOLEAN := TRUE,
        pharma_name_in         IN trial.pharma_name%TYPE DEFAULT NULL,
        pharma_name_nin        IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_name_n               NUMBER(1);
        l_code_n               NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_dt_record_n          NUMBER(1);
        l_id_prof_record_n     NUMBER(1);
        l_responsible_n        NUMBER(1);
        l_resp_contact_det_n   NUMBER(1);
        l_notes_n              NUMBER(1);
        l_dt_start_n           NUMBER(1);
        l_dt_end_n             NUMBER(1);
        l_id_institution_n     NUMBER(1);
        l_flg_trial_type_n     NUMBER(1);
        l_id_cancel_info_det_n NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        l_pharma_code_n        NUMBER(1);
        l_pharma_name_n        NUMBER(1);
    BEGIN
    
        l_name_n               := sys.diutil.bool_to_int(name_nin);
        l_code_n               := sys.diutil.bool_to_int(code_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_record_n          := sys.diutil.bool_to_int(dt_record_nin);
        l_id_prof_record_n     := sys.diutil.bool_to_int(id_prof_record_nin);
        l_responsible_n        := sys.diutil.bool_to_int(responsible_nin);
        l_resp_contact_det_n   := sys.diutil.bool_to_int(resp_contact_det_nin);
        l_notes_n              := sys.diutil.bool_to_int(notes_nin);
        l_dt_start_n           := sys.diutil.bool_to_int(dt_start_nin);
        l_dt_end_n             := sys.diutil.bool_to_int(dt_end_nin);
        l_id_institution_n     := sys.diutil.bool_to_int(id_institution_nin);
        l_flg_trial_type_n     := sys.diutil.bool_to_int(flg_trial_type_nin);
        l_id_cancel_info_det_n := sys.diutil.bool_to_int(id_cancel_info_det_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_pharma_code_n        := sys.diutil.bool_to_int(pharma_code_nin);
        l_pharma_name_n        := sys.diutil.bool_to_int(pharma_name_nin);
    
        UPDATE trial
           SET name               = decode(l_name_n, 0, name_in, nvl(name_in, name)),
               code               = decode(l_code_n, 0, code_in, nvl(code_in, code)),
               flg_status         = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               dt_record          = decode(l_dt_record_n, 0, dt_record_in, nvl(dt_record_in, dt_record)),
               id_prof_record     = decode(l_id_prof_record_n,
                                           0,
                                           id_prof_record_in,
                                           nvl(id_prof_record_in, id_prof_record)),
               responsible        = decode(l_responsible_n, 0, responsible_in, nvl(responsible_in, responsible)),
               resp_contact_det   = decode(l_resp_contact_det_n,
                                           0,
                                           resp_contact_det_in,
                                           nvl(resp_contact_det_in, resp_contact_det)),
               notes              = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               dt_start           = decode(l_dt_start_n, 0, dt_start_in, nvl(dt_start_in, dt_start)),
               dt_end             = decode(l_dt_end_n, 0, dt_end_in, nvl(dt_end_in, dt_end)),
               id_institution     = decode(l_id_institution_n,
                                           0,
                                           id_institution_in,
                                           nvl(id_institution_in, id_institution)),
               flg_trial_type     = decode(l_flg_trial_type_n,
                                           0,
                                           flg_trial_type_in,
                                           nvl(flg_trial_type_in, flg_trial_type)),
               id_cancel_info_det = decode(l_id_cancel_info_det_n,
                                           0,
                                           id_cancel_info_det_in,
                                           nvl(id_cancel_info_det_in, id_cancel_info_det)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution)),
               pharma_code        = decode(l_pharma_code_n, 0, pharma_code_in, nvl(pharma_code_in, pharma_code)),
               pharma_name        = decode(l_pharma_name_n, 0, pharma_name_in, nvl(pharma_name_in, pharma_name))
         WHERE id_trial = id_trial_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'TRIAL');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    IF l_name = 'T_CID_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_INFO_DET',
                                                        value_in           => id_cancel_info_det_in);
                    END IF;
                    IF l_name = 'T_INN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'T_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_RECORD',
                                                        value_in           => id_prof_record_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_trial_in            IN trial.id_trial%TYPE,
        name_in                IN trial.name%TYPE DEFAULT NULL,
        name_nin               IN BOOLEAN := TRUE,
        code_in                IN trial.code%TYPE DEFAULT NULL,
        code_nin               IN BOOLEAN := TRUE,
        flg_status_in          IN trial.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        dt_record_in           IN trial.dt_record%TYPE DEFAULT NULL,
        dt_record_nin          IN BOOLEAN := TRUE,
        id_prof_record_in      IN trial.id_prof_record%TYPE DEFAULT NULL,
        id_prof_record_nin     IN BOOLEAN := TRUE,
        responsible_in         IN trial.responsible%TYPE DEFAULT NULL,
        responsible_nin        IN BOOLEAN := TRUE,
        resp_contact_det_in    IN trial.resp_contact_det%TYPE DEFAULT NULL,
        resp_contact_det_nin   IN BOOLEAN := TRUE,
        notes_in               IN trial.notes%TYPE DEFAULT NULL,
        notes_nin              IN BOOLEAN := TRUE,
        dt_start_in            IN trial.dt_start%TYPE DEFAULT NULL,
        dt_start_nin           IN BOOLEAN := TRUE,
        dt_end_in              IN trial.dt_end%TYPE DEFAULT NULL,
        dt_end_nin             IN BOOLEAN := TRUE,
        id_institution_in      IN trial.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        flg_trial_type_in      IN trial.flg_trial_type%TYPE DEFAULT NULL,
        flg_trial_type_nin     IN BOOLEAN := TRUE,
        id_cancel_info_det_in  IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        id_cancel_info_det_nin IN BOOLEAN := TRUE,
        create_user_in         IN trial.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN trial.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN trial.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN trial.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN trial.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN trial.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        pharma_code_in         IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_code_nin        IN BOOLEAN := TRUE,
        pharma_name_in         IN trial.pharma_name%TYPE DEFAULT NULL,
        pharma_name_nin        IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_trial_in            => id_trial_in,
            name_in                => name_in,
            name_nin               => name_nin,
            code_in                => code_in,
            code_nin               => code_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            dt_record_in           => dt_record_in,
            dt_record_nin          => dt_record_nin,
            id_prof_record_in      => id_prof_record_in,
            id_prof_record_nin     => id_prof_record_nin,
            responsible_in         => responsible_in,
            responsible_nin        => responsible_nin,
            resp_contact_det_in    => resp_contact_det_in,
            resp_contact_det_nin   => resp_contact_det_nin,
            notes_in               => notes_in,
            notes_nin              => notes_nin,
            dt_start_in            => dt_start_in,
            dt_start_nin           => dt_start_nin,
            dt_end_in              => dt_end_in,
            dt_end_nin             => dt_end_nin,
            id_institution_in      => id_institution_in,
            id_institution_nin     => id_institution_nin,
            flg_trial_type_in      => flg_trial_type_in,
            flg_trial_type_nin     => flg_trial_type_nin,
            id_cancel_info_det_in  => id_cancel_info_det_in,
            id_cancel_info_det_nin => id_cancel_info_det_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            pharma_code_in         => pharma_code_in,
            pharma_code_nin        => pharma_code_nin,
            pharma_name_in         => pharma_name_in,
            pharma_name_nin        => pharma_name_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        name_in                IN trial.name%TYPE DEFAULT NULL,
        name_nin               IN BOOLEAN := TRUE,
        code_in                IN trial.code%TYPE DEFAULT NULL,
        code_nin               IN BOOLEAN := TRUE,
        flg_status_in          IN trial.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        dt_record_in           IN trial.dt_record%TYPE DEFAULT NULL,
        dt_record_nin          IN BOOLEAN := TRUE,
        id_prof_record_in      IN trial.id_prof_record%TYPE DEFAULT NULL,
        id_prof_record_nin     IN BOOLEAN := TRUE,
        responsible_in         IN trial.responsible%TYPE DEFAULT NULL,
        responsible_nin        IN BOOLEAN := TRUE,
        resp_contact_det_in    IN trial.resp_contact_det%TYPE DEFAULT NULL,
        resp_contact_det_nin   IN BOOLEAN := TRUE,
        notes_in               IN trial.notes%TYPE DEFAULT NULL,
        notes_nin              IN BOOLEAN := TRUE,
        dt_start_in            IN trial.dt_start%TYPE DEFAULT NULL,
        dt_start_nin           IN BOOLEAN := TRUE,
        dt_end_in              IN trial.dt_end%TYPE DEFAULT NULL,
        dt_end_nin             IN BOOLEAN := TRUE,
        id_institution_in      IN trial.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        flg_trial_type_in      IN trial.flg_trial_type%TYPE DEFAULT NULL,
        flg_trial_type_nin     IN BOOLEAN := TRUE,
        id_cancel_info_det_in  IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        id_cancel_info_det_nin IN BOOLEAN := TRUE,
        create_user_in         IN trial.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN trial.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN trial.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN trial.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN trial.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN trial.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        pharma_code_in         IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_code_nin        IN BOOLEAN := TRUE,
        pharma_name_in         IN trial.pharma_name%TYPE DEFAULT NULL,
        pharma_name_nin        IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_name_n               NUMBER(1);
        l_code_n               NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_dt_record_n          NUMBER(1);
        l_id_prof_record_n     NUMBER(1);
        l_responsible_n        NUMBER(1);
        l_resp_contact_det_n   NUMBER(1);
        l_notes_n              NUMBER(1);
        l_dt_start_n           NUMBER(1);
        l_dt_end_n             NUMBER(1);
        l_id_institution_n     NUMBER(1);
        l_flg_trial_type_n     NUMBER(1);
        l_id_cancel_info_det_n NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        l_pharma_code_n        NUMBER(1);
        l_pharma_name_n        NUMBER(1);
        id_trial_in            trial.id_trial%TYPE;
    BEGIN
    
        l_name_n               := sys.diutil.bool_to_int(name_nin);
        l_code_n               := sys.diutil.bool_to_int(code_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_record_n          := sys.diutil.bool_to_int(dt_record_nin);
        l_id_prof_record_n     := sys.diutil.bool_to_int(id_prof_record_nin);
        l_responsible_n        := sys.diutil.bool_to_int(responsible_nin);
        l_resp_contact_det_n   := sys.diutil.bool_to_int(resp_contact_det_nin);
        l_notes_n              := sys.diutil.bool_to_int(notes_nin);
        l_dt_start_n           := sys.diutil.bool_to_int(dt_start_nin);
        l_dt_end_n             := sys.diutil.bool_to_int(dt_end_nin);
        l_id_institution_n     := sys.diutil.bool_to_int(id_institution_nin);
        l_flg_trial_type_n     := sys.diutil.bool_to_int(flg_trial_type_nin);
        l_id_cancel_info_det_n := sys.diutil.bool_to_int(id_cancel_info_det_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_pharma_code_n        := sys.diutil.bool_to_int(pharma_code_nin);
        l_pharma_name_n        := sys.diutil.bool_to_int(pharma_name_nin);
    
        l_sql := 'UPDATE TRIAL SET ' || ' NAME = decode (' || l_name_n || ',0,:name_in, NVL (:name_in, NAME)) ' || ',' ||
                 ' CODE = decode (' || l_code_n || ',0,:code_in, NVL (:code_in, CODE)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' DT_RECORD = decode (' || l_dt_record_n || ',0,:dt_record_in, NVL (:dt_record_in, DT_RECORD)) ' || ',' ||
                 ' ID_PROF_RECORD = decode (' || l_id_prof_record_n ||
                 ',0,:id_prof_record_in, NVL (:id_prof_record_in, ID_PROF_RECORD)) ' || ',' ||
                 ' RESPONSIBLE = decode (' || l_responsible_n ||
                 ',0,:responsible_in, NVL (:responsible_in, RESPONSIBLE)) ' || ',' || ' RESP_CONTACT_DET = decode (' ||
                 l_resp_contact_det_n || ',0,:resp_contact_det_in, NVL (:resp_contact_det_in, RESP_CONTACT_DET)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' DT_START = decode (' || l_dt_start_n || ',0,:dt_start_in, NVL (:dt_start_in, DT_START)) ' || ',' ||
                 ' DT_END = decode (' || l_dt_end_n || ',0,:dt_end_in, NVL (:dt_end_in, DT_END)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' FLG_TRIAL_TYPE = decode (' || l_flg_trial_type_n ||
                 ',0,:flg_trial_type_in, NVL (:flg_trial_type_in, FLG_TRIAL_TYPE)) ' || ',' ||
                 ' ID_CANCEL_INFO_DET = decode (' || l_id_cancel_info_det_n ||
                 ',0,:id_cancel_info_det_in, NVL (:id_cancel_info_det_in, ID_CANCEL_INFO_DET)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' PHARMA_CODE = decode (' || l_pharma_code_n ||
                 ',0,:pharma_code_in, NVL (:pharma_code_in, PHARMA_CODE)) ' || ',' || ' PHARMA_NAME = decode (' ||
                 l_pharma_name_n || ',0,:pharma_name_in, NVL (:pharma_name_in, PHARMA_NAME)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN name_in, code_in, flg_status_in, dt_record_in, id_prof_record_in, responsible_in, resp_contact_det_in, notes_in, dt_start_in, dt_end_in, id_institution_in, flg_trial_type_in, id_cancel_info_det_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, pharma_code_in, pharma_name_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'TRIAL');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    IF l_name = 'T_CID_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_INFO_DET',
                                                        value_in           => id_cancel_info_det_in);
                    END IF;
                    IF l_name = 'T_INN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'T_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_RECORD',
                                                        value_in           => id_prof_record_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        name_in                IN trial.name%TYPE DEFAULT NULL,
        name_nin               IN BOOLEAN := TRUE,
        code_in                IN trial.code%TYPE DEFAULT NULL,
        code_nin               IN BOOLEAN := TRUE,
        flg_status_in          IN trial.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        dt_record_in           IN trial.dt_record%TYPE DEFAULT NULL,
        dt_record_nin          IN BOOLEAN := TRUE,
        id_prof_record_in      IN trial.id_prof_record%TYPE DEFAULT NULL,
        id_prof_record_nin     IN BOOLEAN := TRUE,
        responsible_in         IN trial.responsible%TYPE DEFAULT NULL,
        responsible_nin        IN BOOLEAN := TRUE,
        resp_contact_det_in    IN trial.resp_contact_det%TYPE DEFAULT NULL,
        resp_contact_det_nin   IN BOOLEAN := TRUE,
        notes_in               IN trial.notes%TYPE DEFAULT NULL,
        notes_nin              IN BOOLEAN := TRUE,
        dt_start_in            IN trial.dt_start%TYPE DEFAULT NULL,
        dt_start_nin           IN BOOLEAN := TRUE,
        dt_end_in              IN trial.dt_end%TYPE DEFAULT NULL,
        dt_end_nin             IN BOOLEAN := TRUE,
        id_institution_in      IN trial.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        flg_trial_type_in      IN trial.flg_trial_type%TYPE DEFAULT NULL,
        flg_trial_type_nin     IN BOOLEAN := TRUE,
        id_cancel_info_det_in  IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        id_cancel_info_det_nin IN BOOLEAN := TRUE,
        create_user_in         IN trial.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN trial.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN trial.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN trial.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN trial.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN trial.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        pharma_code_in         IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_code_nin        IN BOOLEAN := TRUE,
        pharma_name_in         IN trial.pharma_name%TYPE DEFAULT NULL,
        pharma_name_nin        IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(name_in                => name_in,
            name_nin               => name_nin,
            code_in                => code_in,
            code_nin               => code_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            dt_record_in           => dt_record_in,
            dt_record_nin          => dt_record_nin,
            id_prof_record_in      => id_prof_record_in,
            id_prof_record_nin     => id_prof_record_nin,
            responsible_in         => responsible_in,
            responsible_nin        => responsible_nin,
            resp_contact_det_in    => resp_contact_det_in,
            resp_contact_det_nin   => resp_contact_det_nin,
            notes_in               => notes_in,
            notes_nin              => notes_nin,
            dt_start_in            => dt_start_in,
            dt_start_nin           => dt_start_nin,
            dt_end_in              => dt_end_in,
            dt_end_nin             => dt_end_nin,
            id_institution_in      => id_institution_in,
            id_institution_nin     => id_institution_nin,
            flg_trial_type_in      => flg_trial_type_in,
            flg_trial_type_nin     => flg_trial_type_nin,
            id_cancel_info_det_in  => id_cancel_info_det_in,
            id_cancel_info_det_nin => id_cancel_info_det_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            pharma_code_in         => pharma_code_in,
            pharma_code_nin        => pharma_code_nin,
            pharma_name_in         => pharma_name_in,
            pharma_name_nin        => pharma_name_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN trial%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_trial_in           => rec_in.id_trial,
            name_in               => rec_in.name,
            code_in               => rec_in.code,
            flg_status_in         => rec_in.flg_status,
            dt_record_in          => rec_in.dt_record,
            id_prof_record_in     => rec_in.id_prof_record,
            responsible_in        => rec_in.responsible,
            resp_contact_det_in   => rec_in.resp_contact_det,
            notes_in              => rec_in.notes,
            dt_start_in           => rec_in.dt_start,
            dt_end_in             => rec_in.dt_end,
            id_institution_in     => rec_in.id_institution,
            flg_trial_type_in     => rec_in.flg_trial_type,
            id_cancel_info_det_in => rec_in.id_cancel_info_det,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            pharma_code_in        => rec_in.pharma_code,
            pharma_name_in        => rec_in.pharma_name
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN trial%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_trial_in           => rec_in.id_trial,
            name_in               => rec_in.name,
            code_in               => rec_in.code,
            flg_status_in         => rec_in.flg_status,
            dt_record_in          => rec_in.dt_record,
            id_prof_record_in     => rec_in.id_prof_record,
            responsible_in        => rec_in.responsible,
            resp_contact_det_in   => rec_in.resp_contact_det,
            notes_in              => rec_in.notes,
            dt_start_in           => rec_in.dt_start,
            dt_end_in             => rec_in.dt_end,
            id_institution_in     => rec_in.id_institution,
            flg_trial_type_in     => rec_in.flg_trial_type,
            id_cancel_info_det_in => rec_in.id_cancel_info_det,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            pharma_code_in        => rec_in.pharma_code,
            pharma_name_in        => rec_in.pharma_name
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_trial_in           IN trial.id_trial%TYPE,
        name_in               IN trial.name%TYPE DEFAULT NULL,
        code_in               IN trial.code%TYPE DEFAULT NULL,
        flg_status_in         IN trial.flg_status%TYPE DEFAULT NULL,
        dt_record_in          IN trial.dt_record%TYPE DEFAULT NULL,
        id_prof_record_in     IN trial.id_prof_record%TYPE DEFAULT NULL,
        responsible_in        IN trial.responsible%TYPE DEFAULT NULL,
        resp_contact_det_in   IN trial.resp_contact_det%TYPE DEFAULT NULL,
        notes_in              IN trial.notes%TYPE DEFAULT NULL,
        dt_start_in           IN trial.dt_start%TYPE DEFAULT NULL,
        dt_end_in             IN trial.dt_end%TYPE DEFAULT NULL,
        id_institution_in     IN trial.id_institution%TYPE DEFAULT NULL,
        flg_trial_type_in     IN trial.flg_trial_type%TYPE DEFAULT NULL,
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        create_user_in        IN trial.create_user%TYPE DEFAULT NULL,
        create_time_in        IN trial.create_time%TYPE DEFAULT NULL,
        create_institution_in IN trial.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN trial.update_user%TYPE DEFAULT NULL,
        update_time_in        IN trial.update_time%TYPE DEFAULT NULL,
        update_institution_in IN trial.update_institution%TYPE DEFAULT NULL,
        pharma_code_in        IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_name_in        IN trial.pharma_name%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        upd(id_trial_in           => id_trial_in,
            name_in               => name_in,
            code_in               => code_in,
            flg_status_in         => flg_status_in,
            dt_record_in          => dt_record_in,
            id_prof_record_in     => id_prof_record_in,
            responsible_in        => responsible_in,
            resp_contact_det_in   => resp_contact_det_in,
            notes_in              => notes_in,
            dt_start_in           => dt_start_in,
            dt_end_in             => dt_end_in,
            id_institution_in     => id_institution_in,
            flg_trial_type_in     => flg_trial_type_in,
            id_cancel_info_det_in => id_cancel_info_det_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            pharma_code_in        => pharma_code_in,
            pharma_name_in        => pharma_name_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_trial_in           => id_trial_in,
                name_in               => name_in,
                code_in               => code_in,
                flg_status_in         => flg_status_in,
                dt_record_in          => dt_record_in,
                id_prof_record_in     => id_prof_record_in,
                responsible_in        => responsible_in,
                resp_contact_det_in   => resp_contact_det_in,
                notes_in              => notes_in,
                dt_start_in           => dt_start_in,
                dt_end_in             => dt_end_in,
                id_institution_in     => id_institution_in,
                flg_trial_type_in     => flg_trial_type_in,
                id_cancel_info_det_in => id_cancel_info_det_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_time_in        => update_time_in,
                update_institution_in => update_institution_in,
                pharma_code_in        => pharma_code_in,
                pharma_name_in        => pharma_name_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_trial_in           IN trial.id_trial%TYPE,
        name_in               IN trial.name%TYPE DEFAULT NULL,
        code_in               IN trial.code%TYPE DEFAULT NULL,
        flg_status_in         IN trial.flg_status%TYPE DEFAULT NULL,
        dt_record_in          IN trial.dt_record%TYPE DEFAULT NULL,
        id_prof_record_in     IN trial.id_prof_record%TYPE DEFAULT NULL,
        responsible_in        IN trial.responsible%TYPE DEFAULT NULL,
        resp_contact_det_in   IN trial.resp_contact_det%TYPE DEFAULT NULL,
        notes_in              IN trial.notes%TYPE DEFAULT NULL,
        dt_start_in           IN trial.dt_start%TYPE DEFAULT NULL,
        dt_end_in             IN trial.dt_end%TYPE DEFAULT NULL,
        id_institution_in     IN trial.id_institution%TYPE DEFAULT NULL,
        flg_trial_type_in     IN trial.flg_trial_type%TYPE DEFAULT NULL,
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE DEFAULT NULL,
        create_user_in        IN trial.create_user%TYPE DEFAULT NULL,
        create_time_in        IN trial.create_time%TYPE DEFAULT NULL,
        create_institution_in IN trial.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN trial.update_user%TYPE DEFAULT NULL,
        update_time_in        IN trial.update_time%TYPE DEFAULT NULL,
        update_institution_in IN trial.update_institution%TYPE DEFAULT NULL,
        pharma_code_in        IN trial.pharma_code%TYPE DEFAULT NULL,
        pharma_name_in        IN trial.pharma_name%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_trial_in,
                name_in,
                code_in,
                flg_status_in,
                dt_record_in,
                id_prof_record_in,
                responsible_in,
                resp_contact_det_in,
                notes_in,
                dt_start_in,
                dt_end_in,
                id_institution_in,
                flg_trial_type_in,
                id_cancel_info_det_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                pharma_code_in,
                pharma_name_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN trial_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_trial           id_trial_cc;
        l_name               name_cc;
        l_code               code_cc;
        l_flg_status         flg_status_cc;
        l_dt_record          dt_record_cc;
        l_id_prof_record     id_prof_record_cc;
        l_responsible        responsible_cc;
        l_resp_contact_det   resp_contact_det_cc;
        l_notes              notes_cc;
        l_dt_start           dt_start_cc;
        l_dt_end             dt_end_cc;
        l_id_institution     id_institution_cc;
        l_flg_trial_type     flg_trial_type_cc;
        l_id_cancel_info_det id_cancel_info_det_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_time        update_time_cc;
        l_update_institution update_institution_cc;
        l_pharma_code        pharma_code_cc;
        l_pharma_name        pharma_name_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_trial(i) := col_in(i).id_trial;
            l_name(i) := col_in(i).name;
            l_code(i) := col_in(i).code;
            l_flg_status(i) := col_in(i).flg_status;
            l_dt_record(i) := col_in(i).dt_record;
            l_id_prof_record(i) := col_in(i).id_prof_record;
            l_responsible(i) := col_in(i).responsible;
            l_resp_contact_det(i) := col_in(i).resp_contact_det;
            l_notes(i) := col_in(i).notes;
            l_dt_start(i) := col_in(i).dt_start;
            l_dt_end(i) := col_in(i).dt_end;
            l_id_institution(i) := col_in(i).id_institution;
            l_flg_trial_type(i) := col_in(i).flg_trial_type;
            l_id_cancel_info_det(i) := col_in(i).id_cancel_info_det;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_pharma_code(i) := col_in(i).pharma_code;
            l_pharma_name(i) := col_in(i).pharma_name;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE trial
                   SET name               = nvl(l_name(i), name),
                       code               = nvl(l_code(i), code),
                       flg_status         = nvl(l_flg_status(i), flg_status),
                       dt_record          = nvl(l_dt_record(i), dt_record),
                       id_prof_record     = nvl(l_id_prof_record(i), id_prof_record),
                       responsible        = nvl(l_responsible(i), responsible),
                       resp_contact_det   = nvl(l_resp_contact_det(i), resp_contact_det),
                       notes              = nvl(l_notes(i), notes),
                       dt_start           = nvl(l_dt_start(i), dt_start),
                       dt_end             = nvl(l_dt_end(i), dt_end),
                       id_institution     = nvl(l_id_institution(i), id_institution),
                       flg_trial_type     = nvl(l_flg_trial_type(i), flg_trial_type),
                       id_cancel_info_det = nvl(l_id_cancel_info_det(i), id_cancel_info_det),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution),
                       pharma_code        = nvl(l_pharma_code(i), pharma_code),
                       pharma_name        = nvl(l_pharma_name(i), pharma_name)
                 WHERE id_trial = l_id_trial(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE trial
                   SET name               = l_name(i),
                       code               = l_code(i),
                       flg_status         = l_flg_status(i),
                       dt_record          = l_dt_record(i),
                       id_prof_record     = l_id_prof_record(i),
                       responsible        = l_responsible(i),
                       resp_contact_det   = l_resp_contact_det(i),
                       notes              = l_notes(i),
                       dt_start           = l_dt_start(i),
                       dt_end             = l_dt_end(i),
                       id_institution     = l_id_institution(i),
                       flg_trial_type     = l_flg_trial_type(i),
                       id_cancel_info_det = l_id_cancel_info_det(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i),
                       pharma_code        = l_pharma_code(i),
                       pharma_name        = l_pharma_name(i)
                 WHERE id_trial = l_id_trial(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN trial_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE TRIAL
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE TRIAL
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE TRIAL set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE TRIAL set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in, 1) ||
                          ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_trial_in     IN trial.id_trial%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM trial
         WHERE id_trial = id_trial_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_trial_in     IN trial.id_trial%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_trial_in => id_trial_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_TRIAL
    PROCEDURE del_id_trial
    (
        id_trial_in     IN trial.id_trial%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM trial
         WHERE id_trial = id_trial_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_trial;

    -- Delete all rows for primary key column ID_TRIAL
    PROCEDURE del_id_trial
    (
        id_trial_in     IN trial.id_trial%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_trial(id_trial_in => id_trial_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_trial;

    PROCEDURE del_t_cid_fk
    (
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM trial
         WHERE id_cancel_info_det = del_t_cid_fk.id_cancel_info_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_t_cid_fk;

    PROCEDURE del_t_cid_fk
    (
        id_cancel_info_det_in IN trial.id_cancel_info_det%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_t_cid_fk(id_cancel_info_det_in => id_cancel_info_det_in,
                     handle_error_in       => handle_error_in,
                     rows_out              => rows_out);
    END del_t_cid_fk;

    PROCEDURE del_t_inn_fk
    (
        id_institution_in IN trial.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM trial
         WHERE id_institution = del_t_inn_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_t_inn_fk;

    PROCEDURE del_t_inn_fk
    (
        id_institution_in IN trial.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_t_inn_fk(id_institution_in => id_institution_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_t_inn_fk;

    PROCEDURE del_t_prof_fk
    (
        id_prof_record_in IN trial.id_prof_record%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM trial
         WHERE id_prof_record = del_t_prof_fk.id_prof_record_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_t_prof_fk;

    PROCEDURE del_t_prof_fk
    (
        id_prof_record_in IN trial.id_prof_record%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_t_prof_fk(id_prof_record_in => id_prof_record_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_t_prof_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM TRIAL';
        ELSE
            RETURN 'DELETE FROM TRIAL WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRIAL');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRIAL');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(trial_inout IN OUT trial%ROWTYPE) IS
    BEGIN
        trial_inout.id_trial           := NULL;
        trial_inout.name               := NULL;
        trial_inout.code               := NULL;
        trial_inout.flg_status         := NULL;
        trial_inout.dt_record          := NULL;
        trial_inout.id_prof_record     := NULL;
        trial_inout.responsible        := NULL;
        trial_inout.resp_contact_det   := NULL;
        trial_inout.notes              := NULL;
        trial_inout.dt_start           := NULL;
        trial_inout.dt_end             := NULL;
        trial_inout.id_institution     := NULL;
        trial_inout.flg_trial_type     := NULL;
        trial_inout.id_cancel_info_det := NULL;
        trial_inout.create_user        := NULL;
        trial_inout.create_time        := NULL;
        trial_inout.create_institution := NULL;
        trial_inout.update_user        := NULL;
        trial_inout.update_time        := NULL;
        trial_inout.update_institution := NULL;
        trial_inout.pharma_code        := NULL;
        trial_inout.pharma_name        := NULL;
    END initrec;

    FUNCTION initrec RETURN trial%ROWTYPE IS
        l_trial trial%ROWTYPE;
    BEGIN
        RETURN l_trial;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN trial_tc IS
        data trial_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM trial
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN trial_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data trial_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_trial;
/
