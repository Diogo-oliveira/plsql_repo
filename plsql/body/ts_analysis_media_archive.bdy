/*-- Last Change Revision: $Rev: 2027919 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:41 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_analysis_media_archive
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2018-08-31 09:14:52
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN analysis_media_archive.id_analysis_media_archive%TYPE IS
        retval analysis_media_archive.id_analysis_media_archive%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_analysis_media_archive.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_analysis_req_det_in    IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_result_in     IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_doc_external_in        IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        flg_type_in               IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in    IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in            IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_time_in            IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_time_in            IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        id_analysis_result_par_in IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky analysis_media_archive.id_analysis_media_archive%TYPE := next_key;
    BEGIN
        ins(id_analysis_media_archive_in => l_pky,
            id_analysis_req_det_in       => id_analysis_req_det_in,
            id_analysis_result_in        => id_analysis_result_in,
            id_doc_external_in           => id_doc_external_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            id_prof_last_update_in       => id_prof_last_update_in,
            dt_last_update_tstz_in       => dt_last_update_tstz_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_analysis_result_par_in    => id_analysis_result_par_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_analysis_req_det_in    IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_result_in     IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_doc_external_in        IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        flg_type_in               IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in    IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in            IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_time_in            IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_time_in            IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        id_analysis_result_par_in IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_analysis_req_det_in    => id_analysis_req_det_in,
            id_analysis_result_in     => id_analysis_result_in,
            id_doc_external_in        => id_doc_external_in,
            flg_type_in               => flg_type_in,
            flg_status_in             => flg_status_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_tstz_in    => dt_last_update_tstz_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_analysis_result_par_in => id_analysis_result_par_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_analysis_req_det_in        IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_result_in         IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_doc_external_in            IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        flg_type_in                   IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_status_in                 IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in        IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in        IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in                IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_time_in                IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_time_in                IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        id_analysis_result_par_in     IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        id_analysis_media_archive_out IN OUT analysis_media_archive.id_analysis_media_archive%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky analysis_media_archive.id_analysis_media_archive%TYPE := next_key;
    BEGIN
        ins(id_analysis_media_archive_in => l_pky,
            id_analysis_req_det_in       => id_analysis_req_det_in,
            id_analysis_result_in        => id_analysis_result_in,
            id_doc_external_in           => id_doc_external_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            id_prof_last_update_in       => id_prof_last_update_in,
            dt_last_update_tstz_in       => dt_last_update_tstz_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_analysis_result_par_in    => id_analysis_result_par_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        id_analysis_media_archive_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_analysis_req_det_in        IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_result_in         IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_doc_external_in            IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        flg_type_in                   IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_status_in                 IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in        IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in        IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in                IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_time_in                IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_time_in                IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        id_analysis_result_par_in     IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        id_analysis_media_archive_out IN OUT analysis_media_archive.id_analysis_media_archive%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_analysis_req_det_in        => id_analysis_req_det_in,
            id_analysis_result_in         => id_analysis_result_in,
            id_doc_external_in            => id_doc_external_in,
            flg_type_in                   => flg_type_in,
            flg_status_in                 => flg_status_in,
            id_prof_last_update_in        => id_prof_last_update_in,
            dt_last_update_tstz_in        => dt_last_update_tstz_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_analysis_result_par_in     => id_analysis_result_par_in,
            id_analysis_media_archive_out => id_analysis_media_archive_out,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_analysis_req_det_in    IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_result_in     IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_doc_external_in        IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        flg_type_in               IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in    IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in            IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_time_in            IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_time_in            IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        id_analysis_result_par_in IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN analysis_media_archive.id_analysis_media_archive%TYPE IS
        l_pky analysis_media_archive.id_analysis_media_archive%TYPE := next_key;
    BEGIN
        ins(id_analysis_media_archive_in => l_pky,
            id_analysis_req_det_in       => id_analysis_req_det_in,
            id_analysis_result_in        => id_analysis_result_in,
            id_doc_external_in           => id_doc_external_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            id_prof_last_update_in       => id_prof_last_update_in,
            dt_last_update_tstz_in       => dt_last_update_tstz_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_analysis_result_par_in    => id_analysis_result_par_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_analysis_req_det_in    IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_result_in     IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_doc_external_in        IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        flg_type_in               IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in    IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in            IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_time_in            IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_time_in            IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        id_analysis_result_par_in IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN analysis_media_archive.id_analysis_media_archive%TYPE IS
        l_pky    analysis_media_archive.id_analysis_media_archive%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_analysis_media_archive_in => l_pky,
            id_analysis_req_det_in       => id_analysis_req_det_in,
            id_analysis_result_in        => id_analysis_result_in,
            id_doc_external_in           => id_doc_external_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            id_prof_last_update_in       => id_prof_last_update_in,
            dt_last_update_tstz_in       => dt_last_update_tstz_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_analysis_result_par_in    => id_analysis_result_par_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_analysis_media_archive_in IN analysis_media_archive.id_analysis_media_archive%TYPE,
        id_analysis_req_det_in       IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_result_in        IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_doc_external_in           IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        flg_type_in                  IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_status_in                IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in       IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in       IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in               IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_time_in               IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_time_in               IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        id_analysis_result_par_in    IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO analysis_media_archive
            (id_analysis_media_archive,
             id_analysis_req_det,
             id_analysis_result,
             id_doc_external,
             flg_type,
             flg_status,
             id_prof_last_update,
             dt_last_update_tstz,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_analysis_result_par)
        VALUES
            (id_analysis_media_archive_in,
             id_analysis_req_det_in,
             id_analysis_result_in,
             id_doc_external_in,
             flg_type_in,
             flg_status_in,
             id_prof_last_update_in,
             dt_last_update_tstz_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_analysis_result_par_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_analysis_media_archive_in IN analysis_media_archive.id_analysis_media_archive%TYPE,
        id_analysis_req_det_in       IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_result_in        IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_doc_external_in           IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        flg_type_in                  IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_status_in                IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in       IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in       IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in               IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_time_in               IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_time_in               IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        id_analysis_result_par_in    IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_analysis_media_archive_in => id_analysis_media_archive_in,
            id_analysis_req_det_in       => id_analysis_req_det_in,
            id_analysis_result_in        => id_analysis_result_in,
            id_doc_external_in           => id_doc_external_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            id_prof_last_update_in       => id_prof_last_update_in,
            dt_last_update_tstz_in       => dt_last_update_tstz_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_analysis_result_par_in    => id_analysis_result_par_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN analysis_media_archive%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec analysis_media_archive%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_analysis_media_archive := next_key(sequence_in);
        END IF;
    
        ins(id_analysis_media_archive_in => l_rec.id_analysis_media_archive,
            id_analysis_req_det_in       => l_rec.id_analysis_req_det,
            id_analysis_result_in        => l_rec.id_analysis_result,
            id_doc_external_in           => l_rec.id_doc_external,
            flg_type_in                  => l_rec.flg_type,
            flg_status_in                => l_rec.flg_status,
            id_prof_last_update_in       => l_rec.id_prof_last_update,
            dt_last_update_tstz_in       => l_rec.dt_last_update_tstz,
            create_user_in               => l_rec.create_user,
            create_time_in               => l_rec.create_time,
            create_institution_in        => l_rec.create_institution,
            update_user_in               => l_rec.update_user,
            update_time_in               => l_rec.update_time,
            update_institution_in        => l_rec.update_institution,
            id_analysis_result_par_in    => l_rec.id_analysis_result_par,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN analysis_media_archive%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN analysis_media_archive_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO analysis_media_archive
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN analysis_media_archive_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_analysis_media_archive_in IN analysis_media_archive.id_analysis_media_archive%TYPE,
        id_analysis_req_det_in       IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_req_det_nin      IN BOOLEAN := TRUE,
        id_analysis_result_in        IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_analysis_result_nin       IN BOOLEAN := TRUE,
        id_doc_external_in           IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        id_doc_external_nin          IN BOOLEAN := TRUE,
        flg_type_in                  IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                 IN BOOLEAN := TRUE,
        flg_status_in                IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        id_prof_last_update_in       IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin      IN BOOLEAN := TRUE,
        dt_last_update_tstz_in       IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin      IN BOOLEAN := TRUE,
        create_user_in               IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        id_analysis_result_par_in    IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        id_analysis_result_par_nin   IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_id_analysis_req_det_n    NUMBER(1) := sys.diutil.bool_to_int(id_analysis_req_det_nin);
        l_id_analysis_result_n     NUMBER(1) := sys.diutil.bool_to_int(id_analysis_result_nin);
        l_id_doc_external_n        NUMBER(1) := sys.diutil.bool_to_int(id_doc_external_nin);
        l_flg_type_n               NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_status_n             NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_last_update_n    NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_tstz_n    NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
        l_create_user_n            NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_analysis_result_par_n NUMBER(1) := sys.diutil.bool_to_int(id_analysis_result_par_nin);
    BEGIN
    
        UPDATE analysis_media_archive
           SET id_analysis_req_det    = decode(l_id_analysis_req_det_n,
                                               0,
                                               id_analysis_req_det_in,
                                               nvl(id_analysis_req_det_in, id_analysis_req_det)),
               id_analysis_result     = decode(l_id_analysis_result_n,
                                               0,
                                               id_analysis_result_in,
                                               nvl(id_analysis_result_in, id_analysis_result)),
               id_doc_external        = decode(l_id_doc_external_n,
                                               0,
                                               id_doc_external_in,
                                               nvl(id_doc_external_in, id_doc_external)),
               flg_type               = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               flg_status             = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_last_update    = decode(l_id_prof_last_update_n,
                                               0,
                                               id_prof_last_update_in,
                                               nvl(id_prof_last_update_in, id_prof_last_update)),
               dt_last_update_tstz    = decode(l_dt_last_update_tstz_n,
                                               0,
                                               dt_last_update_tstz_in,
                                               nvl(dt_last_update_tstz_in, dt_last_update_tstz)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution)),
               id_analysis_result_par = decode(l_id_analysis_result_par_n,
                                               0,
                                               id_analysis_result_par_in,
                                               nvl(id_analysis_result_par_in, id_analysis_result_par))
         WHERE id_analysis_media_archive = id_analysis_media_archive_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_analysis_media_archive_in IN analysis_media_archive.id_analysis_media_archive%TYPE,
        id_analysis_req_det_in       IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_req_det_nin      IN BOOLEAN := TRUE,
        id_analysis_result_in        IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_analysis_result_nin       IN BOOLEAN := TRUE,
        id_doc_external_in           IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        id_doc_external_nin          IN BOOLEAN := TRUE,
        flg_type_in                  IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                 IN BOOLEAN := TRUE,
        flg_status_in                IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        id_prof_last_update_in       IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin      IN BOOLEAN := TRUE,
        dt_last_update_tstz_in       IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin      IN BOOLEAN := TRUE,
        create_user_in               IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        id_analysis_result_par_in    IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        id_analysis_result_par_nin   IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_analysis_media_archive_in => id_analysis_media_archive_in,
            id_analysis_req_det_in       => id_analysis_req_det_in,
            id_analysis_req_det_nin      => id_analysis_req_det_nin,
            id_analysis_result_in        => id_analysis_result_in,
            id_analysis_result_nin       => id_analysis_result_nin,
            id_doc_external_in           => id_doc_external_in,
            id_doc_external_nin          => id_doc_external_nin,
            flg_type_in                  => flg_type_in,
            flg_type_nin                 => flg_type_nin,
            flg_status_in                => flg_status_in,
            flg_status_nin               => flg_status_nin,
            id_prof_last_update_in       => id_prof_last_update_in,
            id_prof_last_update_nin      => id_prof_last_update_nin,
            dt_last_update_tstz_in       => dt_last_update_tstz_in,
            dt_last_update_tstz_nin      => dt_last_update_tstz_nin,
            create_user_in               => create_user_in,
            create_user_nin              => create_user_nin,
            create_time_in               => create_time_in,
            create_time_nin              => create_time_nin,
            create_institution_in        => create_institution_in,
            create_institution_nin       => create_institution_nin,
            update_user_in               => update_user_in,
            update_user_nin              => update_user_nin,
            update_time_in               => update_time_in,
            update_time_nin              => update_time_nin,
            update_institution_in        => update_institution_in,
            update_institution_nin       => update_institution_nin,
            id_analysis_result_par_in    => id_analysis_result_par_in,
            id_analysis_result_par_nin   => id_analysis_result_par_nin,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_analysis_req_det_in     IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_req_det_nin    IN BOOLEAN := TRUE,
        id_analysis_result_in      IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_analysis_result_nin     IN BOOLEAN := TRUE,
        id_doc_external_in         IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        id_doc_external_nin        IN BOOLEAN := TRUE,
        flg_type_in                IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_type_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_tstz_in     IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin    IN BOOLEAN := TRUE,
        create_user_in             IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        id_analysis_result_par_in  IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        id_analysis_result_par_nin IN BOOLEAN := TRUE,
        where_in                   IN VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_id_analysis_req_det_n    NUMBER(1) := sys.diutil.bool_to_int(id_analysis_req_det_nin);
        l_id_analysis_result_n     NUMBER(1) := sys.diutil.bool_to_int(id_analysis_result_nin);
        l_id_doc_external_n        NUMBER(1) := sys.diutil.bool_to_int(id_doc_external_nin);
        l_flg_type_n               NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_status_n             NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_last_update_n    NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_tstz_n    NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
        l_create_user_n            NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_analysis_result_par_n NUMBER(1) := sys.diutil.bool_to_int(id_analysis_result_par_nin);
    BEGIN
        l_id_analysis_req_det_n    := sys.diutil.bool_to_int(id_analysis_req_det_nin);
        l_id_analysis_result_n     := sys.diutil.bool_to_int(id_analysis_result_nin);
        l_id_doc_external_n        := sys.diutil.bool_to_int(id_doc_external_nin);
        l_flg_type_n               := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_last_update_n    := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_tstz_n    := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_id_analysis_result_par_n := sys.diutil.bool_to_int(id_analysis_result_par_nin);
        l_sql                      := 'UPDATE analysis_media_archive SET' || ' ID_ANALYSIS_REQ_DET = decode (' ||
                                      l_id_analysis_req_det_n ||
                                      ',0,:ID_ANALYSIS_REQ_DET_in, NVL (:ID_ANALYSIS_REQ_DET_in, ID_ANALYSIS_REQ_DET)) ' || ',' ||
                                      ' ID_ANALYSIS_RESULT = decode (' || l_id_analysis_result_n ||
                                      ',0,:ID_ANALYSIS_RESULT_in, NVL (:ID_ANALYSIS_RESULT_in, ID_ANALYSIS_RESULT)) ' || ',' ||
                                      ' ID_DOC_EXTERNAL = decode (' || l_id_doc_external_n ||
                                      ',0,:ID_DOC_EXTERNAL_in, NVL (:ID_DOC_EXTERNAL_in, ID_DOC_EXTERNAL)) ' || ',' ||
                                      ' FLG_TYPE = decode (' || l_flg_type_n ||
                                      ',0,:FLG_TYPE_in, NVL (:FLG_TYPE_in, FLG_TYPE)) ' || ',' ||
                                      ' FLG_STATUS = decode (' || l_flg_status_n ||
                                      ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                      ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                                      ',0,:ID_PROF_LAST_UPDATE_in, NVL (:ID_PROF_LAST_UPDATE_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                                      ' DT_LAST_UPDATE_TSTZ = decode (' || l_dt_last_update_tstz_n ||
                                      ',0,:DT_LAST_UPDATE_TSTZ_in, NVL (:DT_LAST_UPDATE_TSTZ_in, DT_LAST_UPDATE_TSTZ)) ' || ',' ||
                                      ' CREATE_USER = decode (' || l_create_user_n ||
                                      ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                      ' CREATE_TIME = decode (' || l_create_time_n ||
                                      ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                      ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                      ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                      ' UPDATE_USER = decode (' || l_update_user_n ||
                                      ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                      ' UPDATE_TIME = decode (' || l_update_time_n ||
                                      ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                      ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                      ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                      ' ID_ANALYSIS_RESULT_PAR = decode (' || l_id_analysis_result_par_n ||
                                      ',0,:ID_ANALYSIS_RESULT_PAR_in, NVL (:ID_ANALYSIS_RESULT_PAR_in, ID_ANALYSIS_RESULT_PAR)) ' ||
                                      ' where ' || nvl(where_in, '(1=1)') ||
                                      ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_analysis_req_det_in, id_analysis_result_in, id_doc_external_in, flg_type_in, flg_status_in, id_prof_last_update_in, dt_last_update_tstz_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_analysis_result_par_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_analysis_req_det_in     IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_req_det_nin    IN BOOLEAN := TRUE,
        id_analysis_result_in      IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_analysis_result_nin     IN BOOLEAN := TRUE,
        id_doc_external_in         IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        id_doc_external_nin        IN BOOLEAN := TRUE,
        flg_type_in                IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_type_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_tstz_in     IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin    IN BOOLEAN := TRUE,
        create_user_in             IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        id_analysis_result_par_in  IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        id_analysis_result_par_nin IN BOOLEAN := TRUE,
        where_in                   IN VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_analysis_req_det_in     => id_analysis_req_det_in,
            id_analysis_req_det_nin    => id_analysis_req_det_nin,
            id_analysis_result_in      => id_analysis_result_in,
            id_analysis_result_nin     => id_analysis_result_nin,
            id_doc_external_in         => id_doc_external_in,
            id_doc_external_nin        => id_doc_external_nin,
            flg_type_in                => flg_type_in,
            flg_type_nin               => flg_type_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            id_prof_last_update_in     => id_prof_last_update_in,
            id_prof_last_update_nin    => id_prof_last_update_nin,
            dt_last_update_tstz_in     => dt_last_update_tstz_in,
            dt_last_update_tstz_nin    => dt_last_update_tstz_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            id_analysis_result_par_in  => id_analysis_result_par_in,
            id_analysis_result_par_nin => id_analysis_result_par_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_analysis_media_archive_in IN analysis_media_archive.id_analysis_media_archive%TYPE,
        id_analysis_req_det_in       IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_result_in        IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_doc_external_in           IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        flg_type_in                  IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_status_in                IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in       IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in       IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in               IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_time_in               IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_time_in               IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        id_analysis_result_par_in    IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_analysis_media_archive_in => id_analysis_media_archive_in,
            id_analysis_req_det_in       => id_analysis_req_det_in,
            id_analysis_result_in        => id_analysis_result_in,
            id_doc_external_in           => id_doc_external_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            id_prof_last_update_in       => id_prof_last_update_in,
            dt_last_update_tstz_in       => dt_last_update_tstz_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_analysis_result_par_in    => id_analysis_result_par_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_analysis_media_archive_in => id_analysis_media_archive_in,
                id_analysis_req_det_in       => id_analysis_req_det_in,
                id_analysis_result_in        => id_analysis_result_in,
                id_doc_external_in           => id_doc_external_in,
                flg_type_in                  => flg_type_in,
                flg_status_in                => flg_status_in,
                id_prof_last_update_in       => id_prof_last_update_in,
                dt_last_update_tstz_in       => dt_last_update_tstz_in,
                create_user_in               => create_user_in,
                create_time_in               => create_time_in,
                create_institution_in        => create_institution_in,
                update_user_in               => update_user_in,
                update_time_in               => update_time_in,
                update_institution_in        => update_institution_in,
                id_analysis_result_par_in    => id_analysis_result_par_in,
                handle_error_in              => handle_error_in,
                rows_out                     => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_analysis_media_archive_in IN analysis_media_archive.id_analysis_media_archive%TYPE,
        id_analysis_req_det_in       IN analysis_media_archive.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_result_in        IN analysis_media_archive.id_analysis_result%TYPE DEFAULT NULL,
        id_doc_external_in           IN analysis_media_archive.id_doc_external%TYPE DEFAULT NULL,
        flg_type_in                  IN analysis_media_archive.flg_type%TYPE DEFAULT NULL,
        flg_status_in                IN analysis_media_archive.flg_status%TYPE DEFAULT NULL,
        id_prof_last_update_in       IN analysis_media_archive.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in       IN analysis_media_archive.dt_last_update_tstz%TYPE DEFAULT NULL,
        create_user_in               IN analysis_media_archive.create_user%TYPE DEFAULT NULL,
        create_time_in               IN analysis_media_archive.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN analysis_media_archive.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN analysis_media_archive.update_user%TYPE DEFAULT NULL,
        update_time_in               IN analysis_media_archive.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN analysis_media_archive.update_institution%TYPE DEFAULT NULL,
        id_analysis_result_par_in    IN analysis_media_archive.id_analysis_result_par%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_analysis_media_archive_in,
                id_analysis_req_det_in,
                id_analysis_result_in,
                id_doc_external_in,
                flg_type_in,
                flg_status_in,
                id_prof_last_update_in,
                dt_last_update_tstz_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_analysis_result_par_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN analysis_media_archive%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_analysis_media_archive_in => rec_in.id_analysis_media_archive,
            id_analysis_req_det_in       => rec_in.id_analysis_req_det,
            id_analysis_result_in        => rec_in.id_analysis_result,
            id_doc_external_in           => rec_in.id_doc_external,
            flg_type_in                  => rec_in.flg_type,
            flg_status_in                => rec_in.flg_status,
            id_prof_last_update_in       => rec_in.id_prof_last_update,
            dt_last_update_tstz_in       => rec_in.dt_last_update_tstz,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution,
            id_analysis_result_par_in    => rec_in.id_analysis_result_par,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN analysis_media_archive%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_analysis_media_archive_in => rec_in.id_analysis_media_archive,
            id_analysis_req_det_in       => rec_in.id_analysis_req_det,
            id_analysis_result_in        => rec_in.id_analysis_result,
            id_doc_external_in           => rec_in.id_doc_external,
            flg_type_in                  => rec_in.flg_type,
            flg_status_in                => rec_in.flg_status,
            id_prof_last_update_in       => rec_in.id_prof_last_update,
            dt_last_update_tstz_in       => rec_in.dt_last_update_tstz,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution,
            id_analysis_result_par_in    => rec_in.id_analysis_result_par,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN analysis_media_archive_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_analysis_media_archive id_analysis_media_archive_cc;
        l_id_analysis_req_det       id_analysis_req_det_cc;
        l_id_analysis_result        id_analysis_result_cc;
        l_id_doc_external           id_doc_external_cc;
        l_flg_type                  flg_type_cc;
        l_flg_status                flg_status_cc;
        l_id_prof_last_update       id_prof_last_update_cc;
        l_dt_last_update_tstz       dt_last_update_tstz_cc;
        l_create_user               create_user_cc;
        l_create_time               create_time_cc;
        l_create_institution        create_institution_cc;
        l_update_user               update_user_cc;
        l_update_time               update_time_cc;
        l_update_institution        update_institution_cc;
        l_id_analysis_result_par    id_analysis_result_par_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_analysis_media_archive(i) := col_in(i).id_analysis_media_archive;
            l_id_analysis_req_det(i) := col_in(i).id_analysis_req_det;
            l_id_analysis_result(i) := col_in(i).id_analysis_result;
            l_id_doc_external(i) := col_in(i).id_doc_external;
            l_flg_type(i) := col_in(i).flg_type;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_dt_last_update_tstz(i) := col_in(i).dt_last_update_tstz;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_analysis_result_par(i) := col_in(i).id_analysis_result_par;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE analysis_media_archive
                   SET id_analysis_req_det    = nvl(l_id_analysis_req_det(i), id_analysis_req_det),
                       id_analysis_result     = nvl(l_id_analysis_result(i), id_analysis_result),
                       id_doc_external        = nvl(l_id_doc_external(i), id_doc_external),
                       flg_type               = nvl(l_flg_type(i), flg_type),
                       flg_status             = nvl(l_flg_status(i), flg_status),
                       id_prof_last_update    = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       dt_last_update_tstz    = nvl(l_dt_last_update_tstz(i), dt_last_update_tstz),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution),
                       id_analysis_result_par = nvl(l_id_analysis_result_par(i), id_analysis_result_par)
                 WHERE id_analysis_media_archive = l_id_analysis_media_archive(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE analysis_media_archive
                   SET id_analysis_req_det    = l_id_analysis_req_det(i),
                       id_analysis_result     = l_id_analysis_result(i),
                       id_doc_external        = l_id_doc_external(i),
                       flg_type               = l_flg_type(i),
                       flg_status             = l_flg_status(i),
                       id_prof_last_update    = l_id_prof_last_update(i),
                       dt_last_update_tstz    = l_dt_last_update_tstz(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i),
                       id_analysis_result_par = l_id_analysis_result_par(i)
                 WHERE id_analysis_media_archive = l_id_analysis_media_archive(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN analysis_media_archive_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE analysis_media_archive
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE analysis_media_archive
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE analysis_media_archive
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_analysis_media_archive_in IN analysis_media_archive.id_analysis_media_archive%TYPE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_media_archive
         WHERE id_analysis_media_archive = id_analysis_media_archive_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_analysis_media_archive_in IN analysis_media_archive.id_analysis_media_archive%TYPE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_analysis_media_archive_in => id_analysis_media_archive_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END del;

    -- Delete all rows for this AMA_ARD_FK foreign key value
    PROCEDURE del_ama_ard_fk
    (
        id_analysis_req_det_in IN analysis_media_archive.id_analysis_req_det%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_media_archive
         WHERE id_analysis_req_det = id_analysis_req_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ama_ard_fk;

    -- Delete all rows for this AMA_ARES_FK foreign key value
    PROCEDURE del_ama_ares_fk
    (
        id_analysis_result_in IN analysis_media_archive.id_analysis_result%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_media_archive
         WHERE id_analysis_result = id_analysis_result_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ama_ares_fk;

    -- Delete all rows for this AMA_ARLP_FK foreign key value
    PROCEDURE del_ama_arlp_fk
    (
        id_analysis_result_par_in IN analysis_media_archive.id_analysis_result_par%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_media_archive
         WHERE id_analysis_result_par = id_analysis_result_par_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ama_arlp_fk;

    -- Delete all rows for this AMA_DEL_FK foreign key value
    PROCEDURE del_ama_del_fk
    (
        id_doc_external_in IN analysis_media_archive.id_doc_external%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_media_archive
         WHERE id_doc_external = id_doc_external_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ama_del_fk;

    -- Delete all rows for this AMA_PL_FK foreign key value
    PROCEDURE del_ama_pl_fk
    (
        id_prof_last_update_in IN analysis_media_archive.id_prof_last_update%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_media_archive
         WHERE id_prof_last_update = id_prof_last_update_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ama_pl_fk;

    -- Delete all rows for this AMA_ARD_FK foreign key value
    PROCEDURE del_ama_ard_fk
    (
        id_analysis_req_det_in IN analysis_media_archive.id_analysis_req_det%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ama_ard_fk(id_analysis_req_det_in => id_analysis_req_det_in,
                       handle_error_in        => handle_error_in,
                       rows_out               => rows_out);
    END del_ama_ard_fk;

    -- Delete all rows for this AMA_ARES_FK foreign key value
    PROCEDURE del_ama_ares_fk
    (
        id_analysis_result_in IN analysis_media_archive.id_analysis_result%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ama_ares_fk(id_analysis_result_in => id_analysis_result_in,
                        handle_error_in       => handle_error_in,
                        rows_out              => rows_out);
    END del_ama_ares_fk;

    -- Delete all rows for this AMA_ARLP_FK foreign key value
    PROCEDURE del_ama_arlp_fk
    (
        id_analysis_result_par_in IN analysis_media_archive.id_analysis_result_par%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ama_arlp_fk(id_analysis_result_par_in => id_analysis_result_par_in,
                        handle_error_in           => handle_error_in,
                        rows_out                  => rows_out);
    END del_ama_arlp_fk;

    -- Delete all rows for this AMA_DEL_FK foreign key value
    PROCEDURE del_ama_del_fk
    (
        id_doc_external_in IN analysis_media_archive.id_doc_external%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ama_del_fk(id_doc_external_in => id_doc_external_in,
                       handle_error_in    => handle_error_in,
                       rows_out           => rows_out);
    END del_ama_del_fk;

    -- Delete all rows for this AMA_PL_FK foreign key value
    PROCEDURE del_ama_pl_fk
    (
        id_prof_last_update_in IN analysis_media_archive.id_prof_last_update%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ama_pl_fk(id_prof_last_update_in => id_prof_last_update_in,
                      handle_error_in        => handle_error_in,
                      rows_out               => rows_out);
    END del_ama_pl_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM analysis_media_archive';
        ELSE
            RETURN 'DELETE FROM analysis_media_archive WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(analysis_media_archive_inout IN OUT analysis_media_archive%ROWTYPE) IS
    BEGIN
        analysis_media_archive_inout.id_analysis_media_archive := NULL;
        analysis_media_archive_inout.id_analysis_req_det       := NULL;
        analysis_media_archive_inout.id_analysis_result        := NULL;
        analysis_media_archive_inout.id_doc_external           := NULL;
        analysis_media_archive_inout.flg_type                  := NULL;
        analysis_media_archive_inout.flg_status                := NULL;
        analysis_media_archive_inout.id_prof_last_update       := NULL;
        analysis_media_archive_inout.dt_last_update_tstz       := NULL;
        analysis_media_archive_inout.create_user               := NULL;
        analysis_media_archive_inout.create_time               := NULL;
        analysis_media_archive_inout.create_institution        := NULL;
        analysis_media_archive_inout.update_user               := NULL;
        analysis_media_archive_inout.update_time               := NULL;
        analysis_media_archive_inout.update_institution        := NULL;
        analysis_media_archive_inout.id_analysis_result_par    := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN analysis_media_archive%ROWTYPE IS
        l_analysis_media_archive analysis_media_archive%ROWTYPE;
    BEGIN
        RETURN l_analysis_media_archive;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN analysis_media_archive_tc IS
        data analysis_media_archive_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM analysis_media_archive
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN analysis_media_archive_tc IS
        data analysis_media_archive_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_analysis_media_archive;
/
