/*-- Last Change Revision: $Rev: 2028049 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:03 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_diag_stag
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Outubro 16, 2013 10:44:23
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_epis_diagnosis_in      IN epis_diag_stag.id_epis_diagnosis%TYPE,
        id_staging_basis_in       IN epis_diag_stag.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in   IN epis_diag_stag.id_sbasis_inst_owner%TYPE,
        num_staging_basis_in      IN epis_diag_stag.num_staging_basis%TYPE,
        id_tnm_t_in               IN epis_diag_stag.id_tnm_t%TYPE DEFAULT NULL,
        id_tnm_t_inst_owner_in    IN epis_diag_stag.id_tnm_t_inst_owner%TYPE DEFAULT NULL,
        code_tnm_t_in             IN epis_diag_stag.code_tnm_t%TYPE DEFAULT NULL,
        id_tnm_n_in               IN epis_diag_stag.id_tnm_n%TYPE DEFAULT NULL,
        id_tnm_n_inst_owner_in    IN epis_diag_stag.id_tnm_n_inst_owner%TYPE DEFAULT NULL,
        code_tnm_n_in             IN epis_diag_stag.code_tnm_n%TYPE DEFAULT NULL,
        id_tnm_m_in               IN epis_diag_stag.id_tnm_m%TYPE DEFAULT NULL,
        id_tnm_m_inst_owner_in    IN epis_diag_stag.id_tnm_m_inst_owner%TYPE DEFAULT NULL,
        code_tnm_m_in             IN epis_diag_stag.code_tnm_m%TYPE DEFAULT NULL,
        id_metastatic_sites_in    IN epis_diag_stag.id_metastatic_sites%TYPE DEFAULT NULL,
        id_msites_inst_owner_in   IN epis_diag_stag.id_msites_inst_owner%TYPE DEFAULT NULL,
        id_staging_group_in       IN epis_diag_stag.id_staging_group%TYPE DEFAULT NULL,
        id_sgroup_inst_owner_in   IN epis_diag_stag.id_sgroup_inst_owner%TYPE DEFAULT NULL,
        id_residual_tumor_in      IN epis_diag_stag.id_residual_tumor%TYPE DEFAULT NULL,
        id_rtumor_inst_owner_in   IN epis_diag_stag.id_rtumor_inst_owner%TYPE DEFAULT NULL,
        id_surgical_margins_in    IN epis_diag_stag.id_surgical_margins%TYPE DEFAULT NULL,
        id_smargins_inst_owner_in IN epis_diag_stag.id_smargins_inst_owner%TYPE DEFAULT NULL,
        id_lymph_vasc_inv_in      IN epis_diag_stag.id_lymph_vasc_inv%TYPE DEFAULT NULL,
        id_lvinv_inst_owner_in    IN epis_diag_stag.id_lvinv_inst_owner%TYPE DEFAULT NULL,
        id_other_staging_sys_in   IN epis_diag_stag.id_other_staging_sys%TYPE DEFAULT NULL,
        id_ostgsys_inst_owner_in  IN epis_diag_stag.id_ostgsys_inst_owner%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_diag_stag.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_diag_stag.cancel_notes%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_diag_stag.id_prof_create%TYPE DEFAULT NULL,
        dt_epis_diagnosis_stag_in IN epis_diag_stag.dt_epis_diagnosis_stag%TYPE DEFAULT NULL,
        create_user_in            IN epis_diag_stag.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_diag_stag.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_diag_stag.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_diag_stag.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_diag_stag.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_diag_stag.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO epis_diag_stag
            (id_epis_diagnosis,
             num_staging_basis,
             id_staging_basis,
             id_sbasis_inst_owner,
             id_tnm_t,
             id_tnm_t_inst_owner,
             code_tnm_t,
             id_tnm_n,
             id_tnm_n_inst_owner,
             code_tnm_n,
             id_tnm_m,
             id_tnm_m_inst_owner,
             code_tnm_m,
             id_metastatic_sites,
             id_msites_inst_owner,
             id_staging_group,
             id_sgroup_inst_owner,
             id_residual_tumor,
             id_rtumor_inst_owner,
             id_surgical_margins,
             id_smargins_inst_owner,
             id_lymph_vasc_inv,
             id_lvinv_inst_owner,
             id_other_staging_sys,
             id_ostgsys_inst_owner,
             id_cancel_reason,
             cancel_notes,
             id_prof_create,
             dt_epis_diagnosis_stag,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_epis_diagnosis_in,
             num_staging_basis_in,
             id_staging_basis_in,
             id_sbasis_inst_owner_in,
             id_tnm_t_in,
             id_tnm_t_inst_owner_in,
             code_tnm_t_in,
             id_tnm_n_in,
             id_tnm_n_inst_owner_in,
             code_tnm_n_in,
             id_tnm_m_in,
             id_tnm_m_inst_owner_in,
             code_tnm_m_in,
             id_metastatic_sites_in,
             id_msites_inst_owner_in,
             id_staging_group_in,
             id_sgroup_inst_owner_in,
             id_residual_tumor_in,
             id_rtumor_inst_owner_in,
             id_surgical_margins_in,
             id_smargins_inst_owner_in,
             id_lymph_vasc_inv_in,
             id_lvinv_inst_owner_in,
             id_other_staging_sys_in,
             id_ostgsys_inst_owner_in,
             id_cancel_reason_in,
             cancel_notes_in,
             id_prof_create_in,
             dt_epis_diagnosis_stag_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_DIAG_STAG');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    IF l_name = 'EDSTGG_CNCPTTRA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_STAGING_GROUP',
                                                        value_in           => id_staging_group_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SGROUP_INST_OWNER',
                                                        value_in           => id_sgroup_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR1_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_STAGING_BASIS',
                                                        value_in           => id_staging_basis_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SBASIS_INST_OWNER',
                                                        value_in           => id_sbasis_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR2_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_T',
                                                        value_in           => id_tnm_t_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_T_INST_OWNER',
                                                        value_in           => id_tnm_t_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR3_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_N',
                                                        value_in           => id_tnm_n_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_N_INST_OWNER',
                                                        value_in           => id_tnm_n_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR4_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_M',
                                                        value_in           => id_tnm_m_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_M_INST_OWNER',
                                                        value_in           => id_tnm_m_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR5_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_METASTATIC_SITES',
                                                        value_in           => id_metastatic_sites_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MSITES_INST_OWNER',
                                                        value_in           => id_msites_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR6_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESIDUAL_TUMOR',
                                                        value_in           => id_residual_tumor_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RTUMOR_INST_OWNER',
                                                        value_in           => id_rtumor_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR7_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SURGICAL_MARGINS',
                                                        value_in           => id_surgical_margins_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SMARGINS_INST_OWNER',
                                                        value_in           => id_smargins_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR8_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LYMPH_VASC_INV',
                                                        value_in           => id_lymph_vasc_inv_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LVINV_INST_OWNER',
                                                        value_in           => id_lvinv_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR9_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OTHER_STAGING_SYS',
                                                        value_in           => id_other_staging_sys_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OSTGSYS_INST_OWNER',
                                                        value_in           => id_ostgsys_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'EDSTGG_ED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DIAGNOSIS',
                                                        value_in           => id_epis_diagnosis_in);
                    END IF;
                    IF l_name = 'EDSTGG_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATE',
                                                        value_in           => id_prof_create_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_epis_diagnosis_in      IN epis_diag_stag.id_epis_diagnosis%TYPE,
        id_staging_basis_in       IN epis_diag_stag.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in   IN epis_diag_stag.id_sbasis_inst_owner%TYPE,
        num_staging_basis_in      IN epis_diag_stag.num_staging_basis%TYPE,
        id_tnm_t_in               IN epis_diag_stag.id_tnm_t%TYPE DEFAULT NULL,
        id_tnm_t_inst_owner_in    IN epis_diag_stag.id_tnm_t_inst_owner%TYPE DEFAULT NULL,
        code_tnm_t_in             IN epis_diag_stag.code_tnm_t%TYPE DEFAULT NULL,
        id_tnm_n_in               IN epis_diag_stag.id_tnm_n%TYPE DEFAULT NULL,
        id_tnm_n_inst_owner_in    IN epis_diag_stag.id_tnm_n_inst_owner%TYPE DEFAULT NULL,
        code_tnm_n_in             IN epis_diag_stag.code_tnm_n%TYPE DEFAULT NULL,
        id_tnm_m_in               IN epis_diag_stag.id_tnm_m%TYPE DEFAULT NULL,
        id_tnm_m_inst_owner_in    IN epis_diag_stag.id_tnm_m_inst_owner%TYPE DEFAULT NULL,
        code_tnm_m_in             IN epis_diag_stag.code_tnm_m%TYPE DEFAULT NULL,
        id_metastatic_sites_in    IN epis_diag_stag.id_metastatic_sites%TYPE DEFAULT NULL,
        id_msites_inst_owner_in   IN epis_diag_stag.id_msites_inst_owner%TYPE DEFAULT NULL,
        id_staging_group_in       IN epis_diag_stag.id_staging_group%TYPE DEFAULT NULL,
        id_sgroup_inst_owner_in   IN epis_diag_stag.id_sgroup_inst_owner%TYPE DEFAULT NULL,
        id_residual_tumor_in      IN epis_diag_stag.id_residual_tumor%TYPE DEFAULT NULL,
        id_rtumor_inst_owner_in   IN epis_diag_stag.id_rtumor_inst_owner%TYPE DEFAULT NULL,
        id_surgical_margins_in    IN epis_diag_stag.id_surgical_margins%TYPE DEFAULT NULL,
        id_smargins_inst_owner_in IN epis_diag_stag.id_smargins_inst_owner%TYPE DEFAULT NULL,
        id_lymph_vasc_inv_in      IN epis_diag_stag.id_lymph_vasc_inv%TYPE DEFAULT NULL,
        id_lvinv_inst_owner_in    IN epis_diag_stag.id_lvinv_inst_owner%TYPE DEFAULT NULL,
        id_other_staging_sys_in   IN epis_diag_stag.id_other_staging_sys%TYPE DEFAULT NULL,
        id_ostgsys_inst_owner_in  IN epis_diag_stag.id_ostgsys_inst_owner%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_diag_stag.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_diag_stag.cancel_notes%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_diag_stag.id_prof_create%TYPE DEFAULT NULL,
        dt_epis_diagnosis_stag_in IN epis_diag_stag.dt_epis_diagnosis_stag%TYPE DEFAULT NULL,
        create_user_in            IN epis_diag_stag.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_diag_stag.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_diag_stag.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_diag_stag.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_diag_stag.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_diag_stag.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_epis_diagnosis_in      => id_epis_diagnosis_in,
            id_staging_basis_in       => id_staging_basis_in,
            id_sbasis_inst_owner_in   => id_sbasis_inst_owner_in,
            num_staging_basis_in      => num_staging_basis_in,
            id_tnm_t_in               => id_tnm_t_in,
            id_tnm_t_inst_owner_in    => id_tnm_t_inst_owner_in,
            code_tnm_t_in             => code_tnm_t_in,
            id_tnm_n_in               => id_tnm_n_in,
            id_tnm_n_inst_owner_in    => id_tnm_n_inst_owner_in,
            code_tnm_n_in             => code_tnm_n_in,
            id_tnm_m_in               => id_tnm_m_in,
            id_tnm_m_inst_owner_in    => id_tnm_m_inst_owner_in,
            code_tnm_m_in             => code_tnm_m_in,
            id_metastatic_sites_in    => id_metastatic_sites_in,
            id_msites_inst_owner_in   => id_msites_inst_owner_in,
            id_staging_group_in       => id_staging_group_in,
            id_sgroup_inst_owner_in   => id_sgroup_inst_owner_in,
            id_residual_tumor_in      => id_residual_tumor_in,
            id_rtumor_inst_owner_in   => id_rtumor_inst_owner_in,
            id_surgical_margins_in    => id_surgical_margins_in,
            id_smargins_inst_owner_in => id_smargins_inst_owner_in,
            id_lymph_vasc_inv_in      => id_lymph_vasc_inv_in,
            id_lvinv_inst_owner_in    => id_lvinv_inst_owner_in,
            id_other_staging_sys_in   => id_other_staging_sys_in,
            id_ostgsys_inst_owner_in  => id_ostgsys_inst_owner_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            id_prof_create_in         => id_prof_create_in,
            dt_epis_diagnosis_stag_in => dt_epis_diagnosis_stag_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_diag_stag%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_diag_stag%ROWTYPE := rec_in;
    BEGIN
        ins(id_epis_diagnosis_in      => l_rec.id_epis_diagnosis,
            id_staging_basis_in       => l_rec.id_staging_basis,
            id_sbasis_inst_owner_in   => l_rec.id_sbasis_inst_owner,
            num_staging_basis_in      => l_rec.num_staging_basis,
            id_tnm_t_in               => l_rec.id_tnm_t,
            id_tnm_t_inst_owner_in    => l_rec.id_tnm_t_inst_owner,
            code_tnm_t_in             => l_rec.code_tnm_t,
            id_tnm_n_in               => l_rec.id_tnm_n,
            id_tnm_n_inst_owner_in    => l_rec.id_tnm_n_inst_owner,
            code_tnm_n_in             => l_rec.code_tnm_n,
            id_tnm_m_in               => l_rec.id_tnm_m,
            id_tnm_m_inst_owner_in    => l_rec.id_tnm_m_inst_owner,
            code_tnm_m_in             => l_rec.code_tnm_m,
            id_metastatic_sites_in    => l_rec.id_metastatic_sites,
            id_msites_inst_owner_in   => l_rec.id_msites_inst_owner,
            id_staging_group_in       => l_rec.id_staging_group,
            id_sgroup_inst_owner_in   => l_rec.id_sgroup_inst_owner,
            id_residual_tumor_in      => l_rec.id_residual_tumor,
            id_rtumor_inst_owner_in   => l_rec.id_rtumor_inst_owner,
            id_surgical_margins_in    => l_rec.id_surgical_margins,
            id_smargins_inst_owner_in => l_rec.id_smargins_inst_owner,
            id_lymph_vasc_inv_in      => l_rec.id_lymph_vasc_inv,
            id_lvinv_inst_owner_in    => l_rec.id_lvinv_inst_owner,
            id_other_staging_sys_in   => l_rec.id_other_staging_sys,
            id_ostgsys_inst_owner_in  => l_rec.id_ostgsys_inst_owner,
            id_cancel_reason_in       => l_rec.id_cancel_reason,
            cancel_notes_in           => l_rec.cancel_notes,
            id_prof_create_in         => l_rec.id_prof_create,
            dt_epis_diagnosis_stag_in => l_rec.dt_epis_diagnosis_stag,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_diag_stag%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_diag_stag_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_diag_stag
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_DIAGNOSIS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_epis_diagnosis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_STAGING_BASIS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .num_staging_basis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_STAGING_BASIS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_staging_basis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SBASIS_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_sbasis_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TNM_T _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_tnm_t,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TNM_T_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_tnm_t_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CODE_TNM_T _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .code_tnm_t,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TNM_N _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_tnm_n,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TNM_N_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_tnm_n_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CODE_TNM_N _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .code_tnm_n,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TNM_M _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_tnm_m,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TNM_M_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_tnm_m_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CODE_TNM_M _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .code_tnm_m,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_METASTATIC_SITES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_metastatic_sites,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MSITES_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_msites_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_STAGING_GROUP _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_staging_group,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SGROUP_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_sgroup_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RESIDUAL_TUMOR _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_residual_tumor,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RTUMOR_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_rtumor_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SURGICAL_MARGINS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_surgical_margins,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SMARGINS_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_smargins_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_LYMPH_VASC_INV _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_lymph_vasc_inv,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_LVINV_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_lvinv_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_OTHER_STAGING_SYS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_other_staging_sys,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_OSTGSYS_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_ostgsys_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CANCEL_NOTES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .cancel_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CREATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_create,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_EPIS_DIAGNOSIS_STAG _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_epis_diagnosis_stag,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'EPIS_DIAG_STAG',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_diag_stag_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_epis_diagnosis_in       IN epis_diag_stag.id_epis_diagnosis%TYPE,
        id_staging_basis_in        IN epis_diag_stag.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in    IN epis_diag_stag.id_sbasis_inst_owner%TYPE,
        num_staging_basis_in       IN epis_diag_stag.num_staging_basis%TYPE,
        id_tnm_t_in                IN epis_diag_stag.id_tnm_t%TYPE DEFAULT NULL,
        id_tnm_t_nin               IN BOOLEAN := TRUE,
        id_tnm_t_inst_owner_in     IN epis_diag_stag.id_tnm_t_inst_owner%TYPE DEFAULT NULL,
        id_tnm_t_inst_owner_nin    IN BOOLEAN := TRUE,
        code_tnm_t_in              IN epis_diag_stag.code_tnm_t%TYPE DEFAULT NULL,
        code_tnm_t_nin             IN BOOLEAN := TRUE,
        id_tnm_n_in                IN epis_diag_stag.id_tnm_n%TYPE DEFAULT NULL,
        id_tnm_n_nin               IN BOOLEAN := TRUE,
        id_tnm_n_inst_owner_in     IN epis_diag_stag.id_tnm_n_inst_owner%TYPE DEFAULT NULL,
        id_tnm_n_inst_owner_nin    IN BOOLEAN := TRUE,
        code_tnm_n_in              IN epis_diag_stag.code_tnm_n%TYPE DEFAULT NULL,
        code_tnm_n_nin             IN BOOLEAN := TRUE,
        id_tnm_m_in                IN epis_diag_stag.id_tnm_m%TYPE DEFAULT NULL,
        id_tnm_m_nin               IN BOOLEAN := TRUE,
        id_tnm_m_inst_owner_in     IN epis_diag_stag.id_tnm_m_inst_owner%TYPE DEFAULT NULL,
        id_tnm_m_inst_owner_nin    IN BOOLEAN := TRUE,
        code_tnm_m_in              IN epis_diag_stag.code_tnm_m%TYPE DEFAULT NULL,
        code_tnm_m_nin             IN BOOLEAN := TRUE,
        id_metastatic_sites_in     IN epis_diag_stag.id_metastatic_sites%TYPE DEFAULT NULL,
        id_metastatic_sites_nin    IN BOOLEAN := TRUE,
        id_msites_inst_owner_in    IN epis_diag_stag.id_msites_inst_owner%TYPE DEFAULT NULL,
        id_msites_inst_owner_nin   IN BOOLEAN := TRUE,
        id_staging_group_in        IN epis_diag_stag.id_staging_group%TYPE DEFAULT NULL,
        id_staging_group_nin       IN BOOLEAN := TRUE,
        id_sgroup_inst_owner_in    IN epis_diag_stag.id_sgroup_inst_owner%TYPE DEFAULT NULL,
        id_sgroup_inst_owner_nin   IN BOOLEAN := TRUE,
        id_residual_tumor_in       IN epis_diag_stag.id_residual_tumor%TYPE DEFAULT NULL,
        id_residual_tumor_nin      IN BOOLEAN := TRUE,
        id_rtumor_inst_owner_in    IN epis_diag_stag.id_rtumor_inst_owner%TYPE DEFAULT NULL,
        id_rtumor_inst_owner_nin   IN BOOLEAN := TRUE,
        id_surgical_margins_in     IN epis_diag_stag.id_surgical_margins%TYPE DEFAULT NULL,
        id_surgical_margins_nin    IN BOOLEAN := TRUE,
        id_smargins_inst_owner_in  IN epis_diag_stag.id_smargins_inst_owner%TYPE DEFAULT NULL,
        id_smargins_inst_owner_nin IN BOOLEAN := TRUE,
        id_lymph_vasc_inv_in       IN epis_diag_stag.id_lymph_vasc_inv%TYPE DEFAULT NULL,
        id_lymph_vasc_inv_nin      IN BOOLEAN := TRUE,
        id_lvinv_inst_owner_in     IN epis_diag_stag.id_lvinv_inst_owner%TYPE DEFAULT NULL,
        id_lvinv_inst_owner_nin    IN BOOLEAN := TRUE,
        id_other_staging_sys_in    IN epis_diag_stag.id_other_staging_sys%TYPE DEFAULT NULL,
        id_other_staging_sys_nin   IN BOOLEAN := TRUE,
        id_ostgsys_inst_owner_in   IN epis_diag_stag.id_ostgsys_inst_owner%TYPE DEFAULT NULL,
        id_ostgsys_inst_owner_nin  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN epis_diag_stag.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        cancel_notes_in            IN epis_diag_stag.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin           IN BOOLEAN := TRUE,
        id_prof_create_in          IN epis_diag_stag.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin         IN BOOLEAN := TRUE,
        dt_epis_diagnosis_stag_in  IN epis_diag_stag.dt_epis_diagnosis_stag%TYPE DEFAULT NULL,
        dt_epis_diagnosis_stag_nin IN BOOLEAN := TRUE,
        create_user_in             IN epis_diag_stag.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN epis_diag_stag.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN epis_diag_stag.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN epis_diag_stag.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN epis_diag_stag.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN epis_diag_stag.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_id_tnm_t_n               NUMBER(1);
        l_id_tnm_t_inst_owner_n    NUMBER(1);
        l_code_tnm_t_n             NUMBER(1);
        l_id_tnm_n_n               NUMBER(1);
        l_id_tnm_n_inst_owner_n    NUMBER(1);
        l_code_tnm_n_n             NUMBER(1);
        l_id_tnm_m_n               NUMBER(1);
        l_id_tnm_m_inst_owner_n    NUMBER(1);
        l_code_tnm_m_n             NUMBER(1);
        l_id_metastatic_sites_n    NUMBER(1);
        l_id_msites_inst_owner_n   NUMBER(1);
        l_id_staging_group_n       NUMBER(1);
        l_id_sgroup_inst_owner_n   NUMBER(1);
        l_id_residual_tumor_n      NUMBER(1);
        l_id_rtumor_inst_owner_n   NUMBER(1);
        l_id_surgical_margins_n    NUMBER(1);
        l_id_smargins_inst_owner_n NUMBER(1);
        l_id_lymph_vasc_inv_n      NUMBER(1);
        l_id_lvinv_inst_owner_n    NUMBER(1);
        l_id_other_staging_sys_n   NUMBER(1);
        l_id_ostgsys_inst_owner_n  NUMBER(1);
        l_id_cancel_reason_n       NUMBER(1);
        l_cancel_notes_n           NUMBER(1);
        l_id_prof_create_n         NUMBER(1);
        l_dt_epis_diagnosis_stag_n NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
    BEGIN
    
        l_id_tnm_t_n               := sys.diutil.bool_to_int(id_tnm_t_nin);
        l_id_tnm_t_inst_owner_n    := sys.diutil.bool_to_int(id_tnm_t_inst_owner_nin);
        l_code_tnm_t_n             := sys.diutil.bool_to_int(code_tnm_t_nin);
        l_id_tnm_n_n               := sys.diutil.bool_to_int(id_tnm_n_nin);
        l_id_tnm_n_inst_owner_n    := sys.diutil.bool_to_int(id_tnm_n_inst_owner_nin);
        l_code_tnm_n_n             := sys.diutil.bool_to_int(code_tnm_n_nin);
        l_id_tnm_m_n               := sys.diutil.bool_to_int(id_tnm_m_nin);
        l_id_tnm_m_inst_owner_n    := sys.diutil.bool_to_int(id_tnm_m_inst_owner_nin);
        l_code_tnm_m_n             := sys.diutil.bool_to_int(code_tnm_m_nin);
        l_id_metastatic_sites_n    := sys.diutil.bool_to_int(id_metastatic_sites_nin);
        l_id_msites_inst_owner_n   := sys.diutil.bool_to_int(id_msites_inst_owner_nin);
        l_id_staging_group_n       := sys.diutil.bool_to_int(id_staging_group_nin);
        l_id_sgroup_inst_owner_n   := sys.diutil.bool_to_int(id_sgroup_inst_owner_nin);
        l_id_residual_tumor_n      := sys.diutil.bool_to_int(id_residual_tumor_nin);
        l_id_rtumor_inst_owner_n   := sys.diutil.bool_to_int(id_rtumor_inst_owner_nin);
        l_id_surgical_margins_n    := sys.diutil.bool_to_int(id_surgical_margins_nin);
        l_id_smargins_inst_owner_n := sys.diutil.bool_to_int(id_smargins_inst_owner_nin);
        l_id_lymph_vasc_inv_n      := sys.diutil.bool_to_int(id_lymph_vasc_inv_nin);
        l_id_lvinv_inst_owner_n    := sys.diutil.bool_to_int(id_lvinv_inst_owner_nin);
        l_id_other_staging_sys_n   := sys.diutil.bool_to_int(id_other_staging_sys_nin);
        l_id_ostgsys_inst_owner_n  := sys.diutil.bool_to_int(id_ostgsys_inst_owner_nin);
        l_id_cancel_reason_n       := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_cancel_notes_n           := sys.diutil.bool_to_int(cancel_notes_nin);
        l_id_prof_create_n         := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_epis_diagnosis_stag_n := sys.diutil.bool_to_int(dt_epis_diagnosis_stag_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE epis_diag_stag
           SET id_tnm_t               = decode(l_id_tnm_t_n, 0, id_tnm_t_in, nvl(id_tnm_t_in, id_tnm_t)),
               id_tnm_t_inst_owner    = decode(l_id_tnm_t_inst_owner_n,
                                               0,
                                               id_tnm_t_inst_owner_in,
                                               nvl(id_tnm_t_inst_owner_in, id_tnm_t_inst_owner)),
               code_tnm_t             = decode(l_code_tnm_t_n, 0, code_tnm_t_in, nvl(code_tnm_t_in, code_tnm_t)),
               id_tnm_n               = decode(l_id_tnm_n_n, 0, id_tnm_n_in, nvl(id_tnm_n_in, id_tnm_n)),
               id_tnm_n_inst_owner    = decode(l_id_tnm_n_inst_owner_n,
                                               0,
                                               id_tnm_n_inst_owner_in,
                                               nvl(id_tnm_n_inst_owner_in, id_tnm_n_inst_owner)),
               code_tnm_n             = decode(l_code_tnm_n_n, 0, code_tnm_n_in, nvl(code_tnm_n_in, code_tnm_n)),
               id_tnm_m               = decode(l_id_tnm_m_n, 0, id_tnm_m_in, nvl(id_tnm_m_in, id_tnm_m)),
               id_tnm_m_inst_owner    = decode(l_id_tnm_m_inst_owner_n,
                                               0,
                                               id_tnm_m_inst_owner_in,
                                               nvl(id_tnm_m_inst_owner_in, id_tnm_m_inst_owner)),
               code_tnm_m             = decode(l_code_tnm_m_n, 0, code_tnm_m_in, nvl(code_tnm_m_in, code_tnm_m)),
               id_metastatic_sites    = decode(l_id_metastatic_sites_n,
                                               0,
                                               id_metastatic_sites_in,
                                               nvl(id_metastatic_sites_in, id_metastatic_sites)),
               id_msites_inst_owner   = decode(l_id_msites_inst_owner_n,
                                               0,
                                               id_msites_inst_owner_in,
                                               nvl(id_msites_inst_owner_in, id_msites_inst_owner)),
               id_staging_group       = decode(l_id_staging_group_n,
                                               0,
                                               id_staging_group_in,
                                               nvl(id_staging_group_in, id_staging_group)),
               id_sgroup_inst_owner   = decode(l_id_sgroup_inst_owner_n,
                                               0,
                                               id_sgroup_inst_owner_in,
                                               nvl(id_sgroup_inst_owner_in, id_sgroup_inst_owner)),
               id_residual_tumor      = decode(l_id_residual_tumor_n,
                                               0,
                                               id_residual_tumor_in,
                                               nvl(id_residual_tumor_in, id_residual_tumor)),
               id_rtumor_inst_owner   = decode(l_id_rtumor_inst_owner_n,
                                               0,
                                               id_rtumor_inst_owner_in,
                                               nvl(id_rtumor_inst_owner_in, id_rtumor_inst_owner)),
               id_surgical_margins    = decode(l_id_surgical_margins_n,
                                               0,
                                               id_surgical_margins_in,
                                               nvl(id_surgical_margins_in, id_surgical_margins)),
               id_smargins_inst_owner = decode(l_id_smargins_inst_owner_n,
                                               0,
                                               id_smargins_inst_owner_in,
                                               nvl(id_smargins_inst_owner_in, id_smargins_inst_owner)),
               id_lymph_vasc_inv      = decode(l_id_lymph_vasc_inv_n,
                                               0,
                                               id_lymph_vasc_inv_in,
                                               nvl(id_lymph_vasc_inv_in, id_lymph_vasc_inv)),
               id_lvinv_inst_owner    = decode(l_id_lvinv_inst_owner_n,
                                               0,
                                               id_lvinv_inst_owner_in,
                                               nvl(id_lvinv_inst_owner_in, id_lvinv_inst_owner)),
               id_other_staging_sys   = decode(l_id_other_staging_sys_n,
                                               0,
                                               id_other_staging_sys_in,
                                               nvl(id_other_staging_sys_in, id_other_staging_sys)),
               id_ostgsys_inst_owner  = decode(l_id_ostgsys_inst_owner_n,
                                               0,
                                               id_ostgsys_inst_owner_in,
                                               nvl(id_ostgsys_inst_owner_in, id_ostgsys_inst_owner)),
               id_cancel_reason       = decode(l_id_cancel_reason_n,
                                               0,
                                               id_cancel_reason_in,
                                               nvl(id_cancel_reason_in, id_cancel_reason)),
               cancel_notes           = decode(l_cancel_notes_n, 0, cancel_notes_in, nvl(cancel_notes_in, cancel_notes)),
               id_prof_create         = decode(l_id_prof_create_n,
                                               0,
                                               id_prof_create_in,
                                               nvl(id_prof_create_in, id_prof_create)),
               dt_epis_diagnosis_stag = decode(l_dt_epis_diagnosis_stag_n,
                                               0,
                                               dt_epis_diagnosis_stag_in,
                                               nvl(dt_epis_diagnosis_stag_in, dt_epis_diagnosis_stag)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution))
         WHERE id_epis_diagnosis = id_epis_diagnosis_in
           AND id_staging_basis = id_staging_basis_in
           AND id_sbasis_inst_owner = id_sbasis_inst_owner_in
           AND num_staging_basis = num_staging_basis_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_DIAG_STAG');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    IF l_name = 'EDSTGG_CNCPTTRA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_STAGING_GROUP',
                                                        value_in           => id_staging_group_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SGROUP_INST_OWNER',
                                                        value_in           => id_sgroup_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR1_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_STAGING_BASIS',
                                                        value_in           => id_staging_basis_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SBASIS_INST_OWNER',
                                                        value_in           => id_sbasis_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR2_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_T',
                                                        value_in           => id_tnm_t_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_T_INST_OWNER',
                                                        value_in           => id_tnm_t_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR3_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_N',
                                                        value_in           => id_tnm_n_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_N_INST_OWNER',
                                                        value_in           => id_tnm_n_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR4_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_M',
                                                        value_in           => id_tnm_m_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_M_INST_OWNER',
                                                        value_in           => id_tnm_m_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR5_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_METASTATIC_SITES',
                                                        value_in           => id_metastatic_sites_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MSITES_INST_OWNER',
                                                        value_in           => id_msites_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR6_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESIDUAL_TUMOR',
                                                        value_in           => id_residual_tumor_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RTUMOR_INST_OWNER',
                                                        value_in           => id_rtumor_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR7_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SURGICAL_MARGINS',
                                                        value_in           => id_surgical_margins_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SMARGINS_INST_OWNER',
                                                        value_in           => id_smargins_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR8_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LYMPH_VASC_INV',
                                                        value_in           => id_lymph_vasc_inv_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LVINV_INST_OWNER',
                                                        value_in           => id_lvinv_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR9_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OTHER_STAGING_SYS',
                                                        value_in           => id_other_staging_sys_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OSTGSYS_INST_OWNER',
                                                        value_in           => id_ostgsys_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'EDSTGG_ED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DIAGNOSIS',
                                                        value_in           => id_epis_diagnosis_in);
                    END IF;
                    IF l_name = 'EDSTGG_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATE',
                                                        value_in           => id_prof_create_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_epis_diagnosis_in       IN epis_diag_stag.id_epis_diagnosis%TYPE,
        id_staging_basis_in        IN epis_diag_stag.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in    IN epis_diag_stag.id_sbasis_inst_owner%TYPE,
        num_staging_basis_in       IN epis_diag_stag.num_staging_basis%TYPE,
        id_tnm_t_in                IN epis_diag_stag.id_tnm_t%TYPE DEFAULT NULL,
        id_tnm_t_nin               IN BOOLEAN := TRUE,
        id_tnm_t_inst_owner_in     IN epis_diag_stag.id_tnm_t_inst_owner%TYPE DEFAULT NULL,
        id_tnm_t_inst_owner_nin    IN BOOLEAN := TRUE,
        code_tnm_t_in              IN epis_diag_stag.code_tnm_t%TYPE DEFAULT NULL,
        code_tnm_t_nin             IN BOOLEAN := TRUE,
        id_tnm_n_in                IN epis_diag_stag.id_tnm_n%TYPE DEFAULT NULL,
        id_tnm_n_nin               IN BOOLEAN := TRUE,
        id_tnm_n_inst_owner_in     IN epis_diag_stag.id_tnm_n_inst_owner%TYPE DEFAULT NULL,
        id_tnm_n_inst_owner_nin    IN BOOLEAN := TRUE,
        code_tnm_n_in              IN epis_diag_stag.code_tnm_n%TYPE DEFAULT NULL,
        code_tnm_n_nin             IN BOOLEAN := TRUE,
        id_tnm_m_in                IN epis_diag_stag.id_tnm_m%TYPE DEFAULT NULL,
        id_tnm_m_nin               IN BOOLEAN := TRUE,
        id_tnm_m_inst_owner_in     IN epis_diag_stag.id_tnm_m_inst_owner%TYPE DEFAULT NULL,
        id_tnm_m_inst_owner_nin    IN BOOLEAN := TRUE,
        code_tnm_m_in              IN epis_diag_stag.code_tnm_m%TYPE DEFAULT NULL,
        code_tnm_m_nin             IN BOOLEAN := TRUE,
        id_metastatic_sites_in     IN epis_diag_stag.id_metastatic_sites%TYPE DEFAULT NULL,
        id_metastatic_sites_nin    IN BOOLEAN := TRUE,
        id_msites_inst_owner_in    IN epis_diag_stag.id_msites_inst_owner%TYPE DEFAULT NULL,
        id_msites_inst_owner_nin   IN BOOLEAN := TRUE,
        id_staging_group_in        IN epis_diag_stag.id_staging_group%TYPE DEFAULT NULL,
        id_staging_group_nin       IN BOOLEAN := TRUE,
        id_sgroup_inst_owner_in    IN epis_diag_stag.id_sgroup_inst_owner%TYPE DEFAULT NULL,
        id_sgroup_inst_owner_nin   IN BOOLEAN := TRUE,
        id_residual_tumor_in       IN epis_diag_stag.id_residual_tumor%TYPE DEFAULT NULL,
        id_residual_tumor_nin      IN BOOLEAN := TRUE,
        id_rtumor_inst_owner_in    IN epis_diag_stag.id_rtumor_inst_owner%TYPE DEFAULT NULL,
        id_rtumor_inst_owner_nin   IN BOOLEAN := TRUE,
        id_surgical_margins_in     IN epis_diag_stag.id_surgical_margins%TYPE DEFAULT NULL,
        id_surgical_margins_nin    IN BOOLEAN := TRUE,
        id_smargins_inst_owner_in  IN epis_diag_stag.id_smargins_inst_owner%TYPE DEFAULT NULL,
        id_smargins_inst_owner_nin IN BOOLEAN := TRUE,
        id_lymph_vasc_inv_in       IN epis_diag_stag.id_lymph_vasc_inv%TYPE DEFAULT NULL,
        id_lymph_vasc_inv_nin      IN BOOLEAN := TRUE,
        id_lvinv_inst_owner_in     IN epis_diag_stag.id_lvinv_inst_owner%TYPE DEFAULT NULL,
        id_lvinv_inst_owner_nin    IN BOOLEAN := TRUE,
        id_other_staging_sys_in    IN epis_diag_stag.id_other_staging_sys%TYPE DEFAULT NULL,
        id_other_staging_sys_nin   IN BOOLEAN := TRUE,
        id_ostgsys_inst_owner_in   IN epis_diag_stag.id_ostgsys_inst_owner%TYPE DEFAULT NULL,
        id_ostgsys_inst_owner_nin  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN epis_diag_stag.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        cancel_notes_in            IN epis_diag_stag.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin           IN BOOLEAN := TRUE,
        id_prof_create_in          IN epis_diag_stag.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin         IN BOOLEAN := TRUE,
        dt_epis_diagnosis_stag_in  IN epis_diag_stag.dt_epis_diagnosis_stag%TYPE DEFAULT NULL,
        dt_epis_diagnosis_stag_nin IN BOOLEAN := TRUE,
        create_user_in             IN epis_diag_stag.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN epis_diag_stag.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN epis_diag_stag.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN epis_diag_stag.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN epis_diag_stag.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN epis_diag_stag.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_diagnosis_in       => id_epis_diagnosis_in,
            id_staging_basis_in        => id_staging_basis_in,
            id_sbasis_inst_owner_in    => id_sbasis_inst_owner_in,
            num_staging_basis_in       => num_staging_basis_in,
            id_tnm_t_in                => id_tnm_t_in,
            id_tnm_t_nin               => id_tnm_t_nin,
            id_tnm_t_inst_owner_in     => id_tnm_t_inst_owner_in,
            id_tnm_t_inst_owner_nin    => id_tnm_t_inst_owner_nin,
            code_tnm_t_in              => code_tnm_t_in,
            code_tnm_t_nin             => code_tnm_t_nin,
            id_tnm_n_in                => id_tnm_n_in,
            id_tnm_n_nin               => id_tnm_n_nin,
            id_tnm_n_inst_owner_in     => id_tnm_n_inst_owner_in,
            id_tnm_n_inst_owner_nin    => id_tnm_n_inst_owner_nin,
            code_tnm_n_in              => code_tnm_n_in,
            code_tnm_n_nin             => code_tnm_n_nin,
            id_tnm_m_in                => id_tnm_m_in,
            id_tnm_m_nin               => id_tnm_m_nin,
            id_tnm_m_inst_owner_in     => id_tnm_m_inst_owner_in,
            id_tnm_m_inst_owner_nin    => id_tnm_m_inst_owner_nin,
            code_tnm_m_in              => code_tnm_m_in,
            code_tnm_m_nin             => code_tnm_m_nin,
            id_metastatic_sites_in     => id_metastatic_sites_in,
            id_metastatic_sites_nin    => id_metastatic_sites_nin,
            id_msites_inst_owner_in    => id_msites_inst_owner_in,
            id_msites_inst_owner_nin   => id_msites_inst_owner_nin,
            id_staging_group_in        => id_staging_group_in,
            id_staging_group_nin       => id_staging_group_nin,
            id_sgroup_inst_owner_in    => id_sgroup_inst_owner_in,
            id_sgroup_inst_owner_nin   => id_sgroup_inst_owner_nin,
            id_residual_tumor_in       => id_residual_tumor_in,
            id_residual_tumor_nin      => id_residual_tumor_nin,
            id_rtumor_inst_owner_in    => id_rtumor_inst_owner_in,
            id_rtumor_inst_owner_nin   => id_rtumor_inst_owner_nin,
            id_surgical_margins_in     => id_surgical_margins_in,
            id_surgical_margins_nin    => id_surgical_margins_nin,
            id_smargins_inst_owner_in  => id_smargins_inst_owner_in,
            id_smargins_inst_owner_nin => id_smargins_inst_owner_nin,
            id_lymph_vasc_inv_in       => id_lymph_vasc_inv_in,
            id_lymph_vasc_inv_nin      => id_lymph_vasc_inv_nin,
            id_lvinv_inst_owner_in     => id_lvinv_inst_owner_in,
            id_lvinv_inst_owner_nin    => id_lvinv_inst_owner_nin,
            id_other_staging_sys_in    => id_other_staging_sys_in,
            id_other_staging_sys_nin   => id_other_staging_sys_nin,
            id_ostgsys_inst_owner_in   => id_ostgsys_inst_owner_in,
            id_ostgsys_inst_owner_nin  => id_ostgsys_inst_owner_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            cancel_notes_in            => cancel_notes_in,
            cancel_notes_nin           => cancel_notes_nin,
            id_prof_create_in          => id_prof_create_in,
            id_prof_create_nin         => id_prof_create_nin,
            dt_epis_diagnosis_stag_in  => dt_epis_diagnosis_stag_in,
            dt_epis_diagnosis_stag_nin => dt_epis_diagnosis_stag_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_tnm_t_in                IN epis_diag_stag.id_tnm_t%TYPE DEFAULT NULL,
        id_tnm_t_nin               IN BOOLEAN := TRUE,
        id_tnm_t_inst_owner_in     IN epis_diag_stag.id_tnm_t_inst_owner%TYPE DEFAULT NULL,
        id_tnm_t_inst_owner_nin    IN BOOLEAN := TRUE,
        code_tnm_t_in              IN epis_diag_stag.code_tnm_t%TYPE DEFAULT NULL,
        code_tnm_t_nin             IN BOOLEAN := TRUE,
        id_tnm_n_in                IN epis_diag_stag.id_tnm_n%TYPE DEFAULT NULL,
        id_tnm_n_nin               IN BOOLEAN := TRUE,
        id_tnm_n_inst_owner_in     IN epis_diag_stag.id_tnm_n_inst_owner%TYPE DEFAULT NULL,
        id_tnm_n_inst_owner_nin    IN BOOLEAN := TRUE,
        code_tnm_n_in              IN epis_diag_stag.code_tnm_n%TYPE DEFAULT NULL,
        code_tnm_n_nin             IN BOOLEAN := TRUE,
        id_tnm_m_in                IN epis_diag_stag.id_tnm_m%TYPE DEFAULT NULL,
        id_tnm_m_nin               IN BOOLEAN := TRUE,
        id_tnm_m_inst_owner_in     IN epis_diag_stag.id_tnm_m_inst_owner%TYPE DEFAULT NULL,
        id_tnm_m_inst_owner_nin    IN BOOLEAN := TRUE,
        code_tnm_m_in              IN epis_diag_stag.code_tnm_m%TYPE DEFAULT NULL,
        code_tnm_m_nin             IN BOOLEAN := TRUE,
        id_metastatic_sites_in     IN epis_diag_stag.id_metastatic_sites%TYPE DEFAULT NULL,
        id_metastatic_sites_nin    IN BOOLEAN := TRUE,
        id_msites_inst_owner_in    IN epis_diag_stag.id_msites_inst_owner%TYPE DEFAULT NULL,
        id_msites_inst_owner_nin   IN BOOLEAN := TRUE,
        id_staging_group_in        IN epis_diag_stag.id_staging_group%TYPE DEFAULT NULL,
        id_staging_group_nin       IN BOOLEAN := TRUE,
        id_sgroup_inst_owner_in    IN epis_diag_stag.id_sgroup_inst_owner%TYPE DEFAULT NULL,
        id_sgroup_inst_owner_nin   IN BOOLEAN := TRUE,
        id_residual_tumor_in       IN epis_diag_stag.id_residual_tumor%TYPE DEFAULT NULL,
        id_residual_tumor_nin      IN BOOLEAN := TRUE,
        id_rtumor_inst_owner_in    IN epis_diag_stag.id_rtumor_inst_owner%TYPE DEFAULT NULL,
        id_rtumor_inst_owner_nin   IN BOOLEAN := TRUE,
        id_surgical_margins_in     IN epis_diag_stag.id_surgical_margins%TYPE DEFAULT NULL,
        id_surgical_margins_nin    IN BOOLEAN := TRUE,
        id_smargins_inst_owner_in  IN epis_diag_stag.id_smargins_inst_owner%TYPE DEFAULT NULL,
        id_smargins_inst_owner_nin IN BOOLEAN := TRUE,
        id_lymph_vasc_inv_in       IN epis_diag_stag.id_lymph_vasc_inv%TYPE DEFAULT NULL,
        id_lymph_vasc_inv_nin      IN BOOLEAN := TRUE,
        id_lvinv_inst_owner_in     IN epis_diag_stag.id_lvinv_inst_owner%TYPE DEFAULT NULL,
        id_lvinv_inst_owner_nin    IN BOOLEAN := TRUE,
        id_other_staging_sys_in    IN epis_diag_stag.id_other_staging_sys%TYPE DEFAULT NULL,
        id_other_staging_sys_nin   IN BOOLEAN := TRUE,
        id_ostgsys_inst_owner_in   IN epis_diag_stag.id_ostgsys_inst_owner%TYPE DEFAULT NULL,
        id_ostgsys_inst_owner_nin  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN epis_diag_stag.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        cancel_notes_in            IN epis_diag_stag.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin           IN BOOLEAN := TRUE,
        id_prof_create_in          IN epis_diag_stag.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin         IN BOOLEAN := TRUE,
        dt_epis_diagnosis_stag_in  IN epis_diag_stag.dt_epis_diagnosis_stag%TYPE DEFAULT NULL,
        dt_epis_diagnosis_stag_nin IN BOOLEAN := TRUE,
        create_user_in             IN epis_diag_stag.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN epis_diag_stag.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN epis_diag_stag.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN epis_diag_stag.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN epis_diag_stag.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN epis_diag_stag.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        where_in                   VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_id_tnm_t_n               NUMBER(1);
        l_id_tnm_t_inst_owner_n    NUMBER(1);
        l_code_tnm_t_n             NUMBER(1);
        l_id_tnm_n_n               NUMBER(1);
        l_id_tnm_n_inst_owner_n    NUMBER(1);
        l_code_tnm_n_n             NUMBER(1);
        l_id_tnm_m_n               NUMBER(1);
        l_id_tnm_m_inst_owner_n    NUMBER(1);
        l_code_tnm_m_n             NUMBER(1);
        l_id_metastatic_sites_n    NUMBER(1);
        l_id_msites_inst_owner_n   NUMBER(1);
        l_id_staging_group_n       NUMBER(1);
        l_id_sgroup_inst_owner_n   NUMBER(1);
        l_id_residual_tumor_n      NUMBER(1);
        l_id_rtumor_inst_owner_n   NUMBER(1);
        l_id_surgical_margins_n    NUMBER(1);
        l_id_smargins_inst_owner_n NUMBER(1);
        l_id_lymph_vasc_inv_n      NUMBER(1);
        l_id_lvinv_inst_owner_n    NUMBER(1);
        l_id_other_staging_sys_n   NUMBER(1);
        l_id_ostgsys_inst_owner_n  NUMBER(1);
        l_id_cancel_reason_n       NUMBER(1);
        l_cancel_notes_n           NUMBER(1);
        l_id_prof_create_n         NUMBER(1);
        l_dt_epis_diagnosis_stag_n NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        id_epis_diagnosis_in       epis_diag_stag.id_epis_diagnosis%TYPE;
        id_staging_basis_in        epis_diag_stag.id_staging_basis%TYPE;
        id_sbasis_inst_owner_in    epis_diag_stag.id_sbasis_inst_owner%TYPE;
        num_staging_basis_in       epis_diag_stag.num_staging_basis%TYPE;
    BEGIN
    
        l_id_tnm_t_n               := sys.diutil.bool_to_int(id_tnm_t_nin);
        l_id_tnm_t_inst_owner_n    := sys.diutil.bool_to_int(id_tnm_t_inst_owner_nin);
        l_code_tnm_t_n             := sys.diutil.bool_to_int(code_tnm_t_nin);
        l_id_tnm_n_n               := sys.diutil.bool_to_int(id_tnm_n_nin);
        l_id_tnm_n_inst_owner_n    := sys.diutil.bool_to_int(id_tnm_n_inst_owner_nin);
        l_code_tnm_n_n             := sys.diutil.bool_to_int(code_tnm_n_nin);
        l_id_tnm_m_n               := sys.diutil.bool_to_int(id_tnm_m_nin);
        l_id_tnm_m_inst_owner_n    := sys.diutil.bool_to_int(id_tnm_m_inst_owner_nin);
        l_code_tnm_m_n             := sys.diutil.bool_to_int(code_tnm_m_nin);
        l_id_metastatic_sites_n    := sys.diutil.bool_to_int(id_metastatic_sites_nin);
        l_id_msites_inst_owner_n   := sys.diutil.bool_to_int(id_msites_inst_owner_nin);
        l_id_staging_group_n       := sys.diutil.bool_to_int(id_staging_group_nin);
        l_id_sgroup_inst_owner_n   := sys.diutil.bool_to_int(id_sgroup_inst_owner_nin);
        l_id_residual_tumor_n      := sys.diutil.bool_to_int(id_residual_tumor_nin);
        l_id_rtumor_inst_owner_n   := sys.diutil.bool_to_int(id_rtumor_inst_owner_nin);
        l_id_surgical_margins_n    := sys.diutil.bool_to_int(id_surgical_margins_nin);
        l_id_smargins_inst_owner_n := sys.diutil.bool_to_int(id_smargins_inst_owner_nin);
        l_id_lymph_vasc_inv_n      := sys.diutil.bool_to_int(id_lymph_vasc_inv_nin);
        l_id_lvinv_inst_owner_n    := sys.diutil.bool_to_int(id_lvinv_inst_owner_nin);
        l_id_other_staging_sys_n   := sys.diutil.bool_to_int(id_other_staging_sys_nin);
        l_id_ostgsys_inst_owner_n  := sys.diutil.bool_to_int(id_ostgsys_inst_owner_nin);
        l_id_cancel_reason_n       := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_cancel_notes_n           := sys.diutil.bool_to_int(cancel_notes_nin);
        l_id_prof_create_n         := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_epis_diagnosis_stag_n := sys.diutil.bool_to_int(dt_epis_diagnosis_stag_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE EPIS_DIAG_STAG SET ' || ' ID_TNM_T = decode (' || l_id_tnm_t_n ||
                 ',0,:id_tnm_t_in, NVL (:id_tnm_t_in, ID_TNM_T)) ' || ',' || ' ID_TNM_T_INST_OWNER = decode (' ||
                 l_id_tnm_t_inst_owner_n ||
                 ',0,:id_tnm_t_inst_owner_in, NVL (:id_tnm_t_inst_owner_in, ID_TNM_T_INST_OWNER)) ' || ',' ||
                 ' CODE_TNM_T = decode (' || l_code_tnm_t_n || ',0,:code_tnm_t_in, NVL (:code_tnm_t_in, CODE_TNM_T)) ' || ',' ||
                 ' ID_TNM_N = decode (' || l_id_tnm_n_n || ',0,:id_tnm_n_in, NVL (:id_tnm_n_in, ID_TNM_N)) ' || ',' ||
                 ' ID_TNM_N_INST_OWNER = decode (' || l_id_tnm_n_inst_owner_n ||
                 ',0,:id_tnm_n_inst_owner_in, NVL (:id_tnm_n_inst_owner_in, ID_TNM_N_INST_OWNER)) ' || ',' ||
                 ' CODE_TNM_N = decode (' || l_code_tnm_n_n || ',0,:code_tnm_n_in, NVL (:code_tnm_n_in, CODE_TNM_N)) ' || ',' ||
                 ' ID_TNM_M = decode (' || l_id_tnm_m_n || ',0,:id_tnm_m_in, NVL (:id_tnm_m_in, ID_TNM_M)) ' || ',' ||
                 ' ID_TNM_M_INST_OWNER = decode (' || l_id_tnm_m_inst_owner_n ||
                 ',0,:id_tnm_m_inst_owner_in, NVL (:id_tnm_m_inst_owner_in, ID_TNM_M_INST_OWNER)) ' || ',' ||
                 ' CODE_TNM_M = decode (' || l_code_tnm_m_n || ',0,:code_tnm_m_in, NVL (:code_tnm_m_in, CODE_TNM_M)) ' || ',' ||
                 ' ID_METASTATIC_SITES = decode (' || l_id_metastatic_sites_n ||
                 ',0,:id_metastatic_sites_in, NVL (:id_metastatic_sites_in, ID_METASTATIC_SITES)) ' || ',' ||
                 ' ID_MSITES_INST_OWNER = decode (' || l_id_msites_inst_owner_n ||
                 ',0,:id_msites_inst_owner_in, NVL (:id_msites_inst_owner_in, ID_MSITES_INST_OWNER)) ' || ',' ||
                 ' ID_STAGING_GROUP = decode (' || l_id_staging_group_n ||
                 ',0,:id_staging_group_in, NVL (:id_staging_group_in, ID_STAGING_GROUP)) ' || ',' ||
                 ' ID_SGROUP_INST_OWNER = decode (' || l_id_sgroup_inst_owner_n ||
                 ',0,:id_sgroup_inst_owner_in, NVL (:id_sgroup_inst_owner_in, ID_SGROUP_INST_OWNER)) ' || ',' ||
                 ' ID_RESIDUAL_TUMOR = decode (' || l_id_residual_tumor_n ||
                 ',0,:id_residual_tumor_in, NVL (:id_residual_tumor_in, ID_RESIDUAL_TUMOR)) ' || ',' ||
                 ' ID_RTUMOR_INST_OWNER = decode (' || l_id_rtumor_inst_owner_n ||
                 ',0,:id_rtumor_inst_owner_in, NVL (:id_rtumor_inst_owner_in, ID_RTUMOR_INST_OWNER)) ' || ',' ||
                 ' ID_SURGICAL_MARGINS = decode (' || l_id_surgical_margins_n ||
                 ',0,:id_surgical_margins_in, NVL (:id_surgical_margins_in, ID_SURGICAL_MARGINS)) ' || ',' ||
                 ' ID_SMARGINS_INST_OWNER = decode (' || l_id_smargins_inst_owner_n ||
                 ',0,:id_smargins_inst_owner_in, NVL (:id_smargins_inst_owner_in, ID_SMARGINS_INST_OWNER)) ' || ',' ||
                 ' ID_LYMPH_VASC_INV = decode (' || l_id_lymph_vasc_inv_n ||
                 ',0,:id_lymph_vasc_inv_in, NVL (:id_lymph_vasc_inv_in, ID_LYMPH_VASC_INV)) ' || ',' ||
                 ' ID_LVINV_INST_OWNER = decode (' || l_id_lvinv_inst_owner_n ||
                 ',0,:id_lvinv_inst_owner_in, NVL (:id_lvinv_inst_owner_in, ID_LVINV_INST_OWNER)) ' || ',' ||
                 ' ID_OTHER_STAGING_SYS = decode (' || l_id_other_staging_sys_n ||
                 ',0,:id_other_staging_sys_in, NVL (:id_other_staging_sys_in, ID_OTHER_STAGING_SYS)) ' || ',' ||
                 ' ID_OSTGSYS_INST_OWNER = decode (' || l_id_ostgsys_inst_owner_n ||
                 ',0,:id_ostgsys_inst_owner_in, NVL (:id_ostgsys_inst_owner_in, ID_OSTGSYS_INST_OWNER)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' CANCEL_NOTES = decode (' || l_cancel_notes_n ||
                 ',0,:cancel_notes_in, NVL (:cancel_notes_in, CANCEL_NOTES)) ' || ',' || ' ID_PROF_CREATE = decode (' ||
                 l_id_prof_create_n || ',0,:id_prof_create_in, NVL (:id_prof_create_in, ID_PROF_CREATE)) ' || ',' ||
                 ' DT_EPIS_DIAGNOSIS_STAG = decode (' || l_dt_epis_diagnosis_stag_n ||
                 ',0,:dt_epis_diagnosis_stag_in, NVL (:dt_epis_diagnosis_stag_in, DT_EPIS_DIAGNOSIS_STAG)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_tnm_t_in, id_tnm_t_inst_owner_in, code_tnm_t_in, id_tnm_n_in, id_tnm_n_inst_owner_in, code_tnm_n_in, id_tnm_m_in, id_tnm_m_inst_owner_in, code_tnm_m_in, id_metastatic_sites_in, id_msites_inst_owner_in, id_staging_group_in, id_sgroup_inst_owner_in, id_residual_tumor_in, id_rtumor_inst_owner_in, id_surgical_margins_in, id_smargins_inst_owner_in, id_lymph_vasc_inv_in, id_lvinv_inst_owner_in, id_other_staging_sys_in, id_ostgsys_inst_owner_in, id_cancel_reason_in, cancel_notes_in, id_prof_create_in, dt_epis_diagnosis_stag_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_DIAG_STAG');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    IF l_name = 'EDSTGG_CNCPTTRA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_STAGING_GROUP',
                                                        value_in           => id_staging_group_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SGROUP_INST_OWNER',
                                                        value_in           => id_sgroup_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR1_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_STAGING_BASIS',
                                                        value_in           => id_staging_basis_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SBASIS_INST_OWNER',
                                                        value_in           => id_sbasis_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR2_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_T',
                                                        value_in           => id_tnm_t_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_T_INST_OWNER',
                                                        value_in           => id_tnm_t_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR3_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_N',
                                                        value_in           => id_tnm_n_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_N_INST_OWNER',
                                                        value_in           => id_tnm_n_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR4_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_M',
                                                        value_in           => id_tnm_m_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TNM_M_INST_OWNER',
                                                        value_in           => id_tnm_m_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR5_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_METASTATIC_SITES',
                                                        value_in           => id_metastatic_sites_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MSITES_INST_OWNER',
                                                        value_in           => id_msites_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR6_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESIDUAL_TUMOR',
                                                        value_in           => id_residual_tumor_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RTUMOR_INST_OWNER',
                                                        value_in           => id_rtumor_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR7_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SURGICAL_MARGINS',
                                                        value_in           => id_surgical_margins_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SMARGINS_INST_OWNER',
                                                        value_in           => id_smargins_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR8_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LYMPH_VASC_INV',
                                                        value_in           => id_lymph_vasc_inv_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LVINV_INST_OWNER',
                                                        value_in           => id_lvinv_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CNCPTTR9_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OTHER_STAGING_SYS',
                                                        value_in           => id_other_staging_sys_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OSTGSYS_INST_OWNER',
                                                        value_in           => id_ostgsys_inst_owner_in);
                    END IF;
                    IF l_name = 'EDSTGG_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'EDSTGG_ED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DIAGNOSIS',
                                                        value_in           => id_epis_diagnosis_in);
                    END IF;
                    IF l_name = 'EDSTGG_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATE',
                                                        value_in           => id_prof_create_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_tnm_t_in                IN epis_diag_stag.id_tnm_t%TYPE DEFAULT NULL,
        id_tnm_t_nin               IN BOOLEAN := TRUE,
        id_tnm_t_inst_owner_in     IN epis_diag_stag.id_tnm_t_inst_owner%TYPE DEFAULT NULL,
        id_tnm_t_inst_owner_nin    IN BOOLEAN := TRUE,
        code_tnm_t_in              IN epis_diag_stag.code_tnm_t%TYPE DEFAULT NULL,
        code_tnm_t_nin             IN BOOLEAN := TRUE,
        id_tnm_n_in                IN epis_diag_stag.id_tnm_n%TYPE DEFAULT NULL,
        id_tnm_n_nin               IN BOOLEAN := TRUE,
        id_tnm_n_inst_owner_in     IN epis_diag_stag.id_tnm_n_inst_owner%TYPE DEFAULT NULL,
        id_tnm_n_inst_owner_nin    IN BOOLEAN := TRUE,
        code_tnm_n_in              IN epis_diag_stag.code_tnm_n%TYPE DEFAULT NULL,
        code_tnm_n_nin             IN BOOLEAN := TRUE,
        id_tnm_m_in                IN epis_diag_stag.id_tnm_m%TYPE DEFAULT NULL,
        id_tnm_m_nin               IN BOOLEAN := TRUE,
        id_tnm_m_inst_owner_in     IN epis_diag_stag.id_tnm_m_inst_owner%TYPE DEFAULT NULL,
        id_tnm_m_inst_owner_nin    IN BOOLEAN := TRUE,
        code_tnm_m_in              IN epis_diag_stag.code_tnm_m%TYPE DEFAULT NULL,
        code_tnm_m_nin             IN BOOLEAN := TRUE,
        id_metastatic_sites_in     IN epis_diag_stag.id_metastatic_sites%TYPE DEFAULT NULL,
        id_metastatic_sites_nin    IN BOOLEAN := TRUE,
        id_msites_inst_owner_in    IN epis_diag_stag.id_msites_inst_owner%TYPE DEFAULT NULL,
        id_msites_inst_owner_nin   IN BOOLEAN := TRUE,
        id_staging_group_in        IN epis_diag_stag.id_staging_group%TYPE DEFAULT NULL,
        id_staging_group_nin       IN BOOLEAN := TRUE,
        id_sgroup_inst_owner_in    IN epis_diag_stag.id_sgroup_inst_owner%TYPE DEFAULT NULL,
        id_sgroup_inst_owner_nin   IN BOOLEAN := TRUE,
        id_residual_tumor_in       IN epis_diag_stag.id_residual_tumor%TYPE DEFAULT NULL,
        id_residual_tumor_nin      IN BOOLEAN := TRUE,
        id_rtumor_inst_owner_in    IN epis_diag_stag.id_rtumor_inst_owner%TYPE DEFAULT NULL,
        id_rtumor_inst_owner_nin   IN BOOLEAN := TRUE,
        id_surgical_margins_in     IN epis_diag_stag.id_surgical_margins%TYPE DEFAULT NULL,
        id_surgical_margins_nin    IN BOOLEAN := TRUE,
        id_smargins_inst_owner_in  IN epis_diag_stag.id_smargins_inst_owner%TYPE DEFAULT NULL,
        id_smargins_inst_owner_nin IN BOOLEAN := TRUE,
        id_lymph_vasc_inv_in       IN epis_diag_stag.id_lymph_vasc_inv%TYPE DEFAULT NULL,
        id_lymph_vasc_inv_nin      IN BOOLEAN := TRUE,
        id_lvinv_inst_owner_in     IN epis_diag_stag.id_lvinv_inst_owner%TYPE DEFAULT NULL,
        id_lvinv_inst_owner_nin    IN BOOLEAN := TRUE,
        id_other_staging_sys_in    IN epis_diag_stag.id_other_staging_sys%TYPE DEFAULT NULL,
        id_other_staging_sys_nin   IN BOOLEAN := TRUE,
        id_ostgsys_inst_owner_in   IN epis_diag_stag.id_ostgsys_inst_owner%TYPE DEFAULT NULL,
        id_ostgsys_inst_owner_nin  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN epis_diag_stag.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        cancel_notes_in            IN epis_diag_stag.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin           IN BOOLEAN := TRUE,
        id_prof_create_in          IN epis_diag_stag.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin         IN BOOLEAN := TRUE,
        dt_epis_diagnosis_stag_in  IN epis_diag_stag.dt_epis_diagnosis_stag%TYPE DEFAULT NULL,
        dt_epis_diagnosis_stag_nin IN BOOLEAN := TRUE,
        create_user_in             IN epis_diag_stag.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN epis_diag_stag.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN epis_diag_stag.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN epis_diag_stag.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN epis_diag_stag.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN epis_diag_stag.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        where_in                   VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_tnm_t_in                => id_tnm_t_in,
            id_tnm_t_nin               => id_tnm_t_nin,
            id_tnm_t_inst_owner_in     => id_tnm_t_inst_owner_in,
            id_tnm_t_inst_owner_nin    => id_tnm_t_inst_owner_nin,
            code_tnm_t_in              => code_tnm_t_in,
            code_tnm_t_nin             => code_tnm_t_nin,
            id_tnm_n_in                => id_tnm_n_in,
            id_tnm_n_nin               => id_tnm_n_nin,
            id_tnm_n_inst_owner_in     => id_tnm_n_inst_owner_in,
            id_tnm_n_inst_owner_nin    => id_tnm_n_inst_owner_nin,
            code_tnm_n_in              => code_tnm_n_in,
            code_tnm_n_nin             => code_tnm_n_nin,
            id_tnm_m_in                => id_tnm_m_in,
            id_tnm_m_nin               => id_tnm_m_nin,
            id_tnm_m_inst_owner_in     => id_tnm_m_inst_owner_in,
            id_tnm_m_inst_owner_nin    => id_tnm_m_inst_owner_nin,
            code_tnm_m_in              => code_tnm_m_in,
            code_tnm_m_nin             => code_tnm_m_nin,
            id_metastatic_sites_in     => id_metastatic_sites_in,
            id_metastatic_sites_nin    => id_metastatic_sites_nin,
            id_msites_inst_owner_in    => id_msites_inst_owner_in,
            id_msites_inst_owner_nin   => id_msites_inst_owner_nin,
            id_staging_group_in        => id_staging_group_in,
            id_staging_group_nin       => id_staging_group_nin,
            id_sgroup_inst_owner_in    => id_sgroup_inst_owner_in,
            id_sgroup_inst_owner_nin   => id_sgroup_inst_owner_nin,
            id_residual_tumor_in       => id_residual_tumor_in,
            id_residual_tumor_nin      => id_residual_tumor_nin,
            id_rtumor_inst_owner_in    => id_rtumor_inst_owner_in,
            id_rtumor_inst_owner_nin   => id_rtumor_inst_owner_nin,
            id_surgical_margins_in     => id_surgical_margins_in,
            id_surgical_margins_nin    => id_surgical_margins_nin,
            id_smargins_inst_owner_in  => id_smargins_inst_owner_in,
            id_smargins_inst_owner_nin => id_smargins_inst_owner_nin,
            id_lymph_vasc_inv_in       => id_lymph_vasc_inv_in,
            id_lymph_vasc_inv_nin      => id_lymph_vasc_inv_nin,
            id_lvinv_inst_owner_in     => id_lvinv_inst_owner_in,
            id_lvinv_inst_owner_nin    => id_lvinv_inst_owner_nin,
            id_other_staging_sys_in    => id_other_staging_sys_in,
            id_other_staging_sys_nin   => id_other_staging_sys_nin,
            id_ostgsys_inst_owner_in   => id_ostgsys_inst_owner_in,
            id_ostgsys_inst_owner_nin  => id_ostgsys_inst_owner_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            cancel_notes_in            => cancel_notes_in,
            cancel_notes_nin           => cancel_notes_nin,
            id_prof_create_in          => id_prof_create_in,
            id_prof_create_nin         => id_prof_create_nin,
            dt_epis_diagnosis_stag_in  => dt_epis_diagnosis_stag_in,
            dt_epis_diagnosis_stag_nin => dt_epis_diagnosis_stag_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_diag_stag%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_diagnosis_in      => rec_in.id_epis_diagnosis,
            num_staging_basis_in      => rec_in.num_staging_basis,
            id_staging_basis_in       => rec_in.id_staging_basis,
            id_sbasis_inst_owner_in   => rec_in.id_sbasis_inst_owner,
            id_tnm_t_in               => rec_in.id_tnm_t,
            id_tnm_t_inst_owner_in    => rec_in.id_tnm_t_inst_owner,
            code_tnm_t_in             => rec_in.code_tnm_t,
            id_tnm_n_in               => rec_in.id_tnm_n,
            id_tnm_n_inst_owner_in    => rec_in.id_tnm_n_inst_owner,
            code_tnm_n_in             => rec_in.code_tnm_n,
            id_tnm_m_in               => rec_in.id_tnm_m,
            id_tnm_m_inst_owner_in    => rec_in.id_tnm_m_inst_owner,
            code_tnm_m_in             => rec_in.code_tnm_m,
            id_metastatic_sites_in    => rec_in.id_metastatic_sites,
            id_msites_inst_owner_in   => rec_in.id_msites_inst_owner,
            id_staging_group_in       => rec_in.id_staging_group,
            id_sgroup_inst_owner_in   => rec_in.id_sgroup_inst_owner,
            id_residual_tumor_in      => rec_in.id_residual_tumor,
            id_rtumor_inst_owner_in   => rec_in.id_rtumor_inst_owner,
            id_surgical_margins_in    => rec_in.id_surgical_margins,
            id_smargins_inst_owner_in => rec_in.id_smargins_inst_owner,
            id_lymph_vasc_inv_in      => rec_in.id_lymph_vasc_inv,
            id_lvinv_inst_owner_in    => rec_in.id_lvinv_inst_owner,
            id_other_staging_sys_in   => rec_in.id_other_staging_sys,
            id_ostgsys_inst_owner_in  => rec_in.id_ostgsys_inst_owner,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            cancel_notes_in           => rec_in.cancel_notes,
            id_prof_create_in         => rec_in.id_prof_create,
            dt_epis_diagnosis_stag_in => rec_in.dt_epis_diagnosis_stag,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_diag_stag%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_diagnosis_in      => rec_in.id_epis_diagnosis,
            num_staging_basis_in      => rec_in.num_staging_basis,
            id_staging_basis_in       => rec_in.id_staging_basis,
            id_sbasis_inst_owner_in   => rec_in.id_sbasis_inst_owner,
            id_tnm_t_in               => rec_in.id_tnm_t,
            id_tnm_t_inst_owner_in    => rec_in.id_tnm_t_inst_owner,
            code_tnm_t_in             => rec_in.code_tnm_t,
            id_tnm_n_in               => rec_in.id_tnm_n,
            id_tnm_n_inst_owner_in    => rec_in.id_tnm_n_inst_owner,
            code_tnm_n_in             => rec_in.code_tnm_n,
            id_tnm_m_in               => rec_in.id_tnm_m,
            id_tnm_m_inst_owner_in    => rec_in.id_tnm_m_inst_owner,
            code_tnm_m_in             => rec_in.code_tnm_m,
            id_metastatic_sites_in    => rec_in.id_metastatic_sites,
            id_msites_inst_owner_in   => rec_in.id_msites_inst_owner,
            id_staging_group_in       => rec_in.id_staging_group,
            id_sgroup_inst_owner_in   => rec_in.id_sgroup_inst_owner,
            id_residual_tumor_in      => rec_in.id_residual_tumor,
            id_rtumor_inst_owner_in   => rec_in.id_rtumor_inst_owner,
            id_surgical_margins_in    => rec_in.id_surgical_margins,
            id_smargins_inst_owner_in => rec_in.id_smargins_inst_owner,
            id_lymph_vasc_inv_in      => rec_in.id_lymph_vasc_inv,
            id_lvinv_inst_owner_in    => rec_in.id_lvinv_inst_owner,
            id_other_staging_sys_in   => rec_in.id_other_staging_sys,
            id_ostgsys_inst_owner_in  => rec_in.id_ostgsys_inst_owner,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            cancel_notes_in           => rec_in.cancel_notes,
            id_prof_create_in         => rec_in.id_prof_create,
            dt_epis_diagnosis_stag_in => rec_in.dt_epis_diagnosis_stag,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_epis_diagnosis_in      IN epis_diag_stag.id_epis_diagnosis%TYPE,
        id_staging_basis_in       IN epis_diag_stag.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in   IN epis_diag_stag.id_sbasis_inst_owner%TYPE,
        num_staging_basis_in      IN epis_diag_stag.num_staging_basis%TYPE,
        id_tnm_t_in               IN epis_diag_stag.id_tnm_t%TYPE DEFAULT NULL,
        id_tnm_t_inst_owner_in    IN epis_diag_stag.id_tnm_t_inst_owner%TYPE DEFAULT NULL,
        code_tnm_t_in             IN epis_diag_stag.code_tnm_t%TYPE DEFAULT NULL,
        id_tnm_n_in               IN epis_diag_stag.id_tnm_n%TYPE DEFAULT NULL,
        id_tnm_n_inst_owner_in    IN epis_diag_stag.id_tnm_n_inst_owner%TYPE DEFAULT NULL,
        code_tnm_n_in             IN epis_diag_stag.code_tnm_n%TYPE DEFAULT NULL,
        id_tnm_m_in               IN epis_diag_stag.id_tnm_m%TYPE DEFAULT NULL,
        id_tnm_m_inst_owner_in    IN epis_diag_stag.id_tnm_m_inst_owner%TYPE DEFAULT NULL,
        code_tnm_m_in             IN epis_diag_stag.code_tnm_m%TYPE DEFAULT NULL,
        id_metastatic_sites_in    IN epis_diag_stag.id_metastatic_sites%TYPE DEFAULT NULL,
        id_msites_inst_owner_in   IN epis_diag_stag.id_msites_inst_owner%TYPE DEFAULT NULL,
        id_staging_group_in       IN epis_diag_stag.id_staging_group%TYPE DEFAULT NULL,
        id_sgroup_inst_owner_in   IN epis_diag_stag.id_sgroup_inst_owner%TYPE DEFAULT NULL,
        id_residual_tumor_in      IN epis_diag_stag.id_residual_tumor%TYPE DEFAULT NULL,
        id_rtumor_inst_owner_in   IN epis_diag_stag.id_rtumor_inst_owner%TYPE DEFAULT NULL,
        id_surgical_margins_in    IN epis_diag_stag.id_surgical_margins%TYPE DEFAULT NULL,
        id_smargins_inst_owner_in IN epis_diag_stag.id_smargins_inst_owner%TYPE DEFAULT NULL,
        id_lymph_vasc_inv_in      IN epis_diag_stag.id_lymph_vasc_inv%TYPE DEFAULT NULL,
        id_lvinv_inst_owner_in    IN epis_diag_stag.id_lvinv_inst_owner%TYPE DEFAULT NULL,
        id_other_staging_sys_in   IN epis_diag_stag.id_other_staging_sys%TYPE DEFAULT NULL,
        id_ostgsys_inst_owner_in  IN epis_diag_stag.id_ostgsys_inst_owner%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_diag_stag.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_diag_stag.cancel_notes%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_diag_stag.id_prof_create%TYPE DEFAULT NULL,
        dt_epis_diagnosis_stag_in IN epis_diag_stag.dt_epis_diagnosis_stag%TYPE DEFAULT NULL,
        create_user_in            IN epis_diag_stag.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_diag_stag.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_diag_stag.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_diag_stag.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_diag_stag.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_diag_stag.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_diagnosis_in      => id_epis_diagnosis_in,
            id_staging_basis_in       => id_staging_basis_in,
            id_sbasis_inst_owner_in   => id_sbasis_inst_owner_in,
            num_staging_basis_in      => num_staging_basis_in,
            id_tnm_t_in               => id_tnm_t_in,
            id_tnm_t_inst_owner_in    => id_tnm_t_inst_owner_in,
            code_tnm_t_in             => code_tnm_t_in,
            id_tnm_n_in               => id_tnm_n_in,
            id_tnm_n_inst_owner_in    => id_tnm_n_inst_owner_in,
            code_tnm_n_in             => code_tnm_n_in,
            id_tnm_m_in               => id_tnm_m_in,
            id_tnm_m_inst_owner_in    => id_tnm_m_inst_owner_in,
            code_tnm_m_in             => code_tnm_m_in,
            id_metastatic_sites_in    => id_metastatic_sites_in,
            id_msites_inst_owner_in   => id_msites_inst_owner_in,
            id_staging_group_in       => id_staging_group_in,
            id_sgroup_inst_owner_in   => id_sgroup_inst_owner_in,
            id_residual_tumor_in      => id_residual_tumor_in,
            id_rtumor_inst_owner_in   => id_rtumor_inst_owner_in,
            id_surgical_margins_in    => id_surgical_margins_in,
            id_smargins_inst_owner_in => id_smargins_inst_owner_in,
            id_lymph_vasc_inv_in      => id_lymph_vasc_inv_in,
            id_lvinv_inst_owner_in    => id_lvinv_inst_owner_in,
            id_other_staging_sys_in   => id_other_staging_sys_in,
            id_ostgsys_inst_owner_in  => id_ostgsys_inst_owner_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            id_prof_create_in         => id_prof_create_in,
            dt_epis_diagnosis_stag_in => dt_epis_diagnosis_stag_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_diagnosis_in      => id_epis_diagnosis_in,
                id_staging_basis_in       => id_staging_basis_in,
                id_sbasis_inst_owner_in   => id_sbasis_inst_owner_in,
                num_staging_basis_in      => num_staging_basis_in,
                id_tnm_t_in               => id_tnm_t_in,
                id_tnm_t_inst_owner_in    => id_tnm_t_inst_owner_in,
                code_tnm_t_in             => code_tnm_t_in,
                id_tnm_n_in               => id_tnm_n_in,
                id_tnm_n_inst_owner_in    => id_tnm_n_inst_owner_in,
                code_tnm_n_in             => code_tnm_n_in,
                id_tnm_m_in               => id_tnm_m_in,
                id_tnm_m_inst_owner_in    => id_tnm_m_inst_owner_in,
                code_tnm_m_in             => code_tnm_m_in,
                id_metastatic_sites_in    => id_metastatic_sites_in,
                id_msites_inst_owner_in   => id_msites_inst_owner_in,
                id_staging_group_in       => id_staging_group_in,
                id_sgroup_inst_owner_in   => id_sgroup_inst_owner_in,
                id_residual_tumor_in      => id_residual_tumor_in,
                id_rtumor_inst_owner_in   => id_rtumor_inst_owner_in,
                id_surgical_margins_in    => id_surgical_margins_in,
                id_smargins_inst_owner_in => id_smargins_inst_owner_in,
                id_lymph_vasc_inv_in      => id_lymph_vasc_inv_in,
                id_lvinv_inst_owner_in    => id_lvinv_inst_owner_in,
                id_other_staging_sys_in   => id_other_staging_sys_in,
                id_ostgsys_inst_owner_in  => id_ostgsys_inst_owner_in,
                id_cancel_reason_in       => id_cancel_reason_in,
                cancel_notes_in           => cancel_notes_in,
                id_prof_create_in         => id_prof_create_in,
                dt_epis_diagnosis_stag_in => dt_epis_diagnosis_stag_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_epis_diagnosis_in      IN epis_diag_stag.id_epis_diagnosis%TYPE,
        id_staging_basis_in       IN epis_diag_stag.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in   IN epis_diag_stag.id_sbasis_inst_owner%TYPE,
        num_staging_basis_in      IN epis_diag_stag.num_staging_basis%TYPE,
        id_tnm_t_in               IN epis_diag_stag.id_tnm_t%TYPE DEFAULT NULL,
        id_tnm_t_inst_owner_in    IN epis_diag_stag.id_tnm_t_inst_owner%TYPE DEFAULT NULL,
        code_tnm_t_in             IN epis_diag_stag.code_tnm_t%TYPE DEFAULT NULL,
        id_tnm_n_in               IN epis_diag_stag.id_tnm_n%TYPE DEFAULT NULL,
        id_tnm_n_inst_owner_in    IN epis_diag_stag.id_tnm_n_inst_owner%TYPE DEFAULT NULL,
        code_tnm_n_in             IN epis_diag_stag.code_tnm_n%TYPE DEFAULT NULL,
        id_tnm_m_in               IN epis_diag_stag.id_tnm_m%TYPE DEFAULT NULL,
        id_tnm_m_inst_owner_in    IN epis_diag_stag.id_tnm_m_inst_owner%TYPE DEFAULT NULL,
        code_tnm_m_in             IN epis_diag_stag.code_tnm_m%TYPE DEFAULT NULL,
        id_metastatic_sites_in    IN epis_diag_stag.id_metastatic_sites%TYPE DEFAULT NULL,
        id_msites_inst_owner_in   IN epis_diag_stag.id_msites_inst_owner%TYPE DEFAULT NULL,
        id_staging_group_in       IN epis_diag_stag.id_staging_group%TYPE DEFAULT NULL,
        id_sgroup_inst_owner_in   IN epis_diag_stag.id_sgroup_inst_owner%TYPE DEFAULT NULL,
        id_residual_tumor_in      IN epis_diag_stag.id_residual_tumor%TYPE DEFAULT NULL,
        id_rtumor_inst_owner_in   IN epis_diag_stag.id_rtumor_inst_owner%TYPE DEFAULT NULL,
        id_surgical_margins_in    IN epis_diag_stag.id_surgical_margins%TYPE DEFAULT NULL,
        id_smargins_inst_owner_in IN epis_diag_stag.id_smargins_inst_owner%TYPE DEFAULT NULL,
        id_lymph_vasc_inv_in      IN epis_diag_stag.id_lymph_vasc_inv%TYPE DEFAULT NULL,
        id_lvinv_inst_owner_in    IN epis_diag_stag.id_lvinv_inst_owner%TYPE DEFAULT NULL,
        id_other_staging_sys_in   IN epis_diag_stag.id_other_staging_sys%TYPE DEFAULT NULL,
        id_ostgsys_inst_owner_in  IN epis_diag_stag.id_ostgsys_inst_owner%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_diag_stag.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_diag_stag.cancel_notes%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_diag_stag.id_prof_create%TYPE DEFAULT NULL,
        dt_epis_diagnosis_stag_in IN epis_diag_stag.dt_epis_diagnosis_stag%TYPE DEFAULT NULL,
        create_user_in            IN epis_diag_stag.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_diag_stag.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_diag_stag.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_diag_stag.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_diag_stag.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_diag_stag.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_diagnosis_in,
                id_staging_basis_in,
                id_sbasis_inst_owner_in,
                num_staging_basis_in,
                id_tnm_t_in,
                id_tnm_t_inst_owner_in,
                code_tnm_t_in,
                id_tnm_n_in,
                id_tnm_n_inst_owner_in,
                code_tnm_n_in,
                id_tnm_m_in,
                id_tnm_m_inst_owner_in,
                code_tnm_m_in,
                id_metastatic_sites_in,
                id_msites_inst_owner_in,
                id_staging_group_in,
                id_sgroup_inst_owner_in,
                id_residual_tumor_in,
                id_rtumor_inst_owner_in,
                id_surgical_margins_in,
                id_smargins_inst_owner_in,
                id_lymph_vasc_inv_in,
                id_lvinv_inst_owner_in,
                id_other_staging_sys_in,
                id_ostgsys_inst_owner_in,
                id_cancel_reason_in,
                cancel_notes_in,
                id_prof_create_in,
                dt_epis_diagnosis_stag_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN epis_diag_stag_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_diagnosis      id_epis_diagnosis_cc;
        l_num_staging_basis      num_staging_basis_cc;
        l_id_staging_basis       id_staging_basis_cc;
        l_id_sbasis_inst_owner   id_sbasis_inst_owner_cc;
        l_id_tnm_t               id_tnm_t_cc;
        l_id_tnm_t_inst_owner    id_tnm_t_inst_owner_cc;
        l_code_tnm_t             code_tnm_t_cc;
        l_id_tnm_n               id_tnm_n_cc;
        l_id_tnm_n_inst_owner    id_tnm_n_inst_owner_cc;
        l_code_tnm_n             code_tnm_n_cc;
        l_id_tnm_m               id_tnm_m_cc;
        l_id_tnm_m_inst_owner    id_tnm_m_inst_owner_cc;
        l_code_tnm_m             code_tnm_m_cc;
        l_id_metastatic_sites    id_metastatic_sites_cc;
        l_id_msites_inst_owner   id_msites_inst_owner_cc;
        l_id_staging_group       id_staging_group_cc;
        l_id_sgroup_inst_owner   id_sgroup_inst_owner_cc;
        l_id_residual_tumor      id_residual_tumor_cc;
        l_id_rtumor_inst_owner   id_rtumor_inst_owner_cc;
        l_id_surgical_margins    id_surgical_margins_cc;
        l_id_smargins_inst_owner id_smargins_inst_owner_cc;
        l_id_lymph_vasc_inv      id_lymph_vasc_inv_cc;
        l_id_lvinv_inst_owner    id_lvinv_inst_owner_cc;
        l_id_other_staging_sys   id_other_staging_sys_cc;
        l_id_ostgsys_inst_owner  id_ostgsys_inst_owner_cc;
        l_id_cancel_reason       id_cancel_reason_cc;
        l_cancel_notes           cancel_notes_cc;
        l_id_prof_create         id_prof_create_cc;
        l_dt_epis_diagnosis_stag dt_epis_diagnosis_stag_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_diagnosis(i) := col_in(i).id_epis_diagnosis;
            l_num_staging_basis(i) := col_in(i).num_staging_basis;
            l_id_staging_basis(i) := col_in(i).id_staging_basis;
            l_id_sbasis_inst_owner(i) := col_in(i).id_sbasis_inst_owner;
            l_id_tnm_t(i) := col_in(i).id_tnm_t;
            l_id_tnm_t_inst_owner(i) := col_in(i).id_tnm_t_inst_owner;
            l_code_tnm_t(i) := col_in(i).code_tnm_t;
            l_id_tnm_n(i) := col_in(i).id_tnm_n;
            l_id_tnm_n_inst_owner(i) := col_in(i).id_tnm_n_inst_owner;
            l_code_tnm_n(i) := col_in(i).code_tnm_n;
            l_id_tnm_m(i) := col_in(i).id_tnm_m;
            l_id_tnm_m_inst_owner(i) := col_in(i).id_tnm_m_inst_owner;
            l_code_tnm_m(i) := col_in(i).code_tnm_m;
            l_id_metastatic_sites(i) := col_in(i).id_metastatic_sites;
            l_id_msites_inst_owner(i) := col_in(i).id_msites_inst_owner;
            l_id_staging_group(i) := col_in(i).id_staging_group;
            l_id_sgroup_inst_owner(i) := col_in(i).id_sgroup_inst_owner;
            l_id_residual_tumor(i) := col_in(i).id_residual_tumor;
            l_id_rtumor_inst_owner(i) := col_in(i).id_rtumor_inst_owner;
            l_id_surgical_margins(i) := col_in(i).id_surgical_margins;
            l_id_smargins_inst_owner(i) := col_in(i).id_smargins_inst_owner;
            l_id_lymph_vasc_inv(i) := col_in(i).id_lymph_vasc_inv;
            l_id_lvinv_inst_owner(i) := col_in(i).id_lvinv_inst_owner;
            l_id_other_staging_sys(i) := col_in(i).id_other_staging_sys;
            l_id_ostgsys_inst_owner(i) := col_in(i).id_ostgsys_inst_owner;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_cancel_notes(i) := col_in(i).cancel_notes;
            l_id_prof_create(i) := col_in(i).id_prof_create;
            l_dt_epis_diagnosis_stag(i) := col_in(i).dt_epis_diagnosis_stag;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_diag_stag
                   SET id_tnm_t               = nvl(l_id_tnm_t(i), id_tnm_t),
                       id_tnm_t_inst_owner    = nvl(l_id_tnm_t_inst_owner(i), id_tnm_t_inst_owner),
                       code_tnm_t             = nvl(l_code_tnm_t(i), code_tnm_t),
                       id_tnm_n               = nvl(l_id_tnm_n(i), id_tnm_n),
                       id_tnm_n_inst_owner    = nvl(l_id_tnm_n_inst_owner(i), id_tnm_n_inst_owner),
                       code_tnm_n             = nvl(l_code_tnm_n(i), code_tnm_n),
                       id_tnm_m               = nvl(l_id_tnm_m(i), id_tnm_m),
                       id_tnm_m_inst_owner    = nvl(l_id_tnm_m_inst_owner(i), id_tnm_m_inst_owner),
                       code_tnm_m             = nvl(l_code_tnm_m(i), code_tnm_m),
                       id_metastatic_sites    = nvl(l_id_metastatic_sites(i), id_metastatic_sites),
                       id_msites_inst_owner   = nvl(l_id_msites_inst_owner(i), id_msites_inst_owner),
                       id_staging_group       = nvl(l_id_staging_group(i), id_staging_group),
                       id_sgroup_inst_owner   = nvl(l_id_sgroup_inst_owner(i), id_sgroup_inst_owner),
                       id_residual_tumor      = nvl(l_id_residual_tumor(i), id_residual_tumor),
                       id_rtumor_inst_owner   = nvl(l_id_rtumor_inst_owner(i), id_rtumor_inst_owner),
                       id_surgical_margins    = nvl(l_id_surgical_margins(i), id_surgical_margins),
                       id_smargins_inst_owner = nvl(l_id_smargins_inst_owner(i), id_smargins_inst_owner),
                       id_lymph_vasc_inv      = nvl(l_id_lymph_vasc_inv(i), id_lymph_vasc_inv),
                       id_lvinv_inst_owner    = nvl(l_id_lvinv_inst_owner(i), id_lvinv_inst_owner),
                       id_other_staging_sys   = nvl(l_id_other_staging_sys(i), id_other_staging_sys),
                       id_ostgsys_inst_owner  = nvl(l_id_ostgsys_inst_owner(i), id_ostgsys_inst_owner),
                       id_cancel_reason       = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       cancel_notes           = nvl(l_cancel_notes(i), cancel_notes),
                       id_prof_create         = nvl(l_id_prof_create(i), id_prof_create),
                       dt_epis_diagnosis_stag = nvl(l_dt_epis_diagnosis_stag(i), dt_epis_diagnosis_stag),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution)
                 WHERE id_epis_diagnosis = l_id_epis_diagnosis(i)
                   AND id_staging_basis = l_id_staging_basis(i)
                   AND id_sbasis_inst_owner = l_id_sbasis_inst_owner(i)
                   AND num_staging_basis = l_num_staging_basis(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_diag_stag
                   SET id_tnm_t               = l_id_tnm_t(i),
                       id_tnm_t_inst_owner    = l_id_tnm_t_inst_owner(i),
                       code_tnm_t             = l_code_tnm_t(i),
                       id_tnm_n               = l_id_tnm_n(i),
                       id_tnm_n_inst_owner    = l_id_tnm_n_inst_owner(i),
                       code_tnm_n             = l_code_tnm_n(i),
                       id_tnm_m               = l_id_tnm_m(i),
                       id_tnm_m_inst_owner    = l_id_tnm_m_inst_owner(i),
                       code_tnm_m             = l_code_tnm_m(i),
                       id_metastatic_sites    = l_id_metastatic_sites(i),
                       id_msites_inst_owner   = l_id_msites_inst_owner(i),
                       id_staging_group       = l_id_staging_group(i),
                       id_sgroup_inst_owner   = l_id_sgroup_inst_owner(i),
                       id_residual_tumor      = l_id_residual_tumor(i),
                       id_rtumor_inst_owner   = l_id_rtumor_inst_owner(i),
                       id_surgical_margins    = l_id_surgical_margins(i),
                       id_smargins_inst_owner = l_id_smargins_inst_owner(i),
                       id_lymph_vasc_inv      = l_id_lymph_vasc_inv(i),
                       id_lvinv_inst_owner    = l_id_lvinv_inst_owner(i),
                       id_other_staging_sys   = l_id_other_staging_sys(i),
                       id_ostgsys_inst_owner  = l_id_ostgsys_inst_owner(i),
                       id_cancel_reason       = l_id_cancel_reason(i),
                       cancel_notes           = l_cancel_notes(i),
                       id_prof_create         = l_id_prof_create(i),
                       dt_epis_diagnosis_stag = l_dt_epis_diagnosis_stag(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i)
                 WHERE id_epis_diagnosis = l_id_epis_diagnosis(i)
                   AND id_staging_basis = l_id_staging_basis(i)
                   AND id_sbasis_inst_owner = l_id_sbasis_inst_owner(i)
                   AND num_staging_basis = l_num_staging_basis(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN epis_diag_stag_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE EPIS_DIAG_STAG
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE EPIS_DIAG_STAG
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE EPIS_DIAG_STAG set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE EPIS_DIAG_STAG set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_epis_diagnosis_in    IN epis_diag_stag.id_epis_diagnosis%TYPE,
        id_staging_basis_in     IN epis_diag_stag.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in IN epis_diag_stag.id_sbasis_inst_owner%TYPE,
        num_staging_basis_in    IN epis_diag_stag.num_staging_basis%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_epis_diagnosis = id_epis_diagnosis_in
           AND id_staging_basis = id_staging_basis_in
           AND id_sbasis_inst_owner = id_sbasis_inst_owner_in
           AND num_staging_basis = num_staging_basis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_epis_diagnosis_in    IN epis_diag_stag.id_epis_diagnosis%TYPE,
        id_staging_basis_in     IN epis_diag_stag.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in IN epis_diag_stag.id_sbasis_inst_owner%TYPE,
        num_staging_basis_in    IN epis_diag_stag.num_staging_basis%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_epis_diagnosis_in    => id_epis_diagnosis_in,
            id_staging_basis_in     => id_staging_basis_in,
            id_sbasis_inst_owner_in => id_sbasis_inst_owner_in,
            num_staging_basis_in    => num_staging_basis_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_EPIS_DIAGNOSIS
    PROCEDURE del_id_epis_diagnosis
    (
        id_epis_diagnosis_in IN epis_diag_stag.id_epis_diagnosis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_epis_diagnosis = id_epis_diagnosis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_epis_diagnosis;

    -- Delete all rows for primary key column ID_STAGING_BASIS
    PROCEDURE del_id_staging_basis
    (
        id_staging_basis_in IN epis_diag_stag.id_staging_basis%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_staging_basis = id_staging_basis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_staging_basis;

    -- Delete all rows for primary key column ID_SBASIS_INST_OWNER
    PROCEDURE del_id_sbasis_inst_owner
    (
        id_sbasis_inst_owner_in IN epis_diag_stag.id_sbasis_inst_owner%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_sbasis_inst_owner = id_sbasis_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_sbasis_inst_owner;

    -- Delete all rows for primary key column NUM_STAGING_BASIS
    PROCEDURE del_num_staging_basis
    (
        num_staging_basis_in IN epis_diag_stag.num_staging_basis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE num_staging_basis = num_staging_basis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_num_staging_basis;

    -- Delete all rows for primary key column ID_EPIS_DIAGNOSIS
    PROCEDURE del_id_epis_diagnosis
    (
        id_epis_diagnosis_in IN epis_diag_stag.id_epis_diagnosis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_epis_diagnosis(id_epis_diagnosis_in => id_epis_diagnosis_in,
                              handle_error_in      => handle_error_in,
                              rows_out             => rows_out);
    END del_id_epis_diagnosis;

    -- Delete all rows for primary key column ID_STAGING_BASIS
    PROCEDURE del_id_staging_basis
    (
        id_staging_basis_in IN epis_diag_stag.id_staging_basis%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_staging_basis(id_staging_basis_in => id_staging_basis_in,
                             handle_error_in     => handle_error_in,
                             rows_out            => rows_out);
    END del_id_staging_basis;

    -- Delete all rows for primary key column ID_SBASIS_INST_OWNER
    PROCEDURE del_id_sbasis_inst_owner
    (
        id_sbasis_inst_owner_in IN epis_diag_stag.id_sbasis_inst_owner%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_sbasis_inst_owner(id_sbasis_inst_owner_in => id_sbasis_inst_owner_in,
                                 handle_error_in         => handle_error_in,
                                 rows_out                => rows_out);
    END del_id_sbasis_inst_owner;

    -- Delete all rows for primary key column NUM_STAGING_BASIS
    PROCEDURE del_num_staging_basis
    (
        num_staging_basis_in IN epis_diag_stag.num_staging_basis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_num_staging_basis(num_staging_basis_in => num_staging_basis_in,
                              handle_error_in      => handle_error_in,
                              rows_out             => rows_out);
    END del_num_staging_basis;

    PROCEDURE del_edstgg_cncpttra_fk
    (
        id_staging_group_in     IN epis_diag_stag.id_staging_group%TYPE,
        id_sgroup_inst_owner_in IN epis_diag_stag.id_sgroup_inst_owner%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_staging_group = del_edstgg_cncpttra_fk.id_staging_group_in
           AND id_sgroup_inst_owner = del_edstgg_cncpttra_fk.id_sgroup_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edstgg_cncpttra_fk;

    PROCEDURE del_edstgg_cncpttra_fk
    (
        id_staging_group_in     IN epis_diag_stag.id_staging_group%TYPE,
        id_sgroup_inst_owner_in IN epis_diag_stag.id_sgroup_inst_owner%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edstgg_cncpttra_fk(id_staging_group_in     => id_staging_group_in,
                               id_sgroup_inst_owner_in => id_sgroup_inst_owner_in,
                               handle_error_in         => handle_error_in,
                               rows_out                => rows_out);
    END del_edstgg_cncpttra_fk;

    PROCEDURE del_edstgg_cncpttr1_fk
    (
        id_staging_basis_in     IN epis_diag_stag.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in IN epis_diag_stag.id_sbasis_inst_owner%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_staging_basis = del_edstgg_cncpttr1_fk.id_staging_basis_in
           AND id_sbasis_inst_owner = del_edstgg_cncpttr1_fk.id_sbasis_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edstgg_cncpttr1_fk;

    PROCEDURE del_edstgg_cncpttr1_fk
    (
        id_staging_basis_in     IN epis_diag_stag.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in IN epis_diag_stag.id_sbasis_inst_owner%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edstgg_cncpttr1_fk(id_staging_basis_in     => id_staging_basis_in,
                               id_sbasis_inst_owner_in => id_sbasis_inst_owner_in,
                               handle_error_in         => handle_error_in,
                               rows_out                => rows_out);
    END del_edstgg_cncpttr1_fk;

    PROCEDURE del_edstgg_cncpttr2_fk
    (
        id_tnm_t_in            IN epis_diag_stag.id_tnm_t%TYPE,
        id_tnm_t_inst_owner_in IN epis_diag_stag.id_tnm_t_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_tnm_t = del_edstgg_cncpttr2_fk.id_tnm_t_in
           AND id_tnm_t_inst_owner = del_edstgg_cncpttr2_fk.id_tnm_t_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edstgg_cncpttr2_fk;

    PROCEDURE del_edstgg_cncpttr2_fk
    (
        id_tnm_t_in            IN epis_diag_stag.id_tnm_t%TYPE,
        id_tnm_t_inst_owner_in IN epis_diag_stag.id_tnm_t_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edstgg_cncpttr2_fk(id_tnm_t_in            => id_tnm_t_in,
                               id_tnm_t_inst_owner_in => id_tnm_t_inst_owner_in,
                               handle_error_in        => handle_error_in,
                               rows_out               => rows_out);
    END del_edstgg_cncpttr2_fk;

    PROCEDURE del_edstgg_cncpttr3_fk
    (
        id_tnm_n_in            IN epis_diag_stag.id_tnm_n%TYPE,
        id_tnm_n_inst_owner_in IN epis_diag_stag.id_tnm_n_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_tnm_n = del_edstgg_cncpttr3_fk.id_tnm_n_in
           AND id_tnm_n_inst_owner = del_edstgg_cncpttr3_fk.id_tnm_n_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edstgg_cncpttr3_fk;

    PROCEDURE del_edstgg_cncpttr3_fk
    (
        id_tnm_n_in            IN epis_diag_stag.id_tnm_n%TYPE,
        id_tnm_n_inst_owner_in IN epis_diag_stag.id_tnm_n_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edstgg_cncpttr3_fk(id_tnm_n_in            => id_tnm_n_in,
                               id_tnm_n_inst_owner_in => id_tnm_n_inst_owner_in,
                               handle_error_in        => handle_error_in,
                               rows_out               => rows_out);
    END del_edstgg_cncpttr3_fk;

    PROCEDURE del_edstgg_cncpttr4_fk
    (
        id_tnm_m_in            IN epis_diag_stag.id_tnm_m%TYPE,
        id_tnm_m_inst_owner_in IN epis_diag_stag.id_tnm_m_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_tnm_m = del_edstgg_cncpttr4_fk.id_tnm_m_in
           AND id_tnm_m_inst_owner = del_edstgg_cncpttr4_fk.id_tnm_m_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edstgg_cncpttr4_fk;

    PROCEDURE del_edstgg_cncpttr4_fk
    (
        id_tnm_m_in            IN epis_diag_stag.id_tnm_m%TYPE,
        id_tnm_m_inst_owner_in IN epis_diag_stag.id_tnm_m_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edstgg_cncpttr4_fk(id_tnm_m_in            => id_tnm_m_in,
                               id_tnm_m_inst_owner_in => id_tnm_m_inst_owner_in,
                               handle_error_in        => handle_error_in,
                               rows_out               => rows_out);
    END del_edstgg_cncpttr4_fk;

    PROCEDURE del_edstgg_cncpttr5_fk
    (
        id_metastatic_sites_in  IN epis_diag_stag.id_metastatic_sites%TYPE,
        id_msites_inst_owner_in IN epis_diag_stag.id_msites_inst_owner%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_metastatic_sites = del_edstgg_cncpttr5_fk.id_metastatic_sites_in
           AND id_msites_inst_owner = del_edstgg_cncpttr5_fk.id_msites_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edstgg_cncpttr5_fk;

    PROCEDURE del_edstgg_cncpttr5_fk
    (
        id_metastatic_sites_in  IN epis_diag_stag.id_metastatic_sites%TYPE,
        id_msites_inst_owner_in IN epis_diag_stag.id_msites_inst_owner%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edstgg_cncpttr5_fk(id_metastatic_sites_in  => id_metastatic_sites_in,
                               id_msites_inst_owner_in => id_msites_inst_owner_in,
                               handle_error_in         => handle_error_in,
                               rows_out                => rows_out);
    END del_edstgg_cncpttr5_fk;

    PROCEDURE del_edstgg_cncpttr6_fk
    (
        id_residual_tumor_in    IN epis_diag_stag.id_residual_tumor%TYPE,
        id_rtumor_inst_owner_in IN epis_diag_stag.id_rtumor_inst_owner%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_residual_tumor = del_edstgg_cncpttr6_fk.id_residual_tumor_in
           AND id_rtumor_inst_owner = del_edstgg_cncpttr6_fk.id_rtumor_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edstgg_cncpttr6_fk;

    PROCEDURE del_edstgg_cncpttr6_fk
    (
        id_residual_tumor_in    IN epis_diag_stag.id_residual_tumor%TYPE,
        id_rtumor_inst_owner_in IN epis_diag_stag.id_rtumor_inst_owner%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edstgg_cncpttr6_fk(id_residual_tumor_in    => id_residual_tumor_in,
                               id_rtumor_inst_owner_in => id_rtumor_inst_owner_in,
                               handle_error_in         => handle_error_in,
                               rows_out                => rows_out);
    END del_edstgg_cncpttr6_fk;

    PROCEDURE del_edstgg_cncpttr7_fk
    (
        id_surgical_margins_in    IN epis_diag_stag.id_surgical_margins%TYPE,
        id_smargins_inst_owner_in IN epis_diag_stag.id_smargins_inst_owner%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_surgical_margins = del_edstgg_cncpttr7_fk.id_surgical_margins_in
           AND id_smargins_inst_owner = del_edstgg_cncpttr7_fk.id_smargins_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edstgg_cncpttr7_fk;

    PROCEDURE del_edstgg_cncpttr7_fk
    (
        id_surgical_margins_in    IN epis_diag_stag.id_surgical_margins%TYPE,
        id_smargins_inst_owner_in IN epis_diag_stag.id_smargins_inst_owner%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edstgg_cncpttr7_fk(id_surgical_margins_in    => id_surgical_margins_in,
                               id_smargins_inst_owner_in => id_smargins_inst_owner_in,
                               handle_error_in           => handle_error_in,
                               rows_out                  => rows_out);
    END del_edstgg_cncpttr7_fk;

    PROCEDURE del_edstgg_cncpttr8_fk
    (
        id_lymph_vasc_inv_in   IN epis_diag_stag.id_lymph_vasc_inv%TYPE,
        id_lvinv_inst_owner_in IN epis_diag_stag.id_lvinv_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_lymph_vasc_inv = del_edstgg_cncpttr8_fk.id_lymph_vasc_inv_in
           AND id_lvinv_inst_owner = del_edstgg_cncpttr8_fk.id_lvinv_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edstgg_cncpttr8_fk;

    PROCEDURE del_edstgg_cncpttr8_fk
    (
        id_lymph_vasc_inv_in   IN epis_diag_stag.id_lymph_vasc_inv%TYPE,
        id_lvinv_inst_owner_in IN epis_diag_stag.id_lvinv_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edstgg_cncpttr8_fk(id_lymph_vasc_inv_in   => id_lymph_vasc_inv_in,
                               id_lvinv_inst_owner_in => id_lvinv_inst_owner_in,
                               handle_error_in        => handle_error_in,
                               rows_out               => rows_out);
    END del_edstgg_cncpttr8_fk;

    PROCEDURE del_edstgg_cncpttr9_fk
    (
        id_other_staging_sys_in  IN epis_diag_stag.id_other_staging_sys%TYPE,
        id_ostgsys_inst_owner_in IN epis_diag_stag.id_ostgsys_inst_owner%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_other_staging_sys = del_edstgg_cncpttr9_fk.id_other_staging_sys_in
           AND id_ostgsys_inst_owner = del_edstgg_cncpttr9_fk.id_ostgsys_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edstgg_cncpttr9_fk;

    PROCEDURE del_edstgg_cncpttr9_fk
    (
        id_other_staging_sys_in  IN epis_diag_stag.id_other_staging_sys%TYPE,
        id_ostgsys_inst_owner_in IN epis_diag_stag.id_ostgsys_inst_owner%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edstgg_cncpttr9_fk(id_other_staging_sys_in  => id_other_staging_sys_in,
                               id_ostgsys_inst_owner_in => id_ostgsys_inst_owner_in,
                               handle_error_in          => handle_error_in,
                               rows_out                 => rows_out);
    END del_edstgg_cncpttr9_fk;

    PROCEDURE del_edstgg_cr_fk
    (
        id_cancel_reason_in IN epis_diag_stag.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_cancel_reason = del_edstgg_cr_fk.id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edstgg_cr_fk;

    PROCEDURE del_edstgg_cr_fk
    (
        id_cancel_reason_in IN epis_diag_stag.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edstgg_cr_fk(id_cancel_reason_in => id_cancel_reason_in,
                         handle_error_in     => handle_error_in,
                         rows_out            => rows_out);
    END del_edstgg_cr_fk;

    PROCEDURE del_edstgg_ed_fk
    (
        id_epis_diagnosis_in IN epis_diag_stag.id_epis_diagnosis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_epis_diagnosis = del_edstgg_ed_fk.id_epis_diagnosis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edstgg_ed_fk;

    PROCEDURE del_edstgg_ed_fk
    (
        id_epis_diagnosis_in IN epis_diag_stag.id_epis_diagnosis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edstgg_ed_fk(id_epis_diagnosis_in => id_epis_diagnosis_in,
                         handle_error_in      => handle_error_in,
                         rows_out             => rows_out);
    END del_edstgg_ed_fk;

    PROCEDURE del_edstgg_prof_fk
    (
        id_prof_create_in IN epis_diag_stag.id_prof_create%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diag_stag
         WHERE id_prof_create = del_edstgg_prof_fk.id_prof_create_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edstgg_prof_fk;

    PROCEDURE del_edstgg_prof_fk
    (
        id_prof_create_in IN epis_diag_stag.id_prof_create%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edstgg_prof_fk(id_prof_create_in => id_prof_create_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_edstgg_prof_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM EPIS_DIAG_STAG';
        ELSE
            RETURN 'DELETE FROM EPIS_DIAG_STAG WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIAG_STAG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIAG_STAG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(epis_diag_stag_inout IN OUT epis_diag_stag%ROWTYPE) IS
    BEGIN
        epis_diag_stag_inout.id_epis_diagnosis      := NULL;
        epis_diag_stag_inout.num_staging_basis      := 1;
        epis_diag_stag_inout.id_staging_basis       := NULL;
        epis_diag_stag_inout.id_sbasis_inst_owner   := 0;
        epis_diag_stag_inout.id_tnm_t               := NULL;
        epis_diag_stag_inout.id_tnm_t_inst_owner    := NULL;
        epis_diag_stag_inout.code_tnm_t             := NULL;
        epis_diag_stag_inout.id_tnm_n               := NULL;
        epis_diag_stag_inout.id_tnm_n_inst_owner    := NULL;
        epis_diag_stag_inout.code_tnm_n             := NULL;
        epis_diag_stag_inout.id_tnm_m               := NULL;
        epis_diag_stag_inout.id_tnm_m_inst_owner    := NULL;
        epis_diag_stag_inout.code_tnm_m             := NULL;
        epis_diag_stag_inout.id_metastatic_sites    := NULL;
        epis_diag_stag_inout.id_msites_inst_owner   := NULL;
        epis_diag_stag_inout.id_staging_group       := NULL;
        epis_diag_stag_inout.id_sgroup_inst_owner   := NULL;
        epis_diag_stag_inout.id_residual_tumor      := NULL;
        epis_diag_stag_inout.id_rtumor_inst_owner   := NULL;
        epis_diag_stag_inout.id_surgical_margins    := NULL;
        epis_diag_stag_inout.id_smargins_inst_owner := NULL;
        epis_diag_stag_inout.id_lymph_vasc_inv      := NULL;
        epis_diag_stag_inout.id_lvinv_inst_owner    := NULL;
        epis_diag_stag_inout.id_other_staging_sys   := NULL;
        epis_diag_stag_inout.id_ostgsys_inst_owner  := NULL;
        epis_diag_stag_inout.id_cancel_reason       := NULL;
        epis_diag_stag_inout.cancel_notes           := NULL;
        epis_diag_stag_inout.id_prof_create         := NULL;
        epis_diag_stag_inout.dt_epis_diagnosis_stag := NULL;
        epis_diag_stag_inout.create_user            := NULL;
        epis_diag_stag_inout.create_time            := NULL;
        epis_diag_stag_inout.create_institution     := NULL;
        epis_diag_stag_inout.update_user            := NULL;
        epis_diag_stag_inout.update_time            := NULL;
        epis_diag_stag_inout.update_institution     := NULL;
    END initrec;

    FUNCTION initrec RETURN epis_diag_stag%ROWTYPE IS
        l_epis_diag_stag epis_diag_stag%ROWTYPE;
    BEGIN
        l_epis_diag_stag.num_staging_basis    := 1;
        l_epis_diag_stag.id_sbasis_inst_owner := 0;
        RETURN l_epis_diag_stag;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_diag_stag_tc IS
        data epis_diag_stag_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM epis_diag_stag
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_diag_stag_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data epis_diag_stag_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_diag_stag;
/
