/*-- Last Change Revision: $Rev: 2028335 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:11 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_production_target_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Junho 29, 2009 18:32:12
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_production_target_hist_in IN production_target_hist.id_production_target_hist%TYPE,
        id_production_target_in      IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_professional_subject_in   IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_dcs_subject_in            IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_type_slot_in          IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_sch_event_in              IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_dep_type_in           IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_institution_in            IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_software_in               IN production_target_hist.id_software%TYPE DEFAULT NULL,
        dt_start_in                  IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_end_in                    IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        target_in                    IN production_target_hist.target%TYPE DEFAULT NULL,
        notes_in                     IN production_target_hist.notes%TYPE DEFAULT NULL,
        flg_available_in             IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        dt_create_in                 IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        prof_create_in               IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        create_user_in               IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO production_target_hist
            (id_production_target_hist,
             id_production_target,
             id_professional_subject,
             id_dcs_subject,
             id_dcs_type_slot,
             id_sch_event,
             id_sch_dep_type,
             id_institution,
             id_software,
             dt_start,
             dt_end,
             target,
             notes,
             flg_available,
             dt_create,
             prof_create,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_production_target_hist_in,
             id_production_target_in,
             id_professional_subject_in,
             id_dcs_subject_in,
             id_dcs_type_slot_in,
             id_sch_event_in,
             id_sch_dep_type_in,
             id_institution_in,
             id_software_in,
             dt_start_in,
             dt_end_in,
             target_in,
             notes_in,
             flg_available_in,
             dt_create_in,
             prof_create_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'PTTH_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "PTTH_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'PRODUCTION_TARGET_HIST',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL_SUBJECT',
                                                        value_in           => id_professional_subject_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DCS_SUBJECT',
                                                        value_in           => id_dcs_subject_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DCS_TYPE_SLOT',
                                                        value_in           => id_dcs_type_slot_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCH_EVENT',
                                                        value_in           => id_sch_event_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCH_DEP_TYPE',
                                                        value_in           => id_sch_dep_type_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_START',
                                                        value_in           => dt_start_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_END',
                                                        value_in           => dt_end_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE',
                                                        value_in           => flg_available_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PRODUCTION_TARGET_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    IF l_name = 'PTTHDCSS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DCS_SUBJECT',
                                                        value_in           => id_dcs_subject_in);
                    END IF;
                    IF l_name = 'PTTHDCSTS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DCS_TYPE_SLOT',
                                                        value_in           => id_dcs_type_slot_in);
                    END IF;
                    IF l_name = 'PTTHI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PTTHPRC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'PROF_CREATE',
                                                        value_in           => prof_create_in);
                    END IF;
                    IF l_name = 'PTTHPRF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL_SUBJECT',
                                                        value_in           => id_professional_subject_in);
                    END IF;
                    IF l_name = 'PTTHSDT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCH_DEP_TYPE',
                                                        value_in           => id_sch_dep_type_in);
                    END IF;
                    IF l_name = 'PTTHSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCH_EVENT',
                                                        value_in           => id_sch_event_in);
                    END IF;
                    IF l_name = 'PTTHST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_production_target_hist_in IN production_target_hist.id_production_target_hist%TYPE,
        id_production_target_in      IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_professional_subject_in   IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_dcs_subject_in            IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_type_slot_in          IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_sch_event_in              IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_dep_type_in           IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_institution_in            IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_software_in               IN production_target_hist.id_software%TYPE DEFAULT NULL,
        dt_start_in                  IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_end_in                    IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        target_in                    IN production_target_hist.target%TYPE DEFAULT NULL,
        notes_in                     IN production_target_hist.notes%TYPE DEFAULT NULL,
        flg_available_in             IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        dt_create_in                 IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        prof_create_in               IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        create_user_in               IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_production_target_hist_in => id_production_target_hist_in,
            id_production_target_in      => id_production_target_in,
            id_professional_subject_in   => id_professional_subject_in,
            id_dcs_subject_in            => id_dcs_subject_in,
            id_dcs_type_slot_in          => id_dcs_type_slot_in,
            id_sch_event_in              => id_sch_event_in,
            id_sch_dep_type_in           => id_sch_dep_type_in,
            id_institution_in            => id_institution_in,
            id_software_in               => id_software_in,
            dt_start_in                  => dt_start_in,
            dt_end_in                    => dt_end_in,
            target_in                    => target_in,
            notes_in                     => notes_in,
            flg_available_in             => flg_available_in,
            dt_create_in                 => dt_create_in,
            prof_create_in               => prof_create_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN production_target_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec production_target_hist%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_production_target_hist := next_key(sequence_in);
        END IF;
        ins(id_production_target_hist_in => l_rec.id_production_target_hist,
            id_production_target_in      => l_rec.id_production_target,
            id_professional_subject_in   => l_rec.id_professional_subject,
            id_dcs_subject_in            => l_rec.id_dcs_subject,
            id_dcs_type_slot_in          => l_rec.id_dcs_type_slot,
            id_sch_event_in              => l_rec.id_sch_event,
            id_sch_dep_type_in           => l_rec.id_sch_dep_type,
            id_institution_in            => l_rec.id_institution,
            id_software_in               => l_rec.id_software,
            dt_start_in                  => l_rec.dt_start,
            dt_end_in                    => l_rec.dt_end,
            target_in                    => l_rec.target,
            notes_in                     => l_rec.notes,
            flg_available_in             => l_rec.flg_available,
            dt_create_in                 => l_rec.dt_create,
            prof_create_in               => l_rec.prof_create,
            create_user_in               => l_rec.create_user,
            create_time_in               => l_rec.create_time,
            create_institution_in        => l_rec.create_institution,
            update_user_in               => l_rec.update_user,
            update_time_in               => l_rec.update_time,
            update_institution_in        => l_rec.update_institution,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN production_target_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN production_target_hist.id_production_target_hist%TYPE
    
     IS
        retval production_target_hist.id_production_target_hist%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_production_target_hist.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PRODUCTION_TARGET_HIST'));
    END next_key;

    PROCEDURE ins
    (
        id_production_target_in       IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_professional_subject_in    IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_dcs_subject_in             IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_type_slot_in           IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_sch_event_in               IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_dep_type_in            IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_institution_in             IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_software_in                IN production_target_hist.id_software%TYPE DEFAULT NULL,
        dt_start_in                   IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_end_in                     IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        target_in                     IN production_target_hist.target%TYPE DEFAULT NULL,
        notes_in                      IN production_target_hist.notes%TYPE DEFAULT NULL,
        flg_available_in              IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        dt_create_in                  IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        prof_create_in                IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        create_user_in                IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_time_in                IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_time_in                IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        id_production_target_hist_out IN OUT production_target_hist.id_production_target_hist%TYPE,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      OUT table_varchar
    ) IS
        l_pky production_target_hist.id_production_target_hist%TYPE := next_key;
    BEGIN
        ins(id_production_target_hist_in => l_pky,
            id_production_target_in      => id_production_target_in,
            id_professional_subject_in   => id_professional_subject_in,
            id_dcs_subject_in            => id_dcs_subject_in,
            id_dcs_type_slot_in          => id_dcs_type_slot_in,
            id_sch_event_in              => id_sch_event_in,
            id_sch_dep_type_in           => id_sch_dep_type_in,
            id_institution_in            => id_institution_in,
            id_software_in               => id_software_in,
            dt_start_in                  => dt_start_in,
            dt_end_in                    => dt_end_in,
            target_in                    => target_in,
            notes_in                     => notes_in,
            flg_available_in             => flg_available_in,
            dt_create_in                 => dt_create_in,
            prof_create_in               => prof_create_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        id_production_target_hist_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_production_target_in       IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_professional_subject_in    IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_dcs_subject_in             IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_type_slot_in           IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_sch_event_in               IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_dep_type_in            IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_institution_in             IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_software_in                IN production_target_hist.id_software%TYPE DEFAULT NULL,
        dt_start_in                   IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_end_in                     IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        target_in                     IN production_target_hist.target%TYPE DEFAULT NULL,
        notes_in                      IN production_target_hist.notes%TYPE DEFAULT NULL,
        flg_available_in              IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        dt_create_in                  IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        prof_create_in                IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        create_user_in                IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_time_in                IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_time_in                IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        id_production_target_hist_out IN OUT production_target_hist.id_production_target_hist%TYPE,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_production_target_in       => id_production_target_in,
            id_professional_subject_in    => id_professional_subject_in,
            id_dcs_subject_in             => id_dcs_subject_in,
            id_dcs_type_slot_in           => id_dcs_type_slot_in,
            id_sch_event_in               => id_sch_event_in,
            id_sch_dep_type_in            => id_sch_dep_type_in,
            id_institution_in             => id_institution_in,
            id_software_in                => id_software_in,
            dt_start_in                   => dt_start_in,
            dt_end_in                     => dt_end_in,
            target_in                     => target_in,
            notes_in                      => notes_in,
            flg_available_in              => flg_available_in,
            dt_create_in                  => dt_create_in,
            prof_create_in                => prof_create_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_production_target_hist_out => id_production_target_hist_out,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    FUNCTION ins
    (
        id_production_target_in    IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_professional_subject_in IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_dcs_subject_in          IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_type_slot_in        IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_sch_event_in            IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_dep_type_in         IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_institution_in          IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN production_target_hist.id_software%TYPE DEFAULT NULL,
        dt_start_in                IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_end_in                  IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        target_in                  IN production_target_hist.target%TYPE DEFAULT NULL,
        notes_in                   IN production_target_hist.notes%TYPE DEFAULT NULL,
        flg_available_in           IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        dt_create_in               IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        prof_create_in             IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        create_user_in             IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) RETURN production_target_hist.id_production_target_hist%TYPE IS
        l_pky production_target_hist.id_production_target_hist%TYPE := next_key;
    BEGIN
        ins(id_production_target_hist_in => l_pky,
            id_production_target_in      => id_production_target_in,
            id_professional_subject_in   => id_professional_subject_in,
            id_dcs_subject_in            => id_dcs_subject_in,
            id_dcs_type_slot_in          => id_dcs_type_slot_in,
            id_sch_event_in              => id_sch_event_in,
            id_sch_dep_type_in           => id_sch_dep_type_in,
            id_institution_in            => id_institution_in,
            id_software_in               => id_software_in,
            dt_start_in                  => dt_start_in,
            dt_end_in                    => dt_end_in,
            target_in                    => target_in,
            notes_in                     => notes_in,
            flg_available_in             => flg_available_in,
            dt_create_in                 => dt_create_in,
            prof_create_in               => prof_create_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_production_target_in    IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_professional_subject_in IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_dcs_subject_in          IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_type_slot_in        IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_sch_event_in            IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_dep_type_in         IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_institution_in          IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN production_target_hist.id_software%TYPE DEFAULT NULL,
        dt_start_in                IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_end_in                  IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        target_in                  IN production_target_hist.target%TYPE DEFAULT NULL,
        notes_in                   IN production_target_hist.notes%TYPE DEFAULT NULL,
        flg_available_in           IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        dt_create_in               IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        prof_create_in             IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        create_user_in             IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) RETURN production_target_hist.id_production_target_hist%TYPE IS
        l_pky    production_target_hist.id_production_target_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_production_target_hist_in => l_pky,
            id_production_target_in      => id_production_target_in,
            id_professional_subject_in   => id_professional_subject_in,
            id_dcs_subject_in            => id_dcs_subject_in,
            id_dcs_type_slot_in          => id_dcs_type_slot_in,
            id_sch_event_in              => id_sch_event_in,
            id_sch_dep_type_in           => id_sch_dep_type_in,
            id_institution_in            => id_institution_in,
            id_software_in               => id_software_in,
            dt_start_in                  => dt_start_in,
            dt_end_in                    => dt_end_in,
            target_in                    => target_in,
            notes_in                     => notes_in,
            flg_available_in             => flg_available_in,
            dt_create_in                 => dt_create_in,
            prof_create_in               => prof_create_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_production_target_in    IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_professional_subject_in IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_dcs_subject_in          IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_type_slot_in        IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_sch_event_in            IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_dep_type_in         IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_institution_in          IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN production_target_hist.id_software%TYPE DEFAULT NULL,
        dt_start_in                IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_end_in                  IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        target_in                  IN production_target_hist.target%TYPE DEFAULT NULL,
        notes_in                   IN production_target_hist.notes%TYPE DEFAULT NULL,
        flg_available_in           IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        dt_create_in               IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        prof_create_in             IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        create_user_in             IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky production_target_hist.id_production_target_hist%TYPE := next_key;
    BEGIN
        ins(id_production_target_hist_in => l_pky,
            id_production_target_in      => id_production_target_in,
            id_professional_subject_in   => id_professional_subject_in,
            id_dcs_subject_in            => id_dcs_subject_in,
            id_dcs_type_slot_in          => id_dcs_type_slot_in,
            id_sch_event_in              => id_sch_event_in,
            id_sch_dep_type_in           => id_sch_dep_type_in,
            id_institution_in            => id_institution_in,
            id_software_in               => id_software_in,
            dt_start_in                  => dt_start_in,
            dt_end_in                    => dt_end_in,
            target_in                    => target_in,
            notes_in                     => notes_in,
            flg_available_in             => flg_available_in,
            dt_create_in                 => dt_create_in,
            prof_create_in               => prof_create_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_production_target_in    IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_professional_subject_in IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_dcs_subject_in          IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_type_slot_in        IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_sch_event_in            IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_dep_type_in         IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_institution_in          IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_software_in             IN production_target_hist.id_software%TYPE DEFAULT NULL,
        dt_start_in                IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_end_in                  IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        target_in                  IN production_target_hist.target%TYPE DEFAULT NULL,
        notes_in                   IN production_target_hist.notes%TYPE DEFAULT NULL,
        flg_available_in           IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        dt_create_in               IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        prof_create_in             IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        create_user_in             IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        l_pky    production_target_hist.id_production_target_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_production_target_hist_in => l_pky,
            id_production_target_in      => id_production_target_in,
            id_professional_subject_in   => id_professional_subject_in,
            id_dcs_subject_in            => id_dcs_subject_in,
            id_dcs_type_slot_in          => id_dcs_type_slot_in,
            id_sch_event_in              => id_sch_event_in,
            id_sch_dep_type_in           => id_sch_dep_type_in,
            id_institution_in            => id_institution_in,
            id_software_in               => id_software_in,
            dt_start_in                  => dt_start_in,
            dt_end_in                    => dt_end_in,
            target_in                    => target_in,
            notes_in                     => notes_in,
            flg_available_in             => flg_available_in,
            dt_create_in                 => dt_create_in,
            prof_create_in               => prof_create_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN production_target_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO production_target_hist
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PRODUCTION_TARGET_HIST _' || indx,
                                                        value_in           => rows_in(indx).id_production_target_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PRODUCTION_TARGET _' || indx,
                                                        value_in           => rows_in(indx).id_production_target,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL_SUBJECT _' || indx,
                                                        value_in           => rows_in(indx).id_professional_subject,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DCS_SUBJECT _' || indx,
                                                        value_in           => rows_in(indx).id_dcs_subject,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DCS_TYPE_SLOT _' || indx,
                                                        value_in           => rows_in(indx).id_dcs_type_slot,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCH_EVENT _' || indx,
                                                        value_in           => rows_in(indx).id_sch_event,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCH_DEP_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_sch_dep_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE _' || indx,
                                                        value_in           => rows_in(indx).id_software,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_START _' || indx,
                                                        value_in           => rows_in(indx).dt_start,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_END _' || indx,
                                                        value_in           => rows_in(indx).dt_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TARGET _' || indx,
                                                        value_in           => rows_in(indx).target,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE _' || indx,
                                                        value_in           => rows_in(indx).flg_available,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CREATE _' || indx,
                                                        value_in           => rows_in(indx).dt_create,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PROF_CREATE _' || indx,
                                                        value_in           => rows_in(indx).prof_create,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PRODUCTION_TARGET_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN production_target_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_production_target_hist_in IN production_target_hist.id_production_target_hist%TYPE,
        id_production_target_in      IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_production_target_nin     IN BOOLEAN := TRUE,
        id_professional_subject_in   IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_professional_subject_nin  IN BOOLEAN := TRUE,
        id_dcs_subject_in            IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_subject_nin           IN BOOLEAN := TRUE,
        id_dcs_type_slot_in          IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_dcs_type_slot_nin         IN BOOLEAN := TRUE,
        id_sch_event_in              IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_event_nin             IN BOOLEAN := TRUE,
        id_sch_dep_type_in           IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_sch_dep_type_nin          IN BOOLEAN := TRUE,
        id_institution_in            IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin           IN BOOLEAN := TRUE,
        id_software_in               IN production_target_hist.id_software%TYPE DEFAULT NULL,
        id_software_nin              IN BOOLEAN := TRUE,
        dt_start_in                  IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_start_nin                 IN BOOLEAN := TRUE,
        dt_end_in                    IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                   IN BOOLEAN := TRUE,
        target_in                    IN production_target_hist.target%TYPE DEFAULT NULL,
        target_nin                   IN BOOLEAN := TRUE,
        notes_in                     IN production_target_hist.notes%TYPE DEFAULT NULL,
        notes_nin                    IN BOOLEAN := TRUE,
        flg_available_in             IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        flg_available_nin            IN BOOLEAN := TRUE,
        dt_create_in                 IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        dt_create_nin                IN BOOLEAN := TRUE,
        prof_create_in               IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        prof_create_nin              IN BOOLEAN := TRUE,
        create_user_in               IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     IN OUT table_varchar
    ) IS
        l_rows_out                  table_varchar;
        l_id_production_target_n    NUMBER(1);
        l_id_professional_subject_n NUMBER(1);
        l_id_dcs_subject_n          NUMBER(1);
        l_id_dcs_type_slot_n        NUMBER(1);
        l_id_sch_event_n            NUMBER(1);
        l_id_sch_dep_type_n         NUMBER(1);
        l_id_institution_n          NUMBER(1);
        l_id_software_n             NUMBER(1);
        l_dt_start_n                NUMBER(1);
        l_dt_end_n                  NUMBER(1);
        l_target_n                  NUMBER(1);
        l_notes_n                   NUMBER(1);
        l_flg_available_n           NUMBER(1);
        l_dt_create_n               NUMBER(1);
        l_prof_create_n             NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
    BEGIN
    
        l_id_production_target_n    := sys.diutil.bool_to_int(id_production_target_nin);
        l_id_professional_subject_n := sys.diutil.bool_to_int(id_professional_subject_nin);
        l_id_dcs_subject_n          := sys.diutil.bool_to_int(id_dcs_subject_nin);
        l_id_dcs_type_slot_n        := sys.diutil.bool_to_int(id_dcs_type_slot_nin);
        l_id_sch_event_n            := sys.diutil.bool_to_int(id_sch_event_nin);
        l_id_sch_dep_type_n         := sys.diutil.bool_to_int(id_sch_dep_type_nin);
        l_id_institution_n          := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n             := sys.diutil.bool_to_int(id_software_nin);
        l_dt_start_n                := sys.diutil.bool_to_int(dt_start_nin);
        l_dt_end_n                  := sys.diutil.bool_to_int(dt_end_nin);
        l_target_n                  := sys.diutil.bool_to_int(target_nin);
        l_notes_n                   := sys.diutil.bool_to_int(notes_nin);
        l_flg_available_n           := sys.diutil.bool_to_int(flg_available_nin);
        l_dt_create_n               := sys.diutil.bool_to_int(dt_create_nin);
        l_prof_create_n             := sys.diutil.bool_to_int(prof_create_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE production_target_hist
           SET id_production_target    = decode(l_id_production_target_n,
                                                0,
                                                id_production_target_in,
                                                nvl(id_production_target_in, id_production_target)),
               id_professional_subject = decode(l_id_professional_subject_n,
                                                0,
                                                id_professional_subject_in,
                                                nvl(id_professional_subject_in, id_professional_subject)),
               id_dcs_subject          = decode(l_id_dcs_subject_n,
                                                0,
                                                id_dcs_subject_in,
                                                nvl(id_dcs_subject_in, id_dcs_subject)),
               id_dcs_type_slot        = decode(l_id_dcs_type_slot_n,
                                                0,
                                                id_dcs_type_slot_in,
                                                nvl(id_dcs_type_slot_in, id_dcs_type_slot)),
               id_sch_event            = decode(l_id_sch_event_n, 0, id_sch_event_in, nvl(id_sch_event_in, id_sch_event)),
               id_sch_dep_type         = decode(l_id_sch_dep_type_n,
                                                0,
                                                id_sch_dep_type_in,
                                                nvl(id_sch_dep_type_in, id_sch_dep_type)),
               id_institution          = decode(l_id_institution_n,
                                                0,
                                                id_institution_in,
                                                nvl(id_institution_in, id_institution)),
               id_software             = decode(l_id_software_n, 0, id_software_in, nvl(id_software_in, id_software)),
               dt_start                = decode(l_dt_start_n, 0, dt_start_in, nvl(dt_start_in, dt_start)),
               dt_end                  = decode(l_dt_end_n, 0, dt_end_in, nvl(dt_end_in, dt_end)),
               target                  = decode(l_target_n, 0, target_in, nvl(target_in, target)),
               notes                   = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               flg_available           = decode(l_flg_available_n,
                                                0,
                                                flg_available_in,
                                                nvl(flg_available_in, flg_available)),
               dt_create               = decode(l_dt_create_n, 0, dt_create_in, nvl(dt_create_in, dt_create)),
               prof_create             = decode(l_prof_create_n, 0, prof_create_in, nvl(prof_create_in, prof_create)),
               create_user             = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time             = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution      = decode(l_create_institution_n,
                                                0,
                                                create_institution_in,
                                                nvl(create_institution_in, create_institution)),
               update_user             = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time             = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution      = decode(l_update_institution_n,
                                                0,
                                                update_institution_in,
                                                nvl(update_institution_in, update_institution))
         WHERE id_production_target_hist = id_production_target_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'PTTH_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "PTTH_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'PRODUCTION_TARGET_HIST',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL_SUBJECT',
                                                        value_in           => id_professional_subject_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DCS_SUBJECT',
                                                        value_in           => id_dcs_subject_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DCS_TYPE_SLOT',
                                                        value_in           => id_dcs_type_slot_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCH_EVENT',
                                                        value_in           => id_sch_event_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCH_DEP_TYPE',
                                                        value_in           => id_sch_dep_type_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_START',
                                                        value_in           => dt_start_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_END',
                                                        value_in           => dt_end_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE',
                                                        value_in           => flg_available_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PRODUCTION_TARGET_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    IF l_name = 'PTTHDCSS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DCS_SUBJECT',
                                                        value_in           => id_dcs_subject_in);
                    END IF;
                    IF l_name = 'PTTHDCSTS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DCS_TYPE_SLOT',
                                                        value_in           => id_dcs_type_slot_in);
                    END IF;
                    IF l_name = 'PTTHI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PTTHPRC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'PROF_CREATE',
                                                        value_in           => prof_create_in);
                    END IF;
                    IF l_name = 'PTTHPRF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL_SUBJECT',
                                                        value_in           => id_professional_subject_in);
                    END IF;
                    IF l_name = 'PTTHSDT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCH_DEP_TYPE',
                                                        value_in           => id_sch_dep_type_in);
                    END IF;
                    IF l_name = 'PTTHSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCH_EVENT',
                                                        value_in           => id_sch_event_in);
                    END IF;
                    IF l_name = 'PTTHST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_production_target_hist_in IN production_target_hist.id_production_target_hist%TYPE,
        id_production_target_in      IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_production_target_nin     IN BOOLEAN := TRUE,
        id_professional_subject_in   IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_professional_subject_nin  IN BOOLEAN := TRUE,
        id_dcs_subject_in            IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_subject_nin           IN BOOLEAN := TRUE,
        id_dcs_type_slot_in          IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_dcs_type_slot_nin         IN BOOLEAN := TRUE,
        id_sch_event_in              IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_event_nin             IN BOOLEAN := TRUE,
        id_sch_dep_type_in           IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_sch_dep_type_nin          IN BOOLEAN := TRUE,
        id_institution_in            IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin           IN BOOLEAN := TRUE,
        id_software_in               IN production_target_hist.id_software%TYPE DEFAULT NULL,
        id_software_nin              IN BOOLEAN := TRUE,
        dt_start_in                  IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_start_nin                 IN BOOLEAN := TRUE,
        dt_end_in                    IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                   IN BOOLEAN := TRUE,
        target_in                    IN production_target_hist.target%TYPE DEFAULT NULL,
        target_nin                   IN BOOLEAN := TRUE,
        notes_in                     IN production_target_hist.notes%TYPE DEFAULT NULL,
        notes_nin                    IN BOOLEAN := TRUE,
        flg_available_in             IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        flg_available_nin            IN BOOLEAN := TRUE,
        dt_create_in                 IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        dt_create_nin                IN BOOLEAN := TRUE,
        prof_create_in               IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        prof_create_nin              IN BOOLEAN := TRUE,
        create_user_in               IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_production_target_hist_in => id_production_target_hist_in,
            id_production_target_in      => id_production_target_in,
            id_production_target_nin     => id_production_target_nin,
            id_professional_subject_in   => id_professional_subject_in,
            id_professional_subject_nin  => id_professional_subject_nin,
            id_dcs_subject_in            => id_dcs_subject_in,
            id_dcs_subject_nin           => id_dcs_subject_nin,
            id_dcs_type_slot_in          => id_dcs_type_slot_in,
            id_dcs_type_slot_nin         => id_dcs_type_slot_nin,
            id_sch_event_in              => id_sch_event_in,
            id_sch_event_nin             => id_sch_event_nin,
            id_sch_dep_type_in           => id_sch_dep_type_in,
            id_sch_dep_type_nin          => id_sch_dep_type_nin,
            id_institution_in            => id_institution_in,
            id_institution_nin           => id_institution_nin,
            id_software_in               => id_software_in,
            id_software_nin              => id_software_nin,
            dt_start_in                  => dt_start_in,
            dt_start_nin                 => dt_start_nin,
            dt_end_in                    => dt_end_in,
            dt_end_nin                   => dt_end_nin,
            target_in                    => target_in,
            target_nin                   => target_nin,
            notes_in                     => notes_in,
            notes_nin                    => notes_nin,
            flg_available_in             => flg_available_in,
            flg_available_nin            => flg_available_nin,
            dt_create_in                 => dt_create_in,
            dt_create_nin                => dt_create_nin,
            prof_create_in               => prof_create_in,
            prof_create_nin              => prof_create_nin,
            create_user_in               => create_user_in,
            create_user_nin              => create_user_nin,
            create_time_in               => create_time_in,
            create_time_nin              => create_time_nin,
            create_institution_in        => create_institution_in,
            create_institution_nin       => create_institution_nin,
            update_user_in               => update_user_in,
            update_user_nin              => update_user_nin,
            update_time_in               => update_time_in,
            update_time_nin              => update_time_nin,
            update_institution_in        => update_institution_in,
            update_institution_nin       => update_institution_nin,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_production_target_in     IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_production_target_nin    IN BOOLEAN := TRUE,
        id_professional_subject_in  IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_professional_subject_nin IN BOOLEAN := TRUE,
        id_dcs_subject_in           IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_subject_nin          IN BOOLEAN := TRUE,
        id_dcs_type_slot_in         IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_dcs_type_slot_nin        IN BOOLEAN := TRUE,
        id_sch_event_in             IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_event_nin            IN BOOLEAN := TRUE,
        id_sch_dep_type_in          IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_sch_dep_type_nin         IN BOOLEAN := TRUE,
        id_institution_in           IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_software_in              IN production_target_hist.id_software%TYPE DEFAULT NULL,
        id_software_nin             IN BOOLEAN := TRUE,
        dt_start_in                 IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_start_nin                IN BOOLEAN := TRUE,
        dt_end_in                   IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                  IN BOOLEAN := TRUE,
        target_in                   IN production_target_hist.target%TYPE DEFAULT NULL,
        target_nin                  IN BOOLEAN := TRUE,
        notes_in                    IN production_target_hist.notes%TYPE DEFAULT NULL,
        notes_nin                   IN BOOLEAN := TRUE,
        flg_available_in            IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        flg_available_nin           IN BOOLEAN := TRUE,
        dt_create_in                IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        dt_create_nin               IN BOOLEAN := TRUE,
        prof_create_in              IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        prof_create_nin             IN BOOLEAN := TRUE,
        create_user_in              IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        where_in                    VARCHAR2 DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_sql                        VARCHAR2(32767);
        l_rows_out                   table_varchar;
        l_id_production_target_n     NUMBER(1);
        l_id_professional_subject_n  NUMBER(1);
        l_id_dcs_subject_n           NUMBER(1);
        l_id_dcs_type_slot_n         NUMBER(1);
        l_id_sch_event_n             NUMBER(1);
        l_id_sch_dep_type_n          NUMBER(1);
        l_id_institution_n           NUMBER(1);
        l_id_software_n              NUMBER(1);
        l_dt_start_n                 NUMBER(1);
        l_dt_end_n                   NUMBER(1);
        l_target_n                   NUMBER(1);
        l_notes_n                    NUMBER(1);
        l_flg_available_n            NUMBER(1);
        l_dt_create_n                NUMBER(1);
        l_prof_create_n              NUMBER(1);
        l_create_user_n              NUMBER(1);
        l_create_time_n              NUMBER(1);
        l_create_institution_n       NUMBER(1);
        l_update_user_n              NUMBER(1);
        l_update_time_n              NUMBER(1);
        l_update_institution_n       NUMBER(1);
        id_production_target_hist_in production_target_hist.id_production_target_hist%TYPE;
    BEGIN
    
        l_id_production_target_n    := sys.diutil.bool_to_int(id_production_target_nin);
        l_id_professional_subject_n := sys.diutil.bool_to_int(id_professional_subject_nin);
        l_id_dcs_subject_n          := sys.diutil.bool_to_int(id_dcs_subject_nin);
        l_id_dcs_type_slot_n        := sys.diutil.bool_to_int(id_dcs_type_slot_nin);
        l_id_sch_event_n            := sys.diutil.bool_to_int(id_sch_event_nin);
        l_id_sch_dep_type_n         := sys.diutil.bool_to_int(id_sch_dep_type_nin);
        l_id_institution_n          := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n             := sys.diutil.bool_to_int(id_software_nin);
        l_dt_start_n                := sys.diutil.bool_to_int(dt_start_nin);
        l_dt_end_n                  := sys.diutil.bool_to_int(dt_end_nin);
        l_target_n                  := sys.diutil.bool_to_int(target_nin);
        l_notes_n                   := sys.diutil.bool_to_int(notes_nin);
        l_flg_available_n           := sys.diutil.bool_to_int(flg_available_nin);
        l_dt_create_n               := sys.diutil.bool_to_int(dt_create_nin);
        l_prof_create_n             := sys.diutil.bool_to_int(prof_create_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE PRODUCTION_TARGET_HIST SET ' || ' ID_PRODUCTION_TARGET = decode (' || l_id_production_target_n ||
                 ',0,:id_production_target_in, NVL (:id_production_target_in, ID_PRODUCTION_TARGET)) ' || ',' ||
                 ' ID_PROFESSIONAL_SUBJECT = decode (' || l_id_professional_subject_n ||
                 ',0,:id_professional_subject_in, NVL (:id_professional_subject_in, ID_PROFESSIONAL_SUBJECT)) ' || ',' ||
                 ' ID_DCS_SUBJECT = decode (' || l_id_dcs_subject_n ||
                 ',0,:id_dcs_subject_in, NVL (:id_dcs_subject_in, ID_DCS_SUBJECT)) ' || ',' ||
                 ' ID_DCS_TYPE_SLOT = decode (' || l_id_dcs_type_slot_n ||
                 ',0,:id_dcs_type_slot_in, NVL (:id_dcs_type_slot_in, ID_DCS_TYPE_SLOT)) ' || ',' ||
                 ' ID_SCH_EVENT = decode (' || l_id_sch_event_n ||
                 ',0,:id_sch_event_in, NVL (:id_sch_event_in, ID_SCH_EVENT)) ' || ',' || ' ID_SCH_DEP_TYPE = decode (' ||
                 l_id_sch_dep_type_n || ',0,:id_sch_dep_type_in, NVL (:id_sch_dep_type_in, ID_SCH_DEP_TYPE)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' ID_SOFTWARE = decode (' || l_id_software_n ||
                 ',0,:id_software_in, NVL (:id_software_in, ID_SOFTWARE)) ' || ',' || ' DT_START = decode (' ||
                 l_dt_start_n || ',0,:dt_start_in, NVL (:dt_start_in, DT_START)) ' || ',' || ' DT_END = decode (' ||
                 l_dt_end_n || ',0,:dt_end_in, NVL (:dt_end_in, DT_END)) ' || ',' || ' TARGET = decode (' || l_target_n ||
                 ',0,:target_in, NVL (:target_in, TARGET)) ' || ',' || ' NOTES = decode (' || l_notes_n ||
                 ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' || ' FLG_AVAILABLE = decode (' || l_flg_available_n ||
                 ',0,:flg_available_in, NVL (:flg_available_in, FLG_AVAILABLE)) ' || ',' || ' DT_CREATE = decode (' ||
                 l_dt_create_n || ',0,:dt_create_in, NVL (:dt_create_in, DT_CREATE)) ' || ',' ||
                 ' PROF_CREATE = decode (' || l_prof_create_n ||
                 ',0,:prof_create_in, NVL (:prof_create_in, PROF_CREATE)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_production_target_in, id_professional_subject_in, id_dcs_subject_in, id_dcs_type_slot_in, id_sch_event_in, id_sch_dep_type_in, id_institution_in, id_software_in, dt_start_in, dt_end_in, target_in, notes_in, flg_available_in, dt_create_in, prof_create_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'PTTH_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "PTTH_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'PRODUCTION_TARGET_HIST',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL_SUBJECT',
                                                        value_in           => id_professional_subject_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DCS_SUBJECT',
                                                        value_in           => id_dcs_subject_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DCS_TYPE_SLOT',
                                                        value_in           => id_dcs_type_slot_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCH_EVENT',
                                                        value_in           => id_sch_event_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCH_DEP_TYPE',
                                                        value_in           => id_sch_dep_type_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_START',
                                                        value_in           => dt_start_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_END',
                                                        value_in           => dt_end_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE',
                                                        value_in           => flg_available_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PRODUCTION_TARGET_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    IF l_name = 'PTTHDCSS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DCS_SUBJECT',
                                                        value_in           => id_dcs_subject_in);
                    END IF;
                    IF l_name = 'PTTHDCSTS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DCS_TYPE_SLOT',
                                                        value_in           => id_dcs_type_slot_in);
                    END IF;
                    IF l_name = 'PTTHI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PTTHPRC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'PROF_CREATE',
                                                        value_in           => prof_create_in);
                    END IF;
                    IF l_name = 'PTTHPRF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL_SUBJECT',
                                                        value_in           => id_professional_subject_in);
                    END IF;
                    IF l_name = 'PTTHSDT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCH_DEP_TYPE',
                                                        value_in           => id_sch_dep_type_in);
                    END IF;
                    IF l_name = 'PTTHSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCH_EVENT',
                                                        value_in           => id_sch_event_in);
                    END IF;
                    IF l_name = 'PTTHST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_production_target_in     IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_production_target_nin    IN BOOLEAN := TRUE,
        id_professional_subject_in  IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_professional_subject_nin IN BOOLEAN := TRUE,
        id_dcs_subject_in           IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_subject_nin          IN BOOLEAN := TRUE,
        id_dcs_type_slot_in         IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_dcs_type_slot_nin        IN BOOLEAN := TRUE,
        id_sch_event_in             IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_event_nin            IN BOOLEAN := TRUE,
        id_sch_dep_type_in          IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_sch_dep_type_nin         IN BOOLEAN := TRUE,
        id_institution_in           IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_software_in              IN production_target_hist.id_software%TYPE DEFAULT NULL,
        id_software_nin             IN BOOLEAN := TRUE,
        dt_start_in                 IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_start_nin                IN BOOLEAN := TRUE,
        dt_end_in                   IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                  IN BOOLEAN := TRUE,
        target_in                   IN production_target_hist.target%TYPE DEFAULT NULL,
        target_nin                  IN BOOLEAN := TRUE,
        notes_in                    IN production_target_hist.notes%TYPE DEFAULT NULL,
        notes_nin                   IN BOOLEAN := TRUE,
        flg_available_in            IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        flg_available_nin           IN BOOLEAN := TRUE,
        dt_create_in                IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        dt_create_nin               IN BOOLEAN := TRUE,
        prof_create_in              IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        prof_create_nin             IN BOOLEAN := TRUE,
        create_user_in              IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        where_in                    VARCHAR2 DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_production_target_in     => id_production_target_in,
            id_production_target_nin    => id_production_target_nin,
            id_professional_subject_in  => id_professional_subject_in,
            id_professional_subject_nin => id_professional_subject_nin,
            id_dcs_subject_in           => id_dcs_subject_in,
            id_dcs_subject_nin          => id_dcs_subject_nin,
            id_dcs_type_slot_in         => id_dcs_type_slot_in,
            id_dcs_type_slot_nin        => id_dcs_type_slot_nin,
            id_sch_event_in             => id_sch_event_in,
            id_sch_event_nin            => id_sch_event_nin,
            id_sch_dep_type_in          => id_sch_dep_type_in,
            id_sch_dep_type_nin         => id_sch_dep_type_nin,
            id_institution_in           => id_institution_in,
            id_institution_nin          => id_institution_nin,
            id_software_in              => id_software_in,
            id_software_nin             => id_software_nin,
            dt_start_in                 => dt_start_in,
            dt_start_nin                => dt_start_nin,
            dt_end_in                   => dt_end_in,
            dt_end_nin                  => dt_end_nin,
            target_in                   => target_in,
            target_nin                  => target_nin,
            notes_in                    => notes_in,
            notes_nin                   => notes_nin,
            flg_available_in            => flg_available_in,
            flg_available_nin           => flg_available_nin,
            dt_create_in                => dt_create_in,
            dt_create_nin               => dt_create_nin,
            prof_create_in              => prof_create_in,
            prof_create_nin             => prof_create_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            where_in                    => where_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN production_target_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_production_target_hist_in => rec_in.id_production_target_hist,
            id_production_target_in      => rec_in.id_production_target,
            id_professional_subject_in   => rec_in.id_professional_subject,
            id_dcs_subject_in            => rec_in.id_dcs_subject,
            id_dcs_type_slot_in          => rec_in.id_dcs_type_slot,
            id_sch_event_in              => rec_in.id_sch_event,
            id_sch_dep_type_in           => rec_in.id_sch_dep_type,
            id_institution_in            => rec_in.id_institution,
            id_software_in               => rec_in.id_software,
            dt_start_in                  => rec_in.dt_start,
            dt_end_in                    => rec_in.dt_end,
            target_in                    => rec_in.target,
            notes_in                     => rec_in.notes,
            flg_available_in             => rec_in.flg_available,
            dt_create_in                 => rec_in.dt_create,
            prof_create_in               => rec_in.prof_create,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN production_target_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_production_target_hist_in => rec_in.id_production_target_hist,
            id_production_target_in      => rec_in.id_production_target,
            id_professional_subject_in   => rec_in.id_professional_subject,
            id_dcs_subject_in            => rec_in.id_dcs_subject,
            id_dcs_type_slot_in          => rec_in.id_dcs_type_slot,
            id_sch_event_in              => rec_in.id_sch_event,
            id_sch_dep_type_in           => rec_in.id_sch_dep_type,
            id_institution_in            => rec_in.id_institution,
            id_software_in               => rec_in.id_software,
            dt_start_in                  => rec_in.dt_start,
            dt_end_in                    => rec_in.dt_end,
            target_in                    => rec_in.target,
            notes_in                     => rec_in.notes,
            flg_available_in             => rec_in.flg_available,
            dt_create_in                 => rec_in.dt_create,
            prof_create_in               => rec_in.prof_create,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_production_target_hist_in IN production_target_hist.id_production_target_hist%TYPE,
        id_production_target_in      IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_professional_subject_in   IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_dcs_subject_in            IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_type_slot_in          IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_sch_event_in              IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_dep_type_in           IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_institution_in            IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_software_in               IN production_target_hist.id_software%TYPE DEFAULT NULL,
        dt_start_in                  IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_end_in                    IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        target_in                    IN production_target_hist.target%TYPE DEFAULT NULL,
        notes_in                     IN production_target_hist.notes%TYPE DEFAULT NULL,
        flg_available_in             IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        dt_create_in                 IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        prof_create_in               IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        create_user_in               IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        upd(id_production_target_hist_in => id_production_target_hist_in,
            id_production_target_in      => id_production_target_in,
            id_professional_subject_in   => id_professional_subject_in,
            id_dcs_subject_in            => id_dcs_subject_in,
            id_dcs_type_slot_in          => id_dcs_type_slot_in,
            id_sch_event_in              => id_sch_event_in,
            id_sch_dep_type_in           => id_sch_dep_type_in,
            id_institution_in            => id_institution_in,
            id_software_in               => id_software_in,
            dt_start_in                  => dt_start_in,
            dt_end_in                    => dt_end_in,
            target_in                    => target_in,
            notes_in                     => notes_in,
            flg_available_in             => flg_available_in,
            dt_create_in                 => dt_create_in,
            prof_create_in               => prof_create_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_production_target_hist_in => id_production_target_hist_in,
                id_production_target_in      => id_production_target_in,
                id_professional_subject_in   => id_professional_subject_in,
                id_dcs_subject_in            => id_dcs_subject_in,
                id_dcs_type_slot_in          => id_dcs_type_slot_in,
                id_sch_event_in              => id_sch_event_in,
                id_sch_dep_type_in           => id_sch_dep_type_in,
                id_institution_in            => id_institution_in,
                id_software_in               => id_software_in,
                dt_start_in                  => dt_start_in,
                dt_end_in                    => dt_end_in,
                target_in                    => target_in,
                notes_in                     => notes_in,
                flg_available_in             => flg_available_in,
                dt_create_in                 => dt_create_in,
                prof_create_in               => prof_create_in,
                create_user_in               => create_user_in,
                create_time_in               => create_time_in,
                create_institution_in        => create_institution_in,
                update_user_in               => update_user_in,
                update_time_in               => update_time_in,
                update_institution_in        => update_institution_in,
                handle_error_in              => handle_error_in,
                rows_out                     => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_production_target_hist_in IN production_target_hist.id_production_target_hist%TYPE,
        id_production_target_in      IN production_target_hist.id_production_target%TYPE DEFAULT NULL,
        id_professional_subject_in   IN production_target_hist.id_professional_subject%TYPE DEFAULT NULL,
        id_dcs_subject_in            IN production_target_hist.id_dcs_subject%TYPE DEFAULT NULL,
        id_dcs_type_slot_in          IN production_target_hist.id_dcs_type_slot%TYPE DEFAULT NULL,
        id_sch_event_in              IN production_target_hist.id_sch_event%TYPE DEFAULT NULL,
        id_sch_dep_type_in           IN production_target_hist.id_sch_dep_type%TYPE DEFAULT NULL,
        id_institution_in            IN production_target_hist.id_institution%TYPE DEFAULT NULL,
        id_software_in               IN production_target_hist.id_software%TYPE DEFAULT NULL,
        dt_start_in                  IN production_target_hist.dt_start%TYPE DEFAULT NULL,
        dt_end_in                    IN production_target_hist.dt_end%TYPE DEFAULT NULL,
        target_in                    IN production_target_hist.target%TYPE DEFAULT NULL,
        notes_in                     IN production_target_hist.notes%TYPE DEFAULT NULL,
        flg_available_in             IN production_target_hist.flg_available%TYPE DEFAULT NULL,
        dt_create_in                 IN production_target_hist.dt_create%TYPE DEFAULT NULL,
        prof_create_in               IN production_target_hist.prof_create%TYPE DEFAULT NULL,
        create_user_in               IN production_target_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN production_target_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN production_target_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN production_target_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN production_target_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN production_target_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_production_target_hist_in,
                id_production_target_in,
                id_professional_subject_in,
                id_dcs_subject_in,
                id_dcs_type_slot_in,
                id_sch_event_in,
                id_sch_dep_type_in,
                id_institution_in,
                id_software_in,
                dt_start_in,
                dt_end_in,
                target_in,
                notes_in,
                flg_available_in,
                dt_create_in,
                prof_create_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN production_target_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_production_target_hist id_production_target_hist_cc;
        l_id_production_target      id_production_target_cc;
        l_id_professional_subject   id_professional_subject_cc;
        l_id_dcs_subject            id_dcs_subject_cc;
        l_id_dcs_type_slot          id_dcs_type_slot_cc;
        l_id_sch_event              id_sch_event_cc;
        l_id_sch_dep_type           id_sch_dep_type_cc;
        l_id_institution            id_institution_cc;
        l_id_software               id_software_cc;
        l_dt_start                  dt_start_cc;
        l_dt_end                    dt_end_cc;
        l_target                    target_cc;
        l_notes                     notes_cc;
        l_flg_available             flg_available_cc;
        l_dt_create                 dt_create_cc;
        l_prof_create               prof_create_cc;
        l_create_user               create_user_cc;
        l_create_time               create_time_cc;
        l_create_institution        create_institution_cc;
        l_update_user               update_user_cc;
        l_update_time               update_time_cc;
        l_update_institution        update_institution_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_production_target_hist(i) := col_in(i).id_production_target_hist;
            l_id_production_target(i) := col_in(i).id_production_target;
            l_id_professional_subject(i) := col_in(i).id_professional_subject;
            l_id_dcs_subject(i) := col_in(i).id_dcs_subject;
            l_id_dcs_type_slot(i) := col_in(i).id_dcs_type_slot;
            l_id_sch_event(i) := col_in(i).id_sch_event;
            l_id_sch_dep_type(i) := col_in(i).id_sch_dep_type;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_software(i) := col_in(i).id_software;
            l_dt_start(i) := col_in(i).dt_start;
            l_dt_end(i) := col_in(i).dt_end;
            l_target(i) := col_in(i).target;
            l_notes(i) := col_in(i).notes;
            l_flg_available(i) := col_in(i).flg_available;
            l_dt_create(i) := col_in(i).dt_create;
            l_prof_create(i) := col_in(i).prof_create;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE production_target_hist
                   SET id_production_target    = nvl(l_id_production_target(i), id_production_target),
                       id_professional_subject = nvl(l_id_professional_subject(i), id_professional_subject),
                       id_dcs_subject          = nvl(l_id_dcs_subject(i), id_dcs_subject),
                       id_dcs_type_slot        = nvl(l_id_dcs_type_slot(i), id_dcs_type_slot),
                       id_sch_event            = nvl(l_id_sch_event(i), id_sch_event),
                       id_sch_dep_type         = nvl(l_id_sch_dep_type(i), id_sch_dep_type),
                       id_institution          = nvl(l_id_institution(i), id_institution),
                       id_software             = nvl(l_id_software(i), id_software),
                       dt_start                = nvl(l_dt_start(i), dt_start),
                       dt_end                  = nvl(l_dt_end(i), dt_end),
                       target                  = nvl(l_target(i), target),
                       notes                   = nvl(l_notes(i), notes),
                       flg_available           = nvl(l_flg_available(i), flg_available),
                       dt_create               = nvl(l_dt_create(i), dt_create),
                       prof_create             = nvl(l_prof_create(i), prof_create),
                       create_user             = nvl(l_create_user(i), create_user),
                       create_time             = nvl(l_create_time(i), create_time),
                       create_institution      = nvl(l_create_institution(i), create_institution),
                       update_user             = nvl(l_update_user(i), update_user),
                       update_time             = nvl(l_update_time(i), update_time),
                       update_institution      = nvl(l_update_institution(i), update_institution)
                 WHERE id_production_target_hist = l_id_production_target_hist(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE production_target_hist
                   SET id_production_target    = l_id_production_target(i),
                       id_professional_subject = l_id_professional_subject(i),
                       id_dcs_subject          = l_id_dcs_subject(i),
                       id_dcs_type_slot        = l_id_dcs_type_slot(i),
                       id_sch_event            = l_id_sch_event(i),
                       id_sch_dep_type         = l_id_sch_dep_type(i),
                       id_institution          = l_id_institution(i),
                       id_software             = l_id_software(i),
                       dt_start                = l_dt_start(i),
                       dt_end                  = l_dt_end(i),
                       target                  = l_target(i),
                       notes                   = l_notes(i),
                       flg_available           = l_flg_available(i),
                       dt_create               = l_dt_create(i),
                       prof_create             = l_prof_create(i),
                       create_user             = l_create_user(i),
                       create_time             = l_create_time(i),
                       create_institution      = l_create_institution(i),
                       update_user             = l_update_user(i),
                       update_time             = l_update_time(i),
                       update_institution      = l_update_institution(i)
                 WHERE id_production_target_hist = l_id_production_target_hist(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN production_target_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PRODUCTION_TARGET_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PRODUCTION_TARGET_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PRODUCTION_TARGET_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PRODUCTION_TARGET_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_production_target_hist_in IN production_target_hist.id_production_target_hist%TYPE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM production_target_hist
         WHERE id_production_target_hist = id_production_target_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_production_target_hist_in IN production_target_hist.id_production_target_hist%TYPE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_production_target_hist_in => id_production_target_hist_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PRODUCTION_TARGET_HIST
    PROCEDURE del_id_production_target_hist
    (
        id_production_target_hist_in IN production_target_hist.id_production_target_hist%TYPE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM production_target_hist
         WHERE id_production_target_hist = id_production_target_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_production_target_hist;

    -- Delete all rows for primary key column ID_PRODUCTION_TARGET_HIST
    PROCEDURE del_id_production_target_hist
    (
        id_production_target_hist_in IN production_target_hist.id_production_target_hist%TYPE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_production_target_hist(id_production_target_hist_in => id_production_target_hist_in,
                                      handle_error_in              => handle_error_in,
                                      rows_out                     => rows_out);
    END del_id_production_target_hist;

    -- Delete for unique value of PTTH_UK
    PROCEDURE del_ptth_uk
    (
        id_professional_subject_in IN production_target_hist.id_professional_subject%TYPE,
        id_dcs_subject_in          IN production_target_hist.id_dcs_subject%TYPE,
        id_dcs_type_slot_in        IN production_target_hist.id_dcs_type_slot%TYPE,
        id_sch_event_in            IN production_target_hist.id_sch_event%TYPE,
        id_sch_dep_type_in         IN production_target_hist.id_sch_dep_type%TYPE,
        id_institution_in          IN production_target_hist.id_institution%TYPE,
        id_software_in             IN production_target_hist.id_software%TYPE,
        dt_start_in                IN production_target_hist.dt_start%TYPE,
        dt_end_in                  IN production_target_hist.dt_end%TYPE,
        flg_available_in           IN production_target_hist.flg_available%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM production_target_hist
         WHERE id_professional_subject = id_professional_subject_in
           AND id_dcs_subject = id_dcs_subject_in
           AND id_dcs_type_slot = id_dcs_type_slot_in
           AND id_sch_event = id_sch_event_in
           AND id_sch_dep_type = id_sch_dep_type_in
           AND id_institution = id_institution_in
           AND id_software = id_software_in
           AND dt_start = dt_start_in
           AND dt_end = dt_end_in
           AND flg_available = flg_available_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptth_uk;

    -- Delete for unique value of PTTH_UK
    PROCEDURE del_ptth_uk
    (
        id_professional_subject_in IN production_target_hist.id_professional_subject%TYPE,
        id_dcs_subject_in          IN production_target_hist.id_dcs_subject%TYPE,
        id_dcs_type_slot_in        IN production_target_hist.id_dcs_type_slot%TYPE,
        id_sch_event_in            IN production_target_hist.id_sch_event%TYPE,
        id_sch_dep_type_in         IN production_target_hist.id_sch_dep_type%TYPE,
        id_institution_in          IN production_target_hist.id_institution%TYPE,
        id_software_in             IN production_target_hist.id_software%TYPE,
        dt_start_in                IN production_target_hist.dt_start%TYPE,
        dt_end_in                  IN production_target_hist.dt_end%TYPE,
        flg_available_in           IN production_target_hist.flg_available%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptth_uk(id_professional_subject_in => id_professional_subject_in,
                    id_dcs_subject_in          => id_dcs_subject_in,
                    id_dcs_type_slot_in        => id_dcs_type_slot_in,
                    id_sch_event_in            => id_sch_event_in,
                    id_sch_dep_type_in         => id_sch_dep_type_in,
                    id_institution_in          => id_institution_in,
                    id_software_in             => id_software_in,
                    dt_start_in                => dt_start_in,
                    dt_end_in                  => dt_end_in,
                    flg_available_in           => flg_available_in,
                    handle_error_in            => handle_error_in,
                    rows_out                   => rows_out);
    END del_ptth_uk;

    PROCEDURE del_ptthdcss_fk
    (
        id_dcs_subject_in IN production_target_hist.id_dcs_subject%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM production_target_hist
         WHERE id_dcs_subject = del_ptthdcss_fk.id_dcs_subject_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptthdcss_fk;

    PROCEDURE del_ptthdcss_fk
    (
        id_dcs_subject_in IN production_target_hist.id_dcs_subject%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptthdcss_fk(id_dcs_subject_in => id_dcs_subject_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_ptthdcss_fk;

    PROCEDURE del_ptthdcsts_fk
    (
        id_dcs_type_slot_in IN production_target_hist.id_dcs_type_slot%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM production_target_hist
         WHERE id_dcs_type_slot = del_ptthdcsts_fk.id_dcs_type_slot_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptthdcsts_fk;

    PROCEDURE del_ptthdcsts_fk
    (
        id_dcs_type_slot_in IN production_target_hist.id_dcs_type_slot%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptthdcsts_fk(id_dcs_type_slot_in => id_dcs_type_slot_in,
                         handle_error_in     => handle_error_in,
                         rows_out            => rows_out);
    END del_ptthdcsts_fk;

    PROCEDURE del_ptthi_fk
    (
        id_institution_in IN production_target_hist.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM production_target_hist
         WHERE id_institution = del_ptthi_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptthi_fk;

    PROCEDURE del_ptthi_fk
    (
        id_institution_in IN production_target_hist.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptthi_fk(id_institution_in => id_institution_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptthi_fk;

    PROCEDURE del_ptthprc_fk
    (
        prof_create_in  IN production_target_hist.prof_create%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM production_target_hist
         WHERE prof_create = del_ptthprc_fk.prof_create_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptthprc_fk;

    PROCEDURE del_ptthprc_fk
    (
        prof_create_in  IN production_target_hist.prof_create%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptthprc_fk(prof_create_in => prof_create_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptthprc_fk;

    PROCEDURE del_ptthprf_fk
    (
        id_professional_subject_in IN production_target_hist.id_professional_subject%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM production_target_hist
         WHERE id_professional_subject = del_ptthprf_fk.id_professional_subject_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptthprf_fk;

    PROCEDURE del_ptthprf_fk
    (
        id_professional_subject_in IN production_target_hist.id_professional_subject%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptthprf_fk(id_professional_subject_in => id_professional_subject_in,
                       handle_error_in            => handle_error_in,
                       rows_out                   => rows_out);
    END del_ptthprf_fk;

    PROCEDURE del_ptthsdt_fk
    (
        id_sch_dep_type_in IN production_target_hist.id_sch_dep_type%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM production_target_hist
         WHERE id_sch_dep_type = del_ptthsdt_fk.id_sch_dep_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptthsdt_fk;

    PROCEDURE del_ptthsdt_fk
    (
        id_sch_dep_type_in IN production_target_hist.id_sch_dep_type%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptthsdt_fk(id_sch_dep_type_in => id_sch_dep_type_in,
                       handle_error_in    => handle_error_in,
                       rows_out           => rows_out);
    END del_ptthsdt_fk;

    PROCEDURE del_ptthse_fk
    (
        id_sch_event_in IN production_target_hist.id_sch_event%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM production_target_hist
         WHERE id_sch_event = del_ptthse_fk.id_sch_event_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptthse_fk;

    PROCEDURE del_ptthse_fk
    (
        id_sch_event_in IN production_target_hist.id_sch_event%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptthse_fk(id_sch_event_in => id_sch_event_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptthse_fk;

    PROCEDURE del_ptthst_fk
    (
        id_software_in  IN production_target_hist.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM production_target_hist
         WHERE id_software = del_ptthst_fk.id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptthst_fk;

    PROCEDURE del_ptthst_fk
    (
        id_software_in  IN production_target_hist.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptthst_fk(id_software_in => id_software_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptthst_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PRODUCTION_TARGET_HIST';
        ELSE
            RETURN 'DELETE FROM PRODUCTION_TARGET_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRODUCTION_TARGET_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRODUCTION_TARGET_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(production_target_hist_inout IN OUT production_target_hist%ROWTYPE) IS
    BEGIN
        production_target_hist_inout.id_production_target_hist := NULL;
        production_target_hist_inout.id_production_target      := NULL;
        production_target_hist_inout.id_professional_subject   := NULL;
        production_target_hist_inout.id_dcs_subject            := NULL;
        production_target_hist_inout.id_dcs_type_slot          := NULL;
        production_target_hist_inout.id_sch_event              := NULL;
        production_target_hist_inout.id_sch_dep_type           := NULL;
        production_target_hist_inout.id_institution            := NULL;
        production_target_hist_inout.id_software               := NULL;
        production_target_hist_inout.dt_start                  := NULL;
        production_target_hist_inout.dt_end                    := NULL;
        production_target_hist_inout.target                    := NULL;
        production_target_hist_inout.notes                     := NULL;
        production_target_hist_inout.flg_available             := NULL;
        production_target_hist_inout.dt_create                 := NULL;
        production_target_hist_inout.prof_create               := NULL;
        production_target_hist_inout.create_user               := NULL;
        production_target_hist_inout.create_time               := NULL;
        production_target_hist_inout.create_institution        := NULL;
        production_target_hist_inout.update_user               := NULL;
        production_target_hist_inout.update_time               := NULL;
        production_target_hist_inout.update_institution        := NULL;
    END initrec;

    FUNCTION initrec RETURN production_target_hist%ROWTYPE IS
        l_production_target_hist production_target_hist%ROWTYPE;
    BEGIN
        RETURN l_production_target_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN production_target_hist_tc IS
        data production_target_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM production_target_hist
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN production_target_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data production_target_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_production_target_hist;
/
