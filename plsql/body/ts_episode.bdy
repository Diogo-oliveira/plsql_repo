/*-- Last Change Revision: $Rev: 2028030 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:59 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_episode
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2018-11-30 15:23:55
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN episode.id_episode%TYPE IS
        retval episode.id_episode%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_episode.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_visit_in                IN episode.id_visit%TYPE DEFAULT NULL,
        id_clinical_service_in     IN episode.id_clinical_service%TYPE DEFAULT NULL,
        flg_status_in              IN episode.flg_status%TYPE DEFAULT NULL,
        id_epis_type_in            IN episode.id_epis_type%TYPE DEFAULT NULL,
        companion_in               IN episode.companion%TYPE DEFAULT NULL,
        barcode_in                 IN episode.barcode%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        flg_type_in                IN episode.flg_type%TYPE DEFAULT 'D',
        id_prev_episode_in         IN episode.id_prev_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in           IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in             IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in          IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        flg_migration_in           IN episode.flg_migration%TYPE DEFAULT 'A',
        desc_cancel_reason_in      IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        flg_ehr_in                 IN episode.flg_ehr%TYPE DEFAULT 'N',
        id_fast_track_in           IN episode.id_fast_track%TYPE DEFAULT NULL,
        dt_creation_in             IN episode.dt_creation%TYPE DEFAULT NULL,
        id_patient_in              IN episode.id_patient%TYPE DEFAULT NULL,
        id_dept_in                 IN episode.id_dept%TYPE DEFAULT NULL,
        id_department_in           IN episode.id_department%TYPE DEFAULT NULL,
        id_cs_requested_in         IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_institution_in          IN episode.id_institution%TYPE DEFAULT NULL,
        id_department_requested_in IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_dept_requested_in       IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_prev_epis_type_in       IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        flg_cancel_type_in         IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        create_user_in             IN episode.create_user%TYPE DEFAULT NULL,
        create_time_in             IN episode.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN episode.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN episode.update_user%TYPE DEFAULT NULL,
        update_time_in             IN episode.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN episode.update_institution%TYPE DEFAULT NULL,
        flg_appointment_type_in    IN episode.flg_appointment_type%TYPE DEFAULT 'N',
        id_task_dependency_in      IN episode.id_task_dependency%TYPE DEFAULT NULL,
        flg_compulsory_in          IN episode.flg_compulsory%TYPE DEFAULT NULL,
        id_compulsory_reason_in    IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_in       IN episode.compulsory_reason%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky episode.id_episode%TYPE := next_key;
    BEGIN
        ins(id_episode_in              => l_pky,
            id_visit_in                => id_visit_in,
            id_clinical_service_in     => id_clinical_service_in,
            flg_status_in              => flg_status_in,
            id_epis_type_in            => id_epis_type_in,
            companion_in               => companion_in,
            barcode_in                 => barcode_in,
            id_prof_cancel_in          => id_prof_cancel_in,
            flg_type_in                => flg_type_in,
            id_prev_episode_in         => id_prev_episode_in,
            dt_begin_tstz_in           => dt_begin_tstz_in,
            dt_end_tstz_in             => dt_end_tstz_in,
            dt_cancel_tstz_in          => dt_cancel_tstz_in,
            flg_migration_in           => flg_migration_in,
            desc_cancel_reason_in      => desc_cancel_reason_in,
            flg_ehr_in                 => flg_ehr_in,
            id_fast_track_in           => id_fast_track_in,
            dt_creation_in             => dt_creation_in,
            id_patient_in              => id_patient_in,
            id_dept_in                 => id_dept_in,
            id_department_in           => id_department_in,
            id_cs_requested_in         => id_cs_requested_in,
            id_institution_in          => id_institution_in,
            id_department_requested_in => id_department_requested_in,
            id_dept_requested_in       => id_dept_requested_in,
            id_prev_epis_type_in       => id_prev_epis_type_in,
            flg_cancel_type_in         => flg_cancel_type_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_appointment_type_in    => flg_appointment_type_in,
            id_task_dependency_in      => id_task_dependency_in,
            flg_compulsory_in          => flg_compulsory_in,
            id_compulsory_reason_in    => id_compulsory_reason_in,
            compulsory_reason_in       => compulsory_reason_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_visit_in                IN episode.id_visit%TYPE DEFAULT NULL,
        id_clinical_service_in     IN episode.id_clinical_service%TYPE DEFAULT NULL,
        flg_status_in              IN episode.flg_status%TYPE DEFAULT NULL,
        id_epis_type_in            IN episode.id_epis_type%TYPE DEFAULT NULL,
        companion_in               IN episode.companion%TYPE DEFAULT NULL,
        barcode_in                 IN episode.barcode%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        flg_type_in                IN episode.flg_type%TYPE DEFAULT 'D',
        id_prev_episode_in         IN episode.id_prev_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in           IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in             IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in          IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        flg_migration_in           IN episode.flg_migration%TYPE DEFAULT 'A',
        desc_cancel_reason_in      IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        flg_ehr_in                 IN episode.flg_ehr%TYPE DEFAULT 'N',
        id_fast_track_in           IN episode.id_fast_track%TYPE DEFAULT NULL,
        dt_creation_in             IN episode.dt_creation%TYPE DEFAULT NULL,
        id_patient_in              IN episode.id_patient%TYPE DEFAULT NULL,
        id_dept_in                 IN episode.id_dept%TYPE DEFAULT NULL,
        id_department_in           IN episode.id_department%TYPE DEFAULT NULL,
        id_cs_requested_in         IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_institution_in          IN episode.id_institution%TYPE DEFAULT NULL,
        id_department_requested_in IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_dept_requested_in       IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_prev_epis_type_in       IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        flg_cancel_type_in         IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        create_user_in             IN episode.create_user%TYPE DEFAULT NULL,
        create_time_in             IN episode.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN episode.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN episode.update_user%TYPE DEFAULT NULL,
        update_time_in             IN episode.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN episode.update_institution%TYPE DEFAULT NULL,
        flg_appointment_type_in    IN episode.flg_appointment_type%TYPE DEFAULT 'N',
        id_task_dependency_in      IN episode.id_task_dependency%TYPE DEFAULT NULL,
        flg_compulsory_in          IN episode.flg_compulsory%TYPE DEFAULT NULL,
        id_compulsory_reason_in    IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_in       IN episode.compulsory_reason%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_visit_in                => id_visit_in,
            id_clinical_service_in     => id_clinical_service_in,
            flg_status_in              => flg_status_in,
            id_epis_type_in            => id_epis_type_in,
            companion_in               => companion_in,
            barcode_in                 => barcode_in,
            id_prof_cancel_in          => id_prof_cancel_in,
            flg_type_in                => flg_type_in,
            id_prev_episode_in         => id_prev_episode_in,
            dt_begin_tstz_in           => dt_begin_tstz_in,
            dt_end_tstz_in             => dt_end_tstz_in,
            dt_cancel_tstz_in          => dt_cancel_tstz_in,
            flg_migration_in           => flg_migration_in,
            desc_cancel_reason_in      => desc_cancel_reason_in,
            flg_ehr_in                 => flg_ehr_in,
            id_fast_track_in           => id_fast_track_in,
            dt_creation_in             => dt_creation_in,
            id_patient_in              => id_patient_in,
            id_dept_in                 => id_dept_in,
            id_department_in           => id_department_in,
            id_cs_requested_in         => id_cs_requested_in,
            id_institution_in          => id_institution_in,
            id_department_requested_in => id_department_requested_in,
            id_dept_requested_in       => id_dept_requested_in,
            id_prev_epis_type_in       => id_prev_epis_type_in,
            flg_cancel_type_in         => flg_cancel_type_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_appointment_type_in    => flg_appointment_type_in,
            id_task_dependency_in      => id_task_dependency_in,
            flg_compulsory_in          => flg_compulsory_in,
            id_compulsory_reason_in    => id_compulsory_reason_in,
            compulsory_reason_in       => compulsory_reason_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_visit_in                IN episode.id_visit%TYPE DEFAULT NULL,
        id_clinical_service_in     IN episode.id_clinical_service%TYPE DEFAULT NULL,
        flg_status_in              IN episode.flg_status%TYPE DEFAULT NULL,
        id_epis_type_in            IN episode.id_epis_type%TYPE DEFAULT NULL,
        companion_in               IN episode.companion%TYPE DEFAULT NULL,
        barcode_in                 IN episode.barcode%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        flg_type_in                IN episode.flg_type%TYPE DEFAULT 'D',
        id_prev_episode_in         IN episode.id_prev_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in           IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in             IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in          IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        flg_migration_in           IN episode.flg_migration%TYPE DEFAULT 'A',
        desc_cancel_reason_in      IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        flg_ehr_in                 IN episode.flg_ehr%TYPE DEFAULT 'N',
        id_fast_track_in           IN episode.id_fast_track%TYPE DEFAULT NULL,
        dt_creation_in             IN episode.dt_creation%TYPE DEFAULT NULL,
        id_patient_in              IN episode.id_patient%TYPE DEFAULT NULL,
        id_dept_in                 IN episode.id_dept%TYPE DEFAULT NULL,
        id_department_in           IN episode.id_department%TYPE DEFAULT NULL,
        id_cs_requested_in         IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_institution_in          IN episode.id_institution%TYPE DEFAULT NULL,
        id_department_requested_in IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_dept_requested_in       IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_prev_epis_type_in       IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        flg_cancel_type_in         IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        create_user_in             IN episode.create_user%TYPE DEFAULT NULL,
        create_time_in             IN episode.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN episode.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN episode.update_user%TYPE DEFAULT NULL,
        update_time_in             IN episode.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN episode.update_institution%TYPE DEFAULT NULL,
        flg_appointment_type_in    IN episode.flg_appointment_type%TYPE DEFAULT 'N',
        id_task_dependency_in      IN episode.id_task_dependency%TYPE DEFAULT NULL,
        flg_compulsory_in          IN episode.flg_compulsory%TYPE DEFAULT NULL,
        id_compulsory_reason_in    IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_in       IN episode.compulsory_reason%TYPE DEFAULT NULL,
        id_episode_out             IN OUT episode.id_episode%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky episode.id_episode%TYPE := next_key;
    BEGIN
        ins(id_episode_in              => l_pky,
            id_visit_in                => id_visit_in,
            id_clinical_service_in     => id_clinical_service_in,
            flg_status_in              => flg_status_in,
            id_epis_type_in            => id_epis_type_in,
            companion_in               => companion_in,
            barcode_in                 => barcode_in,
            id_prof_cancel_in          => id_prof_cancel_in,
            flg_type_in                => flg_type_in,
            id_prev_episode_in         => id_prev_episode_in,
            dt_begin_tstz_in           => dt_begin_tstz_in,
            dt_end_tstz_in             => dt_end_tstz_in,
            dt_cancel_tstz_in          => dt_cancel_tstz_in,
            flg_migration_in           => flg_migration_in,
            desc_cancel_reason_in      => desc_cancel_reason_in,
            flg_ehr_in                 => flg_ehr_in,
            id_fast_track_in           => id_fast_track_in,
            dt_creation_in             => dt_creation_in,
            id_patient_in              => id_patient_in,
            id_dept_in                 => id_dept_in,
            id_department_in           => id_department_in,
            id_cs_requested_in         => id_cs_requested_in,
            id_institution_in          => id_institution_in,
            id_department_requested_in => id_department_requested_in,
            id_dept_requested_in       => id_dept_requested_in,
            id_prev_epis_type_in       => id_prev_epis_type_in,
            flg_cancel_type_in         => flg_cancel_type_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_appointment_type_in    => flg_appointment_type_in,
            id_task_dependency_in      => id_task_dependency_in,
            flg_compulsory_in          => flg_compulsory_in,
            id_compulsory_reason_in    => id_compulsory_reason_in,
            compulsory_reason_in       => compulsory_reason_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        id_episode_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_visit_in                IN episode.id_visit%TYPE DEFAULT NULL,
        id_clinical_service_in     IN episode.id_clinical_service%TYPE DEFAULT NULL,
        flg_status_in              IN episode.flg_status%TYPE DEFAULT NULL,
        id_epis_type_in            IN episode.id_epis_type%TYPE DEFAULT NULL,
        companion_in               IN episode.companion%TYPE DEFAULT NULL,
        barcode_in                 IN episode.barcode%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        flg_type_in                IN episode.flg_type%TYPE DEFAULT 'D',
        id_prev_episode_in         IN episode.id_prev_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in           IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in             IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in          IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        flg_migration_in           IN episode.flg_migration%TYPE DEFAULT 'A',
        desc_cancel_reason_in      IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        flg_ehr_in                 IN episode.flg_ehr%TYPE DEFAULT 'N',
        id_fast_track_in           IN episode.id_fast_track%TYPE DEFAULT NULL,
        dt_creation_in             IN episode.dt_creation%TYPE DEFAULT NULL,
        id_patient_in              IN episode.id_patient%TYPE DEFAULT NULL,
        id_dept_in                 IN episode.id_dept%TYPE DEFAULT NULL,
        id_department_in           IN episode.id_department%TYPE DEFAULT NULL,
        id_cs_requested_in         IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_institution_in          IN episode.id_institution%TYPE DEFAULT NULL,
        id_department_requested_in IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_dept_requested_in       IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_prev_epis_type_in       IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        flg_cancel_type_in         IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        create_user_in             IN episode.create_user%TYPE DEFAULT NULL,
        create_time_in             IN episode.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN episode.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN episode.update_user%TYPE DEFAULT NULL,
        update_time_in             IN episode.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN episode.update_institution%TYPE DEFAULT NULL,
        flg_appointment_type_in    IN episode.flg_appointment_type%TYPE DEFAULT 'N',
        id_task_dependency_in      IN episode.id_task_dependency%TYPE DEFAULT NULL,
        flg_compulsory_in          IN episode.flg_compulsory%TYPE DEFAULT NULL,
        id_compulsory_reason_in    IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_in       IN episode.compulsory_reason%TYPE DEFAULT NULL,
        id_episode_out             IN OUT episode.id_episode%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_visit_in                => id_visit_in,
            id_clinical_service_in     => id_clinical_service_in,
            flg_status_in              => flg_status_in,
            id_epis_type_in            => id_epis_type_in,
            companion_in               => companion_in,
            barcode_in                 => barcode_in,
            id_prof_cancel_in          => id_prof_cancel_in,
            flg_type_in                => flg_type_in,
            id_prev_episode_in         => id_prev_episode_in,
            dt_begin_tstz_in           => dt_begin_tstz_in,
            dt_end_tstz_in             => dt_end_tstz_in,
            dt_cancel_tstz_in          => dt_cancel_tstz_in,
            flg_migration_in           => flg_migration_in,
            desc_cancel_reason_in      => desc_cancel_reason_in,
            flg_ehr_in                 => flg_ehr_in,
            id_fast_track_in           => id_fast_track_in,
            dt_creation_in             => dt_creation_in,
            id_patient_in              => id_patient_in,
            id_dept_in                 => id_dept_in,
            id_department_in           => id_department_in,
            id_cs_requested_in         => id_cs_requested_in,
            id_institution_in          => id_institution_in,
            id_department_requested_in => id_department_requested_in,
            id_dept_requested_in       => id_dept_requested_in,
            id_prev_epis_type_in       => id_prev_epis_type_in,
            flg_cancel_type_in         => flg_cancel_type_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_appointment_type_in    => flg_appointment_type_in,
            id_task_dependency_in      => id_task_dependency_in,
            flg_compulsory_in          => flg_compulsory_in,
            id_compulsory_reason_in    => id_compulsory_reason_in,
            compulsory_reason_in       => compulsory_reason_in,
            id_episode_out             => id_episode_out,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_visit_in                IN episode.id_visit%TYPE DEFAULT NULL,
        id_clinical_service_in     IN episode.id_clinical_service%TYPE DEFAULT NULL,
        flg_status_in              IN episode.flg_status%TYPE DEFAULT NULL,
        id_epis_type_in            IN episode.id_epis_type%TYPE DEFAULT NULL,
        companion_in               IN episode.companion%TYPE DEFAULT NULL,
        barcode_in                 IN episode.barcode%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        flg_type_in                IN episode.flg_type%TYPE DEFAULT 'D',
        id_prev_episode_in         IN episode.id_prev_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in           IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in             IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in          IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        flg_migration_in           IN episode.flg_migration%TYPE DEFAULT 'A',
        desc_cancel_reason_in      IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        flg_ehr_in                 IN episode.flg_ehr%TYPE DEFAULT 'N',
        id_fast_track_in           IN episode.id_fast_track%TYPE DEFAULT NULL,
        dt_creation_in             IN episode.dt_creation%TYPE DEFAULT NULL,
        id_patient_in              IN episode.id_patient%TYPE DEFAULT NULL,
        id_dept_in                 IN episode.id_dept%TYPE DEFAULT NULL,
        id_department_in           IN episode.id_department%TYPE DEFAULT NULL,
        id_cs_requested_in         IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_institution_in          IN episode.id_institution%TYPE DEFAULT NULL,
        id_department_requested_in IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_dept_requested_in       IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_prev_epis_type_in       IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        flg_cancel_type_in         IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        create_user_in             IN episode.create_user%TYPE DEFAULT NULL,
        create_time_in             IN episode.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN episode.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN episode.update_user%TYPE DEFAULT NULL,
        update_time_in             IN episode.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN episode.update_institution%TYPE DEFAULT NULL,
        flg_appointment_type_in    IN episode.flg_appointment_type%TYPE DEFAULT 'N',
        id_task_dependency_in      IN episode.id_task_dependency%TYPE DEFAULT NULL,
        flg_compulsory_in          IN episode.flg_compulsory%TYPE DEFAULT NULL,
        id_compulsory_reason_in    IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_in       IN episode.compulsory_reason%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN episode.id_episode%TYPE IS
        l_pky episode.id_episode%TYPE := next_key;
    BEGIN
        ins(id_episode_in              => l_pky,
            id_visit_in                => id_visit_in,
            id_clinical_service_in     => id_clinical_service_in,
            flg_status_in              => flg_status_in,
            id_epis_type_in            => id_epis_type_in,
            companion_in               => companion_in,
            barcode_in                 => barcode_in,
            id_prof_cancel_in          => id_prof_cancel_in,
            flg_type_in                => flg_type_in,
            id_prev_episode_in         => id_prev_episode_in,
            dt_begin_tstz_in           => dt_begin_tstz_in,
            dt_end_tstz_in             => dt_end_tstz_in,
            dt_cancel_tstz_in          => dt_cancel_tstz_in,
            flg_migration_in           => flg_migration_in,
            desc_cancel_reason_in      => desc_cancel_reason_in,
            flg_ehr_in                 => flg_ehr_in,
            id_fast_track_in           => id_fast_track_in,
            dt_creation_in             => dt_creation_in,
            id_patient_in              => id_patient_in,
            id_dept_in                 => id_dept_in,
            id_department_in           => id_department_in,
            id_cs_requested_in         => id_cs_requested_in,
            id_institution_in          => id_institution_in,
            id_department_requested_in => id_department_requested_in,
            id_dept_requested_in       => id_dept_requested_in,
            id_prev_epis_type_in       => id_prev_epis_type_in,
            flg_cancel_type_in         => flg_cancel_type_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_appointment_type_in    => flg_appointment_type_in,
            id_task_dependency_in      => id_task_dependency_in,
            flg_compulsory_in          => flg_compulsory_in,
            id_compulsory_reason_in    => id_compulsory_reason_in,
            compulsory_reason_in       => compulsory_reason_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_visit_in                IN episode.id_visit%TYPE DEFAULT NULL,
        id_clinical_service_in     IN episode.id_clinical_service%TYPE DEFAULT NULL,
        flg_status_in              IN episode.flg_status%TYPE DEFAULT NULL,
        id_epis_type_in            IN episode.id_epis_type%TYPE DEFAULT NULL,
        companion_in               IN episode.companion%TYPE DEFAULT NULL,
        barcode_in                 IN episode.barcode%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        flg_type_in                IN episode.flg_type%TYPE DEFAULT 'D',
        id_prev_episode_in         IN episode.id_prev_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in           IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in             IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in          IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        flg_migration_in           IN episode.flg_migration%TYPE DEFAULT 'A',
        desc_cancel_reason_in      IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        flg_ehr_in                 IN episode.flg_ehr%TYPE DEFAULT 'N',
        id_fast_track_in           IN episode.id_fast_track%TYPE DEFAULT NULL,
        dt_creation_in             IN episode.dt_creation%TYPE DEFAULT NULL,
        id_patient_in              IN episode.id_patient%TYPE DEFAULT NULL,
        id_dept_in                 IN episode.id_dept%TYPE DEFAULT NULL,
        id_department_in           IN episode.id_department%TYPE DEFAULT NULL,
        id_cs_requested_in         IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_institution_in          IN episode.id_institution%TYPE DEFAULT NULL,
        id_department_requested_in IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_dept_requested_in       IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_prev_epis_type_in       IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        flg_cancel_type_in         IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        create_user_in             IN episode.create_user%TYPE DEFAULT NULL,
        create_time_in             IN episode.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN episode.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN episode.update_user%TYPE DEFAULT NULL,
        update_time_in             IN episode.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN episode.update_institution%TYPE DEFAULT NULL,
        flg_appointment_type_in    IN episode.flg_appointment_type%TYPE DEFAULT 'N',
        id_task_dependency_in      IN episode.id_task_dependency%TYPE DEFAULT NULL,
        flg_compulsory_in          IN episode.flg_compulsory%TYPE DEFAULT NULL,
        id_compulsory_reason_in    IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_in       IN episode.compulsory_reason%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN episode.id_episode%TYPE IS
        l_pky    episode.id_episode%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in              => l_pky,
            id_visit_in                => id_visit_in,
            id_clinical_service_in     => id_clinical_service_in,
            flg_status_in              => flg_status_in,
            id_epis_type_in            => id_epis_type_in,
            companion_in               => companion_in,
            barcode_in                 => barcode_in,
            id_prof_cancel_in          => id_prof_cancel_in,
            flg_type_in                => flg_type_in,
            id_prev_episode_in         => id_prev_episode_in,
            dt_begin_tstz_in           => dt_begin_tstz_in,
            dt_end_tstz_in             => dt_end_tstz_in,
            dt_cancel_tstz_in          => dt_cancel_tstz_in,
            flg_migration_in           => flg_migration_in,
            desc_cancel_reason_in      => desc_cancel_reason_in,
            flg_ehr_in                 => flg_ehr_in,
            id_fast_track_in           => id_fast_track_in,
            dt_creation_in             => dt_creation_in,
            id_patient_in              => id_patient_in,
            id_dept_in                 => id_dept_in,
            id_department_in           => id_department_in,
            id_cs_requested_in         => id_cs_requested_in,
            id_institution_in          => id_institution_in,
            id_department_requested_in => id_department_requested_in,
            id_dept_requested_in       => id_dept_requested_in,
            id_prev_epis_type_in       => id_prev_epis_type_in,
            flg_cancel_type_in         => flg_cancel_type_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_appointment_type_in    => flg_appointment_type_in,
            id_task_dependency_in      => id_task_dependency_in,
            flg_compulsory_in          => flg_compulsory_in,
            id_compulsory_reason_in    => id_compulsory_reason_in,
            compulsory_reason_in       => compulsory_reason_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_episode_in              IN episode.id_episode%TYPE,
        id_visit_in                IN episode.id_visit%TYPE DEFAULT NULL,
        id_clinical_service_in     IN episode.id_clinical_service%TYPE DEFAULT NULL,
        flg_status_in              IN episode.flg_status%TYPE DEFAULT NULL,
        id_epis_type_in            IN episode.id_epis_type%TYPE DEFAULT NULL,
        companion_in               IN episode.companion%TYPE DEFAULT NULL,
        barcode_in                 IN episode.barcode%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        flg_type_in                IN episode.flg_type%TYPE DEFAULT 'D',
        id_prev_episode_in         IN episode.id_prev_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in           IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in             IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in          IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        flg_migration_in           IN episode.flg_migration%TYPE DEFAULT 'A',
        desc_cancel_reason_in      IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        flg_ehr_in                 IN episode.flg_ehr%TYPE DEFAULT 'N',
        id_fast_track_in           IN episode.id_fast_track%TYPE DEFAULT NULL,
        dt_creation_in             IN episode.dt_creation%TYPE DEFAULT NULL,
        id_patient_in              IN episode.id_patient%TYPE DEFAULT NULL,
        id_dept_in                 IN episode.id_dept%TYPE DEFAULT NULL,
        id_department_in           IN episode.id_department%TYPE DEFAULT NULL,
        id_cs_requested_in         IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_institution_in          IN episode.id_institution%TYPE DEFAULT NULL,
        id_department_requested_in IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_dept_requested_in       IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_prev_epis_type_in       IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        flg_cancel_type_in         IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        create_user_in             IN episode.create_user%TYPE DEFAULT NULL,
        create_time_in             IN episode.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN episode.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN episode.update_user%TYPE DEFAULT NULL,
        update_time_in             IN episode.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN episode.update_institution%TYPE DEFAULT NULL,
        flg_appointment_type_in    IN episode.flg_appointment_type%TYPE DEFAULT 'N',
        id_task_dependency_in      IN episode.id_task_dependency%TYPE DEFAULT NULL,
        flg_compulsory_in          IN episode.flg_compulsory%TYPE DEFAULT NULL,
        id_compulsory_reason_in    IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_in       IN episode.compulsory_reason%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO episode
            (id_episode,
             id_visit,
             id_clinical_service,
             flg_status,
             id_epis_type,
             companion,
             barcode,
             id_prof_cancel,
             flg_type,
             id_prev_episode,
             dt_begin_tstz,
             dt_end_tstz,
             dt_cancel_tstz,
             flg_migration,
             desc_cancel_reason,
             flg_ehr,
             id_fast_track,
             dt_creation,
             id_patient,
             id_dept,
             id_department,
             id_cs_requested,
             id_institution,
             id_department_requested,
             id_dept_requested,
             id_prev_epis_type,
             flg_cancel_type,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_appointment_type,
             id_task_dependency,
             flg_compulsory,
             id_compulsory_reason,
             compulsory_reason)
        VALUES
            (id_episode_in,
             id_visit_in,
             id_clinical_service_in,
             flg_status_in,
             id_epis_type_in,
             companion_in,
             barcode_in,
             id_prof_cancel_in,
             flg_type_in,
             id_prev_episode_in,
             dt_begin_tstz_in,
             dt_end_tstz_in,
             dt_cancel_tstz_in,
             flg_migration_in,
             desc_cancel_reason_in,
             flg_ehr_in,
             id_fast_track_in,
             dt_creation_in,
             id_patient_in,
             id_dept_in,
             id_department_in,
             id_cs_requested_in,
             id_institution_in,
             id_department_requested_in,
             id_dept_requested_in,
             id_prev_epis_type_in,
             flg_cancel_type_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_appointment_type_in,
             id_task_dependency_in,
             flg_compulsory_in,
             id_compulsory_reason_in,
             compulsory_reason_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_episode_in              IN episode.id_episode%TYPE,
        id_visit_in                IN episode.id_visit%TYPE DEFAULT NULL,
        id_clinical_service_in     IN episode.id_clinical_service%TYPE DEFAULT NULL,
        flg_status_in              IN episode.flg_status%TYPE DEFAULT NULL,
        id_epis_type_in            IN episode.id_epis_type%TYPE DEFAULT NULL,
        companion_in               IN episode.companion%TYPE DEFAULT NULL,
        barcode_in                 IN episode.barcode%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        flg_type_in                IN episode.flg_type%TYPE DEFAULT 'D',
        id_prev_episode_in         IN episode.id_prev_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in           IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in             IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in          IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        flg_migration_in           IN episode.flg_migration%TYPE DEFAULT 'A',
        desc_cancel_reason_in      IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        flg_ehr_in                 IN episode.flg_ehr%TYPE DEFAULT 'N',
        id_fast_track_in           IN episode.id_fast_track%TYPE DEFAULT NULL,
        dt_creation_in             IN episode.dt_creation%TYPE DEFAULT NULL,
        id_patient_in              IN episode.id_patient%TYPE DEFAULT NULL,
        id_dept_in                 IN episode.id_dept%TYPE DEFAULT NULL,
        id_department_in           IN episode.id_department%TYPE DEFAULT NULL,
        id_cs_requested_in         IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_institution_in          IN episode.id_institution%TYPE DEFAULT NULL,
        id_department_requested_in IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_dept_requested_in       IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_prev_epis_type_in       IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        flg_cancel_type_in         IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        create_user_in             IN episode.create_user%TYPE DEFAULT NULL,
        create_time_in             IN episode.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN episode.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN episode.update_user%TYPE DEFAULT NULL,
        update_time_in             IN episode.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN episode.update_institution%TYPE DEFAULT NULL,
        flg_appointment_type_in    IN episode.flg_appointment_type%TYPE DEFAULT 'N',
        id_task_dependency_in      IN episode.id_task_dependency%TYPE DEFAULT NULL,
        flg_compulsory_in          IN episode.flg_compulsory%TYPE DEFAULT NULL,
        id_compulsory_reason_in    IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_in       IN episode.compulsory_reason%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in              => id_episode_in,
            id_visit_in                => id_visit_in,
            id_clinical_service_in     => id_clinical_service_in,
            flg_status_in              => flg_status_in,
            id_epis_type_in            => id_epis_type_in,
            companion_in               => companion_in,
            barcode_in                 => barcode_in,
            id_prof_cancel_in          => id_prof_cancel_in,
            flg_type_in                => flg_type_in,
            id_prev_episode_in         => id_prev_episode_in,
            dt_begin_tstz_in           => dt_begin_tstz_in,
            dt_end_tstz_in             => dt_end_tstz_in,
            dt_cancel_tstz_in          => dt_cancel_tstz_in,
            flg_migration_in           => flg_migration_in,
            desc_cancel_reason_in      => desc_cancel_reason_in,
            flg_ehr_in                 => flg_ehr_in,
            id_fast_track_in           => id_fast_track_in,
            dt_creation_in             => dt_creation_in,
            id_patient_in              => id_patient_in,
            id_dept_in                 => id_dept_in,
            id_department_in           => id_department_in,
            id_cs_requested_in         => id_cs_requested_in,
            id_institution_in          => id_institution_in,
            id_department_requested_in => id_department_requested_in,
            id_dept_requested_in       => id_dept_requested_in,
            id_prev_epis_type_in       => id_prev_epis_type_in,
            flg_cancel_type_in         => flg_cancel_type_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_appointment_type_in    => flg_appointment_type_in,
            id_task_dependency_in      => id_task_dependency_in,
            flg_compulsory_in          => flg_compulsory_in,
            id_compulsory_reason_in    => id_compulsory_reason_in,
            compulsory_reason_in       => compulsory_reason_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN episode%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec episode%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_episode := next_key(sequence_in);
        END IF;
    
        ins(id_episode_in              => l_rec.id_episode,
            id_visit_in                => l_rec.id_visit,
            id_clinical_service_in     => l_rec.id_clinical_service,
            flg_status_in              => l_rec.flg_status,
            id_epis_type_in            => l_rec.id_epis_type,
            companion_in               => l_rec.companion,
            barcode_in                 => l_rec.barcode,
            id_prof_cancel_in          => l_rec.id_prof_cancel,
            flg_type_in                => l_rec.flg_type,
            id_prev_episode_in         => l_rec.id_prev_episode,
            dt_begin_tstz_in           => l_rec.dt_begin_tstz,
            dt_end_tstz_in             => l_rec.dt_end_tstz,
            dt_cancel_tstz_in          => l_rec.dt_cancel_tstz,
            flg_migration_in           => l_rec.flg_migration,
            desc_cancel_reason_in      => l_rec.desc_cancel_reason,
            flg_ehr_in                 => l_rec.flg_ehr,
            id_fast_track_in           => l_rec.id_fast_track,
            dt_creation_in             => l_rec.dt_creation,
            id_patient_in              => l_rec.id_patient,
            id_dept_in                 => l_rec.id_dept,
            id_department_in           => l_rec.id_department,
            id_cs_requested_in         => l_rec.id_cs_requested,
            id_institution_in          => l_rec.id_institution,
            id_department_requested_in => l_rec.id_department_requested,
            id_dept_requested_in       => l_rec.id_dept_requested,
            id_prev_epis_type_in       => l_rec.id_prev_epis_type,
            flg_cancel_type_in         => l_rec.flg_cancel_type,
            create_user_in             => l_rec.create_user,
            create_time_in             => l_rec.create_time,
            create_institution_in      => l_rec.create_institution,
            update_user_in             => l_rec.update_user,
            update_time_in             => l_rec.update_time,
            update_institution_in      => l_rec.update_institution,
            flg_appointment_type_in    => l_rec.flg_appointment_type,
            id_task_dependency_in      => l_rec.id_task_dependency,
            flg_compulsory_in          => l_rec.flg_compulsory,
            id_compulsory_reason_in    => l_rec.id_compulsory_reason,
            compulsory_reason_in       => l_rec.compulsory_reason,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN episode%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN episode_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO episode
                    (id_episode,
                     id_visit,
                     id_clinical_service,
                     flg_status,
                     id_epis_type,
                     companion,
                     barcode,
                     id_prof_cancel,
                     flg_type,
                     id_prev_episode,
                     dt_begin_tstz,
                     dt_end_tstz,
                     dt_cancel_tstz,
                     flg_migration,
                     desc_cancel_reason,
                     flg_ehr,
                     id_fast_track,
                     dt_creation,
                     id_patient,
                     id_dept,
                     id_department,
                     id_cs_requested,
                     id_institution,
                     id_department_requested,
                     id_dept_requested,
                     id_prev_epis_type,
                     flg_cancel_type,
                     flg_appointment_type,
                     id_task_dependency,
                     flg_compulsory,
                     id_compulsory_reason,
                     compulsory_reason)
                VALUES
                    (rows_in(indx).id_episode,
                     rows_in(indx).id_visit,
                     rows_in(indx).id_clinical_service,
                     rows_in(indx).flg_status,
                     rows_in(indx).id_epis_type,
                     rows_in(indx).companion,
                     rows_in(indx).barcode,
                     rows_in(indx).id_prof_cancel,
                     rows_in(indx).flg_type,
                     rows_in(indx).id_prev_episode,
                     rows_in(indx).dt_begin_tstz,
                     rows_in(indx).dt_end_tstz,
                     rows_in(indx).dt_cancel_tstz,
                     rows_in(indx).flg_migration,
                     rows_in(indx).desc_cancel_reason,
                     rows_in(indx).flg_ehr,
                     rows_in(indx).id_fast_track,
                     rows_in(indx).dt_creation,
                     rows_in(indx).id_patient,
                     rows_in(indx).id_dept,
                     rows_in(indx).id_department,
                     rows_in(indx).id_cs_requested,
                     rows_in(indx).id_institution,
                     rows_in(indx).id_department_requested,
                     rows_in(indx).id_dept_requested,
                     rows_in(indx).id_prev_epis_type,
                     rows_in(indx).flg_cancel_type,
                     rows_in(indx).flg_appointment_type,
                     rows_in(indx).id_task_dependency,
                     rows_in(indx).flg_compulsory,
                     rows_in(indx).id_compulsory_reason,
                     rows_in(indx).compulsory_reason)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN episode_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_episode_in               IN episode.id_episode%TYPE,
        id_visit_in                 IN episode.id_visit%TYPE DEFAULT NULL,
        id_visit_nin                IN BOOLEAN := TRUE,
        id_clinical_service_in      IN episode.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin     IN BOOLEAN := TRUE,
        flg_status_in               IN episode.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        id_epis_type_in             IN episode.id_epis_type%TYPE DEFAULT NULL,
        id_epis_type_nin            IN BOOLEAN := TRUE,
        companion_in                IN episode.companion%TYPE DEFAULT NULL,
        companion_nin               IN BOOLEAN := TRUE,
        barcode_in                  IN episode.barcode%TYPE DEFAULT NULL,
        barcode_nin                 IN BOOLEAN := TRUE,
        id_prof_cancel_in           IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin          IN BOOLEAN := TRUE,
        flg_type_in                 IN episode.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        id_prev_episode_in          IN episode.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin         IN BOOLEAN := TRUE,
        dt_begin_tstz_in            IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin           IN BOOLEAN := TRUE,
        dt_end_tstz_in              IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin             IN BOOLEAN := TRUE,
        dt_cancel_tstz_in           IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin          IN BOOLEAN := TRUE,
        flg_migration_in            IN episode.flg_migration%TYPE DEFAULT NULL,
        flg_migration_nin           IN BOOLEAN := TRUE,
        desc_cancel_reason_in       IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        desc_cancel_reason_nin      IN BOOLEAN := TRUE,
        flg_ehr_in                  IN episode.flg_ehr%TYPE DEFAULT NULL,
        flg_ehr_nin                 IN BOOLEAN := TRUE,
        id_fast_track_in            IN episode.id_fast_track%TYPE DEFAULT NULL,
        id_fast_track_nin           IN BOOLEAN := TRUE,
        dt_creation_in              IN episode.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin             IN BOOLEAN := TRUE,
        id_patient_in               IN episode.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        id_dept_in                  IN episode.id_dept%TYPE DEFAULT NULL,
        id_dept_nin                 IN BOOLEAN := TRUE,
        id_department_in            IN episode.id_department%TYPE DEFAULT NULL,
        id_department_nin           IN BOOLEAN := TRUE,
        id_cs_requested_in          IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_cs_requested_nin         IN BOOLEAN := TRUE,
        id_institution_in           IN episode.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_department_requested_in  IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_department_requested_nin IN BOOLEAN := TRUE,
        id_dept_requested_in        IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_dept_requested_nin       IN BOOLEAN := TRUE,
        id_prev_epis_type_in        IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        id_prev_epis_type_nin       IN BOOLEAN := TRUE,
        flg_cancel_type_in          IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        flg_cancel_type_nin         IN BOOLEAN := TRUE,
        create_user_in              IN episode.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN episode.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN episode.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN episode.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN episode.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN episode.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        flg_appointment_type_in     IN episode.flg_appointment_type%TYPE DEFAULT NULL,
        flg_appointment_type_nin    IN BOOLEAN := TRUE,
        id_task_dependency_in       IN episode.id_task_dependency%TYPE DEFAULT NULL,
        id_task_dependency_nin      IN BOOLEAN := TRUE,
        flg_compulsory_in           IN episode.flg_compulsory%TYPE DEFAULT NULL,
        flg_compulsory_nin          IN BOOLEAN := TRUE,
        id_compulsory_reason_in     IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        id_compulsory_reason_nin    IN BOOLEAN := TRUE,
        compulsory_reason_in        IN episode.compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_nin       IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_rows_out                  table_varchar;
        l_id_visit_n                NUMBER(1) := sys.diutil.bool_to_int(id_visit_nin);
        l_id_clinical_service_n     NUMBER(1) := sys.diutil.bool_to_int(id_clinical_service_nin);
        l_flg_status_n              NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_epis_type_n            NUMBER(1) := sys.diutil.bool_to_int(id_epis_type_nin);
        l_companion_n               NUMBER(1) := sys.diutil.bool_to_int(companion_nin);
        l_barcode_n                 NUMBER(1) := sys.diutil.bool_to_int(barcode_nin);
        l_id_prof_cancel_n          NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_flg_type_n                NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_id_prev_episode_n         NUMBER(1) := sys.diutil.bool_to_int(id_prev_episode_nin);
        l_dt_begin_tstz_n           NUMBER(1) := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_end_tstz_n             NUMBER(1) := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_dt_cancel_tstz_n          NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_flg_migration_n           NUMBER(1) := sys.diutil.bool_to_int(flg_migration_nin);
        l_desc_cancel_reason_n      NUMBER(1) := sys.diutil.bool_to_int(desc_cancel_reason_nin);
        l_flg_ehr_n                 NUMBER(1) := sys.diutil.bool_to_int(flg_ehr_nin);
        l_id_fast_track_n           NUMBER(1) := sys.diutil.bool_to_int(id_fast_track_nin);
        l_dt_creation_n             NUMBER(1) := sys.diutil.bool_to_int(dt_creation_nin);
        l_id_patient_n              NUMBER(1) := sys.diutil.bool_to_int(id_patient_nin);
        l_id_dept_n                 NUMBER(1) := sys.diutil.bool_to_int(id_dept_nin);
        l_id_department_n           NUMBER(1) := sys.diutil.bool_to_int(id_department_nin);
        l_id_cs_requested_n         NUMBER(1) := sys.diutil.bool_to_int(id_cs_requested_nin);
        l_id_institution_n          NUMBER(1) := sys.diutil.bool_to_int(id_institution_nin);
        l_id_department_requested_n NUMBER(1) := sys.diutil.bool_to_int(id_department_requested_nin);
        l_id_dept_requested_n       NUMBER(1) := sys.diutil.bool_to_int(id_dept_requested_nin);
        l_id_prev_epis_type_n       NUMBER(1) := sys.diutil.bool_to_int(id_prev_epis_type_nin);
        l_flg_cancel_type_n         NUMBER(1) := sys.diutil.bool_to_int(flg_cancel_type_nin);
        l_create_user_n             NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_appointment_type_n    NUMBER(1) := sys.diutil.bool_to_int(flg_appointment_type_nin);
        l_id_task_dependency_n      NUMBER(1) := sys.diutil.bool_to_int(id_task_dependency_nin);
        l_flg_compulsory_n          NUMBER(1) := sys.diutil.bool_to_int(flg_compulsory_nin);
        l_id_compulsory_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_compulsory_reason_nin);
        l_compulsory_reason_n       NUMBER(1) := sys.diutil.bool_to_int(compulsory_reason_nin);
    BEGIN
    
        UPDATE episode
           SET id_visit                = decode(l_id_visit_n, 0, id_visit_in, nvl(id_visit_in, id_visit)),
               id_clinical_service     = decode(l_id_clinical_service_n,
                                                0,
                                                id_clinical_service_in,
                                                nvl(id_clinical_service_in, id_clinical_service)),
               flg_status              = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_epis_type            = decode(l_id_epis_type_n, 0, id_epis_type_in, nvl(id_epis_type_in, id_epis_type)),
               companion               = decode(l_companion_n, 0, companion_in, nvl(companion_in, companion)),
               barcode                 = decode(l_barcode_n, 0, barcode_in, nvl(barcode_in, barcode)),
               id_prof_cancel          = decode(l_id_prof_cancel_n,
                                                0,
                                                id_prof_cancel_in,
                                                nvl(id_prof_cancel_in, id_prof_cancel)),
               flg_type                = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               id_prev_episode         = decode(l_id_prev_episode_n,
                                                0,
                                                id_prev_episode_in,
                                                nvl(id_prev_episode_in, id_prev_episode)),
               dt_begin_tstz           = decode(l_dt_begin_tstz_n,
                                                0,
                                                dt_begin_tstz_in,
                                                nvl(dt_begin_tstz_in, dt_begin_tstz)),
               dt_end_tstz             = decode(l_dt_end_tstz_n, 0, dt_end_tstz_in, nvl(dt_end_tstz_in, dt_end_tstz)),
               dt_cancel_tstz          = decode(l_dt_cancel_tstz_n,
                                                0,
                                                dt_cancel_tstz_in,
                                                nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               flg_migration           = decode(l_flg_migration_n,
                                                0,
                                                flg_migration_in,
                                                nvl(flg_migration_in, flg_migration)),
               desc_cancel_reason      = decode(l_desc_cancel_reason_n,
                                                0,
                                                desc_cancel_reason_in,
                                                nvl(desc_cancel_reason_in, desc_cancel_reason)),
               flg_ehr                 = decode(l_flg_ehr_n, 0, flg_ehr_in, nvl(flg_ehr_in, flg_ehr)),
               id_fast_track           = decode(l_id_fast_track_n,
                                                0,
                                                id_fast_track_in,
                                                nvl(id_fast_track_in, id_fast_track)),
               dt_creation             = decode(l_dt_creation_n, 0, dt_creation_in, nvl(dt_creation_in, dt_creation)),
               id_patient              = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_dept                 = decode(l_id_dept_n, 0, id_dept_in, nvl(id_dept_in, id_dept)),
               id_department           = decode(l_id_department_n,
                                                0,
                                                id_department_in,
                                                nvl(id_department_in, id_department)),
               id_cs_requested         = decode(l_id_cs_requested_n,
                                                0,
                                                id_cs_requested_in,
                                                nvl(id_cs_requested_in, id_cs_requested)),
               id_institution          = decode(l_id_institution_n,
                                                0,
                                                id_institution_in,
                                                nvl(id_institution_in, id_institution)),
               id_department_requested = decode(l_id_department_requested_n,
                                                0,
                                                id_department_requested_in,
                                                nvl(id_department_requested_in, id_department_requested)),
               id_dept_requested       = decode(l_id_dept_requested_n,
                                                0,
                                                id_dept_requested_in,
                                                nvl(id_dept_requested_in, id_dept_requested)),
               id_prev_epis_type       = decode(l_id_prev_epis_type_n,
                                                0,
                                                id_prev_epis_type_in,
                                                nvl(id_prev_epis_type_in, id_prev_epis_type)),
               flg_cancel_type         = decode(l_flg_cancel_type_n,
                                                0,
                                                flg_cancel_type_in,
                                                nvl(flg_cancel_type_in, flg_cancel_type)),
               create_user             = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time             = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution      = decode(l_create_institution_n,
                                                0,
                                                create_institution_in,
                                                nvl(create_institution_in, create_institution)),
               update_user             = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time             = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution      = decode(l_update_institution_n,
                                                0,
                                                update_institution_in,
                                                nvl(update_institution_in, update_institution)),
               flg_appointment_type    = decode(l_flg_appointment_type_n,
                                                0,
                                                flg_appointment_type_in,
                                                nvl(flg_appointment_type_in, flg_appointment_type)),
               id_task_dependency      = decode(l_id_task_dependency_n,
                                                0,
                                                id_task_dependency_in,
                                                nvl(id_task_dependency_in, id_task_dependency)),
               flg_compulsory          = decode(l_flg_compulsory_n,
                                                0,
                                                flg_compulsory_in,
                                                nvl(flg_compulsory_in, flg_compulsory)),
               id_compulsory_reason    = decode(l_id_compulsory_reason_n,
                                                0,
                                                id_compulsory_reason_in,
                                                nvl(id_compulsory_reason_in, id_compulsory_reason)),
               compulsory_reason       = decode(l_compulsory_reason_n,
                                                0,
                                                compulsory_reason_in,
                                                nvl(compulsory_reason_in, compulsory_reason))
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_episode_in               IN episode.id_episode%TYPE,
        id_visit_in                 IN episode.id_visit%TYPE DEFAULT NULL,
        id_visit_nin                IN BOOLEAN := TRUE,
        id_clinical_service_in      IN episode.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin     IN BOOLEAN := TRUE,
        flg_status_in               IN episode.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        id_epis_type_in             IN episode.id_epis_type%TYPE DEFAULT NULL,
        id_epis_type_nin            IN BOOLEAN := TRUE,
        companion_in                IN episode.companion%TYPE DEFAULT NULL,
        companion_nin               IN BOOLEAN := TRUE,
        barcode_in                  IN episode.barcode%TYPE DEFAULT NULL,
        barcode_nin                 IN BOOLEAN := TRUE,
        id_prof_cancel_in           IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin          IN BOOLEAN := TRUE,
        flg_type_in                 IN episode.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        id_prev_episode_in          IN episode.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin         IN BOOLEAN := TRUE,
        dt_begin_tstz_in            IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin           IN BOOLEAN := TRUE,
        dt_end_tstz_in              IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin             IN BOOLEAN := TRUE,
        dt_cancel_tstz_in           IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin          IN BOOLEAN := TRUE,
        flg_migration_in            IN episode.flg_migration%TYPE DEFAULT NULL,
        flg_migration_nin           IN BOOLEAN := TRUE,
        desc_cancel_reason_in       IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        desc_cancel_reason_nin      IN BOOLEAN := TRUE,
        flg_ehr_in                  IN episode.flg_ehr%TYPE DEFAULT NULL,
        flg_ehr_nin                 IN BOOLEAN := TRUE,
        id_fast_track_in            IN episode.id_fast_track%TYPE DEFAULT NULL,
        id_fast_track_nin           IN BOOLEAN := TRUE,
        dt_creation_in              IN episode.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin             IN BOOLEAN := TRUE,
        id_patient_in               IN episode.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        id_dept_in                  IN episode.id_dept%TYPE DEFAULT NULL,
        id_dept_nin                 IN BOOLEAN := TRUE,
        id_department_in            IN episode.id_department%TYPE DEFAULT NULL,
        id_department_nin           IN BOOLEAN := TRUE,
        id_cs_requested_in          IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_cs_requested_nin         IN BOOLEAN := TRUE,
        id_institution_in           IN episode.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_department_requested_in  IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_department_requested_nin IN BOOLEAN := TRUE,
        id_dept_requested_in        IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_dept_requested_nin       IN BOOLEAN := TRUE,
        id_prev_epis_type_in        IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        id_prev_epis_type_nin       IN BOOLEAN := TRUE,
        flg_cancel_type_in          IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        flg_cancel_type_nin         IN BOOLEAN := TRUE,
        create_user_in              IN episode.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN episode.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN episode.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN episode.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN episode.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN episode.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        flg_appointment_type_in     IN episode.flg_appointment_type%TYPE DEFAULT NULL,
        flg_appointment_type_nin    IN BOOLEAN := TRUE,
        id_task_dependency_in       IN episode.id_task_dependency%TYPE DEFAULT NULL,
        id_task_dependency_nin      IN BOOLEAN := TRUE,
        flg_compulsory_in           IN episode.flg_compulsory%TYPE DEFAULT NULL,
        flg_compulsory_nin          IN BOOLEAN := TRUE,
        id_compulsory_reason_in     IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        id_compulsory_reason_nin    IN BOOLEAN := TRUE,
        compulsory_reason_in        IN episode.compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_nin       IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in               => id_episode_in,
            id_visit_in                 => id_visit_in,
            id_visit_nin                => id_visit_nin,
            id_clinical_service_in      => id_clinical_service_in,
            id_clinical_service_nin     => id_clinical_service_nin,
            flg_status_in               => flg_status_in,
            flg_status_nin              => flg_status_nin,
            id_epis_type_in             => id_epis_type_in,
            id_epis_type_nin            => id_epis_type_nin,
            companion_in                => companion_in,
            companion_nin               => companion_nin,
            barcode_in                  => barcode_in,
            barcode_nin                 => barcode_nin,
            id_prof_cancel_in           => id_prof_cancel_in,
            id_prof_cancel_nin          => id_prof_cancel_nin,
            flg_type_in                 => flg_type_in,
            flg_type_nin                => flg_type_nin,
            id_prev_episode_in          => id_prev_episode_in,
            id_prev_episode_nin         => id_prev_episode_nin,
            dt_begin_tstz_in            => dt_begin_tstz_in,
            dt_begin_tstz_nin           => dt_begin_tstz_nin,
            dt_end_tstz_in              => dt_end_tstz_in,
            dt_end_tstz_nin             => dt_end_tstz_nin,
            dt_cancel_tstz_in           => dt_cancel_tstz_in,
            dt_cancel_tstz_nin          => dt_cancel_tstz_nin,
            flg_migration_in            => flg_migration_in,
            flg_migration_nin           => flg_migration_nin,
            desc_cancel_reason_in       => desc_cancel_reason_in,
            desc_cancel_reason_nin      => desc_cancel_reason_nin,
            flg_ehr_in                  => flg_ehr_in,
            flg_ehr_nin                 => flg_ehr_nin,
            id_fast_track_in            => id_fast_track_in,
            id_fast_track_nin           => id_fast_track_nin,
            dt_creation_in              => dt_creation_in,
            dt_creation_nin             => dt_creation_nin,
            id_patient_in               => id_patient_in,
            id_patient_nin              => id_patient_nin,
            id_dept_in                  => id_dept_in,
            id_dept_nin                 => id_dept_nin,
            id_department_in            => id_department_in,
            id_department_nin           => id_department_nin,
            id_cs_requested_in          => id_cs_requested_in,
            id_cs_requested_nin         => id_cs_requested_nin,
            id_institution_in           => id_institution_in,
            id_institution_nin          => id_institution_nin,
            id_department_requested_in  => id_department_requested_in,
            id_department_requested_nin => id_department_requested_nin,
            id_dept_requested_in        => id_dept_requested_in,
            id_dept_requested_nin       => id_dept_requested_nin,
            id_prev_epis_type_in        => id_prev_epis_type_in,
            id_prev_epis_type_nin       => id_prev_epis_type_nin,
            flg_cancel_type_in          => flg_cancel_type_in,
            flg_cancel_type_nin         => flg_cancel_type_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            flg_appointment_type_in     => flg_appointment_type_in,
            flg_appointment_type_nin    => flg_appointment_type_nin,
            id_task_dependency_in       => id_task_dependency_in,
            id_task_dependency_nin      => id_task_dependency_nin,
            flg_compulsory_in           => flg_compulsory_in,
            flg_compulsory_nin          => flg_compulsory_nin,
            id_compulsory_reason_in     => id_compulsory_reason_in,
            id_compulsory_reason_nin    => id_compulsory_reason_nin,
            compulsory_reason_in        => compulsory_reason_in,
            compulsory_reason_nin       => compulsory_reason_nin,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_visit_in                 IN episode.id_visit%TYPE DEFAULT NULL,
        id_visit_nin                IN BOOLEAN := TRUE,
        id_clinical_service_in      IN episode.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin     IN BOOLEAN := TRUE,
        flg_status_in               IN episode.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        id_epis_type_in             IN episode.id_epis_type%TYPE DEFAULT NULL,
        id_epis_type_nin            IN BOOLEAN := TRUE,
        companion_in                IN episode.companion%TYPE DEFAULT NULL,
        companion_nin               IN BOOLEAN := TRUE,
        barcode_in                  IN episode.barcode%TYPE DEFAULT NULL,
        barcode_nin                 IN BOOLEAN := TRUE,
        id_prof_cancel_in           IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin          IN BOOLEAN := TRUE,
        flg_type_in                 IN episode.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        id_prev_episode_in          IN episode.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin         IN BOOLEAN := TRUE,
        dt_begin_tstz_in            IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin           IN BOOLEAN := TRUE,
        dt_end_tstz_in              IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin             IN BOOLEAN := TRUE,
        dt_cancel_tstz_in           IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin          IN BOOLEAN := TRUE,
        flg_migration_in            IN episode.flg_migration%TYPE DEFAULT NULL,
        flg_migration_nin           IN BOOLEAN := TRUE,
        desc_cancel_reason_in       IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        desc_cancel_reason_nin      IN BOOLEAN := TRUE,
        flg_ehr_in                  IN episode.flg_ehr%TYPE DEFAULT NULL,
        flg_ehr_nin                 IN BOOLEAN := TRUE,
        id_fast_track_in            IN episode.id_fast_track%TYPE DEFAULT NULL,
        id_fast_track_nin           IN BOOLEAN := TRUE,
        dt_creation_in              IN episode.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin             IN BOOLEAN := TRUE,
        id_patient_in               IN episode.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        id_dept_in                  IN episode.id_dept%TYPE DEFAULT NULL,
        id_dept_nin                 IN BOOLEAN := TRUE,
        id_department_in            IN episode.id_department%TYPE DEFAULT NULL,
        id_department_nin           IN BOOLEAN := TRUE,
        id_cs_requested_in          IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_cs_requested_nin         IN BOOLEAN := TRUE,
        id_institution_in           IN episode.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_department_requested_in  IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_department_requested_nin IN BOOLEAN := TRUE,
        id_dept_requested_in        IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_dept_requested_nin       IN BOOLEAN := TRUE,
        id_prev_epis_type_in        IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        id_prev_epis_type_nin       IN BOOLEAN := TRUE,
        flg_cancel_type_in          IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        flg_cancel_type_nin         IN BOOLEAN := TRUE,
        create_user_in              IN episode.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN episode.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN episode.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN episode.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN episode.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN episode.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        flg_appointment_type_in     IN episode.flg_appointment_type%TYPE DEFAULT NULL,
        flg_appointment_type_nin    IN BOOLEAN := TRUE,
        id_task_dependency_in       IN episode.id_task_dependency%TYPE DEFAULT NULL,
        id_task_dependency_nin      IN BOOLEAN := TRUE,
        flg_compulsory_in           IN episode.flg_compulsory%TYPE DEFAULT NULL,
        flg_compulsory_nin          IN BOOLEAN := TRUE,
        id_compulsory_reason_in     IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        id_compulsory_reason_nin    IN BOOLEAN := TRUE,
        compulsory_reason_in        IN episode.compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_nin       IN BOOLEAN := TRUE,
        where_in                    IN VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_sql                       VARCHAR2(32767);
        l_rows_out                  table_varchar;
        l_id_visit_n                NUMBER(1) := sys.diutil.bool_to_int(id_visit_nin);
        l_id_clinical_service_n     NUMBER(1) := sys.diutil.bool_to_int(id_clinical_service_nin);
        l_flg_status_n              NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_epis_type_n            NUMBER(1) := sys.diutil.bool_to_int(id_epis_type_nin);
        l_companion_n               NUMBER(1) := sys.diutil.bool_to_int(companion_nin);
        l_barcode_n                 NUMBER(1) := sys.diutil.bool_to_int(barcode_nin);
        l_id_prof_cancel_n          NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_flg_type_n                NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_id_prev_episode_n         NUMBER(1) := sys.diutil.bool_to_int(id_prev_episode_nin);
        l_dt_begin_tstz_n           NUMBER(1) := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_end_tstz_n             NUMBER(1) := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_dt_cancel_tstz_n          NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_flg_migration_n           NUMBER(1) := sys.diutil.bool_to_int(flg_migration_nin);
        l_desc_cancel_reason_n      NUMBER(1) := sys.diutil.bool_to_int(desc_cancel_reason_nin);
        l_flg_ehr_n                 NUMBER(1) := sys.diutil.bool_to_int(flg_ehr_nin);
        l_id_fast_track_n           NUMBER(1) := sys.diutil.bool_to_int(id_fast_track_nin);
        l_dt_creation_n             NUMBER(1) := sys.diutil.bool_to_int(dt_creation_nin);
        l_id_patient_n              NUMBER(1) := sys.diutil.bool_to_int(id_patient_nin);
        l_id_dept_n                 NUMBER(1) := sys.diutil.bool_to_int(id_dept_nin);
        l_id_department_n           NUMBER(1) := sys.diutil.bool_to_int(id_department_nin);
        l_id_cs_requested_n         NUMBER(1) := sys.diutil.bool_to_int(id_cs_requested_nin);
        l_id_institution_n          NUMBER(1) := sys.diutil.bool_to_int(id_institution_nin);
        l_id_department_requested_n NUMBER(1) := sys.diutil.bool_to_int(id_department_requested_nin);
        l_id_dept_requested_n       NUMBER(1) := sys.diutil.bool_to_int(id_dept_requested_nin);
        l_id_prev_epis_type_n       NUMBER(1) := sys.diutil.bool_to_int(id_prev_epis_type_nin);
        l_flg_cancel_type_n         NUMBER(1) := sys.diutil.bool_to_int(flg_cancel_type_nin);
        l_create_user_n             NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_appointment_type_n    NUMBER(1) := sys.diutil.bool_to_int(flg_appointment_type_nin);
        l_id_task_dependency_n      NUMBER(1) := sys.diutil.bool_to_int(id_task_dependency_nin);
        l_flg_compulsory_n          NUMBER(1) := sys.diutil.bool_to_int(flg_compulsory_nin);
        l_id_compulsory_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_compulsory_reason_nin);
        l_compulsory_reason_n       NUMBER(1) := sys.diutil.bool_to_int(compulsory_reason_nin);
    BEGIN
        l_id_visit_n                := sys.diutil.bool_to_int(id_visit_nin);
        l_id_clinical_service_n     := sys.diutil.bool_to_int(id_clinical_service_nin);
        l_flg_status_n              := sys.diutil.bool_to_int(flg_status_nin);
        l_id_epis_type_n            := sys.diutil.bool_to_int(id_epis_type_nin);
        l_companion_n               := sys.diutil.bool_to_int(companion_nin);
        l_barcode_n                 := sys.diutil.bool_to_int(barcode_nin);
        l_id_prof_cancel_n          := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_flg_type_n                := sys.diutil.bool_to_int(flg_type_nin);
        l_id_prev_episode_n         := sys.diutil.bool_to_int(id_prev_episode_nin);
        l_dt_begin_tstz_n           := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_end_tstz_n             := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_dt_cancel_tstz_n          := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_flg_migration_n           := sys.diutil.bool_to_int(flg_migration_nin);
        l_desc_cancel_reason_n      := sys.diutil.bool_to_int(desc_cancel_reason_nin);
        l_flg_ehr_n                 := sys.diutil.bool_to_int(flg_ehr_nin);
        l_id_fast_track_n           := sys.diutil.bool_to_int(id_fast_track_nin);
        l_dt_creation_n             := sys.diutil.bool_to_int(dt_creation_nin);
        l_id_patient_n              := sys.diutil.bool_to_int(id_patient_nin);
        l_id_dept_n                 := sys.diutil.bool_to_int(id_dept_nin);
        l_id_department_n           := sys.diutil.bool_to_int(id_department_nin);
        l_id_cs_requested_n         := sys.diutil.bool_to_int(id_cs_requested_nin);
        l_id_institution_n          := sys.diutil.bool_to_int(id_institution_nin);
        l_id_department_requested_n := sys.diutil.bool_to_int(id_department_requested_nin);
        l_id_dept_requested_n       := sys.diutil.bool_to_int(id_dept_requested_nin);
        l_id_prev_epis_type_n       := sys.diutil.bool_to_int(id_prev_epis_type_nin);
        l_flg_cancel_type_n         := sys.diutil.bool_to_int(flg_cancel_type_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_appointment_type_n    := sys.diutil.bool_to_int(flg_appointment_type_nin);
        l_id_task_dependency_n      := sys.diutil.bool_to_int(id_task_dependency_nin);
        l_flg_compulsory_n          := sys.diutil.bool_to_int(flg_compulsory_nin);
        l_id_compulsory_reason_n    := sys.diutil.bool_to_int(id_compulsory_reason_nin);
        l_compulsory_reason_n       := sys.diutil.bool_to_int(compulsory_reason_nin);
        l_sql                       := 'UPDATE episode SET' || ' ID_VISIT = decode (' || l_id_visit_n ||
                                       ',0,:ID_VISIT_in, NVL (:ID_VISIT_in, ID_VISIT)) ' || ',' ||
                                       ' ID_CLINICAL_SERVICE = decode (' || l_id_clinical_service_n ||
                                       ',0,:ID_CLINICAL_SERVICE_in, NVL (:ID_CLINICAL_SERVICE_in, ID_CLINICAL_SERVICE)) ' || ',' ||
                                       ' FLG_STATUS = decode (' || l_flg_status_n ||
                                       ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                       ' ID_EPIS_TYPE = decode (' || l_id_epis_type_n ||
                                       ',0,:ID_EPIS_TYPE_in, NVL (:ID_EPIS_TYPE_in, ID_EPIS_TYPE)) ' || ',' ||
                                       ' COMPANION = decode (' || l_companion_n ||
                                       ',0,:COMPANION_in, NVL (:COMPANION_in, COMPANION)) ' || ',' ||
                                       ' BARCODE = decode (' || l_barcode_n ||
                                       ',0,:BARCODE_in, NVL (:BARCODE_in, BARCODE)) ' || ',' ||
                                       ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                                       ',0,:ID_PROF_CANCEL_in, NVL (:ID_PROF_CANCEL_in, ID_PROF_CANCEL)) ' || ',' ||
                                       ' FLG_TYPE = decode (' || l_flg_type_n ||
                                       ',0,:FLG_TYPE_in, NVL (:FLG_TYPE_in, FLG_TYPE)) ' || ',' ||
                                       ' ID_PREV_EPISODE = decode (' || l_id_prev_episode_n ||
                                       ',0,:ID_PREV_EPISODE_in, NVL (:ID_PREV_EPISODE_in, ID_PREV_EPISODE)) ' || ',' ||
                                       ' DT_BEGIN_TSTZ = decode (' || l_dt_begin_tstz_n ||
                                       ',0,:DT_BEGIN_TSTZ_in, NVL (:DT_BEGIN_TSTZ_in, DT_BEGIN_TSTZ)) ' || ',' ||
                                       ' DT_END_TSTZ = decode (' || l_dt_end_tstz_n ||
                                       ',0,:DT_END_TSTZ_in, NVL (:DT_END_TSTZ_in, DT_END_TSTZ)) ' || ',' ||
                                       ' DT_CANCEL_TSTZ = decode (' || l_dt_cancel_tstz_n ||
                                       ',0,:DT_CANCEL_TSTZ_in, NVL (:DT_CANCEL_TSTZ_in, DT_CANCEL_TSTZ)) ' || ',' ||
                                       ' FLG_MIGRATION = decode (' || l_flg_migration_n ||
                                       ',0,:FLG_MIGRATION_in, NVL (:FLG_MIGRATION_in, FLG_MIGRATION)) ' || ',' ||
                                       ' DESC_CANCEL_REASON = decode (' || l_desc_cancel_reason_n ||
                                       ',0,:DESC_CANCEL_REASON_in, NVL (:DESC_CANCEL_REASON_in, DESC_CANCEL_REASON)) ' || ',' ||
                                       ' FLG_EHR = decode (' || l_flg_ehr_n ||
                                       ',0,:FLG_EHR_in, NVL (:FLG_EHR_in, FLG_EHR)) ' || ',' ||
                                       ' ID_FAST_TRACK = decode (' || l_id_fast_track_n ||
                                       ',0,:ID_FAST_TRACK_in, NVL (:ID_FAST_TRACK_in, ID_FAST_TRACK)) ' || ',' ||
                                       ' DT_CREATION = decode (' || l_dt_creation_n ||
                                       ',0,:DT_CREATION_in, NVL (:DT_CREATION_in, DT_CREATION)) ' || ',' ||
                                       ' ID_PATIENT = decode (' || l_id_patient_n ||
                                       ',0,:ID_PATIENT_in, NVL (:ID_PATIENT_in, ID_PATIENT)) ' || ',' ||
                                       ' ID_DEPT = decode (' || l_id_dept_n ||
                                       ',0,:ID_DEPT_in, NVL (:ID_DEPT_in, ID_DEPT)) ' || ',' ||
                                       ' ID_DEPARTMENT = decode (' || l_id_department_n ||
                                       ',0,:ID_DEPARTMENT_in, NVL (:ID_DEPARTMENT_in, ID_DEPARTMENT)) ' || ',' ||
                                       ' ID_CS_REQUESTED = decode (' || l_id_cs_requested_n ||
                                       ',0,:ID_CS_REQUESTED_in, NVL (:ID_CS_REQUESTED_in, ID_CS_REQUESTED)) ' || ',' ||
                                       ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                                       ',0,:ID_INSTITUTION_in, NVL (:ID_INSTITUTION_in, ID_INSTITUTION)) ' || ',' ||
                                       ' ID_DEPARTMENT_REQUESTED = decode (' || l_id_department_requested_n ||
                                       ',0,:ID_DEPARTMENT_REQUESTED_in, NVL (:ID_DEPARTMENT_REQUESTED_in, ID_DEPARTMENT_REQUESTED)) ' || ',' ||
                                       ' ID_DEPT_REQUESTED = decode (' || l_id_dept_requested_n ||
                                       ',0,:ID_DEPT_REQUESTED_in, NVL (:ID_DEPT_REQUESTED_in, ID_DEPT_REQUESTED)) ' || ',' ||
                                       ' ID_PREV_EPIS_TYPE = decode (' || l_id_prev_epis_type_n ||
                                       ',0,:ID_PREV_EPIS_TYPE_in, NVL (:ID_PREV_EPIS_TYPE_in, ID_PREV_EPIS_TYPE)) ' || ',' ||
                                       ' FLG_CANCEL_TYPE = decode (' || l_flg_cancel_type_n ||
                                       ',0,:FLG_CANCEL_TYPE_in, NVL (:FLG_CANCEL_TYPE_in, FLG_CANCEL_TYPE)) ' || ',' ||
                                       ' CREATE_USER = decode (' || l_create_user_n ||
                                       ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                       ' CREATE_TIME = decode (' || l_create_time_n ||
                                       ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                       ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                       ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                       ' UPDATE_USER = decode (' || l_update_user_n ||
                                       ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                       ' UPDATE_TIME = decode (' || l_update_time_n ||
                                       ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                       ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                       ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                       ' FLG_APPOINTMENT_TYPE = decode (' || l_flg_appointment_type_n ||
                                       ',0,:FLG_APPOINTMENT_TYPE_in, NVL (:FLG_APPOINTMENT_TYPE_in, FLG_APPOINTMENT_TYPE)) ' || ',' ||
                                       ' ID_TASK_DEPENDENCY = decode (' || l_id_task_dependency_n ||
                                       ',0,:ID_TASK_DEPENDENCY_in, NVL (:ID_TASK_DEPENDENCY_in, ID_TASK_DEPENDENCY)) ' || ',' ||
                                       ' FLG_COMPULSORY = decode (' || l_flg_compulsory_n ||
                                       ',0,:FLG_COMPULSORY_in, NVL (:FLG_COMPULSORY_in, FLG_COMPULSORY)) ' || ',' ||
                                       ' ID_COMPULSORY_REASON = decode (' || l_id_compulsory_reason_n ||
                                       ',0,:ID_COMPULSORY_REASON_in, NVL (:ID_COMPULSORY_REASON_in, ID_COMPULSORY_REASON)) ' || ',' ||
                                       ' COMPULSORY_REASON = decode (' || l_compulsory_reason_n ||
                                       ',0,:COMPULSORY_REASON_in, NVL (:COMPULSORY_REASON_in, COMPULSORY_REASON)) ' ||
                                       ' where ' || nvl(where_in, '(1=1)') ||
                                       ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_visit_in, id_clinical_service_in, flg_status_in, id_epis_type_in, companion_in, barcode_in, id_prof_cancel_in, flg_type_in, id_prev_episode_in, dt_begin_tstz_in, dt_end_tstz_in, dt_cancel_tstz_in, flg_migration_in, desc_cancel_reason_in, flg_ehr_in, id_fast_track_in, dt_creation_in, id_patient_in, id_dept_in, id_department_in, id_cs_requested_in, id_institution_in, id_department_requested_in, id_dept_requested_in, id_prev_epis_type_in, flg_cancel_type_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_appointment_type_in, id_task_dependency_in, flg_compulsory_in, id_compulsory_reason_in, compulsory_reason_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_visit_in                 IN episode.id_visit%TYPE DEFAULT NULL,
        id_visit_nin                IN BOOLEAN := TRUE,
        id_clinical_service_in      IN episode.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin     IN BOOLEAN := TRUE,
        flg_status_in               IN episode.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        id_epis_type_in             IN episode.id_epis_type%TYPE DEFAULT NULL,
        id_epis_type_nin            IN BOOLEAN := TRUE,
        companion_in                IN episode.companion%TYPE DEFAULT NULL,
        companion_nin               IN BOOLEAN := TRUE,
        barcode_in                  IN episode.barcode%TYPE DEFAULT NULL,
        barcode_nin                 IN BOOLEAN := TRUE,
        id_prof_cancel_in           IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin          IN BOOLEAN := TRUE,
        flg_type_in                 IN episode.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        id_prev_episode_in          IN episode.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin         IN BOOLEAN := TRUE,
        dt_begin_tstz_in            IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin           IN BOOLEAN := TRUE,
        dt_end_tstz_in              IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin             IN BOOLEAN := TRUE,
        dt_cancel_tstz_in           IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin          IN BOOLEAN := TRUE,
        flg_migration_in            IN episode.flg_migration%TYPE DEFAULT NULL,
        flg_migration_nin           IN BOOLEAN := TRUE,
        desc_cancel_reason_in       IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        desc_cancel_reason_nin      IN BOOLEAN := TRUE,
        flg_ehr_in                  IN episode.flg_ehr%TYPE DEFAULT NULL,
        flg_ehr_nin                 IN BOOLEAN := TRUE,
        id_fast_track_in            IN episode.id_fast_track%TYPE DEFAULT NULL,
        id_fast_track_nin           IN BOOLEAN := TRUE,
        dt_creation_in              IN episode.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin             IN BOOLEAN := TRUE,
        id_patient_in               IN episode.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        id_dept_in                  IN episode.id_dept%TYPE DEFAULT NULL,
        id_dept_nin                 IN BOOLEAN := TRUE,
        id_department_in            IN episode.id_department%TYPE DEFAULT NULL,
        id_department_nin           IN BOOLEAN := TRUE,
        id_cs_requested_in          IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_cs_requested_nin         IN BOOLEAN := TRUE,
        id_institution_in           IN episode.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_department_requested_in  IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_department_requested_nin IN BOOLEAN := TRUE,
        id_dept_requested_in        IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_dept_requested_nin       IN BOOLEAN := TRUE,
        id_prev_epis_type_in        IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        id_prev_epis_type_nin       IN BOOLEAN := TRUE,
        flg_cancel_type_in          IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        flg_cancel_type_nin         IN BOOLEAN := TRUE,
        create_user_in              IN episode.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN episode.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN episode.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN episode.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN episode.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN episode.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        flg_appointment_type_in     IN episode.flg_appointment_type%TYPE DEFAULT NULL,
        flg_appointment_type_nin    IN BOOLEAN := TRUE,
        id_task_dependency_in       IN episode.id_task_dependency%TYPE DEFAULT NULL,
        id_task_dependency_nin      IN BOOLEAN := TRUE,
        flg_compulsory_in           IN episode.flg_compulsory%TYPE DEFAULT NULL,
        flg_compulsory_nin          IN BOOLEAN := TRUE,
        id_compulsory_reason_in     IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        id_compulsory_reason_nin    IN BOOLEAN := TRUE,
        compulsory_reason_in        IN episode.compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_nin       IN BOOLEAN := TRUE,
        where_in                    IN VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_visit_in                 => id_visit_in,
            id_visit_nin                => id_visit_nin,
            id_clinical_service_in      => id_clinical_service_in,
            id_clinical_service_nin     => id_clinical_service_nin,
            flg_status_in               => flg_status_in,
            flg_status_nin              => flg_status_nin,
            id_epis_type_in             => id_epis_type_in,
            id_epis_type_nin            => id_epis_type_nin,
            companion_in                => companion_in,
            companion_nin               => companion_nin,
            barcode_in                  => barcode_in,
            barcode_nin                 => barcode_nin,
            id_prof_cancel_in           => id_prof_cancel_in,
            id_prof_cancel_nin          => id_prof_cancel_nin,
            flg_type_in                 => flg_type_in,
            flg_type_nin                => flg_type_nin,
            id_prev_episode_in          => id_prev_episode_in,
            id_prev_episode_nin         => id_prev_episode_nin,
            dt_begin_tstz_in            => dt_begin_tstz_in,
            dt_begin_tstz_nin           => dt_begin_tstz_nin,
            dt_end_tstz_in              => dt_end_tstz_in,
            dt_end_tstz_nin             => dt_end_tstz_nin,
            dt_cancel_tstz_in           => dt_cancel_tstz_in,
            dt_cancel_tstz_nin          => dt_cancel_tstz_nin,
            flg_migration_in            => flg_migration_in,
            flg_migration_nin           => flg_migration_nin,
            desc_cancel_reason_in       => desc_cancel_reason_in,
            desc_cancel_reason_nin      => desc_cancel_reason_nin,
            flg_ehr_in                  => flg_ehr_in,
            flg_ehr_nin                 => flg_ehr_nin,
            id_fast_track_in            => id_fast_track_in,
            id_fast_track_nin           => id_fast_track_nin,
            dt_creation_in              => dt_creation_in,
            dt_creation_nin             => dt_creation_nin,
            id_patient_in               => id_patient_in,
            id_patient_nin              => id_patient_nin,
            id_dept_in                  => id_dept_in,
            id_dept_nin                 => id_dept_nin,
            id_department_in            => id_department_in,
            id_department_nin           => id_department_nin,
            id_cs_requested_in          => id_cs_requested_in,
            id_cs_requested_nin         => id_cs_requested_nin,
            id_institution_in           => id_institution_in,
            id_institution_nin          => id_institution_nin,
            id_department_requested_in  => id_department_requested_in,
            id_department_requested_nin => id_department_requested_nin,
            id_dept_requested_in        => id_dept_requested_in,
            id_dept_requested_nin       => id_dept_requested_nin,
            id_prev_epis_type_in        => id_prev_epis_type_in,
            id_prev_epis_type_nin       => id_prev_epis_type_nin,
            flg_cancel_type_in          => flg_cancel_type_in,
            flg_cancel_type_nin         => flg_cancel_type_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            flg_appointment_type_in     => flg_appointment_type_in,
            flg_appointment_type_nin    => flg_appointment_type_nin,
            id_task_dependency_in       => id_task_dependency_in,
            id_task_dependency_nin      => id_task_dependency_nin,
            flg_compulsory_in           => flg_compulsory_in,
            flg_compulsory_nin          => flg_compulsory_nin,
            id_compulsory_reason_in     => id_compulsory_reason_in,
            id_compulsory_reason_nin    => id_compulsory_reason_nin,
            compulsory_reason_in        => compulsory_reason_in,
            compulsory_reason_nin       => compulsory_reason_nin,
            where_in                    => where_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_episode_in              IN episode.id_episode%TYPE,
        id_visit_in                IN episode.id_visit%TYPE DEFAULT NULL,
        id_clinical_service_in     IN episode.id_clinical_service%TYPE DEFAULT NULL,
        flg_status_in              IN episode.flg_status%TYPE DEFAULT NULL,
        id_epis_type_in            IN episode.id_epis_type%TYPE DEFAULT NULL,
        companion_in               IN episode.companion%TYPE DEFAULT NULL,
        barcode_in                 IN episode.barcode%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        flg_type_in                IN episode.flg_type%TYPE DEFAULT NULL,
        id_prev_episode_in         IN episode.id_prev_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in           IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in             IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in          IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        flg_migration_in           IN episode.flg_migration%TYPE DEFAULT NULL,
        desc_cancel_reason_in      IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        flg_ehr_in                 IN episode.flg_ehr%TYPE DEFAULT NULL,
        id_fast_track_in           IN episode.id_fast_track%TYPE DEFAULT NULL,
        dt_creation_in             IN episode.dt_creation%TYPE DEFAULT NULL,
        id_patient_in              IN episode.id_patient%TYPE DEFAULT NULL,
        id_dept_in                 IN episode.id_dept%TYPE DEFAULT NULL,
        id_department_in           IN episode.id_department%TYPE DEFAULT NULL,
        id_cs_requested_in         IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_institution_in          IN episode.id_institution%TYPE DEFAULT NULL,
        id_department_requested_in IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_dept_requested_in       IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_prev_epis_type_in       IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        flg_cancel_type_in         IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        create_user_in             IN episode.create_user%TYPE DEFAULT NULL,
        create_time_in             IN episode.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN episode.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN episode.update_user%TYPE DEFAULT NULL,
        update_time_in             IN episode.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN episode.update_institution%TYPE DEFAULT NULL,
        flg_appointment_type_in    IN episode.flg_appointment_type%TYPE DEFAULT NULL,
        id_task_dependency_in      IN episode.id_task_dependency%TYPE DEFAULT NULL,
        flg_compulsory_in          IN episode.flg_compulsory%TYPE DEFAULT NULL,
        id_compulsory_reason_in    IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_in       IN episode.compulsory_reason%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_episode_in              => id_episode_in,
            id_visit_in                => id_visit_in,
            id_clinical_service_in     => id_clinical_service_in,
            flg_status_in              => flg_status_in,
            id_epis_type_in            => id_epis_type_in,
            companion_in               => companion_in,
            barcode_in                 => barcode_in,
            id_prof_cancel_in          => id_prof_cancel_in,
            flg_type_in                => flg_type_in,
            id_prev_episode_in         => id_prev_episode_in,
            dt_begin_tstz_in           => dt_begin_tstz_in,
            dt_end_tstz_in             => dt_end_tstz_in,
            dt_cancel_tstz_in          => dt_cancel_tstz_in,
            flg_migration_in           => flg_migration_in,
            desc_cancel_reason_in      => desc_cancel_reason_in,
            flg_ehr_in                 => flg_ehr_in,
            id_fast_track_in           => id_fast_track_in,
            dt_creation_in             => dt_creation_in,
            id_patient_in              => id_patient_in,
            id_dept_in                 => id_dept_in,
            id_department_in           => id_department_in,
            id_cs_requested_in         => id_cs_requested_in,
            id_institution_in          => id_institution_in,
            id_department_requested_in => id_department_requested_in,
            id_dept_requested_in       => id_dept_requested_in,
            id_prev_epis_type_in       => id_prev_epis_type_in,
            flg_cancel_type_in         => flg_cancel_type_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_appointment_type_in    => flg_appointment_type_in,
            id_task_dependency_in      => id_task_dependency_in,
            flg_compulsory_in          => flg_compulsory_in,
            id_compulsory_reason_in    => id_compulsory_reason_in,
            compulsory_reason_in       => compulsory_reason_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_episode_in              => id_episode_in,
                id_visit_in                => id_visit_in,
                id_clinical_service_in     => id_clinical_service_in,
                flg_status_in              => flg_status_in,
                id_epis_type_in            => id_epis_type_in,
                companion_in               => companion_in,
                barcode_in                 => barcode_in,
                id_prof_cancel_in          => id_prof_cancel_in,
                flg_type_in                => flg_type_in,
                id_prev_episode_in         => id_prev_episode_in,
                dt_begin_tstz_in           => dt_begin_tstz_in,
                dt_end_tstz_in             => dt_end_tstz_in,
                dt_cancel_tstz_in          => dt_cancel_tstz_in,
                flg_migration_in           => flg_migration_in,
                desc_cancel_reason_in      => desc_cancel_reason_in,
                flg_ehr_in                 => flg_ehr_in,
                id_fast_track_in           => id_fast_track_in,
                dt_creation_in             => dt_creation_in,
                id_patient_in              => id_patient_in,
                id_dept_in                 => id_dept_in,
                id_department_in           => id_department_in,
                id_cs_requested_in         => id_cs_requested_in,
                id_institution_in          => id_institution_in,
                id_department_requested_in => id_department_requested_in,
                id_dept_requested_in       => id_dept_requested_in,
                id_prev_epis_type_in       => id_prev_epis_type_in,
                flg_cancel_type_in         => flg_cancel_type_in,
                create_user_in             => create_user_in,
                create_time_in             => create_time_in,
                create_institution_in      => create_institution_in,
                update_user_in             => update_user_in,
                update_time_in             => update_time_in,
                update_institution_in      => update_institution_in,
                flg_appointment_type_in    => flg_appointment_type_in,
                id_task_dependency_in      => id_task_dependency_in,
                flg_compulsory_in          => flg_compulsory_in,
                id_compulsory_reason_in    => id_compulsory_reason_in,
                compulsory_reason_in       => compulsory_reason_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_episode_in              IN episode.id_episode%TYPE,
        id_visit_in                IN episode.id_visit%TYPE DEFAULT NULL,
        id_clinical_service_in     IN episode.id_clinical_service%TYPE DEFAULT NULL,
        flg_status_in              IN episode.flg_status%TYPE DEFAULT NULL,
        id_epis_type_in            IN episode.id_epis_type%TYPE DEFAULT NULL,
        companion_in               IN episode.companion%TYPE DEFAULT NULL,
        barcode_in                 IN episode.barcode%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN episode.id_prof_cancel%TYPE DEFAULT NULL,
        flg_type_in                IN episode.flg_type%TYPE DEFAULT NULL,
        id_prev_episode_in         IN episode.id_prev_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in           IN episode.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in             IN episode.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in          IN episode.dt_cancel_tstz%TYPE DEFAULT NULL,
        flg_migration_in           IN episode.flg_migration%TYPE DEFAULT NULL,
        desc_cancel_reason_in      IN episode.desc_cancel_reason%TYPE DEFAULT NULL,
        flg_ehr_in                 IN episode.flg_ehr%TYPE DEFAULT NULL,
        id_fast_track_in           IN episode.id_fast_track%TYPE DEFAULT NULL,
        dt_creation_in             IN episode.dt_creation%TYPE DEFAULT NULL,
        id_patient_in              IN episode.id_patient%TYPE DEFAULT NULL,
        id_dept_in                 IN episode.id_dept%TYPE DEFAULT NULL,
        id_department_in           IN episode.id_department%TYPE DEFAULT NULL,
        id_cs_requested_in         IN episode.id_cs_requested%TYPE DEFAULT NULL,
        id_institution_in          IN episode.id_institution%TYPE DEFAULT NULL,
        id_department_requested_in IN episode.id_department_requested%TYPE DEFAULT NULL,
        id_dept_requested_in       IN episode.id_dept_requested%TYPE DEFAULT NULL,
        id_prev_epis_type_in       IN episode.id_prev_epis_type%TYPE DEFAULT NULL,
        flg_cancel_type_in         IN episode.flg_cancel_type%TYPE DEFAULT NULL,
        create_user_in             IN episode.create_user%TYPE DEFAULT NULL,
        create_time_in             IN episode.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN episode.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN episode.update_user%TYPE DEFAULT NULL,
        update_time_in             IN episode.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN episode.update_institution%TYPE DEFAULT NULL,
        flg_appointment_type_in    IN episode.flg_appointment_type%TYPE DEFAULT NULL,
        id_task_dependency_in      IN episode.id_task_dependency%TYPE DEFAULT NULL,
        flg_compulsory_in          IN episode.flg_compulsory%TYPE DEFAULT NULL,
        id_compulsory_reason_in    IN episode.id_compulsory_reason%TYPE DEFAULT NULL,
        compulsory_reason_in       IN episode.compulsory_reason%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_episode_in,
                id_visit_in,
                id_clinical_service_in,
                flg_status_in,
                id_epis_type_in,
                companion_in,
                barcode_in,
                id_prof_cancel_in,
                flg_type_in,
                id_prev_episode_in,
                dt_begin_tstz_in,
                dt_end_tstz_in,
                dt_cancel_tstz_in,
                flg_migration_in,
                desc_cancel_reason_in,
                flg_ehr_in,
                id_fast_track_in,
                dt_creation_in,
                id_patient_in,
                id_dept_in,
                id_department_in,
                id_cs_requested_in,
                id_institution_in,
                id_department_requested_in,
                id_dept_requested_in,
                id_prev_epis_type_in,
                flg_cancel_type_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_appointment_type_in,
                id_task_dependency_in,
                flg_compulsory_in,
                id_compulsory_reason_in,
                compulsory_reason_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN episode%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_episode_in              => rec_in.id_episode,
            id_visit_in                => rec_in.id_visit,
            id_clinical_service_in     => rec_in.id_clinical_service,
            flg_status_in              => rec_in.flg_status,
            id_epis_type_in            => rec_in.id_epis_type,
            companion_in               => rec_in.companion,
            barcode_in                 => rec_in.barcode,
            id_prof_cancel_in          => rec_in.id_prof_cancel,
            flg_type_in                => rec_in.flg_type,
            id_prev_episode_in         => rec_in.id_prev_episode,
            dt_begin_tstz_in           => rec_in.dt_begin_tstz,
            dt_end_tstz_in             => rec_in.dt_end_tstz,
            dt_cancel_tstz_in          => rec_in.dt_cancel_tstz,
            flg_migration_in           => rec_in.flg_migration,
            desc_cancel_reason_in      => rec_in.desc_cancel_reason,
            flg_ehr_in                 => rec_in.flg_ehr,
            id_fast_track_in           => rec_in.id_fast_track,
            dt_creation_in             => rec_in.dt_creation,
            id_patient_in              => rec_in.id_patient,
            id_dept_in                 => rec_in.id_dept,
            id_department_in           => rec_in.id_department,
            id_cs_requested_in         => rec_in.id_cs_requested,
            id_institution_in          => rec_in.id_institution,
            id_department_requested_in => rec_in.id_department_requested,
            id_dept_requested_in       => rec_in.id_dept_requested,
            id_prev_epis_type_in       => rec_in.id_prev_epis_type,
            flg_cancel_type_in         => rec_in.flg_cancel_type,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            flg_appointment_type_in    => rec_in.flg_appointment_type,
            id_task_dependency_in      => rec_in.id_task_dependency,
            flg_compulsory_in          => rec_in.flg_compulsory,
            id_compulsory_reason_in    => rec_in.id_compulsory_reason,
            compulsory_reason_in       => rec_in.compulsory_reason,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN episode%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in              => rec_in.id_episode,
            id_visit_in                => rec_in.id_visit,
            id_clinical_service_in     => rec_in.id_clinical_service,
            flg_status_in              => rec_in.flg_status,
            id_epis_type_in            => rec_in.id_epis_type,
            companion_in               => rec_in.companion,
            barcode_in                 => rec_in.barcode,
            id_prof_cancel_in          => rec_in.id_prof_cancel,
            flg_type_in                => rec_in.flg_type,
            id_prev_episode_in         => rec_in.id_prev_episode,
            dt_begin_tstz_in           => rec_in.dt_begin_tstz,
            dt_end_tstz_in             => rec_in.dt_end_tstz,
            dt_cancel_tstz_in          => rec_in.dt_cancel_tstz,
            flg_migration_in           => rec_in.flg_migration,
            desc_cancel_reason_in      => rec_in.desc_cancel_reason,
            flg_ehr_in                 => rec_in.flg_ehr,
            id_fast_track_in           => rec_in.id_fast_track,
            dt_creation_in             => rec_in.dt_creation,
            id_patient_in              => rec_in.id_patient,
            id_dept_in                 => rec_in.id_dept,
            id_department_in           => rec_in.id_department,
            id_cs_requested_in         => rec_in.id_cs_requested,
            id_institution_in          => rec_in.id_institution,
            id_department_requested_in => rec_in.id_department_requested,
            id_dept_requested_in       => rec_in.id_dept_requested,
            id_prev_epis_type_in       => rec_in.id_prev_epis_type,
            flg_cancel_type_in         => rec_in.flg_cancel_type,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            flg_appointment_type_in    => rec_in.flg_appointment_type,
            id_task_dependency_in      => rec_in.id_task_dependency,
            flg_compulsory_in          => rec_in.flg_compulsory,
            id_compulsory_reason_in    => rec_in.id_compulsory_reason,
            compulsory_reason_in       => rec_in.compulsory_reason,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN episode_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_episode              id_episode_cc;
        l_id_visit                id_visit_cc;
        l_id_clinical_service     id_clinical_service_cc;
        l_flg_status              flg_status_cc;
        l_id_epis_type            id_epis_type_cc;
        l_companion               companion_cc;
        l_barcode                 barcode_cc;
        l_id_prof_cancel          id_prof_cancel_cc;
        l_flg_type                flg_type_cc;
        l_id_prev_episode         id_prev_episode_cc;
        l_dt_begin_tstz           dt_begin_tstz_cc;
        l_dt_end_tstz             dt_end_tstz_cc;
        l_dt_cancel_tstz          dt_cancel_tstz_cc;
        l_flg_migration           flg_migration_cc;
        l_desc_cancel_reason      desc_cancel_reason_cc;
        l_flg_ehr                 flg_ehr_cc;
        l_id_fast_track           id_fast_track_cc;
        l_dt_creation             dt_creation_cc;
        l_id_patient              id_patient_cc;
        l_id_dept                 id_dept_cc;
        l_id_department           id_department_cc;
        l_id_cs_requested         id_cs_requested_cc;
        l_id_institution          id_institution_cc;
        l_id_department_requested id_department_requested_cc;
        l_id_dept_requested       id_dept_requested_cc;
        l_id_prev_epis_type       id_prev_epis_type_cc;
        l_flg_cancel_type         flg_cancel_type_cc;
        l_create_user             create_user_cc;
        l_create_time             create_time_cc;
        l_create_institution      create_institution_cc;
        l_update_user             update_user_cc;
        l_update_time             update_time_cc;
        l_update_institution      update_institution_cc;
        l_flg_appointment_type    flg_appointment_type_cc;
        l_id_task_dependency      id_task_dependency_cc;
        l_flg_compulsory          flg_compulsory_cc;
        l_id_compulsory_reason    id_compulsory_reason_cc;
        l_compulsory_reason       compulsory_reason_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_episode(i) := col_in(i).id_episode;
            l_id_visit(i) := col_in(i).id_visit;
            l_id_clinical_service(i) := col_in(i).id_clinical_service;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_epis_type(i) := col_in(i).id_epis_type;
            l_companion(i) := col_in(i).companion;
            l_barcode(i) := col_in(i).barcode;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_flg_type(i) := col_in(i).flg_type;
            l_id_prev_episode(i) := col_in(i).id_prev_episode;
            l_dt_begin_tstz(i) := col_in(i).dt_begin_tstz;
            l_dt_end_tstz(i) := col_in(i).dt_end_tstz;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_flg_migration(i) := col_in(i).flg_migration;
            l_desc_cancel_reason(i) := col_in(i).desc_cancel_reason;
            l_flg_ehr(i) := col_in(i).flg_ehr;
            l_id_fast_track(i) := col_in(i).id_fast_track;
            l_dt_creation(i) := col_in(i).dt_creation;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_dept(i) := col_in(i).id_dept;
            l_id_department(i) := col_in(i).id_department;
            l_id_cs_requested(i) := col_in(i).id_cs_requested;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_department_requested(i) := col_in(i).id_department_requested;
            l_id_dept_requested(i) := col_in(i).id_dept_requested;
            l_id_prev_epis_type(i) := col_in(i).id_prev_epis_type;
            l_flg_cancel_type(i) := col_in(i).flg_cancel_type;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_appointment_type(i) := col_in(i).flg_appointment_type;
            l_id_task_dependency(i) := col_in(i).id_task_dependency;
            l_flg_compulsory(i) := col_in(i).flg_compulsory;
            l_id_compulsory_reason(i) := col_in(i).id_compulsory_reason;
            l_compulsory_reason(i) := col_in(i).compulsory_reason;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE episode
                   SET id_visit                = nvl(l_id_visit(i), id_visit),
                       id_clinical_service     = nvl(l_id_clinical_service(i), id_clinical_service),
                       flg_status              = nvl(l_flg_status(i), flg_status),
                       id_epis_type            = nvl(l_id_epis_type(i), id_epis_type),
                       companion               = nvl(l_companion(i), companion),
                       barcode                 = nvl(l_barcode(i), barcode),
                       id_prof_cancel          = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       flg_type                = nvl(l_flg_type(i), flg_type),
                       id_prev_episode         = nvl(l_id_prev_episode(i), id_prev_episode),
                       dt_begin_tstz           = nvl(l_dt_begin_tstz(i), dt_begin_tstz),
                       dt_end_tstz             = nvl(l_dt_end_tstz(i), dt_end_tstz),
                       dt_cancel_tstz          = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       flg_migration           = nvl(l_flg_migration(i), flg_migration),
                       desc_cancel_reason      = nvl(l_desc_cancel_reason(i), desc_cancel_reason),
                       flg_ehr                 = nvl(l_flg_ehr(i), flg_ehr),
                       id_fast_track           = nvl(l_id_fast_track(i), id_fast_track),
                       dt_creation             = nvl(l_dt_creation(i), dt_creation),
                       id_patient              = nvl(l_id_patient(i), id_patient),
                       id_dept                 = nvl(l_id_dept(i), id_dept),
                       id_department           = nvl(l_id_department(i), id_department),
                       id_cs_requested         = nvl(l_id_cs_requested(i), id_cs_requested),
                       id_institution          = nvl(l_id_institution(i), id_institution),
                       id_department_requested = nvl(l_id_department_requested(i), id_department_requested),
                       id_dept_requested       = nvl(l_id_dept_requested(i), id_dept_requested),
                       id_prev_epis_type       = nvl(l_id_prev_epis_type(i), id_prev_epis_type),
                       flg_cancel_type         = nvl(l_flg_cancel_type(i), flg_cancel_type),
                       create_user             = nvl(l_create_user(i), create_user),
                       create_time             = nvl(l_create_time(i), create_time),
                       create_institution      = nvl(l_create_institution(i), create_institution),
                       update_user             = nvl(l_update_user(i), update_user),
                       update_time             = nvl(l_update_time(i), update_time),
                       update_institution      = nvl(l_update_institution(i), update_institution),
                       flg_appointment_type    = nvl(l_flg_appointment_type(i), flg_appointment_type),
                       id_task_dependency      = nvl(l_id_task_dependency(i), id_task_dependency),
                       flg_compulsory          = nvl(l_flg_compulsory(i), flg_compulsory),
                       id_compulsory_reason    = nvl(l_id_compulsory_reason(i), id_compulsory_reason),
                       compulsory_reason       = nvl(l_compulsory_reason(i), compulsory_reason)
                 WHERE id_episode = l_id_episode(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE episode
                   SET id_visit                = l_id_visit(i),
                       id_clinical_service     = l_id_clinical_service(i),
                       flg_status              = l_flg_status(i),
                       id_epis_type            = l_id_epis_type(i),
                       companion               = l_companion(i),
                       barcode                 = l_barcode(i),
                       id_prof_cancel          = l_id_prof_cancel(i),
                       flg_type                = l_flg_type(i),
                       id_prev_episode         = l_id_prev_episode(i),
                       dt_begin_tstz           = l_dt_begin_tstz(i),
                       dt_end_tstz             = l_dt_end_tstz(i),
                       dt_cancel_tstz          = l_dt_cancel_tstz(i),
                       flg_migration           = l_flg_migration(i),
                       desc_cancel_reason      = l_desc_cancel_reason(i),
                       flg_ehr                 = l_flg_ehr(i),
                       id_fast_track           = l_id_fast_track(i),
                       dt_creation             = l_dt_creation(i),
                       id_patient              = l_id_patient(i),
                       id_dept                 = l_id_dept(i),
                       id_department           = l_id_department(i),
                       id_cs_requested         = l_id_cs_requested(i),
                       id_institution          = l_id_institution(i),
                       id_department_requested = l_id_department_requested(i),
                       id_dept_requested       = l_id_dept_requested(i),
                       id_prev_epis_type       = l_id_prev_epis_type(i),
                       flg_cancel_type         = l_flg_cancel_type(i),
                       create_user             = l_create_user(i),
                       create_time             = l_create_time(i),
                       create_institution      = l_create_institution(i),
                       update_user             = l_update_user(i),
                       update_time             = l_update_time(i),
                       update_institution      = l_update_institution(i),
                       flg_appointment_type    = l_flg_appointment_type(i),
                       id_task_dependency      = l_id_task_dependency(i),
                       flg_compulsory          = l_flg_compulsory(i),
                       id_compulsory_reason    = l_id_compulsory_reason(i),
                       compulsory_reason       = l_compulsory_reason(i)
                 WHERE id_episode = l_id_episode(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN episode_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE episode
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE episode
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE episode
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_episode_in   IN episode.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_episode_in   IN episode.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this EPIS_CSE_FK foreign key value
    PROCEDURE del_epis_cse_fk
    (
        id_clinical_service_in IN episode.id_clinical_service%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_clinical_service = id_clinical_service_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_cse_fk;

    -- Delete all rows for this EPIS_CSE_REQ_FK foreign key value
    PROCEDURE del_epis_cse_req_fk
    (
        id_cs_requested_in IN episode.id_cs_requested%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_cs_requested = id_cs_requested_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_cse_req_fk;

    -- Delete all rows for this EPIS_DEP_FK foreign key value
    PROCEDURE del_epis_dep_fk
    (
        id_department_in IN episode.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_department = id_department_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_dep_fk;

    -- Delete all rows for this EPIS_DEP_REQ_FK_I foreign key value
    PROCEDURE del_epis_dep_req_fk_i
    (
        id_department_requested_in IN episode.id_department_requested%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_department_requested = id_department_requested_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_dep_req_fk_i;

    -- Delete all rows for this EPIS_DPT_FK foreign key value
    PROCEDURE del_epis_dpt_fk
    (
        id_dept_in      IN episode.id_dept%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_dept = id_dept_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_dpt_fk;

    -- Delete all rows for this EPIS_DPT_REQ_FK_I foreign key value
    PROCEDURE del_epis_dpt_req_fk_i
    (
        id_dept_requested_in IN episode.id_dept_requested%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_dept_requested = id_dept_requested_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_dpt_req_fk_i;

    -- Delete all rows for this EPIS_EPIS_FK foreign key value
    PROCEDURE del_epis_epis_fk
    (
        id_prev_episode_in IN episode.id_prev_episode%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_prev_episode = id_prev_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_epis_fk;

    -- Delete all rows for this EPIS_ETE_FK foreign key value
    PROCEDURE del_epis_ete_fk
    (
        id_epis_type_in IN episode.id_epis_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_epis_type = id_epis_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_ete_fk;

    -- Delete all rows for this EPIS_FT_FK foreign key value
    PROCEDURE del_epis_ft_fk
    (
        id_fast_track_in IN episode.id_fast_track%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_fast_track = id_fast_track_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_ft_fk;

    -- Delete all rows for this EPIS_INST_FK foreign key value
    PROCEDURE del_epis_inst_fk
    (
        id_institution_in IN episode.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_institution = id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_inst_fk;

    -- Delete all rows for this EPIS_PAT_FK foreign key value
    PROCEDURE del_epis_pat_fk
    (
        id_patient_in   IN episode.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_patient = id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_pat_fk;

    -- Delete all rows for this EPIS_PETE_FK foreign key value
    PROCEDURE del_epis_pete_fk
    (
        id_prev_epis_type_in IN episode.id_prev_epis_type%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_prev_epis_type = id_prev_epis_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_pete_fk;

    -- Delete all rows for this EPIS_TASK_DEP_FK foreign key value
    PROCEDURE del_epis_task_dep_fk
    (
        id_task_dependency_in IN episode.id_task_dependency%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_task_dependency = id_task_dependency_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_task_dep_fk;

    -- Delete all rows for this EPIS_VIS_FK foreign key value
    PROCEDURE del_epis_vis_fk
    (
        id_visit_in     IN episode.id_visit%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM episode
         WHERE id_visit = id_visit_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epis_vis_fk;

    -- Delete all rows for this EPIS_CSE_FK foreign key value
    PROCEDURE del_epis_cse_fk
    (
        id_clinical_service_in IN episode.id_clinical_service%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_cse_fk(id_clinical_service_in => id_clinical_service_in,
                        handle_error_in        => handle_error_in,
                        rows_out               => rows_out);
    END del_epis_cse_fk;

    -- Delete all rows for this EPIS_CSE_REQ_FK foreign key value
    PROCEDURE del_epis_cse_req_fk
    (
        id_cs_requested_in IN episode.id_cs_requested%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_cse_req_fk(id_cs_requested_in => id_cs_requested_in,
                            handle_error_in    => handle_error_in,
                            rows_out           => rows_out);
    END del_epis_cse_req_fk;

    -- Delete all rows for this EPIS_DEP_FK foreign key value
    PROCEDURE del_epis_dep_fk
    (
        id_department_in IN episode.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_dep_fk(id_department_in => id_department_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_epis_dep_fk;

    -- Delete all rows for this EPIS_DEP_REQ_FK_I foreign key value
    PROCEDURE del_epis_dep_req_fk_i
    (
        id_department_requested_in IN episode.id_department_requested%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_dep_req_fk_i(id_department_requested_in => id_department_requested_in,
                              handle_error_in            => handle_error_in,
                              rows_out                   => rows_out);
    END del_epis_dep_req_fk_i;

    -- Delete all rows for this EPIS_DPT_FK foreign key value
    PROCEDURE del_epis_dpt_fk
    (
        id_dept_in      IN episode.id_dept%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_dpt_fk(id_dept_in => id_dept_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_epis_dpt_fk;

    -- Delete all rows for this EPIS_DPT_REQ_FK_I foreign key value
    PROCEDURE del_epis_dpt_req_fk_i
    (
        id_dept_requested_in IN episode.id_dept_requested%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_dpt_req_fk_i(id_dept_requested_in => id_dept_requested_in,
                              handle_error_in      => handle_error_in,
                              rows_out             => rows_out);
    END del_epis_dpt_req_fk_i;

    -- Delete all rows for this EPIS_EPIS_FK foreign key value
    PROCEDURE del_epis_epis_fk
    (
        id_prev_episode_in IN episode.id_prev_episode%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_epis_fk(id_prev_episode_in => id_prev_episode_in,
                         handle_error_in    => handle_error_in,
                         rows_out           => rows_out);
    END del_epis_epis_fk;

    -- Delete all rows for this EPIS_ETE_FK foreign key value
    PROCEDURE del_epis_ete_fk
    (
        id_epis_type_in IN episode.id_epis_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_ete_fk(id_epis_type_in => id_epis_type_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_epis_ete_fk;

    -- Delete all rows for this EPIS_FT_FK foreign key value
    PROCEDURE del_epis_ft_fk
    (
        id_fast_track_in IN episode.id_fast_track%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_ft_fk(id_fast_track_in => id_fast_track_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_epis_ft_fk;

    -- Delete all rows for this EPIS_INST_FK foreign key value
    PROCEDURE del_epis_inst_fk
    (
        id_institution_in IN episode.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_inst_fk(id_institution_in => id_institution_in,
                         handle_error_in   => handle_error_in,
                         rows_out          => rows_out);
    END del_epis_inst_fk;

    -- Delete all rows for this EPIS_PAT_FK foreign key value
    PROCEDURE del_epis_pat_fk
    (
        id_patient_in   IN episode.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_epis_pat_fk;

    -- Delete all rows for this EPIS_PETE_FK foreign key value
    PROCEDURE del_epis_pete_fk
    (
        id_prev_epis_type_in IN episode.id_prev_epis_type%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_pete_fk(id_prev_epis_type_in => id_prev_epis_type_in,
                         handle_error_in      => handle_error_in,
                         rows_out             => rows_out);
    END del_epis_pete_fk;

    -- Delete all rows for this EPIS_TASK_DEP_FK foreign key value
    PROCEDURE del_epis_task_dep_fk
    (
        id_task_dependency_in IN episode.id_task_dependency%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_task_dep_fk(id_task_dependency_in => id_task_dependency_in,
                             handle_error_in       => handle_error_in,
                             rows_out              => rows_out);
    END del_epis_task_dep_fk;

    -- Delete all rows for this EPIS_VIS_FK foreign key value
    PROCEDURE del_epis_vis_fk
    (
        id_visit_in     IN episode.id_visit%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_vis_fk(id_visit_in => id_visit_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_epis_vis_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM episode';
        ELSE
            RETURN 'DELETE FROM episode WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(episode_inout IN OUT episode%ROWTYPE) IS
    BEGIN
        episode_inout.id_episode              := NULL;
        episode_inout.id_visit                := NULL;
        episode_inout.id_clinical_service     := NULL;
        episode_inout.flg_status              := NULL;
        episode_inout.id_epis_type            := NULL;
        episode_inout.companion               := NULL;
        episode_inout.barcode                 := NULL;
        episode_inout.id_prof_cancel          := NULL;
        episode_inout.flg_type                := NULL;
        episode_inout.id_prev_episode         := NULL;
        episode_inout.dt_begin_tstz           := NULL;
        episode_inout.dt_end_tstz             := NULL;
        episode_inout.dt_cancel_tstz          := NULL;
        episode_inout.flg_migration           := NULL;
        episode_inout.desc_cancel_reason      := NULL;
        episode_inout.flg_ehr                 := NULL;
        episode_inout.id_fast_track           := NULL;
        episode_inout.dt_creation             := NULL;
        episode_inout.id_patient              := NULL;
        episode_inout.id_dept                 := NULL;
        episode_inout.id_department           := NULL;
        episode_inout.id_cs_requested         := NULL;
        episode_inout.id_institution          := NULL;
        episode_inout.id_department_requested := NULL;
        episode_inout.id_dept_requested       := NULL;
        episode_inout.id_prev_epis_type       := NULL;
        episode_inout.flg_cancel_type         := NULL;
        episode_inout.create_user             := NULL;
        episode_inout.create_time             := NULL;
        episode_inout.create_institution      := NULL;
        episode_inout.update_user             := NULL;
        episode_inout.update_time             := NULL;
        episode_inout.update_institution      := NULL;
        episode_inout.flg_appointment_type    := NULL;
        episode_inout.id_task_dependency      := NULL;
        episode_inout.flg_compulsory          := NULL;
        episode_inout.id_compulsory_reason    := NULL;
        episode_inout.compulsory_reason       := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN episode%ROWTYPE IS
        l_episode episode%ROWTYPE;
    BEGIN
        RETURN l_episode;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN episode_tc IS
        data episode_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM episode
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN episode_tc IS
        data episode_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_episode;
/
