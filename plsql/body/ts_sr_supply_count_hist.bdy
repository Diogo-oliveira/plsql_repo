/*-- Last Change Revision: $Rev: 2028390 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:29 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_sr_supply_count_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Dezembro 3, 2010 17:17:5
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_sr_supply_count_hist_in IN sr_supply_count_hist.id_sr_supply_count_hist%TYPE,
        id_sr_supply_count_in      IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        qty_added_in               IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_final_count_in         IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        id_reconcile_reason_in     IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        notes_in                   IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        id_prof_reg_in             IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in                  IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        create_user_in             IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO sr_supply_count_hist
            (id_sr_supply_count_hist,
             id_sr_supply_count,
             qty_added,
             qty_final_count,
             id_reconcile_reason,
             notes,
             id_prof_reg,
             dt_reg,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_sr_supply_count_hist_in,
             id_sr_supply_count_in,
             qty_added_in,
             qty_final_count_in,
             id_reconcile_reason_in,
             notes_in,
             id_prof_reg_in,
             dt_reg_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'SR_SUPPLY_COUNT_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_sr_supply_count_hist_in IN sr_supply_count_hist.id_sr_supply_count_hist%TYPE,
        id_sr_supply_count_in      IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        qty_added_in               IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_final_count_in         IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        id_reconcile_reason_in     IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        notes_in                   IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        id_prof_reg_in             IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in                  IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        create_user_in             IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_sr_supply_count_hist_in => id_sr_supply_count_hist_in,
            id_sr_supply_count_in      => id_sr_supply_count_in,
            qty_added_in               => qty_added_in,
            qty_final_count_in         => qty_final_count_in,
            id_reconcile_reason_in     => id_reconcile_reason_in,
            notes_in                   => notes_in,
            id_prof_reg_in             => id_prof_reg_in,
            dt_reg_in                  => dt_reg_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN sr_supply_count_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec sr_supply_count_hist%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_sr_supply_count_hist := next_key(sequence_in);
        END IF;
        ins(id_sr_supply_count_hist_in => l_rec.id_sr_supply_count_hist,
            id_sr_supply_count_in      => l_rec.id_sr_supply_count,
            qty_added_in               => l_rec.qty_added,
            qty_final_count_in         => l_rec.qty_final_count,
            id_reconcile_reason_in     => l_rec.id_reconcile_reason,
            notes_in                   => l_rec.notes,
            id_prof_reg_in             => l_rec.id_prof_reg,
            dt_reg_in                  => l_rec.dt_reg,
            create_user_in             => l_rec.create_user,
            create_time_in             => l_rec.create_time,
            create_institution_in      => l_rec.create_institution,
            update_user_in             => l_rec.update_user,
            update_time_in             => l_rec.update_time,
            update_institution_in      => l_rec.update_institution,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN sr_supply_count_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN sr_supply_count_hist.id_sr_supply_count_hist%TYPE
    
     IS
        retval sr_supply_count_hist.id_sr_supply_count_hist%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_sr_supply_count_hist.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_SR_SUPPLY_COUNT_HIST'));
    END next_key;

    PROCEDURE ins
    (
        id_sr_supply_count_in       IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        qty_added_in                IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_final_count_in          IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        id_reconcile_reason_in      IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        notes_in                    IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        id_prof_reg_in              IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in                   IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        create_user_in              IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        id_sr_supply_count_hist_out IN OUT sr_supply_count_hist.id_sr_supply_count_hist%TYPE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
        l_pky sr_supply_count_hist.id_sr_supply_count_hist%TYPE := next_key;
    BEGIN
        ins(id_sr_supply_count_hist_in => l_pky,
            id_sr_supply_count_in      => id_sr_supply_count_in,
            qty_added_in               => qty_added_in,
            qty_final_count_in         => qty_final_count_in,
            id_reconcile_reason_in     => id_reconcile_reason_in,
            notes_in                   => notes_in,
            id_prof_reg_in             => id_prof_reg_in,
            dt_reg_in                  => dt_reg_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        id_sr_supply_count_hist_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_sr_supply_count_in       IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        qty_added_in                IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_final_count_in          IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        id_reconcile_reason_in      IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        notes_in                    IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        id_prof_reg_in              IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in                   IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        create_user_in              IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        id_sr_supply_count_hist_out IN OUT sr_supply_count_hist.id_sr_supply_count_hist%TYPE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_sr_supply_count_in       => id_sr_supply_count_in,
            qty_added_in                => qty_added_in,
            qty_final_count_in          => qty_final_count_in,
            id_reconcile_reason_in      => id_reconcile_reason_in,
            notes_in                    => notes_in,
            id_prof_reg_in              => id_prof_reg_in,
            dt_reg_in                   => dt_reg_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_sr_supply_count_hist_out => id_sr_supply_count_hist_out,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    FUNCTION ins
    (
        id_sr_supply_count_in  IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        qty_added_in           IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_final_count_in     IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        id_reconcile_reason_in IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        notes_in               IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        id_prof_reg_in         IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in              IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        create_user_in         IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) RETURN sr_supply_count_hist.id_sr_supply_count_hist%TYPE IS
        l_pky sr_supply_count_hist.id_sr_supply_count_hist%TYPE := next_key;
    BEGIN
        ins(id_sr_supply_count_hist_in => l_pky,
            id_sr_supply_count_in      => id_sr_supply_count_in,
            qty_added_in               => qty_added_in,
            qty_final_count_in         => qty_final_count_in,
            id_reconcile_reason_in     => id_reconcile_reason_in,
            notes_in                   => notes_in,
            id_prof_reg_in             => id_prof_reg_in,
            dt_reg_in                  => dt_reg_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_sr_supply_count_in  IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        qty_added_in           IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_final_count_in     IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        id_reconcile_reason_in IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        notes_in               IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        id_prof_reg_in         IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in              IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        create_user_in         IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) RETURN sr_supply_count_hist.id_sr_supply_count_hist%TYPE IS
        l_pky    sr_supply_count_hist.id_sr_supply_count_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_sr_supply_count_hist_in => l_pky,
            id_sr_supply_count_in      => id_sr_supply_count_in,
            qty_added_in               => qty_added_in,
            qty_final_count_in         => qty_final_count_in,
            id_reconcile_reason_in     => id_reconcile_reason_in,
            notes_in                   => notes_in,
            id_prof_reg_in             => id_prof_reg_in,
            dt_reg_in                  => dt_reg_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_sr_supply_count_in  IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        qty_added_in           IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_final_count_in     IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        id_reconcile_reason_in IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        notes_in               IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        id_prof_reg_in         IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in              IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        create_user_in         IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky sr_supply_count_hist.id_sr_supply_count_hist%TYPE := next_key;
    BEGIN
        ins(id_sr_supply_count_hist_in => l_pky,
            id_sr_supply_count_in      => id_sr_supply_count_in,
            qty_added_in               => qty_added_in,
            qty_final_count_in         => qty_final_count_in,
            id_reconcile_reason_in     => id_reconcile_reason_in,
            notes_in                   => notes_in,
            id_prof_reg_in             => id_prof_reg_in,
            dt_reg_in                  => dt_reg_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_sr_supply_count_in  IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        qty_added_in           IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_final_count_in     IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        id_reconcile_reason_in IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        notes_in               IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        id_prof_reg_in         IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in              IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        create_user_in         IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        l_pky    sr_supply_count_hist.id_sr_supply_count_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_sr_supply_count_hist_in => l_pky,
            id_sr_supply_count_in      => id_sr_supply_count_in,
            qty_added_in               => qty_added_in,
            qty_final_count_in         => qty_final_count_in,
            id_reconcile_reason_in     => id_reconcile_reason_in,
            notes_in                   => notes_in,
            id_prof_reg_in             => id_prof_reg_in,
            dt_reg_in                  => dt_reg_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN sr_supply_count_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO sr_supply_count_hist
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SR_SUPPLY_COUNT_HIST _' || indx,
                                                        value_in           => rows_in(indx).id_sr_supply_count_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SR_SUPPLY_COUNT _' || indx,
                                                        value_in           => rows_in(indx).id_sr_supply_count,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'QTY_ADDED _' || indx,
                                                        value_in           => rows_in(indx).qty_added,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'QTY_FINAL_COUNT _' || indx,
                                                        value_in           => rows_in(indx).qty_final_count,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RECONCILE_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_reconcile_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_REG _' || indx,
                                                        value_in           => rows_in(indx).id_prof_reg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REG _' || indx,
                                                        value_in           => rows_in(indx).dt_reg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'SR_SUPPLY_COUNT_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN sr_supply_count_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_sr_supply_count_hist_in IN sr_supply_count_hist.id_sr_supply_count_hist%TYPE,
        id_sr_supply_count_in      IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        id_sr_supply_count_nin     IN BOOLEAN := TRUE,
        qty_added_in               IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_added_nin              IN BOOLEAN := TRUE,
        qty_final_count_in         IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        qty_final_count_nin        IN BOOLEAN := TRUE,
        id_reconcile_reason_in     IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        id_reconcile_reason_nin    IN BOOLEAN := TRUE,
        notes_in                   IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_prof_reg_in             IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin            IN BOOLEAN := TRUE,
        dt_reg_in                  IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        dt_reg_nin                 IN BOOLEAN := TRUE,
        create_user_in             IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_sr_supply_count_n  NUMBER(1);
        l_qty_added_n           NUMBER(1);
        l_qty_final_count_n     NUMBER(1);
        l_id_reconcile_reason_n NUMBER(1);
        l_notes_n               NUMBER(1);
        l_id_prof_reg_n         NUMBER(1);
        l_dt_reg_n              NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
    BEGIN
    
        l_id_sr_supply_count_n  := sys.diutil.bool_to_int(id_sr_supply_count_nin);
        l_qty_added_n           := sys.diutil.bool_to_int(qty_added_nin);
        l_qty_final_count_n     := sys.diutil.bool_to_int(qty_final_count_nin);
        l_id_reconcile_reason_n := sys.diutil.bool_to_int(id_reconcile_reason_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_id_prof_reg_n         := sys.diutil.bool_to_int(id_prof_reg_nin);
        l_dt_reg_n              := sys.diutil.bool_to_int(dt_reg_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE sr_supply_count_hist
           SET id_sr_supply_count  = decode(l_id_sr_supply_count_n,
                                            0,
                                            id_sr_supply_count_in,
                                            nvl(id_sr_supply_count_in, id_sr_supply_count)),
               qty_added           = decode(l_qty_added_n, 0, qty_added_in, nvl(qty_added_in, qty_added)),
               qty_final_count     = decode(l_qty_final_count_n,
                                            0,
                                            qty_final_count_in,
                                            nvl(qty_final_count_in, qty_final_count)),
               id_reconcile_reason = decode(l_id_reconcile_reason_n,
                                            0,
                                            id_reconcile_reason_in,
                                            nvl(id_reconcile_reason_in, id_reconcile_reason)),
               notes               = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_prof_reg         = decode(l_id_prof_reg_n, 0, id_prof_reg_in, nvl(id_prof_reg_in, id_prof_reg)),
               dt_reg              = decode(l_dt_reg_n, 0, dt_reg_in, nvl(dt_reg_in, dt_reg)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution))
         WHERE id_sr_supply_count_hist = id_sr_supply_count_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'SR_SUPPLY_COUNT_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_sr_supply_count_hist_in IN sr_supply_count_hist.id_sr_supply_count_hist%TYPE,
        id_sr_supply_count_in      IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        id_sr_supply_count_nin     IN BOOLEAN := TRUE,
        qty_added_in               IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_added_nin              IN BOOLEAN := TRUE,
        qty_final_count_in         IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        qty_final_count_nin        IN BOOLEAN := TRUE,
        id_reconcile_reason_in     IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        id_reconcile_reason_nin    IN BOOLEAN := TRUE,
        notes_in                   IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_prof_reg_in             IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin            IN BOOLEAN := TRUE,
        dt_reg_in                  IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        dt_reg_nin                 IN BOOLEAN := TRUE,
        create_user_in             IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_sr_supply_count_hist_in => id_sr_supply_count_hist_in,
            id_sr_supply_count_in      => id_sr_supply_count_in,
            id_sr_supply_count_nin     => id_sr_supply_count_nin,
            qty_added_in               => qty_added_in,
            qty_added_nin              => qty_added_nin,
            qty_final_count_in         => qty_final_count_in,
            qty_final_count_nin        => qty_final_count_nin,
            id_reconcile_reason_in     => id_reconcile_reason_in,
            id_reconcile_reason_nin    => id_reconcile_reason_nin,
            notes_in                   => notes_in,
            notes_nin                  => notes_nin,
            id_prof_reg_in             => id_prof_reg_in,
            id_prof_reg_nin            => id_prof_reg_nin,
            dt_reg_in                  => dt_reg_in,
            dt_reg_nin                 => dt_reg_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_sr_supply_count_in   IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        id_sr_supply_count_nin  IN BOOLEAN := TRUE,
        qty_added_in            IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_added_nin           IN BOOLEAN := TRUE,
        qty_final_count_in      IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        qty_final_count_nin     IN BOOLEAN := TRUE,
        id_reconcile_reason_in  IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        id_reconcile_reason_nin IN BOOLEAN := TRUE,
        notes_in                IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_reg_in          IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin         IN BOOLEAN := TRUE,
        dt_reg_in               IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        dt_reg_nin              IN BOOLEAN := TRUE,
        create_user_in          IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_id_sr_supply_count_n     NUMBER(1);
        l_qty_added_n              NUMBER(1);
        l_qty_final_count_n        NUMBER(1);
        l_id_reconcile_reason_n    NUMBER(1);
        l_notes_n                  NUMBER(1);
        l_id_prof_reg_n            NUMBER(1);
        l_dt_reg_n                 NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        id_sr_supply_count_hist_in sr_supply_count_hist.id_sr_supply_count_hist%TYPE;
    BEGIN
    
        l_id_sr_supply_count_n  := sys.diutil.bool_to_int(id_sr_supply_count_nin);
        l_qty_added_n           := sys.diutil.bool_to_int(qty_added_nin);
        l_qty_final_count_n     := sys.diutil.bool_to_int(qty_final_count_nin);
        l_id_reconcile_reason_n := sys.diutil.bool_to_int(id_reconcile_reason_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_id_prof_reg_n         := sys.diutil.bool_to_int(id_prof_reg_nin);
        l_dt_reg_n              := sys.diutil.bool_to_int(dt_reg_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE SR_SUPPLY_COUNT_HIST SET ' || ' ID_SR_SUPPLY_COUNT = decode (' || l_id_sr_supply_count_n ||
                 ',0,:id_sr_supply_count_in, NVL (:id_sr_supply_count_in, ID_SR_SUPPLY_COUNT)) ' || ',' ||
                 ' QTY_ADDED = decode (' || l_qty_added_n || ',0,:qty_added_in, NVL (:qty_added_in, QTY_ADDED)) ' || ',' ||
                 ' QTY_FINAL_COUNT = decode (' || l_qty_final_count_n ||
                 ',0,:qty_final_count_in, NVL (:qty_final_count_in, QTY_FINAL_COUNT)) ' || ',' ||
                 ' ID_RECONCILE_REASON = decode (' || l_id_reconcile_reason_n ||
                 ',0,:id_reconcile_reason_in, NVL (:id_reconcile_reason_in, ID_RECONCILE_REASON)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' ID_PROF_REG = decode (' || l_id_prof_reg_n ||
                 ',0,:id_prof_reg_in, NVL (:id_prof_reg_in, ID_PROF_REG)) ' || ',' || ' DT_REG = decode (' ||
                 l_dt_reg_n || ',0,:dt_reg_in, NVL (:dt_reg_in, DT_REG)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_sr_supply_count_in, qty_added_in, qty_final_count_in, id_reconcile_reason_in, notes_in, id_prof_reg_in, dt_reg_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'SR_SUPPLY_COUNT_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_sr_supply_count_in   IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        id_sr_supply_count_nin  IN BOOLEAN := TRUE,
        qty_added_in            IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_added_nin           IN BOOLEAN := TRUE,
        qty_final_count_in      IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        qty_final_count_nin     IN BOOLEAN := TRUE,
        id_reconcile_reason_in  IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        id_reconcile_reason_nin IN BOOLEAN := TRUE,
        notes_in                IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_reg_in          IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin         IN BOOLEAN := TRUE,
        dt_reg_in               IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        dt_reg_nin              IN BOOLEAN := TRUE,
        create_user_in          IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_sr_supply_count_in   => id_sr_supply_count_in,
            id_sr_supply_count_nin  => id_sr_supply_count_nin,
            qty_added_in            => qty_added_in,
            qty_added_nin           => qty_added_nin,
            qty_final_count_in      => qty_final_count_in,
            qty_final_count_nin     => qty_final_count_nin,
            id_reconcile_reason_in  => id_reconcile_reason_in,
            id_reconcile_reason_nin => id_reconcile_reason_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            id_prof_reg_in          => id_prof_reg_in,
            id_prof_reg_nin         => id_prof_reg_nin,
            dt_reg_in               => dt_reg_in,
            dt_reg_nin              => dt_reg_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN sr_supply_count_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_sr_supply_count_hist_in => rec_in.id_sr_supply_count_hist,
            id_sr_supply_count_in      => rec_in.id_sr_supply_count,
            qty_added_in               => rec_in.qty_added,
            qty_final_count_in         => rec_in.qty_final_count,
            id_reconcile_reason_in     => rec_in.id_reconcile_reason,
            notes_in                   => rec_in.notes,
            id_prof_reg_in             => rec_in.id_prof_reg,
            dt_reg_in                  => rec_in.dt_reg,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN sr_supply_count_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_sr_supply_count_hist_in => rec_in.id_sr_supply_count_hist,
            id_sr_supply_count_in      => rec_in.id_sr_supply_count,
            qty_added_in               => rec_in.qty_added,
            qty_final_count_in         => rec_in.qty_final_count,
            id_reconcile_reason_in     => rec_in.id_reconcile_reason,
            notes_in                   => rec_in.notes,
            id_prof_reg_in             => rec_in.id_prof_reg,
            dt_reg_in                  => rec_in.dt_reg,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_sr_supply_count_hist_in IN sr_supply_count_hist.id_sr_supply_count_hist%TYPE,
        id_sr_supply_count_in      IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        qty_added_in               IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_final_count_in         IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        id_reconcile_reason_in     IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        notes_in                   IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        id_prof_reg_in             IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in                  IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        create_user_in             IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        upd(id_sr_supply_count_hist_in => id_sr_supply_count_hist_in,
            id_sr_supply_count_in      => id_sr_supply_count_in,
            qty_added_in               => qty_added_in,
            qty_final_count_in         => qty_final_count_in,
            id_reconcile_reason_in     => id_reconcile_reason_in,
            notes_in                   => notes_in,
            id_prof_reg_in             => id_prof_reg_in,
            dt_reg_in                  => dt_reg_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_sr_supply_count_hist_in => id_sr_supply_count_hist_in,
                id_sr_supply_count_in      => id_sr_supply_count_in,
                qty_added_in               => qty_added_in,
                qty_final_count_in         => qty_final_count_in,
                id_reconcile_reason_in     => id_reconcile_reason_in,
                notes_in                   => notes_in,
                id_prof_reg_in             => id_prof_reg_in,
                dt_reg_in                  => dt_reg_in,
                create_user_in             => create_user_in,
                create_time_in             => create_time_in,
                create_institution_in      => create_institution_in,
                update_user_in             => update_user_in,
                update_time_in             => update_time_in,
                update_institution_in      => update_institution_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_sr_supply_count_hist_in IN sr_supply_count_hist.id_sr_supply_count_hist%TYPE,
        id_sr_supply_count_in      IN sr_supply_count_hist.id_sr_supply_count%TYPE DEFAULT NULL,
        qty_added_in               IN sr_supply_count_hist.qty_added%TYPE DEFAULT NULL,
        qty_final_count_in         IN sr_supply_count_hist.qty_final_count%TYPE DEFAULT NULL,
        id_reconcile_reason_in     IN sr_supply_count_hist.id_reconcile_reason%TYPE DEFAULT NULL,
        notes_in                   IN sr_supply_count_hist.notes%TYPE DEFAULT NULL,
        id_prof_reg_in             IN sr_supply_count_hist.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in                  IN sr_supply_count_hist.dt_reg%TYPE DEFAULT NULL,
        create_user_in             IN sr_supply_count_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN sr_supply_count_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN sr_supply_count_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN sr_supply_count_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN sr_supply_count_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN sr_supply_count_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_sr_supply_count_hist_in,
                id_sr_supply_count_in,
                qty_added_in,
                qty_final_count_in,
                id_reconcile_reason_in,
                notes_in,
                id_prof_reg_in,
                dt_reg_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN sr_supply_count_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_sr_supply_count_hist id_sr_supply_count_hist_cc;
        l_id_sr_supply_count      id_sr_supply_count_cc;
        l_qty_added               qty_added_cc;
        l_qty_final_count         qty_final_count_cc;
        l_id_reconcile_reason     id_reconcile_reason_cc;
        l_notes                   notes_cc;
        l_id_prof_reg             id_prof_reg_cc;
        l_dt_reg                  dt_reg_cc;
        l_create_user             create_user_cc;
        l_create_time             create_time_cc;
        l_create_institution      create_institution_cc;
        l_update_user             update_user_cc;
        l_update_time             update_time_cc;
        l_update_institution      update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_sr_supply_count_hist(i) := col_in(i).id_sr_supply_count_hist;
            l_id_sr_supply_count(i) := col_in(i).id_sr_supply_count;
            l_qty_added(i) := col_in(i).qty_added;
            l_qty_final_count(i) := col_in(i).qty_final_count;
            l_id_reconcile_reason(i) := col_in(i).id_reconcile_reason;
            l_notes(i) := col_in(i).notes;
            l_id_prof_reg(i) := col_in(i).id_prof_reg;
            l_dt_reg(i) := col_in(i).dt_reg;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE sr_supply_count_hist
                   SET id_sr_supply_count  = nvl(l_id_sr_supply_count(i), id_sr_supply_count),
                       qty_added           = nvl(l_qty_added(i), qty_added),
                       qty_final_count     = nvl(l_qty_final_count(i), qty_final_count),
                       id_reconcile_reason = nvl(l_id_reconcile_reason(i), id_reconcile_reason),
                       notes               = nvl(l_notes(i), notes),
                       id_prof_reg         = nvl(l_id_prof_reg(i), id_prof_reg),
                       dt_reg              = nvl(l_dt_reg(i), dt_reg),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution)
                 WHERE id_sr_supply_count_hist = l_id_sr_supply_count_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE sr_supply_count_hist
                   SET id_sr_supply_count  = l_id_sr_supply_count(i),
                       qty_added           = l_qty_added(i),
                       qty_final_count     = l_qty_final_count(i),
                       id_reconcile_reason = l_id_reconcile_reason(i),
                       notes               = l_notes(i),
                       id_prof_reg         = l_id_prof_reg(i),
                       dt_reg              = l_dt_reg(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i)
                 WHERE id_sr_supply_count_hist = l_id_sr_supply_count_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN sr_supply_count_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE SR_SUPPLY_COUNT_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE SR_SUPPLY_COUNT_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE SR_SUPPLY_COUNT_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE SR_SUPPLY_COUNT_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_sr_supply_count_hist_in IN sr_supply_count_hist.id_sr_supply_count_hist%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_supply_count_hist
         WHERE id_sr_supply_count_hist = id_sr_supply_count_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_sr_supply_count_hist_in IN sr_supply_count_hist.id_sr_supply_count_hist%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_sr_supply_count_hist_in => id_sr_supply_count_hist_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_SR_SUPPLY_COUNT_HIST
    PROCEDURE del_id_sr_supply_count_hist
    (
        id_sr_supply_count_hist_in IN sr_supply_count_hist.id_sr_supply_count_hist%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_supply_count_hist
         WHERE id_sr_supply_count_hist = id_sr_supply_count_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_sr_supply_count_hist;

    -- Delete all rows for primary key column ID_SR_SUPPLY_COUNT_HIST
    PROCEDURE del_id_sr_supply_count_hist
    (
        id_sr_supply_count_hist_in IN sr_supply_count_hist.id_sr_supply_count_hist%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_sr_supply_count_hist(id_sr_supply_count_hist_in => id_sr_supply_count_hist_in,
                                    handle_error_in            => handle_error_in,
                                    rows_out                   => rows_out);
    END del_id_sr_supply_count_hist;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM SR_SUPPLY_COUNT_HIST';
        ELSE
            RETURN 'DELETE FROM SR_SUPPLY_COUNT_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SUPPLY_COUNT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SUPPLY_COUNT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(sr_supply_count_hist_inout IN OUT sr_supply_count_hist%ROWTYPE) IS
    BEGIN
        sr_supply_count_hist_inout.id_sr_supply_count_hist := NULL;
        sr_supply_count_hist_inout.id_sr_supply_count      := NULL;
        sr_supply_count_hist_inout.qty_added               := NULL;
        sr_supply_count_hist_inout.qty_final_count         := NULL;
        sr_supply_count_hist_inout.id_reconcile_reason     := NULL;
        sr_supply_count_hist_inout.notes                   := NULL;
        sr_supply_count_hist_inout.id_prof_reg             := NULL;
        sr_supply_count_hist_inout.dt_reg                  := NULL;
        sr_supply_count_hist_inout.create_user             := NULL;
        sr_supply_count_hist_inout.create_time             := NULL;
        sr_supply_count_hist_inout.create_institution      := NULL;
        sr_supply_count_hist_inout.update_user             := NULL;
        sr_supply_count_hist_inout.update_time             := NULL;
        sr_supply_count_hist_inout.update_institution      := NULL;
    END initrec;

    FUNCTION initrec RETURN sr_supply_count_hist%ROWTYPE IS
        l_sr_supply_count_hist sr_supply_count_hist%ROWTYPE;
    BEGIN
        RETURN l_sr_supply_count_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN sr_supply_count_hist_tc IS
        data sr_supply_count_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM sr_supply_count_hist
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN sr_supply_count_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data sr_supply_count_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_sr_supply_count_hist;
/
