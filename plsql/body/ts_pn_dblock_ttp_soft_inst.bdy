/*-- Last Change Revision: $Rev: 1865206 $*/
/*-- Last Change by: $Author: anna.kurowska $*/
/*-- Date of last change: $Date: 2018-09-12 15:10:49 +0100 (qua, 12 set 2018) $*/
CREATE OR REPLACE PACKAGE BODY ts_pn_dblock_ttp_soft_inst
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2018-09-12 15:02:50
| Created By: ALERT
*/
IS

e_null_column_value EXCEPTION;
PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

e_existing_fky_reference EXCEPTION;
PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

e_check_constraint_failure EXCEPTION;
PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

e_no_parent_key EXCEPTION;
PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

e_child_record_found EXCEPTION;
PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

e_forall_error EXCEPTION;
PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

-- Defined for backward compatibilty.
e_integ_constraint_failure EXCEPTION;
PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

PROCEDURE ins
(
ID_PN_SOAP_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_SOAP_BLOCK%TYPE,
ID_DEPARTMENT_in IN pn_dblock_ttp_soft_inst.ID_DEPARTMENT%TYPE,
ID_INSTITUTION_in IN pn_dblock_ttp_soft_inst.ID_INSTITUTION%TYPE,
ID_DEP_CLIN_SERV_in IN pn_dblock_ttp_soft_inst.ID_DEP_CLIN_SERV%TYPE,
ID_PN_NOTE_TYPE_in IN pn_dblock_ttp_soft_inst.ID_PN_NOTE_TYPE%TYPE,
ID_TASK_TYPE_in IN pn_dblock_ttp_soft_inst.ID_TASK_TYPE%TYPE,
ID_PN_DATA_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_DATA_BLOCK%TYPE,
ID_SOFTWARE_in IN pn_dblock_ttp_soft_inst.ID_SOFTWARE%TYPE,
FLG_AUTO_POPULATED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AUTO_POPULATED%TYPE DEFAULT 'N',
CREATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_AVAILABLE_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AVAILABLE%TYPE DEFAULT 'Y' ,
FLG_SELECTED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SELECTED%TYPE DEFAULT 'N',
FLG_IMPORT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_IMPORT_FILTER%TYPE DEFAULT 'N',
LAST_N_RECORDS_NR_in IN PN_DBLOCK_TTP_SOFT_INST.LAST_N_RECORDS_NR%TYPE DEFAULT NULL,
FLG_SHORTCUT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SHORTCUT_FILTER%TYPE DEFAULT 'N' ,
FLG_SYNCHRONIZED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SYNCHRONIZED%TYPE DEFAULT 'N' ,
REVIEW_CAT_in IN PN_DBLOCK_TTP_SOFT_INST.REVIEW_CAT%TYPE DEFAULT NULL,
FLG_REVIEW_AVAIL_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_REVIEW_AVAIL%TYPE DEFAULT 'N' ,
FLG_DESCRIPTION_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DESCRIPTION%TYPE DEFAULT NULL,
DESCRIPTION_CONDITION_in IN PN_DBLOCK_TTP_SOFT_INST.DESCRIPTION_CONDITION%TYPE DEFAULT NULL,
FLG_DT_TASK_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DT_TASK%TYPE DEFAULT NULL,
        id_task_related_in       IN pn_dblock_ttp_soft_inst.id_task_related%TYPE DEFAULT NULL,
handle_error_in IN BOOLEAN := TRUE,
rows_out OUT table_varchar
) IS
BEGIN
INSERT INTO pn_dblock_ttp_soft_inst
            (id_pn_soap_block,
ID_DEPARTMENT,
ID_INSTITUTION,
ID_DEP_CLIN_SERV,
ID_PN_NOTE_TYPE,
ID_TASK_TYPE,
ID_PN_DATA_BLOCK,
ID_SOFTWARE,
FLG_AUTO_POPULATED,
CREATE_USER,
CREATE_TIME,
CREATE_INSTITUTION,
UPDATE_USER,
UPDATE_TIME,
UPDATE_INSTITUTION,
FLG_AVAILABLE,
FLG_SELECTED,
FLG_IMPORT_FILTER,
LAST_N_RECORDS_NR,
FLG_SHORTCUT_FILTER,
FLG_SYNCHRONIZED,
REVIEW_CAT,
FLG_REVIEW_AVAIL,
FLG_DESCRIPTION,
DESCRIPTION_CONDITION,
             flg_dt_task,
             id_task_related)
 VALUES
            (id_pn_soap_block_in,
ID_DEPARTMENT_IN,
ID_INSTITUTION_IN,
ID_DEP_CLIN_SERV_IN,
ID_PN_NOTE_TYPE_IN,
ID_TASK_TYPE_IN,
ID_PN_DATA_BLOCK_IN,
ID_SOFTWARE_IN,
FLG_AUTO_POPULATED_IN,
CREATE_USER_IN,
CREATE_TIME_IN,
CREATE_INSTITUTION_IN,
UPDATE_USER_IN,
UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN,
FLG_AVAILABLE_IN,
FLG_SELECTED_IN,
FLG_IMPORT_FILTER_IN,
LAST_N_RECORDS_NR_IN,
FLG_SHORTCUT_FILTER_IN,
FLG_SYNCHRONIZED_IN,
REVIEW_CAT_IN,
FLG_REVIEW_AVAIL_IN,
FLG_DESCRIPTION_IN,
DESCRIPTION_CONDITION_IN,
             flg_dt_task_in,
             id_task_related_in)
RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end ins;

PROCEDURE ins
(
ID_PN_SOAP_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_SOAP_BLOCK%TYPE,
ID_DEPARTMENT_in IN pn_dblock_ttp_soft_inst.ID_DEPARTMENT%TYPE,
ID_INSTITUTION_in IN pn_dblock_ttp_soft_inst.ID_INSTITUTION%TYPE,
ID_DEP_CLIN_SERV_in IN pn_dblock_ttp_soft_inst.ID_DEP_CLIN_SERV%TYPE,
ID_PN_NOTE_TYPE_in IN pn_dblock_ttp_soft_inst.ID_PN_NOTE_TYPE%TYPE,
ID_TASK_TYPE_in IN pn_dblock_ttp_soft_inst.ID_TASK_TYPE%TYPE,
ID_PN_DATA_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_DATA_BLOCK%TYPE,
ID_SOFTWARE_in IN pn_dblock_ttp_soft_inst.ID_SOFTWARE%TYPE,
FLG_AUTO_POPULATED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AUTO_POPULATED%TYPE DEFAULT 'N',
CREATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_AVAILABLE_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AVAILABLE%TYPE DEFAULT 'Y' ,
FLG_SELECTED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SELECTED%TYPE DEFAULT 'N',
FLG_IMPORT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_IMPORT_FILTER%TYPE DEFAULT 'N',
LAST_N_RECORDS_NR_in IN PN_DBLOCK_TTP_SOFT_INST.LAST_N_RECORDS_NR%TYPE DEFAULT NULL,
FLG_SHORTCUT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SHORTCUT_FILTER%TYPE DEFAULT 'N' ,
FLG_SYNCHRONIZED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SYNCHRONIZED%TYPE DEFAULT 'N' ,
REVIEW_CAT_in IN PN_DBLOCK_TTP_SOFT_INST.REVIEW_CAT%TYPE DEFAULT NULL,
FLG_REVIEW_AVAIL_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_REVIEW_AVAIL%TYPE DEFAULT 'N' ,
FLG_DESCRIPTION_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DESCRIPTION%TYPE DEFAULT NULL,
DESCRIPTION_CONDITION_in IN PN_DBLOCK_TTP_SOFT_INST.DESCRIPTION_CONDITION%TYPE DEFAULT NULL,
FLG_DT_TASK_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DT_TASK%TYPE DEFAULT NULL,
        id_task_related_in       IN pn_dblock_ttp_soft_inst.id_task_related%TYPE DEFAULT NULL,
handle_error_in IN BOOLEAN := TRUE
) IS
rows_out table_varchar;
BEGIN
        ins(id_pn_soap_block_in      => id_pn_soap_block_in,
ID_DEPARTMENT_IN => ID_DEPARTMENT_IN,
ID_INSTITUTION_IN => ID_INSTITUTION_IN,
ID_DEP_CLIN_SERV_IN => ID_DEP_CLIN_SERV_IN,
ID_PN_NOTE_TYPE_IN => ID_PN_NOTE_TYPE_IN,
ID_TASK_TYPE_IN => ID_TASK_TYPE_IN,
ID_PN_DATA_BLOCK_IN => ID_PN_DATA_BLOCK_IN,
ID_SOFTWARE_IN => ID_SOFTWARE_IN,
FLG_AUTO_POPULATED_IN => FLG_AUTO_POPULATED_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
FLG_AVAILABLE_IN => FLG_AVAILABLE_IN,
FLG_SELECTED_IN => FLG_SELECTED_IN,
FLG_IMPORT_FILTER_IN => FLG_IMPORT_FILTER_IN,
LAST_N_RECORDS_NR_IN => LAST_N_RECORDS_NR_IN,
FLG_SHORTCUT_FILTER_IN => FLG_SHORTCUT_FILTER_IN,
FLG_SYNCHRONIZED_IN => FLG_SYNCHRONIZED_IN,
REVIEW_CAT_IN => REVIEW_CAT_IN,
FLG_REVIEW_AVAIL_IN => FLG_REVIEW_AVAIL_IN,
FLG_DESCRIPTION_IN => FLG_DESCRIPTION_IN,
DESCRIPTION_CONDITION_IN => DESCRIPTION_CONDITION_IN,
FLG_DT_TASK_IN => FLG_DT_TASK_IN,
            id_task_related_in       => id_task_related_in,
handle_error_in => handle_error_in,
rows_out => rows_out);
END ins;

PROCEDURE ins
(
rec_in          IN pn_dblock_ttp_soft_inst%ROWTYPE,
gen_pky_in      IN BOOLEAN DEFAULT FALSE,
sequence_in     IN VARCHAR2 := NULL,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
) IS
l_rec pn_dblock_ttp_soft_inst%ROWTYPE := rec_in;
BEGIN

        ins(id_pn_soap_block_in      => l_rec.id_pn_soap_block,
ID_DEPARTMENT_IN => l_rec.ID_DEPARTMENT,
ID_INSTITUTION_IN => l_rec.ID_INSTITUTION,
ID_DEP_CLIN_SERV_IN => l_rec.ID_DEP_CLIN_SERV,
ID_PN_NOTE_TYPE_IN => l_rec.ID_PN_NOTE_TYPE,
ID_TASK_TYPE_IN => l_rec.ID_TASK_TYPE,
ID_PN_DATA_BLOCK_IN => l_rec.ID_PN_DATA_BLOCK,
ID_SOFTWARE_IN => l_rec.ID_SOFTWARE,
FLG_AUTO_POPULATED_IN => l_rec.FLG_AUTO_POPULATED,
CREATE_USER_IN => l_rec.CREATE_USER,
CREATE_TIME_IN => l_rec.CREATE_TIME,
CREATE_INSTITUTION_IN => l_rec.CREATE_INSTITUTION,
UPDATE_USER_IN => l_rec.UPDATE_USER,
UPDATE_TIME_IN => l_rec.UPDATE_TIME,
UPDATE_INSTITUTION_IN => l_rec.UPDATE_INSTITUTION,
FLG_AVAILABLE_IN => l_rec.FLG_AVAILABLE,
FLG_SELECTED_IN => l_rec.FLG_SELECTED,
FLG_IMPORT_FILTER_IN => l_rec.FLG_IMPORT_FILTER,
LAST_N_RECORDS_NR_IN => l_rec.LAST_N_RECORDS_NR,
FLG_SHORTCUT_FILTER_IN => l_rec.FLG_SHORTCUT_FILTER,
FLG_SYNCHRONIZED_IN => l_rec.FLG_SYNCHRONIZED,
REVIEW_CAT_IN => l_rec.REVIEW_CAT,
FLG_REVIEW_AVAIL_IN => l_rec.FLG_REVIEW_AVAIL,
FLG_DESCRIPTION_IN => l_rec.FLG_DESCRIPTION,
DESCRIPTION_CONDITION_IN => l_rec.DESCRIPTION_CONDITION,
FLG_DT_TASK_IN => l_rec.FLG_DT_TASK,
            id_task_related_in       => l_rec.id_task_related,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
END ins;

PROCEDURE ins
(
rec_in          IN pn_dblock_ttp_soft_inst%ROWTYPE,
gen_pky_in      IN BOOLEAN DEFAULT FALSE,
sequence_in     IN VARCHAR2 := NULL,
handle_error_in IN BOOLEAN := TRUE
) IS
rows_out table_varchar;
BEGIN
ins(rec_in          => rec_in,
gen_pky_in      => gen_pky_in,
sequence_in     => sequence_in,
handle_error_in => handle_error_in,
rows_out        => rows_out);
END ins;

-- Insert a collection of rows using FORALL; all primary key values
-- must have already been generated, or are handled in triggers
PROCEDURE ins
(
rows_in         IN pn_dblock_ttp_soft_inst_tc,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
    ) IS
BEGIN
IF rows_in.COUNT = 0
THEN
NULL;
ELSE
FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
INSERT INTO pn_dblock_ttp_soft_inst
VALUES rows_in
(indx)
RETURNING ROWID BULK COLLECT INTO rows_out;
END IF;

EXCEPTION
WHEN e_forall_error THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
LOOP
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END LOOP;
END IF;
WHEN OTHERS THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

END ins;

-- Insert a collection of rows using FORALL; all primary key values
-- must have already been generated, or are handled in triggers
PROCEDURE ins
(
rows_in         IN pn_dblock_ttp_soft_inst_tc,
handle_error_in IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
BEGIN
ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
END ins;

-- Update any/all columns by primary key. If you pass NULL, then
-- the current column value is set to itself. If you need a more
-- selected UPDATE then use one of the onecol procedures below.
PROCEDURE upd
(
ID_PN_SOAP_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_SOAP_BLOCK%TYPE,
ID_DEPARTMENT_in IN pn_dblock_ttp_soft_inst.ID_DEPARTMENT%TYPE,
ID_INSTITUTION_in IN pn_dblock_ttp_soft_inst.ID_INSTITUTION%TYPE,
ID_DEP_CLIN_SERV_in IN pn_dblock_ttp_soft_inst.ID_DEP_CLIN_SERV%TYPE,
ID_PN_NOTE_TYPE_in IN pn_dblock_ttp_soft_inst.ID_PN_NOTE_TYPE%TYPE,
ID_TASK_TYPE_in IN pn_dblock_ttp_soft_inst.ID_TASK_TYPE%TYPE,
ID_PN_DATA_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_DATA_BLOCK%TYPE,
ID_SOFTWARE_in IN pn_dblock_ttp_soft_inst.ID_SOFTWARE%TYPE,
FLG_AUTO_POPULATED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AUTO_POPULATED%TYPE DEFAULT NULL,
FLG_AUTO_POPULATED_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
FLG_AVAILABLE_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_AVAILABLE_nin IN BOOLEAN := TRUE,
FLG_SELECTED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SELECTED%TYPE DEFAULT NULL,
FLG_SELECTED_nin IN BOOLEAN := TRUE,
FLG_IMPORT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_IMPORT_FILTER%TYPE DEFAULT NULL,
FLG_IMPORT_FILTER_nin IN BOOLEAN := TRUE,
LAST_N_RECORDS_NR_in IN PN_DBLOCK_TTP_SOFT_INST.LAST_N_RECORDS_NR%TYPE DEFAULT NULL,
LAST_N_RECORDS_NR_nin IN BOOLEAN := TRUE,
FLG_SHORTCUT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SHORTCUT_FILTER%TYPE DEFAULT NULL,
FLG_SHORTCUT_FILTER_nin IN BOOLEAN := TRUE,
FLG_SYNCHRONIZED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SYNCHRONIZED%TYPE DEFAULT NULL,
FLG_SYNCHRONIZED_nin IN BOOLEAN := TRUE,
REVIEW_CAT_in IN PN_DBLOCK_TTP_SOFT_INST.REVIEW_CAT%TYPE DEFAULT NULL,
REVIEW_CAT_nin IN BOOLEAN := TRUE,
FLG_REVIEW_AVAIL_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_REVIEW_AVAIL%TYPE DEFAULT NULL,
FLG_REVIEW_AVAIL_nin IN BOOLEAN := TRUE,
FLG_DESCRIPTION_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DESCRIPTION%TYPE DEFAULT NULL,
FLG_DESCRIPTION_nin IN BOOLEAN := TRUE,
DESCRIPTION_CONDITION_in IN PN_DBLOCK_TTP_SOFT_INST.DESCRIPTION_CONDITION%TYPE DEFAULT NULL,
DESCRIPTION_CONDITION_nin IN BOOLEAN := TRUE,
FLG_DT_TASK_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DT_TASK%TYPE DEFAULT NULL,
FLG_DT_TASK_nin IN BOOLEAN := TRUE,
        id_task_related_in        IN pn_dblock_ttp_soft_inst.id_task_related%TYPE DEFAULT NULL,
        id_task_related_nin       IN BOOLEAN := TRUE,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
    ) IS
l_rows_out             table_varchar;
l_FLG_AUTO_POPULATED_n number(1) := sys.diutil.bool_to_int(FLG_AUTO_POPULATED_nin);
l_CREATE_USER_n number(1) := sys.diutil.bool_to_int(CREATE_USER_nin);
l_CREATE_TIME_n number(1) := sys.diutil.bool_to_int(CREATE_TIME_nin);
l_CREATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
l_UPDATE_USER_n number(1) := sys.diutil.bool_to_int(UPDATE_USER_nin);
l_UPDATE_TIME_n number(1) := sys.diutil.bool_to_int(UPDATE_TIME_nin);
l_UPDATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
l_FLG_AVAILABLE_n number(1) := sys.diutil.bool_to_int(FLG_AVAILABLE_nin);
l_FLG_SELECTED_n number(1) := sys.diutil.bool_to_int(FLG_SELECTED_nin);
l_FLG_IMPORT_FILTER_n number(1) := sys.diutil.bool_to_int(FLG_IMPORT_FILTER_nin);
l_LAST_N_RECORDS_NR_n number(1) := sys.diutil.bool_to_int(LAST_N_RECORDS_NR_nin);
l_FLG_SHORTCUT_FILTER_n number(1) := sys.diutil.bool_to_int(FLG_SHORTCUT_FILTER_nin);
l_FLG_SYNCHRONIZED_n number(1) := sys.diutil.bool_to_int(FLG_SYNCHRONIZED_nin);
l_REVIEW_CAT_n number(1) := sys.diutil.bool_to_int(REVIEW_CAT_nin);
l_FLG_REVIEW_AVAIL_n number(1) := sys.diutil.bool_to_int(FLG_REVIEW_AVAIL_nin);
l_FLG_DESCRIPTION_n number(1) := sys.diutil.bool_to_int(FLG_DESCRIPTION_nin);
l_DESCRIPTION_CONDITION_n number(1) := sys.diutil.bool_to_int(DESCRIPTION_CONDITION_nin);
l_FLG_DT_TASK_n number(1) := sys.diutil.bool_to_int(FLG_DT_TASK_nin);
        l_id_task_related_n       NUMBER(1) := sys.diutil.bool_to_int(id_task_related_nin);
begin

UPDATE pn_dblock_ttp_soft_inst
           SET flg_auto_populated    = decode(l_flg_auto_populated_n,
                                              0,
                                              flg_auto_populated_in,
                                              nvl(flg_auto_populated_in, flg_auto_populated)),
CREATE_USER = decode(l_CREATE_USER_n, 0, CREATE_USER_in, nvl(CREATE_USER_in, CREATE_USER)),
CREATE_TIME = decode(l_CREATE_TIME_n, 0, CREATE_TIME_in, nvl(CREATE_TIME_in, CREATE_TIME)),
               create_institution    = decode(l_create_institution_n,
                                              0,
                                              create_institution_in,
                                              nvl(create_institution_in, create_institution)),
UPDATE_USER = decode(l_UPDATE_USER_n, 0, UPDATE_USER_in, nvl(UPDATE_USER_in, UPDATE_USER)),
UPDATE_TIME = decode(l_UPDATE_TIME_n, 0, UPDATE_TIME_in, nvl(UPDATE_TIME_in, UPDATE_TIME)),
               update_institution    = decode(l_update_institution_n,
                                              0,
                                              update_institution_in,
                                              nvl(update_institution_in, update_institution)),
               flg_available         = decode(l_flg_available_n,
                                              0,
                                              flg_available_in,
                                              nvl(flg_available_in, flg_available)),
FLG_SELECTED = decode(l_FLG_SELECTED_n, 0, FLG_SELECTED_in, nvl(FLG_SELECTED_in, FLG_SELECTED)),
               flg_import_filter     = decode(l_flg_import_filter_n,
                                              0,
                                              flg_import_filter_in,
                                              nvl(flg_import_filter_in, flg_import_filter)),
               last_n_records_nr     = decode(l_last_n_records_nr_n,
                                              0,
                                              last_n_records_nr_in,
                                              nvl(last_n_records_nr_in, last_n_records_nr)),
               flg_shortcut_filter   = decode(l_flg_shortcut_filter_n,
                                              0,
                                              flg_shortcut_filter_in,
                                              nvl(flg_shortcut_filter_in, flg_shortcut_filter)),
               flg_synchronized      = decode(l_flg_synchronized_n,
                                              0,
                                              flg_synchronized_in,
                                              nvl(flg_synchronized_in, flg_synchronized)),
REVIEW_CAT = decode(l_REVIEW_CAT_n, 0, REVIEW_CAT_in, nvl(REVIEW_CAT_in, REVIEW_CAT)),
               flg_review_avail      = decode(l_flg_review_avail_n,
                                              0,
                                              flg_review_avail_in,
                                              nvl(flg_review_avail_in, flg_review_avail)),
               flg_description       = decode(l_flg_description_n,
                                              0,
                                              flg_description_in,
                                              nvl(flg_description_in, flg_description)),
               description_condition = decode(l_description_condition_n,
                                              0,
                                              description_condition_in,
                                              nvl(description_condition_in, description_condition)),
               flg_dt_task           = decode(l_flg_dt_task_n, 0, flg_dt_task_in, nvl(flg_dt_task_in, flg_dt_task)),
               id_task_related       = decode(l_id_task_related_n,
                                              0,
                                              id_task_related_in,
                                              nvl(id_task_related_in, id_task_related))
         WHERE id_pn_soap_block = id_pn_soap_block_in
 AND ID_DEPARTMENT = ID_DEPARTMENT_IN
 AND ID_INSTITUTION = ID_INSTITUTION_IN
 AND ID_DEP_CLIN_SERV = ID_DEP_CLIN_SERV_IN
 AND ID_PN_NOTE_TYPE = ID_PN_NOTE_TYPE_IN
 AND ID_TASK_TYPE = ID_TASK_TYPE_IN
 AND ID_PN_DATA_BLOCK = ID_PN_DATA_BLOCK_IN
 AND ID_SOFTWARE = ID_SOFTWARE_IN
RETURNING ROWID BULK COLLECT INTO l_rows_out;
IF (rows_out IS NULL)
THEN
rows_out := table_varchar();
END IF;
rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end upd;

-- Update any/all columns by primary key. If you pass NULL, then
-- the current column value is set to itself. If you need a more
-- selected UPDATE then use one of the onecol procedures below.
PROCEDURE upd
(
ID_PN_SOAP_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_SOAP_BLOCK%TYPE,
ID_DEPARTMENT_in IN pn_dblock_ttp_soft_inst.ID_DEPARTMENT%TYPE,
ID_INSTITUTION_in IN pn_dblock_ttp_soft_inst.ID_INSTITUTION%TYPE,
ID_DEP_CLIN_SERV_in IN pn_dblock_ttp_soft_inst.ID_DEP_CLIN_SERV%TYPE,
ID_PN_NOTE_TYPE_in IN pn_dblock_ttp_soft_inst.ID_PN_NOTE_TYPE%TYPE,
ID_TASK_TYPE_in IN pn_dblock_ttp_soft_inst.ID_TASK_TYPE%TYPE,
ID_PN_DATA_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_DATA_BLOCK%TYPE,
ID_SOFTWARE_in IN pn_dblock_ttp_soft_inst.ID_SOFTWARE%TYPE,
FLG_AUTO_POPULATED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AUTO_POPULATED%TYPE DEFAULT NULL,
FLG_AUTO_POPULATED_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
FLG_AVAILABLE_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_AVAILABLE_nin IN BOOLEAN := TRUE,
FLG_SELECTED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SELECTED%TYPE DEFAULT NULL,
FLG_SELECTED_nin IN BOOLEAN := TRUE,
FLG_IMPORT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_IMPORT_FILTER%TYPE DEFAULT NULL,
FLG_IMPORT_FILTER_nin IN BOOLEAN := TRUE,
LAST_N_RECORDS_NR_in IN PN_DBLOCK_TTP_SOFT_INST.LAST_N_RECORDS_NR%TYPE DEFAULT NULL,
LAST_N_RECORDS_NR_nin IN BOOLEAN := TRUE,
FLG_SHORTCUT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SHORTCUT_FILTER%TYPE DEFAULT NULL,
FLG_SHORTCUT_FILTER_nin IN BOOLEAN := TRUE,
FLG_SYNCHRONIZED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SYNCHRONIZED%TYPE DEFAULT NULL,
FLG_SYNCHRONIZED_nin IN BOOLEAN := TRUE,
REVIEW_CAT_in IN PN_DBLOCK_TTP_SOFT_INST.REVIEW_CAT%TYPE DEFAULT NULL,
REVIEW_CAT_nin IN BOOLEAN := TRUE,
FLG_REVIEW_AVAIL_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_REVIEW_AVAIL%TYPE DEFAULT NULL,
FLG_REVIEW_AVAIL_nin IN BOOLEAN := TRUE,
FLG_DESCRIPTION_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DESCRIPTION%TYPE DEFAULT NULL,
FLG_DESCRIPTION_nin IN BOOLEAN := TRUE,
DESCRIPTION_CONDITION_in IN PN_DBLOCK_TTP_SOFT_INST.DESCRIPTION_CONDITION%TYPE DEFAULT NULL,
DESCRIPTION_CONDITION_nin IN BOOLEAN := TRUE,
FLG_DT_TASK_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DT_TASK%TYPE DEFAULT NULL,
FLG_DT_TASK_nin IN BOOLEAN := TRUE,
        id_task_related_in        IN pn_dblock_ttp_soft_inst.id_task_related%TYPE DEFAULT NULL,
        id_task_related_nin       IN BOOLEAN := TRUE,
handle_error_in        IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
        upd(id_pn_soap_block_in       => id_pn_soap_block_in,
ID_DEPARTMENT_IN => ID_DEPARTMENT_IN,
ID_INSTITUTION_IN => ID_INSTITUTION_IN,
ID_DEP_CLIN_SERV_IN => ID_DEP_CLIN_SERV_IN,
ID_PN_NOTE_TYPE_IN => ID_PN_NOTE_TYPE_IN,
ID_TASK_TYPE_IN => ID_TASK_TYPE_IN,
ID_PN_DATA_BLOCK_IN => ID_PN_DATA_BLOCK_IN,
ID_SOFTWARE_IN => ID_SOFTWARE_IN,
FLG_AUTO_POPULATED_IN => FLG_AUTO_POPULATED_IN,
FLG_AUTO_POPULATED_NIN => FLG_AUTO_POPULATED_NIN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_USER_NIN => CREATE_USER_NIN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_TIME_NIN => CREATE_TIME_NIN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
CREATE_INSTITUTION_NIN => CREATE_INSTITUTION_NIN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_USER_NIN => UPDATE_USER_NIN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_TIME_NIN => UPDATE_TIME_NIN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
UPDATE_INSTITUTION_NIN => UPDATE_INSTITUTION_NIN,
FLG_AVAILABLE_IN => FLG_AVAILABLE_IN,
FLG_AVAILABLE_NIN => FLG_AVAILABLE_NIN,
FLG_SELECTED_IN => FLG_SELECTED_IN,
FLG_SELECTED_NIN => FLG_SELECTED_NIN,
FLG_IMPORT_FILTER_IN => FLG_IMPORT_FILTER_IN,
FLG_IMPORT_FILTER_NIN => FLG_IMPORT_FILTER_NIN,
LAST_N_RECORDS_NR_IN => LAST_N_RECORDS_NR_IN,
LAST_N_RECORDS_NR_NIN => LAST_N_RECORDS_NR_NIN,
FLG_SHORTCUT_FILTER_IN => FLG_SHORTCUT_FILTER_IN,
FLG_SHORTCUT_FILTER_NIN => FLG_SHORTCUT_FILTER_NIN,
FLG_SYNCHRONIZED_IN => FLG_SYNCHRONIZED_IN,
FLG_SYNCHRONIZED_NIN => FLG_SYNCHRONIZED_NIN,
REVIEW_CAT_IN => REVIEW_CAT_IN,
REVIEW_CAT_NIN => REVIEW_CAT_NIN,
FLG_REVIEW_AVAIL_IN => FLG_REVIEW_AVAIL_IN,
FLG_REVIEW_AVAIL_NIN => FLG_REVIEW_AVAIL_NIN,
FLG_DESCRIPTION_IN => FLG_DESCRIPTION_IN,
FLG_DESCRIPTION_NIN => FLG_DESCRIPTION_NIN,
DESCRIPTION_CONDITION_IN => DESCRIPTION_CONDITION_IN,
DESCRIPTION_CONDITION_NIN => DESCRIPTION_CONDITION_NIN,
FLG_DT_TASK_IN => FLG_DT_TASK_IN,
FLG_DT_TASK_NIN => FLG_DT_TASK_NIN,
            id_task_related_in        => id_task_related_in,
            id_task_related_nin       => id_task_related_nin,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update any/all columns by dynamic WHERE
-- If you pass NULL, then the current column value is set to itself
PROCEDURE upd
(
FLG_AUTO_POPULATED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AUTO_POPULATED%TYPE DEFAULT NULL,
FLG_AUTO_POPULATED_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
FLG_AVAILABLE_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_AVAILABLE_nin IN BOOLEAN := TRUE,
FLG_SELECTED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SELECTED%TYPE DEFAULT NULL,
FLG_SELECTED_nin IN BOOLEAN := TRUE,
FLG_IMPORT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_IMPORT_FILTER%TYPE DEFAULT NULL,
FLG_IMPORT_FILTER_nin IN BOOLEAN := TRUE,
LAST_N_RECORDS_NR_in IN PN_DBLOCK_TTP_SOFT_INST.LAST_N_RECORDS_NR%TYPE DEFAULT NULL,
LAST_N_RECORDS_NR_nin IN BOOLEAN := TRUE,
FLG_SHORTCUT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SHORTCUT_FILTER%TYPE DEFAULT NULL,
FLG_SHORTCUT_FILTER_nin IN BOOLEAN := TRUE,
FLG_SYNCHRONIZED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SYNCHRONIZED%TYPE DEFAULT NULL,
FLG_SYNCHRONIZED_nin IN BOOLEAN := TRUE,
REVIEW_CAT_in IN PN_DBLOCK_TTP_SOFT_INST.REVIEW_CAT%TYPE DEFAULT NULL,
REVIEW_CAT_nin IN BOOLEAN := TRUE,
FLG_REVIEW_AVAIL_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_REVIEW_AVAIL%TYPE DEFAULT NULL,
FLG_REVIEW_AVAIL_nin IN BOOLEAN := TRUE,
FLG_DESCRIPTION_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DESCRIPTION%TYPE DEFAULT NULL,
FLG_DESCRIPTION_nin IN BOOLEAN := TRUE,
DESCRIPTION_CONDITION_in IN PN_DBLOCK_TTP_SOFT_INST.DESCRIPTION_CONDITION%TYPE DEFAULT NULL,
DESCRIPTION_CONDITION_nin IN BOOLEAN := TRUE,
FLG_DT_TASK_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DT_TASK%TYPE DEFAULT NULL,
FLG_DT_TASK_nin IN BOOLEAN := TRUE,
        id_task_related_in        IN pn_dblock_ttp_soft_inst.id_task_related%TYPE DEFAULT NULL,
        id_task_related_nin       IN BOOLEAN := TRUE,
where_in               IN VARCHAR2,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
    ) IS
l_sql                  VARCHAR2(32767);
l_rows_out             table_varchar;
l_FLG_AUTO_POPULATED_n number(1) := sys.diutil.bool_to_int(FLG_AUTO_POPULATED_nin);
l_CREATE_USER_n number(1) := sys.diutil.bool_to_int(CREATE_USER_nin);
l_CREATE_TIME_n number(1) := sys.diutil.bool_to_int(CREATE_TIME_nin);
l_CREATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
l_UPDATE_USER_n number(1) := sys.diutil.bool_to_int(UPDATE_USER_nin);
l_UPDATE_TIME_n number(1) := sys.diutil.bool_to_int(UPDATE_TIME_nin);
l_UPDATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
l_FLG_AVAILABLE_n number(1) := sys.diutil.bool_to_int(FLG_AVAILABLE_nin);
l_FLG_SELECTED_n number(1) := sys.diutil.bool_to_int(FLG_SELECTED_nin);
l_FLG_IMPORT_FILTER_n number(1) := sys.diutil.bool_to_int(FLG_IMPORT_FILTER_nin);
l_LAST_N_RECORDS_NR_n number(1) := sys.diutil.bool_to_int(LAST_N_RECORDS_NR_nin);
l_FLG_SHORTCUT_FILTER_n number(1) := sys.diutil.bool_to_int(FLG_SHORTCUT_FILTER_nin);
l_FLG_SYNCHRONIZED_n number(1) := sys.diutil.bool_to_int(FLG_SYNCHRONIZED_nin);
l_REVIEW_CAT_n number(1) := sys.diutil.bool_to_int(REVIEW_CAT_nin);
l_FLG_REVIEW_AVAIL_n number(1) := sys.diutil.bool_to_int(FLG_REVIEW_AVAIL_nin);
l_FLG_DESCRIPTION_n number(1) := sys.diutil.bool_to_int(FLG_DESCRIPTION_nin);
l_DESCRIPTION_CONDITION_n number(1) := sys.diutil.bool_to_int(DESCRIPTION_CONDITION_nin);
l_FLG_DT_TASK_n number(1) := sys.diutil.bool_to_int(FLG_DT_TASK_nin);
        l_id_task_related_n       NUMBER(1) := sys.diutil.bool_to_int(id_task_related_nin);
begin
l_FLG_AUTO_POPULATED_n := sys.diutil.bool_to_int(FLG_AUTO_POPULATED_nin);
l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
l_FLG_AVAILABLE_n := sys.diutil.bool_to_int(FLG_AVAILABLE_nin);
l_FLG_SELECTED_n := sys.diutil.bool_to_int(FLG_SELECTED_nin);
l_FLG_IMPORT_FILTER_n := sys.diutil.bool_to_int(FLG_IMPORT_FILTER_nin);
l_LAST_N_RECORDS_NR_n := sys.diutil.bool_to_int(LAST_N_RECORDS_NR_nin);
l_FLG_SHORTCUT_FILTER_n := sys.diutil.bool_to_int(FLG_SHORTCUT_FILTER_nin);
l_FLG_SYNCHRONIZED_n := sys.diutil.bool_to_int(FLG_SYNCHRONIZED_nin);
l_REVIEW_CAT_n := sys.diutil.bool_to_int(REVIEW_CAT_nin);
l_FLG_REVIEW_AVAIL_n := sys.diutil.bool_to_int(FLG_REVIEW_AVAIL_nin);
l_FLG_DESCRIPTION_n := sys.diutil.bool_to_int(FLG_DESCRIPTION_nin);
l_DESCRIPTION_CONDITION_n := sys.diutil.bool_to_int(DESCRIPTION_CONDITION_nin);
l_FLG_DT_TASK_n := sys.diutil.bool_to_int(FLG_DT_TASK_nin);
        l_id_task_related_n       := sys.diutil.bool_to_int(id_task_related_nin);
        l_sql                     := 'UPDATE pn_dblock_ttp_soft_inst SET' || ' FLG_AUTO_POPULATED = decode (' ||
                                     l_flg_auto_populated_n ||
                                     ',0,:FLG_AUTO_POPULATED_in, NVL (:FLG_AUTO_POPULATED_in, FLG_AUTO_POPULATED)) ' || ',' ||
                                     ' CREATE_USER = decode (' || l_create_user_n ||
                                     ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                     ' CREATE_TIME = decode (' || l_create_time_n ||
                                     ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                     ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                     ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                     ' UPDATE_USER = decode (' || l_update_user_n ||
                                     ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                     ' UPDATE_TIME = decode (' || l_update_time_n ||
                                     ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                     ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                     ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                     ' FLG_AVAILABLE = decode (' || l_flg_available_n ||
                                     ',0,:FLG_AVAILABLE_in, NVL (:FLG_AVAILABLE_in, FLG_AVAILABLE)) ' || ',' ||
                                     ' FLG_SELECTED = decode (' || l_flg_selected_n ||
                                     ',0,:FLG_SELECTED_in, NVL (:FLG_SELECTED_in, FLG_SELECTED)) ' || ',' ||
                                     ' FLG_IMPORT_FILTER = decode (' || l_flg_import_filter_n ||
                                     ',0,:FLG_IMPORT_FILTER_in, NVL (:FLG_IMPORT_FILTER_in, FLG_IMPORT_FILTER)) ' || ',' ||
                                     ' LAST_N_RECORDS_NR = decode (' || l_last_n_records_nr_n ||
                                     ',0,:LAST_N_RECORDS_NR_in, NVL (:LAST_N_RECORDS_NR_in, LAST_N_RECORDS_NR)) ' || ',' ||
                                     ' FLG_SHORTCUT_FILTER = decode (' || l_flg_shortcut_filter_n ||
                                     ',0,:FLG_SHORTCUT_FILTER_in, NVL (:FLG_SHORTCUT_FILTER_in, FLG_SHORTCUT_FILTER)) ' || ',' ||
                                     ' FLG_SYNCHRONIZED = decode (' || l_flg_synchronized_n ||
                                     ',0,:FLG_SYNCHRONIZED_in, NVL (:FLG_SYNCHRONIZED_in, FLG_SYNCHRONIZED)) ' || ',' ||
                                     ' REVIEW_CAT = decode (' || l_review_cat_n ||
                                     ',0,:REVIEW_CAT_in, NVL (:REVIEW_CAT_in, REVIEW_CAT)) ' || ',' ||
                                     ' FLG_REVIEW_AVAIL = decode (' || l_flg_review_avail_n ||
                                     ',0,:FLG_REVIEW_AVAIL_in, NVL (:FLG_REVIEW_AVAIL_in, FLG_REVIEW_AVAIL)) ' || ',' ||
                                     ' FLG_DESCRIPTION = decode (' || l_flg_description_n ||
                                     ',0,:FLG_DESCRIPTION_in, NVL (:FLG_DESCRIPTION_in, FLG_DESCRIPTION)) ' || ',' ||
                                     ' DESCRIPTION_CONDITION = decode (' || l_description_condition_n ||
                                     ',0,:DESCRIPTION_CONDITION_in, NVL (:DESCRIPTION_CONDITION_in, DESCRIPTION_CONDITION)) ' || ',' ||
                                     ' FLG_DT_TASK = decode (' || l_flg_dt_task_n ||
                                     ',0,:FLG_DT_TASK_in, NVL (:FLG_DT_TASK_in, FLG_DT_TASK)) ' || ',' ||
                                     ' ID_TASK_RELATED = decode (' || l_id_task_related_n ||
                                     ',0,:ID_TASK_RELATED_in, NVL (:ID_TASK_RELATED_in, ID_TASK_RELATED)) ' ||
                                     ' where ' || nvl(where_in, '(1=1)') ||
                                     ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN flg_auto_populated_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_available_in, flg_selected_in, flg_import_filter_in, last_n_records_nr_in, flg_shortcut_filter_in, flg_synchronized_in, review_cat_in, flg_review_avail_in, flg_description_in, description_condition_in, flg_dt_task_in, id_task_related_in, OUT l_rows_out;
IF (rows_out IS NULL)
THEN
rows_out := table_varchar();
END IF;
rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end upd;

--Update any/all columns by dynamic WHERE
-- If you pass NULL, then the current column value is set to itself
PROCEDURE upd
(
FLG_AUTO_POPULATED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AUTO_POPULATED%TYPE DEFAULT NULL,
FLG_AUTO_POPULATED_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
FLG_AVAILABLE_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_AVAILABLE_nin IN BOOLEAN := TRUE,
FLG_SELECTED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SELECTED%TYPE DEFAULT NULL,
FLG_SELECTED_nin IN BOOLEAN := TRUE,
FLG_IMPORT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_IMPORT_FILTER%TYPE DEFAULT NULL,
FLG_IMPORT_FILTER_nin IN BOOLEAN := TRUE,
LAST_N_RECORDS_NR_in IN PN_DBLOCK_TTP_SOFT_INST.LAST_N_RECORDS_NR%TYPE DEFAULT NULL,
LAST_N_RECORDS_NR_nin IN BOOLEAN := TRUE,
FLG_SHORTCUT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SHORTCUT_FILTER%TYPE DEFAULT NULL,
FLG_SHORTCUT_FILTER_nin IN BOOLEAN := TRUE,
FLG_SYNCHRONIZED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SYNCHRONIZED%TYPE DEFAULT NULL,
FLG_SYNCHRONIZED_nin IN BOOLEAN := TRUE,
REVIEW_CAT_in IN PN_DBLOCK_TTP_SOFT_INST.REVIEW_CAT%TYPE DEFAULT NULL,
REVIEW_CAT_nin IN BOOLEAN := TRUE,
FLG_REVIEW_AVAIL_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_REVIEW_AVAIL%TYPE DEFAULT NULL,
FLG_REVIEW_AVAIL_nin IN BOOLEAN := TRUE,
FLG_DESCRIPTION_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DESCRIPTION%TYPE DEFAULT NULL,
FLG_DESCRIPTION_nin IN BOOLEAN := TRUE,
DESCRIPTION_CONDITION_in IN PN_DBLOCK_TTP_SOFT_INST.DESCRIPTION_CONDITION%TYPE DEFAULT NULL,
DESCRIPTION_CONDITION_nin IN BOOLEAN := TRUE,
FLG_DT_TASK_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DT_TASK%TYPE DEFAULT NULL,
FLG_DT_TASK_nin IN BOOLEAN := TRUE,
        id_task_related_in        IN pn_dblock_ttp_soft_inst.id_task_related%TYPE DEFAULT NULL,
        id_task_related_nin       IN BOOLEAN := TRUE,
where_in               IN VARCHAR2,
handle_error_in        IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
        upd(flg_auto_populated_in     => flg_auto_populated_in,
FLG_AUTO_POPULATED_NIN => FLG_AUTO_POPULATED_NIN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_USER_NIN => CREATE_USER_NIN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_TIME_NIN => CREATE_TIME_NIN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
CREATE_INSTITUTION_NIN => CREATE_INSTITUTION_NIN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_USER_NIN => UPDATE_USER_NIN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_TIME_NIN => UPDATE_TIME_NIN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
UPDATE_INSTITUTION_NIN => UPDATE_INSTITUTION_NIN,
FLG_AVAILABLE_IN => FLG_AVAILABLE_IN,
FLG_AVAILABLE_NIN => FLG_AVAILABLE_NIN,
FLG_SELECTED_IN => FLG_SELECTED_IN,
FLG_SELECTED_NIN => FLG_SELECTED_NIN,
FLG_IMPORT_FILTER_IN => FLG_IMPORT_FILTER_IN,
FLG_IMPORT_FILTER_NIN => FLG_IMPORT_FILTER_NIN,
LAST_N_RECORDS_NR_IN => LAST_N_RECORDS_NR_IN,
LAST_N_RECORDS_NR_NIN => LAST_N_RECORDS_NR_NIN,
FLG_SHORTCUT_FILTER_IN => FLG_SHORTCUT_FILTER_IN,
FLG_SHORTCUT_FILTER_NIN => FLG_SHORTCUT_FILTER_NIN,
FLG_SYNCHRONIZED_IN => FLG_SYNCHRONIZED_IN,
FLG_SYNCHRONIZED_NIN => FLG_SYNCHRONIZED_NIN,
REVIEW_CAT_IN => REVIEW_CAT_IN,
REVIEW_CAT_NIN => REVIEW_CAT_NIN,
FLG_REVIEW_AVAIL_IN => FLG_REVIEW_AVAIL_IN,
FLG_REVIEW_AVAIL_NIN => FLG_REVIEW_AVAIL_NIN,
FLG_DESCRIPTION_IN => FLG_DESCRIPTION_IN,
FLG_DESCRIPTION_NIN => FLG_DESCRIPTION_NIN,
DESCRIPTION_CONDITION_IN => DESCRIPTION_CONDITION_IN,
DESCRIPTION_CONDITION_NIN => DESCRIPTION_CONDITION_NIN,
FLG_DT_TASK_IN => FLG_DT_TASK_IN,
FLG_DT_TASK_NIN => FLG_DT_TASK_NIN,
            id_task_related_in        => id_task_related_in,
            id_task_related_nin       => id_task_related_nin,
where_in               => where_in,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update/insert columns (with rows_out)
PROCEDURE upd_ins
(
ID_PN_SOAP_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_SOAP_BLOCK%TYPE,
ID_DEPARTMENT_in IN pn_dblock_ttp_soft_inst.ID_DEPARTMENT%TYPE,
ID_INSTITUTION_in IN pn_dblock_ttp_soft_inst.ID_INSTITUTION%TYPE,
ID_DEP_CLIN_SERV_in IN pn_dblock_ttp_soft_inst.ID_DEP_CLIN_SERV%TYPE,
ID_PN_NOTE_TYPE_in IN pn_dblock_ttp_soft_inst.ID_PN_NOTE_TYPE%TYPE,
ID_TASK_TYPE_in IN pn_dblock_ttp_soft_inst.ID_TASK_TYPE%TYPE,
ID_PN_DATA_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_DATA_BLOCK%TYPE,
ID_SOFTWARE_in IN pn_dblock_ttp_soft_inst.ID_SOFTWARE%TYPE,
FLG_AUTO_POPULATED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AUTO_POPULATED%TYPE DEFAULT NULL,
CREATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_AVAILABLE_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_SELECTED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SELECTED%TYPE DEFAULT NULL,
FLG_IMPORT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_IMPORT_FILTER%TYPE DEFAULT NULL,
LAST_N_RECORDS_NR_in IN PN_DBLOCK_TTP_SOFT_INST.LAST_N_RECORDS_NR%TYPE DEFAULT NULL,
FLG_SHORTCUT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SHORTCUT_FILTER%TYPE DEFAULT NULL,
FLG_SYNCHRONIZED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SYNCHRONIZED%TYPE DEFAULT NULL,
REVIEW_CAT_in IN PN_DBLOCK_TTP_SOFT_INST.REVIEW_CAT%TYPE DEFAULT NULL,
FLG_REVIEW_AVAIL_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_REVIEW_AVAIL%TYPE DEFAULT NULL,
FLG_DESCRIPTION_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DESCRIPTION%TYPE DEFAULT NULL,
DESCRIPTION_CONDITION_in IN PN_DBLOCK_TTP_SOFT_INST.DESCRIPTION_CONDITION%TYPE DEFAULT NULL,
FLG_DT_TASK_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DT_TASK%TYPE DEFAULT NULL,
        id_task_related_in       IN pn_dblock_ttp_soft_inst.id_task_related%TYPE DEFAULT NULL,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
    ) IS
begin
        upd(id_pn_soap_block_in      => id_pn_soap_block_in,
ID_DEPARTMENT_IN => ID_DEPARTMENT_IN,
ID_INSTITUTION_IN => ID_INSTITUTION_IN,
ID_DEP_CLIN_SERV_IN => ID_DEP_CLIN_SERV_IN,
ID_PN_NOTE_TYPE_IN => ID_PN_NOTE_TYPE_IN,
ID_TASK_TYPE_IN => ID_TASK_TYPE_IN,
ID_PN_DATA_BLOCK_IN => ID_PN_DATA_BLOCK_IN,
ID_SOFTWARE_IN => ID_SOFTWARE_IN,
FLG_AUTO_POPULATED_IN => FLG_AUTO_POPULATED_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
FLG_AVAILABLE_IN => FLG_AVAILABLE_IN,
FLG_SELECTED_IN => FLG_SELECTED_IN,
FLG_IMPORT_FILTER_IN => FLG_IMPORT_FILTER_IN,
LAST_N_RECORDS_NR_IN => LAST_N_RECORDS_NR_IN,
FLG_SHORTCUT_FILTER_IN => FLG_SHORTCUT_FILTER_IN,
FLG_SYNCHRONIZED_IN => FLG_SYNCHRONIZED_IN,
REVIEW_CAT_IN => REVIEW_CAT_IN,
FLG_REVIEW_AVAIL_IN => FLG_REVIEW_AVAIL_IN,
FLG_DESCRIPTION_IN => FLG_DESCRIPTION_IN,
DESCRIPTION_CONDITION_IN => DESCRIPTION_CONDITION_IN,
FLG_DT_TASK_IN => FLG_DT_TASK_IN,
            id_task_related_in       => id_task_related_in,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
IF SQL%ROWCOUNT = 0
THEN
            ins(id_pn_soap_block_in      => id_pn_soap_block_in,
ID_DEPARTMENT_IN => ID_DEPARTMENT_IN,
ID_INSTITUTION_IN => ID_INSTITUTION_IN,
ID_DEP_CLIN_SERV_IN => ID_DEP_CLIN_SERV_IN,
ID_PN_NOTE_TYPE_IN => ID_PN_NOTE_TYPE_IN,
ID_TASK_TYPE_IN => ID_TASK_TYPE_IN,
ID_PN_DATA_BLOCK_IN => ID_PN_DATA_BLOCK_IN,
ID_SOFTWARE_IN => ID_SOFTWARE_IN,
FLG_AUTO_POPULATED_IN => FLG_AUTO_POPULATED_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
FLG_AVAILABLE_IN => FLG_AVAILABLE_IN,
FLG_SELECTED_IN => FLG_SELECTED_IN,
FLG_IMPORT_FILTER_IN => FLG_IMPORT_FILTER_IN,
LAST_N_RECORDS_NR_IN => LAST_N_RECORDS_NR_IN,
FLG_SHORTCUT_FILTER_IN => FLG_SHORTCUT_FILTER_IN,
FLG_SYNCHRONIZED_IN => FLG_SYNCHRONIZED_IN,
REVIEW_CAT_IN => REVIEW_CAT_IN,
FLG_REVIEW_AVAIL_IN => FLG_REVIEW_AVAIL_IN,
FLG_DESCRIPTION_IN => FLG_DESCRIPTION_IN,
DESCRIPTION_CONDITION_IN => DESCRIPTION_CONDITION_IN,
FLG_DT_TASK_IN => FLG_DT_TASK_IN,
                id_task_related_in       => id_task_related_in,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
END IF;
end upd_ins;

--Update/insert columns (without rows_out)
PROCEDURE upd_ins
(
ID_PN_SOAP_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_SOAP_BLOCK%TYPE,
ID_DEPARTMENT_in IN pn_dblock_ttp_soft_inst.ID_DEPARTMENT%TYPE,
ID_INSTITUTION_in IN pn_dblock_ttp_soft_inst.ID_INSTITUTION%TYPE,
ID_DEP_CLIN_SERV_in IN pn_dblock_ttp_soft_inst.ID_DEP_CLIN_SERV%TYPE,
ID_PN_NOTE_TYPE_in IN pn_dblock_ttp_soft_inst.ID_PN_NOTE_TYPE%TYPE,
ID_TASK_TYPE_in IN pn_dblock_ttp_soft_inst.ID_TASK_TYPE%TYPE,
ID_PN_DATA_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_DATA_BLOCK%TYPE,
ID_SOFTWARE_in IN pn_dblock_ttp_soft_inst.ID_SOFTWARE%TYPE,
FLG_AUTO_POPULATED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AUTO_POPULATED%TYPE DEFAULT NULL,
CREATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_AVAILABLE_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_SELECTED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SELECTED%TYPE DEFAULT NULL,
FLG_IMPORT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_IMPORT_FILTER%TYPE DEFAULT NULL,
LAST_N_RECORDS_NR_in IN PN_DBLOCK_TTP_SOFT_INST.LAST_N_RECORDS_NR%TYPE DEFAULT NULL,
FLG_SHORTCUT_FILTER_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SHORTCUT_FILTER%TYPE DEFAULT NULL,
FLG_SYNCHRONIZED_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_SYNCHRONIZED%TYPE DEFAULT NULL,
REVIEW_CAT_in IN PN_DBLOCK_TTP_SOFT_INST.REVIEW_CAT%TYPE DEFAULT NULL,
FLG_REVIEW_AVAIL_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_REVIEW_AVAIL%TYPE DEFAULT NULL,
FLG_DESCRIPTION_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DESCRIPTION%TYPE DEFAULT NULL,
DESCRIPTION_CONDITION_in IN PN_DBLOCK_TTP_SOFT_INST.DESCRIPTION_CONDITION%TYPE DEFAULT NULL,
FLG_DT_TASK_in IN PN_DBLOCK_TTP_SOFT_INST.FLG_DT_TASK%TYPE DEFAULT NULL,
        id_task_related_in       IN pn_dblock_ttp_soft_inst.id_task_related%TYPE DEFAULT NULL,
handle_error_in        IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
        upd_ins(id_pn_soap_block_in,
ID_DEPARTMENT_IN,
ID_INSTITUTION_IN,
ID_DEP_CLIN_SERV_IN,
ID_PN_NOTE_TYPE_IN,
ID_TASK_TYPE_IN,
ID_PN_DATA_BLOCK_IN,
ID_SOFTWARE_IN,
FLG_AUTO_POPULATED_IN,
CREATE_USER_IN,
CREATE_TIME_IN,
CREATE_INSTITUTION_IN,
UPDATE_USER_IN,
UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN,
FLG_AVAILABLE_IN,
FLG_SELECTED_IN,
FLG_IMPORT_FILTER_IN,
LAST_N_RECORDS_NR_IN,
FLG_SHORTCUT_FILTER_IN,
FLG_SYNCHRONIZED_IN,
REVIEW_CAT_IN,
FLG_REVIEW_AVAIL_IN,
FLG_DESCRIPTION_IN,
DESCRIPTION_CONDITION_IN,
FLG_DT_TASK_IN,
                id_task_related_in,
handle_error_in,
rows_out);
end upd_ins;

--Update by record (with rows_out)
PROCEDURE upd
(
rec_in          IN pn_dblock_ttp_soft_inst%ROWTYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        IN OUT table_varchar
    ) IS
begin
        upd(id_pn_soap_block_in      => rec_in.id_pn_soap_block,
ID_DEPARTMENT_IN => rec_in.ID_DEPARTMENT,
ID_INSTITUTION_IN => rec_in.ID_INSTITUTION,
ID_DEP_CLIN_SERV_IN => rec_in.ID_DEP_CLIN_SERV,
ID_PN_NOTE_TYPE_IN => rec_in.ID_PN_NOTE_TYPE,
ID_TASK_TYPE_IN => rec_in.ID_TASK_TYPE,
ID_PN_DATA_BLOCK_IN => rec_in.ID_PN_DATA_BLOCK,
ID_SOFTWARE_IN => rec_in.ID_SOFTWARE,
FLG_AUTO_POPULATED_IN => rec_in.FLG_AUTO_POPULATED,
CREATE_USER_IN => rec_in.CREATE_USER,
CREATE_TIME_IN => rec_in.CREATE_TIME,
CREATE_INSTITUTION_IN => rec_in.CREATE_INSTITUTION,
UPDATE_USER_IN => rec_in.UPDATE_USER,
UPDATE_TIME_IN => rec_in.UPDATE_TIME,
UPDATE_INSTITUTION_IN => rec_in.UPDATE_INSTITUTION,
FLG_AVAILABLE_IN => rec_in.FLG_AVAILABLE,
FLG_SELECTED_IN => rec_in.FLG_SELECTED,
FLG_IMPORT_FILTER_IN => rec_in.FLG_IMPORT_FILTER,
LAST_N_RECORDS_NR_IN => rec_in.LAST_N_RECORDS_NR,
FLG_SHORTCUT_FILTER_IN => rec_in.FLG_SHORTCUT_FILTER,
FLG_SYNCHRONIZED_IN => rec_in.FLG_SYNCHRONIZED,
REVIEW_CAT_IN => rec_in.REVIEW_CAT,
FLG_REVIEW_AVAIL_IN => rec_in.FLG_REVIEW_AVAIL,
FLG_DESCRIPTION_IN => rec_in.FLG_DESCRIPTION,
DESCRIPTION_CONDITION_IN => rec_in.DESCRIPTION_CONDITION,
FLG_DT_TASK_IN => rec_in.FLG_DT_TASK,
            id_task_related_in       => rec_in.id_task_related,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update by record (without rows_out)
PROCEDURE upd
(
rec_in          IN pn_dblock_ttp_soft_inst%ROWTYPE,
handle_error_in IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
        upd(id_pn_soap_block_in      => rec_in.id_pn_soap_block,
ID_DEPARTMENT_IN => rec_in.ID_DEPARTMENT,
ID_INSTITUTION_IN => rec_in.ID_INSTITUTION,
ID_DEP_CLIN_SERV_IN => rec_in.ID_DEP_CLIN_SERV,
ID_PN_NOTE_TYPE_IN => rec_in.ID_PN_NOTE_TYPE,
ID_TASK_TYPE_IN => rec_in.ID_TASK_TYPE,
ID_PN_DATA_BLOCK_IN => rec_in.ID_PN_DATA_BLOCK,
ID_SOFTWARE_IN => rec_in.ID_SOFTWARE,
FLG_AUTO_POPULATED_IN => rec_in.FLG_AUTO_POPULATED,
CREATE_USER_IN => rec_in.CREATE_USER,
CREATE_TIME_IN => rec_in.CREATE_TIME,
CREATE_INSTITUTION_IN => rec_in.CREATE_INSTITUTION,
UPDATE_USER_IN => rec_in.UPDATE_USER,
UPDATE_TIME_IN => rec_in.UPDATE_TIME,
UPDATE_INSTITUTION_IN => rec_in.UPDATE_INSTITUTION,
FLG_AVAILABLE_IN => rec_in.FLG_AVAILABLE,
FLG_SELECTED_IN => rec_in.FLG_SELECTED,
FLG_IMPORT_FILTER_IN => rec_in.FLG_IMPORT_FILTER,
LAST_N_RECORDS_NR_IN => rec_in.LAST_N_RECORDS_NR,
FLG_SHORTCUT_FILTER_IN => rec_in.FLG_SHORTCUT_FILTER,
FLG_SYNCHRONIZED_IN => rec_in.FLG_SYNCHRONIZED,
REVIEW_CAT_IN => rec_in.REVIEW_CAT,
FLG_REVIEW_AVAIL_IN => rec_in.FLG_REVIEW_AVAIL,
FLG_DESCRIPTION_IN => rec_in.FLG_DESCRIPTION,
DESCRIPTION_CONDITION_IN => rec_in.DESCRIPTION_CONDITION,
FLG_DT_TASK_IN => rec_in.FLG_DT_TASK,
            id_task_related_in       => rec_in.id_task_related,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update with collection (with rows_out)
PROCEDURE upd
(
col_in            IN pn_dblock_ttp_soft_inst_tc,
ignore_if_null_in IN BOOLEAN := TRUE,
handle_error_in   IN BOOLEAN := TRUE,
rows_out          IN OUT table_varchar
    ) IS
l_ID_PN_SOAP_BLOCK ID_PN_SOAP_BLOCK_CC;
l_ID_DEPARTMENT ID_DEPARTMENT_CC;
l_ID_INSTITUTION ID_INSTITUTION_CC;
l_ID_DEP_CLIN_SERV ID_DEP_CLIN_SERV_CC;
l_ID_PN_NOTE_TYPE ID_PN_NOTE_TYPE_CC;
l_ID_TASK_TYPE ID_TASK_TYPE_CC;
l_ID_PN_DATA_BLOCK ID_PN_DATA_BLOCK_CC;
l_ID_SOFTWARE ID_SOFTWARE_CC;
l_FLG_AUTO_POPULATED FLG_AUTO_POPULATED_CC;
l_CREATE_USER CREATE_USER_CC;
l_CREATE_TIME CREATE_TIME_CC;
l_CREATE_INSTITUTION CREATE_INSTITUTION_CC;
l_UPDATE_USER UPDATE_USER_CC;
l_UPDATE_TIME UPDATE_TIME_CC;
l_UPDATE_INSTITUTION UPDATE_INSTITUTION_CC;
l_FLG_AVAILABLE FLG_AVAILABLE_CC;
l_FLG_SELECTED FLG_SELECTED_CC;
l_FLG_IMPORT_FILTER FLG_IMPORT_FILTER_CC;
l_LAST_N_RECORDS_NR LAST_N_RECORDS_NR_CC;
l_FLG_SHORTCUT_FILTER FLG_SHORTCUT_FILTER_CC;
l_FLG_SYNCHRONIZED FLG_SYNCHRONIZED_CC;
l_REVIEW_CAT REVIEW_CAT_CC;
l_FLG_REVIEW_AVAIL FLG_REVIEW_AVAIL_CC;
l_FLG_DESCRIPTION FLG_DESCRIPTION_CC;
l_DESCRIPTION_CONDITION DESCRIPTION_CONDITION_CC;
l_FLG_DT_TASK FLG_DT_TASK_CC;
        l_id_task_related       id_task_related_cc;
begin
FOR i IN col_in.FIRST .. col_in.LAST
LOOP
l_ID_PN_SOAP_BLOCK(i) := col_in(i).ID_PN_SOAP_BLOCK;
l_ID_DEPARTMENT(i) := col_in(i).ID_DEPARTMENT;
l_ID_INSTITUTION(i) := col_in(i).ID_INSTITUTION;
l_ID_DEP_CLIN_SERV(i) := col_in(i).ID_DEP_CLIN_SERV;
l_ID_PN_NOTE_TYPE(i) := col_in(i).ID_PN_NOTE_TYPE;
l_ID_TASK_TYPE(i) := col_in(i).ID_TASK_TYPE;
l_ID_PN_DATA_BLOCK(i) := col_in(i).ID_PN_DATA_BLOCK;
l_ID_SOFTWARE(i) := col_in(i).ID_SOFTWARE;
l_FLG_AUTO_POPULATED(i) := col_in(i).FLG_AUTO_POPULATED;
l_CREATE_USER(i) := col_in(i).CREATE_USER;
l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
l_FLG_AVAILABLE(i) := col_in(i).FLG_AVAILABLE;
l_FLG_SELECTED(i) := col_in(i).FLG_SELECTED;
l_FLG_IMPORT_FILTER(i) := col_in(i).FLG_IMPORT_FILTER;
l_LAST_N_RECORDS_NR(i) := col_in(i).LAST_N_RECORDS_NR;
l_FLG_SHORTCUT_FILTER(i) := col_in(i).FLG_SHORTCUT_FILTER;
l_FLG_SYNCHRONIZED(i) := col_in(i).FLG_SYNCHRONIZED;
l_REVIEW_CAT(i) := col_in(i).REVIEW_CAT;
l_FLG_REVIEW_AVAIL(i) := col_in(i).FLG_REVIEW_AVAIL;
l_FLG_DESCRIPTION(i) := col_in(i).FLG_DESCRIPTION;
l_DESCRIPTION_CONDITION(i) := col_in(i).DESCRIPTION_CONDITION;
l_FLG_DT_TASK(i) := col_in(i).FLG_DT_TASK;
            l_id_task_related(i) := col_in(i).id_task_related;
END LOOP;
IF nvl(ignore_if_null_in, FALSE)
THEN
-- Set any columns to their current values
-- if incoming value is NULL.
-- Put WHEN clause on column-level triggers!
FORALL i IN col_in.FIRST .. col_in.LAST
UPDATE pn_dblock_ttp_soft_inst
                   SET flg_auto_populated    = nvl(l_flg_auto_populated(i), flg_auto_populated),
CREATE_USER = nvl(l_CREATE_USER(i), CREATE_USER),
CREATE_TIME = nvl(l_CREATE_TIME(i), CREATE_TIME),
CREATE_INSTITUTION = nvl(l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
UPDATE_USER = nvl(l_UPDATE_USER(i), UPDATE_USER),
UPDATE_TIME = nvl(l_UPDATE_TIME(i), UPDATE_TIME),
UPDATE_INSTITUTION = nvl(l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
FLG_AVAILABLE = nvl(l_FLG_AVAILABLE(i), FLG_AVAILABLE),
FLG_SELECTED = nvl(l_FLG_SELECTED(i), FLG_SELECTED),
FLG_IMPORT_FILTER = nvl(l_FLG_IMPORT_FILTER(i), FLG_IMPORT_FILTER),
LAST_N_RECORDS_NR = nvl(l_LAST_N_RECORDS_NR(i), LAST_N_RECORDS_NR),
FLG_SHORTCUT_FILTER = nvl(l_FLG_SHORTCUT_FILTER(i), FLG_SHORTCUT_FILTER),
FLG_SYNCHRONIZED = nvl(l_FLG_SYNCHRONIZED(i), FLG_SYNCHRONIZED),
REVIEW_CAT = nvl(l_REVIEW_CAT(i), REVIEW_CAT),
FLG_REVIEW_AVAIL = nvl(l_FLG_REVIEW_AVAIL(i), FLG_REVIEW_AVAIL),
FLG_DESCRIPTION = nvl(l_FLG_DESCRIPTION(i), FLG_DESCRIPTION),
DESCRIPTION_CONDITION = nvl(l_DESCRIPTION_CONDITION(i), DESCRIPTION_CONDITION),
                       flg_dt_task           = nvl(l_flg_dt_task(i), flg_dt_task),
                       id_task_related       = nvl(l_id_task_related(i), id_task_related)
                 WHERE id_pn_soap_block = l_id_pn_soap_block(i)
 AND ID_DEPARTMENT = l_ID_DEPARTMENT(i)
 AND ID_INSTITUTION = l_ID_INSTITUTION(i)
 AND ID_DEP_CLIN_SERV = l_ID_DEP_CLIN_SERV(i)
 AND ID_PN_NOTE_TYPE = l_ID_PN_NOTE_TYPE(i)
 AND ID_TASK_TYPE = l_ID_TASK_TYPE(i)
 AND ID_PN_DATA_BLOCK = l_ID_PN_DATA_BLOCK(i)
 AND ID_SOFTWARE = l_ID_SOFTWARE(i)
 returning rowid bulk collect into rows_out;
ELSE
FORALL i IN col_in.FIRST .. col_in.LAST
UPDATE pn_dblock_ttp_soft_inst
                   SET flg_auto_populated    = l_flg_auto_populated(i),
CREATE_USER = l_CREATE_USER(i),
CREATE_TIME = l_CREATE_TIME(i),
CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
UPDATE_USER = l_UPDATE_USER(i),
UPDATE_TIME = l_UPDATE_TIME(i),
UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
FLG_AVAILABLE = l_FLG_AVAILABLE(i),
FLG_SELECTED = l_FLG_SELECTED(i),
FLG_IMPORT_FILTER = l_FLG_IMPORT_FILTER(i),
LAST_N_RECORDS_NR = l_LAST_N_RECORDS_NR(i),
FLG_SHORTCUT_FILTER = l_FLG_SHORTCUT_FILTER(i),
FLG_SYNCHRONIZED = l_FLG_SYNCHRONIZED(i),
REVIEW_CAT = l_REVIEW_CAT(i),
FLG_REVIEW_AVAIL = l_FLG_REVIEW_AVAIL(i),
FLG_DESCRIPTION = l_FLG_DESCRIPTION(i),
DESCRIPTION_CONDITION = l_DESCRIPTION_CONDITION(i),
                       flg_dt_task           = l_flg_dt_task(i),
                       id_task_related       = l_id_task_related(i)
                 WHERE id_pn_soap_block = l_id_pn_soap_block(i)
 AND ID_DEPARTMENT = l_ID_DEPARTMENT(i)
 AND ID_INSTITUTION = l_ID_INSTITUTION(i)
 AND ID_DEP_CLIN_SERV = l_ID_DEP_CLIN_SERV(i)
 AND ID_PN_NOTE_TYPE = l_ID_PN_NOTE_TYPE(i)
 AND ID_TASK_TYPE = l_ID_TASK_TYPE(i)
 AND ID_PN_DATA_BLOCK = l_ID_PN_DATA_BLOCK(i)
 AND ID_SOFTWARE = l_ID_SOFTWARE(i)
 returning rowid bulk collect into rows_out;
END IF;

EXCEPTION
WHEN e_forall_error THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
LOOP
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END LOOP;
END IF;
WHEN OTHERS THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end upd;

--Update with collection (without rows_out)
PROCEDURE upd
(
col_in            IN pn_dblock_ttp_soft_inst_tc,
ignore_if_null_in IN BOOLEAN := TRUE,
handle_error_in   IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
end upd;

--Dynamic update string
FUNCTION dynupdstr
(
colname_in IN all_tab_columns.column_name%TYPE,
where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
BEGIN
RETURN 'BEGIN UPDATE pn_dblock_ttp_soft_inst
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
END dynupdstr;

-- Use Native Dynamic SQL increment a single NUMBER column
-- for all rows specified by the dynamic WHERE clause (with rows_out)
PROCEDURE increment_onecol
(
colname_in         IN all_tab_columns.column_name%TYPE,
where_in           IN VARCHAR2,
increment_value_in IN NUMBER DEFAULT 1,
handle_error_in    IN BOOLEAN := TRUE,
rows_out           OUT table_varchar
    ) IS
begin
EXECUTE IMMEDIATE 'BEGIN UPDATE pn_dblock_ttp_soft_inst
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
USING OUT rows_out;
end increment_onecol;

-- Use Native Dynamic SQL increment a single NUMBER column
-- for all rows specified by the dynamic WHERE clause (without rows_out)
PROCEDURE increment_onecol
(
colname_in         IN all_tab_columns.column_name%TYPE,
where_in           IN VARCHAR2,
increment_value_in IN NUMBER DEFAULT 1,
handle_error_in    IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
EXECUTE IMMEDIATE 'UPDATE pn_dblock_ttp_soft_inst
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
end increment_onecol;

-- Delete one row by primary key
PROCEDURE del
(
ID_PN_SOAP_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_SOAP_BLOCK%TYPE,
ID_DEPARTMENT_in IN pn_dblock_ttp_soft_inst.ID_DEPARTMENT%TYPE,
ID_INSTITUTION_in IN pn_dblock_ttp_soft_inst.ID_INSTITUTION%TYPE,
ID_DEP_CLIN_SERV_in IN pn_dblock_ttp_soft_inst.ID_DEP_CLIN_SERV%TYPE,
ID_PN_NOTE_TYPE_in IN pn_dblock_ttp_soft_inst.ID_PN_NOTE_TYPE%TYPE,
ID_TASK_TYPE_in IN pn_dblock_ttp_soft_inst.ID_TASK_TYPE%TYPE,
ID_PN_DATA_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_DATA_BLOCK%TYPE,
ID_SOFTWARE_in IN pn_dblock_ttp_soft_inst.ID_SOFTWARE%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
    ) IS
begin
DELETE FROM pn_dblock_ttp_soft_inst
         WHERE id_pn_soap_block = id_pn_soap_block_in
           AND id_department = id_department_in
           AND id_institution = id_institution_in
           AND id_dep_clin_serv = id_dep_clin_serv_in
           AND id_pn_note_type = id_pn_note_type_in
           AND id_task_type = id_task_type_in
           AND id_pn_data_block = id_pn_data_block_in
           AND id_software = id_software_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del;

-- Delete one row by primary key
PROCEDURE del
(
ID_PN_SOAP_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_SOAP_BLOCK%TYPE,
ID_DEPARTMENT_in IN pn_dblock_ttp_soft_inst.ID_DEPARTMENT%TYPE,
ID_INSTITUTION_in IN pn_dblock_ttp_soft_inst.ID_INSTITUTION%TYPE,
ID_DEP_CLIN_SERV_in IN pn_dblock_ttp_soft_inst.ID_DEP_CLIN_SERV%TYPE,
ID_PN_NOTE_TYPE_in IN pn_dblock_ttp_soft_inst.ID_PN_NOTE_TYPE%TYPE,
ID_TASK_TYPE_in IN pn_dblock_ttp_soft_inst.ID_TASK_TYPE%TYPE,
ID_PN_DATA_BLOCK_in IN pn_dblock_ttp_soft_inst.ID_PN_DATA_BLOCK%TYPE,
ID_SOFTWARE_in IN pn_dblock_ttp_soft_inst.ID_SOFTWARE%TYPE,
handle_error_in        IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
        del(id_pn_soap_block_in => id_pn_soap_block_in,
ID_DEPARTMENT_IN => ID_DEPARTMENT_IN,
ID_INSTITUTION_IN => ID_INSTITUTION_IN,
ID_DEP_CLIN_SERV_IN => ID_DEP_CLIN_SERV_IN,
ID_PN_NOTE_TYPE_IN => ID_PN_NOTE_TYPE_IN,
ID_TASK_TYPE_IN => ID_TASK_TYPE_IN,
ID_PN_DATA_BLOCK_IN => ID_PN_DATA_BLOCK_IN,
ID_SOFTWARE_IN => ID_SOFTWARE_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del;

-- Delete all rows for this PDBTTSINT_FK foreign key value
PROCEDURE del_PDBTTSINT_FK
(
ID_PN_NOTE_TYPE_in IN PN_DBLOCK_TTP_SOFT_INST.ID_PN_NOTE_TYPE%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
    ) IS
begin
DELETE FROM pn_dblock_ttp_soft_inst
         WHERE id_pn_note_type = id_pn_note_type_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PDBTTSINT_FK;

-- Delete all rows for this PDBTTSI_DB_FK foreign key value
PROCEDURE del_PDBTTSI_DB_FK
(
ID_PN_DATA_BLOCK_in IN PN_DBLOCK_TTP_SOFT_INST.ID_PN_DATA_BLOCK%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
    ) IS
begin
DELETE FROM pn_dblock_ttp_soft_inst
         WHERE id_pn_data_block = id_pn_data_block_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PDBTTSI_DB_FK;

-- Delete all rows for this PDBTTSI_DEP_FK foreign key value
PROCEDURE del_PDBTTSI_DEP_FK
(
ID_DEPARTMENT_in IN PN_DBLOCK_TTP_SOFT_INST.ID_DEPARTMENT%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
    ) IS
begin
DELETE FROM pn_dblock_ttp_soft_inst
         WHERE id_department = id_department_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PDBTTSI_DEP_FK;

-- Delete all rows for this PDBTTSI_MRK_FK foreign key value
PROCEDURE del_PDBTTSI_MRK_FK
(
ID_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.ID_INSTITUTION%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
    ) IS
begin
DELETE FROM pn_dblock_ttp_soft_inst
         WHERE id_institution = id_institution_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PDBTTSI_MRK_FK;

-- Delete all rows for this PDBTTSI_SB_FK foreign key value
PROCEDURE del_PDBTTSI_SB_FK
(
ID_PN_SOAP_BLOCK_in IN PN_DBLOCK_TTP_SOFT_INST.ID_PN_SOAP_BLOCK%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
    ) IS
begin
DELETE FROM pn_dblock_ttp_soft_inst
         WHERE id_pn_soap_block = id_pn_soap_block_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PDBTTSI_SB_FK;

-- Delete all rows for this PDBTTSI_S_FK foreign key value
PROCEDURE del_PDBTTSI_S_FK
(
ID_SOFTWARE_in IN PN_DBLOCK_TTP_SOFT_INST.ID_SOFTWARE%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
    ) IS
begin
DELETE FROM pn_dblock_ttp_soft_inst
         WHERE id_software = id_software_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PDBTTSI_S_FK;

-- Delete all rows for this PDBTTSI_TT_FK foreign key value
PROCEDURE del_PDBTTSI_TT_FK
(
ID_TASK_TYPE_in IN PN_DBLOCK_TTP_SOFT_INST.ID_TASK_TYPE%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
    ) IS
begin
DELETE FROM pn_dblock_ttp_soft_inst
         WHERE id_task_type = id_task_type_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PDBTTSI_TT_FK;

-- Delete all rows for this PDBTTSINT_FK foreign key value
PROCEDURE del_PDBTTSINT_FK
(
ID_PN_NOTE_TYPE_in IN PN_DBLOCK_TTP_SOFT_INST.ID_PN_NOTE_TYPE%TYPE,
handle_error_in IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
        del_pdbttsint_fk(id_pn_note_type_in => id_pn_note_type_in,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_PDBTTSINT_FK;

-- Delete all rows for this PDBTTSI_DB_FK foreign key value
PROCEDURE del_PDBTTSI_DB_FK
(
ID_PN_DATA_BLOCK_in IN PN_DBLOCK_TTP_SOFT_INST.ID_PN_DATA_BLOCK%TYPE,
handle_error_in IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
        del_pdbttsi_db_fk(id_pn_data_block_in => id_pn_data_block_in,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_PDBTTSI_DB_FK;

-- Delete all rows for this PDBTTSI_DEP_FK foreign key value
PROCEDURE del_PDBTTSI_DEP_FK
(
ID_DEPARTMENT_in IN PN_DBLOCK_TTP_SOFT_INST.ID_DEPARTMENT%TYPE,
handle_error_in IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
        del_pdbttsi_dep_fk(id_department_in => id_department_in,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_PDBTTSI_DEP_FK;

-- Delete all rows for this PDBTTSI_MRK_FK foreign key value
PROCEDURE del_PDBTTSI_MRK_FK
(
ID_INSTITUTION_in IN PN_DBLOCK_TTP_SOFT_INST.ID_INSTITUTION%TYPE,
handle_error_in IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
        del_pdbttsi_mrk_fk(id_institution_in => id_institution_in,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_PDBTTSI_MRK_FK;

-- Delete all rows for this PDBTTSI_SB_FK foreign key value
PROCEDURE del_PDBTTSI_SB_FK
(
ID_PN_SOAP_BLOCK_in IN PN_DBLOCK_TTP_SOFT_INST.ID_PN_SOAP_BLOCK%TYPE,
handle_error_in IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
        del_pdbttsi_sb_fk(id_pn_soap_block_in => id_pn_soap_block_in,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_PDBTTSI_SB_FK;

-- Delete all rows for this PDBTTSI_S_FK foreign key value
PROCEDURE del_PDBTTSI_S_FK
(
ID_SOFTWARE_in IN PN_DBLOCK_TTP_SOFT_INST.ID_SOFTWARE%TYPE,
handle_error_in IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
        del_pdbttsi_s_fk(id_software_in => id_software_in, handle_error_in => handle_error_in, rows_out => rows_out);
end del_PDBTTSI_S_FK;

-- Delete all rows for this PDBTTSI_TT_FK foreign key value
PROCEDURE del_PDBTTSI_TT_FK
(
ID_TASK_TYPE_in IN PN_DBLOCK_TTP_SOFT_INST.ID_TASK_TYPE%TYPE,
handle_error_in IN BOOLEAN := TRUE
    ) IS
rows_out table_varchar;
begin
        del_pdbttsi_tt_fk(id_task_type_in => id_task_type_in, handle_error_in => handle_error_in, rows_out => rows_out);
end del_PDBTTSI_TT_FK;

-- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
begin
IF where_in IS NULL
THEN
RETURN 'DELETE FROM pn_dblock_ttp_soft_inst';
ELSE
RETURN 'DELETE FROM pn_dblock_ttp_soft_inst WHERE ' || where_in;
END IF;
end dyndelstr;
-- Delete all rows specified by dynamic WHERE clause
PROCEDURE del_by
(
where_clause_in IN VARCHAR2,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
    ) IS
begin
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_by;

-- Delete all rows specified by dynamic WHERE clause
PROCEDURE del_by
(
where_clause_in IN VARCHAR2,
handle_error_in IN BOOLEAN := TRUE
    ) IS
begin
EXECUTE IMMEDIATE dyndelstr (where_clause_in);

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_by;

-- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(pn_dblock_ttp_soft_inst_inout IN OUT pn_dblock_ttp_soft_inst%ROWTYPE) IS
begin
pn_dblock_ttp_soft_inst_inout.ID_PN_SOAP_BLOCK := NULL;
pn_dblock_ttp_soft_inst_inout.ID_DEPARTMENT := NULL;
pn_dblock_ttp_soft_inst_inout.ID_INSTITUTION := NULL;
pn_dblock_ttp_soft_inst_inout.ID_DEP_CLIN_SERV := NULL;
pn_dblock_ttp_soft_inst_inout.ID_PN_NOTE_TYPE := NULL;
pn_dblock_ttp_soft_inst_inout.ID_TASK_TYPE := NULL;
pn_dblock_ttp_soft_inst_inout.ID_PN_DATA_BLOCK := NULL;
pn_dblock_ttp_soft_inst_inout.ID_SOFTWARE := NULL;
pn_dblock_ttp_soft_inst_inout.FLG_AUTO_POPULATED := NULL;
pn_dblock_ttp_soft_inst_inout.CREATE_USER := NULL;
pn_dblock_ttp_soft_inst_inout.CREATE_TIME := NULL;
pn_dblock_ttp_soft_inst_inout.CREATE_INSTITUTION := NULL;
pn_dblock_ttp_soft_inst_inout.UPDATE_USER := NULL;
pn_dblock_ttp_soft_inst_inout.UPDATE_TIME := NULL;
pn_dblock_ttp_soft_inst_inout.UPDATE_INSTITUTION := NULL;
pn_dblock_ttp_soft_inst_inout.FLG_AVAILABLE := NULL;
pn_dblock_ttp_soft_inst_inout.FLG_SELECTED := NULL;
pn_dblock_ttp_soft_inst_inout.FLG_IMPORT_FILTER := NULL;
pn_dblock_ttp_soft_inst_inout.LAST_N_RECORDS_NR := NULL;
pn_dblock_ttp_soft_inst_inout.FLG_SHORTCUT_FILTER := NULL;
pn_dblock_ttp_soft_inst_inout.FLG_SYNCHRONIZED := NULL;
pn_dblock_ttp_soft_inst_inout.REVIEW_CAT := NULL;
pn_dblock_ttp_soft_inst_inout.FLG_REVIEW_AVAIL := NULL;
pn_dblock_ttp_soft_inst_inout.FLG_DESCRIPTION := NULL;
pn_dblock_ttp_soft_inst_inout.DESCRIPTION_CONDITION := NULL;
pn_dblock_ttp_soft_inst_inout.FLG_DT_TASK := NULL;
        pn_dblock_ttp_soft_inst_inout.id_task_related       := NULL;
end initrec;

-- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN pn_dblock_ttp_soft_inst%ROWTYPE IS
l_pn_dblock_ttp_soft_inst pn_dblock_ttp_soft_inst%ROWTYPE;
begin
return l_pn_dblock_ttp_soft_inst;
end initrec;

--get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pn_dblock_ttp_soft_inst_tc IS
data pn_dblock_ttp_soft_inst_tc;
begin
        SELECT *
          BULK COLLECT
          INTO data
          FROM pn_dblock_ttp_soft_inst
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
return data;
end get_data_rowid;

--get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pn_dblock_ttp_soft_inst_tc IS
data pn_dblock_ttp_soft_inst_tc;
PRAGMA AUTONOMOUS_TRANSACTION;
begin
data := get_data_rowid(rows_in);
commit;
return data;

EXCEPTION
        WHEN OTHERS THEN
pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
ROLLBACK;

end get_data_rowid_pat;

BEGIN
NULL;
END ts_pn_dblock_ttp_soft_inst;
/
