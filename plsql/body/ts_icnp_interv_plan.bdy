/*-- Last Change Revision: $Rev: 2028223 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:31 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY TS_ICNP_INTERV_PLAN
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 11, 2011 11:57:40
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_icnp_interv_plan_in IN ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE
      ,
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO ICNP_INTERV_PLAN (
         ID_ICNP_INTERV_PLAN,
         ID_ICNP_EPIS_INTERV,
         ID_PROF_TAKE,
         NOTES,
         FLG_STATUS,
         ID_PROF_CANCEL,
         NOTES_CANCEL,
         ID_EPISODE_WRITE,
         DT_PLAN_TSTZ,
         DT_TAKE_TSTZ,
         DT_CANCEL_TSTZ,
         ID_EPIS_DOCUMENTATION,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         ID_PROF_CREATED,
         DT_CREATED,
         ID_CANCEL_REASON,
         DT_LAST_UPDATE,
         EXEC_NUMBER,
         ID_ORDER_RECURR_PLAN
         )
      VALUES (
         id_icnp_interv_plan_in,
         id_icnp_epis_interv_in,
         id_prof_take_in,
         notes_in,
         flg_status_in,
         id_prof_cancel_in,
         notes_cancel_in,
         id_episode_write_in,
         dt_plan_tstz_in,
         dt_take_tstz_in,
         dt_cancel_tstz_in,
         id_epis_documentation_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         id_prof_created_in,
         dt_created_in,
         id_cancel_reason_in,
         dt_last_update_in,
         exec_number_in,
         id_order_recurr_plan_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'ICNP_INTERV_PLAN');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           IF l_name = 'IIP_CRE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'IIP_EPISD_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_DOCUMENTATION'
               , value_in => id_epis_documentation_in);
           END IF;
           IF l_name = 'IIP_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE_WRITE'
               , value_in => id_episode_write_in);
           END IF;
           IF l_name = 'IIP_IEI_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ICNP_EPIS_INTERV'
               , value_in => id_icnp_epis_interv_in);
           END IF;
           IF l_name = 'IIP_ORP_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ORDER_RECURR_PLAN'
               , value_in => id_order_recurr_plan_in);
           END IF;
           IF l_name = 'IIP_PROF_CANCEL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'IIP_PROF_CREATED_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CREATED'
               , value_in => id_prof_created_in);
           END IF;
           IF l_name = 'IIP_PROF_TAKE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_TAKE'
               , value_in => id_prof_take_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_icnp_interv_plan_in IN ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE
      ,
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_icnp_interv_plan_in => id_icnp_interv_plan_in
      ,
      id_icnp_epis_interv_in => id_icnp_epis_interv_in,
      id_prof_take_in => id_prof_take_in,
      notes_in => notes_in,
      flg_status_in => flg_status_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      id_episode_write_in => id_episode_write_in,
      dt_plan_tstz_in => dt_plan_tstz_in,
      dt_take_tstz_in => dt_take_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      id_epis_documentation_in => id_epis_documentation_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_prof_created_in => id_prof_created_in,
      dt_created_in => dt_created_in,
      id_cancel_reason_in => id_cancel_reason_in,
      dt_last_update_in => dt_last_update_in,
      exec_number_in => exec_number_in,
      id_order_recurr_plan_in => id_order_recurr_plan_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN ICNP_INTERV_PLAN%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec ICNP_INTERV_PLAN%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_ICNP_INTERV_PLAN := next_key (sequence_in);
      END IF;
      ins (
         id_icnp_interv_plan_in => l_rec.ID_ICNP_INTERV_PLAN
         ,
         id_icnp_epis_interv_in => l_rec.ID_ICNP_EPIS_INTERV,
         id_prof_take_in => l_rec.ID_PROF_TAKE,
         notes_in => l_rec.NOTES,
         flg_status_in => l_rec.FLG_STATUS,
         id_prof_cancel_in => l_rec.ID_PROF_CANCEL,
         notes_cancel_in => l_rec.NOTES_CANCEL,
         id_episode_write_in => l_rec.ID_EPISODE_WRITE,
         dt_plan_tstz_in => l_rec.DT_PLAN_TSTZ,
         dt_take_tstz_in => l_rec.DT_TAKE_TSTZ,
         dt_cancel_tstz_in => l_rec.DT_CANCEL_TSTZ,
         id_epis_documentation_in => l_rec.ID_EPIS_DOCUMENTATION,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         id_prof_created_in => l_rec.ID_PROF_CREATED,
         dt_created_in => l_rec.DT_CREATED,
         id_cancel_reason_in => l_rec.ID_CANCEL_REASON,
         dt_last_update_in => l_rec.DT_LAST_UPDATE,
         exec_number_in => l_rec.EXEC_NUMBER,
         id_order_recurr_plan_in => l_rec.ID_ORDER_RECURR_PLAN
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN ICNP_INTERV_PLAN%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE

   IS
     retval ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_ICNP_INTERV_PLAN.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_ICNP_INTERV_PLAN')
           );
   END next_key;

   PROCEDURE ins (
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL,
      id_icnp_interv_plan_out IN OUT ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE := next_key;
   BEGIN
      ins (
         id_icnp_interv_plan_in => l_pky,
         id_icnp_epis_interv_in => id_icnp_epis_interv_in,
         id_prof_take_in => id_prof_take_in,
         notes_in => notes_in,
         flg_status_in => flg_status_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_write_in => id_episode_write_in,
         dt_plan_tstz_in => dt_plan_tstz_in,
         dt_take_tstz_in => dt_take_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_epis_documentation_in => id_epis_documentation_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_prof_created_in => id_prof_created_in,
         dt_created_in => dt_created_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_last_update_in => dt_last_update_in,
         exec_number_in => exec_number_in,
         id_order_recurr_plan_in => id_order_recurr_plan_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_icnp_interv_plan_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL,
      id_icnp_interv_plan_out IN OUT ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_icnp_epis_interv_in => id_icnp_epis_interv_in,
      id_prof_take_in => id_prof_take_in,
      notes_in => notes_in,
      flg_status_in => flg_status_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      id_episode_write_in => id_episode_write_in,
      dt_plan_tstz_in => dt_plan_tstz_in,
      dt_take_tstz_in => dt_take_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      id_epis_documentation_in => id_epis_documentation_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_prof_created_in => id_prof_created_in,
      dt_created_in => dt_created_in,
      id_cancel_reason_in => id_cancel_reason_in,
      dt_last_update_in => dt_last_update_in,
      exec_number_in => exec_number_in,
      id_order_recurr_plan_in => id_order_recurr_plan_in,
      id_icnp_interv_plan_out => id_icnp_interv_plan_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE
   IS
        l_pky ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE := next_key;
   BEGIN
      ins (
         id_icnp_interv_plan_in => l_pky,
         id_icnp_epis_interv_in => id_icnp_epis_interv_in,
         id_prof_take_in => id_prof_take_in,
         notes_in => notes_in,
         flg_status_in => flg_status_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_write_in => id_episode_write_in,
         dt_plan_tstz_in => dt_plan_tstz_in,
         dt_take_tstz_in => dt_take_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_epis_documentation_in => id_epis_documentation_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_prof_created_in => id_prof_created_in,
         dt_created_in => dt_created_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_last_update_in => dt_last_update_in,
         exec_number_in => exec_number_in,
         id_order_recurr_plan_in => id_order_recurr_plan_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE
   IS
        l_pky ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_icnp_interv_plan_in => l_pky,
         id_icnp_epis_interv_in => id_icnp_epis_interv_in,
         id_prof_take_in => id_prof_take_in,
         notes_in => notes_in,
         flg_status_in => flg_status_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_write_in => id_episode_write_in,
         dt_plan_tstz_in => dt_plan_tstz_in,
         dt_take_tstz_in => dt_take_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_epis_documentation_in => id_epis_documentation_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_prof_created_in => id_prof_created_in,
         dt_created_in => dt_created_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_last_update_in => dt_last_update_in,
         exec_number_in => exec_number_in,
         id_order_recurr_plan_in => id_order_recurr_plan_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE := next_key;
   BEGIN
      ins (
         id_icnp_interv_plan_in => l_pky,
         id_icnp_epis_interv_in => id_icnp_epis_interv_in,
         id_prof_take_in => id_prof_take_in,
         notes_in => notes_in,
         flg_status_in => flg_status_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_write_in => id_episode_write_in,
         dt_plan_tstz_in => dt_plan_tstz_in,
         dt_take_tstz_in => dt_take_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_epis_documentation_in => id_epis_documentation_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_prof_created_in => id_prof_created_in,
         dt_created_in => dt_created_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_last_update_in => dt_last_update_in,
         exec_number_in => exec_number_in,
         id_order_recurr_plan_in => id_order_recurr_plan_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_icnp_interv_plan_in => l_pky,
         id_icnp_epis_interv_in => id_icnp_epis_interv_in,
         id_prof_take_in => id_prof_take_in,
         notes_in => notes_in,
         flg_status_in => flg_status_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_write_in => id_episode_write_in,
         dt_plan_tstz_in => dt_plan_tstz_in,
         dt_take_tstz_in => dt_take_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_epis_documentation_in => id_epis_documentation_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_prof_created_in => id_prof_created_in,
         dt_created_in => dt_created_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_last_update_in => dt_last_update_in,
         exec_number_in => exec_number_in,
         id_order_recurr_plan_in => id_order_recurr_plan_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN ICNP_INTERV_PLAN_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO ICNP_INTERV_PLAN VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_ICNP_INTERV_PLAN _' || indx
                  ,value_in => rows_in(indx).ID_ICNP_INTERV_PLAN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_ICNP_EPIS_INTERV _' || indx
                  ,value_in => rows_in(indx).ID_ICNP_EPIS_INTERV
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_TAKE _' || indx
                  ,value_in => rows_in(indx).ID_PROF_TAKE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES _' || indx
                  ,value_in => rows_in(indx).NOTES
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(indx).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CANCEL _' || indx
                  ,value_in => rows_in(indx).ID_PROF_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_CANCEL _' || indx
                  ,value_in => rows_in(indx).NOTES_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE_WRITE _' || indx
                  ,value_in => rows_in(indx).ID_EPISODE_WRITE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_PLAN_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_PLAN_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_TAKE_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_TAKE_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CANCEL_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_CANCEL_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPIS_DOCUMENTATION _' || indx
                  ,value_in => rows_in(indx).ID_EPIS_DOCUMENTATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(indx).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(indx).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(indx).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(indx).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CREATED _' || indx
                  ,value_in => rows_in(indx).ID_PROF_CREATED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CREATED _' || indx
                  ,value_in => rows_in(indx).DT_CREATED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CANCEL_REASON _' || indx
                  ,value_in => rows_in(indx).ID_CANCEL_REASON
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_LAST_UPDATE _' || indx
                  ,value_in => rows_in(indx).DT_LAST_UPDATE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'EXEC_NUMBER _' || indx
                  ,value_in => rows_in(indx).EXEC_NUMBER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_ORDER_RECURR_PLAN _' || indx
                  ,value_in => rows_in(indx).ID_ORDER_RECURR_PLAN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'ICNP_INTERV_PLAN'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN ICNP_INTERV_PLAN_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_icnp_interv_plan_in IN ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE,
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      ID_ICNP_EPIS_INTERV_nin IN BOOLEAN := TRUE,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      ID_PROF_TAKE_nin IN BOOLEAN := TRUE,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      ID_EPISODE_WRITE_nin IN BOOLEAN := TRUE,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      DT_PLAN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      DT_TAKE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      ID_EPIS_DOCUMENTATION_nin IN BOOLEAN := TRUE,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      ID_PROF_CREATED_nin IN BOOLEAN := TRUE,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      DT_CREATED_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      DT_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      EXEC_NUMBER_nin IN BOOLEAN := TRUE,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL,
      ID_ORDER_RECURR_PLAN_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_ICNP_EPIS_INTERV_n NUMBER(1);
   l_ID_PROF_TAKE_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_ID_EPISODE_WRITE_n NUMBER(1);
   l_DT_PLAN_TSTZ_n NUMBER(1);
   l_DT_TAKE_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_ID_EPIS_DOCUMENTATION_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_PROF_CREATED_n NUMBER(1);
   l_DT_CREATED_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_DT_LAST_UPDATE_n NUMBER(1);
   l_EXEC_NUMBER_n NUMBER(1);
   l_ID_ORDER_RECURR_PLAN_n NUMBER(1);
   BEGIN

   l_ID_ICNP_EPIS_INTERV_n := sys.diutil.bool_to_int(ID_ICNP_EPIS_INTERV_nin);
   l_ID_PROF_TAKE_n := sys.diutil.bool_to_int(ID_PROF_TAKE_nin);
   l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
   l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
   l_ID_EPISODE_WRITE_n := sys.diutil.bool_to_int(ID_EPISODE_WRITE_nin);
   l_DT_PLAN_TSTZ_n := sys.diutil.bool_to_int(DT_PLAN_TSTZ_nin);
   l_DT_TAKE_TSTZ_n := sys.diutil.bool_to_int(DT_TAKE_TSTZ_nin);
   l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
   l_ID_EPIS_DOCUMENTATION_n := sys.diutil.bool_to_int(ID_EPIS_DOCUMENTATION_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_ID_PROF_CREATED_n := sys.diutil.bool_to_int(ID_PROF_CREATED_nin);
   l_DT_CREATED_n := sys.diutil.bool_to_int(DT_CREATED_nin);
   l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
   l_DT_LAST_UPDATE_n := sys.diutil.bool_to_int(DT_LAST_UPDATE_nin);
   l_EXEC_NUMBER_n := sys.diutil.bool_to_int(EXEC_NUMBER_nin);
   l_ID_ORDER_RECURR_PLAN_n := sys.diutil.bool_to_int(ID_ORDER_RECURR_PLAN_nin);


         UPDATE ICNP_INTERV_PLAN SET
     ID_ICNP_EPIS_INTERV = decode (l_ID_ICNP_EPIS_INTERV_n,0,id_icnp_epis_interv_in, NVL (id_icnp_epis_interv_in, ID_ICNP_EPIS_INTERV)),
     ID_PROF_TAKE = decode (l_ID_PROF_TAKE_n,0,id_prof_take_in, NVL (id_prof_take_in, ID_PROF_TAKE)),
     NOTES = decode (l_NOTES_n,0,notes_in, NVL (notes_in, NOTES)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     ID_PROF_CANCEL = decode (l_ID_PROF_CANCEL_n,0,id_prof_cancel_in, NVL (id_prof_cancel_in, ID_PROF_CANCEL)),
     NOTES_CANCEL = decode (l_NOTES_CANCEL_n,0,notes_cancel_in, NVL (notes_cancel_in, NOTES_CANCEL)),
     ID_EPISODE_WRITE = decode (l_ID_EPISODE_WRITE_n,0,id_episode_write_in, NVL (id_episode_write_in, ID_EPISODE_WRITE)),
     DT_PLAN_TSTZ = decode (l_DT_PLAN_TSTZ_n,0,dt_plan_tstz_in, NVL (dt_plan_tstz_in, DT_PLAN_TSTZ)),
     DT_TAKE_TSTZ = decode (l_DT_TAKE_TSTZ_n,0,dt_take_tstz_in, NVL (dt_take_tstz_in, DT_TAKE_TSTZ)),
     DT_CANCEL_TSTZ = decode (l_DT_CANCEL_TSTZ_n,0,dt_cancel_tstz_in, NVL (dt_cancel_tstz_in, DT_CANCEL_TSTZ)),
     ID_EPIS_DOCUMENTATION = decode (l_ID_EPIS_DOCUMENTATION_n,0,id_epis_documentation_in, NVL (id_epis_documentation_in, ID_EPIS_DOCUMENTATION)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     ID_PROF_CREATED = decode (l_ID_PROF_CREATED_n,0,id_prof_created_in, NVL (id_prof_created_in, ID_PROF_CREATED)),
     DT_CREATED = decode (l_DT_CREATED_n,0,dt_created_in, NVL (dt_created_in, DT_CREATED)),
     ID_CANCEL_REASON = decode (l_ID_CANCEL_REASON_n,0,id_cancel_reason_in, NVL (id_cancel_reason_in, ID_CANCEL_REASON)),
     DT_LAST_UPDATE = decode (l_DT_LAST_UPDATE_n,0,dt_last_update_in, NVL (dt_last_update_in, DT_LAST_UPDATE)),
     EXEC_NUMBER = decode (l_EXEC_NUMBER_n,0,exec_number_in, NVL (exec_number_in, EXEC_NUMBER)),
     ID_ORDER_RECURR_PLAN = decode (l_ID_ORDER_RECURR_PLAN_n,0,id_order_recurr_plan_in, NVL (id_order_recurr_plan_in, ID_ORDER_RECURR_PLAN))
          WHERE
             ID_ICNP_INTERV_PLAN = id_icnp_interv_plan_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'ICNP_INTERV_PLAN');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           IF l_name = 'IIP_CRE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'IIP_EPISD_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_DOCUMENTATION'
               , value_in => id_epis_documentation_in);
           END IF;
           IF l_name = 'IIP_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE_WRITE'
               , value_in => id_episode_write_in);
           END IF;
           IF l_name = 'IIP_IEI_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ICNP_EPIS_INTERV'
               , value_in => id_icnp_epis_interv_in);
           END IF;
           IF l_name = 'IIP_ORP_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ORDER_RECURR_PLAN'
               , value_in => id_order_recurr_plan_in);
           END IF;
           IF l_name = 'IIP_PROF_CANCEL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'IIP_PROF_CREATED_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CREATED'
               , value_in => id_prof_created_in);
           END IF;
           IF l_name = 'IIP_PROF_TAKE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_TAKE'
               , value_in => id_prof_take_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_icnp_interv_plan_in IN ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE,
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      ID_ICNP_EPIS_INTERV_nin IN BOOLEAN := TRUE,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      ID_PROF_TAKE_nin IN BOOLEAN := TRUE,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      ID_EPISODE_WRITE_nin IN BOOLEAN := TRUE,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      DT_PLAN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      DT_TAKE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      ID_EPIS_DOCUMENTATION_nin IN BOOLEAN := TRUE,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      ID_PROF_CREATED_nin IN BOOLEAN := TRUE,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      DT_CREATED_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      DT_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      EXEC_NUMBER_nin IN BOOLEAN := TRUE,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL,
      ID_ORDER_RECURR_PLAN_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_icnp_interv_plan_in => id_icnp_interv_plan_in,
      id_icnp_epis_interv_in => id_icnp_epis_interv_in,
      ID_ICNP_EPIS_INTERV_nin => ID_ICNP_EPIS_INTERV_nin,
      id_prof_take_in => id_prof_take_in,
      ID_PROF_TAKE_nin => ID_PROF_TAKE_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      id_episode_write_in => id_episode_write_in,
      ID_EPISODE_WRITE_nin => ID_EPISODE_WRITE_nin,
      dt_plan_tstz_in => dt_plan_tstz_in,
      DT_PLAN_TSTZ_nin => DT_PLAN_TSTZ_nin,
      dt_take_tstz_in => dt_take_tstz_in,
      DT_TAKE_TSTZ_nin => DT_TAKE_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      id_epis_documentation_in => id_epis_documentation_in,
      ID_EPIS_DOCUMENTATION_nin => ID_EPIS_DOCUMENTATION_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_prof_created_in => id_prof_created_in,
      ID_PROF_CREATED_nin => ID_PROF_CREATED_nin,
      dt_created_in => dt_created_in,
      DT_CREATED_nin => DT_CREATED_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      dt_last_update_in => dt_last_update_in,
      DT_LAST_UPDATE_nin => DT_LAST_UPDATE_nin,
      exec_number_in => exec_number_in,
      EXEC_NUMBER_nin => EXEC_NUMBER_nin,
      id_order_recurr_plan_in => id_order_recurr_plan_in,
      ID_ORDER_RECURR_PLAN_nin => ID_ORDER_RECURR_PLAN_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      ID_ICNP_EPIS_INTERV_nin IN BOOLEAN := TRUE,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      ID_PROF_TAKE_nin IN BOOLEAN := TRUE,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      ID_EPISODE_WRITE_nin IN BOOLEAN := TRUE,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      DT_PLAN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      DT_TAKE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      ID_EPIS_DOCUMENTATION_nin IN BOOLEAN := TRUE,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      ID_PROF_CREATED_nin IN BOOLEAN := TRUE,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      DT_CREATED_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      DT_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      EXEC_NUMBER_nin IN BOOLEAN := TRUE,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL,
      ID_ORDER_RECURR_PLAN_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_ICNP_EPIS_INTERV_n NUMBER(1);
   l_ID_PROF_TAKE_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_ID_EPISODE_WRITE_n NUMBER(1);
   l_DT_PLAN_TSTZ_n NUMBER(1);
   l_DT_TAKE_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_ID_EPIS_DOCUMENTATION_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_PROF_CREATED_n NUMBER(1);
   l_DT_CREATED_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_DT_LAST_UPDATE_n NUMBER(1);
   l_EXEC_NUMBER_n NUMBER(1);
   l_ID_ORDER_RECURR_PLAN_n NUMBER(1);
      id_icnp_interv_plan_in ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE;
   BEGIN



      l_ID_ICNP_EPIS_INTERV_n := sys.diutil.bool_to_int(ID_ICNP_EPIS_INTERV_nin);
      l_ID_PROF_TAKE_n := sys.diutil.bool_to_int(ID_PROF_TAKE_nin);
      l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
      l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
      l_ID_EPISODE_WRITE_n := sys.diutil.bool_to_int(ID_EPISODE_WRITE_nin);
      l_DT_PLAN_TSTZ_n := sys.diutil.bool_to_int(DT_PLAN_TSTZ_nin);
      l_DT_TAKE_TSTZ_n := sys.diutil.bool_to_int(DT_TAKE_TSTZ_nin);
      l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
      l_ID_EPIS_DOCUMENTATION_n := sys.diutil.bool_to_int(ID_EPIS_DOCUMENTATION_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_ID_PROF_CREATED_n := sys.diutil.bool_to_int(ID_PROF_CREATED_nin);
      l_DT_CREATED_n := sys.diutil.bool_to_int(DT_CREATED_nin);
      l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
      l_DT_LAST_UPDATE_n := sys.diutil.bool_to_int(DT_LAST_UPDATE_nin);
      l_EXEC_NUMBER_n := sys.diutil.bool_to_int(EXEC_NUMBER_nin);
      l_ID_ORDER_RECURR_PLAN_n := sys.diutil.bool_to_int(ID_ORDER_RECURR_PLAN_nin);



l_sql := 'UPDATE ICNP_INTERV_PLAN SET '
     || ' ID_ICNP_EPIS_INTERV = decode (' || l_ID_ICNP_EPIS_INTERV_n || ',0,:id_icnp_epis_interv_in, NVL (:id_icnp_epis_interv_in, ID_ICNP_EPIS_INTERV)) '|| ','
     || ' ID_PROF_TAKE = decode (' || l_ID_PROF_TAKE_n || ',0,:id_prof_take_in, NVL (:id_prof_take_in, ID_PROF_TAKE)) '|| ','
     || ' NOTES = decode (' || l_NOTES_n || ',0,:notes_in, NVL (:notes_in, NOTES)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' ID_PROF_CANCEL = decode (' || l_ID_PROF_CANCEL_n || ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) '|| ','
     || ' NOTES_CANCEL = decode (' || l_NOTES_CANCEL_n || ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) '|| ','
     || ' ID_EPISODE_WRITE = decode (' || l_ID_EPISODE_WRITE_n || ',0,:id_episode_write_in, NVL (:id_episode_write_in, ID_EPISODE_WRITE)) '|| ','
     || ' DT_PLAN_TSTZ = decode (' || l_DT_PLAN_TSTZ_n || ',0,:dt_plan_tstz_in, NVL (:dt_plan_tstz_in, DT_PLAN_TSTZ)) '|| ','
     || ' DT_TAKE_TSTZ = decode (' || l_DT_TAKE_TSTZ_n || ',0,:dt_take_tstz_in, NVL (:dt_take_tstz_in, DT_TAKE_TSTZ)) '|| ','
     || ' DT_CANCEL_TSTZ = decode (' || l_DT_CANCEL_TSTZ_n || ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) '|| ','
     || ' ID_EPIS_DOCUMENTATION = decode (' || l_ID_EPIS_DOCUMENTATION_n || ',0,:id_epis_documentation_in, NVL (:id_epis_documentation_in, ID_EPIS_DOCUMENTATION)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' ID_PROF_CREATED = decode (' || l_ID_PROF_CREATED_n || ',0,:id_prof_created_in, NVL (:id_prof_created_in, ID_PROF_CREATED)) '|| ','
     || ' DT_CREATED = decode (' || l_DT_CREATED_n || ',0,:dt_created_in, NVL (:dt_created_in, DT_CREATED)) '|| ','
     || ' ID_CANCEL_REASON = decode (' || l_ID_CANCEL_REASON_n || ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) '|| ','
     || ' DT_LAST_UPDATE = decode (' || l_DT_LAST_UPDATE_n || ',0,:dt_last_update_in, NVL (:dt_last_update_in, DT_LAST_UPDATE)) '|| ','
     || ' EXEC_NUMBER = decode (' || l_EXEC_NUMBER_n || ',0,:exec_number_in, NVL (:exec_number_in, EXEC_NUMBER)) '|| ','
     || ' ID_ORDER_RECURR_PLAN = decode (' || l_ID_ORDER_RECURR_PLAN_n || ',0,:id_order_recurr_plan_in, NVL (:id_order_recurr_plan_in, ID_ORDER_RECURR_PLAN)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_icnp_epis_interv_in,
     id_prof_take_in,
     notes_in,
     flg_status_in,
     id_prof_cancel_in,
     notes_cancel_in,
     id_episode_write_in,
     dt_plan_tstz_in,
     dt_take_tstz_in,
     dt_cancel_tstz_in,
     id_epis_documentation_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     id_prof_created_in,
     dt_created_in,
     id_cancel_reason_in,
     dt_last_update_in,
     exec_number_in,
     id_order_recurr_plan_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'ICNP_INTERV_PLAN');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           IF l_name = 'IIP_CRE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'IIP_EPISD_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_DOCUMENTATION'
               , value_in => id_epis_documentation_in);
           END IF;
           IF l_name = 'IIP_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE_WRITE'
               , value_in => id_episode_write_in);
           END IF;
           IF l_name = 'IIP_IEI_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ICNP_EPIS_INTERV'
               , value_in => id_icnp_epis_interv_in);
           END IF;
           IF l_name = 'IIP_ORP_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ORDER_RECURR_PLAN'
               , value_in => id_order_recurr_plan_in);
           END IF;
           IF l_name = 'IIP_PROF_CANCEL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'IIP_PROF_CREATED_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CREATED'
               , value_in => id_prof_created_in);
           END IF;
           IF l_name = 'IIP_PROF_TAKE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_TAKE'
               , value_in => id_prof_take_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      ID_ICNP_EPIS_INTERV_nin IN BOOLEAN := TRUE,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      ID_PROF_TAKE_nin IN BOOLEAN := TRUE,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      ID_EPISODE_WRITE_nin IN BOOLEAN := TRUE,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      DT_PLAN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      DT_TAKE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      ID_EPIS_DOCUMENTATION_nin IN BOOLEAN := TRUE,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      ID_PROF_CREATED_nin IN BOOLEAN := TRUE,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      DT_CREATED_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      DT_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      EXEC_NUMBER_nin IN BOOLEAN := TRUE,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL,
      ID_ORDER_RECURR_PLAN_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_icnp_epis_interv_in => id_icnp_epis_interv_in,
      ID_ICNP_EPIS_INTERV_nin => ID_ICNP_EPIS_INTERV_nin,
      id_prof_take_in => id_prof_take_in,
      ID_PROF_TAKE_nin => ID_PROF_TAKE_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      id_episode_write_in => id_episode_write_in,
      ID_EPISODE_WRITE_nin => ID_EPISODE_WRITE_nin,
      dt_plan_tstz_in => dt_plan_tstz_in,
      DT_PLAN_TSTZ_nin => DT_PLAN_TSTZ_nin,
      dt_take_tstz_in => dt_take_tstz_in,
      DT_TAKE_TSTZ_nin => DT_TAKE_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      id_epis_documentation_in => id_epis_documentation_in,
      ID_EPIS_DOCUMENTATION_nin => ID_EPIS_DOCUMENTATION_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_prof_created_in => id_prof_created_in,
      ID_PROF_CREATED_nin => ID_PROF_CREATED_nin,
      dt_created_in => dt_created_in,
      DT_CREATED_nin => DT_CREATED_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      dt_last_update_in => dt_last_update_in,
      DT_LAST_UPDATE_nin => DT_LAST_UPDATE_nin,
      exec_number_in => exec_number_in,
      EXEC_NUMBER_nin => EXEC_NUMBER_nin,
      id_order_recurr_plan_in => id_order_recurr_plan_in,
      ID_ORDER_RECURR_PLAN_nin => ID_ORDER_RECURR_PLAN_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN ICNP_INTERV_PLAN%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_icnp_interv_plan_in => rec_in.ID_ICNP_INTERV_PLAN,
         id_icnp_epis_interv_in => rec_in.ID_ICNP_EPIS_INTERV,
         id_prof_take_in => rec_in.ID_PROF_TAKE,
         notes_in => rec_in.NOTES,
         flg_status_in => rec_in.FLG_STATUS,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         id_episode_write_in => rec_in.ID_EPISODE_WRITE,
         dt_plan_tstz_in => rec_in.DT_PLAN_TSTZ,
         dt_take_tstz_in => rec_in.DT_TAKE_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         id_epis_documentation_in => rec_in.ID_EPIS_DOCUMENTATION,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_prof_created_in => rec_in.ID_PROF_CREATED,
         dt_created_in => rec_in.DT_CREATED,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         dt_last_update_in => rec_in.DT_LAST_UPDATE,
         exec_number_in => rec_in.EXEC_NUMBER,
         id_order_recurr_plan_in => rec_in.ID_ORDER_RECURR_PLAN

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN ICNP_INTERV_PLAN%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_icnp_interv_plan_in => rec_in.ID_ICNP_INTERV_PLAN,
         id_icnp_epis_interv_in => rec_in.ID_ICNP_EPIS_INTERV,
         id_prof_take_in => rec_in.ID_PROF_TAKE,
         notes_in => rec_in.NOTES,
         flg_status_in => rec_in.FLG_STATUS,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         id_episode_write_in => rec_in.ID_EPISODE_WRITE,
         dt_plan_tstz_in => rec_in.DT_PLAN_TSTZ,
         dt_take_tstz_in => rec_in.DT_TAKE_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         id_epis_documentation_in => rec_in.ID_EPIS_DOCUMENTATION,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_prof_created_in => rec_in.ID_PROF_CREATED,
         dt_created_in => rec_in.DT_CREATED,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         dt_last_update_in => rec_in.DT_LAST_UPDATE,
         exec_number_in => rec_in.EXEC_NUMBER,
         id_order_recurr_plan_in => rec_in.ID_ORDER_RECURR_PLAN

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_icnp_interv_plan_in IN ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE,
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_icnp_interv_plan_in => id_icnp_interv_plan_in,
         id_icnp_epis_interv_in => id_icnp_epis_interv_in,
         id_prof_take_in => id_prof_take_in,
         notes_in => notes_in,
         flg_status_in => flg_status_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_write_in => id_episode_write_in,
         dt_plan_tstz_in => dt_plan_tstz_in,
         dt_take_tstz_in => dt_take_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_epis_documentation_in => id_epis_documentation_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_prof_created_in => id_prof_created_in,
         dt_created_in => dt_created_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_last_update_in => dt_last_update_in,
         exec_number_in => exec_number_in,
         id_order_recurr_plan_in => id_order_recurr_plan_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_icnp_interv_plan_in => id_icnp_interv_plan_in,
            id_icnp_epis_interv_in => id_icnp_epis_interv_in,
            id_prof_take_in => id_prof_take_in,
            notes_in => notes_in,
            flg_status_in => flg_status_in,
            id_prof_cancel_in => id_prof_cancel_in,
            notes_cancel_in => notes_cancel_in,
            id_episode_write_in => id_episode_write_in,
            dt_plan_tstz_in => dt_plan_tstz_in,
            dt_take_tstz_in => dt_take_tstz_in,
            dt_cancel_tstz_in => dt_cancel_tstz_in,
            id_epis_documentation_in => id_epis_documentation_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            id_prof_created_in => id_prof_created_in,
            dt_created_in => dt_created_in,
            id_cancel_reason_in => id_cancel_reason_in,
            dt_last_update_in => dt_last_update_in,
            exec_number_in => exec_number_in,
            id_order_recurr_plan_in => id_order_recurr_plan_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_icnp_interv_plan_in IN ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE,
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE DEFAULT NULL,
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE DEFAULT NULL,
      notes_in IN ICNP_INTERV_PLAN.NOTES%TYPE DEFAULT NULL,
      flg_status_in IN ICNP_INTERV_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN ICNP_INTERV_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN ICNP_INTERV_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN ICNP_INTERV_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN ICNP_INTERV_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      create_user_in IN ICNP_INTERV_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_INTERV_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_INTERV_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_INTERV_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_INTERV_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_INTERV_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE DEFAULT NULL,
      dt_created_in IN ICNP_INTERV_PLAN.DT_CREATED%TYPE DEFAULT NULL,
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_last_update_in IN ICNP_INTERV_PLAN.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      exec_number_in IN ICNP_INTERV_PLAN.EXEC_NUMBER%TYPE DEFAULT NULL,
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_icnp_interv_plan_in,
      id_icnp_epis_interv_in,
      id_prof_take_in,
      notes_in,
      flg_status_in,
      id_prof_cancel_in,
      notes_cancel_in,
      id_episode_write_in,
      dt_plan_tstz_in,
      dt_take_tstz_in,
      dt_cancel_tstz_in,
      id_epis_documentation_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      id_prof_created_in,
      dt_created_in,
      id_cancel_reason_in,
      dt_last_update_in,
      exec_number_in,
      id_order_recurr_plan_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN ICNP_INTERV_PLAN_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_ICNP_INTERV_PLAN ID_ICNP_INTERV_PLAN_cc;
      l_ID_ICNP_EPIS_INTERV ID_ICNP_EPIS_INTERV_cc;
      l_ID_PROF_TAKE ID_PROF_TAKE_cc;
      l_NOTES NOTES_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_ID_PROF_CANCEL ID_PROF_CANCEL_cc;
      l_NOTES_CANCEL NOTES_CANCEL_cc;
      l_ID_EPISODE_WRITE ID_EPISODE_WRITE_cc;
      l_DT_PLAN_TSTZ DT_PLAN_TSTZ_cc;
      l_DT_TAKE_TSTZ DT_TAKE_TSTZ_cc;
      l_DT_CANCEL_TSTZ DT_CANCEL_TSTZ_cc;
      l_ID_EPIS_DOCUMENTATION ID_EPIS_DOCUMENTATION_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_ID_PROF_CREATED ID_PROF_CREATED_cc;
      l_DT_CREATED DT_CREATED_cc;
      l_ID_CANCEL_REASON ID_CANCEL_REASON_cc;
      l_DT_LAST_UPDATE DT_LAST_UPDATE_cc;
      l_EXEC_NUMBER EXEC_NUMBER_cc;
      l_ID_ORDER_RECURR_PLAN ID_ORDER_RECURR_PLAN_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_ICNP_INTERV_PLAN(i) := col_in(i).ID_ICNP_INTERV_PLAN;
         l_ID_ICNP_EPIS_INTERV(i) := col_in(i).ID_ICNP_EPIS_INTERV;
         l_ID_PROF_TAKE(i) := col_in(i).ID_PROF_TAKE;
         l_NOTES(i) := col_in(i).NOTES;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_ID_PROF_CANCEL(i) := col_in(i).ID_PROF_CANCEL;
         l_NOTES_CANCEL(i) := col_in(i).NOTES_CANCEL;
         l_ID_EPISODE_WRITE(i) := col_in(i).ID_EPISODE_WRITE;
         l_DT_PLAN_TSTZ(i) := col_in(i).DT_PLAN_TSTZ;
         l_DT_TAKE_TSTZ(i) := col_in(i).DT_TAKE_TSTZ;
         l_DT_CANCEL_TSTZ(i) := col_in(i).DT_CANCEL_TSTZ;
         l_ID_EPIS_DOCUMENTATION(i) := col_in(i).ID_EPIS_DOCUMENTATION;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_ID_PROF_CREATED(i) := col_in(i).ID_PROF_CREATED;
         l_DT_CREATED(i) := col_in(i).DT_CREATED;
         l_ID_CANCEL_REASON(i) := col_in(i).ID_CANCEL_REASON;
         l_DT_LAST_UPDATE(i) := col_in(i).DT_LAST_UPDATE;
         l_EXEC_NUMBER(i) := col_in(i).EXEC_NUMBER;
         l_ID_ORDER_RECURR_PLAN(i) := col_in(i).ID_ORDER_RECURR_PLAN;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE ICNP_INTERV_PLAN SET
               ID_ICNP_EPIS_INTERV = NVL (l_ID_ICNP_EPIS_INTERV(i), ID_ICNP_EPIS_INTERV),
               ID_PROF_TAKE = NVL (l_ID_PROF_TAKE(i), ID_PROF_TAKE),
               NOTES = NVL (l_NOTES(i), NOTES),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               ID_PROF_CANCEL = NVL (l_ID_PROF_CANCEL(i), ID_PROF_CANCEL),
               NOTES_CANCEL = NVL (l_NOTES_CANCEL(i), NOTES_CANCEL),
               ID_EPISODE_WRITE = NVL (l_ID_EPISODE_WRITE(i), ID_EPISODE_WRITE),
               DT_PLAN_TSTZ = NVL (l_DT_PLAN_TSTZ(i), DT_PLAN_TSTZ),
               DT_TAKE_TSTZ = NVL (l_DT_TAKE_TSTZ(i), DT_TAKE_TSTZ),
               DT_CANCEL_TSTZ = NVL (l_DT_CANCEL_TSTZ(i), DT_CANCEL_TSTZ),
               ID_EPIS_DOCUMENTATION = NVL (l_ID_EPIS_DOCUMENTATION(i), ID_EPIS_DOCUMENTATION),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               ID_PROF_CREATED = NVL (l_ID_PROF_CREATED(i), ID_PROF_CREATED),
               DT_CREATED = NVL (l_DT_CREATED(i), DT_CREATED),
               ID_CANCEL_REASON = NVL (l_ID_CANCEL_REASON(i), ID_CANCEL_REASON),
               DT_LAST_UPDATE = NVL (l_DT_LAST_UPDATE(i), DT_LAST_UPDATE),
               EXEC_NUMBER = NVL (l_EXEC_NUMBER(i), EXEC_NUMBER),
               ID_ORDER_RECURR_PLAN = NVL (l_ID_ORDER_RECURR_PLAN(i), ID_ORDER_RECURR_PLAN)
             WHERE
                ID_ICNP_INTERV_PLAN = l_ID_ICNP_INTERV_PLAN(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE ICNP_INTERV_PLAN SET
               ID_ICNP_EPIS_INTERV = l_ID_ICNP_EPIS_INTERV(i),
               ID_PROF_TAKE = l_ID_PROF_TAKE(i),
               NOTES = l_NOTES(i),
               FLG_STATUS = l_FLG_STATUS(i),
               ID_PROF_CANCEL = l_ID_PROF_CANCEL(i),
               NOTES_CANCEL = l_NOTES_CANCEL(i),
               ID_EPISODE_WRITE = l_ID_EPISODE_WRITE(i),
               DT_PLAN_TSTZ = l_DT_PLAN_TSTZ(i),
               DT_TAKE_TSTZ = l_DT_TAKE_TSTZ(i),
               DT_CANCEL_TSTZ = l_DT_CANCEL_TSTZ(i),
               ID_EPIS_DOCUMENTATION = l_ID_EPIS_DOCUMENTATION(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               ID_PROF_CREATED = l_ID_PROF_CREATED(i),
               DT_CREATED = l_DT_CREATED(i),
               ID_CANCEL_REASON = l_ID_CANCEL_REASON(i),
               DT_LAST_UPDATE = l_DT_LAST_UPDATE(i),
               EXEC_NUMBER = l_EXEC_NUMBER(i),
               ID_ORDER_RECURR_PLAN = l_ID_ORDER_RECURR_PLAN(i)
             WHERE
                ID_ICNP_INTERV_PLAN = l_ID_ICNP_INTERV_PLAN(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN ICNP_INTERV_PLAN_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE ICNP_INTERV_PLAN
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE ICNP_INTERV_PLAN
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE ICNP_INTERV_PLAN set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE ICNP_INTERV_PLAN set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_icnp_interv_plan_in IN ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_INTERV_PLAN
       WHERE
          ID_ICNP_INTERV_PLAN = id_icnp_interv_plan_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_icnp_interv_plan_in IN ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_icnp_interv_plan_in => id_icnp_interv_plan_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_ICNP_INTERV_PLAN
   PROCEDURE del_ID_ICNP_INTERV_PLAN (
      id_icnp_interv_plan_in IN ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM ICNP_INTERV_PLAN
       WHERE ID_ICNP_INTERV_PLAN = id_icnp_interv_plan_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_ICNP_INTERV_PLAN;






   -- Delete all rows for primary key column ID_ICNP_INTERV_PLAN
   PROCEDURE del_ID_ICNP_INTERV_PLAN (
      id_icnp_interv_plan_in IN ICNP_INTERV_PLAN.ID_ICNP_INTERV_PLAN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_ICNP_INTERV_PLAN (
      id_icnp_interv_plan_in => id_icnp_interv_plan_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_ICNP_INTERV_PLAN;















   PROCEDURE del_IIP_CRE_FK (
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_INTERV_PLAN
       WHERE
          ID_CANCEL_REASON = del_IIP_CRE_FK.id_cancel_reason_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_IIP_CRE_FK;



PROCEDURE del_IIP_CRE_FK (
      id_cancel_reason_in IN ICNP_INTERV_PLAN.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_IIP_CRE_FK (
      id_cancel_reason_in => id_cancel_reason_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_IIP_CRE_FK;





   PROCEDURE del_IIP_EPISD_FK (
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_INTERV_PLAN
       WHERE
          ID_EPIS_DOCUMENTATION = del_IIP_EPISD_FK.id_epis_documentation_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_IIP_EPISD_FK;



PROCEDURE del_IIP_EPISD_FK (
      id_epis_documentation_in IN ICNP_INTERV_PLAN.ID_EPIS_DOCUMENTATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_IIP_EPISD_FK (
      id_epis_documentation_in => id_epis_documentation_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_IIP_EPISD_FK;





   PROCEDURE del_IIP_EPIS_FK (
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_INTERV_PLAN
       WHERE
          ID_EPISODE_WRITE = del_IIP_EPIS_FK.id_episode_write_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_IIP_EPIS_FK;



PROCEDURE del_IIP_EPIS_FK (
      id_episode_write_in IN ICNP_INTERV_PLAN.ID_EPISODE_WRITE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_IIP_EPIS_FK (
      id_episode_write_in => id_episode_write_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_IIP_EPIS_FK;





   PROCEDURE del_IIP_IEI_FK (
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_INTERV_PLAN
       WHERE
          ID_ICNP_EPIS_INTERV = del_IIP_IEI_FK.id_icnp_epis_interv_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_IIP_IEI_FK;



PROCEDURE del_IIP_IEI_FK (
      id_icnp_epis_interv_in IN ICNP_INTERV_PLAN.ID_ICNP_EPIS_INTERV%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_IIP_IEI_FK (
      id_icnp_epis_interv_in => id_icnp_epis_interv_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_IIP_IEI_FK;





   PROCEDURE del_IIP_ORP_FK (
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_INTERV_PLAN
       WHERE
          ID_ORDER_RECURR_PLAN = del_IIP_ORP_FK.id_order_recurr_plan_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_IIP_ORP_FK;



PROCEDURE del_IIP_ORP_FK (
      id_order_recurr_plan_in IN ICNP_INTERV_PLAN.ID_ORDER_RECURR_PLAN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_IIP_ORP_FK (
      id_order_recurr_plan_in => id_order_recurr_plan_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_IIP_ORP_FK;





   PROCEDURE del_IIP_PROF_CANCEL_FK (
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_INTERV_PLAN
       WHERE
          ID_PROF_CANCEL = del_IIP_PROF_CANCEL_FK.id_prof_cancel_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_IIP_PROF_CANCEL_FK;



PROCEDURE del_IIP_PROF_CANCEL_FK (
      id_prof_cancel_in IN ICNP_INTERV_PLAN.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_IIP_PROF_CANCEL_FK (
      id_prof_cancel_in => id_prof_cancel_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_IIP_PROF_CANCEL_FK;





   PROCEDURE del_IIP_PROF_CREATED_FK (
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_INTERV_PLAN
       WHERE
          ID_PROF_CREATED = del_IIP_PROF_CREATED_FK.id_prof_created_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_IIP_PROF_CREATED_FK;



PROCEDURE del_IIP_PROF_CREATED_FK (
      id_prof_created_in IN ICNP_INTERV_PLAN.ID_PROF_CREATED%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_IIP_PROF_CREATED_FK (
      id_prof_created_in => id_prof_created_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_IIP_PROF_CREATED_FK;





   PROCEDURE del_IIP_PROF_TAKE_FK (
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_INTERV_PLAN
       WHERE
          ID_PROF_TAKE = del_IIP_PROF_TAKE_FK.id_prof_take_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_IIP_PROF_TAKE_FK;



PROCEDURE del_IIP_PROF_TAKE_FK (
      id_prof_take_in IN ICNP_INTERV_PLAN.ID_PROF_TAKE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_IIP_PROF_TAKE_FK (
      id_prof_take_in => id_prof_take_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_IIP_PROF_TAKE_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM ICNP_INTERV_PLAN';
      ELSE
         RETURN
            'DELETE FROM ICNP_INTERV_PLAN WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_INTERV_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_INTERV_PLAN');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      icnp_interv_plan_inout IN OUT ICNP_INTERV_PLAN%ROWTYPE
   )
   IS
   BEGIN
      icnp_interv_plan_inout.ID_ICNP_INTERV_PLAN := NULL;
      icnp_interv_plan_inout.ID_ICNP_EPIS_INTERV := NULL;
      icnp_interv_plan_inout.ID_PROF_TAKE := NULL;
      icnp_interv_plan_inout.NOTES := NULL;
      icnp_interv_plan_inout.FLG_STATUS := NULL;
      icnp_interv_plan_inout.ID_PROF_CANCEL := NULL;
      icnp_interv_plan_inout.NOTES_CANCEL := NULL;
      icnp_interv_plan_inout.ID_EPISODE_WRITE := NULL;
      icnp_interv_plan_inout.DT_PLAN_TSTZ := NULL;
      icnp_interv_plan_inout.DT_TAKE_TSTZ := NULL;
      icnp_interv_plan_inout.DT_CANCEL_TSTZ := NULL;
      icnp_interv_plan_inout.ID_EPIS_DOCUMENTATION := NULL;
      icnp_interv_plan_inout.CREATE_USER := NULL;
      icnp_interv_plan_inout.CREATE_TIME := NULL;
      icnp_interv_plan_inout.CREATE_INSTITUTION := NULL;
      icnp_interv_plan_inout.UPDATE_USER := NULL;
      icnp_interv_plan_inout.UPDATE_TIME := NULL;
      icnp_interv_plan_inout.UPDATE_INSTITUTION := NULL;
      icnp_interv_plan_inout.ID_PROF_CREATED := NULL;
      icnp_interv_plan_inout.DT_CREATED := NULL;
      icnp_interv_plan_inout.ID_CANCEL_REASON := NULL;
      icnp_interv_plan_inout.DT_LAST_UPDATE := NULL;
      icnp_interv_plan_inout.EXEC_NUMBER := NULL;
      icnp_interv_plan_inout.ID_ORDER_RECURR_PLAN := NULL;
   END initrec;

   FUNCTION initrec RETURN ICNP_INTERV_PLAN%ROWTYPE
   IS
      l_icnp_interv_plan ICNP_INTERV_PLAN%ROWTYPE;
   BEGIN
      RETURN l_icnp_interv_plan;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN ICNP_INTERV_PLAN_tc
   IS
        data ICNP_INTERV_PLAN_tc;
   BEGIN
        select * bulk collect into data from ICNP_INTERV_PLAN where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN ICNP_INTERV_PLAN_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data ICNP_INTERV_PLAN_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_ICNP_INTERV_PLAN;
/
