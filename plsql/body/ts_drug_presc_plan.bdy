/*-- Last Change Revision: $Rev: 2028024 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:58 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY TS_DRUG_PRESC_PLAN
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: September 18, 2014 10:32:9
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_drug_presc_plan_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE
      ,
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT null,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT null,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT null,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT 'N',
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL
,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO DRUG_PRESC_PLAN (
         ID_DRUG_PRESC_PLAN,
         ID_DRUG_PRESC_DET,
         ID_DRUG_TAKE_TIME,
         ID_PROF_WRITES,
         DOSAGE,
         FLG_STATUS,
         NOTES,
         ID_PROF_CANCEL,
         NOTES_CANCEL,
         ID_EPISODE,
         RATE,
         DOSAGE_EXEC,
         FLG_ADVERS_REACT,
         NOTES_ADVERS_REACT,
         APPLICATION_SPOT,
         LOT_NUMBER,
         DT_EXPIRATION,
         ID_VACC_MED_EXT,
         DT_PLAN_TSTZ,
         DT_TAKE_TSTZ,
         DT_CANCEL_TSTZ,
         ORIGIN,
         DT_NEXT_TAKE,
         ID_PROF_ADM,
         DT_ADM_TSTZ,
         DOSAGE_UNIT_MEASURE,
         ID_FREETEXT,
         FLG_DOSAGE_CHECK,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         DOSAGE_CHANGE_JUSTIFY,
         RATE_UNIT_MEASURE,
         ID_PROF_WITNESS,
         ID_PRESC_DIR_DOSEFREQ,
         REFERENCE_VALUE,
         ID_UNIT_REFERENCE_VALUE,
         BARCODE,
         SUMMARY,
         REASON,
         ID_CANCEL_REASON,
         CANCEL_REASON_DESCR,
         DT_VALUE_DRIP_CHANGE,
         FLG_CO_SIGN,
         ID_PROF_CO_SIGN,
         DT_CO_SIGN,
         ID_ORDER_TYPE,
         ID_PROF_RATE_CHANGE,
         DT_END_BOTTLE,
         ID_PROF_EDIT_DISC,
         DT_EDIT_DISCONTINUE,
         JUSTIFY_DESCR,
         FLG_TOTALLY_ADM,
         FLG_TYPE_DATE,
         ID_VACC_FUNDING_SOURCE,
         ID_VACC_DOC_VIS,
         ID_VACC_ORIGIN,
         ADMINISTRED_DESC,
         ORDERED_DESC,
         ORIGIN_DESC,
         ID_ORDERED,
         ID_ADMINISTRED,
         ID_VACC_FUNDING_CAT,
         ID_VACC_ADV_REACTION,
         APPLICATION_SPOT_CODE,
         VACC_ROUTE_DATA,
         DT_DOC_DELIVERY_TSTZ,
         DOC_VIS_DESC,
         FUNDING_SOURCE_DESC
         )
      VALUES (
         id_drug_presc_plan_in,
         id_drug_presc_det_in,
         id_drug_take_time_in,
         id_prof_writes_in,
         dosage_in,
         flg_status_in,
         notes_in,
         id_prof_cancel_in,
         notes_cancel_in,
         id_episode_in,
         rate_in,
         dosage_exec_in,
         flg_advers_react_in,
         notes_advers_react_in,
         application_spot_in,
         lot_number_in,
         dt_expiration_in,
         id_vacc_med_ext_in,
         dt_plan_tstz_in,
         dt_take_tstz_in,
         dt_cancel_tstz_in,
         origin_in,
         dt_next_take_in,
         id_prof_adm_in,
         dt_adm_tstz_in,
         dosage_unit_measure_in,
         id_freetext_in,
         flg_dosage_check_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         dosage_change_justify_in,
         rate_unit_measure_in,
         id_prof_witness_in,
         id_presc_dir_dosefreq_in,
         reference_value_in,
         id_unit_reference_value_in,
         barcode_in,
         summary_in,
         reason_in,
         id_cancel_reason_in,
         cancel_reason_descr_in,
         dt_value_drip_change_in,
         flg_co_sign_in,
         id_prof_co_sign_in,
         dt_co_sign_in,
         id_order_type_in,
         id_prof_rate_change_in,
         dt_end_bottle_in,
         id_prof_edit_disc_in,
         dt_edit_discontinue_in,
         justify_descr_in,
         flg_totally_adm_in,
         flg_type_date_in,
         id_vacc_funding_source_in,
         id_vacc_doc_vis_in,
         id_vacc_origin_in,
         administred_desc_in,
         ordered_desc_in,
         origin_desc_in,
         id_ordered_in,
         id_administred_in,
         id_vacc_funding_cat_in,
         id_vacc_adv_reaction_in,
         application_spot_code_in,
         vacc_route_data_in,
         dt_doc_delivery_tstz_in,
         doc_vis_desc_in,
         funding_source_desc_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              PK_ALERT_EXCEPTIONS.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'DRUG_PRESC_PLAN');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           IF l_name = 'DPN_PRL_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_WITNESS'
               , value_in => id_prof_witness_in);
           END IF;
           IF l_name = 'DPP_OT_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ORDER_TYPE'
               , value_in => id_order_type_in);
           END IF;
           IF l_name = 'DPP_PROF_CO_SIGN_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CO_SIGN'
               , value_in => id_prof_co_sign_in);
           END IF;
           IF l_name = 'DPP_PROF_EDIT_DISC_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_EDIT_DISC'
               , value_in => id_prof_edit_disc_in);
           END IF;
           IF l_name = 'DPP_PROF_R_CHANGE_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_RATE_CHANGE'
               , value_in => id_prof_rate_change_in);
           END IF;
           IF l_name = 'DPP_UME_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'DOSAGE_UNIT_MEASURE'
               , value_in => dosage_unit_measure_in);
           END IF;
           IF l_name = 'DRPRP_DRGPR_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG_PRESC_DET'
               , value_in => id_drug_presc_det_in);
           END IF;
           IF l_name = 'DRPRP_DRTKT_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG_TAKE_TIME'
               , value_in => id_drug_take_time_in);
           END IF;
           IF l_name = 'DRPRP_PDDOSEFREQ_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PRESC_DIR_DOSEFREQ'
               , value_in => id_presc_dir_dosefreq_in);
           END IF;
           IF l_name = 'DRPRP_PROF_CANCEL_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'DRPRP_PROF_WRITES_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_WRITES'
               , value_in => id_prof_writes_in);
           END IF;
           IF l_name = 'DRPRP_UNITMEASURE_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_REFERENCE_VALUE'
               , value_in => id_unit_reference_value_in);
           END IF;
           IF l_name = 'DRPRP_UNITM_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'RATE_UNIT_MEASURE'
               , value_in => rate_unit_measure_in);
           END IF;
           IF l_name = 'ID_VACC_FUNDING_CAT_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_FUNDING_CAT'
               , value_in => id_vacc_funding_cat_in);
           END IF;
           IF l_name = 'PP_CANCEL_REASON_ADM_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'VACC_ADV_REACTION_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_ADV_REACTION'
               , value_in => id_vacc_adv_reaction_in);
           END IF;
           IF l_name = 'VACC_DOC_VIS_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_DOC_VIS'
               , value_in => id_vacc_doc_vis_in);
           END IF;
           IF l_name = 'VACC_FUNDING_SOURCE_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_FUNDING_SOURCE'
               , value_in => id_vacc_funding_source_in);
           END IF;
           IF l_name = 'VACC_ORIGIN_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_ORIGIN'
               , value_in => id_vacc_origin_in);
           END IF;
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_drug_presc_plan_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE
      ,
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT null,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT null,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT null,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT 'N',
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL
,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_drug_presc_plan_in => id_drug_presc_plan_in
      ,
      id_drug_presc_det_in => id_drug_presc_det_in,
      id_drug_take_time_in => id_drug_take_time_in,
      id_prof_writes_in => id_prof_writes_in,
      dosage_in => dosage_in,
      flg_status_in => flg_status_in,
      notes_in => notes_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      id_episode_in => id_episode_in,
      rate_in => rate_in,
      dosage_exec_in => dosage_exec_in,
      flg_advers_react_in => flg_advers_react_in,
      notes_advers_react_in => notes_advers_react_in,
      application_spot_in => application_spot_in,
      lot_number_in => lot_number_in,
      dt_expiration_in => dt_expiration_in,
      id_vacc_med_ext_in => id_vacc_med_ext_in,
      dt_plan_tstz_in => dt_plan_tstz_in,
      dt_take_tstz_in => dt_take_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      origin_in => origin_in,
      dt_next_take_in => dt_next_take_in,
      id_prof_adm_in => id_prof_adm_in,
      dt_adm_tstz_in => dt_adm_tstz_in,
      dosage_unit_measure_in => dosage_unit_measure_in,
      id_freetext_in => id_freetext_in,
      flg_dosage_check_in => flg_dosage_check_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      dosage_change_justify_in => dosage_change_justify_in,
      rate_unit_measure_in => rate_unit_measure_in,
      id_prof_witness_in => id_prof_witness_in,
      id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
      reference_value_in => reference_value_in,
      id_unit_reference_value_in => id_unit_reference_value_in,
      barcode_in => barcode_in,
      summary_in => summary_in,
      reason_in => reason_in,
      id_cancel_reason_in => id_cancel_reason_in,
      cancel_reason_descr_in => cancel_reason_descr_in,
      dt_value_drip_change_in => dt_value_drip_change_in,
      flg_co_sign_in => flg_co_sign_in,
      id_prof_co_sign_in => id_prof_co_sign_in,
      dt_co_sign_in => dt_co_sign_in,
      id_order_type_in => id_order_type_in,
      id_prof_rate_change_in => id_prof_rate_change_in,
      dt_end_bottle_in => dt_end_bottle_in,
      id_prof_edit_disc_in => id_prof_edit_disc_in,
      dt_edit_discontinue_in => dt_edit_discontinue_in,
      justify_descr_in => justify_descr_in,
      flg_totally_adm_in => flg_totally_adm_in,
      flg_type_date_in => flg_type_date_in,
      id_vacc_funding_source_in => id_vacc_funding_source_in,
      id_vacc_doc_vis_in => id_vacc_doc_vis_in,
      id_vacc_origin_in => id_vacc_origin_in,
      administred_desc_in => administred_desc_in,
      ordered_desc_in => ordered_desc_in,
      origin_desc_in => origin_desc_in,
      id_ordered_in => id_ordered_in,
      id_administred_in => id_administred_in,
      id_vacc_funding_cat_in => id_vacc_funding_cat_in,
      id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
      application_spot_code_in => application_spot_code_in,
      vacc_route_data_in => vacc_route_data_in,
      dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
      doc_vis_desc_in => doc_vis_desc_in,
      funding_source_desc_in => funding_source_desc_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN DRUG_PRESC_PLAN%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec DRUG_PRESC_PLAN%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_DRUG_PRESC_PLAN := next_key (sequence_in);
      END IF;
      ins (
         id_drug_presc_plan_in => l_rec.ID_DRUG_PRESC_PLAN
         ,
         id_drug_presc_det_in => l_rec.ID_DRUG_PRESC_DET,
         id_drug_take_time_in => l_rec.ID_DRUG_TAKE_TIME,
         id_prof_writes_in => l_rec.ID_PROF_WRITES,
         dosage_in => l_rec.DOSAGE,
         flg_status_in => l_rec.FLG_STATUS,
         notes_in => l_rec.NOTES,
         id_prof_cancel_in => l_rec.ID_PROF_CANCEL,
         notes_cancel_in => l_rec.NOTES_CANCEL,
         id_episode_in => l_rec.ID_EPISODE,
         rate_in => l_rec.RATE,
         dosage_exec_in => l_rec.DOSAGE_EXEC,
         flg_advers_react_in => l_rec.FLG_ADVERS_REACT,
         notes_advers_react_in => l_rec.NOTES_ADVERS_REACT,
         application_spot_in => l_rec.APPLICATION_SPOT,
         lot_number_in => l_rec.LOT_NUMBER,
         dt_expiration_in => l_rec.DT_EXPIRATION,
         id_vacc_med_ext_in => l_rec.ID_VACC_MED_EXT,
         dt_plan_tstz_in => l_rec.DT_PLAN_TSTZ,
         dt_take_tstz_in => l_rec.DT_TAKE_TSTZ,
         dt_cancel_tstz_in => l_rec.DT_CANCEL_TSTZ,
         origin_in => l_rec.ORIGIN,
         dt_next_take_in => l_rec.DT_NEXT_TAKE,
         id_prof_adm_in => l_rec.ID_PROF_ADM,
         dt_adm_tstz_in => l_rec.DT_ADM_TSTZ,
         dosage_unit_measure_in => l_rec.DOSAGE_UNIT_MEASURE,
         id_freetext_in => l_rec.ID_FREETEXT,
         flg_dosage_check_in => l_rec.FLG_DOSAGE_CHECK,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         dosage_change_justify_in => l_rec.DOSAGE_CHANGE_JUSTIFY,
         rate_unit_measure_in => l_rec.RATE_UNIT_MEASURE,
         id_prof_witness_in => l_rec.ID_PROF_WITNESS,
         id_presc_dir_dosefreq_in => l_rec.ID_PRESC_DIR_DOSEFREQ,
         reference_value_in => l_rec.REFERENCE_VALUE,
         id_unit_reference_value_in => l_rec.ID_UNIT_REFERENCE_VALUE,
         barcode_in => l_rec.BARCODE,
         summary_in => l_rec.SUMMARY,
         reason_in => l_rec.REASON,
         id_cancel_reason_in => l_rec.ID_CANCEL_REASON,
         cancel_reason_descr_in => l_rec.CANCEL_REASON_DESCR,
         dt_value_drip_change_in => l_rec.DT_VALUE_DRIP_CHANGE,
         flg_co_sign_in => l_rec.FLG_CO_SIGN,
         id_prof_co_sign_in => l_rec.ID_PROF_CO_SIGN,
         dt_co_sign_in => l_rec.DT_CO_SIGN,
         id_order_type_in => l_rec.ID_ORDER_TYPE,
         id_prof_rate_change_in => l_rec.ID_PROF_RATE_CHANGE,
         dt_end_bottle_in => l_rec.DT_END_BOTTLE,
         id_prof_edit_disc_in => l_rec.ID_PROF_EDIT_DISC,
         dt_edit_discontinue_in => l_rec.DT_EDIT_DISCONTINUE,
         justify_descr_in => l_rec.JUSTIFY_DESCR,
         flg_totally_adm_in => l_rec.FLG_TOTALLY_ADM,
         flg_type_date_in => l_rec.FLG_TYPE_DATE,
         id_vacc_funding_source_in => l_rec.ID_VACC_FUNDING_SOURCE,
         id_vacc_doc_vis_in => l_rec.ID_VACC_DOC_VIS,
         id_vacc_origin_in => l_rec.ID_VACC_ORIGIN,
         administred_desc_in => l_rec.ADMINISTRED_DESC,
         ordered_desc_in => l_rec.ORDERED_DESC,
         origin_desc_in => l_rec.ORIGIN_DESC,
         id_ordered_in => l_rec.ID_ORDERED,
         id_administred_in => l_rec.ID_ADMINISTRED,
         id_vacc_funding_cat_in => l_rec.ID_VACC_FUNDING_CAT,
         id_vacc_adv_reaction_in => l_rec.ID_VACC_ADV_REACTION,
         application_spot_code_in => l_rec.APPLICATION_SPOT_CODE,
         vacc_route_data_in => l_rec.VACC_ROUTE_DATA,
         dt_doc_delivery_tstz_in => l_rec.DT_DOC_DELIVERY_TSTZ,
         doc_vis_desc_in => l_rec.DOC_VIS_DESC,
         funding_source_desc_in => l_rec.FUNDING_SOURCE_DESC
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN DRUG_PRESC_PLAN%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE

   IS
     retval DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_DRUG_PRESC_PLAN.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        PK_ALERT_EXCEPTIONS.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_DRUG_PRESC_PLAN')
           );
   END next_key;

   PROCEDURE ins (
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT null,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT null,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT null,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT 'N',
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL
,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
      id_drug_presc_plan_out IN OUT DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE := next_key;
   BEGIN
      ins (
         id_drug_presc_plan_in => l_pky,
         id_drug_presc_det_in => id_drug_presc_det_in,
         id_drug_take_time_in => id_drug_take_time_in,
         id_prof_writes_in => id_prof_writes_in,
         dosage_in => dosage_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_in => id_episode_in,
         rate_in => rate_in,
         dosage_exec_in => dosage_exec_in,
         flg_advers_react_in => flg_advers_react_in,
         notes_advers_react_in => notes_advers_react_in,
         application_spot_in => application_spot_in,
         lot_number_in => lot_number_in,
         dt_expiration_in => dt_expiration_in,
         id_vacc_med_ext_in => id_vacc_med_ext_in,
         dt_plan_tstz_in => dt_plan_tstz_in,
         dt_take_tstz_in => dt_take_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         origin_in => origin_in,
         dt_next_take_in => dt_next_take_in,
         id_prof_adm_in => id_prof_adm_in,
         dt_adm_tstz_in => dt_adm_tstz_in,
         dosage_unit_measure_in => dosage_unit_measure_in,
         id_freetext_in => id_freetext_in,
         flg_dosage_check_in => flg_dosage_check_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         dosage_change_justify_in => dosage_change_justify_in,
         rate_unit_measure_in => rate_unit_measure_in,
         id_prof_witness_in => id_prof_witness_in,
         id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
         reference_value_in => reference_value_in,
         id_unit_reference_value_in => id_unit_reference_value_in,
         barcode_in => barcode_in,
         summary_in => summary_in,
         reason_in => reason_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_reason_descr_in => cancel_reason_descr_in,
         dt_value_drip_change_in => dt_value_drip_change_in,
         flg_co_sign_in => flg_co_sign_in,
         id_prof_co_sign_in => id_prof_co_sign_in,
         dt_co_sign_in => dt_co_sign_in,
         id_order_type_in => id_order_type_in,
         id_prof_rate_change_in => id_prof_rate_change_in,
         dt_end_bottle_in => dt_end_bottle_in,
         id_prof_edit_disc_in => id_prof_edit_disc_in,
         dt_edit_discontinue_in => dt_edit_discontinue_in,
         justify_descr_in => justify_descr_in,
         flg_totally_adm_in => flg_totally_adm_in,
         flg_type_date_in => flg_type_date_in,
         id_vacc_funding_source_in => id_vacc_funding_source_in,
         id_vacc_doc_vis_in => id_vacc_doc_vis_in,
         id_vacc_origin_in => id_vacc_origin_in,
         administred_desc_in => administred_desc_in,
         ordered_desc_in => ordered_desc_in,
         origin_desc_in => origin_desc_in,
         id_ordered_in => id_ordered_in,
         id_administred_in => id_administred_in,
         id_vacc_funding_cat_in => id_vacc_funding_cat_in,
         id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
         application_spot_code_in => application_spot_code_in,
         vacc_route_data_in => vacc_route_data_in,
         dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
         doc_vis_desc_in => doc_vis_desc_in,
         funding_source_desc_in => funding_source_desc_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_drug_presc_plan_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT null,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT null,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT null,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT 'N',
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL
,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
      id_drug_presc_plan_out IN OUT DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_drug_presc_det_in => id_drug_presc_det_in,
      id_drug_take_time_in => id_drug_take_time_in,
      id_prof_writes_in => id_prof_writes_in,
      dosage_in => dosage_in,
      flg_status_in => flg_status_in,
      notes_in => notes_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      id_episode_in => id_episode_in,
      rate_in => rate_in,
      dosage_exec_in => dosage_exec_in,
      flg_advers_react_in => flg_advers_react_in,
      notes_advers_react_in => notes_advers_react_in,
      application_spot_in => application_spot_in,
      lot_number_in => lot_number_in,
      dt_expiration_in => dt_expiration_in,
      id_vacc_med_ext_in => id_vacc_med_ext_in,
      dt_plan_tstz_in => dt_plan_tstz_in,
      dt_take_tstz_in => dt_take_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      origin_in => origin_in,
      dt_next_take_in => dt_next_take_in,
      id_prof_adm_in => id_prof_adm_in,
      dt_adm_tstz_in => dt_adm_tstz_in,
      dosage_unit_measure_in => dosage_unit_measure_in,
      id_freetext_in => id_freetext_in,
      flg_dosage_check_in => flg_dosage_check_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      dosage_change_justify_in => dosage_change_justify_in,
      rate_unit_measure_in => rate_unit_measure_in,
      id_prof_witness_in => id_prof_witness_in,
      id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
      reference_value_in => reference_value_in,
      id_unit_reference_value_in => id_unit_reference_value_in,
      barcode_in => barcode_in,
      summary_in => summary_in,
      reason_in => reason_in,
      id_cancel_reason_in => id_cancel_reason_in,
      cancel_reason_descr_in => cancel_reason_descr_in,
      dt_value_drip_change_in => dt_value_drip_change_in,
      flg_co_sign_in => flg_co_sign_in,
      id_prof_co_sign_in => id_prof_co_sign_in,
      dt_co_sign_in => dt_co_sign_in,
      id_order_type_in => id_order_type_in,
      id_prof_rate_change_in => id_prof_rate_change_in,
      dt_end_bottle_in => dt_end_bottle_in,
      id_prof_edit_disc_in => id_prof_edit_disc_in,
      dt_edit_discontinue_in => dt_edit_discontinue_in,
      justify_descr_in => justify_descr_in,
      flg_totally_adm_in => flg_totally_adm_in,
      flg_type_date_in => flg_type_date_in,
      id_vacc_funding_source_in => id_vacc_funding_source_in,
      id_vacc_doc_vis_in => id_vacc_doc_vis_in,
      id_vacc_origin_in => id_vacc_origin_in,
      administred_desc_in => administred_desc_in,
      ordered_desc_in => ordered_desc_in,
      origin_desc_in => origin_desc_in,
      id_ordered_in => id_ordered_in,
      id_administred_in => id_administred_in,
      id_vacc_funding_cat_in => id_vacc_funding_cat_in,
      id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
      application_spot_code_in => application_spot_code_in,
      vacc_route_data_in => vacc_route_data_in,
      dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
      doc_vis_desc_in => doc_vis_desc_in,
      funding_source_desc_in => funding_source_desc_in,
      id_drug_presc_plan_out => id_drug_presc_plan_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT null,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT null,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT null,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT 'N',
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL
,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE
   IS
        l_pky DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE := next_key;
   BEGIN
      ins (
         id_drug_presc_plan_in => l_pky,
         id_drug_presc_det_in => id_drug_presc_det_in,
         id_drug_take_time_in => id_drug_take_time_in,
         id_prof_writes_in => id_prof_writes_in,
         dosage_in => dosage_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_in => id_episode_in,
         rate_in => rate_in,
         dosage_exec_in => dosage_exec_in,
         flg_advers_react_in => flg_advers_react_in,
         notes_advers_react_in => notes_advers_react_in,
         application_spot_in => application_spot_in,
         lot_number_in => lot_number_in,
         dt_expiration_in => dt_expiration_in,
         id_vacc_med_ext_in => id_vacc_med_ext_in,
         dt_plan_tstz_in => dt_plan_tstz_in,
         dt_take_tstz_in => dt_take_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         origin_in => origin_in,
         dt_next_take_in => dt_next_take_in,
         id_prof_adm_in => id_prof_adm_in,
         dt_adm_tstz_in => dt_adm_tstz_in,
         dosage_unit_measure_in => dosage_unit_measure_in,
         id_freetext_in => id_freetext_in,
         flg_dosage_check_in => flg_dosage_check_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         dosage_change_justify_in => dosage_change_justify_in,
         rate_unit_measure_in => rate_unit_measure_in,
         id_prof_witness_in => id_prof_witness_in,
         id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
         reference_value_in => reference_value_in,
         id_unit_reference_value_in => id_unit_reference_value_in,
         barcode_in => barcode_in,
         summary_in => summary_in,
         reason_in => reason_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_reason_descr_in => cancel_reason_descr_in,
         dt_value_drip_change_in => dt_value_drip_change_in,
         flg_co_sign_in => flg_co_sign_in,
         id_prof_co_sign_in => id_prof_co_sign_in,
         dt_co_sign_in => dt_co_sign_in,
         id_order_type_in => id_order_type_in,
         id_prof_rate_change_in => id_prof_rate_change_in,
         dt_end_bottle_in => dt_end_bottle_in,
         id_prof_edit_disc_in => id_prof_edit_disc_in,
         dt_edit_discontinue_in => dt_edit_discontinue_in,
         justify_descr_in => justify_descr_in,
         flg_totally_adm_in => flg_totally_adm_in,
         flg_type_date_in => flg_type_date_in,
         id_vacc_funding_source_in => id_vacc_funding_source_in,
         id_vacc_doc_vis_in => id_vacc_doc_vis_in,
         id_vacc_origin_in => id_vacc_origin_in,
         administred_desc_in => administred_desc_in,
         ordered_desc_in => ordered_desc_in,
         origin_desc_in => origin_desc_in,
         id_ordered_in => id_ordered_in,
         id_administred_in => id_administred_in,
         id_vacc_funding_cat_in => id_vacc_funding_cat_in,
         id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
         application_spot_code_in => application_spot_code_in,
         vacc_route_data_in => vacc_route_data_in,
         dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
         doc_vis_desc_in => doc_vis_desc_in,
         funding_source_desc_in => funding_source_desc_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT null,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT null,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT null,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT 'N',
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL
,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE
   IS
        l_pky DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_drug_presc_plan_in => l_pky,
         id_drug_presc_det_in => id_drug_presc_det_in,
         id_drug_take_time_in => id_drug_take_time_in,
         id_prof_writes_in => id_prof_writes_in,
         dosage_in => dosage_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_in => id_episode_in,
         rate_in => rate_in,
         dosage_exec_in => dosage_exec_in,
         flg_advers_react_in => flg_advers_react_in,
         notes_advers_react_in => notes_advers_react_in,
         application_spot_in => application_spot_in,
         lot_number_in => lot_number_in,
         dt_expiration_in => dt_expiration_in,
         id_vacc_med_ext_in => id_vacc_med_ext_in,
         dt_plan_tstz_in => dt_plan_tstz_in,
         dt_take_tstz_in => dt_take_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         origin_in => origin_in,
         dt_next_take_in => dt_next_take_in,
         id_prof_adm_in => id_prof_adm_in,
         dt_adm_tstz_in => dt_adm_tstz_in,
         dosage_unit_measure_in => dosage_unit_measure_in,
         id_freetext_in => id_freetext_in,
         flg_dosage_check_in => flg_dosage_check_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         dosage_change_justify_in => dosage_change_justify_in,
         rate_unit_measure_in => rate_unit_measure_in,
         id_prof_witness_in => id_prof_witness_in,
         id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
         reference_value_in => reference_value_in,
         id_unit_reference_value_in => id_unit_reference_value_in,
         barcode_in => barcode_in,
         summary_in => summary_in,
         reason_in => reason_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_reason_descr_in => cancel_reason_descr_in,
         dt_value_drip_change_in => dt_value_drip_change_in,
         flg_co_sign_in => flg_co_sign_in,
         id_prof_co_sign_in => id_prof_co_sign_in,
         dt_co_sign_in => dt_co_sign_in,
         id_order_type_in => id_order_type_in,
         id_prof_rate_change_in => id_prof_rate_change_in,
         dt_end_bottle_in => dt_end_bottle_in,
         id_prof_edit_disc_in => id_prof_edit_disc_in,
         dt_edit_discontinue_in => dt_edit_discontinue_in,
         justify_descr_in => justify_descr_in,
         flg_totally_adm_in => flg_totally_adm_in,
         flg_type_date_in => flg_type_date_in,
         id_vacc_funding_source_in => id_vacc_funding_source_in,
         id_vacc_doc_vis_in => id_vacc_doc_vis_in,
         id_vacc_origin_in => id_vacc_origin_in,
         administred_desc_in => administred_desc_in,
         ordered_desc_in => ordered_desc_in,
         origin_desc_in => origin_desc_in,
         id_ordered_in => id_ordered_in,
         id_administred_in => id_administred_in,
         id_vacc_funding_cat_in => id_vacc_funding_cat_in,
         id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
         application_spot_code_in => application_spot_code_in,
         vacc_route_data_in => vacc_route_data_in,
         dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
         doc_vis_desc_in => doc_vis_desc_in,
         funding_source_desc_in => funding_source_desc_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT null,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT null,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT null,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT 'N',
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL
,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE := next_key;
   BEGIN
      ins (
         id_drug_presc_plan_in => l_pky,
         id_drug_presc_det_in => id_drug_presc_det_in,
         id_drug_take_time_in => id_drug_take_time_in,
         id_prof_writes_in => id_prof_writes_in,
         dosage_in => dosage_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_in => id_episode_in,
         rate_in => rate_in,
         dosage_exec_in => dosage_exec_in,
         flg_advers_react_in => flg_advers_react_in,
         notes_advers_react_in => notes_advers_react_in,
         application_spot_in => application_spot_in,
         lot_number_in => lot_number_in,
         dt_expiration_in => dt_expiration_in,
         id_vacc_med_ext_in => id_vacc_med_ext_in,
         dt_plan_tstz_in => dt_plan_tstz_in,
         dt_take_tstz_in => dt_take_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         origin_in => origin_in,
         dt_next_take_in => dt_next_take_in,
         id_prof_adm_in => id_prof_adm_in,
         dt_adm_tstz_in => dt_adm_tstz_in,
         dosage_unit_measure_in => dosage_unit_measure_in,
         id_freetext_in => id_freetext_in,
         flg_dosage_check_in => flg_dosage_check_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         dosage_change_justify_in => dosage_change_justify_in,
         rate_unit_measure_in => rate_unit_measure_in,
         id_prof_witness_in => id_prof_witness_in,
         id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
         reference_value_in => reference_value_in,
         id_unit_reference_value_in => id_unit_reference_value_in,
         barcode_in => barcode_in,
         summary_in => summary_in,
         reason_in => reason_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_reason_descr_in => cancel_reason_descr_in,
         dt_value_drip_change_in => dt_value_drip_change_in,
         flg_co_sign_in => flg_co_sign_in,
         id_prof_co_sign_in => id_prof_co_sign_in,
         dt_co_sign_in => dt_co_sign_in,
         id_order_type_in => id_order_type_in,
         id_prof_rate_change_in => id_prof_rate_change_in,
         dt_end_bottle_in => dt_end_bottle_in,
         id_prof_edit_disc_in => id_prof_edit_disc_in,
         dt_edit_discontinue_in => dt_edit_discontinue_in,
         justify_descr_in => justify_descr_in,
         flg_totally_adm_in => flg_totally_adm_in,
         flg_type_date_in => flg_type_date_in,
         id_vacc_funding_source_in => id_vacc_funding_source_in,
         id_vacc_doc_vis_in => id_vacc_doc_vis_in,
         id_vacc_origin_in => id_vacc_origin_in,
         administred_desc_in => administred_desc_in,
         ordered_desc_in => ordered_desc_in,
         origin_desc_in => origin_desc_in,
         id_ordered_in => id_ordered_in,
         id_administred_in => id_administred_in,
         id_vacc_funding_cat_in => id_vacc_funding_cat_in,
         id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
         application_spot_code_in => application_spot_code_in,
         vacc_route_data_in => vacc_route_data_in,
         dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
         doc_vis_desc_in => doc_vis_desc_in,
         funding_source_desc_in => funding_source_desc_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT null,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT null,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT null,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT 'N',
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL
,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_drug_presc_plan_in => l_pky,
         id_drug_presc_det_in => id_drug_presc_det_in,
         id_drug_take_time_in => id_drug_take_time_in,
         id_prof_writes_in => id_prof_writes_in,
         dosage_in => dosage_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_in => id_episode_in,
         rate_in => rate_in,
         dosage_exec_in => dosage_exec_in,
         flg_advers_react_in => flg_advers_react_in,
         notes_advers_react_in => notes_advers_react_in,
         application_spot_in => application_spot_in,
         lot_number_in => lot_number_in,
         dt_expiration_in => dt_expiration_in,
         id_vacc_med_ext_in => id_vacc_med_ext_in,
         dt_plan_tstz_in => dt_plan_tstz_in,
         dt_take_tstz_in => dt_take_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         origin_in => origin_in,
         dt_next_take_in => dt_next_take_in,
         id_prof_adm_in => id_prof_adm_in,
         dt_adm_tstz_in => dt_adm_tstz_in,
         dosage_unit_measure_in => dosage_unit_measure_in,
         id_freetext_in => id_freetext_in,
         flg_dosage_check_in => flg_dosage_check_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         dosage_change_justify_in => dosage_change_justify_in,
         rate_unit_measure_in => rate_unit_measure_in,
         id_prof_witness_in => id_prof_witness_in,
         id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
         reference_value_in => reference_value_in,
         id_unit_reference_value_in => id_unit_reference_value_in,
         barcode_in => barcode_in,
         summary_in => summary_in,
         reason_in => reason_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_reason_descr_in => cancel_reason_descr_in,
         dt_value_drip_change_in => dt_value_drip_change_in,
         flg_co_sign_in => flg_co_sign_in,
         id_prof_co_sign_in => id_prof_co_sign_in,
         dt_co_sign_in => dt_co_sign_in,
         id_order_type_in => id_order_type_in,
         id_prof_rate_change_in => id_prof_rate_change_in,
         dt_end_bottle_in => dt_end_bottle_in,
         id_prof_edit_disc_in => id_prof_edit_disc_in,
         dt_edit_discontinue_in => dt_edit_discontinue_in,
         justify_descr_in => justify_descr_in,
         flg_totally_adm_in => flg_totally_adm_in,
         flg_type_date_in => flg_type_date_in,
         id_vacc_funding_source_in => id_vacc_funding_source_in,
         id_vacc_doc_vis_in => id_vacc_doc_vis_in,
         id_vacc_origin_in => id_vacc_origin_in,
         administred_desc_in => administred_desc_in,
         ordered_desc_in => ordered_desc_in,
         origin_desc_in => origin_desc_in,
         id_ordered_in => id_ordered_in,
         id_administred_in => id_administred_in,
         id_vacc_funding_cat_in => id_vacc_funding_cat_in,
         id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
         application_spot_code_in => application_spot_code_in,
         vacc_route_data_in => vacc_route_data_in,
         dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
         doc_vis_desc_in => doc_vis_desc_in,
         funding_source_desc_in => funding_source_desc_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN DRUG_PRESC_PLAN_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
       FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO DRUG_PRESC_PLAN (
               ID_DRUG_PRESC_PLAN,
               ID_DRUG_PRESC_DET,
               ID_DRUG_TAKE_TIME,
               ID_PROF_WRITES,
               DOSAGE,
               FLG_STATUS,
               NOTES,
               ID_PROF_CANCEL,
               NOTES_CANCEL,
               ID_EPISODE,
               RATE,
               DOSAGE_EXEC,
               FLG_ADVERS_REACT,
               NOTES_ADVERS_REACT,
               APPLICATION_SPOT,
               LOT_NUMBER,
               DT_EXPIRATION,
               ID_VACC_MED_EXT,
               DT_PLAN_TSTZ,
               DT_TAKE_TSTZ,
               DT_CANCEL_TSTZ,
               ORIGIN,
               DT_NEXT_TAKE,
               ID_PROF_ADM,
               DT_ADM_TSTZ,
               DOSAGE_UNIT_MEASURE,
               ID_FREETEXT,
               FLG_DOSAGE_CHECK,
               CREATE_USER,
               CREATE_TIME,
               CREATE_INSTITUTION,
               UPDATE_USER,
               UPDATE_TIME,
               UPDATE_INSTITUTION,
               DOSAGE_CHANGE_JUSTIFY,
               RATE_UNIT_MEASURE,
               ID_PROF_WITNESS,
               ID_PRESC_DIR_DOSEFREQ,
               REFERENCE_VALUE,
               ID_UNIT_REFERENCE_VALUE,
               BARCODE,
               SUMMARY,
               REASON,
               ID_CANCEL_REASON,
               CANCEL_REASON_DESCR,
               DT_VALUE_DRIP_CHANGE,
               FLG_CO_SIGN,
               ID_PROF_CO_SIGN,
               DT_CO_SIGN,
               ID_ORDER_TYPE,
               ID_PROF_RATE_CHANGE,
               DT_END_BOTTLE,
               ID_PROF_EDIT_DISC,
               DT_EDIT_DISCONTINUE,
               JUSTIFY_DESCR,
               FLG_TOTALLY_ADM,
               FLG_TYPE_DATE,
               ID_VACC_FUNDING_SOURCE,
               ID_VACC_DOC_VIS,
               ID_VACC_ORIGIN,
               ADMINISTRED_DESC,
               ORDERED_DESC,
               ORIGIN_DESC,
               ID_ORDERED,
               ID_ADMINISTRED,
               ID_VACC_FUNDING_CAT,
               ID_VACC_ADV_REACTION,
               APPLICATION_SPOT_CODE,
               VACC_ROUTE_DATA,
               DT_DOC_DELIVERY_TSTZ,
               DOC_VIS_DESC,
               FUNDING_SOURCE_DESC
               )
            VALUES (
               rows_in(indx).ID_DRUG_PRESC_PLAN,
               rows_in(indx).ID_DRUG_PRESC_DET,
               rows_in(indx).ID_DRUG_TAKE_TIME,
               rows_in(indx).ID_PROF_WRITES,
               rows_in(indx).DOSAGE,
               rows_in(indx).FLG_STATUS,
               rows_in(indx).NOTES,
               rows_in(indx).ID_PROF_CANCEL,
               rows_in(indx).NOTES_CANCEL,
               rows_in(indx).ID_EPISODE,
               rows_in(indx).RATE,
               rows_in(indx).DOSAGE_EXEC,
               rows_in(indx).FLG_ADVERS_REACT,
               rows_in(indx).NOTES_ADVERS_REACT,
               rows_in(indx).APPLICATION_SPOT,
               rows_in(indx).LOT_NUMBER,
               rows_in(indx).DT_EXPIRATION,
               rows_in(indx).ID_VACC_MED_EXT,
               rows_in(indx).DT_PLAN_TSTZ,
               rows_in(indx).DT_TAKE_TSTZ,
               rows_in(indx).DT_CANCEL_TSTZ,
               rows_in(indx).ORIGIN,
               rows_in(indx).DT_NEXT_TAKE,
               rows_in(indx).ID_PROF_ADM,
               rows_in(indx).DT_ADM_TSTZ,
               rows_in(indx).DOSAGE_UNIT_MEASURE,
               rows_in(indx).ID_FREETEXT,
               rows_in(indx).FLG_DOSAGE_CHECK,
               rows_in(indx).CREATE_USER,
               rows_in(indx).CREATE_TIME,
               rows_in(indx).CREATE_INSTITUTION,
               rows_in(indx).UPDATE_USER,
               rows_in(indx).UPDATE_TIME,
               rows_in(indx).UPDATE_INSTITUTION,
               rows_in(indx).DOSAGE_CHANGE_JUSTIFY,
               rows_in(indx).RATE_UNIT_MEASURE,
               rows_in(indx).ID_PROF_WITNESS,
               rows_in(indx).ID_PRESC_DIR_DOSEFREQ,
               rows_in(indx).REFERENCE_VALUE,
               rows_in(indx).ID_UNIT_REFERENCE_VALUE,
               rows_in(indx).BARCODE,
               rows_in(indx).SUMMARY,
               rows_in(indx).REASON,
               rows_in(indx).ID_CANCEL_REASON,
               rows_in(indx).CANCEL_REASON_DESCR,
               rows_in(indx).DT_VALUE_DRIP_CHANGE,
               rows_in(indx).FLG_CO_SIGN,
               rows_in(indx).ID_PROF_CO_SIGN,
               rows_in(indx).DT_CO_SIGN,
               rows_in(indx).ID_ORDER_TYPE,
               rows_in(indx).ID_PROF_RATE_CHANGE,
               rows_in(indx).DT_END_BOTTLE,
               rows_in(indx).ID_PROF_EDIT_DISC,
               rows_in(indx).DT_EDIT_DISCONTINUE,
               rows_in(indx).JUSTIFY_DESCR,
               rows_in(indx).FLG_TOTALLY_ADM,
               rows_in(indx).FLG_TYPE_DATE,
               rows_in(indx).ID_VACC_FUNDING_SOURCE,
               rows_in(indx).ID_VACC_DOC_VIS,
               rows_in(indx).ID_VACC_ORIGIN,
               rows_in(indx).ADMINISTRED_DESC,
               rows_in(indx).ORDERED_DESC,
               rows_in(indx).ORIGIN_DESC,
               rows_in(indx).ID_ORDERED,
               rows_in(indx).ID_ADMINISTRED,
               rows_in(indx).ID_VACC_FUNDING_CAT,
               rows_in(indx).ID_VACC_ADV_REACTION,
               rows_in(indx).APPLICATION_SPOT_CODE,
               rows_in(indx).VACC_ROUTE_DATA,
               rows_in(indx).DT_DOC_DELIVERY_TSTZ,
               rows_in(indx).DOC_VIS_DESC,
               rows_in(indx).FUNDING_SOURCE_DESC
               ) RETURNING ROWID BULK COLLECT INTO rows_out;

      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                PK_ALERT_EXCEPTIONS.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQLERRM (-SQL%BULK_EXCEPTIONS (indx).ERROR_CODE)
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_DRUG_PRESC_PLAN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_DRUG_PRESC_PLAN
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_DRUG_PRESC_DET _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_DRUG_PRESC_DET
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_DRUG_TAKE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_DRUG_TAKE_TIME
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_WRITES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_WRITES
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DOSAGE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DOSAGE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_STATUS
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NOTES
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_CANCEL
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NOTES_CANCEL
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_EPISODE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'RATE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).RATE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DOSAGE_EXEC _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DOSAGE_EXEC
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_ADVERS_REACT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_ADVERS_REACT
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_ADVERS_REACT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NOTES_ADVERS_REACT
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'APPLICATION_SPOT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).APPLICATION_SPOT
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'LOT_NUMBER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).LOT_NUMBER
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_EXPIRATION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_EXPIRATION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VACC_MED_EXT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_VACC_MED_EXT
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_PLAN_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_PLAN_TSTZ
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_TAKE_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_TAKE_TSTZ
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CANCEL_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_CANCEL_TSTZ
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ORIGIN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ORIGIN
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_NEXT_TAKE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_NEXT_TAKE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_ADM _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_ADM
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_ADM_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_ADM_TSTZ
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DOSAGE_UNIT_MEASURE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DOSAGE_UNIT_MEASURE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_FREETEXT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_FREETEXT
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_DOSAGE_CHECK _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_DOSAGE_CHECK
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DOSAGE_CHANGE_JUSTIFY _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DOSAGE_CHANGE_JUSTIFY
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'RATE_UNIT_MEASURE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).RATE_UNIT_MEASURE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_WITNESS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_WITNESS
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PRESC_DIR_DOSEFREQ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PRESC_DIR_DOSEFREQ
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'REFERENCE_VALUE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).REFERENCE_VALUE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_UNIT_REFERENCE_VALUE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_UNIT_REFERENCE_VALUE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BARCODE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).BARCODE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'SUMMARY _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).SUMMARY
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'REASON _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).REASON
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CANCEL_REASON _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CANCEL_REASON
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CANCEL_REASON_DESCR _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CANCEL_REASON_DESCR
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_VALUE_DRIP_CHANGE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_VALUE_DRIP_CHANGE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_CO_SIGN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_CO_SIGN
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CO_SIGN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_CO_SIGN
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CO_SIGN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_CO_SIGN
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_ORDER_TYPE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_ORDER_TYPE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_RATE_CHANGE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_RATE_CHANGE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_END_BOTTLE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_END_BOTTLE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_EDIT_DISC _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_EDIT_DISC
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_EDIT_DISCONTINUE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_EDIT_DISCONTINUE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'JUSTIFY_DESCR _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).JUSTIFY_DESCR
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_TOTALLY_ADM _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_TOTALLY_ADM
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_TYPE_DATE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_TYPE_DATE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VACC_FUNDING_SOURCE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_VACC_FUNDING_SOURCE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VACC_DOC_VIS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_VACC_DOC_VIS
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VACC_ORIGIN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_VACC_ORIGIN
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ADMINISTRED_DESC _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ADMINISTRED_DESC
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ORDERED_DESC _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ORDERED_DESC
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ORIGIN_DESC _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ORIGIN_DESC
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_ORDERED _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_ORDERED
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_ADMINISTRED _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_ADMINISTRED
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VACC_FUNDING_CAT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_VACC_FUNDING_CAT
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VACC_ADV_REACTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_VACC_ADV_REACTION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'APPLICATION_SPOT_CODE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).APPLICATION_SPOT_CODE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'VACC_ROUTE_DATA _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).VACC_ROUTE_DATA
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_DOC_DELIVERY_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_DOC_DELIVERY_TSTZ
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DOC_VIS_DESC _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DOC_VIS_DESC
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FUNDING_SOURCE_DESC _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FUNDING_SOURCE_DESC
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       PK_ALERT_EXCEPTIONS.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'DRUG_PRESC_PLAN'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN DRUG_PRESC_PLAN_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_drug_presc_plan_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE,
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      ID_DRUG_PRESC_DET_nin IN BOOLEAN := TRUE,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      ID_DRUG_TAKE_TIME_nin IN BOOLEAN := TRUE,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      ID_PROF_WRITES_nin IN BOOLEAN := TRUE,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      DOSAGE_nin IN BOOLEAN := TRUE,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      RATE_nin IN BOOLEAN := TRUE,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      DOSAGE_EXEC_nin IN BOOLEAN := TRUE,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      FLG_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      NOTES_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      APPLICATION_SPOT_nin IN BOOLEAN := TRUE,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      LOT_NUMBER_nin IN BOOLEAN := TRUE,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      DT_EXPIRATION_nin IN BOOLEAN := TRUE,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      ID_VACC_MED_EXT_nin IN BOOLEAN := TRUE,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      DT_PLAN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      DT_TAKE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      ORIGIN_nin IN BOOLEAN := TRUE,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      DT_NEXT_TAKE_nin IN BOOLEAN := TRUE,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      ID_PROF_ADM_nin IN BOOLEAN := TRUE,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      DT_ADM_TSTZ_nin IN BOOLEAN := TRUE,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      DOSAGE_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT NULL,
      ID_FREETEXT_nin IN BOOLEAN := TRUE,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      FLG_DOSAGE_CHECK_nin IN BOOLEAN := TRUE,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      DOSAGE_CHANGE_JUSTIFY_nin IN BOOLEAN := TRUE,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      RATE_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      ID_PROF_WITNESS_nin IN BOOLEAN := TRUE,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      ID_PRESC_DIR_DOSEFREQ_nin IN BOOLEAN := TRUE,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT NULL,
      REFERENCE_VALUE_nin IN BOOLEAN := TRUE,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT NULL,
      ID_UNIT_REFERENCE_VALUE_nin IN BOOLEAN := TRUE,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      BARCODE_nin IN BOOLEAN := TRUE,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      SUMMARY_nin IN BOOLEAN := TRUE,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      REASON_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      CANCEL_REASON_DESCR_nin IN BOOLEAN := TRUE,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      DT_VALUE_DRIP_CHANGE_nin IN BOOLEAN := TRUE,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT NULL,
      FLG_CO_SIGN_nin IN BOOLEAN := TRUE,
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      ID_PROF_CO_SIGN_nin IN BOOLEAN := TRUE,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      DT_CO_SIGN_nin IN BOOLEAN := TRUE,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      ID_ORDER_TYPE_nin IN BOOLEAN := TRUE,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      ID_PROF_RATE_CHANGE_nin IN BOOLEAN := TRUE,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      DT_END_BOTTLE_nin IN BOOLEAN := TRUE,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      ID_PROF_EDIT_DISC_nin IN BOOLEAN := TRUE,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      DT_EDIT_DISCONTINUE_nin IN BOOLEAN := TRUE,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      JUSTIFY_DESCR_nin IN BOOLEAN := TRUE,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL,
      FLG_TOTALLY_ADM_nin IN BOOLEAN := TRUE,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      FLG_TYPE_DATE_nin IN BOOLEAN := TRUE,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_SOURCE_nin IN BOOLEAN := TRUE,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      ID_VACC_DOC_VIS_nin IN BOOLEAN := TRUE,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      ID_VACC_ORIGIN_nin IN BOOLEAN := TRUE,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ADMINISTRED_DESC_nin IN BOOLEAN := TRUE,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      ORDERED_DESC_nin IN BOOLEAN := TRUE,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      ORIGIN_DESC_nin IN BOOLEAN := TRUE,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      ID_ORDERED_nin IN BOOLEAN := TRUE,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      ID_ADMINISTRED_nin IN BOOLEAN := TRUE,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_CAT_nin IN BOOLEAN := TRUE,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      ID_VACC_ADV_REACTION_nin IN BOOLEAN := TRUE,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      APPLICATION_SPOT_CODE_nin IN BOOLEAN := TRUE,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      VACC_ROUTE_DATA_nin IN BOOLEAN := TRUE,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      DT_DOC_DELIVERY_TSTZ_nin IN BOOLEAN := TRUE,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      DOC_VIS_DESC_nin IN BOOLEAN := TRUE,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
      FUNDING_SOURCE_DESC_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_DRUG_PRESC_DET_n NUMBER(1);
   l_ID_DRUG_TAKE_TIME_n NUMBER(1);
   l_ID_PROF_WRITES_n NUMBER(1);
   l_DOSAGE_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_RATE_n NUMBER(1);
   l_DOSAGE_EXEC_n NUMBER(1);
   l_FLG_ADVERS_REACT_n NUMBER(1);
   l_NOTES_ADVERS_REACT_n NUMBER(1);
   l_APPLICATION_SPOT_n NUMBER(1);
   l_LOT_NUMBER_n NUMBER(1);
   l_DT_EXPIRATION_n NUMBER(1);
   l_ID_VACC_MED_EXT_n NUMBER(1);
   l_DT_PLAN_TSTZ_n NUMBER(1);
   l_DT_TAKE_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_ORIGIN_n NUMBER(1);
   l_DT_NEXT_TAKE_n NUMBER(1);
   l_ID_PROF_ADM_n NUMBER(1);
   l_DT_ADM_TSTZ_n NUMBER(1);
   l_DOSAGE_UNIT_MEASURE_n NUMBER(1);
   l_ID_FREETEXT_n NUMBER(1);
   l_FLG_DOSAGE_CHECK_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_DOSAGE_CHANGE_JUSTIFY_n NUMBER(1);
   l_RATE_UNIT_MEASURE_n NUMBER(1);
   l_ID_PROF_WITNESS_n NUMBER(1);
   l_ID_PRESC_DIR_DOSEFREQ_n NUMBER(1);
   l_REFERENCE_VALUE_n NUMBER(1);
   l_ID_UNIT_REFERENCE_VALUE_n NUMBER(1);
   l_BARCODE_n NUMBER(1);
   l_SUMMARY_n NUMBER(1);
   l_REASON_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_CANCEL_REASON_DESCR_n NUMBER(1);
   l_DT_VALUE_DRIP_CHANGE_n NUMBER(1);
   l_FLG_CO_SIGN_n NUMBER(1);
   l_ID_PROF_CO_SIGN_n NUMBER(1);
   l_DT_CO_SIGN_n NUMBER(1);
   l_ID_ORDER_TYPE_n NUMBER(1);
   l_ID_PROF_RATE_CHANGE_n NUMBER(1);
   l_DT_END_BOTTLE_n NUMBER(1);
   l_ID_PROF_EDIT_DISC_n NUMBER(1);
   l_DT_EDIT_DISCONTINUE_n NUMBER(1);
   l_JUSTIFY_DESCR_n NUMBER(1);
   l_FLG_TOTALLY_ADM_n NUMBER(1);
   l_FLG_TYPE_DATE_n NUMBER(1);
   l_ID_VACC_FUNDING_SOURCE_n NUMBER(1);
   l_ID_VACC_DOC_VIS_n NUMBER(1);
   l_ID_VACC_ORIGIN_n NUMBER(1);
   l_ADMINISTRED_DESC_n NUMBER(1);
   l_ORDERED_DESC_n NUMBER(1);
   l_ORIGIN_DESC_n NUMBER(1);
   l_ID_ORDERED_n NUMBER(1);
   l_ID_ADMINISTRED_n NUMBER(1);
   l_ID_VACC_FUNDING_CAT_n NUMBER(1);
   l_ID_VACC_ADV_REACTION_n NUMBER(1);
   l_APPLICATION_SPOT_CODE_n NUMBER(1);
   l_VACC_ROUTE_DATA_n NUMBER(1);
   l_DT_DOC_DELIVERY_TSTZ_n NUMBER(1);
   l_DOC_VIS_DESC_n NUMBER(1);
   l_FUNDING_SOURCE_DESC_n NUMBER(1);
   BEGIN

   l_ID_DRUG_PRESC_DET_n := sys.diutil.bool_to_int(ID_DRUG_PRESC_DET_nin);
   l_ID_DRUG_TAKE_TIME_n := sys.diutil.bool_to_int(ID_DRUG_TAKE_TIME_nin);
   l_ID_PROF_WRITES_n := sys.diutil.bool_to_int(ID_PROF_WRITES_nin);
   l_DOSAGE_n := sys.diutil.bool_to_int(DOSAGE_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
   l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
   l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
   l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
   l_RATE_n := sys.diutil.bool_to_int(RATE_nin);
   l_DOSAGE_EXEC_n := sys.diutil.bool_to_int(DOSAGE_EXEC_nin);
   l_FLG_ADVERS_REACT_n := sys.diutil.bool_to_int(FLG_ADVERS_REACT_nin);
   l_NOTES_ADVERS_REACT_n := sys.diutil.bool_to_int(NOTES_ADVERS_REACT_nin);
   l_APPLICATION_SPOT_n := sys.diutil.bool_to_int(APPLICATION_SPOT_nin);
   l_LOT_NUMBER_n := sys.diutil.bool_to_int(LOT_NUMBER_nin);
   l_DT_EXPIRATION_n := sys.diutil.bool_to_int(DT_EXPIRATION_nin);
   l_ID_VACC_MED_EXT_n := sys.diutil.bool_to_int(ID_VACC_MED_EXT_nin);
   l_DT_PLAN_TSTZ_n := sys.diutil.bool_to_int(DT_PLAN_TSTZ_nin);
   l_DT_TAKE_TSTZ_n := sys.diutil.bool_to_int(DT_TAKE_TSTZ_nin);
   l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
   l_ORIGIN_n := sys.diutil.bool_to_int(ORIGIN_nin);
   l_DT_NEXT_TAKE_n := sys.diutil.bool_to_int(DT_NEXT_TAKE_nin);
   l_ID_PROF_ADM_n := sys.diutil.bool_to_int(ID_PROF_ADM_nin);
   l_DT_ADM_TSTZ_n := sys.diutil.bool_to_int(DT_ADM_TSTZ_nin);
   l_DOSAGE_UNIT_MEASURE_n := sys.diutil.bool_to_int(DOSAGE_UNIT_MEASURE_nin);
   l_ID_FREETEXT_n := sys.diutil.bool_to_int(ID_FREETEXT_nin);
   l_FLG_DOSAGE_CHECK_n := sys.diutil.bool_to_int(FLG_DOSAGE_CHECK_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_DOSAGE_CHANGE_JUSTIFY_n := sys.diutil.bool_to_int(DOSAGE_CHANGE_JUSTIFY_nin);
   l_RATE_UNIT_MEASURE_n := sys.diutil.bool_to_int(RATE_UNIT_MEASURE_nin);
   l_ID_PROF_WITNESS_n := sys.diutil.bool_to_int(ID_PROF_WITNESS_nin);
   l_ID_PRESC_DIR_DOSEFREQ_n := sys.diutil.bool_to_int(ID_PRESC_DIR_DOSEFREQ_nin);
   l_REFERENCE_VALUE_n := sys.diutil.bool_to_int(REFERENCE_VALUE_nin);
   l_ID_UNIT_REFERENCE_VALUE_n := sys.diutil.bool_to_int(ID_UNIT_REFERENCE_VALUE_nin);
   l_BARCODE_n := sys.diutil.bool_to_int(BARCODE_nin);
   l_SUMMARY_n := sys.diutil.bool_to_int(SUMMARY_nin);
   l_REASON_n := sys.diutil.bool_to_int(REASON_nin);
   l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
   l_CANCEL_REASON_DESCR_n := sys.diutil.bool_to_int(CANCEL_REASON_DESCR_nin);
   l_DT_VALUE_DRIP_CHANGE_n := sys.diutil.bool_to_int(DT_VALUE_DRIP_CHANGE_nin);
   l_FLG_CO_SIGN_n := sys.diutil.bool_to_int(FLG_CO_SIGN_nin);
   l_ID_PROF_CO_SIGN_n := sys.diutil.bool_to_int(ID_PROF_CO_SIGN_nin);
   l_DT_CO_SIGN_n := sys.diutil.bool_to_int(DT_CO_SIGN_nin);
   l_ID_ORDER_TYPE_n := sys.diutil.bool_to_int(ID_ORDER_TYPE_nin);
   l_ID_PROF_RATE_CHANGE_n := sys.diutil.bool_to_int(ID_PROF_RATE_CHANGE_nin);
   l_DT_END_BOTTLE_n := sys.diutil.bool_to_int(DT_END_BOTTLE_nin);
   l_ID_PROF_EDIT_DISC_n := sys.diutil.bool_to_int(ID_PROF_EDIT_DISC_nin);
   l_DT_EDIT_DISCONTINUE_n := sys.diutil.bool_to_int(DT_EDIT_DISCONTINUE_nin);
   l_JUSTIFY_DESCR_n := sys.diutil.bool_to_int(JUSTIFY_DESCR_nin);
   l_FLG_TOTALLY_ADM_n := sys.diutil.bool_to_int(FLG_TOTALLY_ADM_nin);
   l_FLG_TYPE_DATE_n := sys.diutil.bool_to_int(FLG_TYPE_DATE_nin);
   l_ID_VACC_FUNDING_SOURCE_n := sys.diutil.bool_to_int(ID_VACC_FUNDING_SOURCE_nin);
   l_ID_VACC_DOC_VIS_n := sys.diutil.bool_to_int(ID_VACC_DOC_VIS_nin);
   l_ID_VACC_ORIGIN_n := sys.diutil.bool_to_int(ID_VACC_ORIGIN_nin);
   l_ADMINISTRED_DESC_n := sys.diutil.bool_to_int(ADMINISTRED_DESC_nin);
   l_ORDERED_DESC_n := sys.diutil.bool_to_int(ORDERED_DESC_nin);
   l_ORIGIN_DESC_n := sys.diutil.bool_to_int(ORIGIN_DESC_nin);
   l_ID_ORDERED_n := sys.diutil.bool_to_int(ID_ORDERED_nin);
   l_ID_ADMINISTRED_n := sys.diutil.bool_to_int(ID_ADMINISTRED_nin);
   l_ID_VACC_FUNDING_CAT_n := sys.diutil.bool_to_int(ID_VACC_FUNDING_CAT_nin);
   l_ID_VACC_ADV_REACTION_n := sys.diutil.bool_to_int(ID_VACC_ADV_REACTION_nin);
   l_APPLICATION_SPOT_CODE_n := sys.diutil.bool_to_int(APPLICATION_SPOT_CODE_nin);
   l_VACC_ROUTE_DATA_n := sys.diutil.bool_to_int(VACC_ROUTE_DATA_nin);
   l_DT_DOC_DELIVERY_TSTZ_n := sys.diutil.bool_to_int(DT_DOC_DELIVERY_TSTZ_nin);
   l_DOC_VIS_DESC_n := sys.diutil.bool_to_int(DOC_VIS_DESC_nin);
   l_FUNDING_SOURCE_DESC_n := sys.diutil.bool_to_int(FUNDING_SOURCE_DESC_nin);


         UPDATE DRUG_PRESC_PLAN SET
     ID_DRUG_PRESC_DET = decode (l_ID_DRUG_PRESC_DET_n,0,id_drug_presc_det_in, NVL (id_drug_presc_det_in, ID_DRUG_PRESC_DET)),
     ID_DRUG_TAKE_TIME = decode (l_ID_DRUG_TAKE_TIME_n,0,id_drug_take_time_in, NVL (id_drug_take_time_in, ID_DRUG_TAKE_TIME)),
     ID_PROF_WRITES = decode (l_ID_PROF_WRITES_n,0,id_prof_writes_in, NVL (id_prof_writes_in, ID_PROF_WRITES)),
     DOSAGE = decode (l_DOSAGE_n,0,dosage_in, NVL (dosage_in, DOSAGE)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     NOTES = decode (l_NOTES_n,0,notes_in, NVL (notes_in, NOTES)),
     ID_PROF_CANCEL = decode (l_ID_PROF_CANCEL_n,0,id_prof_cancel_in, NVL (id_prof_cancel_in, ID_PROF_CANCEL)),
     NOTES_CANCEL = decode (l_NOTES_CANCEL_n,0,notes_cancel_in, NVL (notes_cancel_in, NOTES_CANCEL)),
     ID_EPISODE = decode (l_ID_EPISODE_n,0,id_episode_in, NVL (id_episode_in, ID_EPISODE)),
     RATE = decode (l_RATE_n,0,rate_in, NVL (rate_in, RATE)),
     DOSAGE_EXEC = decode (l_DOSAGE_EXEC_n,0,dosage_exec_in, NVL (dosage_exec_in, DOSAGE_EXEC)),
     FLG_ADVERS_REACT = decode (l_FLG_ADVERS_REACT_n,0,flg_advers_react_in, NVL (flg_advers_react_in, FLG_ADVERS_REACT)),
     NOTES_ADVERS_REACT = decode (l_NOTES_ADVERS_REACT_n,0,notes_advers_react_in, NVL (notes_advers_react_in, NOTES_ADVERS_REACT)),
     APPLICATION_SPOT = decode (l_APPLICATION_SPOT_n,0,application_spot_in, NVL (application_spot_in, APPLICATION_SPOT)),
     LOT_NUMBER = decode (l_LOT_NUMBER_n,0,lot_number_in, NVL (lot_number_in, LOT_NUMBER)),
     DT_EXPIRATION = decode (l_DT_EXPIRATION_n,0,dt_expiration_in, NVL (dt_expiration_in, DT_EXPIRATION)),
     ID_VACC_MED_EXT = decode (l_ID_VACC_MED_EXT_n,0,id_vacc_med_ext_in, NVL (id_vacc_med_ext_in, ID_VACC_MED_EXT)),
     DT_PLAN_TSTZ = decode (l_DT_PLAN_TSTZ_n,0,dt_plan_tstz_in, NVL (dt_plan_tstz_in, DT_PLAN_TSTZ)),
     DT_TAKE_TSTZ = decode (l_DT_TAKE_TSTZ_n,0,dt_take_tstz_in, NVL (dt_take_tstz_in, DT_TAKE_TSTZ)),
     DT_CANCEL_TSTZ = decode (l_DT_CANCEL_TSTZ_n,0,dt_cancel_tstz_in, NVL (dt_cancel_tstz_in, DT_CANCEL_TSTZ)),
     ORIGIN = decode (l_ORIGIN_n,0,origin_in, NVL (origin_in, ORIGIN)),
     DT_NEXT_TAKE = decode (l_DT_NEXT_TAKE_n,0,dt_next_take_in, NVL (dt_next_take_in, DT_NEXT_TAKE)),
     ID_PROF_ADM = decode (l_ID_PROF_ADM_n,0,id_prof_adm_in, NVL (id_prof_adm_in, ID_PROF_ADM)),
     DT_ADM_TSTZ = decode (l_DT_ADM_TSTZ_n,0,dt_adm_tstz_in, NVL (dt_adm_tstz_in, DT_ADM_TSTZ)),
     DOSAGE_UNIT_MEASURE = decode (l_DOSAGE_UNIT_MEASURE_n,0,dosage_unit_measure_in, NVL (dosage_unit_measure_in, DOSAGE_UNIT_MEASURE)),
     ID_FREETEXT = decode (l_ID_FREETEXT_n,0,id_freetext_in, NVL (id_freetext_in, ID_FREETEXT)),
     FLG_DOSAGE_CHECK = decode (l_FLG_DOSAGE_CHECK_n,0,flg_dosage_check_in, NVL (flg_dosage_check_in, FLG_DOSAGE_CHECK)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     DOSAGE_CHANGE_JUSTIFY = decode (l_DOSAGE_CHANGE_JUSTIFY_n,0,dosage_change_justify_in, NVL (dosage_change_justify_in, DOSAGE_CHANGE_JUSTIFY)),
     RATE_UNIT_MEASURE = decode (l_RATE_UNIT_MEASURE_n,0,rate_unit_measure_in, NVL (rate_unit_measure_in, RATE_UNIT_MEASURE)),
     ID_PROF_WITNESS = decode (l_ID_PROF_WITNESS_n,0,id_prof_witness_in, NVL (id_prof_witness_in, ID_PROF_WITNESS)),
     ID_PRESC_DIR_DOSEFREQ = decode (l_ID_PRESC_DIR_DOSEFREQ_n,0,id_presc_dir_dosefreq_in, NVL (id_presc_dir_dosefreq_in, ID_PRESC_DIR_DOSEFREQ)),
     REFERENCE_VALUE = decode (l_REFERENCE_VALUE_n,0,reference_value_in, NVL (reference_value_in, REFERENCE_VALUE)),
     ID_UNIT_REFERENCE_VALUE = decode (l_ID_UNIT_REFERENCE_VALUE_n,0,id_unit_reference_value_in, NVL (id_unit_reference_value_in, ID_UNIT_REFERENCE_VALUE)),
     BARCODE = decode (l_BARCODE_n,0,barcode_in, NVL (barcode_in, BARCODE)),
     SUMMARY = decode (l_SUMMARY_n,0,summary_in, NVL (summary_in, SUMMARY)),
     REASON = decode (l_REASON_n,0,reason_in, NVL (reason_in, REASON)),
     ID_CANCEL_REASON = decode (l_ID_CANCEL_REASON_n,0,id_cancel_reason_in, NVL (id_cancel_reason_in, ID_CANCEL_REASON)),
     CANCEL_REASON_DESCR = decode (l_CANCEL_REASON_DESCR_n,0,cancel_reason_descr_in, NVL (cancel_reason_descr_in, CANCEL_REASON_DESCR)),
     DT_VALUE_DRIP_CHANGE = decode (l_DT_VALUE_DRIP_CHANGE_n,0,dt_value_drip_change_in, NVL (dt_value_drip_change_in, DT_VALUE_DRIP_CHANGE)),
     FLG_CO_SIGN = decode (l_FLG_CO_SIGN_n,0,flg_co_sign_in, NVL (flg_co_sign_in, FLG_CO_SIGN)),
     ID_PROF_CO_SIGN = decode (l_ID_PROF_CO_SIGN_n,0,id_prof_co_sign_in, NVL (id_prof_co_sign_in, ID_PROF_CO_SIGN)),
     DT_CO_SIGN = decode (l_DT_CO_SIGN_n,0,dt_co_sign_in, NVL (dt_co_sign_in, DT_CO_SIGN)),
     ID_ORDER_TYPE = decode (l_ID_ORDER_TYPE_n,0,id_order_type_in, NVL (id_order_type_in, ID_ORDER_TYPE)),
     ID_PROF_RATE_CHANGE = decode (l_ID_PROF_RATE_CHANGE_n,0,id_prof_rate_change_in, NVL (id_prof_rate_change_in, ID_PROF_RATE_CHANGE)),
     DT_END_BOTTLE = decode (l_DT_END_BOTTLE_n,0,dt_end_bottle_in, NVL (dt_end_bottle_in, DT_END_BOTTLE)),
     ID_PROF_EDIT_DISC = decode (l_ID_PROF_EDIT_DISC_n,0,id_prof_edit_disc_in, NVL (id_prof_edit_disc_in, ID_PROF_EDIT_DISC)),
     DT_EDIT_DISCONTINUE = decode (l_DT_EDIT_DISCONTINUE_n,0,dt_edit_discontinue_in, NVL (dt_edit_discontinue_in, DT_EDIT_DISCONTINUE)),
     JUSTIFY_DESCR = decode (l_JUSTIFY_DESCR_n,0,justify_descr_in, NVL (justify_descr_in, JUSTIFY_DESCR)),
     FLG_TOTALLY_ADM = decode (l_FLG_TOTALLY_ADM_n,0,flg_totally_adm_in, NVL (flg_totally_adm_in, FLG_TOTALLY_ADM)),
     FLG_TYPE_DATE = decode (l_FLG_TYPE_DATE_n,0,flg_type_date_in, NVL (flg_type_date_in, FLG_TYPE_DATE)),
     ID_VACC_FUNDING_SOURCE = decode (l_ID_VACC_FUNDING_SOURCE_n,0,id_vacc_funding_source_in, NVL (id_vacc_funding_source_in, ID_VACC_FUNDING_SOURCE)),
     ID_VACC_DOC_VIS = decode (l_ID_VACC_DOC_VIS_n,0,id_vacc_doc_vis_in, NVL (id_vacc_doc_vis_in, ID_VACC_DOC_VIS)),
     ID_VACC_ORIGIN = decode (l_ID_VACC_ORIGIN_n,0,id_vacc_origin_in, NVL (id_vacc_origin_in, ID_VACC_ORIGIN)),
     ADMINISTRED_DESC = decode (l_ADMINISTRED_DESC_n,0,administred_desc_in, NVL (administred_desc_in, ADMINISTRED_DESC)),
     ORDERED_DESC = decode (l_ORDERED_DESC_n,0,ordered_desc_in, NVL (ordered_desc_in, ORDERED_DESC)),
     ORIGIN_DESC = decode (l_ORIGIN_DESC_n,0,origin_desc_in, NVL (origin_desc_in, ORIGIN_DESC)),
     ID_ORDERED = decode (l_ID_ORDERED_n,0,id_ordered_in, NVL (id_ordered_in, ID_ORDERED)),
     ID_ADMINISTRED = decode (l_ID_ADMINISTRED_n,0,id_administred_in, NVL (id_administred_in, ID_ADMINISTRED)),
     ID_VACC_FUNDING_CAT = decode (l_ID_VACC_FUNDING_CAT_n,0,id_vacc_funding_cat_in, NVL (id_vacc_funding_cat_in, ID_VACC_FUNDING_CAT)),
     ID_VACC_ADV_REACTION = decode (l_ID_VACC_ADV_REACTION_n,0,id_vacc_adv_reaction_in, NVL (id_vacc_adv_reaction_in, ID_VACC_ADV_REACTION)),
     APPLICATION_SPOT_CODE = decode (l_APPLICATION_SPOT_CODE_n,0,application_spot_code_in, NVL (application_spot_code_in, APPLICATION_SPOT_CODE)),
     VACC_ROUTE_DATA = decode (l_VACC_ROUTE_DATA_n,0,vacc_route_data_in, NVL (vacc_route_data_in, VACC_ROUTE_DATA)),
     DT_DOC_DELIVERY_TSTZ = decode (l_DT_DOC_DELIVERY_TSTZ_n,0,dt_doc_delivery_tstz_in, NVL (dt_doc_delivery_tstz_in, DT_DOC_DELIVERY_TSTZ)),
     DOC_VIS_DESC = decode (l_DOC_VIS_DESC_n,0,doc_vis_desc_in, NVL (doc_vis_desc_in, DOC_VIS_DESC)),
     FUNDING_SOURCE_DESC = decode (l_FUNDING_SOURCE_DESC_n,0,funding_source_desc_in, NVL (funding_source_desc_in, FUNDING_SOURCE_DESC))
          WHERE
             ID_DRUG_PRESC_PLAN = id_drug_presc_plan_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              PK_ALERT_EXCEPTIONS.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'DRUG_PRESC_PLAN');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           IF l_name = 'DPN_PRL_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_WITNESS'
               , value_in => id_prof_witness_in);
           END IF;
           IF l_name = 'DPP_OT_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ORDER_TYPE'
               , value_in => id_order_type_in);
           END IF;
           IF l_name = 'DPP_PROF_CO_SIGN_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CO_SIGN'
               , value_in => id_prof_co_sign_in);
           END IF;
           IF l_name = 'DPP_PROF_EDIT_DISC_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_EDIT_DISC'
               , value_in => id_prof_edit_disc_in);
           END IF;
           IF l_name = 'DPP_PROF_R_CHANGE_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_RATE_CHANGE'
               , value_in => id_prof_rate_change_in);
           END IF;
           IF l_name = 'DPP_UME_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'DOSAGE_UNIT_MEASURE'
               , value_in => dosage_unit_measure_in);
           END IF;
           IF l_name = 'DRPRP_DRGPR_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG_PRESC_DET'
               , value_in => id_drug_presc_det_in);
           END IF;
           IF l_name = 'DRPRP_DRTKT_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG_TAKE_TIME'
               , value_in => id_drug_take_time_in);
           END IF;
           IF l_name = 'DRPRP_PDDOSEFREQ_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PRESC_DIR_DOSEFREQ'
               , value_in => id_presc_dir_dosefreq_in);
           END IF;
           IF l_name = 'DRPRP_PROF_CANCEL_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'DRPRP_PROF_WRITES_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_WRITES'
               , value_in => id_prof_writes_in);
           END IF;
           IF l_name = 'DRPRP_UNITMEASURE_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_REFERENCE_VALUE'
               , value_in => id_unit_reference_value_in);
           END IF;
           IF l_name = 'DRPRP_UNITM_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'RATE_UNIT_MEASURE'
               , value_in => rate_unit_measure_in);
           END IF;
           IF l_name = 'ID_VACC_FUNDING_CAT_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_FUNDING_CAT'
               , value_in => id_vacc_funding_cat_in);
           END IF;
           IF l_name = 'PP_CANCEL_REASON_ADM_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'VACC_ADV_REACTION_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_ADV_REACTION'
               , value_in => id_vacc_adv_reaction_in);
           END IF;
           IF l_name = 'VACC_DOC_VIS_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_DOC_VIS'
               , value_in => id_vacc_doc_vis_in);
           END IF;
           IF l_name = 'VACC_FUNDING_SOURCE_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_FUNDING_SOURCE'
               , value_in => id_vacc_funding_source_in);
           END IF;
           IF l_name = 'VACC_ORIGIN_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_ORIGIN'
               , value_in => id_vacc_origin_in);
           END IF;
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_drug_presc_plan_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE,
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      ID_DRUG_PRESC_DET_nin IN BOOLEAN := TRUE,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      ID_DRUG_TAKE_TIME_nin IN BOOLEAN := TRUE,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      ID_PROF_WRITES_nin IN BOOLEAN := TRUE,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      DOSAGE_nin IN BOOLEAN := TRUE,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      RATE_nin IN BOOLEAN := TRUE,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      DOSAGE_EXEC_nin IN BOOLEAN := TRUE,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      FLG_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      NOTES_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      APPLICATION_SPOT_nin IN BOOLEAN := TRUE,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      LOT_NUMBER_nin IN BOOLEAN := TRUE,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      DT_EXPIRATION_nin IN BOOLEAN := TRUE,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      ID_VACC_MED_EXT_nin IN BOOLEAN := TRUE,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      DT_PLAN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      DT_TAKE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      ORIGIN_nin IN BOOLEAN := TRUE,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      DT_NEXT_TAKE_nin IN BOOLEAN := TRUE,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      ID_PROF_ADM_nin IN BOOLEAN := TRUE,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      DT_ADM_TSTZ_nin IN BOOLEAN := TRUE,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      DOSAGE_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT NULL,
      ID_FREETEXT_nin IN BOOLEAN := TRUE,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      FLG_DOSAGE_CHECK_nin IN BOOLEAN := TRUE,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      DOSAGE_CHANGE_JUSTIFY_nin IN BOOLEAN := TRUE,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      RATE_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      ID_PROF_WITNESS_nin IN BOOLEAN := TRUE,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      ID_PRESC_DIR_DOSEFREQ_nin IN BOOLEAN := TRUE,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT NULL,
      REFERENCE_VALUE_nin IN BOOLEAN := TRUE,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT NULL,
      ID_UNIT_REFERENCE_VALUE_nin IN BOOLEAN := TRUE,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      BARCODE_nin IN BOOLEAN := TRUE,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      SUMMARY_nin IN BOOLEAN := TRUE,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      REASON_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      CANCEL_REASON_DESCR_nin IN BOOLEAN := TRUE,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      DT_VALUE_DRIP_CHANGE_nin IN BOOLEAN := TRUE,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT NULL,
      FLG_CO_SIGN_nin IN BOOLEAN := TRUE,
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      ID_PROF_CO_SIGN_nin IN BOOLEAN := TRUE,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      DT_CO_SIGN_nin IN BOOLEAN := TRUE,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      ID_ORDER_TYPE_nin IN BOOLEAN := TRUE,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      ID_PROF_RATE_CHANGE_nin IN BOOLEAN := TRUE,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      DT_END_BOTTLE_nin IN BOOLEAN := TRUE,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      ID_PROF_EDIT_DISC_nin IN BOOLEAN := TRUE,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      DT_EDIT_DISCONTINUE_nin IN BOOLEAN := TRUE,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      JUSTIFY_DESCR_nin IN BOOLEAN := TRUE,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL,
      FLG_TOTALLY_ADM_nin IN BOOLEAN := TRUE,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      FLG_TYPE_DATE_nin IN BOOLEAN := TRUE,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_SOURCE_nin IN BOOLEAN := TRUE,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      ID_VACC_DOC_VIS_nin IN BOOLEAN := TRUE,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      ID_VACC_ORIGIN_nin IN BOOLEAN := TRUE,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ADMINISTRED_DESC_nin IN BOOLEAN := TRUE,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      ORDERED_DESC_nin IN BOOLEAN := TRUE,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      ORIGIN_DESC_nin IN BOOLEAN := TRUE,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      ID_ORDERED_nin IN BOOLEAN := TRUE,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      ID_ADMINISTRED_nin IN BOOLEAN := TRUE,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_CAT_nin IN BOOLEAN := TRUE,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      ID_VACC_ADV_REACTION_nin IN BOOLEAN := TRUE,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      APPLICATION_SPOT_CODE_nin IN BOOLEAN := TRUE,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      VACC_ROUTE_DATA_nin IN BOOLEAN := TRUE,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      DT_DOC_DELIVERY_TSTZ_nin IN BOOLEAN := TRUE,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      DOC_VIS_DESC_nin IN BOOLEAN := TRUE,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
      FUNDING_SOURCE_DESC_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_drug_presc_plan_in => id_drug_presc_plan_in,
      id_drug_presc_det_in => id_drug_presc_det_in,
      ID_DRUG_PRESC_DET_nin => ID_DRUG_PRESC_DET_nin,
      id_drug_take_time_in => id_drug_take_time_in,
      ID_DRUG_TAKE_TIME_nin => ID_DRUG_TAKE_TIME_nin,
      id_prof_writes_in => id_prof_writes_in,
      ID_PROF_WRITES_nin => ID_PROF_WRITES_nin,
      dosage_in => dosage_in,
      DOSAGE_nin => DOSAGE_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      rate_in => rate_in,
      RATE_nin => RATE_nin,
      dosage_exec_in => dosage_exec_in,
      DOSAGE_EXEC_nin => DOSAGE_EXEC_nin,
      flg_advers_react_in => flg_advers_react_in,
      FLG_ADVERS_REACT_nin => FLG_ADVERS_REACT_nin,
      notes_advers_react_in => notes_advers_react_in,
      NOTES_ADVERS_REACT_nin => NOTES_ADVERS_REACT_nin,
      application_spot_in => application_spot_in,
      APPLICATION_SPOT_nin => APPLICATION_SPOT_nin,
      lot_number_in => lot_number_in,
      LOT_NUMBER_nin => LOT_NUMBER_nin,
      dt_expiration_in => dt_expiration_in,
      DT_EXPIRATION_nin => DT_EXPIRATION_nin,
      id_vacc_med_ext_in => id_vacc_med_ext_in,
      ID_VACC_MED_EXT_nin => ID_VACC_MED_EXT_nin,
      dt_plan_tstz_in => dt_plan_tstz_in,
      DT_PLAN_TSTZ_nin => DT_PLAN_TSTZ_nin,
      dt_take_tstz_in => dt_take_tstz_in,
      DT_TAKE_TSTZ_nin => DT_TAKE_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      origin_in => origin_in,
      ORIGIN_nin => ORIGIN_nin,
      dt_next_take_in => dt_next_take_in,
      DT_NEXT_TAKE_nin => DT_NEXT_TAKE_nin,
      id_prof_adm_in => id_prof_adm_in,
      ID_PROF_ADM_nin => ID_PROF_ADM_nin,
      dt_adm_tstz_in => dt_adm_tstz_in,
      DT_ADM_TSTZ_nin => DT_ADM_TSTZ_nin,
      dosage_unit_measure_in => dosage_unit_measure_in,
      DOSAGE_UNIT_MEASURE_nin => DOSAGE_UNIT_MEASURE_nin,
      id_freetext_in => id_freetext_in,
      ID_FREETEXT_nin => ID_FREETEXT_nin,
      flg_dosage_check_in => flg_dosage_check_in,
      FLG_DOSAGE_CHECK_nin => FLG_DOSAGE_CHECK_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      dosage_change_justify_in => dosage_change_justify_in,
      DOSAGE_CHANGE_JUSTIFY_nin => DOSAGE_CHANGE_JUSTIFY_nin,
      rate_unit_measure_in => rate_unit_measure_in,
      RATE_UNIT_MEASURE_nin => RATE_UNIT_MEASURE_nin,
      id_prof_witness_in => id_prof_witness_in,
      ID_PROF_WITNESS_nin => ID_PROF_WITNESS_nin,
      id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
      ID_PRESC_DIR_DOSEFREQ_nin => ID_PRESC_DIR_DOSEFREQ_nin,
      reference_value_in => reference_value_in,
      REFERENCE_VALUE_nin => REFERENCE_VALUE_nin,
      id_unit_reference_value_in => id_unit_reference_value_in,
      ID_UNIT_REFERENCE_VALUE_nin => ID_UNIT_REFERENCE_VALUE_nin,
      barcode_in => barcode_in,
      BARCODE_nin => BARCODE_nin,
      summary_in => summary_in,
      SUMMARY_nin => SUMMARY_nin,
      reason_in => reason_in,
      REASON_nin => REASON_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      cancel_reason_descr_in => cancel_reason_descr_in,
      CANCEL_REASON_DESCR_nin => CANCEL_REASON_DESCR_nin,
      dt_value_drip_change_in => dt_value_drip_change_in,
      DT_VALUE_DRIP_CHANGE_nin => DT_VALUE_DRIP_CHANGE_nin,
      flg_co_sign_in => flg_co_sign_in,
      FLG_CO_SIGN_nin => FLG_CO_SIGN_nin,
      id_prof_co_sign_in => id_prof_co_sign_in,
      ID_PROF_CO_SIGN_nin => ID_PROF_CO_SIGN_nin,
      dt_co_sign_in => dt_co_sign_in,
      DT_CO_SIGN_nin => DT_CO_SIGN_nin,
      id_order_type_in => id_order_type_in,
      ID_ORDER_TYPE_nin => ID_ORDER_TYPE_nin,
      id_prof_rate_change_in => id_prof_rate_change_in,
      ID_PROF_RATE_CHANGE_nin => ID_PROF_RATE_CHANGE_nin,
      dt_end_bottle_in => dt_end_bottle_in,
      DT_END_BOTTLE_nin => DT_END_BOTTLE_nin,
      id_prof_edit_disc_in => id_prof_edit_disc_in,
      ID_PROF_EDIT_DISC_nin => ID_PROF_EDIT_DISC_nin,
      dt_edit_discontinue_in => dt_edit_discontinue_in,
      DT_EDIT_DISCONTINUE_nin => DT_EDIT_DISCONTINUE_nin,
      justify_descr_in => justify_descr_in,
      JUSTIFY_DESCR_nin => JUSTIFY_DESCR_nin,
      flg_totally_adm_in => flg_totally_adm_in,
      FLG_TOTALLY_ADM_nin => FLG_TOTALLY_ADM_nin,
      flg_type_date_in => flg_type_date_in,
      FLG_TYPE_DATE_nin => FLG_TYPE_DATE_nin,
      id_vacc_funding_source_in => id_vacc_funding_source_in,
      ID_VACC_FUNDING_SOURCE_nin => ID_VACC_FUNDING_SOURCE_nin,
      id_vacc_doc_vis_in => id_vacc_doc_vis_in,
      ID_VACC_DOC_VIS_nin => ID_VACC_DOC_VIS_nin,
      id_vacc_origin_in => id_vacc_origin_in,
      ID_VACC_ORIGIN_nin => ID_VACC_ORIGIN_nin,
      administred_desc_in => administred_desc_in,
      ADMINISTRED_DESC_nin => ADMINISTRED_DESC_nin,
      ordered_desc_in => ordered_desc_in,
      ORDERED_DESC_nin => ORDERED_DESC_nin,
      origin_desc_in => origin_desc_in,
      ORIGIN_DESC_nin => ORIGIN_DESC_nin,
      id_ordered_in => id_ordered_in,
      ID_ORDERED_nin => ID_ORDERED_nin,
      id_administred_in => id_administred_in,
      ID_ADMINISTRED_nin => ID_ADMINISTRED_nin,
      id_vacc_funding_cat_in => id_vacc_funding_cat_in,
      ID_VACC_FUNDING_CAT_nin => ID_VACC_FUNDING_CAT_nin,
      id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
      ID_VACC_ADV_REACTION_nin => ID_VACC_ADV_REACTION_nin,
      application_spot_code_in => application_spot_code_in,
      APPLICATION_SPOT_CODE_nin => APPLICATION_SPOT_CODE_nin,
      vacc_route_data_in => vacc_route_data_in,
      VACC_ROUTE_DATA_nin => VACC_ROUTE_DATA_nin,
      dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
      DT_DOC_DELIVERY_TSTZ_nin => DT_DOC_DELIVERY_TSTZ_nin,
      doc_vis_desc_in => doc_vis_desc_in,
      DOC_VIS_DESC_nin => DOC_VIS_DESC_nin,
      funding_source_desc_in => funding_source_desc_in,
      FUNDING_SOURCE_DESC_nin => FUNDING_SOURCE_DESC_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      ID_DRUG_PRESC_DET_nin IN BOOLEAN := TRUE,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      ID_DRUG_TAKE_TIME_nin IN BOOLEAN := TRUE,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      ID_PROF_WRITES_nin IN BOOLEAN := TRUE,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      DOSAGE_nin IN BOOLEAN := TRUE,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      RATE_nin IN BOOLEAN := TRUE,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      DOSAGE_EXEC_nin IN BOOLEAN := TRUE,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      FLG_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      NOTES_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      APPLICATION_SPOT_nin IN BOOLEAN := TRUE,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      LOT_NUMBER_nin IN BOOLEAN := TRUE,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      DT_EXPIRATION_nin IN BOOLEAN := TRUE,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      ID_VACC_MED_EXT_nin IN BOOLEAN := TRUE,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      DT_PLAN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      DT_TAKE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      ORIGIN_nin IN BOOLEAN := TRUE,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      DT_NEXT_TAKE_nin IN BOOLEAN := TRUE,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      ID_PROF_ADM_nin IN BOOLEAN := TRUE,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      DT_ADM_TSTZ_nin IN BOOLEAN := TRUE,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      DOSAGE_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT NULL,
      ID_FREETEXT_nin IN BOOLEAN := TRUE,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      FLG_DOSAGE_CHECK_nin IN BOOLEAN := TRUE,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      DOSAGE_CHANGE_JUSTIFY_nin IN BOOLEAN := TRUE,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      RATE_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      ID_PROF_WITNESS_nin IN BOOLEAN := TRUE,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      ID_PRESC_DIR_DOSEFREQ_nin IN BOOLEAN := TRUE,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT NULL,
      REFERENCE_VALUE_nin IN BOOLEAN := TRUE,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT NULL,
      ID_UNIT_REFERENCE_VALUE_nin IN BOOLEAN := TRUE,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      BARCODE_nin IN BOOLEAN := TRUE,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      SUMMARY_nin IN BOOLEAN := TRUE,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      REASON_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      CANCEL_REASON_DESCR_nin IN BOOLEAN := TRUE,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      DT_VALUE_DRIP_CHANGE_nin IN BOOLEAN := TRUE,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT NULL,
      FLG_CO_SIGN_nin IN BOOLEAN := TRUE,
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      ID_PROF_CO_SIGN_nin IN BOOLEAN := TRUE,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      DT_CO_SIGN_nin IN BOOLEAN := TRUE,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      ID_ORDER_TYPE_nin IN BOOLEAN := TRUE,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      ID_PROF_RATE_CHANGE_nin IN BOOLEAN := TRUE,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      DT_END_BOTTLE_nin IN BOOLEAN := TRUE,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      ID_PROF_EDIT_DISC_nin IN BOOLEAN := TRUE,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      DT_EDIT_DISCONTINUE_nin IN BOOLEAN := TRUE,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      JUSTIFY_DESCR_nin IN BOOLEAN := TRUE,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL,
      FLG_TOTALLY_ADM_nin IN BOOLEAN := TRUE,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      FLG_TYPE_DATE_nin IN BOOLEAN := TRUE,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_SOURCE_nin IN BOOLEAN := TRUE,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      ID_VACC_DOC_VIS_nin IN BOOLEAN := TRUE,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      ID_VACC_ORIGIN_nin IN BOOLEAN := TRUE,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ADMINISTRED_DESC_nin IN BOOLEAN := TRUE,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      ORDERED_DESC_nin IN BOOLEAN := TRUE,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      ORIGIN_DESC_nin IN BOOLEAN := TRUE,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      ID_ORDERED_nin IN BOOLEAN := TRUE,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      ID_ADMINISTRED_nin IN BOOLEAN := TRUE,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_CAT_nin IN BOOLEAN := TRUE,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      ID_VACC_ADV_REACTION_nin IN BOOLEAN := TRUE,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      APPLICATION_SPOT_CODE_nin IN BOOLEAN := TRUE,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      VACC_ROUTE_DATA_nin IN BOOLEAN := TRUE,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      DT_DOC_DELIVERY_TSTZ_nin IN BOOLEAN := TRUE,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      DOC_VIS_DESC_nin IN BOOLEAN := TRUE,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
      FUNDING_SOURCE_DESC_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_DRUG_PRESC_DET_n NUMBER(1);
   l_ID_DRUG_TAKE_TIME_n NUMBER(1);
   l_ID_PROF_WRITES_n NUMBER(1);
   l_DOSAGE_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_RATE_n NUMBER(1);
   l_DOSAGE_EXEC_n NUMBER(1);
   l_FLG_ADVERS_REACT_n NUMBER(1);
   l_NOTES_ADVERS_REACT_n NUMBER(1);
   l_APPLICATION_SPOT_n NUMBER(1);
   l_LOT_NUMBER_n NUMBER(1);
   l_DT_EXPIRATION_n NUMBER(1);
   l_ID_VACC_MED_EXT_n NUMBER(1);
   l_DT_PLAN_TSTZ_n NUMBER(1);
   l_DT_TAKE_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_ORIGIN_n NUMBER(1);
   l_DT_NEXT_TAKE_n NUMBER(1);
   l_ID_PROF_ADM_n NUMBER(1);
   l_DT_ADM_TSTZ_n NUMBER(1);
   l_DOSAGE_UNIT_MEASURE_n NUMBER(1);
   l_ID_FREETEXT_n NUMBER(1);
   l_FLG_DOSAGE_CHECK_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_DOSAGE_CHANGE_JUSTIFY_n NUMBER(1);
   l_RATE_UNIT_MEASURE_n NUMBER(1);
   l_ID_PROF_WITNESS_n NUMBER(1);
   l_ID_PRESC_DIR_DOSEFREQ_n NUMBER(1);
   l_REFERENCE_VALUE_n NUMBER(1);
   l_ID_UNIT_REFERENCE_VALUE_n NUMBER(1);
   l_BARCODE_n NUMBER(1);
   l_SUMMARY_n NUMBER(1);
   l_REASON_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_CANCEL_REASON_DESCR_n NUMBER(1);
   l_DT_VALUE_DRIP_CHANGE_n NUMBER(1);
   l_FLG_CO_SIGN_n NUMBER(1);
   l_ID_PROF_CO_SIGN_n NUMBER(1);
   l_DT_CO_SIGN_n NUMBER(1);
   l_ID_ORDER_TYPE_n NUMBER(1);
   l_ID_PROF_RATE_CHANGE_n NUMBER(1);
   l_DT_END_BOTTLE_n NUMBER(1);
   l_ID_PROF_EDIT_DISC_n NUMBER(1);
   l_DT_EDIT_DISCONTINUE_n NUMBER(1);
   l_JUSTIFY_DESCR_n NUMBER(1);
   l_FLG_TOTALLY_ADM_n NUMBER(1);
   l_FLG_TYPE_DATE_n NUMBER(1);
   l_ID_VACC_FUNDING_SOURCE_n NUMBER(1);
   l_ID_VACC_DOC_VIS_n NUMBER(1);
   l_ID_VACC_ORIGIN_n NUMBER(1);
   l_ADMINISTRED_DESC_n NUMBER(1);
   l_ORDERED_DESC_n NUMBER(1);
   l_ORIGIN_DESC_n NUMBER(1);
   l_ID_ORDERED_n NUMBER(1);
   l_ID_ADMINISTRED_n NUMBER(1);
   l_ID_VACC_FUNDING_CAT_n NUMBER(1);
   l_ID_VACC_ADV_REACTION_n NUMBER(1);
   l_APPLICATION_SPOT_CODE_n NUMBER(1);
   l_VACC_ROUTE_DATA_n NUMBER(1);
   l_DT_DOC_DELIVERY_TSTZ_n NUMBER(1);
   l_DOC_VIS_DESC_n NUMBER(1);
   l_FUNDING_SOURCE_DESC_n NUMBER(1);
      id_drug_presc_plan_in DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE;
   BEGIN



      l_ID_DRUG_PRESC_DET_n := sys.diutil.bool_to_int(ID_DRUG_PRESC_DET_nin);
      l_ID_DRUG_TAKE_TIME_n := sys.diutil.bool_to_int(ID_DRUG_TAKE_TIME_nin);
      l_ID_PROF_WRITES_n := sys.diutil.bool_to_int(ID_PROF_WRITES_nin);
      l_DOSAGE_n := sys.diutil.bool_to_int(DOSAGE_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
      l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
      l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
      l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
      l_RATE_n := sys.diutil.bool_to_int(RATE_nin);
      l_DOSAGE_EXEC_n := sys.diutil.bool_to_int(DOSAGE_EXEC_nin);
      l_FLG_ADVERS_REACT_n := sys.diutil.bool_to_int(FLG_ADVERS_REACT_nin);
      l_NOTES_ADVERS_REACT_n := sys.diutil.bool_to_int(NOTES_ADVERS_REACT_nin);
      l_APPLICATION_SPOT_n := sys.diutil.bool_to_int(APPLICATION_SPOT_nin);
      l_LOT_NUMBER_n := sys.diutil.bool_to_int(LOT_NUMBER_nin);
      l_DT_EXPIRATION_n := sys.diutil.bool_to_int(DT_EXPIRATION_nin);
      l_ID_VACC_MED_EXT_n := sys.diutil.bool_to_int(ID_VACC_MED_EXT_nin);
      l_DT_PLAN_TSTZ_n := sys.diutil.bool_to_int(DT_PLAN_TSTZ_nin);
      l_DT_TAKE_TSTZ_n := sys.diutil.bool_to_int(DT_TAKE_TSTZ_nin);
      l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
      l_ORIGIN_n := sys.diutil.bool_to_int(ORIGIN_nin);
      l_DT_NEXT_TAKE_n := sys.diutil.bool_to_int(DT_NEXT_TAKE_nin);
      l_ID_PROF_ADM_n := sys.diutil.bool_to_int(ID_PROF_ADM_nin);
      l_DT_ADM_TSTZ_n := sys.diutil.bool_to_int(DT_ADM_TSTZ_nin);
      l_DOSAGE_UNIT_MEASURE_n := sys.diutil.bool_to_int(DOSAGE_UNIT_MEASURE_nin);
      l_ID_FREETEXT_n := sys.diutil.bool_to_int(ID_FREETEXT_nin);
      l_FLG_DOSAGE_CHECK_n := sys.diutil.bool_to_int(FLG_DOSAGE_CHECK_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_DOSAGE_CHANGE_JUSTIFY_n := sys.diutil.bool_to_int(DOSAGE_CHANGE_JUSTIFY_nin);
      l_RATE_UNIT_MEASURE_n := sys.diutil.bool_to_int(RATE_UNIT_MEASURE_nin);
      l_ID_PROF_WITNESS_n := sys.diutil.bool_to_int(ID_PROF_WITNESS_nin);
      l_ID_PRESC_DIR_DOSEFREQ_n := sys.diutil.bool_to_int(ID_PRESC_DIR_DOSEFREQ_nin);
      l_REFERENCE_VALUE_n := sys.diutil.bool_to_int(REFERENCE_VALUE_nin);
      l_ID_UNIT_REFERENCE_VALUE_n := sys.diutil.bool_to_int(ID_UNIT_REFERENCE_VALUE_nin);
      l_BARCODE_n := sys.diutil.bool_to_int(BARCODE_nin);
      l_SUMMARY_n := sys.diutil.bool_to_int(SUMMARY_nin);
      l_REASON_n := sys.diutil.bool_to_int(REASON_nin);
      l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
      l_CANCEL_REASON_DESCR_n := sys.diutil.bool_to_int(CANCEL_REASON_DESCR_nin);
      l_DT_VALUE_DRIP_CHANGE_n := sys.diutil.bool_to_int(DT_VALUE_DRIP_CHANGE_nin);
      l_FLG_CO_SIGN_n := sys.diutil.bool_to_int(FLG_CO_SIGN_nin);
      l_ID_PROF_CO_SIGN_n := sys.diutil.bool_to_int(ID_PROF_CO_SIGN_nin);
      l_DT_CO_SIGN_n := sys.diutil.bool_to_int(DT_CO_SIGN_nin);
      l_ID_ORDER_TYPE_n := sys.diutil.bool_to_int(ID_ORDER_TYPE_nin);
      l_ID_PROF_RATE_CHANGE_n := sys.diutil.bool_to_int(ID_PROF_RATE_CHANGE_nin);
      l_DT_END_BOTTLE_n := sys.diutil.bool_to_int(DT_END_BOTTLE_nin);
      l_ID_PROF_EDIT_DISC_n := sys.diutil.bool_to_int(ID_PROF_EDIT_DISC_nin);
      l_DT_EDIT_DISCONTINUE_n := sys.diutil.bool_to_int(DT_EDIT_DISCONTINUE_nin);
      l_JUSTIFY_DESCR_n := sys.diutil.bool_to_int(JUSTIFY_DESCR_nin);
      l_FLG_TOTALLY_ADM_n := sys.diutil.bool_to_int(FLG_TOTALLY_ADM_nin);
      l_FLG_TYPE_DATE_n := sys.diutil.bool_to_int(FLG_TYPE_DATE_nin);
      l_ID_VACC_FUNDING_SOURCE_n := sys.diutil.bool_to_int(ID_VACC_FUNDING_SOURCE_nin);
      l_ID_VACC_DOC_VIS_n := sys.diutil.bool_to_int(ID_VACC_DOC_VIS_nin);
      l_ID_VACC_ORIGIN_n := sys.diutil.bool_to_int(ID_VACC_ORIGIN_nin);
      l_ADMINISTRED_DESC_n := sys.diutil.bool_to_int(ADMINISTRED_DESC_nin);
      l_ORDERED_DESC_n := sys.diutil.bool_to_int(ORDERED_DESC_nin);
      l_ORIGIN_DESC_n := sys.diutil.bool_to_int(ORIGIN_DESC_nin);
      l_ID_ORDERED_n := sys.diutil.bool_to_int(ID_ORDERED_nin);
      l_ID_ADMINISTRED_n := sys.diutil.bool_to_int(ID_ADMINISTRED_nin);
      l_ID_VACC_FUNDING_CAT_n := sys.diutil.bool_to_int(ID_VACC_FUNDING_CAT_nin);
      l_ID_VACC_ADV_REACTION_n := sys.diutil.bool_to_int(ID_VACC_ADV_REACTION_nin);
      l_APPLICATION_SPOT_CODE_n := sys.diutil.bool_to_int(APPLICATION_SPOT_CODE_nin);
      l_VACC_ROUTE_DATA_n := sys.diutil.bool_to_int(VACC_ROUTE_DATA_nin);
      l_DT_DOC_DELIVERY_TSTZ_n := sys.diutil.bool_to_int(DT_DOC_DELIVERY_TSTZ_nin);
      l_DOC_VIS_DESC_n := sys.diutil.bool_to_int(DOC_VIS_DESC_nin);
      l_FUNDING_SOURCE_DESC_n := sys.diutil.bool_to_int(FUNDING_SOURCE_DESC_nin);



l_sql := 'UPDATE DRUG_PRESC_PLAN SET '
     || ' ID_DRUG_PRESC_DET = decode (' || l_ID_DRUG_PRESC_DET_n || ',0,:id_drug_presc_det_in, NVL (:id_drug_presc_det_in, ID_DRUG_PRESC_DET)) '|| ','
     || ' ID_DRUG_TAKE_TIME = decode (' || l_ID_DRUG_TAKE_TIME_n || ',0,:id_drug_take_time_in, NVL (:id_drug_take_time_in, ID_DRUG_TAKE_TIME)) '|| ','
     || ' ID_PROF_WRITES = decode (' || l_ID_PROF_WRITES_n || ',0,:id_prof_writes_in, NVL (:id_prof_writes_in, ID_PROF_WRITES)) '|| ','
     || ' DOSAGE = decode (' || l_DOSAGE_n || ',0,:dosage_in, NVL (:dosage_in, DOSAGE)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' NOTES = decode (' || l_NOTES_n || ',0,:notes_in, NVL (:notes_in, NOTES)) '|| ','
     || ' ID_PROF_CANCEL = decode (' || l_ID_PROF_CANCEL_n || ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) '|| ','
     || ' NOTES_CANCEL = decode (' || l_NOTES_CANCEL_n || ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) '|| ','
     || ' ID_EPISODE = decode (' || l_ID_EPISODE_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) '|| ','
     || ' RATE = decode (' || l_RATE_n || ',0,:rate_in, NVL (:rate_in, RATE)) '|| ','
     || ' DOSAGE_EXEC = decode (' || l_DOSAGE_EXEC_n || ',0,:dosage_exec_in, NVL (:dosage_exec_in, DOSAGE_EXEC)) '|| ','
     || ' FLG_ADVERS_REACT = decode (' || l_FLG_ADVERS_REACT_n || ',0,:flg_advers_react_in, NVL (:flg_advers_react_in, FLG_ADVERS_REACT)) '|| ','
     || ' NOTES_ADVERS_REACT = decode (' || l_NOTES_ADVERS_REACT_n || ',0,:notes_advers_react_in, NVL (:notes_advers_react_in, NOTES_ADVERS_REACT)) '|| ','
     || ' APPLICATION_SPOT = decode (' || l_APPLICATION_SPOT_n || ',0,:application_spot_in, NVL (:application_spot_in, APPLICATION_SPOT)) '|| ','
     || ' LOT_NUMBER = decode (' || l_LOT_NUMBER_n || ',0,:lot_number_in, NVL (:lot_number_in, LOT_NUMBER)) '|| ','
     || ' DT_EXPIRATION = decode (' || l_DT_EXPIRATION_n || ',0,:dt_expiration_in, NVL (:dt_expiration_in, DT_EXPIRATION)) '|| ','
     || ' ID_VACC_MED_EXT = decode (' || l_ID_VACC_MED_EXT_n || ',0,:id_vacc_med_ext_in, NVL (:id_vacc_med_ext_in, ID_VACC_MED_EXT)) '|| ','
     || ' DT_PLAN_TSTZ = decode (' || l_DT_PLAN_TSTZ_n || ',0,:dt_plan_tstz_in, NVL (:dt_plan_tstz_in, DT_PLAN_TSTZ)) '|| ','
     || ' DT_TAKE_TSTZ = decode (' || l_DT_TAKE_TSTZ_n || ',0,:dt_take_tstz_in, NVL (:dt_take_tstz_in, DT_TAKE_TSTZ)) '|| ','
     || ' DT_CANCEL_TSTZ = decode (' || l_DT_CANCEL_TSTZ_n || ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) '|| ','
     || ' ORIGIN = decode (' || l_ORIGIN_n || ',0,:origin_in, NVL (:origin_in, ORIGIN)) '|| ','
     || ' DT_NEXT_TAKE = decode (' || l_DT_NEXT_TAKE_n || ',0,:dt_next_take_in, NVL (:dt_next_take_in, DT_NEXT_TAKE)) '|| ','
     || ' ID_PROF_ADM = decode (' || l_ID_PROF_ADM_n || ',0,:id_prof_adm_in, NVL (:id_prof_adm_in, ID_PROF_ADM)) '|| ','
     || ' DT_ADM_TSTZ = decode (' || l_DT_ADM_TSTZ_n || ',0,:dt_adm_tstz_in, NVL (:dt_adm_tstz_in, DT_ADM_TSTZ)) '|| ','
     || ' DOSAGE_UNIT_MEASURE = decode (' || l_DOSAGE_UNIT_MEASURE_n || ',0,:dosage_unit_measure_in, NVL (:dosage_unit_measure_in, DOSAGE_UNIT_MEASURE)) '|| ','
     || ' ID_FREETEXT = decode (' || l_ID_FREETEXT_n || ',0,:id_freetext_in, NVL (:id_freetext_in, ID_FREETEXT)) '|| ','
     || ' FLG_DOSAGE_CHECK = decode (' || l_FLG_DOSAGE_CHECK_n || ',0,:flg_dosage_check_in, NVL (:flg_dosage_check_in, FLG_DOSAGE_CHECK)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' DOSAGE_CHANGE_JUSTIFY = decode (' || l_DOSAGE_CHANGE_JUSTIFY_n || ',0,:dosage_change_justify_in, NVL (:dosage_change_justify_in, DOSAGE_CHANGE_JUSTIFY)) '|| ','
     || ' RATE_UNIT_MEASURE = decode (' || l_RATE_UNIT_MEASURE_n || ',0,:rate_unit_measure_in, NVL (:rate_unit_measure_in, RATE_UNIT_MEASURE)) '|| ','
     || ' ID_PROF_WITNESS = decode (' || l_ID_PROF_WITNESS_n || ',0,:id_prof_witness_in, NVL (:id_prof_witness_in, ID_PROF_WITNESS)) '|| ','
     || ' ID_PRESC_DIR_DOSEFREQ = decode (' || l_ID_PRESC_DIR_DOSEFREQ_n || ',0,:id_presc_dir_dosefreq_in, NVL (:id_presc_dir_dosefreq_in, ID_PRESC_DIR_DOSEFREQ)) '|| ','
     || ' REFERENCE_VALUE = decode (' || l_REFERENCE_VALUE_n || ',0,:reference_value_in, NVL (:reference_value_in, REFERENCE_VALUE)) '|| ','
     || ' ID_UNIT_REFERENCE_VALUE = decode (' || l_ID_UNIT_REFERENCE_VALUE_n || ',0,:id_unit_reference_value_in, NVL (:id_unit_reference_value_in, ID_UNIT_REFERENCE_VALUE)) '|| ','
     || ' BARCODE = decode (' || l_BARCODE_n || ',0,:barcode_in, NVL (:barcode_in, BARCODE)) '|| ','
     || ' SUMMARY = decode (' || l_SUMMARY_n || ',0,:summary_in, NVL (:summary_in, SUMMARY)) '|| ','
     || ' REASON = decode (' || l_REASON_n || ',0,:reason_in, NVL (:reason_in, REASON)) '|| ','
     || ' ID_CANCEL_REASON = decode (' || l_ID_CANCEL_REASON_n || ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) '|| ','
     || ' CANCEL_REASON_DESCR = decode (' || l_CANCEL_REASON_DESCR_n || ',0,:cancel_reason_descr_in, NVL (:cancel_reason_descr_in, CANCEL_REASON_DESCR)) '|| ','
     || ' DT_VALUE_DRIP_CHANGE = decode (' || l_DT_VALUE_DRIP_CHANGE_n || ',0,:dt_value_drip_change_in, NVL (:dt_value_drip_change_in, DT_VALUE_DRIP_CHANGE)) '|| ','
     || ' FLG_CO_SIGN = decode (' || l_FLG_CO_SIGN_n || ',0,:flg_co_sign_in, NVL (:flg_co_sign_in, FLG_CO_SIGN)) '|| ','
     || ' ID_PROF_CO_SIGN = decode (' || l_ID_PROF_CO_SIGN_n || ',0,:id_prof_co_sign_in, NVL (:id_prof_co_sign_in, ID_PROF_CO_SIGN)) '|| ','
     || ' DT_CO_SIGN = decode (' || l_DT_CO_SIGN_n || ',0,:dt_co_sign_in, NVL (:dt_co_sign_in, DT_CO_SIGN)) '|| ','
     || ' ID_ORDER_TYPE = decode (' || l_ID_ORDER_TYPE_n || ',0,:id_order_type_in, NVL (:id_order_type_in, ID_ORDER_TYPE)) '|| ','
     || ' ID_PROF_RATE_CHANGE = decode (' || l_ID_PROF_RATE_CHANGE_n || ',0,:id_prof_rate_change_in, NVL (:id_prof_rate_change_in, ID_PROF_RATE_CHANGE)) '|| ','
     || ' DT_END_BOTTLE = decode (' || l_DT_END_BOTTLE_n || ',0,:dt_end_bottle_in, NVL (:dt_end_bottle_in, DT_END_BOTTLE)) '|| ','
     || ' ID_PROF_EDIT_DISC = decode (' || l_ID_PROF_EDIT_DISC_n || ',0,:id_prof_edit_disc_in, NVL (:id_prof_edit_disc_in, ID_PROF_EDIT_DISC)) '|| ','
     || ' DT_EDIT_DISCONTINUE = decode (' || l_DT_EDIT_DISCONTINUE_n || ',0,:dt_edit_discontinue_in, NVL (:dt_edit_discontinue_in, DT_EDIT_DISCONTINUE)) '|| ','
     || ' JUSTIFY_DESCR = decode (' || l_JUSTIFY_DESCR_n || ',0,:justify_descr_in, NVL (:justify_descr_in, JUSTIFY_DESCR)) '|| ','
     || ' FLG_TOTALLY_ADM = decode (' || l_FLG_TOTALLY_ADM_n || ',0,:flg_totally_adm_in, NVL (:flg_totally_adm_in, FLG_TOTALLY_ADM)) '|| ','
     || ' FLG_TYPE_DATE = decode (' || l_FLG_TYPE_DATE_n || ',0,:flg_type_date_in, NVL (:flg_type_date_in, FLG_TYPE_DATE)) '|| ','
     || ' ID_VACC_FUNDING_SOURCE = decode (' || l_ID_VACC_FUNDING_SOURCE_n || ',0,:id_vacc_funding_source_in, NVL (:id_vacc_funding_source_in, ID_VACC_FUNDING_SOURCE)) '|| ','
     || ' ID_VACC_DOC_VIS = decode (' || l_ID_VACC_DOC_VIS_n || ',0,:id_vacc_doc_vis_in, NVL (:id_vacc_doc_vis_in, ID_VACC_DOC_VIS)) '|| ','
     || ' ID_VACC_ORIGIN = decode (' || l_ID_VACC_ORIGIN_n || ',0,:id_vacc_origin_in, NVL (:id_vacc_origin_in, ID_VACC_ORIGIN)) '|| ','
     || ' ADMINISTRED_DESC = decode (' || l_ADMINISTRED_DESC_n || ',0,:administred_desc_in, NVL (:administred_desc_in, ADMINISTRED_DESC)) '|| ','
     || ' ORDERED_DESC = decode (' || l_ORDERED_DESC_n || ',0,:ordered_desc_in, NVL (:ordered_desc_in, ORDERED_DESC)) '|| ','
     || ' ORIGIN_DESC = decode (' || l_ORIGIN_DESC_n || ',0,:origin_desc_in, NVL (:origin_desc_in, ORIGIN_DESC)) '|| ','
     || ' ID_ORDERED = decode (' || l_ID_ORDERED_n || ',0,:id_ordered_in, NVL (:id_ordered_in, ID_ORDERED)) '|| ','
     || ' ID_ADMINISTRED = decode (' || l_ID_ADMINISTRED_n || ',0,:id_administred_in, NVL (:id_administred_in, ID_ADMINISTRED)) '|| ','
     || ' ID_VACC_FUNDING_CAT = decode (' || l_ID_VACC_FUNDING_CAT_n || ',0,:id_vacc_funding_cat_in, NVL (:id_vacc_funding_cat_in, ID_VACC_FUNDING_CAT)) '|| ','
     || ' ID_VACC_ADV_REACTION = decode (' || l_ID_VACC_ADV_REACTION_n || ',0,:id_vacc_adv_reaction_in, NVL (:id_vacc_adv_reaction_in, ID_VACC_ADV_REACTION)) '|| ','
     || ' APPLICATION_SPOT_CODE = decode (' || l_APPLICATION_SPOT_CODE_n || ',0,:application_spot_code_in, NVL (:application_spot_code_in, APPLICATION_SPOT_CODE)) '|| ','
     || ' VACC_ROUTE_DATA = decode (' || l_VACC_ROUTE_DATA_n || ',0,:vacc_route_data_in, NVL (:vacc_route_data_in, VACC_ROUTE_DATA)) '|| ','
     || ' DT_DOC_DELIVERY_TSTZ = decode (' || l_DT_DOC_DELIVERY_TSTZ_n || ',0,:dt_doc_delivery_tstz_in, NVL (:dt_doc_delivery_tstz_in, DT_DOC_DELIVERY_TSTZ)) '|| ','
     || ' DOC_VIS_DESC = decode (' || l_DOC_VIS_DESC_n || ',0,:doc_vis_desc_in, NVL (:doc_vis_desc_in, DOC_VIS_DESC)) '|| ','
     || ' FUNDING_SOURCE_DESC = decode (' || l_FUNDING_SOURCE_DESC_n || ',0,:funding_source_desc_in, NVL (:funding_source_desc_in, FUNDING_SOURCE_DESC)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_drug_presc_det_in,
     id_drug_take_time_in,
     id_prof_writes_in,
     dosage_in,
     flg_status_in,
     notes_in,
     id_prof_cancel_in,
     notes_cancel_in,
     id_episode_in,
     rate_in,
     dosage_exec_in,
     flg_advers_react_in,
     notes_advers_react_in,
     application_spot_in,
     lot_number_in,
     dt_expiration_in,
     id_vacc_med_ext_in,
     dt_plan_tstz_in,
     dt_take_tstz_in,
     dt_cancel_tstz_in,
     origin_in,
     dt_next_take_in,
     id_prof_adm_in,
     dt_adm_tstz_in,
     dosage_unit_measure_in,
     id_freetext_in,
     flg_dosage_check_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     dosage_change_justify_in,
     rate_unit_measure_in,
     id_prof_witness_in,
     id_presc_dir_dosefreq_in,
     reference_value_in,
     id_unit_reference_value_in,
     barcode_in,
     summary_in,
     reason_in,
     id_cancel_reason_in,
     cancel_reason_descr_in,
     dt_value_drip_change_in,
     flg_co_sign_in,
     id_prof_co_sign_in,
     dt_co_sign_in,
     id_order_type_in,
     id_prof_rate_change_in,
     dt_end_bottle_in,
     id_prof_edit_disc_in,
     dt_edit_discontinue_in,
     justify_descr_in,
     flg_totally_adm_in,
     flg_type_date_in,
     id_vacc_funding_source_in,
     id_vacc_doc_vis_in,
     id_vacc_origin_in,
     administred_desc_in,
     ordered_desc_in,
     origin_desc_in,
     id_ordered_in,
     id_administred_in,
     id_vacc_funding_cat_in,
     id_vacc_adv_reaction_in,
     application_spot_code_in,
     vacc_route_data_in,
     dt_doc_delivery_tstz_in,
     doc_vis_desc_in,
     funding_source_desc_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              PK_ALERT_EXCEPTIONS.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'DRUG_PRESC_PLAN');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           IF l_name = 'DPN_PRL_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_WITNESS'
               , value_in => id_prof_witness_in);
           END IF;
           IF l_name = 'DPP_OT_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ORDER_TYPE'
               , value_in => id_order_type_in);
           END IF;
           IF l_name = 'DPP_PROF_CO_SIGN_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CO_SIGN'
               , value_in => id_prof_co_sign_in);
           END IF;
           IF l_name = 'DPP_PROF_EDIT_DISC_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_EDIT_DISC'
               , value_in => id_prof_edit_disc_in);
           END IF;
           IF l_name = 'DPP_PROF_R_CHANGE_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_RATE_CHANGE'
               , value_in => id_prof_rate_change_in);
           END IF;
           IF l_name = 'DPP_UME_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'DOSAGE_UNIT_MEASURE'
               , value_in => dosage_unit_measure_in);
           END IF;
           IF l_name = 'DRPRP_DRGPR_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG_PRESC_DET'
               , value_in => id_drug_presc_det_in);
           END IF;
           IF l_name = 'DRPRP_DRTKT_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG_TAKE_TIME'
               , value_in => id_drug_take_time_in);
           END IF;
           IF l_name = 'DRPRP_PDDOSEFREQ_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PRESC_DIR_DOSEFREQ'
               , value_in => id_presc_dir_dosefreq_in);
           END IF;
           IF l_name = 'DRPRP_PROF_CANCEL_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'DRPRP_PROF_WRITES_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_WRITES'
               , value_in => id_prof_writes_in);
           END IF;
           IF l_name = 'DRPRP_UNITMEASURE_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_REFERENCE_VALUE'
               , value_in => id_unit_reference_value_in);
           END IF;
           IF l_name = 'DRPRP_UNITM_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'RATE_UNIT_MEASURE'
               , value_in => rate_unit_measure_in);
           END IF;
           IF l_name = 'ID_VACC_FUNDING_CAT_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_FUNDING_CAT'
               , value_in => id_vacc_funding_cat_in);
           END IF;
           IF l_name = 'PP_CANCEL_REASON_ADM_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'VACC_ADV_REACTION_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_ADV_REACTION'
               , value_in => id_vacc_adv_reaction_in);
           END IF;
           IF l_name = 'VACC_DOC_VIS_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_DOC_VIS'
               , value_in => id_vacc_doc_vis_in);
           END IF;
           IF l_name = 'VACC_FUNDING_SOURCE_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_FUNDING_SOURCE'
               , value_in => id_vacc_funding_source_in);
           END IF;
           IF l_name = 'VACC_ORIGIN_CVX'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_VACC_ORIGIN'
               , value_in => id_vacc_origin_in);
           END IF;
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      ID_DRUG_PRESC_DET_nin IN BOOLEAN := TRUE,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      ID_DRUG_TAKE_TIME_nin IN BOOLEAN := TRUE,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      ID_PROF_WRITES_nin IN BOOLEAN := TRUE,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      DOSAGE_nin IN BOOLEAN := TRUE,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      RATE_nin IN BOOLEAN := TRUE,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      DOSAGE_EXEC_nin IN BOOLEAN := TRUE,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      FLG_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      NOTES_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      APPLICATION_SPOT_nin IN BOOLEAN := TRUE,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      LOT_NUMBER_nin IN BOOLEAN := TRUE,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      DT_EXPIRATION_nin IN BOOLEAN := TRUE,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      ID_VACC_MED_EXT_nin IN BOOLEAN := TRUE,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      DT_PLAN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      DT_TAKE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      ORIGIN_nin IN BOOLEAN := TRUE,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      DT_NEXT_TAKE_nin IN BOOLEAN := TRUE,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      ID_PROF_ADM_nin IN BOOLEAN := TRUE,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      DT_ADM_TSTZ_nin IN BOOLEAN := TRUE,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      DOSAGE_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT NULL,
      ID_FREETEXT_nin IN BOOLEAN := TRUE,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      FLG_DOSAGE_CHECK_nin IN BOOLEAN := TRUE,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      DOSAGE_CHANGE_JUSTIFY_nin IN BOOLEAN := TRUE,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      RATE_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      ID_PROF_WITNESS_nin IN BOOLEAN := TRUE,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      ID_PRESC_DIR_DOSEFREQ_nin IN BOOLEAN := TRUE,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT NULL,
      REFERENCE_VALUE_nin IN BOOLEAN := TRUE,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT NULL,
      ID_UNIT_REFERENCE_VALUE_nin IN BOOLEAN := TRUE,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      BARCODE_nin IN BOOLEAN := TRUE,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      SUMMARY_nin IN BOOLEAN := TRUE,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      REASON_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      CANCEL_REASON_DESCR_nin IN BOOLEAN := TRUE,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      DT_VALUE_DRIP_CHANGE_nin IN BOOLEAN := TRUE,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT NULL,
      FLG_CO_SIGN_nin IN BOOLEAN := TRUE,
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      ID_PROF_CO_SIGN_nin IN BOOLEAN := TRUE,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      DT_CO_SIGN_nin IN BOOLEAN := TRUE,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      ID_ORDER_TYPE_nin IN BOOLEAN := TRUE,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      ID_PROF_RATE_CHANGE_nin IN BOOLEAN := TRUE,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      DT_END_BOTTLE_nin IN BOOLEAN := TRUE,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      ID_PROF_EDIT_DISC_nin IN BOOLEAN := TRUE,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      DT_EDIT_DISCONTINUE_nin IN BOOLEAN := TRUE,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      JUSTIFY_DESCR_nin IN BOOLEAN := TRUE,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL,
      FLG_TOTALLY_ADM_nin IN BOOLEAN := TRUE,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      FLG_TYPE_DATE_nin IN BOOLEAN := TRUE,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_SOURCE_nin IN BOOLEAN := TRUE,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      ID_VACC_DOC_VIS_nin IN BOOLEAN := TRUE,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      ID_VACC_ORIGIN_nin IN BOOLEAN := TRUE,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ADMINISTRED_DESC_nin IN BOOLEAN := TRUE,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      ORDERED_DESC_nin IN BOOLEAN := TRUE,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      ORIGIN_DESC_nin IN BOOLEAN := TRUE,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      ID_ORDERED_nin IN BOOLEAN := TRUE,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      ID_ADMINISTRED_nin IN BOOLEAN := TRUE,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      ID_VACC_FUNDING_CAT_nin IN BOOLEAN := TRUE,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      ID_VACC_ADV_REACTION_nin IN BOOLEAN := TRUE,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      APPLICATION_SPOT_CODE_nin IN BOOLEAN := TRUE,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      VACC_ROUTE_DATA_nin IN BOOLEAN := TRUE,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      DT_DOC_DELIVERY_TSTZ_nin IN BOOLEAN := TRUE,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      DOC_VIS_DESC_nin IN BOOLEAN := TRUE,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
      FUNDING_SOURCE_DESC_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_drug_presc_det_in => id_drug_presc_det_in,
      ID_DRUG_PRESC_DET_nin => ID_DRUG_PRESC_DET_nin,
      id_drug_take_time_in => id_drug_take_time_in,
      ID_DRUG_TAKE_TIME_nin => ID_DRUG_TAKE_TIME_nin,
      id_prof_writes_in => id_prof_writes_in,
      ID_PROF_WRITES_nin => ID_PROF_WRITES_nin,
      dosage_in => dosage_in,
      DOSAGE_nin => DOSAGE_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      rate_in => rate_in,
      RATE_nin => RATE_nin,
      dosage_exec_in => dosage_exec_in,
      DOSAGE_EXEC_nin => DOSAGE_EXEC_nin,
      flg_advers_react_in => flg_advers_react_in,
      FLG_ADVERS_REACT_nin => FLG_ADVERS_REACT_nin,
      notes_advers_react_in => notes_advers_react_in,
      NOTES_ADVERS_REACT_nin => NOTES_ADVERS_REACT_nin,
      application_spot_in => application_spot_in,
      APPLICATION_SPOT_nin => APPLICATION_SPOT_nin,
      lot_number_in => lot_number_in,
      LOT_NUMBER_nin => LOT_NUMBER_nin,
      dt_expiration_in => dt_expiration_in,
      DT_EXPIRATION_nin => DT_EXPIRATION_nin,
      id_vacc_med_ext_in => id_vacc_med_ext_in,
      ID_VACC_MED_EXT_nin => ID_VACC_MED_EXT_nin,
      dt_plan_tstz_in => dt_plan_tstz_in,
      DT_PLAN_TSTZ_nin => DT_PLAN_TSTZ_nin,
      dt_take_tstz_in => dt_take_tstz_in,
      DT_TAKE_TSTZ_nin => DT_TAKE_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      origin_in => origin_in,
      ORIGIN_nin => ORIGIN_nin,
      dt_next_take_in => dt_next_take_in,
      DT_NEXT_TAKE_nin => DT_NEXT_TAKE_nin,
      id_prof_adm_in => id_prof_adm_in,
      ID_PROF_ADM_nin => ID_PROF_ADM_nin,
      dt_adm_tstz_in => dt_adm_tstz_in,
      DT_ADM_TSTZ_nin => DT_ADM_TSTZ_nin,
      dosage_unit_measure_in => dosage_unit_measure_in,
      DOSAGE_UNIT_MEASURE_nin => DOSAGE_UNIT_MEASURE_nin,
      id_freetext_in => id_freetext_in,
      ID_FREETEXT_nin => ID_FREETEXT_nin,
      flg_dosage_check_in => flg_dosage_check_in,
      FLG_DOSAGE_CHECK_nin => FLG_DOSAGE_CHECK_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      dosage_change_justify_in => dosage_change_justify_in,
      DOSAGE_CHANGE_JUSTIFY_nin => DOSAGE_CHANGE_JUSTIFY_nin,
      rate_unit_measure_in => rate_unit_measure_in,
      RATE_UNIT_MEASURE_nin => RATE_UNIT_MEASURE_nin,
      id_prof_witness_in => id_prof_witness_in,
      ID_PROF_WITNESS_nin => ID_PROF_WITNESS_nin,
      id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
      ID_PRESC_DIR_DOSEFREQ_nin => ID_PRESC_DIR_DOSEFREQ_nin,
      reference_value_in => reference_value_in,
      REFERENCE_VALUE_nin => REFERENCE_VALUE_nin,
      id_unit_reference_value_in => id_unit_reference_value_in,
      ID_UNIT_REFERENCE_VALUE_nin => ID_UNIT_REFERENCE_VALUE_nin,
      barcode_in => barcode_in,
      BARCODE_nin => BARCODE_nin,
      summary_in => summary_in,
      SUMMARY_nin => SUMMARY_nin,
      reason_in => reason_in,
      REASON_nin => REASON_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      cancel_reason_descr_in => cancel_reason_descr_in,
      CANCEL_REASON_DESCR_nin => CANCEL_REASON_DESCR_nin,
      dt_value_drip_change_in => dt_value_drip_change_in,
      DT_VALUE_DRIP_CHANGE_nin => DT_VALUE_DRIP_CHANGE_nin,
      flg_co_sign_in => flg_co_sign_in,
      FLG_CO_SIGN_nin => FLG_CO_SIGN_nin,
      id_prof_co_sign_in => id_prof_co_sign_in,
      ID_PROF_CO_SIGN_nin => ID_PROF_CO_SIGN_nin,
      dt_co_sign_in => dt_co_sign_in,
      DT_CO_SIGN_nin => DT_CO_SIGN_nin,
      id_order_type_in => id_order_type_in,
      ID_ORDER_TYPE_nin => ID_ORDER_TYPE_nin,
      id_prof_rate_change_in => id_prof_rate_change_in,
      ID_PROF_RATE_CHANGE_nin => ID_PROF_RATE_CHANGE_nin,
      dt_end_bottle_in => dt_end_bottle_in,
      DT_END_BOTTLE_nin => DT_END_BOTTLE_nin,
      id_prof_edit_disc_in => id_prof_edit_disc_in,
      ID_PROF_EDIT_DISC_nin => ID_PROF_EDIT_DISC_nin,
      dt_edit_discontinue_in => dt_edit_discontinue_in,
      DT_EDIT_DISCONTINUE_nin => DT_EDIT_DISCONTINUE_nin,
      justify_descr_in => justify_descr_in,
      JUSTIFY_DESCR_nin => JUSTIFY_DESCR_nin,
      flg_totally_adm_in => flg_totally_adm_in,
      FLG_TOTALLY_ADM_nin => FLG_TOTALLY_ADM_nin,
      flg_type_date_in => flg_type_date_in,
      FLG_TYPE_DATE_nin => FLG_TYPE_DATE_nin,
      id_vacc_funding_source_in => id_vacc_funding_source_in,
      ID_VACC_FUNDING_SOURCE_nin => ID_VACC_FUNDING_SOURCE_nin,
      id_vacc_doc_vis_in => id_vacc_doc_vis_in,
      ID_VACC_DOC_VIS_nin => ID_VACC_DOC_VIS_nin,
      id_vacc_origin_in => id_vacc_origin_in,
      ID_VACC_ORIGIN_nin => ID_VACC_ORIGIN_nin,
      administred_desc_in => administred_desc_in,
      ADMINISTRED_DESC_nin => ADMINISTRED_DESC_nin,
      ordered_desc_in => ordered_desc_in,
      ORDERED_DESC_nin => ORDERED_DESC_nin,
      origin_desc_in => origin_desc_in,
      ORIGIN_DESC_nin => ORIGIN_DESC_nin,
      id_ordered_in => id_ordered_in,
      ID_ORDERED_nin => ID_ORDERED_nin,
      id_administred_in => id_administred_in,
      ID_ADMINISTRED_nin => ID_ADMINISTRED_nin,
      id_vacc_funding_cat_in => id_vacc_funding_cat_in,
      ID_VACC_FUNDING_CAT_nin => ID_VACC_FUNDING_CAT_nin,
      id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
      ID_VACC_ADV_REACTION_nin => ID_VACC_ADV_REACTION_nin,
      application_spot_code_in => application_spot_code_in,
      APPLICATION_SPOT_CODE_nin => APPLICATION_SPOT_CODE_nin,
      vacc_route_data_in => vacc_route_data_in,
      VACC_ROUTE_DATA_nin => VACC_ROUTE_DATA_nin,
      dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
      DT_DOC_DELIVERY_TSTZ_nin => DT_DOC_DELIVERY_TSTZ_nin,
      doc_vis_desc_in => doc_vis_desc_in,
      DOC_VIS_DESC_nin => DOC_VIS_DESC_nin,
      funding_source_desc_in => funding_source_desc_in,
      FUNDING_SOURCE_DESC_nin => FUNDING_SOURCE_DESC_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN DRUG_PRESC_PLAN%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_drug_presc_plan_in => rec_in.ID_DRUG_PRESC_PLAN,
         id_drug_presc_det_in => rec_in.ID_DRUG_PRESC_DET,
         id_drug_take_time_in => rec_in.ID_DRUG_TAKE_TIME,
         id_prof_writes_in => rec_in.ID_PROF_WRITES,
         dosage_in => rec_in.DOSAGE,
         flg_status_in => rec_in.FLG_STATUS,
         notes_in => rec_in.NOTES,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         id_episode_in => rec_in.ID_EPISODE,
         rate_in => rec_in.RATE,
         dosage_exec_in => rec_in.DOSAGE_EXEC,
         flg_advers_react_in => rec_in.FLG_ADVERS_REACT,
         notes_advers_react_in => rec_in.NOTES_ADVERS_REACT,
         application_spot_in => rec_in.APPLICATION_SPOT,
         lot_number_in => rec_in.LOT_NUMBER,
         dt_expiration_in => rec_in.DT_EXPIRATION,
         id_vacc_med_ext_in => rec_in.ID_VACC_MED_EXT,
         dt_plan_tstz_in => rec_in.DT_PLAN_TSTZ,
         dt_take_tstz_in => rec_in.DT_TAKE_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         origin_in => rec_in.ORIGIN,
         dt_next_take_in => rec_in.DT_NEXT_TAKE,
         id_prof_adm_in => rec_in.ID_PROF_ADM,
         dt_adm_tstz_in => rec_in.DT_ADM_TSTZ,
         dosage_unit_measure_in => rec_in.DOSAGE_UNIT_MEASURE,
         id_freetext_in => rec_in.ID_FREETEXT,
         flg_dosage_check_in => rec_in.FLG_DOSAGE_CHECK,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         dosage_change_justify_in => rec_in.DOSAGE_CHANGE_JUSTIFY,
         rate_unit_measure_in => rec_in.RATE_UNIT_MEASURE,
         id_prof_witness_in => rec_in.ID_PROF_WITNESS,
         id_presc_dir_dosefreq_in => rec_in.ID_PRESC_DIR_DOSEFREQ,
         reference_value_in => rec_in.REFERENCE_VALUE,
         id_unit_reference_value_in => rec_in.ID_UNIT_REFERENCE_VALUE,
         barcode_in => rec_in.BARCODE,
         summary_in => rec_in.SUMMARY,
         reason_in => rec_in.REASON,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         cancel_reason_descr_in => rec_in.CANCEL_REASON_DESCR,
         dt_value_drip_change_in => rec_in.DT_VALUE_DRIP_CHANGE,
         flg_co_sign_in => rec_in.FLG_CO_SIGN,
         id_prof_co_sign_in => rec_in.ID_PROF_CO_SIGN,
         dt_co_sign_in => rec_in.DT_CO_SIGN,
         id_order_type_in => rec_in.ID_ORDER_TYPE,
         id_prof_rate_change_in => rec_in.ID_PROF_RATE_CHANGE,
         dt_end_bottle_in => rec_in.DT_END_BOTTLE,
         id_prof_edit_disc_in => rec_in.ID_PROF_EDIT_DISC,
         dt_edit_discontinue_in => rec_in.DT_EDIT_DISCONTINUE,
         justify_descr_in => rec_in.JUSTIFY_DESCR,
         flg_totally_adm_in => rec_in.FLG_TOTALLY_ADM,
         flg_type_date_in => rec_in.FLG_TYPE_DATE,
         id_vacc_funding_source_in => rec_in.ID_VACC_FUNDING_SOURCE,
         id_vacc_doc_vis_in => rec_in.ID_VACC_DOC_VIS,
         id_vacc_origin_in => rec_in.ID_VACC_ORIGIN,
         administred_desc_in => rec_in.ADMINISTRED_DESC,
         ordered_desc_in => rec_in.ORDERED_DESC,
         origin_desc_in => rec_in.ORIGIN_DESC,
         id_ordered_in => rec_in.ID_ORDERED,
         id_administred_in => rec_in.ID_ADMINISTRED,
         id_vacc_funding_cat_in => rec_in.ID_VACC_FUNDING_CAT,
         id_vacc_adv_reaction_in => rec_in.ID_VACC_ADV_REACTION,
         application_spot_code_in => rec_in.APPLICATION_SPOT_CODE,
         vacc_route_data_in => rec_in.VACC_ROUTE_DATA,
         dt_doc_delivery_tstz_in => rec_in.DT_DOC_DELIVERY_TSTZ,
         doc_vis_desc_in => rec_in.DOC_VIS_DESC,
         funding_source_desc_in => rec_in.FUNDING_SOURCE_DESC

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN DRUG_PRESC_PLAN%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_drug_presc_plan_in => rec_in.ID_DRUG_PRESC_PLAN,
         id_drug_presc_det_in => rec_in.ID_DRUG_PRESC_DET,
         id_drug_take_time_in => rec_in.ID_DRUG_TAKE_TIME,
         id_prof_writes_in => rec_in.ID_PROF_WRITES,
         dosage_in => rec_in.DOSAGE,
         flg_status_in => rec_in.FLG_STATUS,
         notes_in => rec_in.NOTES,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         id_episode_in => rec_in.ID_EPISODE,
         rate_in => rec_in.RATE,
         dosage_exec_in => rec_in.DOSAGE_EXEC,
         flg_advers_react_in => rec_in.FLG_ADVERS_REACT,
         notes_advers_react_in => rec_in.NOTES_ADVERS_REACT,
         application_spot_in => rec_in.APPLICATION_SPOT,
         lot_number_in => rec_in.LOT_NUMBER,
         dt_expiration_in => rec_in.DT_EXPIRATION,
         id_vacc_med_ext_in => rec_in.ID_VACC_MED_EXT,
         dt_plan_tstz_in => rec_in.DT_PLAN_TSTZ,
         dt_take_tstz_in => rec_in.DT_TAKE_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         origin_in => rec_in.ORIGIN,
         dt_next_take_in => rec_in.DT_NEXT_TAKE,
         id_prof_adm_in => rec_in.ID_PROF_ADM,
         dt_adm_tstz_in => rec_in.DT_ADM_TSTZ,
         dosage_unit_measure_in => rec_in.DOSAGE_UNIT_MEASURE,
         id_freetext_in => rec_in.ID_FREETEXT,
         flg_dosage_check_in => rec_in.FLG_DOSAGE_CHECK,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         dosage_change_justify_in => rec_in.DOSAGE_CHANGE_JUSTIFY,
         rate_unit_measure_in => rec_in.RATE_UNIT_MEASURE,
         id_prof_witness_in => rec_in.ID_PROF_WITNESS,
         id_presc_dir_dosefreq_in => rec_in.ID_PRESC_DIR_DOSEFREQ,
         reference_value_in => rec_in.REFERENCE_VALUE,
         id_unit_reference_value_in => rec_in.ID_UNIT_REFERENCE_VALUE,
         barcode_in => rec_in.BARCODE,
         summary_in => rec_in.SUMMARY,
         reason_in => rec_in.REASON,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         cancel_reason_descr_in => rec_in.CANCEL_REASON_DESCR,
         dt_value_drip_change_in => rec_in.DT_VALUE_DRIP_CHANGE,
         flg_co_sign_in => rec_in.FLG_CO_SIGN,
         id_prof_co_sign_in => rec_in.ID_PROF_CO_SIGN,
         dt_co_sign_in => rec_in.DT_CO_SIGN,
         id_order_type_in => rec_in.ID_ORDER_TYPE,
         id_prof_rate_change_in => rec_in.ID_PROF_RATE_CHANGE,
         dt_end_bottle_in => rec_in.DT_END_BOTTLE,
         id_prof_edit_disc_in => rec_in.ID_PROF_EDIT_DISC,
         dt_edit_discontinue_in => rec_in.DT_EDIT_DISCONTINUE,
         justify_descr_in => rec_in.JUSTIFY_DESCR,
         flg_totally_adm_in => rec_in.FLG_TOTALLY_ADM,
         flg_type_date_in => rec_in.FLG_TYPE_DATE,
         id_vacc_funding_source_in => rec_in.ID_VACC_FUNDING_SOURCE,
         id_vacc_doc_vis_in => rec_in.ID_VACC_DOC_VIS,
         id_vacc_origin_in => rec_in.ID_VACC_ORIGIN,
         administred_desc_in => rec_in.ADMINISTRED_DESC,
         ordered_desc_in => rec_in.ORDERED_DESC,
         origin_desc_in => rec_in.ORIGIN_DESC,
         id_ordered_in => rec_in.ID_ORDERED,
         id_administred_in => rec_in.ID_ADMINISTRED,
         id_vacc_funding_cat_in => rec_in.ID_VACC_FUNDING_CAT,
         id_vacc_adv_reaction_in => rec_in.ID_VACC_ADV_REACTION,
         application_spot_code_in => rec_in.APPLICATION_SPOT_CODE,
         vacc_route_data_in => rec_in.VACC_ROUTE_DATA,
         dt_doc_delivery_tstz_in => rec_in.DT_DOC_DELIVERY_TSTZ,
         doc_vis_desc_in => rec_in.DOC_VIS_DESC,
         funding_source_desc_in => rec_in.FUNDING_SOURCE_DESC

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_drug_presc_plan_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE,
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT NULL,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT NULL,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT NULL,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT NULL,
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_drug_presc_plan_in => id_drug_presc_plan_in,
         id_drug_presc_det_in => id_drug_presc_det_in,
         id_drug_take_time_in => id_drug_take_time_in,
         id_prof_writes_in => id_prof_writes_in,
         dosage_in => dosage_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_in => id_episode_in,
         rate_in => rate_in,
         dosage_exec_in => dosage_exec_in,
         flg_advers_react_in => flg_advers_react_in,
         notes_advers_react_in => notes_advers_react_in,
         application_spot_in => application_spot_in,
         lot_number_in => lot_number_in,
         dt_expiration_in => dt_expiration_in,
         id_vacc_med_ext_in => id_vacc_med_ext_in,
         dt_plan_tstz_in => dt_plan_tstz_in,
         dt_take_tstz_in => dt_take_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         origin_in => origin_in,
         dt_next_take_in => dt_next_take_in,
         id_prof_adm_in => id_prof_adm_in,
         dt_adm_tstz_in => dt_adm_tstz_in,
         dosage_unit_measure_in => dosage_unit_measure_in,
         id_freetext_in => id_freetext_in,
         flg_dosage_check_in => flg_dosage_check_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         dosage_change_justify_in => dosage_change_justify_in,
         rate_unit_measure_in => rate_unit_measure_in,
         id_prof_witness_in => id_prof_witness_in,
         id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
         reference_value_in => reference_value_in,
         id_unit_reference_value_in => id_unit_reference_value_in,
         barcode_in => barcode_in,
         summary_in => summary_in,
         reason_in => reason_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_reason_descr_in => cancel_reason_descr_in,
         dt_value_drip_change_in => dt_value_drip_change_in,
         flg_co_sign_in => flg_co_sign_in,
         id_prof_co_sign_in => id_prof_co_sign_in,
         dt_co_sign_in => dt_co_sign_in,
         id_order_type_in => id_order_type_in,
         id_prof_rate_change_in => id_prof_rate_change_in,
         dt_end_bottle_in => dt_end_bottle_in,
         id_prof_edit_disc_in => id_prof_edit_disc_in,
         dt_edit_discontinue_in => dt_edit_discontinue_in,
         justify_descr_in => justify_descr_in,
         flg_totally_adm_in => flg_totally_adm_in,
         flg_type_date_in => flg_type_date_in,
         id_vacc_funding_source_in => id_vacc_funding_source_in,
         id_vacc_doc_vis_in => id_vacc_doc_vis_in,
         id_vacc_origin_in => id_vacc_origin_in,
         administred_desc_in => administred_desc_in,
         ordered_desc_in => ordered_desc_in,
         origin_desc_in => origin_desc_in,
         id_ordered_in => id_ordered_in,
         id_administred_in => id_administred_in,
         id_vacc_funding_cat_in => id_vacc_funding_cat_in,
         id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
         application_spot_code_in => application_spot_code_in,
         vacc_route_data_in => vacc_route_data_in,
         dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
         doc_vis_desc_in => doc_vis_desc_in,
         funding_source_desc_in => funding_source_desc_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_drug_presc_plan_in => id_drug_presc_plan_in,
            id_drug_presc_det_in => id_drug_presc_det_in,
            id_drug_take_time_in => id_drug_take_time_in,
            id_prof_writes_in => id_prof_writes_in,
            dosage_in => dosage_in,
            flg_status_in => flg_status_in,
            notes_in => notes_in,
            id_prof_cancel_in => id_prof_cancel_in,
            notes_cancel_in => notes_cancel_in,
            id_episode_in => id_episode_in,
            rate_in => rate_in,
            dosage_exec_in => dosage_exec_in,
            flg_advers_react_in => flg_advers_react_in,
            notes_advers_react_in => notes_advers_react_in,
            application_spot_in => application_spot_in,
            lot_number_in => lot_number_in,
            dt_expiration_in => dt_expiration_in,
            id_vacc_med_ext_in => id_vacc_med_ext_in,
            dt_plan_tstz_in => dt_plan_tstz_in,
            dt_take_tstz_in => dt_take_tstz_in,
            dt_cancel_tstz_in => dt_cancel_tstz_in,
            origin_in => origin_in,
            dt_next_take_in => dt_next_take_in,
            id_prof_adm_in => id_prof_adm_in,
            dt_adm_tstz_in => dt_adm_tstz_in,
            dosage_unit_measure_in => dosage_unit_measure_in,
            id_freetext_in => id_freetext_in,
            flg_dosage_check_in => flg_dosage_check_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            dosage_change_justify_in => dosage_change_justify_in,
            rate_unit_measure_in => rate_unit_measure_in,
            id_prof_witness_in => id_prof_witness_in,
            id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
            reference_value_in => reference_value_in,
            id_unit_reference_value_in => id_unit_reference_value_in,
            barcode_in => barcode_in,
            summary_in => summary_in,
            reason_in => reason_in,
            id_cancel_reason_in => id_cancel_reason_in,
            cancel_reason_descr_in => cancel_reason_descr_in,
            dt_value_drip_change_in => dt_value_drip_change_in,
            flg_co_sign_in => flg_co_sign_in,
            id_prof_co_sign_in => id_prof_co_sign_in,
            dt_co_sign_in => dt_co_sign_in,
            id_order_type_in => id_order_type_in,
            id_prof_rate_change_in => id_prof_rate_change_in,
            dt_end_bottle_in => dt_end_bottle_in,
            id_prof_edit_disc_in => id_prof_edit_disc_in,
            dt_edit_discontinue_in => dt_edit_discontinue_in,
            justify_descr_in => justify_descr_in,
            flg_totally_adm_in => flg_totally_adm_in,
            flg_type_date_in => flg_type_date_in,
            id_vacc_funding_source_in => id_vacc_funding_source_in,
            id_vacc_doc_vis_in => id_vacc_doc_vis_in,
            id_vacc_origin_in => id_vacc_origin_in,
            administred_desc_in => administred_desc_in,
            ordered_desc_in => ordered_desc_in,
            origin_desc_in => origin_desc_in,
            id_ordered_in => id_ordered_in,
            id_administred_in => id_administred_in,
            id_vacc_funding_cat_in => id_vacc_funding_cat_in,
            id_vacc_adv_reaction_in => id_vacc_adv_reaction_in,
            application_spot_code_in => application_spot_code_in,
            vacc_route_data_in => vacc_route_data_in,
            dt_doc_delivery_tstz_in => dt_doc_delivery_tstz_in,
            doc_vis_desc_in => doc_vis_desc_in,
            funding_source_desc_in => funding_source_desc_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_drug_presc_plan_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE,
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE DEFAULT NULL,
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE DEFAULT NULL,
      dosage_in IN DRUG_PRESC_PLAN.DOSAGE%TYPE DEFAULT NULL,
      flg_status_in IN DRUG_PRESC_PLAN.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN DRUG_PRESC_PLAN.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN DRUG_PRESC_PLAN.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_in IN DRUG_PRESC_PLAN.ID_EPISODE%TYPE DEFAULT NULL,
      rate_in IN DRUG_PRESC_PLAN.RATE%TYPE DEFAULT NULL,
      dosage_exec_in IN DRUG_PRESC_PLAN.DOSAGE_EXEC%TYPE DEFAULT NULL,
      flg_advers_react_in IN DRUG_PRESC_PLAN.FLG_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_advers_react_in IN DRUG_PRESC_PLAN.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      application_spot_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT%TYPE DEFAULT NULL,
      lot_number_in IN DRUG_PRESC_PLAN.LOT_NUMBER%TYPE DEFAULT NULL,
      dt_expiration_in IN DRUG_PRESC_PLAN.DT_EXPIRATION%TYPE DEFAULT NULL,
      id_vacc_med_ext_in IN DRUG_PRESC_PLAN.ID_VACC_MED_EXT%TYPE DEFAULT NULL,
      dt_plan_tstz_in IN DRUG_PRESC_PLAN.DT_PLAN_TSTZ%TYPE DEFAULT NULL,
      dt_take_tstz_in IN DRUG_PRESC_PLAN.DT_TAKE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DRUG_PRESC_PLAN.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      origin_in IN DRUG_PRESC_PLAN.ORIGIN%TYPE DEFAULT NULL,
      dt_next_take_in IN DRUG_PRESC_PLAN.DT_NEXT_TAKE%TYPE DEFAULT NULL,
      id_prof_adm_in IN DRUG_PRESC_PLAN.ID_PROF_ADM%TYPE DEFAULT NULL,
      dt_adm_tstz_in IN DRUG_PRESC_PLAN.DT_ADM_TSTZ%TYPE DEFAULT NULL,
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_freetext_in IN DRUG_PRESC_PLAN.ID_FREETEXT%TYPE DEFAULT NULL,
      flg_dosage_check_in IN DRUG_PRESC_PLAN.FLG_DOSAGE_CHECK%TYPE DEFAULT NULL,
      create_user_in IN DRUG_PRESC_PLAN.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DRUG_PRESC_PLAN.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DRUG_PRESC_PLAN.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DRUG_PRESC_PLAN.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DRUG_PRESC_PLAN.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DRUG_PRESC_PLAN.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      dosage_change_justify_in IN DRUG_PRESC_PLAN.DOSAGE_CHANGE_JUSTIFY%TYPE DEFAULT NULL,
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE DEFAULT NULL,
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      reference_value_in IN DRUG_PRESC_PLAN.REFERENCE_VALUE%TYPE DEFAULT NULL,
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE DEFAULT NULL,
      barcode_in IN DRUG_PRESC_PLAN.BARCODE%TYPE DEFAULT NULL,
      summary_in IN DRUG_PRESC_PLAN.SUMMARY%TYPE DEFAULT NULL,
      reason_in IN DRUG_PRESC_PLAN.REASON%TYPE DEFAULT NULL,
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_descr_in IN DRUG_PRESC_PLAN.CANCEL_REASON_DESCR%TYPE DEFAULT NULL,
      dt_value_drip_change_in IN DRUG_PRESC_PLAN.DT_VALUE_DRIP_CHANGE%TYPE DEFAULT NULL,
      flg_co_sign_in IN DRUG_PRESC_PLAN.FLG_CO_SIGN%TYPE DEFAULT NULL,
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE DEFAULT NULL,
      dt_co_sign_in IN DRUG_PRESC_PLAN.DT_CO_SIGN%TYPE DEFAULT NULL,
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE DEFAULT NULL,
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE DEFAULT NULL,
      dt_end_bottle_in IN DRUG_PRESC_PLAN.DT_END_BOTTLE%TYPE DEFAULT NULL,
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE DEFAULT NULL,
      dt_edit_discontinue_in IN DRUG_PRESC_PLAN.DT_EDIT_DISCONTINUE%TYPE DEFAULT NULL,
      justify_descr_in IN DRUG_PRESC_PLAN.JUSTIFY_DESCR%TYPE DEFAULT NULL,
      flg_totally_adm_in IN DRUG_PRESC_PLAN.FLG_TOTALLY_ADM%TYPE DEFAULT NULL,
      flg_type_date_in IN DRUG_PRESC_PLAN.FLG_TYPE_DATE%TYPE DEFAULT NULL,
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE DEFAULT NULL,
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE DEFAULT NULL,
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE DEFAULT NULL,
      administred_desc_in IN DRUG_PRESC_PLAN.ADMINISTRED_DESC%TYPE DEFAULT NULL,
      ordered_desc_in IN DRUG_PRESC_PLAN.ORDERED_DESC%TYPE DEFAULT NULL,
      origin_desc_in IN DRUG_PRESC_PLAN.ORIGIN_DESC%TYPE DEFAULT NULL,
      id_ordered_in IN DRUG_PRESC_PLAN.ID_ORDERED%TYPE DEFAULT NULL,
      id_administred_in IN DRUG_PRESC_PLAN.ID_ADMINISTRED%TYPE DEFAULT NULL,
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE DEFAULT NULL,
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE DEFAULT NULL,
      application_spot_code_in IN DRUG_PRESC_PLAN.APPLICATION_SPOT_CODE%TYPE DEFAULT NULL,
      vacc_route_data_in IN DRUG_PRESC_PLAN.VACC_ROUTE_DATA%TYPE DEFAULT NULL,
      dt_doc_delivery_tstz_in IN DRUG_PRESC_PLAN.DT_DOC_DELIVERY_TSTZ%TYPE DEFAULT NULL,
      doc_vis_desc_in IN DRUG_PRESC_PLAN.DOC_VIS_DESC%TYPE DEFAULT NULL,
      funding_source_desc_in IN DRUG_PRESC_PLAN.FUNDING_SOURCE_DESC%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_drug_presc_plan_in,
      id_drug_presc_det_in,
      id_drug_take_time_in,
      id_prof_writes_in,
      dosage_in,
      flg_status_in,
      notes_in,
      id_prof_cancel_in,
      notes_cancel_in,
      id_episode_in,
      rate_in,
      dosage_exec_in,
      flg_advers_react_in,
      notes_advers_react_in,
      application_spot_in,
      lot_number_in,
      dt_expiration_in,
      id_vacc_med_ext_in,
      dt_plan_tstz_in,
      dt_take_tstz_in,
      dt_cancel_tstz_in,
      origin_in,
      dt_next_take_in,
      id_prof_adm_in,
      dt_adm_tstz_in,
      dosage_unit_measure_in,
      id_freetext_in,
      flg_dosage_check_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      dosage_change_justify_in,
      rate_unit_measure_in,
      id_prof_witness_in,
      id_presc_dir_dosefreq_in,
      reference_value_in,
      id_unit_reference_value_in,
      barcode_in,
      summary_in,
      reason_in,
      id_cancel_reason_in,
      cancel_reason_descr_in,
      dt_value_drip_change_in,
      flg_co_sign_in,
      id_prof_co_sign_in,
      dt_co_sign_in,
      id_order_type_in,
      id_prof_rate_change_in,
      dt_end_bottle_in,
      id_prof_edit_disc_in,
      dt_edit_discontinue_in,
      justify_descr_in,
      flg_totally_adm_in,
      flg_type_date_in,
      id_vacc_funding_source_in,
      id_vacc_doc_vis_in,
      id_vacc_origin_in,
      administred_desc_in,
      ordered_desc_in,
      origin_desc_in,
      id_ordered_in,
      id_administred_in,
      id_vacc_funding_cat_in,
      id_vacc_adv_reaction_in,
      application_spot_code_in,
      vacc_route_data_in,
      dt_doc_delivery_tstz_in,
      doc_vis_desc_in,
      funding_source_desc_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN DRUG_PRESC_PLAN_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_DRUG_PRESC_PLAN ID_DRUG_PRESC_PLAN_cc;
      l_ID_DRUG_PRESC_DET ID_DRUG_PRESC_DET_cc;
      l_ID_DRUG_TAKE_TIME ID_DRUG_TAKE_TIME_cc;
      l_ID_PROF_WRITES ID_PROF_WRITES_cc;
      l_DOSAGE DOSAGE_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_NOTES NOTES_cc;
      l_ID_PROF_CANCEL ID_PROF_CANCEL_cc;
      l_NOTES_CANCEL NOTES_CANCEL_cc;
      l_ID_EPISODE ID_EPISODE_cc;
      l_RATE RATE_cc;
      l_DOSAGE_EXEC DOSAGE_EXEC_cc;
      l_FLG_ADVERS_REACT FLG_ADVERS_REACT_cc;
      l_NOTES_ADVERS_REACT NOTES_ADVERS_REACT_cc;
      l_APPLICATION_SPOT APPLICATION_SPOT_cc;
      l_LOT_NUMBER LOT_NUMBER_cc;
      l_DT_EXPIRATION DT_EXPIRATION_cc;
      l_ID_VACC_MED_EXT ID_VACC_MED_EXT_cc;
      l_DT_PLAN_TSTZ DT_PLAN_TSTZ_cc;
      l_DT_TAKE_TSTZ DT_TAKE_TSTZ_cc;
      l_DT_CANCEL_TSTZ DT_CANCEL_TSTZ_cc;
      l_ORIGIN ORIGIN_cc;
      l_DT_NEXT_TAKE DT_NEXT_TAKE_cc;
      l_ID_PROF_ADM ID_PROF_ADM_cc;
      l_DT_ADM_TSTZ DT_ADM_TSTZ_cc;
      l_DOSAGE_UNIT_MEASURE DOSAGE_UNIT_MEASURE_cc;
      l_ID_FREETEXT ID_FREETEXT_cc;
      l_FLG_DOSAGE_CHECK FLG_DOSAGE_CHECK_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_DOSAGE_CHANGE_JUSTIFY DOSAGE_CHANGE_JUSTIFY_cc;
      l_RATE_UNIT_MEASURE RATE_UNIT_MEASURE_cc;
      l_ID_PROF_WITNESS ID_PROF_WITNESS_cc;
      l_ID_PRESC_DIR_DOSEFREQ ID_PRESC_DIR_DOSEFREQ_cc;
      l_REFERENCE_VALUE REFERENCE_VALUE_cc;
      l_ID_UNIT_REFERENCE_VALUE ID_UNIT_REFERENCE_VALUE_cc;
      l_BARCODE BARCODE_cc;
      l_SUMMARY SUMMARY_cc;
      l_REASON REASON_cc;
      l_ID_CANCEL_REASON ID_CANCEL_REASON_cc;
      l_CANCEL_REASON_DESCR CANCEL_REASON_DESCR_cc;
      l_DT_VALUE_DRIP_CHANGE DT_VALUE_DRIP_CHANGE_cc;
      l_FLG_CO_SIGN FLG_CO_SIGN_cc;
      l_ID_PROF_CO_SIGN ID_PROF_CO_SIGN_cc;
      l_DT_CO_SIGN DT_CO_SIGN_cc;
      l_ID_ORDER_TYPE ID_ORDER_TYPE_cc;
      l_ID_PROF_RATE_CHANGE ID_PROF_RATE_CHANGE_cc;
      l_DT_END_BOTTLE DT_END_BOTTLE_cc;
      l_ID_PROF_EDIT_DISC ID_PROF_EDIT_DISC_cc;
      l_DT_EDIT_DISCONTINUE DT_EDIT_DISCONTINUE_cc;
      l_JUSTIFY_DESCR JUSTIFY_DESCR_cc;
      l_FLG_TOTALLY_ADM FLG_TOTALLY_ADM_cc;
      l_FLG_TYPE_DATE FLG_TYPE_DATE_cc;
      l_ID_VACC_FUNDING_SOURCE ID_VACC_FUNDING_SOURCE_cc;
      l_ID_VACC_DOC_VIS ID_VACC_DOC_VIS_cc;
      l_ID_VACC_ORIGIN ID_VACC_ORIGIN_cc;
      l_ADMINISTRED_DESC ADMINISTRED_DESC_cc;
      l_ORDERED_DESC ORDERED_DESC_cc;
      l_ORIGIN_DESC ORIGIN_DESC_cc;
      l_ID_ORDERED ID_ORDERED_cc;
      l_ID_ADMINISTRED ID_ADMINISTRED_cc;
      l_ID_VACC_FUNDING_CAT ID_VACC_FUNDING_CAT_cc;
      l_ID_VACC_ADV_REACTION ID_VACC_ADV_REACTION_cc;
      l_APPLICATION_SPOT_CODE APPLICATION_SPOT_CODE_cc;
      l_VACC_ROUTE_DATA VACC_ROUTE_DATA_cc;
      l_DT_DOC_DELIVERY_TSTZ DT_DOC_DELIVERY_TSTZ_cc;
      l_DOC_VIS_DESC DOC_VIS_DESC_cc;
      l_FUNDING_SOURCE_DESC FUNDING_SOURCE_DESC_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_DRUG_PRESC_PLAN(i) := col_in(i).ID_DRUG_PRESC_PLAN;
         l_ID_DRUG_PRESC_DET(i) := col_in(i).ID_DRUG_PRESC_DET;
         l_ID_DRUG_TAKE_TIME(i) := col_in(i).ID_DRUG_TAKE_TIME;
         l_ID_PROF_WRITES(i) := col_in(i).ID_PROF_WRITES;
         l_DOSAGE(i) := col_in(i).DOSAGE;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_NOTES(i) := col_in(i).NOTES;
         l_ID_PROF_CANCEL(i) := col_in(i).ID_PROF_CANCEL;
         l_NOTES_CANCEL(i) := col_in(i).NOTES_CANCEL;
         l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
         l_RATE(i) := col_in(i).RATE;
         l_DOSAGE_EXEC(i) := col_in(i).DOSAGE_EXEC;
         l_FLG_ADVERS_REACT(i) := col_in(i).FLG_ADVERS_REACT;
         l_NOTES_ADVERS_REACT(i) := col_in(i).NOTES_ADVERS_REACT;
         l_APPLICATION_SPOT(i) := col_in(i).APPLICATION_SPOT;
         l_LOT_NUMBER(i) := col_in(i).LOT_NUMBER;
         l_DT_EXPIRATION(i) := col_in(i).DT_EXPIRATION;
         l_ID_VACC_MED_EXT(i) := col_in(i).ID_VACC_MED_EXT;
         l_DT_PLAN_TSTZ(i) := col_in(i).DT_PLAN_TSTZ;
         l_DT_TAKE_TSTZ(i) := col_in(i).DT_TAKE_TSTZ;
         l_DT_CANCEL_TSTZ(i) := col_in(i).DT_CANCEL_TSTZ;
         l_ORIGIN(i) := col_in(i).ORIGIN;
         l_DT_NEXT_TAKE(i) := col_in(i).DT_NEXT_TAKE;
         l_ID_PROF_ADM(i) := col_in(i).ID_PROF_ADM;
         l_DT_ADM_TSTZ(i) := col_in(i).DT_ADM_TSTZ;
         l_DOSAGE_UNIT_MEASURE(i) := col_in(i).DOSAGE_UNIT_MEASURE;
         l_ID_FREETEXT(i) := col_in(i).ID_FREETEXT;
         l_FLG_DOSAGE_CHECK(i) := col_in(i).FLG_DOSAGE_CHECK;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_DOSAGE_CHANGE_JUSTIFY(i) := col_in(i).DOSAGE_CHANGE_JUSTIFY;
         l_RATE_UNIT_MEASURE(i) := col_in(i).RATE_UNIT_MEASURE;
         l_ID_PROF_WITNESS(i) := col_in(i).ID_PROF_WITNESS;
         l_ID_PRESC_DIR_DOSEFREQ(i) := col_in(i).ID_PRESC_DIR_DOSEFREQ;
         l_REFERENCE_VALUE(i) := col_in(i).REFERENCE_VALUE;
         l_ID_UNIT_REFERENCE_VALUE(i) := col_in(i).ID_UNIT_REFERENCE_VALUE;
         l_BARCODE(i) := col_in(i).BARCODE;
         l_SUMMARY(i) := col_in(i).SUMMARY;
         l_REASON(i) := col_in(i).REASON;
         l_ID_CANCEL_REASON(i) := col_in(i).ID_CANCEL_REASON;
         l_CANCEL_REASON_DESCR(i) := col_in(i).CANCEL_REASON_DESCR;
         l_DT_VALUE_DRIP_CHANGE(i) := col_in(i).DT_VALUE_DRIP_CHANGE;
         l_FLG_CO_SIGN(i) := col_in(i).FLG_CO_SIGN;
         l_ID_PROF_CO_SIGN(i) := col_in(i).ID_PROF_CO_SIGN;
         l_DT_CO_SIGN(i) := col_in(i).DT_CO_SIGN;
         l_ID_ORDER_TYPE(i) := col_in(i).ID_ORDER_TYPE;
         l_ID_PROF_RATE_CHANGE(i) := col_in(i).ID_PROF_RATE_CHANGE;
         l_DT_END_BOTTLE(i) := col_in(i).DT_END_BOTTLE;
         l_ID_PROF_EDIT_DISC(i) := col_in(i).ID_PROF_EDIT_DISC;
         l_DT_EDIT_DISCONTINUE(i) := col_in(i).DT_EDIT_DISCONTINUE;
         l_JUSTIFY_DESCR(i) := col_in(i).JUSTIFY_DESCR;
         l_FLG_TOTALLY_ADM(i) := col_in(i).FLG_TOTALLY_ADM;
         l_FLG_TYPE_DATE(i) := col_in(i).FLG_TYPE_DATE;
         l_ID_VACC_FUNDING_SOURCE(i) := col_in(i).ID_VACC_FUNDING_SOURCE;
         l_ID_VACC_DOC_VIS(i) := col_in(i).ID_VACC_DOC_VIS;
         l_ID_VACC_ORIGIN(i) := col_in(i).ID_VACC_ORIGIN;
         l_ADMINISTRED_DESC(i) := col_in(i).ADMINISTRED_DESC;
         l_ORDERED_DESC(i) := col_in(i).ORDERED_DESC;
         l_ORIGIN_DESC(i) := col_in(i).ORIGIN_DESC;
         l_ID_ORDERED(i) := col_in(i).ID_ORDERED;
         l_ID_ADMINISTRED(i) := col_in(i).ID_ADMINISTRED;
         l_ID_VACC_FUNDING_CAT(i) := col_in(i).ID_VACC_FUNDING_CAT;
         l_ID_VACC_ADV_REACTION(i) := col_in(i).ID_VACC_ADV_REACTION;
         l_APPLICATION_SPOT_CODE(i) := col_in(i).APPLICATION_SPOT_CODE;
         l_VACC_ROUTE_DATA(i) := col_in(i).VACC_ROUTE_DATA;
         l_DT_DOC_DELIVERY_TSTZ(i) := col_in(i).DT_DOC_DELIVERY_TSTZ;
         l_DOC_VIS_DESC(i) := col_in(i).DOC_VIS_DESC;
         l_FUNDING_SOURCE_DESC(i) := col_in(i).FUNDING_SOURCE_DESC;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE DRUG_PRESC_PLAN SET
               ID_DRUG_PRESC_DET = NVL (l_ID_DRUG_PRESC_DET(i), ID_DRUG_PRESC_DET),
               ID_DRUG_TAKE_TIME = NVL (l_ID_DRUG_TAKE_TIME(i), ID_DRUG_TAKE_TIME),
               ID_PROF_WRITES = NVL (l_ID_PROF_WRITES(i), ID_PROF_WRITES),
               DOSAGE = NVL (l_DOSAGE(i), DOSAGE),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               NOTES = NVL (l_NOTES(i), NOTES),
               ID_PROF_CANCEL = NVL (l_ID_PROF_CANCEL(i), ID_PROF_CANCEL),
               NOTES_CANCEL = NVL (l_NOTES_CANCEL(i), NOTES_CANCEL),
               ID_EPISODE = NVL (l_ID_EPISODE(i), ID_EPISODE),
               RATE = NVL (l_RATE(i), RATE),
               DOSAGE_EXEC = NVL (l_DOSAGE_EXEC(i), DOSAGE_EXEC),
               FLG_ADVERS_REACT = NVL (l_FLG_ADVERS_REACT(i), FLG_ADVERS_REACT),
               NOTES_ADVERS_REACT = NVL (l_NOTES_ADVERS_REACT(i), NOTES_ADVERS_REACT),
               APPLICATION_SPOT = NVL (l_APPLICATION_SPOT(i), APPLICATION_SPOT),
               LOT_NUMBER = NVL (l_LOT_NUMBER(i), LOT_NUMBER),
               DT_EXPIRATION = NVL (l_DT_EXPIRATION(i), DT_EXPIRATION),
               ID_VACC_MED_EXT = NVL (l_ID_VACC_MED_EXT(i), ID_VACC_MED_EXT),
               DT_PLAN_TSTZ = NVL (l_DT_PLAN_TSTZ(i), DT_PLAN_TSTZ),
               DT_TAKE_TSTZ = NVL (l_DT_TAKE_TSTZ(i), DT_TAKE_TSTZ),
               DT_CANCEL_TSTZ = NVL (l_DT_CANCEL_TSTZ(i), DT_CANCEL_TSTZ),
               ORIGIN = NVL (l_ORIGIN(i), ORIGIN),
               DT_NEXT_TAKE = NVL (l_DT_NEXT_TAKE(i), DT_NEXT_TAKE),
               ID_PROF_ADM = NVL (l_ID_PROF_ADM(i), ID_PROF_ADM),
               DT_ADM_TSTZ = NVL (l_DT_ADM_TSTZ(i), DT_ADM_TSTZ),
               DOSAGE_UNIT_MEASURE = NVL (l_DOSAGE_UNIT_MEASURE(i), DOSAGE_UNIT_MEASURE),
               ID_FREETEXT = NVL (l_ID_FREETEXT(i), ID_FREETEXT),
               FLG_DOSAGE_CHECK = NVL (l_FLG_DOSAGE_CHECK(i), FLG_DOSAGE_CHECK),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               DOSAGE_CHANGE_JUSTIFY = NVL (l_DOSAGE_CHANGE_JUSTIFY(i), DOSAGE_CHANGE_JUSTIFY),
               RATE_UNIT_MEASURE = NVL (l_RATE_UNIT_MEASURE(i), RATE_UNIT_MEASURE),
               ID_PROF_WITNESS = NVL (l_ID_PROF_WITNESS(i), ID_PROF_WITNESS),
               ID_PRESC_DIR_DOSEFREQ = NVL (l_ID_PRESC_DIR_DOSEFREQ(i), ID_PRESC_DIR_DOSEFREQ),
               REFERENCE_VALUE = NVL (l_REFERENCE_VALUE(i), REFERENCE_VALUE),
               ID_UNIT_REFERENCE_VALUE = NVL (l_ID_UNIT_REFERENCE_VALUE(i), ID_UNIT_REFERENCE_VALUE),
               BARCODE = NVL (l_BARCODE(i), BARCODE),
               SUMMARY = NVL (l_SUMMARY(i), SUMMARY),
               REASON = NVL (l_REASON(i), REASON),
               ID_CANCEL_REASON = NVL (l_ID_CANCEL_REASON(i), ID_CANCEL_REASON),
               CANCEL_REASON_DESCR = NVL (l_CANCEL_REASON_DESCR(i), CANCEL_REASON_DESCR),
               DT_VALUE_DRIP_CHANGE = NVL (l_DT_VALUE_DRIP_CHANGE(i), DT_VALUE_DRIP_CHANGE),
               FLG_CO_SIGN = NVL (l_FLG_CO_SIGN(i), FLG_CO_SIGN),
               ID_PROF_CO_SIGN = NVL (l_ID_PROF_CO_SIGN(i), ID_PROF_CO_SIGN),
               DT_CO_SIGN = NVL (l_DT_CO_SIGN(i), DT_CO_SIGN),
               ID_ORDER_TYPE = NVL (l_ID_ORDER_TYPE(i), ID_ORDER_TYPE),
               ID_PROF_RATE_CHANGE = NVL (l_ID_PROF_RATE_CHANGE(i), ID_PROF_RATE_CHANGE),
               DT_END_BOTTLE = NVL (l_DT_END_BOTTLE(i), DT_END_BOTTLE),
               ID_PROF_EDIT_DISC = NVL (l_ID_PROF_EDIT_DISC(i), ID_PROF_EDIT_DISC),
               DT_EDIT_DISCONTINUE = NVL (l_DT_EDIT_DISCONTINUE(i), DT_EDIT_DISCONTINUE),
               JUSTIFY_DESCR = NVL (l_JUSTIFY_DESCR(i), JUSTIFY_DESCR),
               FLG_TOTALLY_ADM = NVL (l_FLG_TOTALLY_ADM(i), FLG_TOTALLY_ADM),
               FLG_TYPE_DATE = NVL (l_FLG_TYPE_DATE(i), FLG_TYPE_DATE),
               ID_VACC_FUNDING_SOURCE = NVL (l_ID_VACC_FUNDING_SOURCE(i), ID_VACC_FUNDING_SOURCE),
               ID_VACC_DOC_VIS = NVL (l_ID_VACC_DOC_VIS(i), ID_VACC_DOC_VIS),
               ID_VACC_ORIGIN = NVL (l_ID_VACC_ORIGIN(i), ID_VACC_ORIGIN),
               ADMINISTRED_DESC = NVL (l_ADMINISTRED_DESC(i), ADMINISTRED_DESC),
               ORDERED_DESC = NVL (l_ORDERED_DESC(i), ORDERED_DESC),
               ORIGIN_DESC = NVL (l_ORIGIN_DESC(i), ORIGIN_DESC),
               ID_ORDERED = NVL (l_ID_ORDERED(i), ID_ORDERED),
               ID_ADMINISTRED = NVL (l_ID_ADMINISTRED(i), ID_ADMINISTRED),
               ID_VACC_FUNDING_CAT = NVL (l_ID_VACC_FUNDING_CAT(i), ID_VACC_FUNDING_CAT),
               ID_VACC_ADV_REACTION = NVL (l_ID_VACC_ADV_REACTION(i), ID_VACC_ADV_REACTION),
               APPLICATION_SPOT_CODE = NVL (l_APPLICATION_SPOT_CODE(i), APPLICATION_SPOT_CODE),
               VACC_ROUTE_DATA = NVL (l_VACC_ROUTE_DATA(i), VACC_ROUTE_DATA),
               DT_DOC_DELIVERY_TSTZ = NVL (l_DT_DOC_DELIVERY_TSTZ(i), DT_DOC_DELIVERY_TSTZ),
               DOC_VIS_DESC = NVL (l_DOC_VIS_DESC(i), DOC_VIS_DESC),
               FUNDING_SOURCE_DESC = NVL (l_FUNDING_SOURCE_DESC(i), FUNDING_SOURCE_DESC)
             WHERE
                ID_DRUG_PRESC_PLAN = l_ID_DRUG_PRESC_PLAN(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE DRUG_PRESC_PLAN SET
               ID_DRUG_PRESC_DET = l_ID_DRUG_PRESC_DET(i),
               ID_DRUG_TAKE_TIME = l_ID_DRUG_TAKE_TIME(i),
               ID_PROF_WRITES = l_ID_PROF_WRITES(i),
               DOSAGE = l_DOSAGE(i),
               FLG_STATUS = l_FLG_STATUS(i),
               NOTES = l_NOTES(i),
               ID_PROF_CANCEL = l_ID_PROF_CANCEL(i),
               NOTES_CANCEL = l_NOTES_CANCEL(i),
               ID_EPISODE = l_ID_EPISODE(i),
               RATE = l_RATE(i),
               DOSAGE_EXEC = l_DOSAGE_EXEC(i),
               FLG_ADVERS_REACT = l_FLG_ADVERS_REACT(i),
               NOTES_ADVERS_REACT = l_NOTES_ADVERS_REACT(i),
               APPLICATION_SPOT = l_APPLICATION_SPOT(i),
               LOT_NUMBER = l_LOT_NUMBER(i),
               DT_EXPIRATION = l_DT_EXPIRATION(i),
               ID_VACC_MED_EXT = l_ID_VACC_MED_EXT(i),
               DT_PLAN_TSTZ = l_DT_PLAN_TSTZ(i),
               DT_TAKE_TSTZ = l_DT_TAKE_TSTZ(i),
               DT_CANCEL_TSTZ = l_DT_CANCEL_TSTZ(i),
               ORIGIN = l_ORIGIN(i),
               DT_NEXT_TAKE = l_DT_NEXT_TAKE(i),
               ID_PROF_ADM = l_ID_PROF_ADM(i),
               DT_ADM_TSTZ = l_DT_ADM_TSTZ(i),
               DOSAGE_UNIT_MEASURE = l_DOSAGE_UNIT_MEASURE(i),
               ID_FREETEXT = l_ID_FREETEXT(i),
               FLG_DOSAGE_CHECK = l_FLG_DOSAGE_CHECK(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               DOSAGE_CHANGE_JUSTIFY = l_DOSAGE_CHANGE_JUSTIFY(i),
               RATE_UNIT_MEASURE = l_RATE_UNIT_MEASURE(i),
               ID_PROF_WITNESS = l_ID_PROF_WITNESS(i),
               ID_PRESC_DIR_DOSEFREQ = l_ID_PRESC_DIR_DOSEFREQ(i),
               REFERENCE_VALUE = l_REFERENCE_VALUE(i),
               ID_UNIT_REFERENCE_VALUE = l_ID_UNIT_REFERENCE_VALUE(i),
               BARCODE = l_BARCODE(i),
               SUMMARY = l_SUMMARY(i),
               REASON = l_REASON(i),
               ID_CANCEL_REASON = l_ID_CANCEL_REASON(i),
               CANCEL_REASON_DESCR = l_CANCEL_REASON_DESCR(i),
               DT_VALUE_DRIP_CHANGE = l_DT_VALUE_DRIP_CHANGE(i),
               FLG_CO_SIGN = l_FLG_CO_SIGN(i),
               ID_PROF_CO_SIGN = l_ID_PROF_CO_SIGN(i),
               DT_CO_SIGN = l_DT_CO_SIGN(i),
               ID_ORDER_TYPE = l_ID_ORDER_TYPE(i),
               ID_PROF_RATE_CHANGE = l_ID_PROF_RATE_CHANGE(i),
               DT_END_BOTTLE = l_DT_END_BOTTLE(i),
               ID_PROF_EDIT_DISC = l_ID_PROF_EDIT_DISC(i),
               DT_EDIT_DISCONTINUE = l_DT_EDIT_DISCONTINUE(i),
               JUSTIFY_DESCR = l_JUSTIFY_DESCR(i),
               FLG_TOTALLY_ADM = l_FLG_TOTALLY_ADM(i),
               FLG_TYPE_DATE = l_FLG_TYPE_DATE(i),
               ID_VACC_FUNDING_SOURCE = l_ID_VACC_FUNDING_SOURCE(i),
               ID_VACC_DOC_VIS = l_ID_VACC_DOC_VIS(i),
               ID_VACC_ORIGIN = l_ID_VACC_ORIGIN(i),
               ADMINISTRED_DESC = l_ADMINISTRED_DESC(i),
               ORDERED_DESC = l_ORDERED_DESC(i),
               ORIGIN_DESC = l_ORIGIN_DESC(i),
               ID_ORDERED = l_ID_ORDERED(i),
               ID_ADMINISTRED = l_ID_ADMINISTRED(i),
               ID_VACC_FUNDING_CAT = l_ID_VACC_FUNDING_CAT(i),
               ID_VACC_ADV_REACTION = l_ID_VACC_ADV_REACTION(i),
               APPLICATION_SPOT_CODE = l_APPLICATION_SPOT_CODE(i),
               VACC_ROUTE_DATA = l_VACC_ROUTE_DATA(i),
               DT_DOC_DELIVERY_TSTZ = l_DT_DOC_DELIVERY_TSTZ(i),
               DOC_VIS_DESC = l_DOC_VIS_DESC(i),
               FUNDING_SOURCE_DESC = l_FUNDING_SOURCE_DESC(i)
             WHERE
                ID_DRUG_PRESC_PLAN = l_ID_DRUG_PRESC_PLAN(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN DRUG_PRESC_PLAN_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE DRUG_PRESC_PLAN
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE DRUG_PRESC_PLAN
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE DRUG_PRESC_PLAN set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE DRUG_PRESC_PLAN set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_drug_presc_plan_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_DRUG_PRESC_PLAN = id_drug_presc_plan_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_drug_presc_plan_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_drug_presc_plan_in => id_drug_presc_plan_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_DRUG_PRESC_PLAN
   PROCEDURE del_ID_DRUG_PRESC_PLAN (
      id_drug_presc_plan_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE ID_DRUG_PRESC_PLAN = id_drug_presc_plan_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_DRUG_PRESC_PLAN;






   -- Delete all rows for primary key column ID_DRUG_PRESC_PLAN
   PROCEDURE del_ID_DRUG_PRESC_PLAN (
      id_drug_presc_plan_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_PLAN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_DRUG_PRESC_PLAN (
      id_drug_presc_plan_in => id_drug_presc_plan_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_DRUG_PRESC_PLAN;















   PROCEDURE del_DPN_PRL_FK (
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_PROF_WITNESS = del_DPN_PRL_FK.id_prof_witness_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DPN_PRL_FK;



PROCEDURE del_DPN_PRL_FK (
      id_prof_witness_in IN DRUG_PRESC_PLAN.ID_PROF_WITNESS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DPN_PRL_FK (
      id_prof_witness_in => id_prof_witness_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DPN_PRL_FK;





   PROCEDURE del_DPP_OT_FK (
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_ORDER_TYPE = del_DPP_OT_FK.id_order_type_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DPP_OT_FK;



PROCEDURE del_DPP_OT_FK (
      id_order_type_in IN DRUG_PRESC_PLAN.ID_ORDER_TYPE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DPP_OT_FK (
      id_order_type_in => id_order_type_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DPP_OT_FK;





   PROCEDURE del_DPP_PROF_CO_SIGN_FK (
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_PROF_CO_SIGN = del_DPP_PROF_CO_SIGN_FK.id_prof_co_sign_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DPP_PROF_CO_SIGN_FK;



PROCEDURE del_DPP_PROF_CO_SIGN_FK (
      id_prof_co_sign_in IN DRUG_PRESC_PLAN.ID_PROF_CO_SIGN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DPP_PROF_CO_SIGN_FK (
      id_prof_co_sign_in => id_prof_co_sign_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DPP_PROF_CO_SIGN_FK;





   PROCEDURE del_DPP_PROF_EDIT_DISC_FK (
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_PROF_EDIT_DISC = del_DPP_PROF_EDIT_DISC_FK.id_prof_edit_disc_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DPP_PROF_EDIT_DISC_FK;



PROCEDURE del_DPP_PROF_EDIT_DISC_FK (
      id_prof_edit_disc_in IN DRUG_PRESC_PLAN.ID_PROF_EDIT_DISC%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DPP_PROF_EDIT_DISC_FK (
      id_prof_edit_disc_in => id_prof_edit_disc_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DPP_PROF_EDIT_DISC_FK;





   PROCEDURE del_DPP_PROF_R_CHANGE_FK (
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_PROF_RATE_CHANGE = del_DPP_PROF_R_CHANGE_FK.id_prof_rate_change_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DPP_PROF_R_CHANGE_FK;



PROCEDURE del_DPP_PROF_R_CHANGE_FK (
      id_prof_rate_change_in IN DRUG_PRESC_PLAN.ID_PROF_RATE_CHANGE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DPP_PROF_R_CHANGE_FK (
      id_prof_rate_change_in => id_prof_rate_change_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DPP_PROF_R_CHANGE_FK;





   PROCEDURE del_DPP_UME_FK (
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          DOSAGE_UNIT_MEASURE = del_DPP_UME_FK.dosage_unit_measure_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DPP_UME_FK;



PROCEDURE del_DPP_UME_FK (
      dosage_unit_measure_in IN DRUG_PRESC_PLAN.DOSAGE_UNIT_MEASURE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DPP_UME_FK (
      dosage_unit_measure_in => dosage_unit_measure_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DPP_UME_FK;





   PROCEDURE del_DRPRP_DRGPR_FK (
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_DRUG_PRESC_DET = del_DRPRP_DRGPR_FK.id_drug_presc_det_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DRPRP_DRGPR_FK;



PROCEDURE del_DRPRP_DRGPR_FK (
      id_drug_presc_det_in IN DRUG_PRESC_PLAN.ID_DRUG_PRESC_DET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DRPRP_DRGPR_FK (
      id_drug_presc_det_in => id_drug_presc_det_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DRPRP_DRGPR_FK;





   PROCEDURE del_DRPRP_DRTKT_FK (
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_DRUG_TAKE_TIME = del_DRPRP_DRTKT_FK.id_drug_take_time_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DRPRP_DRTKT_FK;



PROCEDURE del_DRPRP_DRTKT_FK (
      id_drug_take_time_in IN DRUG_PRESC_PLAN.ID_DRUG_TAKE_TIME%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DRPRP_DRTKT_FK (
      id_drug_take_time_in => id_drug_take_time_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DRPRP_DRTKT_FK;





   PROCEDURE del_DRPRP_PDDOSEFREQ_FK (
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_PRESC_DIR_DOSEFREQ = del_DRPRP_PDDOSEFREQ_FK.id_presc_dir_dosefreq_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DRPRP_PDDOSEFREQ_FK;



PROCEDURE del_DRPRP_PDDOSEFREQ_FK (
      id_presc_dir_dosefreq_in IN DRUG_PRESC_PLAN.ID_PRESC_DIR_DOSEFREQ%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DRPRP_PDDOSEFREQ_FK (
      id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DRPRP_PDDOSEFREQ_FK;





   PROCEDURE del_DRPRP_PROF_CANCEL_FK (
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_PROF_CANCEL = del_DRPRP_PROF_CANCEL_FK.id_prof_cancel_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DRPRP_PROF_CANCEL_FK;



PROCEDURE del_DRPRP_PROF_CANCEL_FK (
      id_prof_cancel_in IN DRUG_PRESC_PLAN.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DRPRP_PROF_CANCEL_FK (
      id_prof_cancel_in => id_prof_cancel_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DRPRP_PROF_CANCEL_FK;





   PROCEDURE del_DRPRP_PROF_WRITES_FK (
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_PROF_WRITES = del_DRPRP_PROF_WRITES_FK.id_prof_writes_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DRPRP_PROF_WRITES_FK;



PROCEDURE del_DRPRP_PROF_WRITES_FK (
      id_prof_writes_in IN DRUG_PRESC_PLAN.ID_PROF_WRITES%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DRPRP_PROF_WRITES_FK (
      id_prof_writes_in => id_prof_writes_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DRPRP_PROF_WRITES_FK;





   PROCEDURE del_DRPRP_UNITMEASURE_FK (
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_UNIT_REFERENCE_VALUE = del_DRPRP_UNITMEASURE_FK.id_unit_reference_value_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DRPRP_UNITMEASURE_FK;



PROCEDURE del_DRPRP_UNITMEASURE_FK (
      id_unit_reference_value_in IN DRUG_PRESC_PLAN.ID_UNIT_REFERENCE_VALUE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DRPRP_UNITMEASURE_FK (
      id_unit_reference_value_in => id_unit_reference_value_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DRPRP_UNITMEASURE_FK;





   PROCEDURE del_DRPRP_UNITM_FK (
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          RATE_UNIT_MEASURE = del_DRPRP_UNITM_FK.rate_unit_measure_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DRPRP_UNITM_FK;



PROCEDURE del_DRPRP_UNITM_FK (
      rate_unit_measure_in IN DRUG_PRESC_PLAN.RATE_UNIT_MEASURE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DRPRP_UNITM_FK (
      rate_unit_measure_in => rate_unit_measure_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DRPRP_UNITM_FK;





   PROCEDURE del_ID_VACC_FUNDING_CAT_CVX (
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_VACC_FUNDING_CAT = del_ID_VACC_FUNDING_CAT_CVX.id_vacc_funding_cat_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_VACC_FUNDING_CAT_CVX;



PROCEDURE del_ID_VACC_FUNDING_CAT_CVX (
      id_vacc_funding_cat_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_CAT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_VACC_FUNDING_CAT_CVX (
      id_vacc_funding_cat_in => id_vacc_funding_cat_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_ID_VACC_FUNDING_CAT_CVX;





   PROCEDURE del_PP_CANCEL_REASON_ADM_FK (
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_CANCEL_REASON = del_PP_CANCEL_REASON_ADM_FK.id_cancel_reason_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PP_CANCEL_REASON_ADM_FK;



PROCEDURE del_PP_CANCEL_REASON_ADM_FK (
      id_cancel_reason_in IN DRUG_PRESC_PLAN.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PP_CANCEL_REASON_ADM_FK (
      id_cancel_reason_in => id_cancel_reason_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PP_CANCEL_REASON_ADM_FK;





   PROCEDURE del_VACC_ADV_REACTION_CVX (
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_VACC_ADV_REACTION = del_VACC_ADV_REACTION_CVX.id_vacc_adv_reaction_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_VACC_ADV_REACTION_CVX;



PROCEDURE del_VACC_ADV_REACTION_CVX (
      id_vacc_adv_reaction_in IN DRUG_PRESC_PLAN.ID_VACC_ADV_REACTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_VACC_ADV_REACTION_CVX (
      id_vacc_adv_reaction_in => id_vacc_adv_reaction_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_VACC_ADV_REACTION_CVX;





   PROCEDURE del_VACC_DOC_VIS_CVX (
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_VACC_DOC_VIS = del_VACC_DOC_VIS_CVX.id_vacc_doc_vis_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_VACC_DOC_VIS_CVX;



PROCEDURE del_VACC_DOC_VIS_CVX (
      id_vacc_doc_vis_in IN DRUG_PRESC_PLAN.ID_VACC_DOC_VIS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_VACC_DOC_VIS_CVX (
      id_vacc_doc_vis_in => id_vacc_doc_vis_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_VACC_DOC_VIS_CVX;





   PROCEDURE del_VACC_FUNDING_SOURCE_CVX (
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_VACC_FUNDING_SOURCE = del_VACC_FUNDING_SOURCE_CVX.id_vacc_funding_source_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_VACC_FUNDING_SOURCE_CVX;



PROCEDURE del_VACC_FUNDING_SOURCE_CVX (
      id_vacc_funding_source_in IN DRUG_PRESC_PLAN.ID_VACC_FUNDING_SOURCE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_VACC_FUNDING_SOURCE_CVX (
      id_vacc_funding_source_in => id_vacc_funding_source_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_VACC_FUNDING_SOURCE_CVX;





   PROCEDURE del_VACC_ORIGIN_CVX (
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DRUG_PRESC_PLAN
       WHERE
          ID_VACC_ORIGIN = del_VACC_ORIGIN_CVX.id_vacc_origin_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_VACC_ORIGIN_CVX;



PROCEDURE del_VACC_ORIGIN_CVX (
      id_vacc_origin_in IN DRUG_PRESC_PLAN.ID_VACC_ORIGIN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_VACC_ORIGIN_CVX (
      id_vacc_origin_in => id_vacc_origin_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_VACC_ORIGIN_CVX;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM DRUG_PRESC_PLAN';
      ELSE
         RETURN
            'DELETE FROM DRUG_PRESC_PLAN WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DRUG_PRESC_PLAN');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DRUG_PRESC_PLAN');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      drug_presc_plan_inout IN OUT DRUG_PRESC_PLAN%ROWTYPE
   )
   IS
   BEGIN
      drug_presc_plan_inout.ID_DRUG_PRESC_PLAN := NULL;
      drug_presc_plan_inout.ID_DRUG_PRESC_DET := NULL;
      drug_presc_plan_inout.ID_DRUG_TAKE_TIME := NULL;
      drug_presc_plan_inout.ID_PROF_WRITES := NULL;
      drug_presc_plan_inout.DOSAGE := NULL;
      drug_presc_plan_inout.FLG_STATUS := NULL;
      drug_presc_plan_inout.NOTES := NULL;
      drug_presc_plan_inout.ID_PROF_CANCEL := NULL;
      drug_presc_plan_inout.NOTES_CANCEL := NULL;
      drug_presc_plan_inout.ID_EPISODE := NULL;
      drug_presc_plan_inout.RATE := NULL;
      drug_presc_plan_inout.DOSAGE_EXEC := NULL;
      drug_presc_plan_inout.FLG_ADVERS_REACT := NULL;
      drug_presc_plan_inout.NOTES_ADVERS_REACT := NULL;
      drug_presc_plan_inout.APPLICATION_SPOT := NULL;
      drug_presc_plan_inout.LOT_NUMBER := NULL;
      drug_presc_plan_inout.DT_EXPIRATION := NULL;
      drug_presc_plan_inout.ID_VACC_MED_EXT := NULL;
      drug_presc_plan_inout.DT_PLAN_TSTZ := NULL;
      drug_presc_plan_inout.DT_TAKE_TSTZ := NULL;
      drug_presc_plan_inout.DT_CANCEL_TSTZ := NULL;
      drug_presc_plan_inout.ORIGIN := NULL;
      drug_presc_plan_inout.DT_NEXT_TAKE := NULL;
      drug_presc_plan_inout.ID_PROF_ADM := NULL;
      drug_presc_plan_inout.DT_ADM_TSTZ := NULL;
      drug_presc_plan_inout.DOSAGE_UNIT_MEASURE := NULL;
      drug_presc_plan_inout.ID_FREETEXT := null;
      drug_presc_plan_inout.FLG_DOSAGE_CHECK := NULL;
      drug_presc_plan_inout.CREATE_USER := NULL;
      drug_presc_plan_inout.CREATE_TIME := NULL;
      drug_presc_plan_inout.CREATE_INSTITUTION := NULL;
      drug_presc_plan_inout.UPDATE_USER := NULL;
      drug_presc_plan_inout.UPDATE_TIME := NULL;
      drug_presc_plan_inout.UPDATE_INSTITUTION := NULL;
      drug_presc_plan_inout.DOSAGE_CHANGE_JUSTIFY := NULL;
      drug_presc_plan_inout.RATE_UNIT_MEASURE := NULL;
      drug_presc_plan_inout.ID_PROF_WITNESS := NULL;
      drug_presc_plan_inout.ID_PRESC_DIR_DOSEFREQ := NULL;
      drug_presc_plan_inout.REFERENCE_VALUE := null;
      drug_presc_plan_inout.ID_UNIT_REFERENCE_VALUE := null;
      drug_presc_plan_inout.BARCODE := NULL;
      drug_presc_plan_inout.SUMMARY := NULL;
      drug_presc_plan_inout.REASON := NULL;
      drug_presc_plan_inout.ID_CANCEL_REASON := NULL;
      drug_presc_plan_inout.CANCEL_REASON_DESCR := NULL;
      drug_presc_plan_inout.DT_VALUE_DRIP_CHANGE := NULL;
      drug_presc_plan_inout.FLG_CO_SIGN := 'N';
      drug_presc_plan_inout.ID_PROF_CO_SIGN := NULL;
      drug_presc_plan_inout.DT_CO_SIGN := NULL;
      drug_presc_plan_inout.ID_ORDER_TYPE := NULL;
      drug_presc_plan_inout.ID_PROF_RATE_CHANGE := NULL;
      drug_presc_plan_inout.DT_END_BOTTLE := NULL;
      drug_presc_plan_inout.ID_PROF_EDIT_DISC := NULL;
      drug_presc_plan_inout.DT_EDIT_DISCONTINUE := NULL;
      drug_presc_plan_inout.JUSTIFY_DESCR := NULL;
      drug_presc_plan_inout.FLG_TOTALLY_ADM := NULL
;
      drug_presc_plan_inout.FLG_TYPE_DATE := NULL;
      drug_presc_plan_inout.ID_VACC_FUNDING_SOURCE := NULL;
      drug_presc_plan_inout.ID_VACC_DOC_VIS := NULL;
      drug_presc_plan_inout.ID_VACC_ORIGIN := NULL;
      drug_presc_plan_inout.ADMINISTRED_DESC := NULL;
      drug_presc_plan_inout.ORDERED_DESC := NULL;
      drug_presc_plan_inout.ORIGIN_DESC := NULL;
      drug_presc_plan_inout.ID_ORDERED := NULL;
      drug_presc_plan_inout.ID_ADMINISTRED := NULL;
      drug_presc_plan_inout.ID_VACC_FUNDING_CAT := NULL;
      drug_presc_plan_inout.ID_VACC_ADV_REACTION := NULL;
      drug_presc_plan_inout.APPLICATION_SPOT_CODE := NULL;
      drug_presc_plan_inout.VACC_ROUTE_DATA := NULL;
      drug_presc_plan_inout.DT_DOC_DELIVERY_TSTZ := NULL;
      drug_presc_plan_inout.DOC_VIS_DESC := NULL;
      drug_presc_plan_inout.FUNDING_SOURCE_DESC := NULL;
   END initrec;

   FUNCTION initrec RETURN DRUG_PRESC_PLAN%ROWTYPE
   IS
      l_drug_presc_plan DRUG_PRESC_PLAN%ROWTYPE;
   BEGIN
      l_drug_presc_plan.FLG_CO_SIGN := 'N';
      l_drug_presc_plan.FLG_TOTALLY_ADM := NULL
;
      RETURN l_drug_presc_plan;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN DRUG_PRESC_PLAN_tc
   IS
        data DRUG_PRESC_PLAN_tc;
   BEGIN
        select * bulk collect into data from DRUG_PRESC_PLAN where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        PK_ALERT_EXCEPTIONS.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN DRUG_PRESC_PLAN_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data DRUG_PRESC_PLAN_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        PK_ALERT_EXCEPTIONS.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_DRUG_PRESC_PLAN;
/
