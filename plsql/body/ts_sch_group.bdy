/*-- Last Change Revision: $Rev: 1578489 $*/
/*-- Last Change by: $Author: telmo.castro $*/
/*-- Date of last change: $Date: 2014-04-09 15:34:45 +0100 (qua, 09 abr 2014) $*/
CREATE OR REPLACE PACKAGE BODY TS_SCH_GROUP
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: April 8, 2014 16:11:55
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_group_in IN SCH_GROUP.ID_GROUP%TYPE
      ,
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO SCH_GROUP (
         ID_GROUP,
         ID_SCHEDULE,
         ID_PATIENT,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         FLG_REF_TYPE,
         ID_PROF_REF,
         ID_INST_REF,
         ID_CANCEL_REASON,
         NO_SHOW_NOTES,
         FLG_CONTACT_TYPE,
         ID_HEALTH_PLAN,
         AUTH_CODE,
         DT_AUTH_CODE_EXP,
         PAT_INSTRUCTIONS
         )
      VALUES (
         id_group_in,
         id_schedule_in,
         id_patient_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         flg_ref_type_in,
         id_prof_ref_in,
         id_inst_ref_in,
         id_cancel_reason_in,
         no_show_notes_in,
         flg_contact_type_in,
         id_health_plan_in,
         auth_code_in,
         dt_auth_code_exp_in,
         pat_instructions_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSIF l_name = 'SGP_IDSCH_IDPAT_UIDX'
           THEN
              pk_alert_exceptions.register_error (
                 error_name_in => 'DUPLICATE-VALUE'
                ,err_instance_id_out => l_err_instance_id
                ,text_in => 'Violation of unique index "SGP_IDSCH_IDPAT_UIDX"'
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'OWNER'
                ,value_in => l_owner
                ,validate_in => FALSE
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'CONSTRAINT_NAME'
                ,value_in => l_name
                ,validate_in => FALSE
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'TABLE_NAME'
                ,value_in => 'SCH_GROUP'
                ,validate_in => FALSE
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'ID_PATIENT'
                ,value_in => id_patient_in
                ,validate_in => FALSE
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'ID_SCHEDULE'
                ,value_in => id_schedule_in
                ,validate_in => FALSE
                );
              pk_alert_exceptions.raise_error_instance (
                    err_instance_id_in => l_err_instance_id);
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'SCH_GROUP');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           IF l_name = 'SGP_CRN_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'SGP_HP_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HEALTH_PLAN'
               , value_in => id_health_plan_in);
           END IF;
           IF l_name = 'SGP_INN_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INST_REF'
               , value_in => id_inst_ref_in);
           END IF;
           IF l_name = 'SGP_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'SGP_PL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_REF'
               , value_in => id_prof_ref_in);
           END IF;
           IF l_name = 'SGP_SCHD_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SCHEDULE'
               , value_in => id_schedule_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_group_in IN SCH_GROUP.ID_GROUP%TYPE
      ,
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_group_in => id_group_in
      ,
      id_schedule_in => id_schedule_in,
      id_patient_in => id_patient_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      flg_ref_type_in => flg_ref_type_in,
      id_prof_ref_in => id_prof_ref_in,
      id_inst_ref_in => id_inst_ref_in,
      id_cancel_reason_in => id_cancel_reason_in,
      no_show_notes_in => no_show_notes_in,
      flg_contact_type_in => flg_contact_type_in,
      id_health_plan_in => id_health_plan_in,
      auth_code_in => auth_code_in,
      dt_auth_code_exp_in => dt_auth_code_exp_in,
      pat_instructions_in => pat_instructions_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;

   /*
   START Special logic for handling LOB columns....
   */

   PROCEDURE n_ins_clobs_in_chunks (
      id_group_in IN SCH_GROUP.ID_GROUP%TYPE,
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      handle_error_in IN BOOLEAN := TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
   ) IS
        l_PAT_INSTRUCTIONS clob;
      i                PLS_INTEGER;
      current_column varchar2(30) := '';
   BEGIN
      /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
         variables from pointing to the same temporary CLOB (it creates copies).
         Otherwise, the code could have been written a bit more compactly. */

      FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
      LOOP
         /* Even when all clobs are null, DOA must send 1 row so skip it. */
         IF clob_columns_in (i) IS NOT NULL
         THEN
            IF current_column <> clob_columns_in (i) OR current_column IS NULL
            THEN
               current_column := LOWER (clob_columns_in (i));

               CASE current_column
                  WHEN 'pat_instructions_in'
                  THEN
                     IF l_PAT_INSTRUCTIONS IS NULL
                     THEN
                       DBMS_LOB.createtemporary (
                         l_PAT_INSTRUCTIONS, TRUE, DBMS_LOB.CALL);
                     END IF;
               END CASE;
            END IF;

            CASE current_column
              WHEN 'pat_instructions_in'
              THEN
                  DBMS_LOB.writeappend (l_PAT_INSTRUCTIONS
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
            END CASE;
         END IF;
      END LOOP;

      ins (
         id_group_in => id_group_in,
         id_schedule_in => id_schedule_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_ref_type_in => flg_ref_type_in,
         id_prof_ref_in => id_prof_ref_in,
         id_inst_ref_in => id_inst_ref_in,
         id_cancel_reason_in => id_cancel_reason_in,
         no_show_notes_in => no_show_notes_in,
         flg_contact_type_in => flg_contact_type_in,
         id_health_plan_in => id_health_plan_in,
         auth_code_in => auth_code_in,
         dt_auth_code_exp_in => dt_auth_code_exp_in,
         pat_instructions_in => l_PAT_INSTRUCTIONS,
         handle_error_in => handle_error_in
         );

   END n_ins_clobs_in_chunks;

   PROCEDURE n_upd_clobs_in_chunks (
      id_group_in IN SCH_GROUP.ID_GROUP%TYPE,
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      ignore_if_null_in IN BOOLEAN := TRUE,
      handle_error_in IN BOOLEAN := TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
      )
   IS
       l_PAT_INSTRUCTIONS clob;
      i                PLS_INTEGER;
      current_column varchar2(30) := '';
      l_rows PLS_INTEGER;
   BEGIN

      /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
         variables from pointing to the same temporary CLOB (it creates copies).
         Otherwise, the code could have been written a bit more compactly. */

      FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
      LOOP
         /* Even when all clobs are null, DOA must send 1 row so skip it. */
         IF clob_columns_in (i) IS NOT NULL
         THEN
            IF current_column <> clob_columns_in (i) OR current_column IS NULL
            THEN
               current_column := LOWER (clob_columns_in (i));

               CASE current_column
                  WHEN 'pat_instructions_in'
                  THEN
                    IF l_PAT_INSTRUCTIONS IS NULL
                    THEN
                      DBMS_LOB.createtemporary (
                         l_PAT_INSTRUCTIONS, TRUE, DBMS_LOB.CALL);
                    END IF;
               END CASE;
            END IF;

            CASE current_column
              WHEN 'pat_instructions_in'
              THEN
                  DBMS_LOB.writeappend (l_PAT_INSTRUCTIONS
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
            END CASE;
         END IF;
      END LOOP;

      upd (
         id_group_in => id_group_in,
         id_schedule_in => id_schedule_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_ref_type_in => flg_ref_type_in,
         id_prof_ref_in => id_prof_ref_in,
         id_inst_ref_in => id_inst_ref_in,
         id_cancel_reason_in => id_cancel_reason_in,
         no_show_notes_in => no_show_notes_in,
         flg_contact_type_in => flg_contact_type_in,
         id_health_plan_in => id_health_plan_in,
         auth_code_in => auth_code_in,
         dt_auth_code_exp_in => dt_auth_code_exp_in,
         pat_instructions_in => l_PAT_INSTRUCTIONS,
         handle_error_in => handle_error_in
         );
   END n_upd_clobs_in_chunks;

   PROCEDURE n_upd_ins_clobs_in_chunks (
      id_group_in IN SCH_GROUP.ID_GROUP%TYPE,
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      ignore_if_null_in IN BOOLEAN DEFAULT TRUE,
      handle_error_in IN BOOLEAN DEFAULT TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
      )
   IS
   BEGIN
      n_upd_clobs_in_chunks (
         id_group_in => id_group_in,
         id_schedule_in => id_schedule_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_ref_type_in => flg_ref_type_in,
         id_prof_ref_in => id_prof_ref_in,
         id_inst_ref_in => id_inst_ref_in,
         id_cancel_reason_in => id_cancel_reason_in,
         no_show_notes_in => no_show_notes_in,
         flg_contact_type_in => flg_contact_type_in,
         id_health_plan_in => id_health_plan_in,
         auth_code_in => auth_code_in,
         dt_auth_code_exp_in => dt_auth_code_exp_in,
         clob_columns_in => clob_columns_in ,
         clob_pieces_in => clob_pieces_in ,
         ignore_if_null_in => ignore_if_null_in,
         handle_error_in => handle_error_in
       );

      IF SQL%ROWCOUNT = 0
      THEN
         n_ins_clobs_in_chunks (
            id_group_in => id_group_in,
            id_schedule_in => id_schedule_in,
            id_patient_in => id_patient_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            flg_ref_type_in => flg_ref_type_in,
            id_prof_ref_in => id_prof_ref_in,
            id_inst_ref_in => id_inst_ref_in,
            id_cancel_reason_in => id_cancel_reason_in,
            no_show_notes_in => no_show_notes_in,
            flg_contact_type_in => flg_contact_type_in,
            id_health_plan_in => id_health_plan_in,
            auth_code_in => auth_code_in,
            dt_auth_code_exp_in => dt_auth_code_exp_in,
            clob_columns_in => clob_columns_in ,
            clob_pieces_in => clob_pieces_in ,
            handle_error_in => handle_error_in
         );
      END IF;
   END n_upd_ins_clobs_in_chunks;

   /*
   END Special logic for handling LOB columns.
   */

   PROCEDURE ins (
      rec_in IN SCH_GROUP%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec SCH_GROUP%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_GROUP := next_key (sequence_in);
      END IF;
      ins (
         id_group_in => l_rec.ID_GROUP
         ,
         id_schedule_in => l_rec.ID_SCHEDULE,
         id_patient_in => l_rec.ID_PATIENT,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         flg_ref_type_in => l_rec.FLG_REF_TYPE,
         id_prof_ref_in => l_rec.ID_PROF_REF,
         id_inst_ref_in => l_rec.ID_INST_REF,
         id_cancel_reason_in => l_rec.ID_CANCEL_REASON,
         no_show_notes_in => l_rec.NO_SHOW_NOTES,
         flg_contact_type_in => l_rec.FLG_CONTACT_TYPE,
         id_health_plan_in => l_rec.ID_HEALTH_PLAN,
         auth_code_in => l_rec.AUTH_CODE,
         dt_auth_code_exp_in => l_rec.DT_AUTH_CODE_EXP,
         pat_instructions_in => l_rec.PAT_INSTRUCTIONS
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN SCH_GROUP%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN SCH_GROUP.ID_GROUP%TYPE

   IS
     retval SCH_GROUP.ID_GROUP%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_SCH_GROUP.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_SCH_GROUP')
           );
   END next_key;

   PROCEDURE ins (
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL,
      id_group_out IN OUT SCH_GROUP.ID_GROUP%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky SCH_GROUP.ID_GROUP%TYPE := next_key;
   BEGIN
      ins (
         id_group_in => l_pky,
         id_schedule_in => id_schedule_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_ref_type_in => flg_ref_type_in,
         id_prof_ref_in => id_prof_ref_in,
         id_inst_ref_in => id_inst_ref_in,
         id_cancel_reason_in => id_cancel_reason_in,
         no_show_notes_in => no_show_notes_in,
         flg_contact_type_in => flg_contact_type_in,
         id_health_plan_in => id_health_plan_in,
         auth_code_in => auth_code_in,
         dt_auth_code_exp_in => dt_auth_code_exp_in,
         pat_instructions_in => pat_instructions_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_group_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL,
      id_group_out IN OUT SCH_GROUP.ID_GROUP%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_schedule_in => id_schedule_in,
      id_patient_in => id_patient_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      flg_ref_type_in => flg_ref_type_in,
      id_prof_ref_in => id_prof_ref_in,
      id_inst_ref_in => id_inst_ref_in,
      id_cancel_reason_in => id_cancel_reason_in,
      no_show_notes_in => no_show_notes_in,
      flg_contact_type_in => flg_contact_type_in,
      id_health_plan_in => id_health_plan_in,
      auth_code_in => auth_code_in,
      dt_auth_code_exp_in => dt_auth_code_exp_in,
      pat_instructions_in => pat_instructions_in,
      id_group_out => id_group_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         SCH_GROUP.ID_GROUP%TYPE
   IS
        l_pky SCH_GROUP.ID_GROUP%TYPE := next_key;
   BEGIN
      ins (
         id_group_in => l_pky,
         id_schedule_in => id_schedule_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_ref_type_in => flg_ref_type_in,
         id_prof_ref_in => id_prof_ref_in,
         id_inst_ref_in => id_inst_ref_in,
         id_cancel_reason_in => id_cancel_reason_in,
         no_show_notes_in => no_show_notes_in,
         flg_contact_type_in => flg_contact_type_in,
         id_health_plan_in => id_health_plan_in,
         auth_code_in => auth_code_in,
         dt_auth_code_exp_in => dt_auth_code_exp_in,
         pat_instructions_in => pat_instructions_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         SCH_GROUP.ID_GROUP%TYPE
   IS
        l_pky SCH_GROUP.ID_GROUP%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_group_in => l_pky,
         id_schedule_in => id_schedule_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_ref_type_in => flg_ref_type_in,
         id_prof_ref_in => id_prof_ref_in,
         id_inst_ref_in => id_inst_ref_in,
         id_cancel_reason_in => id_cancel_reason_in,
         no_show_notes_in => no_show_notes_in,
         flg_contact_type_in => flg_contact_type_in,
         id_health_plan_in => id_health_plan_in,
         auth_code_in => auth_code_in,
         dt_auth_code_exp_in => dt_auth_code_exp_in,
         pat_instructions_in => pat_instructions_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky SCH_GROUP.ID_GROUP%TYPE := next_key;
   BEGIN
      ins (
         id_group_in => l_pky,
         id_schedule_in => id_schedule_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_ref_type_in => flg_ref_type_in,
         id_prof_ref_in => id_prof_ref_in,
         id_inst_ref_in => id_inst_ref_in,
         id_cancel_reason_in => id_cancel_reason_in,
         no_show_notes_in => no_show_notes_in,
         flg_contact_type_in => flg_contact_type_in,
         id_health_plan_in => id_health_plan_in,
         auth_code_in => auth_code_in,
         dt_auth_code_exp_in => dt_auth_code_exp_in,
         pat_instructions_in => pat_instructions_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky SCH_GROUP.ID_GROUP%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_group_in => l_pky,
         id_schedule_in => id_schedule_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_ref_type_in => flg_ref_type_in,
         id_prof_ref_in => id_prof_ref_in,
         id_inst_ref_in => id_inst_ref_in,
         id_cancel_reason_in => id_cancel_reason_in,
         no_show_notes_in => no_show_notes_in,
         flg_contact_type_in => flg_contact_type_in,
         id_health_plan_in => id_health_plan_in,
         auth_code_in => auth_code_in,
         dt_auth_code_exp_in => dt_auth_code_exp_in,
         pat_instructions_in => pat_instructions_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN SCH_GROUP_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
       FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO SCH_GROUP (
               ID_GROUP,
               ID_SCHEDULE,
               ID_PATIENT,
               CREATE_USER,
               CREATE_TIME,
               CREATE_INSTITUTION,
               UPDATE_USER,
               UPDATE_TIME,
               UPDATE_INSTITUTION,
               FLG_REF_TYPE,
               ID_PROF_REF,
               ID_INST_REF,
               ID_CANCEL_REASON,
               NO_SHOW_NOTES,
               FLG_CONTACT_TYPE,
               ID_HEALTH_PLAN,
               AUTH_CODE,
               DT_AUTH_CODE_EXP,
               PAT_INSTRUCTIONS
               )
            VALUES (
               rows_in(indx).ID_GROUP,
               rows_in(indx).ID_SCHEDULE,
               rows_in(indx).ID_PATIENT,
               rows_in(indx).CREATE_USER,
               rows_in(indx).CREATE_TIME,
               rows_in(indx).CREATE_INSTITUTION,
               rows_in(indx).UPDATE_USER,
               rows_in(indx).UPDATE_TIME,
               rows_in(indx).UPDATE_INSTITUTION,
               rows_in(indx).FLG_REF_TYPE,
               rows_in(indx).ID_PROF_REF,
               rows_in(indx).ID_INST_REF,
               rows_in(indx).ID_CANCEL_REASON,
               rows_in(indx).NO_SHOW_NOTES,
               rows_in(indx).FLG_CONTACT_TYPE,
               rows_in(indx).ID_HEALTH_PLAN,
               rows_in(indx).AUTH_CODE,
               rows_in(indx).DT_AUTH_CODE_EXP,
               rows_in(indx).PAT_INSTRUCTIONS
               ) RETURNING ROWID BULK COLLECT INTO rows_out;

      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQLERRM (-SQL%BULK_EXCEPTIONS (indx).ERROR_CODE)
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_GROUP _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_GROUP
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SCHEDULE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_SCHEDULE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PATIENT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PATIENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_REF_TYPE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_REF_TYPE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_REF _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_REF
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_INST_REF _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_INST_REF
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CANCEL_REASON _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CANCEL_REASON
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NO_SHOW_NOTES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NO_SHOW_NOTES
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_CONTACT_TYPE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_CONTACT_TYPE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_HEALTH_PLAN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_HEALTH_PLAN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'AUTH_CODE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).AUTH_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_AUTH_CODE_EXP _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_AUTH_CODE_EXP
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'SCH_GROUP'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN SCH_GROUP_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_group_in IN SCH_GROUP.ID_GROUP%TYPE,
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      ID_SCHEDULE_nin IN BOOLEAN := TRUE,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      FLG_REF_TYPE_nin IN BOOLEAN := TRUE,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      ID_PROF_REF_nin IN BOOLEAN := TRUE,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      ID_INST_REF_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      NO_SHOW_NOTES_nin IN BOOLEAN := TRUE,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      FLG_CONTACT_TYPE_nin IN BOOLEAN := TRUE,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      ID_HEALTH_PLAN_nin IN BOOLEAN := TRUE,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      AUTH_CODE_nin IN BOOLEAN := TRUE,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      DT_AUTH_CODE_EXP_nin IN BOOLEAN := TRUE,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL,
      PAT_INSTRUCTIONS_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_SCHEDULE_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_FLG_REF_TYPE_n NUMBER(1);
   l_ID_PROF_REF_n NUMBER(1);
   l_ID_INST_REF_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_NO_SHOW_NOTES_n NUMBER(1);
   l_FLG_CONTACT_TYPE_n NUMBER(1);
   l_ID_HEALTH_PLAN_n NUMBER(1);
   l_AUTH_CODE_n NUMBER(1);
   l_DT_AUTH_CODE_EXP_n NUMBER(1);
   l_PAT_INSTRUCTIONS_n NUMBER(1);
   BEGIN

   l_ID_SCHEDULE_n := sys.diutil.bool_to_int(ID_SCHEDULE_nin);
   l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_FLG_REF_TYPE_n := sys.diutil.bool_to_int(FLG_REF_TYPE_nin);
   l_ID_PROF_REF_n := sys.diutil.bool_to_int(ID_PROF_REF_nin);
   l_ID_INST_REF_n := sys.diutil.bool_to_int(ID_INST_REF_nin);
   l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
   l_NO_SHOW_NOTES_n := sys.diutil.bool_to_int(NO_SHOW_NOTES_nin);
   l_FLG_CONTACT_TYPE_n := sys.diutil.bool_to_int(FLG_CONTACT_TYPE_nin);
   l_ID_HEALTH_PLAN_n := sys.diutil.bool_to_int(ID_HEALTH_PLAN_nin);
   l_AUTH_CODE_n := sys.diutil.bool_to_int(AUTH_CODE_nin);
   l_DT_AUTH_CODE_EXP_n := sys.diutil.bool_to_int(DT_AUTH_CODE_EXP_nin);
   l_PAT_INSTRUCTIONS_n := sys.diutil.bool_to_int(PAT_INSTRUCTIONS_nin);


         UPDATE SCH_GROUP SET
     ID_SCHEDULE = decode (l_ID_SCHEDULE_n,0,id_schedule_in, NVL (id_schedule_in, ID_SCHEDULE)),
     ID_PATIENT = decode (l_ID_PATIENT_n,0,id_patient_in, NVL (id_patient_in, ID_PATIENT)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     FLG_REF_TYPE = decode (l_FLG_REF_TYPE_n,0,flg_ref_type_in, NVL (flg_ref_type_in, FLG_REF_TYPE)),
     ID_PROF_REF = decode (l_ID_PROF_REF_n,0,id_prof_ref_in, NVL (id_prof_ref_in, ID_PROF_REF)),
     ID_INST_REF = decode (l_ID_INST_REF_n,0,id_inst_ref_in, NVL (id_inst_ref_in, ID_INST_REF)),
     ID_CANCEL_REASON = decode (l_ID_CANCEL_REASON_n,0,id_cancel_reason_in, NVL (id_cancel_reason_in, ID_CANCEL_REASON)),
     NO_SHOW_NOTES = decode (l_NO_SHOW_NOTES_n,0,no_show_notes_in, NVL (no_show_notes_in, NO_SHOW_NOTES)),
     FLG_CONTACT_TYPE = decode (l_FLG_CONTACT_TYPE_n,0,flg_contact_type_in, NVL (flg_contact_type_in, FLG_CONTACT_TYPE)),
     ID_HEALTH_PLAN = decode (l_ID_HEALTH_PLAN_n,0,id_health_plan_in, NVL (id_health_plan_in, ID_HEALTH_PLAN)),
     AUTH_CODE = decode (l_AUTH_CODE_n,0,auth_code_in, NVL (auth_code_in, AUTH_CODE)),
     DT_AUTH_CODE_EXP = decode (l_DT_AUTH_CODE_EXP_n,0,dt_auth_code_exp_in, NVL (dt_auth_code_exp_in, DT_AUTH_CODE_EXP)),
     PAT_INSTRUCTIONS = decode (l_PAT_INSTRUCTIONS_n,0,pat_instructions_in, NVL (pat_instructions_in, PAT_INSTRUCTIONS))
          WHERE
             ID_GROUP = id_group_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSIF l_name = 'SGP_IDSCH_IDPAT_UIDX'
           THEN
              pk_alert_exceptions.register_error (
                 error_name_in => 'DUPLICATE-VALUE'
                ,err_instance_id_out => l_err_instance_id
                ,text_in => 'Violation of unique index "SGP_IDSCH_IDPAT_UIDX"'
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'OWNER'
                ,value_in => l_owner
                ,validate_in => FALSE
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'CONSTRAINT_NAME'
                ,value_in => l_name
                ,validate_in => FALSE
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'TABLE_NAME'
                ,value_in => 'SCH_GROUP'
                ,validate_in => FALSE
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'ID_PATIENT'
                ,value_in => id_patient_in
                ,validate_in => FALSE
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'ID_SCHEDULE'
                ,value_in => id_schedule_in
                ,validate_in => FALSE
                );
              pk_alert_exceptions.raise_error_instance (
                    err_instance_id_in => l_err_instance_id);
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'SCH_GROUP');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           IF l_name = 'SGP_CRN_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'SGP_HP_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HEALTH_PLAN'
               , value_in => id_health_plan_in);
           END IF;
           IF l_name = 'SGP_INN_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INST_REF'
               , value_in => id_inst_ref_in);
           END IF;
           IF l_name = 'SGP_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'SGP_PL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_REF'
               , value_in => id_prof_ref_in);
           END IF;
           IF l_name = 'SGP_SCHD_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SCHEDULE'
               , value_in => id_schedule_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_group_in IN SCH_GROUP.ID_GROUP%TYPE,
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      ID_SCHEDULE_nin IN BOOLEAN := TRUE,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      FLG_REF_TYPE_nin IN BOOLEAN := TRUE,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      ID_PROF_REF_nin IN BOOLEAN := TRUE,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      ID_INST_REF_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      NO_SHOW_NOTES_nin IN BOOLEAN := TRUE,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      FLG_CONTACT_TYPE_nin IN BOOLEAN := TRUE,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      ID_HEALTH_PLAN_nin IN BOOLEAN := TRUE,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      AUTH_CODE_nin IN BOOLEAN := TRUE,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      DT_AUTH_CODE_EXP_nin IN BOOLEAN := TRUE,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL,
      PAT_INSTRUCTIONS_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_group_in => id_group_in,
      id_schedule_in => id_schedule_in,
      ID_SCHEDULE_nin => ID_SCHEDULE_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      flg_ref_type_in => flg_ref_type_in,
      FLG_REF_TYPE_nin => FLG_REF_TYPE_nin,
      id_prof_ref_in => id_prof_ref_in,
      ID_PROF_REF_nin => ID_PROF_REF_nin,
      id_inst_ref_in => id_inst_ref_in,
      ID_INST_REF_nin => ID_INST_REF_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      no_show_notes_in => no_show_notes_in,
      NO_SHOW_NOTES_nin => NO_SHOW_NOTES_nin,
      flg_contact_type_in => flg_contact_type_in,
      FLG_CONTACT_TYPE_nin => FLG_CONTACT_TYPE_nin,
      id_health_plan_in => id_health_plan_in,
      ID_HEALTH_PLAN_nin => ID_HEALTH_PLAN_nin,
      auth_code_in => auth_code_in,
      AUTH_CODE_nin => AUTH_CODE_nin,
      dt_auth_code_exp_in => dt_auth_code_exp_in,
      DT_AUTH_CODE_EXP_nin => DT_AUTH_CODE_EXP_nin,
      pat_instructions_in => pat_instructions_in,
      PAT_INSTRUCTIONS_nin => PAT_INSTRUCTIONS_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      ID_SCHEDULE_nin IN BOOLEAN := TRUE,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      FLG_REF_TYPE_nin IN BOOLEAN := TRUE,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      ID_PROF_REF_nin IN BOOLEAN := TRUE,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      ID_INST_REF_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      NO_SHOW_NOTES_nin IN BOOLEAN := TRUE,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      FLG_CONTACT_TYPE_nin IN BOOLEAN := TRUE,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      ID_HEALTH_PLAN_nin IN BOOLEAN := TRUE,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      AUTH_CODE_nin IN BOOLEAN := TRUE,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      DT_AUTH_CODE_EXP_nin IN BOOLEAN := TRUE,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL,
      PAT_INSTRUCTIONS_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_SCHEDULE_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_FLG_REF_TYPE_n NUMBER(1);
   l_ID_PROF_REF_n NUMBER(1);
   l_ID_INST_REF_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_NO_SHOW_NOTES_n NUMBER(1);
   l_FLG_CONTACT_TYPE_n NUMBER(1);
   l_ID_HEALTH_PLAN_n NUMBER(1);
   l_AUTH_CODE_n NUMBER(1);
   l_DT_AUTH_CODE_EXP_n NUMBER(1);
   l_PAT_INSTRUCTIONS_n NUMBER(1);
      id_group_in SCH_GROUP.ID_GROUP%TYPE;
   BEGIN



      l_ID_SCHEDULE_n := sys.diutil.bool_to_int(ID_SCHEDULE_nin);
      l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_FLG_REF_TYPE_n := sys.diutil.bool_to_int(FLG_REF_TYPE_nin);
      l_ID_PROF_REF_n := sys.diutil.bool_to_int(ID_PROF_REF_nin);
      l_ID_INST_REF_n := sys.diutil.bool_to_int(ID_INST_REF_nin);
      l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
      l_NO_SHOW_NOTES_n := sys.diutil.bool_to_int(NO_SHOW_NOTES_nin);
      l_FLG_CONTACT_TYPE_n := sys.diutil.bool_to_int(FLG_CONTACT_TYPE_nin);
      l_ID_HEALTH_PLAN_n := sys.diutil.bool_to_int(ID_HEALTH_PLAN_nin);
      l_AUTH_CODE_n := sys.diutil.bool_to_int(AUTH_CODE_nin);
      l_DT_AUTH_CODE_EXP_n := sys.diutil.bool_to_int(DT_AUTH_CODE_EXP_nin);
      l_PAT_INSTRUCTIONS_n := sys.diutil.bool_to_int(PAT_INSTRUCTIONS_nin);



l_sql := 'UPDATE SCH_GROUP SET '
     || ' ID_SCHEDULE = decode (' || l_ID_SCHEDULE_n || ',0,:id_schedule_in, NVL (:id_schedule_in, ID_SCHEDULE)) '|| ','
     || ' ID_PATIENT = decode (' || l_ID_PATIENT_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' FLG_REF_TYPE = decode (' || l_FLG_REF_TYPE_n || ',0,:flg_ref_type_in, NVL (:flg_ref_type_in, FLG_REF_TYPE)) '|| ','
     || ' ID_PROF_REF = decode (' || l_ID_PROF_REF_n || ',0,:id_prof_ref_in, NVL (:id_prof_ref_in, ID_PROF_REF)) '|| ','
     || ' ID_INST_REF = decode (' || l_ID_INST_REF_n || ',0,:id_inst_ref_in, NVL (:id_inst_ref_in, ID_INST_REF)) '|| ','
     || ' ID_CANCEL_REASON = decode (' || l_ID_CANCEL_REASON_n || ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) '|| ','
     || ' NO_SHOW_NOTES = decode (' || l_NO_SHOW_NOTES_n || ',0,:no_show_notes_in, NVL (:no_show_notes_in, NO_SHOW_NOTES)) '|| ','
     || ' FLG_CONTACT_TYPE = decode (' || l_FLG_CONTACT_TYPE_n || ',0,:flg_contact_type_in, NVL (:flg_contact_type_in, FLG_CONTACT_TYPE)) '|| ','
     || ' ID_HEALTH_PLAN = decode (' || l_ID_HEALTH_PLAN_n || ',0,:id_health_plan_in, NVL (:id_health_plan_in, ID_HEALTH_PLAN)) '|| ','
     || ' AUTH_CODE = decode (' || l_AUTH_CODE_n || ',0,:auth_code_in, NVL (:auth_code_in, AUTH_CODE)) '|| ','
     || ' DT_AUTH_CODE_EXP = decode (' || l_DT_AUTH_CODE_EXP_n || ',0,:dt_auth_code_exp_in, NVL (:dt_auth_code_exp_in, DT_AUTH_CODE_EXP)) '|| ','
     || ' PAT_INSTRUCTIONS = decode (' || l_PAT_INSTRUCTIONS_n || ',0,:pat_instructions_in, NVL (:pat_instructions_in, PAT_INSTRUCTIONS)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_schedule_in,
     id_patient_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     flg_ref_type_in,
     id_prof_ref_in,
     id_inst_ref_in,
     id_cancel_reason_in,
     no_show_notes_in,
     flg_contact_type_in,
     id_health_plan_in,
     auth_code_in,
     dt_auth_code_exp_in,
     pat_instructions_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSIF l_name = 'SGP_IDSCH_IDPAT_UIDX'
           THEN
              pk_alert_exceptions.register_error (
                 error_name_in => 'DUPLICATE-VALUE'
                ,err_instance_id_out => l_err_instance_id
                ,text_in => 'Violation of unique index "SGP_IDSCH_IDPAT_UIDX"'
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'OWNER'
                ,value_in => l_owner
                ,validate_in => FALSE
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'CONSTRAINT_NAME'
                ,value_in => l_name
                ,validate_in => FALSE
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'TABLE_NAME'
                ,value_in => 'SCH_GROUP'
                ,validate_in => FALSE
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'ID_PATIENT'
                ,value_in => id_patient_in
                ,validate_in => FALSE
                );
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_err_instance_id
                ,NAME_IN => 'ID_SCHEDULE'
                ,value_in => id_schedule_in
                ,validate_in => FALSE
                );
              pk_alert_exceptions.raise_error_instance (
                    err_instance_id_in => l_err_instance_id);
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'SCH_GROUP');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           IF l_name = 'SGP_CRN_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'SGP_HP_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HEALTH_PLAN'
               , value_in => id_health_plan_in);
           END IF;
           IF l_name = 'SGP_INN_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INST_REF'
               , value_in => id_inst_ref_in);
           END IF;
           IF l_name = 'SGP_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'SGP_PL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_REF'
               , value_in => id_prof_ref_in);
           END IF;
           IF l_name = 'SGP_SCHD_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SCHEDULE'
               , value_in => id_schedule_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      ID_SCHEDULE_nin IN BOOLEAN := TRUE,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      FLG_REF_TYPE_nin IN BOOLEAN := TRUE,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      ID_PROF_REF_nin IN BOOLEAN := TRUE,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      ID_INST_REF_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      NO_SHOW_NOTES_nin IN BOOLEAN := TRUE,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      FLG_CONTACT_TYPE_nin IN BOOLEAN := TRUE,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      ID_HEALTH_PLAN_nin IN BOOLEAN := TRUE,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      AUTH_CODE_nin IN BOOLEAN := TRUE,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      DT_AUTH_CODE_EXP_nin IN BOOLEAN := TRUE,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL,
      PAT_INSTRUCTIONS_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_schedule_in => id_schedule_in,
      ID_SCHEDULE_nin => ID_SCHEDULE_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      flg_ref_type_in => flg_ref_type_in,
      FLG_REF_TYPE_nin => FLG_REF_TYPE_nin,
      id_prof_ref_in => id_prof_ref_in,
      ID_PROF_REF_nin => ID_PROF_REF_nin,
      id_inst_ref_in => id_inst_ref_in,
      ID_INST_REF_nin => ID_INST_REF_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      no_show_notes_in => no_show_notes_in,
      NO_SHOW_NOTES_nin => NO_SHOW_NOTES_nin,
      flg_contact_type_in => flg_contact_type_in,
      FLG_CONTACT_TYPE_nin => FLG_CONTACT_TYPE_nin,
      id_health_plan_in => id_health_plan_in,
      ID_HEALTH_PLAN_nin => ID_HEALTH_PLAN_nin,
      auth_code_in => auth_code_in,
      AUTH_CODE_nin => AUTH_CODE_nin,
      dt_auth_code_exp_in => dt_auth_code_exp_in,
      DT_AUTH_CODE_EXP_nin => DT_AUTH_CODE_EXP_nin,
      pat_instructions_in => pat_instructions_in,
      PAT_INSTRUCTIONS_nin => PAT_INSTRUCTIONS_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN SCH_GROUP%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_group_in => rec_in.ID_GROUP,
         id_schedule_in => rec_in.ID_SCHEDULE,
         id_patient_in => rec_in.ID_PATIENT,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         flg_ref_type_in => rec_in.FLG_REF_TYPE,
         id_prof_ref_in => rec_in.ID_PROF_REF,
         id_inst_ref_in => rec_in.ID_INST_REF,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         no_show_notes_in => rec_in.NO_SHOW_NOTES,
         flg_contact_type_in => rec_in.FLG_CONTACT_TYPE,
         id_health_plan_in => rec_in.ID_HEALTH_PLAN,
         auth_code_in => rec_in.AUTH_CODE,
         dt_auth_code_exp_in => rec_in.DT_AUTH_CODE_EXP,
         pat_instructions_in => rec_in.PAT_INSTRUCTIONS

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN SCH_GROUP%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_group_in => rec_in.ID_GROUP,
         id_schedule_in => rec_in.ID_SCHEDULE,
         id_patient_in => rec_in.ID_PATIENT,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         flg_ref_type_in => rec_in.FLG_REF_TYPE,
         id_prof_ref_in => rec_in.ID_PROF_REF,
         id_inst_ref_in => rec_in.ID_INST_REF,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         no_show_notes_in => rec_in.NO_SHOW_NOTES,
         flg_contact_type_in => rec_in.FLG_CONTACT_TYPE,
         id_health_plan_in => rec_in.ID_HEALTH_PLAN,
         auth_code_in => rec_in.AUTH_CODE,
         dt_auth_code_exp_in => rec_in.DT_AUTH_CODE_EXP,
         pat_instructions_in => rec_in.PAT_INSTRUCTIONS

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_group_in IN SCH_GROUP.ID_GROUP%TYPE,
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_group_in => id_group_in,
         id_schedule_in => id_schedule_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_ref_type_in => flg_ref_type_in,
         id_prof_ref_in => id_prof_ref_in,
         id_inst_ref_in => id_inst_ref_in,
         id_cancel_reason_in => id_cancel_reason_in,
         no_show_notes_in => no_show_notes_in,
         flg_contact_type_in => flg_contact_type_in,
         id_health_plan_in => id_health_plan_in,
         auth_code_in => auth_code_in,
         dt_auth_code_exp_in => dt_auth_code_exp_in,
         pat_instructions_in => pat_instructions_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_group_in => id_group_in,
            id_schedule_in => id_schedule_in,
            id_patient_in => id_patient_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            flg_ref_type_in => flg_ref_type_in,
            id_prof_ref_in => id_prof_ref_in,
            id_inst_ref_in => id_inst_ref_in,
            id_cancel_reason_in => id_cancel_reason_in,
            no_show_notes_in => no_show_notes_in,
            flg_contact_type_in => flg_contact_type_in,
            id_health_plan_in => id_health_plan_in,
            auth_code_in => auth_code_in,
            dt_auth_code_exp_in => dt_auth_code_exp_in,
            pat_instructions_in => pat_instructions_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_group_in IN SCH_GROUP.ID_GROUP%TYPE,
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN SCH_GROUP.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SCH_GROUP.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SCH_GROUP.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCH_GROUP.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SCH_GROUP.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SCH_GROUP.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_ref_type_in IN SCH_GROUP.FLG_REF_TYPE%TYPE DEFAULT NULL,
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE DEFAULT NULL,
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE DEFAULT NULL,
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      no_show_notes_in IN SCH_GROUP.NO_SHOW_NOTES%TYPE DEFAULT NULL,
      flg_contact_type_in IN SCH_GROUP.FLG_CONTACT_TYPE%TYPE DEFAULT NULL,
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE DEFAULT NULL,
      auth_code_in IN SCH_GROUP.AUTH_CODE%TYPE DEFAULT NULL,
      dt_auth_code_exp_in IN SCH_GROUP.DT_AUTH_CODE_EXP%TYPE DEFAULT NULL,
      pat_instructions_in IN SCH_GROUP.PAT_INSTRUCTIONS%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_group_in,
      id_schedule_in,
      id_patient_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      flg_ref_type_in,
      id_prof_ref_in,
      id_inst_ref_in,
      id_cancel_reason_in,
      no_show_notes_in,
      flg_contact_type_in,
      id_health_plan_in,
      auth_code_in,
      dt_auth_code_exp_in,
      pat_instructions_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN SCH_GROUP_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_GROUP ID_GROUP_cc;
      l_ID_SCHEDULE ID_SCHEDULE_cc;
      l_ID_PATIENT ID_PATIENT_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_FLG_REF_TYPE FLG_REF_TYPE_cc;
      l_ID_PROF_REF ID_PROF_REF_cc;
      l_ID_INST_REF ID_INST_REF_cc;
      l_ID_CANCEL_REASON ID_CANCEL_REASON_cc;
      l_NO_SHOW_NOTES NO_SHOW_NOTES_cc;
      l_FLG_CONTACT_TYPE FLG_CONTACT_TYPE_cc;
      l_ID_HEALTH_PLAN ID_HEALTH_PLAN_cc;
      l_AUTH_CODE AUTH_CODE_cc;
      l_DT_AUTH_CODE_EXP DT_AUTH_CODE_EXP_cc;
      l_PAT_INSTRUCTIONS PAT_INSTRUCTIONS_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_GROUP(i) := col_in(i).ID_GROUP;
         l_ID_SCHEDULE(i) := col_in(i).ID_SCHEDULE;
         l_ID_PATIENT(i) := col_in(i).ID_PATIENT;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_FLG_REF_TYPE(i) := col_in(i).FLG_REF_TYPE;
         l_ID_PROF_REF(i) := col_in(i).ID_PROF_REF;
         l_ID_INST_REF(i) := col_in(i).ID_INST_REF;
         l_ID_CANCEL_REASON(i) := col_in(i).ID_CANCEL_REASON;
         l_NO_SHOW_NOTES(i) := col_in(i).NO_SHOW_NOTES;
         l_FLG_CONTACT_TYPE(i) := col_in(i).FLG_CONTACT_TYPE;
         l_ID_HEALTH_PLAN(i) := col_in(i).ID_HEALTH_PLAN;
         l_AUTH_CODE(i) := col_in(i).AUTH_CODE;
         l_DT_AUTH_CODE_EXP(i) := col_in(i).DT_AUTH_CODE_EXP;
         l_PAT_INSTRUCTIONS(i) := col_in(i).PAT_INSTRUCTIONS;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE SCH_GROUP SET
               ID_SCHEDULE = NVL (l_ID_SCHEDULE(i), ID_SCHEDULE),
               ID_PATIENT = NVL (l_ID_PATIENT(i), ID_PATIENT),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               FLG_REF_TYPE = NVL (l_FLG_REF_TYPE(i), FLG_REF_TYPE),
               ID_PROF_REF = NVL (l_ID_PROF_REF(i), ID_PROF_REF),
               ID_INST_REF = NVL (l_ID_INST_REF(i), ID_INST_REF),
               ID_CANCEL_REASON = NVL (l_ID_CANCEL_REASON(i), ID_CANCEL_REASON),
               NO_SHOW_NOTES = NVL (l_NO_SHOW_NOTES(i), NO_SHOW_NOTES),
               FLG_CONTACT_TYPE = NVL (l_FLG_CONTACT_TYPE(i), FLG_CONTACT_TYPE),
               ID_HEALTH_PLAN = NVL (l_ID_HEALTH_PLAN(i), ID_HEALTH_PLAN),
               AUTH_CODE = NVL (l_AUTH_CODE(i), AUTH_CODE),
               DT_AUTH_CODE_EXP = NVL (l_DT_AUTH_CODE_EXP(i), DT_AUTH_CODE_EXP),
               PAT_INSTRUCTIONS = NVL (l_PAT_INSTRUCTIONS(i), PAT_INSTRUCTIONS)
             WHERE
                ID_GROUP = l_ID_GROUP(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE SCH_GROUP SET
               ID_SCHEDULE = l_ID_SCHEDULE(i),
               ID_PATIENT = l_ID_PATIENT(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               FLG_REF_TYPE = l_FLG_REF_TYPE(i),
               ID_PROF_REF = l_ID_PROF_REF(i),
               ID_INST_REF = l_ID_INST_REF(i),
               ID_CANCEL_REASON = l_ID_CANCEL_REASON(i),
               NO_SHOW_NOTES = l_NO_SHOW_NOTES(i),
               FLG_CONTACT_TYPE = l_FLG_CONTACT_TYPE(i),
               ID_HEALTH_PLAN = l_ID_HEALTH_PLAN(i),
               AUTH_CODE = l_AUTH_CODE(i),
               DT_AUTH_CODE_EXP = l_DT_AUTH_CODE_EXP(i),
               PAT_INSTRUCTIONS = l_PAT_INSTRUCTIONS(i)
             WHERE
                ID_GROUP = l_ID_GROUP(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN SCH_GROUP_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE SCH_GROUP
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE SCH_GROUP
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE SCH_GROUP set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE SCH_GROUP set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_group_in IN SCH_GROUP.ID_GROUP%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SCH_GROUP
       WHERE
          ID_GROUP = id_group_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_group_in IN SCH_GROUP.ID_GROUP%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_group_in => id_group_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_GROUP
   PROCEDURE del_ID_GROUP (
      id_group_in IN SCH_GROUP.ID_GROUP%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM SCH_GROUP
       WHERE ID_GROUP = id_group_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_GROUP;






   -- Delete all rows for primary key column ID_GROUP
   PROCEDURE del_ID_GROUP (
      id_group_in IN SCH_GROUP.ID_GROUP%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_GROUP (
      id_group_in => id_group_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_GROUP;






   -- Delete for unique value of SGP_IDSCH_IDPAT_UIDX
   PROCEDURE del_SGP_IDSCH_IDPAT_UIDX (
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE,
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SCH_GROUP
       WHERE
          ID_PATIENT = id_patient_in AND
          ID_SCHEDULE = id_schedule_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SGP_IDSCH_IDPAT_UIDX;



   -- Delete for unique value of SGP_IDSCH_IDPAT_UIDX
   PROCEDURE del_SGP_IDSCH_IDPAT_UIDX (
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE,
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SGP_IDSCH_IDPAT_UIDX (
      id_patient_in =>  id_patient_in,
      id_schedule_in =>  id_schedule_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SGP_IDSCH_IDPAT_UIDX;






   PROCEDURE del_SGP_CRN_FK (
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SCH_GROUP
       WHERE
          ID_CANCEL_REASON = del_SGP_CRN_FK.id_cancel_reason_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SGP_CRN_FK;



PROCEDURE del_SGP_CRN_FK (
      id_cancel_reason_in IN SCH_GROUP.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SGP_CRN_FK (
      id_cancel_reason_in => id_cancel_reason_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SGP_CRN_FK;





   PROCEDURE del_SGP_HP_FK (
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SCH_GROUP
       WHERE
          ID_HEALTH_PLAN = del_SGP_HP_FK.id_health_plan_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SGP_HP_FK;



PROCEDURE del_SGP_HP_FK (
      id_health_plan_in IN SCH_GROUP.ID_HEALTH_PLAN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SGP_HP_FK (
      id_health_plan_in => id_health_plan_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SGP_HP_FK;





   PROCEDURE del_SGP_INN_FK (
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SCH_GROUP
       WHERE
          ID_INST_REF = del_SGP_INN_FK.id_inst_ref_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SGP_INN_FK;



PROCEDURE del_SGP_INN_FK (
      id_inst_ref_in IN SCH_GROUP.ID_INST_REF%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SGP_INN_FK (
      id_inst_ref_in => id_inst_ref_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SGP_INN_FK;





   PROCEDURE del_SGP_PAT_FK (
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SCH_GROUP
       WHERE
          ID_PATIENT = del_SGP_PAT_FK.id_patient_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SGP_PAT_FK;



PROCEDURE del_SGP_PAT_FK (
      id_patient_in IN SCH_GROUP.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SGP_PAT_FK (
      id_patient_in => id_patient_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SGP_PAT_FK;





   PROCEDURE del_SGP_PL_FK (
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SCH_GROUP
       WHERE
          ID_PROF_REF = del_SGP_PL_FK.id_prof_ref_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SGP_PL_FK;



PROCEDURE del_SGP_PL_FK (
      id_prof_ref_in IN SCH_GROUP.ID_PROF_REF%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SGP_PL_FK (
      id_prof_ref_in => id_prof_ref_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SGP_PL_FK;





   PROCEDURE del_SGP_SCHD_FK (
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SCH_GROUP
       WHERE
          ID_SCHEDULE = del_SGP_SCHD_FK.id_schedule_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SGP_SCHD_FK;



PROCEDURE del_SGP_SCHD_FK (
      id_schedule_in IN SCH_GROUP.ID_SCHEDULE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SGP_SCHD_FK (
      id_schedule_in => id_schedule_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SGP_SCHD_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM SCH_GROUP';
      ELSE
         RETURN
            'DELETE FROM SCH_GROUP WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SCH_GROUP');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SCH_GROUP');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      sch_group_inout IN OUT SCH_GROUP%ROWTYPE
   )
   IS
   BEGIN
      sch_group_inout.ID_GROUP := NULL;
      sch_group_inout.ID_SCHEDULE := NULL;
      sch_group_inout.ID_PATIENT := NULL;
      sch_group_inout.CREATE_USER := NULL;
      sch_group_inout.CREATE_TIME := NULL;
      sch_group_inout.CREATE_INSTITUTION := NULL;
      sch_group_inout.UPDATE_USER := NULL;
      sch_group_inout.UPDATE_TIME := NULL;
      sch_group_inout.UPDATE_INSTITUTION := NULL;
      sch_group_inout.FLG_REF_TYPE := NULL;
      sch_group_inout.ID_PROF_REF := NULL;
      sch_group_inout.ID_INST_REF := NULL;
      sch_group_inout.ID_CANCEL_REASON := NULL;
      sch_group_inout.NO_SHOW_NOTES := NULL;
      sch_group_inout.FLG_CONTACT_TYPE := NULL;
      sch_group_inout.ID_HEALTH_PLAN := NULL;
      sch_group_inout.AUTH_CODE := NULL;
      sch_group_inout.DT_AUTH_CODE_EXP := NULL;
      sch_group_inout.PAT_INSTRUCTIONS := NULL;
   END initrec;

   FUNCTION initrec RETURN SCH_GROUP%ROWTYPE
   IS
      l_sch_group SCH_GROUP%ROWTYPE;
   BEGIN
      RETURN l_sch_group;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN SCH_GROUP_tc
   IS
        data SCH_GROUP_tc;
   BEGIN
        select * bulk collect into data from SCH_GROUP where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN SCH_GROUP_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data SCH_GROUP_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_SCH_GROUP;
/
