/*-- Last Change Revision: $Rev: 2028263 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:44 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_monitorization_vs
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: MarÃ§o 3, 2011 15:14:30
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_monitorization_vs_in      IN monitorization_vs.id_monitorization_vs%TYPE,
        id_monitorization_in         IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        notes_in                     IN monitorization_vs.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in            IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in              IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in                IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_in IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in            IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        id_prof_order_in             IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_order_type_in             IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        flg_co_sign_in               IN monitorization_vs.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in                IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in             IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in           IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        create_user_in               IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in           IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO monitorization_vs
            (id_monitorization_vs,
             id_monitorization,
             id_vital_sign,
             notes,
             id_prof_cancel,
             notes_cancel,
             flg_status,
             dt_monitorization_vs_tstz,
             dt_cancel_tstz,
             dt_order,
             id_prof_order,
             id_order_type,
             flg_co_sign,
             dt_co_sign,
             notes_co_sign,
             id_prof_co_sign,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_status_prev,
             id_cancel_reason)
        VALUES
            (id_monitorization_vs_in,
             id_monitorization_in,
             id_vital_sign_in,
             notes_in,
             id_prof_cancel_in,
             notes_cancel_in,
             flg_status_in,
             dt_monitorization_vs_tstz_in,
             dt_cancel_tstz_in,
             dt_order_in,
             id_prof_order_in,
             id_order_type_in,
             flg_co_sign_in,
             dt_co_sign_in,
             notes_co_sign_in,
             id_prof_co_sign_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_status_prev_in,
             id_cancel_reason_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MONITORIZATION_VS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    IF l_name = 'MONVS_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'MVS_MONT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MONITORIZATION',
                                                        value_in           => id_monitorization_in);
                    END IF;
                    IF l_name = 'MVS_ORDER_TYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ORDER_TYPE',
                                                        value_in           => id_order_type_in);
                    END IF;
                    IF l_name = 'MVS_PROF_CANCEL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'MVS_PROF_COSIGN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CO_SIGN',
                                                        value_in           => id_prof_co_sign_in);
                    END IF;
                    IF l_name = 'MVS_PROF_ORDER_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_ORDER',
                                                        value_in           => id_prof_order_in);
                    END IF;
                    IF l_name = 'MVS_VSN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VITAL_SIGN',
                                                        value_in           => id_vital_sign_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_monitorization_vs_in      IN monitorization_vs.id_monitorization_vs%TYPE,
        id_monitorization_in         IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        notes_in                     IN monitorization_vs.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in            IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in              IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in                IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_in IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in            IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        id_prof_order_in             IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_order_type_in             IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        flg_co_sign_in               IN monitorization_vs.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in                IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in             IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in           IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        create_user_in               IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in           IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_monitorization_vs_in      => id_monitorization_vs_in,
            id_monitorization_in         => id_monitorization_in,
            id_vital_sign_in             => id_vital_sign_in,
            notes_in                     => notes_in,
            id_prof_cancel_in            => id_prof_cancel_in,
            notes_cancel_in              => notes_cancel_in,
            flg_status_in                => flg_status_in,
            dt_monitorization_vs_tstz_in => dt_monitorization_vs_tstz_in,
            dt_cancel_tstz_in            => dt_cancel_tstz_in,
            dt_order_in                  => dt_order_in,
            id_prof_order_in             => id_prof_order_in,
            id_order_type_in             => id_order_type_in,
            flg_co_sign_in               => flg_co_sign_in,
            dt_co_sign_in                => dt_co_sign_in,
            notes_co_sign_in             => notes_co_sign_in,
            id_prof_co_sign_in           => id_prof_co_sign_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            flg_status_prev_in           => flg_status_prev_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN monitorization_vs%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec monitorization_vs%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_monitorization_vs := next_key(sequence_in);
        END IF;
        ins(id_monitorization_vs_in      => l_rec.id_monitorization_vs,
            id_monitorization_in         => l_rec.id_monitorization,
            id_vital_sign_in             => l_rec.id_vital_sign,
            notes_in                     => l_rec.notes,
            id_prof_cancel_in            => l_rec.id_prof_cancel,
            notes_cancel_in              => l_rec.notes_cancel,
            flg_status_in                => l_rec.flg_status,
            dt_monitorization_vs_tstz_in => l_rec.dt_monitorization_vs_tstz,
            dt_cancel_tstz_in            => l_rec.dt_cancel_tstz,
            dt_order_in                  => l_rec.dt_order,
            id_prof_order_in             => l_rec.id_prof_order,
            id_order_type_in             => l_rec.id_order_type,
            flg_co_sign_in               => l_rec.flg_co_sign,
            dt_co_sign_in                => l_rec.dt_co_sign,
            notes_co_sign_in             => l_rec.notes_co_sign,
            id_prof_co_sign_in           => l_rec.id_prof_co_sign,
            create_user_in               => l_rec.create_user,
            create_time_in               => l_rec.create_time,
            create_institution_in        => l_rec.create_institution,
            update_user_in               => l_rec.update_user,
            update_time_in               => l_rec.update_time,
            update_institution_in        => l_rec.update_institution,
            flg_status_prev_in           => l_rec.flg_status_prev,
            id_cancel_reason_in          => l_rec.id_cancel_reason,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN monitorization_vs%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN monitorization_vs.id_monitorization_vs%TYPE
    
     IS
        retval monitorization_vs.id_monitorization_vs%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_monitorization_vs.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_MONITORIZATION_VS'));
    END next_key;

    PROCEDURE ins
    (
        id_monitorization_in         IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        notes_in                     IN monitorization_vs.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in            IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in              IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in                IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_in IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in            IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        id_prof_order_in             IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_order_type_in             IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        flg_co_sign_in               IN monitorization_vs.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in                IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in             IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in           IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        create_user_in               IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in           IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        id_monitorization_vs_out     IN OUT monitorization_vs.id_monitorization_vs%TYPE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
        l_pky monitorization_vs.id_monitorization_vs%TYPE := next_key;
    BEGIN
        ins(id_monitorization_vs_in      => l_pky,
            id_monitorization_in         => id_monitorization_in,
            id_vital_sign_in             => id_vital_sign_in,
            notes_in                     => notes_in,
            id_prof_cancel_in            => id_prof_cancel_in,
            notes_cancel_in              => notes_cancel_in,
            flg_status_in                => flg_status_in,
            dt_monitorization_vs_tstz_in => dt_monitorization_vs_tstz_in,
            dt_cancel_tstz_in            => dt_cancel_tstz_in,
            dt_order_in                  => dt_order_in,
            id_prof_order_in             => id_prof_order_in,
            id_order_type_in             => id_order_type_in,
            flg_co_sign_in               => flg_co_sign_in,
            dt_co_sign_in                => dt_co_sign_in,
            notes_co_sign_in             => notes_co_sign_in,
            id_prof_co_sign_in           => id_prof_co_sign_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            flg_status_prev_in           => flg_status_prev_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        id_monitorization_vs_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_monitorization_in         IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        notes_in                     IN monitorization_vs.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in            IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in              IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in                IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_in IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in            IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        id_prof_order_in             IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_order_type_in             IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        flg_co_sign_in               IN monitorization_vs.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in                IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in             IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in           IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        create_user_in               IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in           IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        id_monitorization_vs_out     IN OUT monitorization_vs.id_monitorization_vs%TYPE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_monitorization_in         => id_monitorization_in,
            id_vital_sign_in             => id_vital_sign_in,
            notes_in                     => notes_in,
            id_prof_cancel_in            => id_prof_cancel_in,
            notes_cancel_in              => notes_cancel_in,
            flg_status_in                => flg_status_in,
            dt_monitorization_vs_tstz_in => dt_monitorization_vs_tstz_in,
            dt_cancel_tstz_in            => dt_cancel_tstz_in,
            dt_order_in                  => dt_order_in,
            id_prof_order_in             => id_prof_order_in,
            id_order_type_in             => id_order_type_in,
            flg_co_sign_in               => flg_co_sign_in,
            dt_co_sign_in                => dt_co_sign_in,
            notes_co_sign_in             => notes_co_sign_in,
            id_prof_co_sign_in           => id_prof_co_sign_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            flg_status_prev_in           => flg_status_prev_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            id_monitorization_vs_out     => id_monitorization_vs_out,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    FUNCTION ins
    (
        id_monitorization_in         IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        notes_in                     IN monitorization_vs.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in            IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in              IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in                IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_in IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in            IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        id_prof_order_in             IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_order_type_in             IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        flg_co_sign_in               IN monitorization_vs.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in                IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in             IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in           IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        create_user_in               IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in           IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) RETURN monitorization_vs.id_monitorization_vs%TYPE IS
        l_pky monitorization_vs.id_monitorization_vs%TYPE := next_key;
    BEGIN
        ins(id_monitorization_vs_in      => l_pky,
            id_monitorization_in         => id_monitorization_in,
            id_vital_sign_in             => id_vital_sign_in,
            notes_in                     => notes_in,
            id_prof_cancel_in            => id_prof_cancel_in,
            notes_cancel_in              => notes_cancel_in,
            flg_status_in                => flg_status_in,
            dt_monitorization_vs_tstz_in => dt_monitorization_vs_tstz_in,
            dt_cancel_tstz_in            => dt_cancel_tstz_in,
            dt_order_in                  => dt_order_in,
            id_prof_order_in             => id_prof_order_in,
            id_order_type_in             => id_order_type_in,
            flg_co_sign_in               => flg_co_sign_in,
            dt_co_sign_in                => dt_co_sign_in,
            notes_co_sign_in             => notes_co_sign_in,
            id_prof_co_sign_in           => id_prof_co_sign_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            flg_status_prev_in           => flg_status_prev_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_monitorization_in         IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        notes_in                     IN monitorization_vs.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in            IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in              IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in                IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_in IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in            IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        id_prof_order_in             IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_order_type_in             IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        flg_co_sign_in               IN monitorization_vs.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in                IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in             IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in           IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        create_user_in               IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in           IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) RETURN monitorization_vs.id_monitorization_vs%TYPE IS
        l_pky    monitorization_vs.id_monitorization_vs%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_monitorization_vs_in      => l_pky,
            id_monitorization_in         => id_monitorization_in,
            id_vital_sign_in             => id_vital_sign_in,
            notes_in                     => notes_in,
            id_prof_cancel_in            => id_prof_cancel_in,
            notes_cancel_in              => notes_cancel_in,
            flg_status_in                => flg_status_in,
            dt_monitorization_vs_tstz_in => dt_monitorization_vs_tstz_in,
            dt_cancel_tstz_in            => dt_cancel_tstz_in,
            dt_order_in                  => dt_order_in,
            id_prof_order_in             => id_prof_order_in,
            id_order_type_in             => id_order_type_in,
            flg_co_sign_in               => flg_co_sign_in,
            dt_co_sign_in                => dt_co_sign_in,
            notes_co_sign_in             => notes_co_sign_in,
            id_prof_co_sign_in           => id_prof_co_sign_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            flg_status_prev_in           => flg_status_prev_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_monitorization_in         IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        notes_in                     IN monitorization_vs.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in            IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in              IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in                IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_in IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in            IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        id_prof_order_in             IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_order_type_in             IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        flg_co_sign_in               IN monitorization_vs.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in                IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in             IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in           IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        create_user_in               IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in           IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
        l_pky monitorization_vs.id_monitorization_vs%TYPE := next_key;
    BEGIN
        ins(id_monitorization_vs_in      => l_pky,
            id_monitorization_in         => id_monitorization_in,
            id_vital_sign_in             => id_vital_sign_in,
            notes_in                     => notes_in,
            id_prof_cancel_in            => id_prof_cancel_in,
            notes_cancel_in              => notes_cancel_in,
            flg_status_in                => flg_status_in,
            dt_monitorization_vs_tstz_in => dt_monitorization_vs_tstz_in,
            dt_cancel_tstz_in            => dt_cancel_tstz_in,
            dt_order_in                  => dt_order_in,
            id_prof_order_in             => id_prof_order_in,
            id_order_type_in             => id_order_type_in,
            flg_co_sign_in               => flg_co_sign_in,
            dt_co_sign_in                => dt_co_sign_in,
            notes_co_sign_in             => notes_co_sign_in,
            id_prof_co_sign_in           => id_prof_co_sign_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            flg_status_prev_in           => flg_status_prev_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_monitorization_in         IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        notes_in                     IN monitorization_vs.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in            IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in              IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in                IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_in IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in            IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        id_prof_order_in             IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_order_type_in             IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        flg_co_sign_in               IN monitorization_vs.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in                IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in             IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in           IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        create_user_in               IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in           IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        l_pky    monitorization_vs.id_monitorization_vs%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_monitorization_vs_in      => l_pky,
            id_monitorization_in         => id_monitorization_in,
            id_vital_sign_in             => id_vital_sign_in,
            notes_in                     => notes_in,
            id_prof_cancel_in            => id_prof_cancel_in,
            notes_cancel_in              => notes_cancel_in,
            flg_status_in                => flg_status_in,
            dt_monitorization_vs_tstz_in => dt_monitorization_vs_tstz_in,
            dt_cancel_tstz_in            => dt_cancel_tstz_in,
            dt_order_in                  => dt_order_in,
            id_prof_order_in             => id_prof_order_in,
            id_order_type_in             => id_order_type_in,
            flg_co_sign_in               => flg_co_sign_in,
            dt_co_sign_in                => dt_co_sign_in,
            notes_co_sign_in             => notes_co_sign_in,
            id_prof_co_sign_in           => id_prof_co_sign_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            flg_status_prev_in           => flg_status_prev_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN monitorization_vs_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO monitorization_vs
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MONITORIZATION_VS _' || indx,
                                                        value_in           => rows_in(indx).id_monitorization_vs,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MONITORIZATION _' || indx,
                                                        value_in           => rows_in(indx).id_monitorization,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VITAL_SIGN _' || indx,
                                                        value_in           => rows_in(indx).id_vital_sign,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_MONITORIZATION_VS_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_monitorization_vs_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ORDER _' || indx,
                                                        value_in           => rows_in(indx).dt_order,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_ORDER _' || indx,
                                                        value_in           => rows_in(indx).id_prof_order,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ORDER_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_order_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_CO_SIGN _' || indx,
                                                        value_in           => rows_in(indx).flg_co_sign,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CO_SIGN _' || indx,
                                                        value_in           => rows_in(indx).dt_co_sign,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CO_SIGN _' || indx,
                                                        value_in           => rows_in(indx).notes_co_sign,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CO_SIGN _' || indx,
                                                        value_in           => rows_in(indx).id_prof_co_sign,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS_PREV _' || indx,
                                                        value_in           => rows_in(indx).flg_status_prev,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'MONITORIZATION_VS',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN monitorization_vs_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_monitorization_vs_in       IN monitorization_vs.id_monitorization_vs%TYPE,
        id_monitorization_in          IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_monitorization_nin         IN BOOLEAN := TRUE,
        id_vital_sign_in              IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_nin             IN BOOLEAN := TRUE,
        notes_in                      IN monitorization_vs.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        id_prof_cancel_in             IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin            IN BOOLEAN := TRUE,
        notes_cancel_in               IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin              IN BOOLEAN := TRUE,
        flg_status_in                 IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        dt_monitorization_vs_tstz_in  IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_nin IN BOOLEAN := TRUE,
        dt_cancel_tstz_in             IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin            IN BOOLEAN := TRUE,
        dt_order_in                   IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        dt_order_nin                  IN BOOLEAN := TRUE,
        id_prof_order_in              IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_prof_order_nin             IN BOOLEAN := TRUE,
        id_order_type_in              IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        id_order_type_nin             IN BOOLEAN := TRUE,
        flg_co_sign_in                IN monitorization_vs.flg_co_sign%TYPE DEFAULT NULL,
        flg_co_sign_nin               IN BOOLEAN := TRUE,
        dt_co_sign_in                 IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        dt_co_sign_nin                IN BOOLEAN := TRUE,
        notes_co_sign_in              IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_nin             IN BOOLEAN := TRUE,
        id_prof_co_sign_in            IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_nin           IN BOOLEAN := TRUE,
        create_user_in                IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        flg_status_prev_in            IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        flg_status_prev_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in           IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin          IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
        l_rows_out                    table_varchar;
        l_id_monitorization_n         NUMBER(1);
        l_id_vital_sign_n             NUMBER(1);
        l_notes_n                     NUMBER(1);
        l_id_prof_cancel_n            NUMBER(1);
        l_notes_cancel_n              NUMBER(1);
        l_flg_status_n                NUMBER(1);
        l_dt_monitorization_vs_tstz_n NUMBER(1);
        l_dt_cancel_tstz_n            NUMBER(1);
        l_dt_order_n                  NUMBER(1);
        l_id_prof_order_n             NUMBER(1);
        l_id_order_type_n             NUMBER(1);
        l_flg_co_sign_n               NUMBER(1);
        l_dt_co_sign_n                NUMBER(1);
        l_notes_co_sign_n             NUMBER(1);
        l_id_prof_co_sign_n           NUMBER(1);
        l_create_user_n               NUMBER(1);
        l_create_time_n               NUMBER(1);
        l_create_institution_n        NUMBER(1);
        l_update_user_n               NUMBER(1);
        l_update_time_n               NUMBER(1);
        l_update_institution_n        NUMBER(1);
        l_flg_status_prev_n           NUMBER(1);
        l_id_cancel_reason_n          NUMBER(1);
    BEGIN
    
        l_id_monitorization_n         := sys.diutil.bool_to_int(id_monitorization_nin);
        l_id_vital_sign_n             := sys.diutil.bool_to_int(id_vital_sign_nin);
        l_notes_n                     := sys.diutil.bool_to_int(notes_nin);
        l_id_prof_cancel_n            := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n              := sys.diutil.bool_to_int(notes_cancel_nin);
        l_flg_status_n                := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_monitorization_vs_tstz_n := sys.diutil.bool_to_int(dt_monitorization_vs_tstz_nin);
        l_dt_cancel_tstz_n            := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_dt_order_n                  := sys.diutil.bool_to_int(dt_order_nin);
        l_id_prof_order_n             := sys.diutil.bool_to_int(id_prof_order_nin);
        l_id_order_type_n             := sys.diutil.bool_to_int(id_order_type_nin);
        l_flg_co_sign_n               := sys.diutil.bool_to_int(flg_co_sign_nin);
        l_dt_co_sign_n                := sys.diutil.bool_to_int(dt_co_sign_nin);
        l_notes_co_sign_n             := sys.diutil.bool_to_int(notes_co_sign_nin);
        l_id_prof_co_sign_n           := sys.diutil.bool_to_int(id_prof_co_sign_nin);
        l_create_user_n               := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n               := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n        := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n               := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n               := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n        := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_status_prev_n           := sys.diutil.bool_to_int(flg_status_prev_nin);
        l_id_cancel_reason_n          := sys.diutil.bool_to_int(id_cancel_reason_nin);
    
        UPDATE monitorization_vs
           SET id_monitorization         = decode(l_id_monitorization_n,
                                                  0,
                                                  id_monitorization_in,
                                                  nvl(id_monitorization_in, id_monitorization)),
               id_vital_sign             = decode(l_id_vital_sign_n,
                                                  0,
                                                  id_vital_sign_in,
                                                  nvl(id_vital_sign_in, id_vital_sign)),
               notes                     = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_prof_cancel            = decode(l_id_prof_cancel_n,
                                                  0,
                                                  id_prof_cancel_in,
                                                  nvl(id_prof_cancel_in, id_prof_cancel)),
               notes_cancel              = decode(l_notes_cancel_n,
                                                  0,
                                                  notes_cancel_in,
                                                  nvl(notes_cancel_in, notes_cancel)),
               flg_status                = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               dt_monitorization_vs_tstz = decode(l_dt_monitorization_vs_tstz_n,
                                                  0,
                                                  dt_monitorization_vs_tstz_in,
                                                  nvl(dt_monitorization_vs_tstz_in, dt_monitorization_vs_tstz)),
               dt_cancel_tstz            = decode(l_dt_cancel_tstz_n,
                                                  0,
                                                  dt_cancel_tstz_in,
                                                  nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               dt_order                  = decode(l_dt_order_n, 0, dt_order_in, nvl(dt_order_in, dt_order)),
               id_prof_order             = decode(l_id_prof_order_n,
                                                  0,
                                                  id_prof_order_in,
                                                  nvl(id_prof_order_in, id_prof_order)),
               id_order_type             = decode(l_id_order_type_n,
                                                  0,
                                                  id_order_type_in,
                                                  nvl(id_order_type_in, id_order_type)),
               flg_co_sign               = decode(l_flg_co_sign_n, 0, flg_co_sign_in, nvl(flg_co_sign_in, flg_co_sign)),
               dt_co_sign                = decode(l_dt_co_sign_n, 0, dt_co_sign_in, nvl(dt_co_sign_in, dt_co_sign)),
               notes_co_sign             = decode(l_notes_co_sign_n,
                                                  0,
                                                  notes_co_sign_in,
                                                  nvl(notes_co_sign_in, notes_co_sign)),
               id_prof_co_sign           = decode(l_id_prof_co_sign_n,
                                                  0,
                                                  id_prof_co_sign_in,
                                                  nvl(id_prof_co_sign_in, id_prof_co_sign)),
               create_user               = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time               = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution        = decode(l_create_institution_n,
                                                  0,
                                                  create_institution_in,
                                                  nvl(create_institution_in, create_institution)),
               update_user               = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time               = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution        = decode(l_update_institution_n,
                                                  0,
                                                  update_institution_in,
                                                  nvl(update_institution_in, update_institution)),
               flg_status_prev           = decode(l_flg_status_prev_n,
                                                  0,
                                                  flg_status_prev_in,
                                                  nvl(flg_status_prev_in, flg_status_prev)),
               id_cancel_reason          = decode(l_id_cancel_reason_n,
                                                  0,
                                                  id_cancel_reason_in,
                                                  nvl(id_cancel_reason_in, id_cancel_reason))
         WHERE id_monitorization_vs = id_monitorization_vs_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MONITORIZATION_VS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    IF l_name = 'MONVS_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'MVS_MONT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MONITORIZATION',
                                                        value_in           => id_monitorization_in);
                    END IF;
                    IF l_name = 'MVS_ORDER_TYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ORDER_TYPE',
                                                        value_in           => id_order_type_in);
                    END IF;
                    IF l_name = 'MVS_PROF_CANCEL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'MVS_PROF_COSIGN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CO_SIGN',
                                                        value_in           => id_prof_co_sign_in);
                    END IF;
                    IF l_name = 'MVS_PROF_ORDER_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_ORDER',
                                                        value_in           => id_prof_order_in);
                    END IF;
                    IF l_name = 'MVS_VSN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VITAL_SIGN',
                                                        value_in           => id_vital_sign_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_monitorization_vs_in       IN monitorization_vs.id_monitorization_vs%TYPE,
        id_monitorization_in          IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_monitorization_nin         IN BOOLEAN := TRUE,
        id_vital_sign_in              IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_nin             IN BOOLEAN := TRUE,
        notes_in                      IN monitorization_vs.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        id_prof_cancel_in             IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin            IN BOOLEAN := TRUE,
        notes_cancel_in               IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin              IN BOOLEAN := TRUE,
        flg_status_in                 IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        dt_monitorization_vs_tstz_in  IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_nin IN BOOLEAN := TRUE,
        dt_cancel_tstz_in             IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin            IN BOOLEAN := TRUE,
        dt_order_in                   IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        dt_order_nin                  IN BOOLEAN := TRUE,
        id_prof_order_in              IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_prof_order_nin             IN BOOLEAN := TRUE,
        id_order_type_in              IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        id_order_type_nin             IN BOOLEAN := TRUE,
        flg_co_sign_in                IN monitorization_vs.flg_co_sign%TYPE DEFAULT NULL,
        flg_co_sign_nin               IN BOOLEAN := TRUE,
        dt_co_sign_in                 IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        dt_co_sign_nin                IN BOOLEAN := TRUE,
        notes_co_sign_in              IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_nin             IN BOOLEAN := TRUE,
        id_prof_co_sign_in            IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_nin           IN BOOLEAN := TRUE,
        create_user_in                IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        flg_status_prev_in            IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        flg_status_prev_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in           IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin          IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_monitorization_vs_in       => id_monitorization_vs_in,
            id_monitorization_in          => id_monitorization_in,
            id_monitorization_nin         => id_monitorization_nin,
            id_vital_sign_in              => id_vital_sign_in,
            id_vital_sign_nin             => id_vital_sign_nin,
            notes_in                      => notes_in,
            notes_nin                     => notes_nin,
            id_prof_cancel_in             => id_prof_cancel_in,
            id_prof_cancel_nin            => id_prof_cancel_nin,
            notes_cancel_in               => notes_cancel_in,
            notes_cancel_nin              => notes_cancel_nin,
            flg_status_in                 => flg_status_in,
            flg_status_nin                => flg_status_nin,
            dt_monitorization_vs_tstz_in  => dt_monitorization_vs_tstz_in,
            dt_monitorization_vs_tstz_nin => dt_monitorization_vs_tstz_nin,
            dt_cancel_tstz_in             => dt_cancel_tstz_in,
            dt_cancel_tstz_nin            => dt_cancel_tstz_nin,
            dt_order_in                   => dt_order_in,
            dt_order_nin                  => dt_order_nin,
            id_prof_order_in              => id_prof_order_in,
            id_prof_order_nin             => id_prof_order_nin,
            id_order_type_in              => id_order_type_in,
            id_order_type_nin             => id_order_type_nin,
            flg_co_sign_in                => flg_co_sign_in,
            flg_co_sign_nin               => flg_co_sign_nin,
            dt_co_sign_in                 => dt_co_sign_in,
            dt_co_sign_nin                => dt_co_sign_nin,
            notes_co_sign_in              => notes_co_sign_in,
            notes_co_sign_nin             => notes_co_sign_nin,
            id_prof_co_sign_in            => id_prof_co_sign_in,
            id_prof_co_sign_nin           => id_prof_co_sign_nin,
            create_user_in                => create_user_in,
            create_user_nin               => create_user_nin,
            create_time_in                => create_time_in,
            create_time_nin               => create_time_nin,
            create_institution_in         => create_institution_in,
            create_institution_nin        => create_institution_nin,
            update_user_in                => update_user_in,
            update_user_nin               => update_user_nin,
            update_time_in                => update_time_in,
            update_time_nin               => update_time_nin,
            update_institution_in         => update_institution_in,
            update_institution_nin        => update_institution_nin,
            flg_status_prev_in            => flg_status_prev_in,
            flg_status_prev_nin           => flg_status_prev_nin,
            id_cancel_reason_in           => id_cancel_reason_in,
            id_cancel_reason_nin          => id_cancel_reason_nin,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_monitorization_in          IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_monitorization_nin         IN BOOLEAN := TRUE,
        id_vital_sign_in              IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_nin             IN BOOLEAN := TRUE,
        notes_in                      IN monitorization_vs.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        id_prof_cancel_in             IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin            IN BOOLEAN := TRUE,
        notes_cancel_in               IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin              IN BOOLEAN := TRUE,
        flg_status_in                 IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        dt_monitorization_vs_tstz_in  IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_nin IN BOOLEAN := TRUE,
        dt_cancel_tstz_in             IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin            IN BOOLEAN := TRUE,
        dt_order_in                   IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        dt_order_nin                  IN BOOLEAN := TRUE,
        id_prof_order_in              IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_prof_order_nin             IN BOOLEAN := TRUE,
        id_order_type_in              IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        id_order_type_nin             IN BOOLEAN := TRUE,
        flg_co_sign_in                IN monitorization_vs.flg_co_sign%TYPE DEFAULT NULL,
        flg_co_sign_nin               IN BOOLEAN := TRUE,
        dt_co_sign_in                 IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        dt_co_sign_nin                IN BOOLEAN := TRUE,
        notes_co_sign_in              IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_nin             IN BOOLEAN := TRUE,
        id_prof_co_sign_in            IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_nin           IN BOOLEAN := TRUE,
        create_user_in                IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        flg_status_prev_in            IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        flg_status_prev_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in           IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin          IN BOOLEAN := TRUE,
        where_in                      VARCHAR2 DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
        l_sql                         VARCHAR2(32767);
        l_rows_out                    table_varchar;
        l_id_monitorization_n         NUMBER(1);
        l_id_vital_sign_n             NUMBER(1);
        l_notes_n                     NUMBER(1);
        l_id_prof_cancel_n            NUMBER(1);
        l_notes_cancel_n              NUMBER(1);
        l_flg_status_n                NUMBER(1);
        l_dt_monitorization_vs_tstz_n NUMBER(1);
        l_dt_cancel_tstz_n            NUMBER(1);
        l_dt_order_n                  NUMBER(1);
        l_id_prof_order_n             NUMBER(1);
        l_id_order_type_n             NUMBER(1);
        l_flg_co_sign_n               NUMBER(1);
        l_dt_co_sign_n                NUMBER(1);
        l_notes_co_sign_n             NUMBER(1);
        l_id_prof_co_sign_n           NUMBER(1);
        l_create_user_n               NUMBER(1);
        l_create_time_n               NUMBER(1);
        l_create_institution_n        NUMBER(1);
        l_update_user_n               NUMBER(1);
        l_update_time_n               NUMBER(1);
        l_update_institution_n        NUMBER(1);
        l_flg_status_prev_n           NUMBER(1);
        l_id_cancel_reason_n          NUMBER(1);
        id_monitorization_vs_in       monitorization_vs.id_monitorization_vs%TYPE;
    BEGIN
    
        l_id_monitorization_n         := sys.diutil.bool_to_int(id_monitorization_nin);
        l_id_vital_sign_n             := sys.diutil.bool_to_int(id_vital_sign_nin);
        l_notes_n                     := sys.diutil.bool_to_int(notes_nin);
        l_id_prof_cancel_n            := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n              := sys.diutil.bool_to_int(notes_cancel_nin);
        l_flg_status_n                := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_monitorization_vs_tstz_n := sys.diutil.bool_to_int(dt_monitorization_vs_tstz_nin);
        l_dt_cancel_tstz_n            := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_dt_order_n                  := sys.diutil.bool_to_int(dt_order_nin);
        l_id_prof_order_n             := sys.diutil.bool_to_int(id_prof_order_nin);
        l_id_order_type_n             := sys.diutil.bool_to_int(id_order_type_nin);
        l_flg_co_sign_n               := sys.diutil.bool_to_int(flg_co_sign_nin);
        l_dt_co_sign_n                := sys.diutil.bool_to_int(dt_co_sign_nin);
        l_notes_co_sign_n             := sys.diutil.bool_to_int(notes_co_sign_nin);
        l_id_prof_co_sign_n           := sys.diutil.bool_to_int(id_prof_co_sign_nin);
        l_create_user_n               := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n               := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n        := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n               := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n               := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n        := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_status_prev_n           := sys.diutil.bool_to_int(flg_status_prev_nin);
        l_id_cancel_reason_n          := sys.diutil.bool_to_int(id_cancel_reason_nin);
    
        l_sql := 'UPDATE MONITORIZATION_VS SET ' || ' ID_MONITORIZATION = decode (' || l_id_monitorization_n ||
                 ',0,:id_monitorization_in, NVL (:id_monitorization_in, ID_MONITORIZATION)) ' || ',' ||
                 ' ID_VITAL_SIGN = decode (' || l_id_vital_sign_n ||
                 ',0,:id_vital_sign_in, NVL (:id_vital_sign_in, ID_VITAL_SIGN)) ' || ',' || ' NOTES = decode (' ||
                 l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' || ' ID_PROF_CANCEL = decode (' ||
                 l_id_prof_cancel_n || ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' DT_MONITORIZATION_VS_TSTZ = decode (' || l_dt_monitorization_vs_tstz_n ||
                 ',0,:dt_monitorization_vs_tstz_in, NVL (:dt_monitorization_vs_tstz_in, DT_MONITORIZATION_VS_TSTZ)) ' || ',' ||
                 ' DT_CANCEL_TSTZ = decode (' || l_dt_cancel_tstz_n ||
                 ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) ' || ',' || ' DT_ORDER = decode (' ||
                 l_dt_order_n || ',0,:dt_order_in, NVL (:dt_order_in, DT_ORDER)) ' || ',' ||
                 ' ID_PROF_ORDER = decode (' || l_id_prof_order_n ||
                 ',0,:id_prof_order_in, NVL (:id_prof_order_in, ID_PROF_ORDER)) ' || ',' || ' ID_ORDER_TYPE = decode (' ||
                 l_id_order_type_n || ',0,:id_order_type_in, NVL (:id_order_type_in, ID_ORDER_TYPE)) ' || ',' ||
                 ' FLG_CO_SIGN = decode (' || l_flg_co_sign_n ||
                 ',0,:flg_co_sign_in, NVL (:flg_co_sign_in, FLG_CO_SIGN)) ' || ',' || ' DT_CO_SIGN = decode (' ||
                 l_dt_co_sign_n || ',0,:dt_co_sign_in, NVL (:dt_co_sign_in, DT_CO_SIGN)) ' || ',' ||
                 ' NOTES_CO_SIGN = decode (' || l_notes_co_sign_n ||
                 ',0,:notes_co_sign_in, NVL (:notes_co_sign_in, NOTES_CO_SIGN)) ' || ',' ||
                 ' ID_PROF_CO_SIGN = decode (' || l_id_prof_co_sign_n ||
                 ',0,:id_prof_co_sign_in, NVL (:id_prof_co_sign_in, ID_PROF_CO_SIGN)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' FLG_STATUS_PREV = decode (' || l_flg_status_prev_n ||
                 ',0,:flg_status_prev_in, NVL (:flg_status_prev_in, FLG_STATUS_PREV)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_monitorization_in, id_vital_sign_in, notes_in, id_prof_cancel_in, notes_cancel_in, flg_status_in, dt_monitorization_vs_tstz_in, dt_cancel_tstz_in, dt_order_in, id_prof_order_in, id_order_type_in, flg_co_sign_in, dt_co_sign_in, notes_co_sign_in, id_prof_co_sign_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_status_prev_in, id_cancel_reason_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MONITORIZATION_VS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    IF l_name = 'MONVS_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'MVS_MONT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MONITORIZATION',
                                                        value_in           => id_monitorization_in);
                    END IF;
                    IF l_name = 'MVS_ORDER_TYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ORDER_TYPE',
                                                        value_in           => id_order_type_in);
                    END IF;
                    IF l_name = 'MVS_PROF_CANCEL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'MVS_PROF_COSIGN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CO_SIGN',
                                                        value_in           => id_prof_co_sign_in);
                    END IF;
                    IF l_name = 'MVS_PROF_ORDER_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_ORDER',
                                                        value_in           => id_prof_order_in);
                    END IF;
                    IF l_name = 'MVS_VSN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VITAL_SIGN',
                                                        value_in           => id_vital_sign_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_monitorization_in          IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_monitorization_nin         IN BOOLEAN := TRUE,
        id_vital_sign_in              IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_nin             IN BOOLEAN := TRUE,
        notes_in                      IN monitorization_vs.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        id_prof_cancel_in             IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin            IN BOOLEAN := TRUE,
        notes_cancel_in               IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin              IN BOOLEAN := TRUE,
        flg_status_in                 IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        dt_monitorization_vs_tstz_in  IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_nin IN BOOLEAN := TRUE,
        dt_cancel_tstz_in             IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin            IN BOOLEAN := TRUE,
        dt_order_in                   IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        dt_order_nin                  IN BOOLEAN := TRUE,
        id_prof_order_in              IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_prof_order_nin             IN BOOLEAN := TRUE,
        id_order_type_in              IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        id_order_type_nin             IN BOOLEAN := TRUE,
        flg_co_sign_in                IN monitorization_vs.flg_co_sign%TYPE DEFAULT NULL,
        flg_co_sign_nin               IN BOOLEAN := TRUE,
        dt_co_sign_in                 IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        dt_co_sign_nin                IN BOOLEAN := TRUE,
        notes_co_sign_in              IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_nin             IN BOOLEAN := TRUE,
        id_prof_co_sign_in            IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_nin           IN BOOLEAN := TRUE,
        create_user_in                IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        flg_status_prev_in            IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        flg_status_prev_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in           IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin          IN BOOLEAN := TRUE,
        where_in                      VARCHAR2 DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_monitorization_in          => id_monitorization_in,
            id_monitorization_nin         => id_monitorization_nin,
            id_vital_sign_in              => id_vital_sign_in,
            id_vital_sign_nin             => id_vital_sign_nin,
            notes_in                      => notes_in,
            notes_nin                     => notes_nin,
            id_prof_cancel_in             => id_prof_cancel_in,
            id_prof_cancel_nin            => id_prof_cancel_nin,
            notes_cancel_in               => notes_cancel_in,
            notes_cancel_nin              => notes_cancel_nin,
            flg_status_in                 => flg_status_in,
            flg_status_nin                => flg_status_nin,
            dt_monitorization_vs_tstz_in  => dt_monitorization_vs_tstz_in,
            dt_monitorization_vs_tstz_nin => dt_monitorization_vs_tstz_nin,
            dt_cancel_tstz_in             => dt_cancel_tstz_in,
            dt_cancel_tstz_nin            => dt_cancel_tstz_nin,
            dt_order_in                   => dt_order_in,
            dt_order_nin                  => dt_order_nin,
            id_prof_order_in              => id_prof_order_in,
            id_prof_order_nin             => id_prof_order_nin,
            id_order_type_in              => id_order_type_in,
            id_order_type_nin             => id_order_type_nin,
            flg_co_sign_in                => flg_co_sign_in,
            flg_co_sign_nin               => flg_co_sign_nin,
            dt_co_sign_in                 => dt_co_sign_in,
            dt_co_sign_nin                => dt_co_sign_nin,
            notes_co_sign_in              => notes_co_sign_in,
            notes_co_sign_nin             => notes_co_sign_nin,
            id_prof_co_sign_in            => id_prof_co_sign_in,
            id_prof_co_sign_nin           => id_prof_co_sign_nin,
            create_user_in                => create_user_in,
            create_user_nin               => create_user_nin,
            create_time_in                => create_time_in,
            create_time_nin               => create_time_nin,
            create_institution_in         => create_institution_in,
            create_institution_nin        => create_institution_nin,
            update_user_in                => update_user_in,
            update_user_nin               => update_user_nin,
            update_time_in                => update_time_in,
            update_time_nin               => update_time_nin,
            update_institution_in         => update_institution_in,
            update_institution_nin        => update_institution_nin,
            flg_status_prev_in            => flg_status_prev_in,
            flg_status_prev_nin           => flg_status_prev_nin,
            id_cancel_reason_in           => id_cancel_reason_in,
            id_cancel_reason_nin          => id_cancel_reason_nin,
            where_in                      => where_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN monitorization_vs%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_monitorization_vs_in      => rec_in.id_monitorization_vs,
            id_monitorization_in         => rec_in.id_monitorization,
            id_vital_sign_in             => rec_in.id_vital_sign,
            notes_in                     => rec_in.notes,
            id_prof_cancel_in            => rec_in.id_prof_cancel,
            notes_cancel_in              => rec_in.notes_cancel,
            flg_status_in                => rec_in.flg_status,
            dt_monitorization_vs_tstz_in => rec_in.dt_monitorization_vs_tstz,
            dt_cancel_tstz_in            => rec_in.dt_cancel_tstz,
            dt_order_in                  => rec_in.dt_order,
            id_prof_order_in             => rec_in.id_prof_order,
            id_order_type_in             => rec_in.id_order_type,
            flg_co_sign_in               => rec_in.flg_co_sign,
            dt_co_sign_in                => rec_in.dt_co_sign,
            notes_co_sign_in             => rec_in.notes_co_sign,
            id_prof_co_sign_in           => rec_in.id_prof_co_sign,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution,
            flg_status_prev_in           => rec_in.flg_status_prev,
            id_cancel_reason_in          => rec_in.id_cancel_reason
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN monitorization_vs%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_monitorization_vs_in      => rec_in.id_monitorization_vs,
            id_monitorization_in         => rec_in.id_monitorization,
            id_vital_sign_in             => rec_in.id_vital_sign,
            notes_in                     => rec_in.notes,
            id_prof_cancel_in            => rec_in.id_prof_cancel,
            notes_cancel_in              => rec_in.notes_cancel,
            flg_status_in                => rec_in.flg_status,
            dt_monitorization_vs_tstz_in => rec_in.dt_monitorization_vs_tstz,
            dt_cancel_tstz_in            => rec_in.dt_cancel_tstz,
            dt_order_in                  => rec_in.dt_order,
            id_prof_order_in             => rec_in.id_prof_order,
            id_order_type_in             => rec_in.id_order_type,
            flg_co_sign_in               => rec_in.flg_co_sign,
            dt_co_sign_in                => rec_in.dt_co_sign,
            notes_co_sign_in             => rec_in.notes_co_sign,
            id_prof_co_sign_in           => rec_in.id_prof_co_sign,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution,
            flg_status_prev_in           => rec_in.flg_status_prev,
            id_cancel_reason_in          => rec_in.id_cancel_reason
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_monitorization_vs_in      IN monitorization_vs.id_monitorization_vs%TYPE,
        id_monitorization_in         IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        notes_in                     IN monitorization_vs.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in            IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in              IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in                IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_in IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in            IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        id_prof_order_in             IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_order_type_in             IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        flg_co_sign_in               IN monitorization_vs.flg_co_sign%TYPE DEFAULT NULL,
        dt_co_sign_in                IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in             IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in           IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        create_user_in               IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in           IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        upd(id_monitorization_vs_in      => id_monitorization_vs_in,
            id_monitorization_in         => id_monitorization_in,
            id_vital_sign_in             => id_vital_sign_in,
            notes_in                     => notes_in,
            id_prof_cancel_in            => id_prof_cancel_in,
            notes_cancel_in              => notes_cancel_in,
            flg_status_in                => flg_status_in,
            dt_monitorization_vs_tstz_in => dt_monitorization_vs_tstz_in,
            dt_cancel_tstz_in            => dt_cancel_tstz_in,
            dt_order_in                  => dt_order_in,
            id_prof_order_in             => id_prof_order_in,
            id_order_type_in             => id_order_type_in,
            flg_co_sign_in               => flg_co_sign_in,
            dt_co_sign_in                => dt_co_sign_in,
            notes_co_sign_in             => notes_co_sign_in,
            id_prof_co_sign_in           => id_prof_co_sign_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            flg_status_prev_in           => flg_status_prev_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_monitorization_vs_in      => id_monitorization_vs_in,
                id_monitorization_in         => id_monitorization_in,
                id_vital_sign_in             => id_vital_sign_in,
                notes_in                     => notes_in,
                id_prof_cancel_in            => id_prof_cancel_in,
                notes_cancel_in              => notes_cancel_in,
                flg_status_in                => flg_status_in,
                dt_monitorization_vs_tstz_in => dt_monitorization_vs_tstz_in,
                dt_cancel_tstz_in            => dt_cancel_tstz_in,
                dt_order_in                  => dt_order_in,
                id_prof_order_in             => id_prof_order_in,
                id_order_type_in             => id_order_type_in,
                flg_co_sign_in               => flg_co_sign_in,
                dt_co_sign_in                => dt_co_sign_in,
                notes_co_sign_in             => notes_co_sign_in,
                id_prof_co_sign_in           => id_prof_co_sign_in,
                create_user_in               => create_user_in,
                create_time_in               => create_time_in,
                create_institution_in        => create_institution_in,
                update_user_in               => update_user_in,
                update_time_in               => update_time_in,
                update_institution_in        => update_institution_in,
                flg_status_prev_in           => flg_status_prev_in,
                id_cancel_reason_in          => id_cancel_reason_in,
                handle_error_in              => handle_error_in,
                rows_out                     => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_monitorization_vs_in      IN monitorization_vs.id_monitorization_vs%TYPE,
        id_monitorization_in         IN monitorization_vs.id_monitorization%TYPE DEFAULT NULL,
        id_vital_sign_in             IN monitorization_vs.id_vital_sign%TYPE DEFAULT NULL,
        notes_in                     IN monitorization_vs.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in            IN monitorization_vs.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in              IN monitorization_vs.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in                IN monitorization_vs.flg_status%TYPE DEFAULT NULL,
        dt_monitorization_vs_tstz_in IN monitorization_vs.dt_monitorization_vs_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in            IN monitorization_vs.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_order_in                  IN monitorization_vs.dt_order%TYPE DEFAULT NULL,
        id_prof_order_in             IN monitorization_vs.id_prof_order%TYPE DEFAULT NULL,
        id_order_type_in             IN monitorization_vs.id_order_type%TYPE DEFAULT NULL,
        flg_co_sign_in               IN monitorization_vs.flg_co_sign%TYPE DEFAULT NULL,
        dt_co_sign_in                IN monitorization_vs.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in             IN monitorization_vs.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in           IN monitorization_vs.id_prof_co_sign%TYPE DEFAULT NULL,
        create_user_in               IN monitorization_vs.create_user%TYPE DEFAULT NULL,
        create_time_in               IN monitorization_vs.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN monitorization_vs.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN monitorization_vs.update_user%TYPE DEFAULT NULL,
        update_time_in               IN monitorization_vs.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN monitorization_vs.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in           IN monitorization_vs.flg_status_prev%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN monitorization_vs.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_monitorization_vs_in,
                id_monitorization_in,
                id_vital_sign_in,
                notes_in,
                id_prof_cancel_in,
                notes_cancel_in,
                flg_status_in,
                dt_monitorization_vs_tstz_in,
                dt_cancel_tstz_in,
                dt_order_in,
                id_prof_order_in,
                id_order_type_in,
                flg_co_sign_in,
                dt_co_sign_in,
                notes_co_sign_in,
                id_prof_co_sign_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_status_prev_in,
                id_cancel_reason_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN monitorization_vs_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_monitorization_vs      id_monitorization_vs_cc;
        l_id_monitorization         id_monitorization_cc;
        l_id_vital_sign             id_vital_sign_cc;
        l_notes                     notes_cc;
        l_id_prof_cancel            id_prof_cancel_cc;
        l_notes_cancel              notes_cancel_cc;
        l_flg_status                flg_status_cc;
        l_dt_monitorization_vs_tstz dt_monitorization_vs_tstz_cc;
        l_dt_cancel_tstz            dt_cancel_tstz_cc;
        l_dt_order                  dt_order_cc;
        l_id_prof_order             id_prof_order_cc;
        l_id_order_type             id_order_type_cc;
        l_flg_co_sign               flg_co_sign_cc;
        l_dt_co_sign                dt_co_sign_cc;
        l_notes_co_sign             notes_co_sign_cc;
        l_id_prof_co_sign           id_prof_co_sign_cc;
        l_create_user               create_user_cc;
        l_create_time               create_time_cc;
        l_create_institution        create_institution_cc;
        l_update_user               update_user_cc;
        l_update_time               update_time_cc;
        l_update_institution        update_institution_cc;
        l_flg_status_prev           flg_status_prev_cc;
        l_id_cancel_reason          id_cancel_reason_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_monitorization_vs(i) := col_in(i).id_monitorization_vs;
            l_id_monitorization(i) := col_in(i).id_monitorization;
            l_id_vital_sign(i) := col_in(i).id_vital_sign;
            l_notes(i) := col_in(i).notes;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_flg_status(i) := col_in(i).flg_status;
            l_dt_monitorization_vs_tstz(i) := col_in(i).dt_monitorization_vs_tstz;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_dt_order(i) := col_in(i).dt_order;
            l_id_prof_order(i) := col_in(i).id_prof_order;
            l_id_order_type(i) := col_in(i).id_order_type;
            l_flg_co_sign(i) := col_in(i).flg_co_sign;
            l_dt_co_sign(i) := col_in(i).dt_co_sign;
            l_notes_co_sign(i) := col_in(i).notes_co_sign;
            l_id_prof_co_sign(i) := col_in(i).id_prof_co_sign;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_status_prev(i) := col_in(i).flg_status_prev;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE monitorization_vs
                   SET id_monitorization         = nvl(l_id_monitorization(i), id_monitorization),
                       id_vital_sign             = nvl(l_id_vital_sign(i), id_vital_sign),
                       notes                     = nvl(l_notes(i), notes),
                       id_prof_cancel            = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       notes_cancel              = nvl(l_notes_cancel(i), notes_cancel),
                       flg_status                = nvl(l_flg_status(i), flg_status),
                       dt_monitorization_vs_tstz = nvl(l_dt_monitorization_vs_tstz(i), dt_monitorization_vs_tstz),
                       dt_cancel_tstz            = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       dt_order                  = nvl(l_dt_order(i), dt_order),
                       id_prof_order             = nvl(l_id_prof_order(i), id_prof_order),
                       id_order_type             = nvl(l_id_order_type(i), id_order_type),
                       flg_co_sign               = nvl(l_flg_co_sign(i), flg_co_sign),
                       dt_co_sign                = nvl(l_dt_co_sign(i), dt_co_sign),
                       notes_co_sign             = nvl(l_notes_co_sign(i), notes_co_sign),
                       id_prof_co_sign           = nvl(l_id_prof_co_sign(i), id_prof_co_sign),
                       create_user               = nvl(l_create_user(i), create_user),
                       create_time               = nvl(l_create_time(i), create_time),
                       create_institution        = nvl(l_create_institution(i), create_institution),
                       update_user               = nvl(l_update_user(i), update_user),
                       update_time               = nvl(l_update_time(i), update_time),
                       update_institution        = nvl(l_update_institution(i), update_institution),
                       flg_status_prev           = nvl(l_flg_status_prev(i), flg_status_prev),
                       id_cancel_reason          = nvl(l_id_cancel_reason(i), id_cancel_reason)
                 WHERE id_monitorization_vs = l_id_monitorization_vs(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE monitorization_vs
                   SET id_monitorization         = l_id_monitorization(i),
                       id_vital_sign             = l_id_vital_sign(i),
                       notes                     = l_notes(i),
                       id_prof_cancel            = l_id_prof_cancel(i),
                       notes_cancel              = l_notes_cancel(i),
                       flg_status                = l_flg_status(i),
                       dt_monitorization_vs_tstz = l_dt_monitorization_vs_tstz(i),
                       dt_cancel_tstz            = l_dt_cancel_tstz(i),
                       dt_order                  = l_dt_order(i),
                       id_prof_order             = l_id_prof_order(i),
                       id_order_type             = l_id_order_type(i),
                       flg_co_sign               = l_flg_co_sign(i),
                       dt_co_sign                = l_dt_co_sign(i),
                       notes_co_sign             = l_notes_co_sign(i),
                       id_prof_co_sign           = l_id_prof_co_sign(i),
                       create_user               = l_create_user(i),
                       create_time               = l_create_time(i),
                       create_institution        = l_create_institution(i),
                       update_user               = l_update_user(i),
                       update_time               = l_update_time(i),
                       update_institution        = l_update_institution(i),
                       flg_status_prev           = l_flg_status_prev(i),
                       id_cancel_reason          = l_id_cancel_reason(i)
                 WHERE id_monitorization_vs = l_id_monitorization_vs(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN monitorization_vs_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE MONITORIZATION_VS
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE MONITORIZATION_VS
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE MONITORIZATION_VS set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE MONITORIZATION_VS set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_monitorization_vs_in IN monitorization_vs.id_monitorization_vs%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorization_vs
         WHERE id_monitorization_vs = id_monitorization_vs_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_monitorization_vs_in IN monitorization_vs.id_monitorization_vs%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_monitorization_vs_in => id_monitorization_vs_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_MONITORIZATION_VS
    PROCEDURE del_id_monitorization_vs
    (
        id_monitorization_vs_in IN monitorization_vs.id_monitorization_vs%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorization_vs
         WHERE id_monitorization_vs = id_monitorization_vs_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_monitorization_vs;

    -- Delete all rows for primary key column ID_MONITORIZATION_VS
    PROCEDURE del_id_monitorization_vs
    (
        id_monitorization_vs_in IN monitorization_vs.id_monitorization_vs%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_monitorization_vs(id_monitorization_vs_in => id_monitorization_vs_in,
                                 handle_error_in         => handle_error_in,
                                 rows_out                => rows_out);
    END del_id_monitorization_vs;

    PROCEDURE del_monvs_cr_fk
    (
        id_cancel_reason_in IN monitorization_vs.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorization_vs
         WHERE id_cancel_reason = del_monvs_cr_fk.id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_monvs_cr_fk;

    PROCEDURE del_monvs_cr_fk
    (
        id_cancel_reason_in IN monitorization_vs.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_monvs_cr_fk(id_cancel_reason_in => id_cancel_reason_in,
                        handle_error_in     => handle_error_in,
                        rows_out            => rows_out);
    END del_monvs_cr_fk;

    PROCEDURE del_mvs_mont_fk
    (
        id_monitorization_in IN monitorization_vs.id_monitorization%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorization_vs
         WHERE id_monitorization = del_mvs_mont_fk.id_monitorization_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mvs_mont_fk;

    PROCEDURE del_mvs_mont_fk
    (
        id_monitorization_in IN monitorization_vs.id_monitorization%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mvs_mont_fk(id_monitorization_in => id_monitorization_in,
                        handle_error_in      => handle_error_in,
                        rows_out             => rows_out);
    END del_mvs_mont_fk;

    PROCEDURE del_mvs_order_type_fk
    (
        id_order_type_in IN monitorization_vs.id_order_type%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorization_vs
         WHERE id_order_type = del_mvs_order_type_fk.id_order_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mvs_order_type_fk;

    PROCEDURE del_mvs_order_type_fk
    (
        id_order_type_in IN monitorization_vs.id_order_type%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mvs_order_type_fk(id_order_type_in => id_order_type_in,
                              handle_error_in  => handle_error_in,
                              rows_out         => rows_out);
    END del_mvs_order_type_fk;

    PROCEDURE del_mvs_prof_cancel_fk
    (
        id_prof_cancel_in IN monitorization_vs.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorization_vs
         WHERE id_prof_cancel = del_mvs_prof_cancel_fk.id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mvs_prof_cancel_fk;

    PROCEDURE del_mvs_prof_cancel_fk
    (
        id_prof_cancel_in IN monitorization_vs.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mvs_prof_cancel_fk(id_prof_cancel_in => id_prof_cancel_in,
                               handle_error_in   => handle_error_in,
                               rows_out          => rows_out);
    END del_mvs_prof_cancel_fk;

    PROCEDURE del_mvs_prof_cosign_fk
    (
        id_prof_co_sign_in IN monitorization_vs.id_prof_co_sign%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorization_vs
         WHERE id_prof_co_sign = del_mvs_prof_cosign_fk.id_prof_co_sign_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mvs_prof_cosign_fk;

    PROCEDURE del_mvs_prof_cosign_fk
    (
        id_prof_co_sign_in IN monitorization_vs.id_prof_co_sign%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mvs_prof_cosign_fk(id_prof_co_sign_in => id_prof_co_sign_in,
                               handle_error_in    => handle_error_in,
                               rows_out           => rows_out);
    END del_mvs_prof_cosign_fk;

    PROCEDURE del_mvs_prof_order_fk
    (
        id_prof_order_in IN monitorization_vs.id_prof_order%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorization_vs
         WHERE id_prof_order = del_mvs_prof_order_fk.id_prof_order_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mvs_prof_order_fk;

    PROCEDURE del_mvs_prof_order_fk
    (
        id_prof_order_in IN monitorization_vs.id_prof_order%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mvs_prof_order_fk(id_prof_order_in => id_prof_order_in,
                              handle_error_in  => handle_error_in,
                              rows_out         => rows_out);
    END del_mvs_prof_order_fk;

    PROCEDURE del_mvs_vsn_fk
    (
        id_vital_sign_in IN monitorization_vs.id_vital_sign%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM monitorization_vs
         WHERE id_vital_sign = del_mvs_vsn_fk.id_vital_sign_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mvs_vsn_fk;

    PROCEDURE del_mvs_vsn_fk
    (
        id_vital_sign_in IN monitorization_vs.id_vital_sign%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mvs_vsn_fk(id_vital_sign_in => id_vital_sign_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_mvs_vsn_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM MONITORIZATION_VS';
        ELSE
            RETURN 'DELETE FROM MONITORIZATION_VS WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MONITORIZATION_VS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MONITORIZATION_VS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(monitorization_vs_inout IN OUT monitorization_vs%ROWTYPE) IS
    BEGIN
        monitorization_vs_inout.id_monitorization_vs      := NULL;
        monitorization_vs_inout.id_monitorization         := NULL;
        monitorization_vs_inout.id_vital_sign             := NULL;
        monitorization_vs_inout.notes                     := NULL;
        monitorization_vs_inout.id_prof_cancel            := NULL;
        monitorization_vs_inout.notes_cancel              := NULL;
        monitorization_vs_inout.flg_status                := NULL;
        monitorization_vs_inout.dt_monitorization_vs_tstz := NULL;
        monitorization_vs_inout.dt_cancel_tstz            := NULL;
        monitorization_vs_inout.dt_order                  := NULL;
        monitorization_vs_inout.id_prof_order             := NULL;
        monitorization_vs_inout.id_order_type             := NULL;
        monitorization_vs_inout.flg_co_sign               := 'N';
        monitorization_vs_inout.dt_co_sign                := NULL;
        monitorization_vs_inout.notes_co_sign             := NULL;
        monitorization_vs_inout.id_prof_co_sign           := NULL;
        monitorization_vs_inout.create_user               := NULL;
        monitorization_vs_inout.create_time               := NULL;
        monitorization_vs_inout.create_institution        := NULL;
        monitorization_vs_inout.update_user               := NULL;
        monitorization_vs_inout.update_time               := NULL;
        monitorization_vs_inout.update_institution        := NULL;
        monitorization_vs_inout.flg_status_prev           := NULL;
        monitorization_vs_inout.id_cancel_reason          := NULL;
    END initrec;

    FUNCTION initrec RETURN monitorization_vs%ROWTYPE IS
        l_monitorization_vs monitorization_vs%ROWTYPE;
    BEGIN
        l_monitorization_vs.flg_co_sign := 'N';
        RETURN l_monitorization_vs;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN monitorization_vs_tc IS
        data monitorization_vs_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM monitorization_vs
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN monitorization_vs_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data monitorization_vs_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_monitorization_vs;
/
