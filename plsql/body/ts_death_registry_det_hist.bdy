/*-- Last Change Revision: $Rev: 1769413 $*/
/*-- Last Change by: $Author: carlos.ferreira $*/
/*-- Date of last change: $Date: 2017-01-31 11:43:26 +0000 (ter, 31 jan 2017) $*/

CREATE OR REPLACE PACKAGE BODY ts_death_registry_det_hist
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2017-01-31 11:28:58
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN death_registry_det_hist.id_death_registry_det_hist%TYPE IS
        retval death_registry_det_hist.id_death_registry_det_hist%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_death_registry_det_hist.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_death_registry_hist_in IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_in IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT current_timestamp,
        id_death_registry_in      IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_ds_component_in        IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        value_n_in                IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_tz_in               IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_vc2_in              IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        unit_measure_value_in     IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        create_user_in            IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky death_registry_det_hist.id_death_registry_det_hist%TYPE := next_key;
    BEGIN
        ins(id_death_registry_det_hist_in => l_pky,
            id_death_registry_hist_in     => id_death_registry_hist_in,
            dt_death_registry_hist_in     => dt_death_registry_hist_in,
            id_death_registry_in          => id_death_registry_in,
            id_ds_component_in            => id_ds_component_in,
            value_n_in                    => value_n_in,
            value_tz_in                   => value_tz_in,
            value_vc2_in                  => value_vc2_in,
            unit_measure_value_in         => unit_measure_value_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_death_registry_hist_in IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_in IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT current_timestamp,
        id_death_registry_in      IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_ds_component_in        IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        value_n_in                IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_tz_in               IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_vc2_in              IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        unit_measure_value_in     IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        create_user_in            IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_death_registry_hist_in => id_death_registry_hist_in,
            dt_death_registry_hist_in => dt_death_registry_hist_in,
            id_death_registry_in      => id_death_registry_in,
            id_ds_component_in        => id_ds_component_in,
            value_n_in                => value_n_in,
            value_tz_in               => value_tz_in,
            value_vc2_in              => value_vc2_in,
            unit_measure_value_in     => unit_measure_value_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_death_registry_hist_in      IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_in      IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT current_timestamp,
        id_death_registry_in           IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_ds_component_in             IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        value_n_in                     IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_tz_in                    IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_vc2_in                   IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        unit_measure_value_in          IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        create_user_in                 IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        id_death_registry_det_hist_out IN OUT death_registry_det_hist.id_death_registry_det_hist%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky death_registry_det_hist.id_death_registry_det_hist%TYPE := next_key;
    BEGIN
        ins(id_death_registry_det_hist_in => l_pky,
            id_death_registry_hist_in     => id_death_registry_hist_in,
            dt_death_registry_hist_in     => dt_death_registry_hist_in,
            id_death_registry_in          => id_death_registry_in,
            id_ds_component_in            => id_ds_component_in,
            value_n_in                    => value_n_in,
            value_tz_in                   => value_tz_in,
            value_vc2_in                  => value_vc2_in,
            unit_measure_value_in         => unit_measure_value_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        id_death_registry_det_hist_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_death_registry_hist_in      IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_in      IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT current_timestamp,
        id_death_registry_in           IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_ds_component_in             IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        value_n_in                     IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_tz_in                    IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_vc2_in                   IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        unit_measure_value_in          IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        create_user_in                 IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        id_death_registry_det_hist_out IN OUT death_registry_det_hist.id_death_registry_det_hist%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_death_registry_hist_in      => id_death_registry_hist_in,
            dt_death_registry_hist_in      => dt_death_registry_hist_in,
            id_death_registry_in           => id_death_registry_in,
            id_ds_component_in             => id_ds_component_in,
            value_n_in                     => value_n_in,
            value_tz_in                    => value_tz_in,
            value_vc2_in                   => value_vc2_in,
            unit_measure_value_in          => unit_measure_value_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            id_death_registry_det_hist_out => id_death_registry_det_hist_out,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_death_registry_hist_in IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_in IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT current_timestamp,
        id_death_registry_in      IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_ds_component_in        IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        value_n_in                IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_tz_in               IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_vc2_in              IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        unit_measure_value_in     IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        create_user_in            IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN death_registry_det_hist.id_death_registry_det_hist%TYPE IS
        l_pky death_registry_det_hist.id_death_registry_det_hist%TYPE := next_key;
    BEGIN
        ins(id_death_registry_det_hist_in => l_pky,
            id_death_registry_hist_in     => id_death_registry_hist_in,
            dt_death_registry_hist_in     => dt_death_registry_hist_in,
            id_death_registry_in          => id_death_registry_in,
            id_ds_component_in            => id_ds_component_in,
            value_n_in                    => value_n_in,
            value_tz_in                   => value_tz_in,
            value_vc2_in                  => value_vc2_in,
            unit_measure_value_in         => unit_measure_value_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_death_registry_hist_in IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_in IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT current_timestamp,
        id_death_registry_in      IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_ds_component_in        IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        value_n_in                IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_tz_in               IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_vc2_in              IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        unit_measure_value_in     IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        create_user_in            IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN death_registry_det_hist.id_death_registry_det_hist%TYPE IS
        l_pky    death_registry_det_hist.id_death_registry_det_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_death_registry_det_hist_in => l_pky,
            id_death_registry_hist_in     => id_death_registry_hist_in,
            dt_death_registry_hist_in     => dt_death_registry_hist_in,
            id_death_registry_in          => id_death_registry_in,
            id_ds_component_in            => id_ds_component_in,
            value_n_in                    => value_n_in,
            value_tz_in                   => value_tz_in,
            value_vc2_in                  => value_vc2_in,
            unit_measure_value_in         => unit_measure_value_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_death_registry_det_hist_in IN death_registry_det_hist.id_death_registry_det_hist%TYPE,
        id_death_registry_hist_in     IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_in     IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT current_timestamp,
        id_death_registry_in          IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_ds_component_in            IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        value_n_in                    IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_tz_in                   IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_vc2_in                  IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        unit_measure_value_in         IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        create_user_in                IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_time_in                IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_time_in                IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO death_registry_det_hist
            (id_death_registry_det_hist,
             id_death_registry_hist,
             dt_death_registry_hist,
             id_death_registry,
             id_ds_component,
             value_n,
             value_tz,
             value_vc2,
             unit_measure_value,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_death_registry_det_hist_in,
             id_death_registry_hist_in,
             dt_death_registry_hist_in,
             id_death_registry_in,
             id_ds_component_in,
             value_n_in,
             value_tz_in,
             value_vc2_in,
             unit_measure_value_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END ins;

    PROCEDURE ins
    (
        id_death_registry_det_hist_in IN death_registry_det_hist.id_death_registry_det_hist%TYPE,
        id_death_registry_hist_in     IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_in     IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT current_timestamp,
        id_death_registry_in          IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_ds_component_in            IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        value_n_in                    IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_tz_in                   IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_vc2_in                  IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        unit_measure_value_in         IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        create_user_in                IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_time_in                IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_time_in                IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_death_registry_det_hist_in => id_death_registry_det_hist_in,
            id_death_registry_hist_in     => id_death_registry_hist_in,
            dt_death_registry_hist_in     => dt_death_registry_hist_in,
            id_death_registry_in          => id_death_registry_in,
            id_ds_component_in            => id_ds_component_in,
            value_n_in                    => value_n_in,
            value_tz_in                   => value_tz_in,
            value_vc2_in                  => value_vc2_in,
            unit_measure_value_in         => unit_measure_value_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN death_registry_det_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec death_registry_det_hist%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_death_registry_det_hist := next_key(sequence_in);
        END IF;

        ins(id_death_registry_det_hist_in => l_rec.id_death_registry_det_hist,
            id_death_registry_hist_in     => l_rec.id_death_registry_hist,
            dt_death_registry_hist_in     => l_rec.dt_death_registry_hist,
            id_death_registry_in          => l_rec.id_death_registry,
            id_ds_component_in            => l_rec.id_ds_component,
            value_n_in                    => l_rec.value_n,
            value_tz_in                   => l_rec.value_tz,
            value_vc2_in                  => l_rec.value_vc2,
            unit_measure_value_in         => l_rec.unit_measure_value,
            create_user_in                => l_rec.create_user,
            create_time_in                => l_rec.create_time,
            create_institution_in         => l_rec.create_institution,
            update_user_in                => l_rec.update_user,
            update_time_in                => l_rec.update_time,
            update_institution_in         => l_rec.update_institution,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN death_registry_det_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN death_registry_det_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO death_registry_det_hist
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;

    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN death_registry_det_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_death_registry_det_hist_in IN death_registry_det_hist.id_death_registry_det_hist%TYPE,
        id_death_registry_hist_in     IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        id_death_registry_hist_nin    IN BOOLEAN := TRUE,
        dt_death_registry_hist_in     IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_nin    IN BOOLEAN := TRUE,
        id_death_registry_in          IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_death_registry_nin         IN BOOLEAN := TRUE,
        id_ds_component_in            IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        id_ds_component_nin           IN BOOLEAN := TRUE,
        value_n_in                    IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_n_nin                   IN BOOLEAN := TRUE,
        value_tz_in                   IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_tz_nin                  IN BOOLEAN := TRUE,
        value_vc2_in                  IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        value_vc2_nin                 IN BOOLEAN := TRUE,
        unit_measure_value_in         IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        unit_measure_value_nin        IN BOOLEAN := TRUE,
        create_user_in                IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_id_death_registry_hist_n NUMBER(1) := sys.diutil.bool_to_int(id_death_registry_hist_nin);
        l_dt_death_registry_hist_n NUMBER(1) := sys.diutil.bool_to_int(dt_death_registry_hist_nin);
        l_id_death_registry_n      NUMBER(1) := sys.diutil.bool_to_int(id_death_registry_nin);
        l_id_ds_component_n        NUMBER(1) := sys.diutil.bool_to_int(id_ds_component_nin);
        l_value_n_n                NUMBER(1) := sys.diutil.bool_to_int(value_n_nin);
        l_value_tz_n               NUMBER(1) := sys.diutil.bool_to_int(value_tz_nin);
        l_value_vc2_n              NUMBER(1) := sys.diutil.bool_to_int(value_vc2_nin);
        l_unit_measure_value_n     NUMBER(1) := sys.diutil.bool_to_int(unit_measure_value_nin);
        l_create_user_n            NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN

        UPDATE death_registry_det_hist
           SET id_death_registry_hist = decode(l_id_death_registry_hist_n,
                                               0,
                                               id_death_registry_hist_in,
                                               nvl(id_death_registry_hist_in, id_death_registry_hist)),
               dt_death_registry_hist = decode(l_dt_death_registry_hist_n,
                                               0,
                                               dt_death_registry_hist_in,
                                               nvl(dt_death_registry_hist_in, dt_death_registry_hist)),
               id_death_registry      = decode(l_id_death_registry_n,
                                               0,
                                               id_death_registry_in,
                                               nvl(id_death_registry_in, id_death_registry)),
               id_ds_component        = decode(l_id_ds_component_n,
                                               0,
                                               id_ds_component_in,
                                               nvl(id_ds_component_in, id_ds_component)),
               value_n                = decode(l_value_n_n, 0, value_n_in, nvl(value_n_in, value_n)),
               value_tz               = decode(l_value_tz_n, 0, value_tz_in, nvl(value_tz_in, value_tz)),
               value_vc2              = decode(l_value_vc2_n, 0, value_vc2_in, nvl(value_vc2_in, value_vc2)),
               unit_measure_value     = decode(l_unit_measure_value_n,
                                               0,
                                               unit_measure_value_in,
                                               nvl(unit_measure_value_in, unit_measure_value)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution))
         WHERE id_death_registry_det_hist = id_death_registry_det_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_death_registry_det_hist_in IN death_registry_det_hist.id_death_registry_det_hist%TYPE,
        id_death_registry_hist_in     IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        id_death_registry_hist_nin    IN BOOLEAN := TRUE,
        dt_death_registry_hist_in     IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_nin    IN BOOLEAN := TRUE,
        id_death_registry_in          IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_death_registry_nin         IN BOOLEAN := TRUE,
        id_ds_component_in            IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        id_ds_component_nin           IN BOOLEAN := TRUE,
        value_n_in                    IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_n_nin                   IN BOOLEAN := TRUE,
        value_tz_in                   IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_tz_nin                  IN BOOLEAN := TRUE,
        value_vc2_in                  IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        value_vc2_nin                 IN BOOLEAN := TRUE,
        unit_measure_value_in         IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        unit_measure_value_nin        IN BOOLEAN := TRUE,
        create_user_in                IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_death_registry_det_hist_in => id_death_registry_det_hist_in,
            id_death_registry_hist_in     => id_death_registry_hist_in,
            id_death_registry_hist_nin    => id_death_registry_hist_nin,
            dt_death_registry_hist_in     => dt_death_registry_hist_in,
            dt_death_registry_hist_nin    => dt_death_registry_hist_nin,
            id_death_registry_in          => id_death_registry_in,
            id_death_registry_nin         => id_death_registry_nin,
            id_ds_component_in            => id_ds_component_in,
            id_ds_component_nin           => id_ds_component_nin,
            value_n_in                    => value_n_in,
            value_n_nin                   => value_n_nin,
            value_tz_in                   => value_tz_in,
            value_tz_nin                  => value_tz_nin,
            value_vc2_in                  => value_vc2_in,
            value_vc2_nin                 => value_vc2_nin,
            unit_measure_value_in         => unit_measure_value_in,
            unit_measure_value_nin        => unit_measure_value_nin,
            create_user_in                => create_user_in,
            create_user_nin               => create_user_nin,
            create_time_in                => create_time_in,
            create_time_nin               => create_time_nin,
            create_institution_in         => create_institution_in,
            create_institution_nin        => create_institution_nin,
            update_user_in                => update_user_in,
            update_user_nin               => update_user_nin,
            update_time_in                => update_time_in,
            update_time_nin               => update_time_nin,
            update_institution_in         => update_institution_in,
            update_institution_nin        => update_institution_nin,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_death_registry_hist_in  IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        id_death_registry_hist_nin IN BOOLEAN := TRUE,
        dt_death_registry_hist_in  IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_nin IN BOOLEAN := TRUE,
        id_death_registry_in       IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_death_registry_nin      IN BOOLEAN := TRUE,
        id_ds_component_in         IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        id_ds_component_nin        IN BOOLEAN := TRUE,
        value_n_in                 IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_n_nin                IN BOOLEAN := TRUE,
        value_tz_in                IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_tz_nin               IN BOOLEAN := TRUE,
        value_vc2_in               IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        value_vc2_nin              IN BOOLEAN := TRUE,
        unit_measure_value_in      IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        unit_measure_value_nin     IN BOOLEAN := TRUE,
        create_user_in             IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        where_in                   IN VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_id_death_registry_hist_n NUMBER(1) := sys.diutil.bool_to_int(id_death_registry_hist_nin);
        l_dt_death_registry_hist_n NUMBER(1) := sys.diutil.bool_to_int(dt_death_registry_hist_nin);
        l_id_death_registry_n      NUMBER(1) := sys.diutil.bool_to_int(id_death_registry_nin);
        l_id_ds_component_n        NUMBER(1) := sys.diutil.bool_to_int(id_ds_component_nin);
        l_value_n_n                NUMBER(1) := sys.diutil.bool_to_int(value_n_nin);
        l_value_tz_n               NUMBER(1) := sys.diutil.bool_to_int(value_tz_nin);
        l_value_vc2_n              NUMBER(1) := sys.diutil.bool_to_int(value_vc2_nin);
        l_unit_measure_value_n     NUMBER(1) := sys.diutil.bool_to_int(unit_measure_value_nin);
        l_create_user_n            NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN
        l_id_death_registry_hist_n := sys.diutil.bool_to_int(id_death_registry_hist_nin);
        l_dt_death_registry_hist_n := sys.diutil.bool_to_int(dt_death_registry_hist_nin);
        l_id_death_registry_n      := sys.diutil.bool_to_int(id_death_registry_nin);
        l_id_ds_component_n        := sys.diutil.bool_to_int(id_ds_component_nin);
        l_value_n_n                := sys.diutil.bool_to_int(value_n_nin);
        l_value_tz_n               := sys.diutil.bool_to_int(value_tz_nin);
        l_value_vc2_n              := sys.diutil.bool_to_int(value_vc2_nin);
        l_unit_measure_value_n     := sys.diutil.bool_to_int(unit_measure_value_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_sql                      := 'UPDATE death_registry_det_hist SET' || ' ID_DEATH_REGISTRY_HIST = decode (' ||
                                      l_id_death_registry_hist_n ||
                                      ',0,:ID_DEATH_REGISTRY_HIST_in, NVL (:ID_DEATH_REGISTRY_HIST_in, ID_DEATH_REGISTRY_HIST)) ' || ',' ||
                                      ' DT_DEATH_REGISTRY_HIST = decode (' || l_dt_death_registry_hist_n ||
                                      ',0,:DT_DEATH_REGISTRY_HIST_in, NVL (:DT_DEATH_REGISTRY_HIST_in, DT_DEATH_REGISTRY_HIST)) ' || ',' ||
                                      ' ID_DEATH_REGISTRY = decode (' || l_id_death_registry_n ||
                                      ',0,:ID_DEATH_REGISTRY_in, NVL (:ID_DEATH_REGISTRY_in, ID_DEATH_REGISTRY)) ' || ',' ||
                                      ' ID_DS_COMPONENT = decode (' || l_id_ds_component_n ||
                                      ',0,:ID_DS_COMPONENT_in, NVL (:ID_DS_COMPONENT_in, ID_DS_COMPONENT)) ' || ',' ||
                                      ' VALUE_N = decode (' || l_value_n_n ||
                                      ',0,:VALUE_N_in, NVL (:VALUE_N_in, VALUE_N)) ' || ',' || ' VALUE_TZ = decode (' ||
                                      l_value_tz_n || ',0,:VALUE_TZ_in, NVL (:VALUE_TZ_in, VALUE_TZ)) ' || ',' ||
                                      ' VALUE_VC2 = decode (' || l_value_vc2_n ||
                                      ',0,:VALUE_VC2_in, NVL (:VALUE_VC2_in, VALUE_VC2)) ' || ',' ||
                                      ' UNIT_MEASURE_VALUE = decode (' || l_unit_measure_value_n ||
                                      ',0,:UNIT_MEASURE_VALUE_in, NVL (:UNIT_MEASURE_VALUE_in, UNIT_MEASURE_VALUE)) ' || ',' ||
                                      ' CREATE_USER = decode (' || l_create_user_n ||
                                      ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                      ' CREATE_TIME = decode (' || l_create_time_n ||
                                      ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                      ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                      ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                      ' UPDATE_USER = decode (' || l_update_user_n ||
                                      ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                      ' UPDATE_TIME = decode (' || l_update_time_n ||
                                      ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                      ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                      ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' ||
                                      ' where ' || nvl(where_in, '(1=1)') ||
                                      ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_death_registry_hist_in, dt_death_registry_hist_in, id_death_registry_in, id_ds_component_in, value_n_in, value_tz_in, value_vc2_in, unit_measure_value_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_death_registry_hist_in  IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        id_death_registry_hist_nin IN BOOLEAN := TRUE,
        dt_death_registry_hist_in  IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_nin IN BOOLEAN := TRUE,
        id_death_registry_in       IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_death_registry_nin      IN BOOLEAN := TRUE,
        id_ds_component_in         IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        id_ds_component_nin        IN BOOLEAN := TRUE,
        value_n_in                 IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_n_nin                IN BOOLEAN := TRUE,
        value_tz_in                IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_tz_nin               IN BOOLEAN := TRUE,
        value_vc2_in               IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        value_vc2_nin              IN BOOLEAN := TRUE,
        unit_measure_value_in      IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        unit_measure_value_nin     IN BOOLEAN := TRUE,
        create_user_in             IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        where_in                   IN VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_death_registry_hist_in  => id_death_registry_hist_in,
            id_death_registry_hist_nin => id_death_registry_hist_nin,
            dt_death_registry_hist_in  => dt_death_registry_hist_in,
            dt_death_registry_hist_nin => dt_death_registry_hist_nin,
            id_death_registry_in       => id_death_registry_in,
            id_death_registry_nin      => id_death_registry_nin,
            id_ds_component_in         => id_ds_component_in,
            id_ds_component_nin        => id_ds_component_nin,
            value_n_in                 => value_n_in,
            value_n_nin                => value_n_nin,
            value_tz_in                => value_tz_in,
            value_tz_nin               => value_tz_nin,
            value_vc2_in               => value_vc2_in,
            value_vc2_nin              => value_vc2_nin,
            unit_measure_value_in      => unit_measure_value_in,
            unit_measure_value_nin     => unit_measure_value_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_death_registry_det_hist_in IN death_registry_det_hist.id_death_registry_det_hist%TYPE,
        id_death_registry_hist_in     IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_in     IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT NULL,
        id_death_registry_in          IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_ds_component_in            IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        value_n_in                    IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_tz_in                   IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_vc2_in                  IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        unit_measure_value_in         IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        create_user_in                IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_time_in                IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_time_in                IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_death_registry_det_hist_in => id_death_registry_det_hist_in,
            id_death_registry_hist_in     => id_death_registry_hist_in,
            dt_death_registry_hist_in     => dt_death_registry_hist_in,
            id_death_registry_in          => id_death_registry_in,
            id_ds_component_in            => id_ds_component_in,
            value_n_in                    => value_n_in,
            value_tz_in                   => value_tz_in,
            value_vc2_in                  => value_vc2_in,
            unit_measure_value_in         => unit_measure_value_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_death_registry_det_hist_in => id_death_registry_det_hist_in,
                id_death_registry_hist_in     => id_death_registry_hist_in,
                dt_death_registry_hist_in     => dt_death_registry_hist_in,
                id_death_registry_in          => id_death_registry_in,
                id_ds_component_in            => id_ds_component_in,
                value_n_in                    => value_n_in,
                value_tz_in                   => value_tz_in,
                value_vc2_in                  => value_vc2_in,
                unit_measure_value_in         => unit_measure_value_in,
                create_user_in                => create_user_in,
                create_time_in                => create_time_in,
                create_institution_in         => create_institution_in,
                update_user_in                => update_user_in,
                update_time_in                => update_time_in,
                update_institution_in         => update_institution_in,
                handle_error_in               => handle_error_in,
                rows_out                      => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_death_registry_det_hist_in IN death_registry_det_hist.id_death_registry_det_hist%TYPE,
        id_death_registry_hist_in     IN death_registry_det_hist.id_death_registry_hist%TYPE DEFAULT NULL,
        dt_death_registry_hist_in     IN death_registry_det_hist.dt_death_registry_hist%TYPE DEFAULT NULL,
        id_death_registry_in          IN death_registry_det_hist.id_death_registry%TYPE DEFAULT NULL,
        id_ds_component_in            IN death_registry_det_hist.id_ds_component%TYPE DEFAULT NULL,
        value_n_in                    IN death_registry_det_hist.value_n%TYPE DEFAULT NULL,
        value_tz_in                   IN death_registry_det_hist.value_tz%TYPE DEFAULT NULL,
        value_vc2_in                  IN death_registry_det_hist.value_vc2%TYPE DEFAULT NULL,
        unit_measure_value_in         IN death_registry_det_hist.unit_measure_value%TYPE DEFAULT NULL,
        create_user_in                IN death_registry_det_hist.create_user%TYPE DEFAULT NULL,
        create_time_in                IN death_registry_det_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN death_registry_det_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN death_registry_det_hist.update_user%TYPE DEFAULT NULL,
        update_time_in                IN death_registry_det_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN death_registry_det_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_death_registry_det_hist_in,
                id_death_registry_hist_in,
                dt_death_registry_hist_in,
                id_death_registry_in,
                id_ds_component_in,
                value_n_in,
                value_tz_in,
                value_vc2_in,
                unit_measure_value_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN death_registry_det_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_death_registry_det_hist_in => rec_in.id_death_registry_det_hist,
            id_death_registry_hist_in     => rec_in.id_death_registry_hist,
            dt_death_registry_hist_in     => rec_in.dt_death_registry_hist,
            id_death_registry_in          => rec_in.id_death_registry,
            id_ds_component_in            => rec_in.id_ds_component,
            value_n_in                    => rec_in.value_n,
            value_tz_in                   => rec_in.value_tz,
            value_vc2_in                  => rec_in.value_vc2,
            unit_measure_value_in         => rec_in.unit_measure_value,
            create_user_in                => rec_in.create_user,
            create_time_in                => rec_in.create_time,
            create_institution_in         => rec_in.create_institution,
            update_user_in                => rec_in.update_user,
            update_time_in                => rec_in.update_time,
            update_institution_in         => rec_in.update_institution,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN death_registry_det_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_death_registry_det_hist_in => rec_in.id_death_registry_det_hist,
            id_death_registry_hist_in     => rec_in.id_death_registry_hist,
            dt_death_registry_hist_in     => rec_in.dt_death_registry_hist,
            id_death_registry_in          => rec_in.id_death_registry,
            id_ds_component_in            => rec_in.id_ds_component,
            value_n_in                    => rec_in.value_n,
            value_tz_in                   => rec_in.value_tz,
            value_vc2_in                  => rec_in.value_vc2,
            unit_measure_value_in         => rec_in.unit_measure_value,
            create_user_in                => rec_in.create_user,
            create_time_in                => rec_in.create_time,
            create_institution_in         => rec_in.create_institution,
            update_user_in                => rec_in.update_user,
            update_time_in                => rec_in.update_time,
            update_institution_in         => rec_in.update_institution,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN death_registry_det_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_death_registry_det_hist id_death_registry_det_hist_cc;
        l_id_death_registry_hist     id_death_registry_hist_cc;
        l_dt_death_registry_hist     dt_death_registry_hist_cc;
        l_id_death_registry          id_death_registry_cc;
        l_id_ds_component            id_ds_component_cc;
        l_value_n                    value_n_cc;
        l_value_tz                   value_tz_cc;
        l_value_vc2                  value_vc2_cc;
        l_unit_measure_value         unit_measure_value_cc;
        l_create_user                create_user_cc;
        l_create_time                create_time_cc;
        l_create_institution         create_institution_cc;
        l_update_user                update_user_cc;
        l_update_time                update_time_cc;
        l_update_institution         update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_death_registry_det_hist(i) := col_in(i).id_death_registry_det_hist;
            l_id_death_registry_hist(i) := col_in(i).id_death_registry_hist;
            l_dt_death_registry_hist(i) := col_in(i).dt_death_registry_hist;
            l_id_death_registry(i) := col_in(i).id_death_registry;
            l_id_ds_component(i) := col_in(i).id_ds_component;
            l_value_n(i) := col_in(i).value_n;
            l_value_tz(i) := col_in(i).value_tz;
            l_value_vc2(i) := col_in(i).value_vc2;
            l_unit_measure_value(i) := col_in(i).unit_measure_value;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE death_registry_det_hist
                   SET id_death_registry_hist = nvl(l_id_death_registry_hist(i), id_death_registry_hist),
                       dt_death_registry_hist = nvl(l_dt_death_registry_hist(i), dt_death_registry_hist),
                       id_death_registry      = nvl(l_id_death_registry(i), id_death_registry),
                       id_ds_component        = nvl(l_id_ds_component(i), id_ds_component),
                       value_n                = nvl(l_value_n(i), value_n),
                       value_tz               = nvl(l_value_tz(i), value_tz),
                       value_vc2              = nvl(l_value_vc2(i), value_vc2),
                       unit_measure_value     = nvl(l_unit_measure_value(i), unit_measure_value),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution)
                 WHERE id_death_registry_det_hist = l_id_death_registry_det_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE death_registry_det_hist
                   SET id_death_registry_hist = l_id_death_registry_hist(i),
                       dt_death_registry_hist = l_dt_death_registry_hist(i),
                       id_death_registry      = l_id_death_registry(i),
                       id_ds_component        = l_id_ds_component(i),
                       value_n                = l_value_n(i),
                       value_tz               = l_value_tz(i),
                       value_vc2              = l_value_vc2(i),
                       unit_measure_value     = l_unit_measure_value(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i)
                 WHERE id_death_registry_det_hist = l_id_death_registry_det_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;

    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN death_registry_det_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE death_registry_det_hist
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE death_registry_det_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE death_registry_det_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_death_registry_det_hist_in IN death_registry_det_hist.id_death_registry_det_hist%TYPE,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM death_registry_det_hist
         WHERE id_death_registry_det_hist = id_death_registry_det_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_death_registry_det_hist_in IN death_registry_det_hist.id_death_registry_det_hist%TYPE,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_death_registry_det_hist_in => id_death_registry_det_hist_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END del;

    -- Delete all rows for this DTHRD_H_DTHR_H_FK foreign key value
    PROCEDURE del_dthrd_h_dthr_h_fk
    (
        id_death_registry_hist_in IN death_registry_det_hist.id_death_registry_hist%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM death_registry_det_hist
         WHERE id_death_registry_hist = id_death_registry_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_dthrd_h_dthr_h_fk;

    -- Delete all rows for this DTHRD_H_DTHR_H_FK foreign key value
    PROCEDURE del_dthrd_h_dthr_h_fk
    (
        id_death_registry_hist_in IN death_registry_det_hist.id_death_registry_hist%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dthrd_h_dthr_h_fk(id_death_registry_hist_in => id_death_registry_hist_in,
                              handle_error_in           => handle_error_in,
                              rows_out                  => rows_out);
    END del_dthrd_h_dthr_h_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM death_registry_det_hist';
        ELSE
            RETURN 'DELETE FROM death_registry_det_hist WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(death_registry_det_hist_inout IN OUT death_registry_det_hist%ROWTYPE) IS
    BEGIN
        death_registry_det_hist_inout.id_death_registry_det_hist := NULL;
        death_registry_det_hist_inout.id_death_registry_hist     := NULL;
        death_registry_det_hist_inout.dt_death_registry_hist     := NULL;
        death_registry_det_hist_inout.id_death_registry          := NULL;
        death_registry_det_hist_inout.id_ds_component            := NULL;
        death_registry_det_hist_inout.value_n                    := NULL;
        death_registry_det_hist_inout.value_tz                   := NULL;
        death_registry_det_hist_inout.value_vc2                  := NULL;
        death_registry_det_hist_inout.unit_measure_value         := NULL;
        death_registry_det_hist_inout.create_user                := NULL;
        death_registry_det_hist_inout.create_time                := NULL;
        death_registry_det_hist_inout.create_institution         := NULL;
        death_registry_det_hist_inout.update_user                := NULL;
        death_registry_det_hist_inout.update_time                := NULL;
        death_registry_det_hist_inout.update_institution         := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN death_registry_det_hist%ROWTYPE IS
        l_death_registry_det_hist death_registry_det_hist%ROWTYPE;
    BEGIN
        RETURN l_death_registry_det_hist;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN death_registry_det_hist_tc IS
        data death_registry_det_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM death_registry_det_hist
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN death_registry_det_hist_tc IS
        data death_registry_det_hist_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;

    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;

    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_death_registry_det_hist;
/

