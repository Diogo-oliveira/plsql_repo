/*-- Last Change Revision: $Rev: 1967126 $*/
/*-- Last Change by: $Author: elisabete.bugalho $*/
/*-- Date of last change: $Date: 2020-10-16 17:52:47 +0100 (sex, 16 out 2020) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_complaint
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2020-10-08 15:30:07
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_complaint.id_epis_complaint%TYPE IS
        retval epis_complaint.id_epis_complaint%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_epis_complaint.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in               IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_professional_in          IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_complaint_in             IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        patient_complaint_in        IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        flg_status_in               IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        id_epis_complaint_parent_in IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        adw_last_update_tstz_in     IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        flg_reported_by_in          IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        id_epis_complaint_root_in   IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_dep_clin_serv_in         IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_edition_type_in         IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in              IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        id_cancel_info_det_in       IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        patient_complaint_arabic_in IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        id_complaint_alias_in       IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_complaint.id_epis_complaint%TYPE := next_key;
    BEGIN
        ins(id_epis_complaint_in        => l_pky,
            id_episode_in               => id_episode_in,
            id_professional_in          => id_professional_in,
            id_complaint_in             => id_complaint_in,
            patient_complaint_in        => patient_complaint_in,
            flg_status_in               => flg_status_in,
            id_epis_complaint_parent_in => id_epis_complaint_parent_in,
            adw_last_update_tstz_in     => adw_last_update_tstz_in,
            flg_reported_by_in          => flg_reported_by_in,
            id_epis_complaint_root_in   => id_epis_complaint_root_in,
            id_dep_clin_serv_in         => id_dep_clin_serv_in,
            flg_edition_type_in         => flg_edition_type_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_cancel_info_det_in       => id_cancel_info_det_in,
            patient_complaint_arabic_in => patient_complaint_arabic_in,
            id_complaint_alias_in       => id_complaint_alias_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in               IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_professional_in          IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_complaint_in             IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        patient_complaint_in        IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        flg_status_in               IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        id_epis_complaint_parent_in IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        adw_last_update_tstz_in     IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        flg_reported_by_in          IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        id_epis_complaint_root_in   IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_dep_clin_serv_in         IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_edition_type_in         IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in              IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        id_cancel_info_det_in       IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        patient_complaint_arabic_in IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        id_complaint_alias_in       IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in               => id_episode_in,
            id_professional_in          => id_professional_in,
            id_complaint_in             => id_complaint_in,
            patient_complaint_in        => patient_complaint_in,
            flg_status_in               => flg_status_in,
            id_epis_complaint_parent_in => id_epis_complaint_parent_in,
            adw_last_update_tstz_in     => adw_last_update_tstz_in,
            flg_reported_by_in          => flg_reported_by_in,
            id_epis_complaint_root_in   => id_epis_complaint_root_in,
            id_dep_clin_serv_in         => id_dep_clin_serv_in,
            flg_edition_type_in         => flg_edition_type_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_cancel_info_det_in       => id_cancel_info_det_in,
            patient_complaint_arabic_in => patient_complaint_arabic_in,
            id_complaint_alias_in       => id_complaint_alias_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in               IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_professional_in          IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_complaint_in             IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        patient_complaint_in        IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        flg_status_in               IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        id_epis_complaint_parent_in IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        adw_last_update_tstz_in     IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        flg_reported_by_in          IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        id_epis_complaint_root_in   IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_dep_clin_serv_in         IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_edition_type_in         IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in              IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        id_cancel_info_det_in       IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        patient_complaint_arabic_in IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        id_complaint_alias_in       IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        id_epis_complaint_out       IN OUT epis_complaint.id_epis_complaint%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_complaint.id_epis_complaint%TYPE := next_key;
    BEGIN
        ins(id_epis_complaint_in        => l_pky,
            id_episode_in               => id_episode_in,
            id_professional_in          => id_professional_in,
            id_complaint_in             => id_complaint_in,
            patient_complaint_in        => patient_complaint_in,
            flg_status_in               => flg_status_in,
            id_epis_complaint_parent_in => id_epis_complaint_parent_in,
            adw_last_update_tstz_in     => adw_last_update_tstz_in,
            flg_reported_by_in          => flg_reported_by_in,
            id_epis_complaint_root_in   => id_epis_complaint_root_in,
            id_dep_clin_serv_in         => id_dep_clin_serv_in,
            flg_edition_type_in         => flg_edition_type_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_cancel_info_det_in       => id_cancel_info_det_in,
            patient_complaint_arabic_in => patient_complaint_arabic_in,
            id_complaint_alias_in       => id_complaint_alias_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        id_epis_complaint_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in               IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_professional_in          IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_complaint_in             IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        patient_complaint_in        IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        flg_status_in               IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        id_epis_complaint_parent_in IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        adw_last_update_tstz_in     IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        flg_reported_by_in          IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        id_epis_complaint_root_in   IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_dep_clin_serv_in         IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_edition_type_in         IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in              IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        id_cancel_info_det_in       IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        patient_complaint_arabic_in IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        id_complaint_alias_in       IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        id_epis_complaint_out       IN OUT epis_complaint.id_epis_complaint%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in               => id_episode_in,
            id_professional_in          => id_professional_in,
            id_complaint_in             => id_complaint_in,
            patient_complaint_in        => patient_complaint_in,
            flg_status_in               => flg_status_in,
            id_epis_complaint_parent_in => id_epis_complaint_parent_in,
            adw_last_update_tstz_in     => adw_last_update_tstz_in,
            flg_reported_by_in          => flg_reported_by_in,
            id_epis_complaint_root_in   => id_epis_complaint_root_in,
            id_dep_clin_serv_in         => id_dep_clin_serv_in,
            flg_edition_type_in         => flg_edition_type_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_cancel_info_det_in       => id_cancel_info_det_in,
            patient_complaint_arabic_in => patient_complaint_arabic_in,
            id_complaint_alias_in       => id_complaint_alias_in,
            id_epis_complaint_out       => id_epis_complaint_out,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in               IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_professional_in          IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_complaint_in             IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        patient_complaint_in        IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        flg_status_in               IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        id_epis_complaint_parent_in IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        adw_last_update_tstz_in     IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        flg_reported_by_in          IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        id_epis_complaint_root_in   IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_dep_clin_serv_in         IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_edition_type_in         IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in              IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        id_cancel_info_det_in       IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        patient_complaint_arabic_in IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        id_complaint_alias_in       IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN epis_complaint.id_epis_complaint%TYPE IS
        l_pky epis_complaint.id_epis_complaint%TYPE := next_key;
    BEGIN
        ins(id_epis_complaint_in        => l_pky,
            id_episode_in               => id_episode_in,
            id_professional_in          => id_professional_in,
            id_complaint_in             => id_complaint_in,
            patient_complaint_in        => patient_complaint_in,
            flg_status_in               => flg_status_in,
            id_epis_complaint_parent_in => id_epis_complaint_parent_in,
            adw_last_update_tstz_in     => adw_last_update_tstz_in,
            flg_reported_by_in          => flg_reported_by_in,
            id_epis_complaint_root_in   => id_epis_complaint_root_in,
            id_dep_clin_serv_in         => id_dep_clin_serv_in,
            flg_edition_type_in         => flg_edition_type_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_cancel_info_det_in       => id_cancel_info_det_in,
            patient_complaint_arabic_in => patient_complaint_arabic_in,
            id_complaint_alias_in       => id_complaint_alias_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in               IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_professional_in          IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_complaint_in             IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        patient_complaint_in        IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        flg_status_in               IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        id_epis_complaint_parent_in IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        adw_last_update_tstz_in     IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        flg_reported_by_in          IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        id_epis_complaint_root_in   IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_dep_clin_serv_in         IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_edition_type_in         IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in              IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        id_cancel_info_det_in       IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        patient_complaint_arabic_in IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        id_complaint_alias_in       IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN epis_complaint.id_epis_complaint%TYPE IS
        l_pky    epis_complaint.id_epis_complaint%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_epis_complaint_in        => l_pky,
            id_episode_in               => id_episode_in,
            id_professional_in          => id_professional_in,
            id_complaint_in             => id_complaint_in,
            patient_complaint_in        => patient_complaint_in,
            flg_status_in               => flg_status_in,
            id_epis_complaint_parent_in => id_epis_complaint_parent_in,
            adw_last_update_tstz_in     => adw_last_update_tstz_in,
            flg_reported_by_in          => flg_reported_by_in,
            id_epis_complaint_root_in   => id_epis_complaint_root_in,
            id_dep_clin_serv_in         => id_dep_clin_serv_in,
            flg_edition_type_in         => flg_edition_type_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_cancel_info_det_in       => id_cancel_info_det_in,
            patient_complaint_arabic_in => patient_complaint_arabic_in,
            id_complaint_alias_in       => id_complaint_alias_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_epis_complaint_in        IN epis_complaint.id_epis_complaint%TYPE,
        id_episode_in               IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_professional_in          IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_complaint_in             IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        patient_complaint_in        IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        flg_status_in               IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        id_epis_complaint_parent_in IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        adw_last_update_tstz_in     IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        flg_reported_by_in          IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        id_epis_complaint_root_in   IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_dep_clin_serv_in         IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_edition_type_in         IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in              IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        id_cancel_info_det_in       IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        patient_complaint_arabic_in IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        id_complaint_alias_in       IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO epis_complaint
            (id_epis_complaint,
             id_episode,
             id_professional,
             id_complaint,
             patient_complaint,
             flg_status,
             id_epis_complaint_parent,
             adw_last_update_tstz,
             flg_reported_by,
             id_epis_complaint_root,
             id_dep_clin_serv,
             flg_edition_type,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_cancel_info_det,
             patient_complaint_arabic,
             id_complaint_alias)
        VALUES
            (id_epis_complaint_in,
             id_episode_in,
             id_professional_in,
             id_complaint_in,
             patient_complaint_in,
             flg_status_in,
             id_epis_complaint_parent_in,
             adw_last_update_tstz_in,
             flg_reported_by_in,
             id_epis_complaint_root_in,
             id_dep_clin_serv_in,
             flg_edition_type_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_cancel_info_det_in,
             patient_complaint_arabic_in,
             id_complaint_alias_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_epis_complaint_in        IN epis_complaint.id_epis_complaint%TYPE,
        id_episode_in               IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_professional_in          IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_complaint_in             IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        patient_complaint_in        IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        flg_status_in               IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        id_epis_complaint_parent_in IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        adw_last_update_tstz_in     IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        flg_reported_by_in          IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        id_epis_complaint_root_in   IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_dep_clin_serv_in         IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_edition_type_in         IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in              IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        id_cancel_info_det_in       IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        patient_complaint_arabic_in IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        id_complaint_alias_in       IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_complaint_in        => id_epis_complaint_in,
            id_episode_in               => id_episode_in,
            id_professional_in          => id_professional_in,
            id_complaint_in             => id_complaint_in,
            patient_complaint_in        => patient_complaint_in,
            flg_status_in               => flg_status_in,
            id_epis_complaint_parent_in => id_epis_complaint_parent_in,
            adw_last_update_tstz_in     => adw_last_update_tstz_in,
            flg_reported_by_in          => flg_reported_by_in,
            id_epis_complaint_root_in   => id_epis_complaint_root_in,
            id_dep_clin_serv_in         => id_dep_clin_serv_in,
            flg_edition_type_in         => flg_edition_type_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_cancel_info_det_in       => id_cancel_info_det_in,
            patient_complaint_arabic_in => patient_complaint_arabic_in,
            id_complaint_alias_in       => id_complaint_alias_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_complaint%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_complaint%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_epis_complaint := next_key(sequence_in);
        END IF;
    
        ins(id_epis_complaint_in        => l_rec.id_epis_complaint,
            id_episode_in               => l_rec.id_episode,
            id_professional_in          => l_rec.id_professional,
            id_complaint_in             => l_rec.id_complaint,
            patient_complaint_in        => l_rec.patient_complaint,
            flg_status_in               => l_rec.flg_status,
            id_epis_complaint_parent_in => l_rec.id_epis_complaint_parent,
            adw_last_update_tstz_in     => l_rec.adw_last_update_tstz,
            flg_reported_by_in          => l_rec.flg_reported_by,
            id_epis_complaint_root_in   => l_rec.id_epis_complaint_root,
            id_dep_clin_serv_in         => l_rec.id_dep_clin_serv,
            flg_edition_type_in         => l_rec.flg_edition_type,
            create_user_in              => l_rec.create_user,
            create_time_in              => l_rec.create_time,
            create_institution_in       => l_rec.create_institution,
            update_user_in              => l_rec.update_user,
            update_time_in              => l_rec.update_time,
            update_institution_in       => l_rec.update_institution,
            id_cancel_info_det_in       => l_rec.id_cancel_info_det,
            patient_complaint_arabic_in => l_rec.patient_complaint_arabic,
            id_complaint_alias_in       => l_rec.id_complaint_alias,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_complaint%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_complaint_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_complaint
                    (id_epis_complaint,
                     id_episode,
                     id_professional,
                     id_complaint,
                     patient_complaint,
                     flg_status,
                     id_epis_complaint_parent,
                     adw_last_update_tstz,
                     flg_reported_by,
                     id_epis_complaint_root,
                     id_dep_clin_serv,
                     flg_edition_type,
                     id_cancel_info_det,
                     patient_complaint_arabic,
                     id_complaint_alias)
                VALUES
                    (rows_in(indx).id_epis_complaint,
                     rows_in(indx).id_episode,
                     rows_in(indx).id_professional,
                     rows_in(indx).id_complaint,
                     rows_in(indx).patient_complaint,
                     rows_in(indx).flg_status,
                     rows_in(indx).id_epis_complaint_parent,
                     rows_in(indx).adw_last_update_tstz,
                     rows_in(indx).flg_reported_by,
                     rows_in(indx).id_epis_complaint_root,
                     rows_in(indx).id_dep_clin_serv,
                     rows_in(indx).flg_edition_type,
                     rows_in(indx).id_cancel_info_det,
                     rows_in(indx).patient_complaint_arabic,
                     rows_in(indx).id_complaint_alias)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_complaint_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_complaint_in         IN epis_complaint.id_epis_complaint%TYPE,
        id_episode_in                IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_episode_nin               IN BOOLEAN := TRUE,
        id_professional_in           IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_professional_nin          IN BOOLEAN := TRUE,
        id_complaint_in              IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        id_complaint_nin             IN BOOLEAN := TRUE,
        patient_complaint_in         IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        patient_complaint_nin        IN BOOLEAN := TRUE,
        flg_status_in                IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        id_epis_complaint_parent_in  IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        id_epis_complaint_parent_nin IN BOOLEAN := TRUE,
        adw_last_update_tstz_in      IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        adw_last_update_tstz_nin     IN BOOLEAN := TRUE,
        flg_reported_by_in           IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        flg_reported_by_nin          IN BOOLEAN := TRUE,
        id_epis_complaint_root_in    IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_epis_complaint_root_nin   IN BOOLEAN := TRUE,
        id_dep_clin_serv_in          IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin         IN BOOLEAN := TRUE,
        flg_edition_type_in          IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        flg_edition_type_nin         IN BOOLEAN := TRUE,
        create_user_in               IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        id_cancel_info_det_in        IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        id_cancel_info_det_nin       IN BOOLEAN := TRUE,
        patient_complaint_arabic_in  IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        patient_complaint_arabic_nin IN BOOLEAN := TRUE,
        id_complaint_alias_in        IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        id_complaint_alias_nin       IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     IN OUT table_varchar
    ) IS
        l_rows_out                   table_varchar;
        l_id_episode_n               NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_id_professional_n          NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_id_complaint_n             NUMBER(1) := sys.diutil.bool_to_int(id_complaint_nin);
        l_patient_complaint_n        NUMBER(1) := sys.diutil.bool_to_int(patient_complaint_nin);
        l_flg_status_n               NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_epis_complaint_parent_n NUMBER(1) := sys.diutil.bool_to_int(id_epis_complaint_parent_nin);
        l_adw_last_update_tstz_n     NUMBER(1) := sys.diutil.bool_to_int(adw_last_update_tstz_nin);
        l_flg_reported_by_n          NUMBER(1) := sys.diutil.bool_to_int(flg_reported_by_nin);
        l_id_epis_complaint_root_n   NUMBER(1) := sys.diutil.bool_to_int(id_epis_complaint_root_nin);
        l_id_dep_clin_serv_n         NUMBER(1) := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_flg_edition_type_n         NUMBER(1) := sys.diutil.bool_to_int(flg_edition_type_nin);
        l_create_user_n              NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n              NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n       NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n              NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n              NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n       NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_cancel_info_det_n       NUMBER(1) := sys.diutil.bool_to_int(id_cancel_info_det_nin);
        l_patient_complaint_arabic_n NUMBER(1) := sys.diutil.bool_to_int(patient_complaint_arabic_nin);
        l_id_complaint_alias_n       NUMBER(1) := sys.diutil.bool_to_int(id_complaint_alias_nin);
    BEGIN
    
        UPDATE epis_complaint
           SET id_episode               = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_professional          = decode(l_id_professional_n,
                                                 0,
                                                 id_professional_in,
                                                 nvl(id_professional_in, id_professional)),
               id_complaint             = decode(l_id_complaint_n,
                                                 0,
                                                 id_complaint_in,
                                                 nvl(id_complaint_in, id_complaint)),
               patient_complaint        = decode(l_patient_complaint_n,
                                                 0,
                                                 patient_complaint_in,
                                                 nvl(patient_complaint_in, patient_complaint)),
               flg_status               = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_epis_complaint_parent = decode(l_id_epis_complaint_parent_n,
                                                 0,
                                                 id_epis_complaint_parent_in,
                                                 nvl(id_epis_complaint_parent_in, id_epis_complaint_parent)),
               adw_last_update_tstz     = decode(l_adw_last_update_tstz_n,
                                                 0,
                                                 adw_last_update_tstz_in,
                                                 nvl(adw_last_update_tstz_in, adw_last_update_tstz)),
               flg_reported_by          = decode(l_flg_reported_by_n,
                                                 0,
                                                 flg_reported_by_in,
                                                 nvl(flg_reported_by_in, flg_reported_by)),
               id_epis_complaint_root   = decode(l_id_epis_complaint_root_n,
                                                 0,
                                                 id_epis_complaint_root_in,
                                                 nvl(id_epis_complaint_root_in, id_epis_complaint_root)),
               id_dep_clin_serv         = decode(l_id_dep_clin_serv_n,
                                                 0,
                                                 id_dep_clin_serv_in,
                                                 nvl(id_dep_clin_serv_in, id_dep_clin_serv)),
               flg_edition_type         = decode(l_flg_edition_type_n,
                                                 0,
                                                 flg_edition_type_in,
                                                 nvl(flg_edition_type_in, flg_edition_type)),
               create_user              = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time              = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution       = decode(l_create_institution_n,
                                                 0,
                                                 create_institution_in,
                                                 nvl(create_institution_in, create_institution)),
               update_user              = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time              = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution       = decode(l_update_institution_n,
                                                 0,
                                                 update_institution_in,
                                                 nvl(update_institution_in, update_institution)),
               id_cancel_info_det       = decode(l_id_cancel_info_det_n,
                                                 0,
                                                 id_cancel_info_det_in,
                                                 nvl(id_cancel_info_det_in, id_cancel_info_det)),
               patient_complaint_arabic = decode(l_patient_complaint_arabic_n,
                                                 0,
                                                 patient_complaint_arabic_in,
                                                 nvl(patient_complaint_arabic_in, patient_complaint_arabic)),
               id_complaint_alias       = decode(l_id_complaint_alias_n,
                                                 0,
                                                 id_complaint_alias_in,
                                                 nvl(id_complaint_alias_in, id_complaint_alias))
         WHERE id_epis_complaint = id_epis_complaint_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_complaint_in         IN epis_complaint.id_epis_complaint%TYPE,
        id_episode_in                IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_episode_nin               IN BOOLEAN := TRUE,
        id_professional_in           IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_professional_nin          IN BOOLEAN := TRUE,
        id_complaint_in              IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        id_complaint_nin             IN BOOLEAN := TRUE,
        patient_complaint_in         IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        patient_complaint_nin        IN BOOLEAN := TRUE,
        flg_status_in                IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        id_epis_complaint_parent_in  IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        id_epis_complaint_parent_nin IN BOOLEAN := TRUE,
        adw_last_update_tstz_in      IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        adw_last_update_tstz_nin     IN BOOLEAN := TRUE,
        flg_reported_by_in           IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        flg_reported_by_nin          IN BOOLEAN := TRUE,
        id_epis_complaint_root_in    IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_epis_complaint_root_nin   IN BOOLEAN := TRUE,
        id_dep_clin_serv_in          IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin         IN BOOLEAN := TRUE,
        flg_edition_type_in          IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        flg_edition_type_nin         IN BOOLEAN := TRUE,
        create_user_in               IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        id_cancel_info_det_in        IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        id_cancel_info_det_nin       IN BOOLEAN := TRUE,
        patient_complaint_arabic_in  IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        patient_complaint_arabic_nin IN BOOLEAN := TRUE,
        id_complaint_alias_in        IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        id_complaint_alias_nin       IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_complaint_in         => id_epis_complaint_in,
            id_episode_in                => id_episode_in,
            id_episode_nin               => id_episode_nin,
            id_professional_in           => id_professional_in,
            id_professional_nin          => id_professional_nin,
            id_complaint_in              => id_complaint_in,
            id_complaint_nin             => id_complaint_nin,
            patient_complaint_in         => patient_complaint_in,
            patient_complaint_nin        => patient_complaint_nin,
            flg_status_in                => flg_status_in,
            flg_status_nin               => flg_status_nin,
            id_epis_complaint_parent_in  => id_epis_complaint_parent_in,
            id_epis_complaint_parent_nin => id_epis_complaint_parent_nin,
            adw_last_update_tstz_in      => adw_last_update_tstz_in,
            adw_last_update_tstz_nin     => adw_last_update_tstz_nin,
            flg_reported_by_in           => flg_reported_by_in,
            flg_reported_by_nin          => flg_reported_by_nin,
            id_epis_complaint_root_in    => id_epis_complaint_root_in,
            id_epis_complaint_root_nin   => id_epis_complaint_root_nin,
            id_dep_clin_serv_in          => id_dep_clin_serv_in,
            id_dep_clin_serv_nin         => id_dep_clin_serv_nin,
            flg_edition_type_in          => flg_edition_type_in,
            flg_edition_type_nin         => flg_edition_type_nin,
            create_user_in               => create_user_in,
            create_user_nin              => create_user_nin,
            create_time_in               => create_time_in,
            create_time_nin              => create_time_nin,
            create_institution_in        => create_institution_in,
            create_institution_nin       => create_institution_nin,
            update_user_in               => update_user_in,
            update_user_nin              => update_user_nin,
            update_time_in               => update_time_in,
            update_time_nin              => update_time_nin,
            update_institution_in        => update_institution_in,
            update_institution_nin       => update_institution_nin,
            id_cancel_info_det_in        => id_cancel_info_det_in,
            id_cancel_info_det_nin       => id_cancel_info_det_nin,
            patient_complaint_arabic_in  => patient_complaint_arabic_in,
            patient_complaint_arabic_nin => patient_complaint_arabic_nin,
            id_complaint_alias_in        => id_complaint_alias_in,
            id_complaint_alias_nin       => id_complaint_alias_nin,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in                IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_episode_nin               IN BOOLEAN := TRUE,
        id_professional_in           IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_professional_nin          IN BOOLEAN := TRUE,
        id_complaint_in              IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        id_complaint_nin             IN BOOLEAN := TRUE,
        patient_complaint_in         IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        patient_complaint_nin        IN BOOLEAN := TRUE,
        flg_status_in                IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        id_epis_complaint_parent_in  IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        id_epis_complaint_parent_nin IN BOOLEAN := TRUE,
        adw_last_update_tstz_in      IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        adw_last_update_tstz_nin     IN BOOLEAN := TRUE,
        flg_reported_by_in           IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        flg_reported_by_nin          IN BOOLEAN := TRUE,
        id_epis_complaint_root_in    IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_epis_complaint_root_nin   IN BOOLEAN := TRUE,
        id_dep_clin_serv_in          IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin         IN BOOLEAN := TRUE,
        flg_edition_type_in          IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        flg_edition_type_nin         IN BOOLEAN := TRUE,
        create_user_in               IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        id_cancel_info_det_in        IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        id_cancel_info_det_nin       IN BOOLEAN := TRUE,
        patient_complaint_arabic_in  IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        patient_complaint_arabic_nin IN BOOLEAN := TRUE,
        id_complaint_alias_in        IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        id_complaint_alias_nin       IN BOOLEAN := TRUE,
        where_in                     IN VARCHAR2,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     IN OUT table_varchar
    ) IS
        l_sql                        VARCHAR2(32767);
        l_rows_out                   table_varchar;
        l_id_episode_n               NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_id_professional_n          NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_id_complaint_n             NUMBER(1) := sys.diutil.bool_to_int(id_complaint_nin);
        l_patient_complaint_n        NUMBER(1) := sys.diutil.bool_to_int(patient_complaint_nin);
        l_flg_status_n               NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_epis_complaint_parent_n NUMBER(1) := sys.diutil.bool_to_int(id_epis_complaint_parent_nin);
        l_adw_last_update_tstz_n     NUMBER(1) := sys.diutil.bool_to_int(adw_last_update_tstz_nin);
        l_flg_reported_by_n          NUMBER(1) := sys.diutil.bool_to_int(flg_reported_by_nin);
        l_id_epis_complaint_root_n   NUMBER(1) := sys.diutil.bool_to_int(id_epis_complaint_root_nin);
        l_id_dep_clin_serv_n         NUMBER(1) := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_flg_edition_type_n         NUMBER(1) := sys.diutil.bool_to_int(flg_edition_type_nin);
        l_create_user_n              NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n              NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n       NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n              NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n              NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n       NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_cancel_info_det_n       NUMBER(1) := sys.diutil.bool_to_int(id_cancel_info_det_nin);
        l_patient_complaint_arabic_n NUMBER(1) := sys.diutil.bool_to_int(patient_complaint_arabic_nin);
        l_id_complaint_alias_n       NUMBER(1) := sys.diutil.bool_to_int(id_complaint_alias_nin);
    BEGIN
        l_id_episode_n               := sys.diutil.bool_to_int(id_episode_nin);
        l_id_professional_n          := sys.diutil.bool_to_int(id_professional_nin);
        l_id_complaint_n             := sys.diutil.bool_to_int(id_complaint_nin);
        l_patient_complaint_n        := sys.diutil.bool_to_int(patient_complaint_nin);
        l_flg_status_n               := sys.diutil.bool_to_int(flg_status_nin);
        l_id_epis_complaint_parent_n := sys.diutil.bool_to_int(id_epis_complaint_parent_nin);
        l_adw_last_update_tstz_n     := sys.diutil.bool_to_int(adw_last_update_tstz_nin);
        l_flg_reported_by_n          := sys.diutil.bool_to_int(flg_reported_by_nin);
        l_id_epis_complaint_root_n   := sys.diutil.bool_to_int(id_epis_complaint_root_nin);
        l_id_dep_clin_serv_n         := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_flg_edition_type_n         := sys.diutil.bool_to_int(flg_edition_type_nin);
        l_create_user_n              := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n              := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n       := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n              := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n              := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n       := sys.diutil.bool_to_int(update_institution_nin);
        l_id_cancel_info_det_n       := sys.diutil.bool_to_int(id_cancel_info_det_nin);
        l_patient_complaint_arabic_n := sys.diutil.bool_to_int(patient_complaint_arabic_nin);
        l_id_complaint_alias_n       := sys.diutil.bool_to_int(id_complaint_alias_nin);
        l_sql                        := 'UPDATE epis_complaint SET' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                                        ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ',' ||
                                        ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                                        ',0,:ID_PROFESSIONAL_in, NVL (:ID_PROFESSIONAL_in, ID_PROFESSIONAL)) ' || ',' ||
                                        ' ID_COMPLAINT = decode (' || l_id_complaint_n ||
                                        ',0,:ID_COMPLAINT_in, NVL (:ID_COMPLAINT_in, ID_COMPLAINT)) ' || ',' ||
                                        ' PATIENT_COMPLAINT = decode (' || l_patient_complaint_n ||
                                        ',0,:PATIENT_COMPLAINT_in, NVL (:PATIENT_COMPLAINT_in, PATIENT_COMPLAINT)) ' || ',' ||
                                        ' FLG_STATUS = decode (' || l_flg_status_n ||
                                        ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                        ' ID_EPIS_COMPLAINT_PARENT = decode (' || l_id_epis_complaint_parent_n ||
                                        ',0,:ID_EPIS_COMPLAINT_PARENT_in, NVL (:ID_EPIS_COMPLAINT_PARENT_in, ID_EPIS_COMPLAINT_PARENT)) ' || ',' ||
                                        ' ADW_LAST_UPDATE_TSTZ = decode (' || l_adw_last_update_tstz_n ||
                                        ',0,:ADW_LAST_UPDATE_TSTZ_in, NVL (:ADW_LAST_UPDATE_TSTZ_in, ADW_LAST_UPDATE_TSTZ)) ' || ',' ||
                                        ' FLG_REPORTED_BY = decode (' || l_flg_reported_by_n ||
                                        ',0,:FLG_REPORTED_BY_in, NVL (:FLG_REPORTED_BY_in, FLG_REPORTED_BY)) ' || ',' ||
                                        ' ID_EPIS_COMPLAINT_ROOT = decode (' || l_id_epis_complaint_root_n ||
                                        ',0,:ID_EPIS_COMPLAINT_ROOT_in, NVL (:ID_EPIS_COMPLAINT_ROOT_in, ID_EPIS_COMPLAINT_ROOT)) ' || ',' ||
                                        ' ID_DEP_CLIN_SERV = decode (' || l_id_dep_clin_serv_n ||
                                        ',0,:ID_DEP_CLIN_SERV_in, NVL (:ID_DEP_CLIN_SERV_in, ID_DEP_CLIN_SERV)) ' || ',' ||
                                        ' FLG_EDITION_TYPE = decode (' || l_flg_edition_type_n ||
                                        ',0,:FLG_EDITION_TYPE_in, NVL (:FLG_EDITION_TYPE_in, FLG_EDITION_TYPE)) ' || ',' ||
                                        ' CREATE_USER = decode (' || l_create_user_n ||
                                        ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                        ' CREATE_TIME = decode (' || l_create_time_n ||
                                        ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                        ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                        ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                        ' UPDATE_USER = decode (' || l_update_user_n ||
                                        ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                        ' UPDATE_TIME = decode (' || l_update_time_n ||
                                        ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                        ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                        ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                        ' ID_CANCEL_INFO_DET = decode (' || l_id_cancel_info_det_n ||
                                        ',0,:ID_CANCEL_INFO_DET_in, NVL (:ID_CANCEL_INFO_DET_in, ID_CANCEL_INFO_DET)) ' || ',' ||
                                        ' PATIENT_COMPLAINT_ARABIC = decode (' || l_patient_complaint_arabic_n ||
                                        ',0,:PATIENT_COMPLAINT_ARABIC_in, NVL (:PATIENT_COMPLAINT_ARABIC_in, PATIENT_COMPLAINT_ARABIC)) ' || ',' ||
                                        ' ID_COMPLAINT_ALIAS = decode (' || l_id_complaint_alias_n ||
                                        ',0,:ID_COMPLAINT_ALIAS_in, NVL (:ID_COMPLAINT_ALIAS_in, ID_COMPLAINT_ALIAS)) ' ||
                                        ' where ' || nvl(where_in, '(1=1)') ||
                                        ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, id_professional_in, id_complaint_in, patient_complaint_in, flg_status_in, id_epis_complaint_parent_in, adw_last_update_tstz_in, flg_reported_by_in, id_epis_complaint_root_in, id_dep_clin_serv_in, flg_edition_type_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_cancel_info_det_in, patient_complaint_arabic_in, id_complaint_alias_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in                IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_episode_nin               IN BOOLEAN := TRUE,
        id_professional_in           IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_professional_nin          IN BOOLEAN := TRUE,
        id_complaint_in              IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        id_complaint_nin             IN BOOLEAN := TRUE,
        patient_complaint_in         IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        patient_complaint_nin        IN BOOLEAN := TRUE,
        flg_status_in                IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        id_epis_complaint_parent_in  IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        id_epis_complaint_parent_nin IN BOOLEAN := TRUE,
        adw_last_update_tstz_in      IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        adw_last_update_tstz_nin     IN BOOLEAN := TRUE,
        flg_reported_by_in           IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        flg_reported_by_nin          IN BOOLEAN := TRUE,
        id_epis_complaint_root_in    IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_epis_complaint_root_nin   IN BOOLEAN := TRUE,
        id_dep_clin_serv_in          IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin         IN BOOLEAN := TRUE,
        flg_edition_type_in          IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        flg_edition_type_nin         IN BOOLEAN := TRUE,
        create_user_in               IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        id_cancel_info_det_in        IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        id_cancel_info_det_nin       IN BOOLEAN := TRUE,
        patient_complaint_arabic_in  IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        patient_complaint_arabic_nin IN BOOLEAN := TRUE,
        id_complaint_alias_in        IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        id_complaint_alias_nin       IN BOOLEAN := TRUE,
        where_in                     IN VARCHAR2,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in                => id_episode_in,
            id_episode_nin               => id_episode_nin,
            id_professional_in           => id_professional_in,
            id_professional_nin          => id_professional_nin,
            id_complaint_in              => id_complaint_in,
            id_complaint_nin             => id_complaint_nin,
            patient_complaint_in         => patient_complaint_in,
            patient_complaint_nin        => patient_complaint_nin,
            flg_status_in                => flg_status_in,
            flg_status_nin               => flg_status_nin,
            id_epis_complaint_parent_in  => id_epis_complaint_parent_in,
            id_epis_complaint_parent_nin => id_epis_complaint_parent_nin,
            adw_last_update_tstz_in      => adw_last_update_tstz_in,
            adw_last_update_tstz_nin     => adw_last_update_tstz_nin,
            flg_reported_by_in           => flg_reported_by_in,
            flg_reported_by_nin          => flg_reported_by_nin,
            id_epis_complaint_root_in    => id_epis_complaint_root_in,
            id_epis_complaint_root_nin   => id_epis_complaint_root_nin,
            id_dep_clin_serv_in          => id_dep_clin_serv_in,
            id_dep_clin_serv_nin         => id_dep_clin_serv_nin,
            flg_edition_type_in          => flg_edition_type_in,
            flg_edition_type_nin         => flg_edition_type_nin,
            create_user_in               => create_user_in,
            create_user_nin              => create_user_nin,
            create_time_in               => create_time_in,
            create_time_nin              => create_time_nin,
            create_institution_in        => create_institution_in,
            create_institution_nin       => create_institution_nin,
            update_user_in               => update_user_in,
            update_user_nin              => update_user_nin,
            update_time_in               => update_time_in,
            update_time_nin              => update_time_nin,
            update_institution_in        => update_institution_in,
            update_institution_nin       => update_institution_nin,
            id_cancel_info_det_in        => id_cancel_info_det_in,
            id_cancel_info_det_nin       => id_cancel_info_det_nin,
            patient_complaint_arabic_in  => patient_complaint_arabic_in,
            patient_complaint_arabic_nin => patient_complaint_arabic_nin,
            id_complaint_alias_in        => id_complaint_alias_in,
            id_complaint_alias_nin       => id_complaint_alias_nin,
            where_in                     => where_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_epis_complaint_in        IN epis_complaint.id_epis_complaint%TYPE,
        id_episode_in               IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_professional_in          IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_complaint_in             IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        patient_complaint_in        IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        flg_status_in               IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        id_epis_complaint_parent_in IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        adw_last_update_tstz_in     IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        flg_reported_by_in          IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        id_epis_complaint_root_in   IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_dep_clin_serv_in         IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_edition_type_in         IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in              IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        id_cancel_info_det_in       IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        patient_complaint_arabic_in IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        id_complaint_alias_in       IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_complaint_in        => id_epis_complaint_in,
            id_episode_in               => id_episode_in,
            id_professional_in          => id_professional_in,
            id_complaint_in             => id_complaint_in,
            patient_complaint_in        => patient_complaint_in,
            flg_status_in               => flg_status_in,
            id_epis_complaint_parent_in => id_epis_complaint_parent_in,
            adw_last_update_tstz_in     => adw_last_update_tstz_in,
            flg_reported_by_in          => flg_reported_by_in,
            id_epis_complaint_root_in   => id_epis_complaint_root_in,
            id_dep_clin_serv_in         => id_dep_clin_serv_in,
            flg_edition_type_in         => flg_edition_type_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_cancel_info_det_in       => id_cancel_info_det_in,
            patient_complaint_arabic_in => patient_complaint_arabic_in,
            id_complaint_alias_in       => id_complaint_alias_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_complaint_in        => id_epis_complaint_in,
                id_episode_in               => id_episode_in,
                id_professional_in          => id_professional_in,
                id_complaint_in             => id_complaint_in,
                patient_complaint_in        => patient_complaint_in,
                flg_status_in               => flg_status_in,
                id_epis_complaint_parent_in => id_epis_complaint_parent_in,
                adw_last_update_tstz_in     => adw_last_update_tstz_in,
                flg_reported_by_in          => flg_reported_by_in,
                id_epis_complaint_root_in   => id_epis_complaint_root_in,
                id_dep_clin_serv_in         => id_dep_clin_serv_in,
                flg_edition_type_in         => flg_edition_type_in,
                create_user_in              => create_user_in,
                create_time_in              => create_time_in,
                create_institution_in       => create_institution_in,
                update_user_in              => update_user_in,
                update_time_in              => update_time_in,
                update_institution_in       => update_institution_in,
                id_cancel_info_det_in       => id_cancel_info_det_in,
                patient_complaint_arabic_in => patient_complaint_arabic_in,
                id_complaint_alias_in       => id_complaint_alias_in,
                handle_error_in             => handle_error_in,
                rows_out                    => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_epis_complaint_in        IN epis_complaint.id_epis_complaint%TYPE,
        id_episode_in               IN epis_complaint.id_episode%TYPE DEFAULT NULL,
        id_professional_in          IN epis_complaint.id_professional%TYPE DEFAULT NULL,
        id_complaint_in             IN epis_complaint.id_complaint%TYPE DEFAULT NULL,
        patient_complaint_in        IN epis_complaint.patient_complaint%TYPE DEFAULT NULL,
        flg_status_in               IN epis_complaint.flg_status%TYPE DEFAULT NULL,
        id_epis_complaint_parent_in IN epis_complaint.id_epis_complaint_parent%TYPE DEFAULT NULL,
        adw_last_update_tstz_in     IN epis_complaint.adw_last_update_tstz%TYPE DEFAULT NULL,
        flg_reported_by_in          IN epis_complaint.flg_reported_by%TYPE DEFAULT NULL,
        id_epis_complaint_root_in   IN epis_complaint.id_epis_complaint_root%TYPE DEFAULT NULL,
        id_dep_clin_serv_in         IN epis_complaint.id_dep_clin_serv%TYPE DEFAULT NULL,
        flg_edition_type_in         IN epis_complaint.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in              IN epis_complaint.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_complaint.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_complaint.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_complaint.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_complaint.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_complaint.update_institution%TYPE DEFAULT NULL,
        id_cancel_info_det_in       IN epis_complaint.id_cancel_info_det%TYPE DEFAULT NULL,
        patient_complaint_arabic_in IN epis_complaint.patient_complaint_arabic%TYPE DEFAULT NULL,
        id_complaint_alias_in       IN epis_complaint.id_complaint_alias%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_complaint_in,
                id_episode_in,
                id_professional_in,
                id_complaint_in,
                patient_complaint_in,
                flg_status_in,
                id_epis_complaint_parent_in,
                adw_last_update_tstz_in,
                flg_reported_by_in,
                id_epis_complaint_root_in,
                id_dep_clin_serv_in,
                flg_edition_type_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_cancel_info_det_in,
                patient_complaint_arabic_in,
                id_complaint_alias_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_complaint%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_complaint_in        => rec_in.id_epis_complaint,
            id_episode_in               => rec_in.id_episode,
            id_professional_in          => rec_in.id_professional,
            id_complaint_in             => rec_in.id_complaint,
            patient_complaint_in        => rec_in.patient_complaint,
            flg_status_in               => rec_in.flg_status,
            id_epis_complaint_parent_in => rec_in.id_epis_complaint_parent,
            adw_last_update_tstz_in     => rec_in.adw_last_update_tstz,
            flg_reported_by_in          => rec_in.flg_reported_by,
            id_epis_complaint_root_in   => rec_in.id_epis_complaint_root,
            id_dep_clin_serv_in         => rec_in.id_dep_clin_serv,
            flg_edition_type_in         => rec_in.flg_edition_type,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution,
            id_cancel_info_det_in       => rec_in.id_cancel_info_det,
            patient_complaint_arabic_in => rec_in.patient_complaint_arabic,
            id_complaint_alias_in       => rec_in.id_complaint_alias,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_complaint%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_complaint_in        => rec_in.id_epis_complaint,
            id_episode_in               => rec_in.id_episode,
            id_professional_in          => rec_in.id_professional,
            id_complaint_in             => rec_in.id_complaint,
            patient_complaint_in        => rec_in.patient_complaint,
            flg_status_in               => rec_in.flg_status,
            id_epis_complaint_parent_in => rec_in.id_epis_complaint_parent,
            adw_last_update_tstz_in     => rec_in.adw_last_update_tstz,
            flg_reported_by_in          => rec_in.flg_reported_by,
            id_epis_complaint_root_in   => rec_in.id_epis_complaint_root,
            id_dep_clin_serv_in         => rec_in.id_dep_clin_serv,
            flg_edition_type_in         => rec_in.flg_edition_type,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution,
            id_cancel_info_det_in       => rec_in.id_cancel_info_det,
            patient_complaint_arabic_in => rec_in.patient_complaint_arabic,
            id_complaint_alias_in       => rec_in.id_complaint_alias,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_complaint_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_complaint        id_epis_complaint_cc;
        l_id_episode               id_episode_cc;
        l_id_professional          id_professional_cc;
        l_id_complaint             id_complaint_cc;
        l_patient_complaint        patient_complaint_cc;
        l_flg_status               flg_status_cc;
        l_id_epis_complaint_parent id_epis_complaint_parent_cc;
        l_adw_last_update_tstz     adw_last_update_tstz_cc;
        l_flg_reported_by          flg_reported_by_cc;
        l_id_epis_complaint_root   id_epis_complaint_root_cc;
        l_id_dep_clin_serv         id_dep_clin_serv_cc;
        l_flg_edition_type         flg_edition_type_cc;
        l_create_user              create_user_cc;
        l_create_time              create_time_cc;
        l_create_institution       create_institution_cc;
        l_update_user              update_user_cc;
        l_update_time              update_time_cc;
        l_update_institution       update_institution_cc;
        l_id_cancel_info_det       id_cancel_info_det_cc;
        l_patient_complaint_arabic patient_complaint_arabic_cc;
        l_id_complaint_alias       id_complaint_alias_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_complaint(i) := col_in(i).id_epis_complaint;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_professional(i) := col_in(i).id_professional;
            l_id_complaint(i) := col_in(i).id_complaint;
            l_patient_complaint(i) := col_in(i).patient_complaint;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_epis_complaint_parent(i) := col_in(i).id_epis_complaint_parent;
            l_adw_last_update_tstz(i) := col_in(i).adw_last_update_tstz;
            l_flg_reported_by(i) := col_in(i).flg_reported_by;
            l_id_epis_complaint_root(i) := col_in(i).id_epis_complaint_root;
            l_id_dep_clin_serv(i) := col_in(i).id_dep_clin_serv;
            l_flg_edition_type(i) := col_in(i).flg_edition_type;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_cancel_info_det(i) := col_in(i).id_cancel_info_det;
            l_patient_complaint_arabic(i) := col_in(i).patient_complaint_arabic;
            l_id_complaint_alias(i) := col_in(i).id_complaint_alias;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_complaint
                   SET id_episode               = nvl(l_id_episode(i), id_episode),
                       id_professional          = nvl(l_id_professional(i), id_professional),
                       id_complaint             = nvl(l_id_complaint(i), id_complaint),
                       patient_complaint        = nvl(l_patient_complaint(i), patient_complaint),
                       flg_status               = nvl(l_flg_status(i), flg_status),
                       id_epis_complaint_parent = nvl(l_id_epis_complaint_parent(i), id_epis_complaint_parent),
                       adw_last_update_tstz     = nvl(l_adw_last_update_tstz(i), adw_last_update_tstz),
                       flg_reported_by          = nvl(l_flg_reported_by(i), flg_reported_by),
                       id_epis_complaint_root   = nvl(l_id_epis_complaint_root(i), id_epis_complaint_root),
                       id_dep_clin_serv         = nvl(l_id_dep_clin_serv(i), id_dep_clin_serv),
                       flg_edition_type         = nvl(l_flg_edition_type(i), flg_edition_type),
                       create_user              = nvl(l_create_user(i), create_user),
                       create_time              = nvl(l_create_time(i), create_time),
                       create_institution       = nvl(l_create_institution(i), create_institution),
                       update_user              = nvl(l_update_user(i), update_user),
                       update_time              = nvl(l_update_time(i), update_time),
                       update_institution       = nvl(l_update_institution(i), update_institution),
                       id_cancel_info_det       = nvl(l_id_cancel_info_det(i), id_cancel_info_det),
                       patient_complaint_arabic = nvl(l_patient_complaint_arabic(i), patient_complaint_arabic),
                       id_complaint_alias       = nvl(l_id_complaint_alias(i), id_complaint_alias)
                 WHERE id_epis_complaint = l_id_epis_complaint(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_complaint
                   SET id_episode               = l_id_episode(i),
                       id_professional          = l_id_professional(i),
                       id_complaint             = l_id_complaint(i),
                       patient_complaint        = l_patient_complaint(i),
                       flg_status               = l_flg_status(i),
                       id_epis_complaint_parent = l_id_epis_complaint_parent(i),
                       adw_last_update_tstz     = l_adw_last_update_tstz(i),
                       flg_reported_by          = l_flg_reported_by(i),
                       id_epis_complaint_root   = l_id_epis_complaint_root(i),
                       id_dep_clin_serv         = l_id_dep_clin_serv(i),
                       flg_edition_type         = l_flg_edition_type(i),
                       create_user              = l_create_user(i),
                       create_time              = l_create_time(i),
                       create_institution       = l_create_institution(i),
                       update_user              = l_update_user(i),
                       update_time              = l_update_time(i),
                       update_institution       = l_update_institution(i),
                       id_cancel_info_det       = l_id_cancel_info_det(i),
                       patient_complaint_arabic = l_patient_complaint_arabic(i),
                       id_complaint_alias       = l_id_complaint_alias(i)
                 WHERE id_epis_complaint = l_id_epis_complaint(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_complaint_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE epis_complaint
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE epis_complaint
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE epis_complaint
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_complaint_in IN epis_complaint.id_epis_complaint%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_complaint
         WHERE id_epis_complaint = id_epis_complaint_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_complaint_in IN epis_complaint.id_epis_complaint%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_epis_complaint_in => id_epis_complaint_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this ECOMPR_ECOMP_FK foreign key value
    PROCEDURE del_ecompr_ecomp_fk
    (
        id_epis_complaint_root_in IN epis_complaint.id_epis_complaint_root%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_complaint
         WHERE id_epis_complaint_root = id_epis_complaint_root_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ecompr_ecomp_fk;

    -- Delete all rows for this ECOMP_CALIAS_FK foreign key value
    PROCEDURE del_ecomp_calias_fk
    (
        id_complaint_alias_in IN epis_complaint.id_complaint_alias%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_complaint
         WHERE id_complaint_alias = id_complaint_alias_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ecomp_calias_fk;

    -- Delete all rows for this ECOMP_CID_FK foreign key value
    PROCEDURE del_ecomp_cid_fk
    (
        id_cancel_info_det_in IN epis_complaint.id_cancel_info_det%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_complaint
         WHERE id_cancel_info_det = id_cancel_info_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ecomp_cid_fk;

    -- Delete all rows for this ECOMP_CMPLT_FK foreign key value
    PROCEDURE del_ecomp_cmplt_fk
    (
        id_complaint_in IN epis_complaint.id_complaint%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_complaint
         WHERE id_complaint = id_complaint_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ecomp_cmplt_fk;

    -- Delete all rows for this ECOMP_DCS_FK foreign key value
    PROCEDURE del_ecomp_dcs_fk
    (
        id_dep_clin_serv_in IN epis_complaint.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_complaint
         WHERE id_dep_clin_serv = id_dep_clin_serv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ecomp_dcs_fk;

    -- Delete all rows for this ECOMP_EPIS_FK foreign key value
    PROCEDURE del_ecomp_epis_fk
    (
        id_episode_in   IN epis_complaint.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_complaint
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ecomp_epis_fk;

    -- Delete all rows for this ECOMP_PROF_FK foreign key value
    PROCEDURE del_ecomp_prof_fk
    (
        id_professional_in IN epis_complaint.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_complaint
         WHERE id_professional = id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ecomp_prof_fk;

    -- Delete all rows for this ECOMPR_ECOMP_FK foreign key value
    PROCEDURE del_ecompr_ecomp_fk
    (
        id_epis_complaint_root_in IN epis_complaint.id_epis_complaint_root%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ecompr_ecomp_fk(id_epis_complaint_root_in => id_epis_complaint_root_in,
                            handle_error_in           => handle_error_in,
                            rows_out                  => rows_out);
    END del_ecompr_ecomp_fk;

    -- Delete all rows for this ECOMP_CALIAS_FK foreign key value
    PROCEDURE del_ecomp_calias_fk
    (
        id_complaint_alias_in IN epis_complaint.id_complaint_alias%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ecomp_calias_fk(id_complaint_alias_in => id_complaint_alias_in,
                            handle_error_in       => handle_error_in,
                            rows_out              => rows_out);
    END del_ecomp_calias_fk;

    -- Delete all rows for this ECOMP_CID_FK foreign key value
    PROCEDURE del_ecomp_cid_fk
    (
        id_cancel_info_det_in IN epis_complaint.id_cancel_info_det%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ecomp_cid_fk(id_cancel_info_det_in => id_cancel_info_det_in,
                         handle_error_in       => handle_error_in,
                         rows_out              => rows_out);
    END del_ecomp_cid_fk;

    -- Delete all rows for this ECOMP_CMPLT_FK foreign key value
    PROCEDURE del_ecomp_cmplt_fk
    (
        id_complaint_in IN epis_complaint.id_complaint%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ecomp_cmplt_fk(id_complaint_in => id_complaint_in,
                           handle_error_in => handle_error_in,
                           rows_out        => rows_out);
    END del_ecomp_cmplt_fk;

    -- Delete all rows for this ECOMP_DCS_FK foreign key value
    PROCEDURE del_ecomp_dcs_fk
    (
        id_dep_clin_serv_in IN epis_complaint.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ecomp_dcs_fk(id_dep_clin_serv_in => id_dep_clin_serv_in,
                         handle_error_in     => handle_error_in,
                         rows_out            => rows_out);
    END del_ecomp_dcs_fk;

    -- Delete all rows for this ECOMP_EPIS_FK foreign key value
    PROCEDURE del_ecomp_epis_fk
    (
        id_episode_in   IN epis_complaint.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ecomp_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ecomp_epis_fk;

    -- Delete all rows for this ECOMP_PROF_FK foreign key value
    PROCEDURE del_ecomp_prof_fk
    (
        id_professional_in IN epis_complaint.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ecomp_prof_fk(id_professional_in => id_professional_in,
                          handle_error_in    => handle_error_in,
                          rows_out           => rows_out);
    END del_ecomp_prof_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM epis_complaint';
        ELSE
            RETURN 'DELETE FROM epis_complaint WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(epis_complaint_inout IN OUT epis_complaint%ROWTYPE) IS
    BEGIN
        epis_complaint_inout.id_epis_complaint        := NULL;
        epis_complaint_inout.id_episode               := NULL;
        epis_complaint_inout.id_professional          := NULL;
        epis_complaint_inout.id_complaint             := NULL;
        epis_complaint_inout.patient_complaint        := NULL;
        epis_complaint_inout.flg_status               := NULL;
        epis_complaint_inout.id_epis_complaint_parent := NULL;
        epis_complaint_inout.adw_last_update_tstz     := NULL;
        epis_complaint_inout.flg_reported_by          := NULL;
        epis_complaint_inout.id_epis_complaint_root   := NULL;
        epis_complaint_inout.id_dep_clin_serv         := NULL;
        epis_complaint_inout.flg_edition_type         := NULL;
        epis_complaint_inout.create_user              := NULL;
        epis_complaint_inout.create_time              := NULL;
        epis_complaint_inout.create_institution       := NULL;
        epis_complaint_inout.update_user              := NULL;
        epis_complaint_inout.update_time              := NULL;
        epis_complaint_inout.update_institution       := NULL;
        epis_complaint_inout.id_cancel_info_det       := NULL;
        epis_complaint_inout.patient_complaint_arabic := NULL;
        epis_complaint_inout.id_complaint_alias       := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN epis_complaint%ROWTYPE IS
        l_epis_complaint epis_complaint%ROWTYPE;
    BEGIN
        RETURN l_epis_complaint;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_complaint_tc IS
        data epis_complaint_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM epis_complaint
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_complaint_tc IS
        data epis_complaint_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_complaint;
/
