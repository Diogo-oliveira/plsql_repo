/*-- Last Change Revision: $Rev: 2028420 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:39 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_wl_waiting_line
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 24, 2010 14:19:43
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_wl_waiting_line_in        IN wl_waiting_line.id_wl_waiting_line%TYPE,
        char_queue_in                IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        number_queue_in              IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        id_clinical_service_in       IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_professional_in           IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_wl_queue_in               IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_patient_in                IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_room_in                   IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_in IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_episode_in                IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in             IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_in              IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_in           IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in               IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        flg_wl_status_in             IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        create_user_in               IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_time_in               IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_time_in               IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        id_prof_call_in              IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO wl_waiting_line
            (id_wl_waiting_line,
             char_queue,
             number_queue,
             id_clinical_service,
             id_professional,
             id_wl_queue,
             id_patient,
             id_room,
             id_wl_waiting_line_parent,
             id_episode,
             dt_begin_tstz,
             dt_call_tstz,
             dt_consult_tstz,
             dt_end_tstz,
             flg_wl_status,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_prof_call)
        VALUES
            (id_wl_waiting_line_in,
             char_queue_in,
             number_queue_in,
             id_clinical_service_in,
             id_professional_in,
             id_wl_queue_in,
             id_patient_in,
             id_room_in,
             id_wl_waiting_line_parent_in,
             id_episode_in,
             dt_begin_tstz_in,
             dt_call_tstz_in,
             dt_consult_tstz_in,
             dt_end_tstz_in,
             flg_wl_status_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_prof_call_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'WL_WAITING_LINE');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    IF l_name = 'WWL_CSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CLINICAL_SERVICE',
                                                        value_in           => id_clinical_service_in);
                    END IF;
                    IF l_name = 'WWL_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'WWL_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'WWL_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'WWL_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'WWL_WQE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WL_QUEUE',
                                                        value_in           => id_wl_queue_in);
                    END IF;
                    IF l_name = 'WWL_WWL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WL_WAITING_LINE_PARENT',
                                                        value_in           => id_wl_waiting_line_parent_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_wl_waiting_line_in        IN wl_waiting_line.id_wl_waiting_line%TYPE,
        char_queue_in                IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        number_queue_in              IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        id_clinical_service_in       IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_professional_in           IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_wl_queue_in               IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_patient_in                IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_room_in                   IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_in IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_episode_in                IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in             IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_in              IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_in           IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in               IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        flg_wl_status_in             IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        create_user_in               IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_time_in               IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_time_in               IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        id_prof_call_in              IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_wl_waiting_line_in        => id_wl_waiting_line_in,
            char_queue_in                => char_queue_in,
            number_queue_in              => number_queue_in,
            id_clinical_service_in       => id_clinical_service_in,
            id_professional_in           => id_professional_in,
            id_wl_queue_in               => id_wl_queue_in,
            id_patient_in                => id_patient_in,
            id_room_in                   => id_room_in,
            id_wl_waiting_line_parent_in => id_wl_waiting_line_parent_in,
            id_episode_in                => id_episode_in,
            dt_begin_tstz_in             => dt_begin_tstz_in,
            dt_call_tstz_in              => dt_call_tstz_in,
            dt_consult_tstz_in           => dt_consult_tstz_in,
            dt_end_tstz_in               => dt_end_tstz_in,
            flg_wl_status_in             => flg_wl_status_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_prof_call_in              => id_prof_call_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN wl_waiting_line%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec wl_waiting_line%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_wl_waiting_line := next_key(sequence_in);
        END IF;
        ins(id_wl_waiting_line_in        => l_rec.id_wl_waiting_line,
            char_queue_in                => l_rec.char_queue,
            number_queue_in              => l_rec.number_queue,
            id_clinical_service_in       => l_rec.id_clinical_service,
            id_professional_in           => l_rec.id_professional,
            id_wl_queue_in               => l_rec.id_wl_queue,
            id_patient_in                => l_rec.id_patient,
            id_room_in                   => l_rec.id_room,
            id_wl_waiting_line_parent_in => l_rec.id_wl_waiting_line_parent,
            id_episode_in                => l_rec.id_episode,
            dt_begin_tstz_in             => l_rec.dt_begin_tstz,
            dt_call_tstz_in              => l_rec.dt_call_tstz,
            dt_consult_tstz_in           => l_rec.dt_consult_tstz,
            dt_end_tstz_in               => l_rec.dt_end_tstz,
            flg_wl_status_in             => l_rec.flg_wl_status,
            create_user_in               => l_rec.create_user,
            create_time_in               => l_rec.create_time,
            create_institution_in        => l_rec.create_institution,
            update_user_in               => l_rec.update_user,
            update_time_in               => l_rec.update_time,
            update_institution_in        => l_rec.update_institution,
            id_prof_call_in              => l_rec.id_prof_call,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN wl_waiting_line%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN wl_waiting_line.id_wl_waiting_line%TYPE
    
     IS
        retval wl_waiting_line.id_wl_waiting_line%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_wl_waiting_line.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_WL_WAITING_LINE'));
    END next_key;

    PROCEDURE ins
    (
        char_queue_in                IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        number_queue_in              IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        id_clinical_service_in       IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_professional_in           IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_wl_queue_in               IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_patient_in                IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_room_in                   IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_in IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_episode_in                IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in             IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_in              IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_in           IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in               IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        flg_wl_status_in             IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        create_user_in               IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_time_in               IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_time_in               IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        id_prof_call_in              IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        id_wl_waiting_line_out       IN OUT wl_waiting_line.id_wl_waiting_line%TYPE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
        l_pky wl_waiting_line.id_wl_waiting_line%TYPE := next_key;
    BEGIN
        ins(id_wl_waiting_line_in        => l_pky,
            char_queue_in                => char_queue_in,
            number_queue_in              => number_queue_in,
            id_clinical_service_in       => id_clinical_service_in,
            id_professional_in           => id_professional_in,
            id_wl_queue_in               => id_wl_queue_in,
            id_patient_in                => id_patient_in,
            id_room_in                   => id_room_in,
            id_wl_waiting_line_parent_in => id_wl_waiting_line_parent_in,
            id_episode_in                => id_episode_in,
            dt_begin_tstz_in             => dt_begin_tstz_in,
            dt_call_tstz_in              => dt_call_tstz_in,
            dt_consult_tstz_in           => dt_consult_tstz_in,
            dt_end_tstz_in               => dt_end_tstz_in,
            flg_wl_status_in             => flg_wl_status_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_prof_call_in              => id_prof_call_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        id_wl_waiting_line_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        char_queue_in                IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        number_queue_in              IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        id_clinical_service_in       IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_professional_in           IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_wl_queue_in               IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_patient_in                IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_room_in                   IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_in IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_episode_in                IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in             IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_in              IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_in           IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in               IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        flg_wl_status_in             IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        create_user_in               IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_time_in               IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_time_in               IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        id_prof_call_in              IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        id_wl_waiting_line_out       IN OUT wl_waiting_line.id_wl_waiting_line%TYPE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(char_queue_in                => char_queue_in,
            number_queue_in              => number_queue_in,
            id_clinical_service_in       => id_clinical_service_in,
            id_professional_in           => id_professional_in,
            id_wl_queue_in               => id_wl_queue_in,
            id_patient_in                => id_patient_in,
            id_room_in                   => id_room_in,
            id_wl_waiting_line_parent_in => id_wl_waiting_line_parent_in,
            id_episode_in                => id_episode_in,
            dt_begin_tstz_in             => dt_begin_tstz_in,
            dt_call_tstz_in              => dt_call_tstz_in,
            dt_consult_tstz_in           => dt_consult_tstz_in,
            dt_end_tstz_in               => dt_end_tstz_in,
            flg_wl_status_in             => flg_wl_status_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_prof_call_in              => id_prof_call_in,
            id_wl_waiting_line_out       => id_wl_waiting_line_out,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    FUNCTION ins
    (
        char_queue_in                IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        number_queue_in              IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        id_clinical_service_in       IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_professional_in           IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_wl_queue_in               IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_patient_in                IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_room_in                   IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_in IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_episode_in                IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in             IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_in              IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_in           IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in               IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        flg_wl_status_in             IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        create_user_in               IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_time_in               IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_time_in               IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        id_prof_call_in              IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) RETURN wl_waiting_line.id_wl_waiting_line%TYPE IS
        l_pky wl_waiting_line.id_wl_waiting_line%TYPE := next_key;
    BEGIN
        ins(id_wl_waiting_line_in        => l_pky,
            char_queue_in                => char_queue_in,
            number_queue_in              => number_queue_in,
            id_clinical_service_in       => id_clinical_service_in,
            id_professional_in           => id_professional_in,
            id_wl_queue_in               => id_wl_queue_in,
            id_patient_in                => id_patient_in,
            id_room_in                   => id_room_in,
            id_wl_waiting_line_parent_in => id_wl_waiting_line_parent_in,
            id_episode_in                => id_episode_in,
            dt_begin_tstz_in             => dt_begin_tstz_in,
            dt_call_tstz_in              => dt_call_tstz_in,
            dt_consult_tstz_in           => dt_consult_tstz_in,
            dt_end_tstz_in               => dt_end_tstz_in,
            flg_wl_status_in             => flg_wl_status_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_prof_call_in              => id_prof_call_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        char_queue_in                IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        number_queue_in              IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        id_clinical_service_in       IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_professional_in           IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_wl_queue_in               IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_patient_in                IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_room_in                   IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_in IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_episode_in                IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in             IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_in              IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_in           IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in               IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        flg_wl_status_in             IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        create_user_in               IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_time_in               IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_time_in               IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        id_prof_call_in              IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) RETURN wl_waiting_line.id_wl_waiting_line%TYPE IS
        l_pky    wl_waiting_line.id_wl_waiting_line%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_wl_waiting_line_in        => l_pky,
            char_queue_in                => char_queue_in,
            number_queue_in              => number_queue_in,
            id_clinical_service_in       => id_clinical_service_in,
            id_professional_in           => id_professional_in,
            id_wl_queue_in               => id_wl_queue_in,
            id_patient_in                => id_patient_in,
            id_room_in                   => id_room_in,
            id_wl_waiting_line_parent_in => id_wl_waiting_line_parent_in,
            id_episode_in                => id_episode_in,
            dt_begin_tstz_in             => dt_begin_tstz_in,
            dt_call_tstz_in              => dt_call_tstz_in,
            dt_consult_tstz_in           => dt_consult_tstz_in,
            dt_end_tstz_in               => dt_end_tstz_in,
            flg_wl_status_in             => flg_wl_status_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_prof_call_in              => id_prof_call_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        char_queue_in                IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        number_queue_in              IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        id_clinical_service_in       IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_professional_in           IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_wl_queue_in               IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_patient_in                IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_room_in                   IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_in IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_episode_in                IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in             IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_in              IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_in           IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in               IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        flg_wl_status_in             IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        create_user_in               IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_time_in               IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_time_in               IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        id_prof_call_in              IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
        l_pky wl_waiting_line.id_wl_waiting_line%TYPE := next_key;
    BEGIN
        ins(id_wl_waiting_line_in        => l_pky,
            char_queue_in                => char_queue_in,
            number_queue_in              => number_queue_in,
            id_clinical_service_in       => id_clinical_service_in,
            id_professional_in           => id_professional_in,
            id_wl_queue_in               => id_wl_queue_in,
            id_patient_in                => id_patient_in,
            id_room_in                   => id_room_in,
            id_wl_waiting_line_parent_in => id_wl_waiting_line_parent_in,
            id_episode_in                => id_episode_in,
            dt_begin_tstz_in             => dt_begin_tstz_in,
            dt_call_tstz_in              => dt_call_tstz_in,
            dt_consult_tstz_in           => dt_consult_tstz_in,
            dt_end_tstz_in               => dt_end_tstz_in,
            flg_wl_status_in             => flg_wl_status_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_prof_call_in              => id_prof_call_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        char_queue_in                IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        number_queue_in              IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        id_clinical_service_in       IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_professional_in           IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_wl_queue_in               IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_patient_in                IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_room_in                   IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_in IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_episode_in                IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in             IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_in              IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_in           IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in               IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        flg_wl_status_in             IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        create_user_in               IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_time_in               IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_time_in               IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        id_prof_call_in              IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        l_pky    wl_waiting_line.id_wl_waiting_line%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_wl_waiting_line_in        => l_pky,
            char_queue_in                => char_queue_in,
            number_queue_in              => number_queue_in,
            id_clinical_service_in       => id_clinical_service_in,
            id_professional_in           => id_professional_in,
            id_wl_queue_in               => id_wl_queue_in,
            id_patient_in                => id_patient_in,
            id_room_in                   => id_room_in,
            id_wl_waiting_line_parent_in => id_wl_waiting_line_parent_in,
            id_episode_in                => id_episode_in,
            dt_begin_tstz_in             => dt_begin_tstz_in,
            dt_call_tstz_in              => dt_call_tstz_in,
            dt_consult_tstz_in           => dt_consult_tstz_in,
            dt_end_tstz_in               => dt_end_tstz_in,
            flg_wl_status_in             => flg_wl_status_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_prof_call_in              => id_prof_call_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN wl_waiting_line_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO wl_waiting_line
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_WL_WAITING_LINE _' || indx,
                                                        value_in           => rows_in(indx).id_wl_waiting_line,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CHAR_QUEUE _' || indx,
                                                        value_in           => rows_in(indx).char_queue,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUMBER_QUEUE _' || indx,
                                                        value_in           => rows_in(indx).number_queue,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CLINICAL_SERVICE _' || indx,
                                                        value_in           => rows_in(indx).id_clinical_service,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_WL_QUEUE _' || indx,
                                                        value_in           => rows_in(indx).id_wl_queue,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROOM _' || indx,
                                                        value_in           => rows_in(indx).id_room,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_WL_WAITING_LINE_PARENT _' || indx,
                                                        value_in           => rows_in(indx).id_wl_waiting_line_parent,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BEGIN_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_begin_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CALL_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_call_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CONSULT_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_consult_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_END_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_end_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_WL_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_wl_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CALL _' || indx,
                                                        value_in           => rows_in(indx).id_prof_call,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'WL_WAITING_LINE',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN wl_waiting_line_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_wl_waiting_line_in         IN wl_waiting_line.id_wl_waiting_line%TYPE,
        char_queue_in                 IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        char_queue_nin                IN BOOLEAN := TRUE,
        number_queue_in               IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        number_queue_nin              IN BOOLEAN := TRUE,
        id_clinical_service_in        IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin       IN BOOLEAN := TRUE,
        id_professional_in            IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_professional_nin           IN BOOLEAN := TRUE,
        id_wl_queue_in                IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_wl_queue_nin               IN BOOLEAN := TRUE,
        id_patient_in                 IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        id_room_in                    IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_room_nin                   IN BOOLEAN := TRUE,
        id_wl_waiting_line_parent_in  IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_nin IN BOOLEAN := TRUE,
        id_episode_in                 IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        dt_begin_tstz_in              IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin             IN BOOLEAN := TRUE,
        dt_call_tstz_in               IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_nin              IN BOOLEAN := TRUE,
        dt_consult_tstz_in            IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_nin           IN BOOLEAN := TRUE,
        dt_end_tstz_in                IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin               IN BOOLEAN := TRUE,
        flg_wl_status_in              IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        flg_wl_status_nin             IN BOOLEAN := TRUE,
        create_user_in                IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        id_prof_call_in               IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        id_prof_call_nin              IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
        l_rows_out                    table_varchar;
        l_char_queue_n                NUMBER(1);
        l_number_queue_n              NUMBER(1);
        l_id_clinical_service_n       NUMBER(1);
        l_id_professional_n           NUMBER(1);
        l_id_wl_queue_n               NUMBER(1);
        l_id_patient_n                NUMBER(1);
        l_id_room_n                   NUMBER(1);
        l_id_wl_waiting_line_parent_n NUMBER(1);
        l_id_episode_n                NUMBER(1);
        l_dt_begin_tstz_n             NUMBER(1);
        l_dt_call_tstz_n              NUMBER(1);
        l_dt_consult_tstz_n           NUMBER(1);
        l_dt_end_tstz_n               NUMBER(1);
        l_flg_wl_status_n             NUMBER(1);
        l_create_user_n               NUMBER(1);
        l_create_time_n               NUMBER(1);
        l_create_institution_n        NUMBER(1);
        l_update_user_n               NUMBER(1);
        l_update_time_n               NUMBER(1);
        l_update_institution_n        NUMBER(1);
        l_id_prof_call_n              NUMBER(1);
    BEGIN
    
        l_char_queue_n                := sys.diutil.bool_to_int(char_queue_nin);
        l_number_queue_n              := sys.diutil.bool_to_int(number_queue_nin);
        l_id_clinical_service_n       := sys.diutil.bool_to_int(id_clinical_service_nin);
        l_id_professional_n           := sys.diutil.bool_to_int(id_professional_nin);
        l_id_wl_queue_n               := sys.diutil.bool_to_int(id_wl_queue_nin);
        l_id_patient_n                := sys.diutil.bool_to_int(id_patient_nin);
        l_id_room_n                   := sys.diutil.bool_to_int(id_room_nin);
        l_id_wl_waiting_line_parent_n := sys.diutil.bool_to_int(id_wl_waiting_line_parent_nin);
        l_id_episode_n                := sys.diutil.bool_to_int(id_episode_nin);
        l_dt_begin_tstz_n             := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_call_tstz_n              := sys.diutil.bool_to_int(dt_call_tstz_nin);
        l_dt_consult_tstz_n           := sys.diutil.bool_to_int(dt_consult_tstz_nin);
        l_dt_end_tstz_n               := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_flg_wl_status_n             := sys.diutil.bool_to_int(flg_wl_status_nin);
        l_create_user_n               := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n               := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n        := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n               := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n               := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n        := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prof_call_n              := sys.diutil.bool_to_int(id_prof_call_nin);
    
        UPDATE wl_waiting_line
           SET char_queue                = decode(l_char_queue_n, 0, char_queue_in, nvl(char_queue_in, char_queue)),
               number_queue              = decode(l_number_queue_n,
                                                  0,
                                                  number_queue_in,
                                                  nvl(number_queue_in, number_queue)),
               id_clinical_service       = decode(l_id_clinical_service_n,
                                                  0,
                                                  id_clinical_service_in,
                                                  nvl(id_clinical_service_in, id_clinical_service)),
               id_professional           = decode(l_id_professional_n,
                                                  0,
                                                  id_professional_in,
                                                  nvl(id_professional_in, id_professional)),
               id_wl_queue               = decode(l_id_wl_queue_n, 0, id_wl_queue_in, nvl(id_wl_queue_in, id_wl_queue)),
               id_patient                = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_room                   = decode(l_id_room_n, 0, id_room_in, nvl(id_room_in, id_room)),
               id_wl_waiting_line_parent = decode(l_id_wl_waiting_line_parent_n,
                                                  0,
                                                  id_wl_waiting_line_parent_in,
                                                  nvl(id_wl_waiting_line_parent_in, id_wl_waiting_line_parent)),
               id_episode                = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               dt_begin_tstz             = decode(l_dt_begin_tstz_n,
                                                  0,
                                                  dt_begin_tstz_in,
                                                  nvl(dt_begin_tstz_in, dt_begin_tstz)),
               dt_call_tstz              = decode(l_dt_call_tstz_n,
                                                  0,
                                                  dt_call_tstz_in,
                                                  nvl(dt_call_tstz_in, dt_call_tstz)),
               dt_consult_tstz           = decode(l_dt_consult_tstz_n,
                                                  0,
                                                  dt_consult_tstz_in,
                                                  nvl(dt_consult_tstz_in, dt_consult_tstz)),
               dt_end_tstz               = decode(l_dt_end_tstz_n, 0, dt_end_tstz_in, nvl(dt_end_tstz_in, dt_end_tstz)),
               flg_wl_status             = decode(l_flg_wl_status_n,
                                                  0,
                                                  flg_wl_status_in,
                                                  nvl(flg_wl_status_in, flg_wl_status)),
               create_user               = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time               = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution        = decode(l_create_institution_n,
                                                  0,
                                                  create_institution_in,
                                                  nvl(create_institution_in, create_institution)),
               update_user               = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time               = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution        = decode(l_update_institution_n,
                                                  0,
                                                  update_institution_in,
                                                  nvl(update_institution_in, update_institution)),
               id_prof_call              = decode(l_id_prof_call_n,
                                                  0,
                                                  id_prof_call_in,
                                                  nvl(id_prof_call_in, id_prof_call))
         WHERE id_wl_waiting_line = id_wl_waiting_line_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'WL_WAITING_LINE');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    IF l_name = 'WWL_CSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CLINICAL_SERVICE',
                                                        value_in           => id_clinical_service_in);
                    END IF;
                    IF l_name = 'WWL_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'WWL_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'WWL_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'WWL_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'WWL_WQE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WL_QUEUE',
                                                        value_in           => id_wl_queue_in);
                    END IF;
                    IF l_name = 'WWL_WWL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WL_WAITING_LINE_PARENT',
                                                        value_in           => id_wl_waiting_line_parent_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_wl_waiting_line_in         IN wl_waiting_line.id_wl_waiting_line%TYPE,
        char_queue_in                 IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        char_queue_nin                IN BOOLEAN := TRUE,
        number_queue_in               IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        number_queue_nin              IN BOOLEAN := TRUE,
        id_clinical_service_in        IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin       IN BOOLEAN := TRUE,
        id_professional_in            IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_professional_nin           IN BOOLEAN := TRUE,
        id_wl_queue_in                IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_wl_queue_nin               IN BOOLEAN := TRUE,
        id_patient_in                 IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        id_room_in                    IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_room_nin                   IN BOOLEAN := TRUE,
        id_wl_waiting_line_parent_in  IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_nin IN BOOLEAN := TRUE,
        id_episode_in                 IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        dt_begin_tstz_in              IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin             IN BOOLEAN := TRUE,
        dt_call_tstz_in               IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_nin              IN BOOLEAN := TRUE,
        dt_consult_tstz_in            IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_nin           IN BOOLEAN := TRUE,
        dt_end_tstz_in                IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin               IN BOOLEAN := TRUE,
        flg_wl_status_in              IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        flg_wl_status_nin             IN BOOLEAN := TRUE,
        create_user_in                IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        id_prof_call_in               IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        id_prof_call_nin              IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_wl_waiting_line_in         => id_wl_waiting_line_in,
            char_queue_in                 => char_queue_in,
            char_queue_nin                => char_queue_nin,
            number_queue_in               => number_queue_in,
            number_queue_nin              => number_queue_nin,
            id_clinical_service_in        => id_clinical_service_in,
            id_clinical_service_nin       => id_clinical_service_nin,
            id_professional_in            => id_professional_in,
            id_professional_nin           => id_professional_nin,
            id_wl_queue_in                => id_wl_queue_in,
            id_wl_queue_nin               => id_wl_queue_nin,
            id_patient_in                 => id_patient_in,
            id_patient_nin                => id_patient_nin,
            id_room_in                    => id_room_in,
            id_room_nin                   => id_room_nin,
            id_wl_waiting_line_parent_in  => id_wl_waiting_line_parent_in,
            id_wl_waiting_line_parent_nin => id_wl_waiting_line_parent_nin,
            id_episode_in                 => id_episode_in,
            id_episode_nin                => id_episode_nin,
            dt_begin_tstz_in              => dt_begin_tstz_in,
            dt_begin_tstz_nin             => dt_begin_tstz_nin,
            dt_call_tstz_in               => dt_call_tstz_in,
            dt_call_tstz_nin              => dt_call_tstz_nin,
            dt_consult_tstz_in            => dt_consult_tstz_in,
            dt_consult_tstz_nin           => dt_consult_tstz_nin,
            dt_end_tstz_in                => dt_end_tstz_in,
            dt_end_tstz_nin               => dt_end_tstz_nin,
            flg_wl_status_in              => flg_wl_status_in,
            flg_wl_status_nin             => flg_wl_status_nin,
            create_user_in                => create_user_in,
            create_user_nin               => create_user_nin,
            create_time_in                => create_time_in,
            create_time_nin               => create_time_nin,
            create_institution_in         => create_institution_in,
            create_institution_nin        => create_institution_nin,
            update_user_in                => update_user_in,
            update_user_nin               => update_user_nin,
            update_time_in                => update_time_in,
            update_time_nin               => update_time_nin,
            update_institution_in         => update_institution_in,
            update_institution_nin        => update_institution_nin,
            id_prof_call_in               => id_prof_call_in,
            id_prof_call_nin              => id_prof_call_nin,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    PROCEDURE upd
    (
        char_queue_in                 IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        char_queue_nin                IN BOOLEAN := TRUE,
        number_queue_in               IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        number_queue_nin              IN BOOLEAN := TRUE,
        id_clinical_service_in        IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin       IN BOOLEAN := TRUE,
        id_professional_in            IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_professional_nin           IN BOOLEAN := TRUE,
        id_wl_queue_in                IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_wl_queue_nin               IN BOOLEAN := TRUE,
        id_patient_in                 IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        id_room_in                    IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_room_nin                   IN BOOLEAN := TRUE,
        id_wl_waiting_line_parent_in  IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_nin IN BOOLEAN := TRUE,
        id_episode_in                 IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        dt_begin_tstz_in              IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin             IN BOOLEAN := TRUE,
        dt_call_tstz_in               IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_nin              IN BOOLEAN := TRUE,
        dt_consult_tstz_in            IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_nin           IN BOOLEAN := TRUE,
        dt_end_tstz_in                IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin               IN BOOLEAN := TRUE,
        flg_wl_status_in              IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        flg_wl_status_nin             IN BOOLEAN := TRUE,
        create_user_in                IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        id_prof_call_in               IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        id_prof_call_nin              IN BOOLEAN := TRUE,
        where_in                      VARCHAR2 DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
        l_sql                         VARCHAR2(32767);
        l_rows_out                    table_varchar;
        l_char_queue_n                NUMBER(1);
        l_number_queue_n              NUMBER(1);
        l_id_clinical_service_n       NUMBER(1);
        l_id_professional_n           NUMBER(1);
        l_id_wl_queue_n               NUMBER(1);
        l_id_patient_n                NUMBER(1);
        l_id_room_n                   NUMBER(1);
        l_id_wl_waiting_line_parent_n NUMBER(1);
        l_id_episode_n                NUMBER(1);
        l_dt_begin_tstz_n             NUMBER(1);
        l_dt_call_tstz_n              NUMBER(1);
        l_dt_consult_tstz_n           NUMBER(1);
        l_dt_end_tstz_n               NUMBER(1);
        l_flg_wl_status_n             NUMBER(1);
        l_create_user_n               NUMBER(1);
        l_create_time_n               NUMBER(1);
        l_create_institution_n        NUMBER(1);
        l_update_user_n               NUMBER(1);
        l_update_time_n               NUMBER(1);
        l_update_institution_n        NUMBER(1);
        l_id_prof_call_n              NUMBER(1);
        id_wl_waiting_line_in         wl_waiting_line.id_wl_waiting_line%TYPE;
    BEGIN
    
        l_char_queue_n                := sys.diutil.bool_to_int(char_queue_nin);
        l_number_queue_n              := sys.diutil.bool_to_int(number_queue_nin);
        l_id_clinical_service_n       := sys.diutil.bool_to_int(id_clinical_service_nin);
        l_id_professional_n           := sys.diutil.bool_to_int(id_professional_nin);
        l_id_wl_queue_n               := sys.diutil.bool_to_int(id_wl_queue_nin);
        l_id_patient_n                := sys.diutil.bool_to_int(id_patient_nin);
        l_id_room_n                   := sys.diutil.bool_to_int(id_room_nin);
        l_id_wl_waiting_line_parent_n := sys.diutil.bool_to_int(id_wl_waiting_line_parent_nin);
        l_id_episode_n                := sys.diutil.bool_to_int(id_episode_nin);
        l_dt_begin_tstz_n             := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_call_tstz_n              := sys.diutil.bool_to_int(dt_call_tstz_nin);
        l_dt_consult_tstz_n           := sys.diutil.bool_to_int(dt_consult_tstz_nin);
        l_dt_end_tstz_n               := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_flg_wl_status_n             := sys.diutil.bool_to_int(flg_wl_status_nin);
        l_create_user_n               := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n               := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n        := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n               := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n               := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n        := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prof_call_n              := sys.diutil.bool_to_int(id_prof_call_nin);
    
        l_sql := 'UPDATE WL_WAITING_LINE SET ' || ' CHAR_QUEUE = decode (' || l_char_queue_n ||
                 ',0,:char_queue_in, NVL (:char_queue_in, CHAR_QUEUE)) ' || ',' || ' NUMBER_QUEUE = decode (' ||
                 l_number_queue_n || ',0,:number_queue_in, NVL (:number_queue_in, NUMBER_QUEUE)) ' || ',' ||
                 ' ID_CLINICAL_SERVICE = decode (' || l_id_clinical_service_n ||
                 ',0,:id_clinical_service_in, NVL (:id_clinical_service_in, ID_CLINICAL_SERVICE)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' ID_WL_QUEUE = decode (' || l_id_wl_queue_n ||
                 ',0,:id_wl_queue_in, NVL (:id_wl_queue_in, ID_WL_QUEUE)) ' || ',' || ' ID_PATIENT = decode (' ||
                 l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_ROOM = decode (' || l_id_room_n || ',0,:id_room_in, NVL (:id_room_in, ID_ROOM)) ' || ',' ||
                 ' ID_WL_WAITING_LINE_PARENT = decode (' || l_id_wl_waiting_line_parent_n ||
                 ',0,:id_wl_waiting_line_parent_in, NVL (:id_wl_waiting_line_parent_in, ID_WL_WAITING_LINE_PARENT)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' DT_BEGIN_TSTZ = decode (' || l_dt_begin_tstz_n ||
                 ',0,:dt_begin_tstz_in, NVL (:dt_begin_tstz_in, DT_BEGIN_TSTZ)) ' || ',' || ' DT_CALL_TSTZ = decode (' ||
                 l_dt_call_tstz_n || ',0,:dt_call_tstz_in, NVL (:dt_call_tstz_in, DT_CALL_TSTZ)) ' || ',' ||
                 ' DT_CONSULT_TSTZ = decode (' || l_dt_consult_tstz_n ||
                 ',0,:dt_consult_tstz_in, NVL (:dt_consult_tstz_in, DT_CONSULT_TSTZ)) ' || ',' ||
                 ' DT_END_TSTZ = decode (' || l_dt_end_tstz_n ||
                 ',0,:dt_end_tstz_in, NVL (:dt_end_tstz_in, DT_END_TSTZ)) ' || ',' || ' FLG_WL_STATUS = decode (' ||
                 l_flg_wl_status_n || ',0,:flg_wl_status_in, NVL (:flg_wl_status_in, FLG_WL_STATUS)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_PROF_CALL = decode (' || l_id_prof_call_n ||
                 ',0,:id_prof_call_in, NVL (:id_prof_call_in, ID_PROF_CALL)) ' || ' where ' || nvl(where_in, '(1=1)') ||
                 ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN char_queue_in, number_queue_in, id_clinical_service_in, id_professional_in, id_wl_queue_in, id_patient_in, id_room_in, id_wl_waiting_line_parent_in, id_episode_in, dt_begin_tstz_in, dt_call_tstz_in, dt_consult_tstz_in, dt_end_tstz_in, flg_wl_status_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_prof_call_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'WL_WAITING_LINE');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    IF l_name = 'WWL_CSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CLINICAL_SERVICE',
                                                        value_in           => id_clinical_service_in);
                    END IF;
                    IF l_name = 'WWL_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'WWL_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'WWL_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'WWL_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'WWL_WQE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WL_QUEUE',
                                                        value_in           => id_wl_queue_in);
                    END IF;
                    IF l_name = 'WWL_WWL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WL_WAITING_LINE_PARENT',
                                                        value_in           => id_wl_waiting_line_parent_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        char_queue_in                 IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        char_queue_nin                IN BOOLEAN := TRUE,
        number_queue_in               IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        number_queue_nin              IN BOOLEAN := TRUE,
        id_clinical_service_in        IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin       IN BOOLEAN := TRUE,
        id_professional_in            IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_professional_nin           IN BOOLEAN := TRUE,
        id_wl_queue_in                IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_wl_queue_nin               IN BOOLEAN := TRUE,
        id_patient_in                 IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        id_room_in                    IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_room_nin                   IN BOOLEAN := TRUE,
        id_wl_waiting_line_parent_in  IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_nin IN BOOLEAN := TRUE,
        id_episode_in                 IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        dt_begin_tstz_in              IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin             IN BOOLEAN := TRUE,
        dt_call_tstz_in               IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_nin              IN BOOLEAN := TRUE,
        dt_consult_tstz_in            IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_nin           IN BOOLEAN := TRUE,
        dt_end_tstz_in                IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin               IN BOOLEAN := TRUE,
        flg_wl_status_in              IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        flg_wl_status_nin             IN BOOLEAN := TRUE,
        create_user_in                IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        id_prof_call_in               IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        id_prof_call_nin              IN BOOLEAN := TRUE,
        where_in                      VARCHAR2 DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(char_queue_in                 => char_queue_in,
            char_queue_nin                => char_queue_nin,
            number_queue_in               => number_queue_in,
            number_queue_nin              => number_queue_nin,
            id_clinical_service_in        => id_clinical_service_in,
            id_clinical_service_nin       => id_clinical_service_nin,
            id_professional_in            => id_professional_in,
            id_professional_nin           => id_professional_nin,
            id_wl_queue_in                => id_wl_queue_in,
            id_wl_queue_nin               => id_wl_queue_nin,
            id_patient_in                 => id_patient_in,
            id_patient_nin                => id_patient_nin,
            id_room_in                    => id_room_in,
            id_room_nin                   => id_room_nin,
            id_wl_waiting_line_parent_in  => id_wl_waiting_line_parent_in,
            id_wl_waiting_line_parent_nin => id_wl_waiting_line_parent_nin,
            id_episode_in                 => id_episode_in,
            id_episode_nin                => id_episode_nin,
            dt_begin_tstz_in              => dt_begin_tstz_in,
            dt_begin_tstz_nin             => dt_begin_tstz_nin,
            dt_call_tstz_in               => dt_call_tstz_in,
            dt_call_tstz_nin              => dt_call_tstz_nin,
            dt_consult_tstz_in            => dt_consult_tstz_in,
            dt_consult_tstz_nin           => dt_consult_tstz_nin,
            dt_end_tstz_in                => dt_end_tstz_in,
            dt_end_tstz_nin               => dt_end_tstz_nin,
            flg_wl_status_in              => flg_wl_status_in,
            flg_wl_status_nin             => flg_wl_status_nin,
            create_user_in                => create_user_in,
            create_user_nin               => create_user_nin,
            create_time_in                => create_time_in,
            create_time_nin               => create_time_nin,
            create_institution_in         => create_institution_in,
            create_institution_nin        => create_institution_nin,
            update_user_in                => update_user_in,
            update_user_nin               => update_user_nin,
            update_time_in                => update_time_in,
            update_time_nin               => update_time_nin,
            update_institution_in         => update_institution_in,
            update_institution_nin        => update_institution_nin,
            id_prof_call_in               => id_prof_call_in,
            id_prof_call_nin              => id_prof_call_nin,
            where_in                      => where_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN wl_waiting_line%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_wl_waiting_line_in        => rec_in.id_wl_waiting_line,
            char_queue_in                => rec_in.char_queue,
            number_queue_in              => rec_in.number_queue,
            id_clinical_service_in       => rec_in.id_clinical_service,
            id_professional_in           => rec_in.id_professional,
            id_wl_queue_in               => rec_in.id_wl_queue,
            id_patient_in                => rec_in.id_patient,
            id_room_in                   => rec_in.id_room,
            id_wl_waiting_line_parent_in => rec_in.id_wl_waiting_line_parent,
            id_episode_in                => rec_in.id_episode,
            dt_begin_tstz_in             => rec_in.dt_begin_tstz,
            dt_call_tstz_in              => rec_in.dt_call_tstz,
            dt_consult_tstz_in           => rec_in.dt_consult_tstz,
            dt_end_tstz_in               => rec_in.dt_end_tstz,
            flg_wl_status_in             => rec_in.flg_wl_status,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution,
            id_prof_call_in              => rec_in.id_prof_call
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN wl_waiting_line%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_wl_waiting_line_in        => rec_in.id_wl_waiting_line,
            char_queue_in                => rec_in.char_queue,
            number_queue_in              => rec_in.number_queue,
            id_clinical_service_in       => rec_in.id_clinical_service,
            id_professional_in           => rec_in.id_professional,
            id_wl_queue_in               => rec_in.id_wl_queue,
            id_patient_in                => rec_in.id_patient,
            id_room_in                   => rec_in.id_room,
            id_wl_waiting_line_parent_in => rec_in.id_wl_waiting_line_parent,
            id_episode_in                => rec_in.id_episode,
            dt_begin_tstz_in             => rec_in.dt_begin_tstz,
            dt_call_tstz_in              => rec_in.dt_call_tstz,
            dt_consult_tstz_in           => rec_in.dt_consult_tstz,
            dt_end_tstz_in               => rec_in.dt_end_tstz,
            flg_wl_status_in             => rec_in.flg_wl_status,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution,
            id_prof_call_in              => rec_in.id_prof_call
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_wl_waiting_line_in        IN wl_waiting_line.id_wl_waiting_line%TYPE,
        char_queue_in                IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        number_queue_in              IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        id_clinical_service_in       IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_professional_in           IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_wl_queue_in               IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_patient_in                IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_room_in                   IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_in IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_episode_in                IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in             IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_in              IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_in           IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in               IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        flg_wl_status_in             IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        create_user_in               IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_time_in               IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_time_in               IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        id_prof_call_in              IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        upd(id_wl_waiting_line_in        => id_wl_waiting_line_in,
            char_queue_in                => char_queue_in,
            number_queue_in              => number_queue_in,
            id_clinical_service_in       => id_clinical_service_in,
            id_professional_in           => id_professional_in,
            id_wl_queue_in               => id_wl_queue_in,
            id_patient_in                => id_patient_in,
            id_room_in                   => id_room_in,
            id_wl_waiting_line_parent_in => id_wl_waiting_line_parent_in,
            id_episode_in                => id_episode_in,
            dt_begin_tstz_in             => dt_begin_tstz_in,
            dt_call_tstz_in              => dt_call_tstz_in,
            dt_consult_tstz_in           => dt_consult_tstz_in,
            dt_end_tstz_in               => dt_end_tstz_in,
            flg_wl_status_in             => flg_wl_status_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_prof_call_in              => id_prof_call_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_wl_waiting_line_in        => id_wl_waiting_line_in,
                char_queue_in                => char_queue_in,
                number_queue_in              => number_queue_in,
                id_clinical_service_in       => id_clinical_service_in,
                id_professional_in           => id_professional_in,
                id_wl_queue_in               => id_wl_queue_in,
                id_patient_in                => id_patient_in,
                id_room_in                   => id_room_in,
                id_wl_waiting_line_parent_in => id_wl_waiting_line_parent_in,
                id_episode_in                => id_episode_in,
                dt_begin_tstz_in             => dt_begin_tstz_in,
                dt_call_tstz_in              => dt_call_tstz_in,
                dt_consult_tstz_in           => dt_consult_tstz_in,
                dt_end_tstz_in               => dt_end_tstz_in,
                flg_wl_status_in             => flg_wl_status_in,
                create_user_in               => create_user_in,
                create_time_in               => create_time_in,
                create_institution_in        => create_institution_in,
                update_user_in               => update_user_in,
                update_time_in               => update_time_in,
                update_institution_in        => update_institution_in,
                id_prof_call_in              => id_prof_call_in,
                handle_error_in              => handle_error_in,
                rows_out                     => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_wl_waiting_line_in        IN wl_waiting_line.id_wl_waiting_line%TYPE,
        char_queue_in                IN wl_waiting_line.char_queue%TYPE DEFAULT NULL,
        number_queue_in              IN wl_waiting_line.number_queue%TYPE DEFAULT NULL,
        id_clinical_service_in       IN wl_waiting_line.id_clinical_service%TYPE DEFAULT NULL,
        id_professional_in           IN wl_waiting_line.id_professional%TYPE DEFAULT NULL,
        id_wl_queue_in               IN wl_waiting_line.id_wl_queue%TYPE DEFAULT NULL,
        id_patient_in                IN wl_waiting_line.id_patient%TYPE DEFAULT NULL,
        id_room_in                   IN wl_waiting_line.id_room%TYPE DEFAULT NULL,
        id_wl_waiting_line_parent_in IN wl_waiting_line.id_wl_waiting_line_parent%TYPE DEFAULT NULL,
        id_episode_in                IN wl_waiting_line.id_episode%TYPE DEFAULT NULL,
        dt_begin_tstz_in             IN wl_waiting_line.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_call_tstz_in              IN wl_waiting_line.dt_call_tstz%TYPE DEFAULT NULL,
        dt_consult_tstz_in           IN wl_waiting_line.dt_consult_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in               IN wl_waiting_line.dt_end_tstz%TYPE DEFAULT NULL,
        flg_wl_status_in             IN wl_waiting_line.flg_wl_status%TYPE DEFAULT NULL,
        create_user_in               IN wl_waiting_line.create_user%TYPE DEFAULT NULL,
        create_time_in               IN wl_waiting_line.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN wl_waiting_line.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN wl_waiting_line.update_user%TYPE DEFAULT NULL,
        update_time_in               IN wl_waiting_line.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN wl_waiting_line.update_institution%TYPE DEFAULT NULL,
        id_prof_call_in              IN wl_waiting_line.id_prof_call%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_wl_waiting_line_in,
                char_queue_in,
                number_queue_in,
                id_clinical_service_in,
                id_professional_in,
                id_wl_queue_in,
                id_patient_in,
                id_room_in,
                id_wl_waiting_line_parent_in,
                id_episode_in,
                dt_begin_tstz_in,
                dt_call_tstz_in,
                dt_consult_tstz_in,
                dt_end_tstz_in,
                flg_wl_status_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_prof_call_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN wl_waiting_line_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_wl_waiting_line        id_wl_waiting_line_cc;
        l_char_queue                char_queue_cc;
        l_number_queue              number_queue_cc;
        l_id_clinical_service       id_clinical_service_cc;
        l_id_professional           id_professional_cc;
        l_id_wl_queue               id_wl_queue_cc;
        l_id_patient                id_patient_cc;
        l_id_room                   id_room_cc;
        l_id_wl_waiting_line_parent id_wl_waiting_line_parent_cc;
        l_id_episode                id_episode_cc;
        l_dt_begin_tstz             dt_begin_tstz_cc;
        l_dt_call_tstz              dt_call_tstz_cc;
        l_dt_consult_tstz           dt_consult_tstz_cc;
        l_dt_end_tstz               dt_end_tstz_cc;
        l_flg_wl_status             flg_wl_status_cc;
        l_create_user               create_user_cc;
        l_create_time               create_time_cc;
        l_create_institution        create_institution_cc;
        l_update_user               update_user_cc;
        l_update_time               update_time_cc;
        l_update_institution        update_institution_cc;
        l_id_prof_call              id_prof_call_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_wl_waiting_line(i) := col_in(i).id_wl_waiting_line;
            l_char_queue(i) := col_in(i).char_queue;
            l_number_queue(i) := col_in(i).number_queue;
            l_id_clinical_service(i) := col_in(i).id_clinical_service;
            l_id_professional(i) := col_in(i).id_professional;
            l_id_wl_queue(i) := col_in(i).id_wl_queue;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_room(i) := col_in(i).id_room;
            l_id_wl_waiting_line_parent(i) := col_in(i).id_wl_waiting_line_parent;
            l_id_episode(i) := col_in(i).id_episode;
            l_dt_begin_tstz(i) := col_in(i).dt_begin_tstz;
            l_dt_call_tstz(i) := col_in(i).dt_call_tstz;
            l_dt_consult_tstz(i) := col_in(i).dt_consult_tstz;
            l_dt_end_tstz(i) := col_in(i).dt_end_tstz;
            l_flg_wl_status(i) := col_in(i).flg_wl_status;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_prof_call(i) := col_in(i).id_prof_call;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE wl_waiting_line
                   SET char_queue                = nvl(l_char_queue(i), char_queue),
                       number_queue              = nvl(l_number_queue(i), number_queue),
                       id_clinical_service       = nvl(l_id_clinical_service(i), id_clinical_service),
                       id_professional           = nvl(l_id_professional(i), id_professional),
                       id_wl_queue               = nvl(l_id_wl_queue(i), id_wl_queue),
                       id_patient                = nvl(l_id_patient(i), id_patient),
                       id_room                   = nvl(l_id_room(i), id_room),
                       id_wl_waiting_line_parent = nvl(l_id_wl_waiting_line_parent(i), id_wl_waiting_line_parent),
                       id_episode                = nvl(l_id_episode(i), id_episode),
                       dt_begin_tstz             = nvl(l_dt_begin_tstz(i), dt_begin_tstz),
                       dt_call_tstz              = nvl(l_dt_call_tstz(i), dt_call_tstz),
                       dt_consult_tstz           = nvl(l_dt_consult_tstz(i), dt_consult_tstz),
                       dt_end_tstz               = nvl(l_dt_end_tstz(i), dt_end_tstz),
                       flg_wl_status             = nvl(l_flg_wl_status(i), flg_wl_status),
                       create_user               = nvl(l_create_user(i), create_user),
                       create_time               = nvl(l_create_time(i), create_time),
                       create_institution        = nvl(l_create_institution(i), create_institution),
                       update_user               = nvl(l_update_user(i), update_user),
                       update_time               = nvl(l_update_time(i), update_time),
                       update_institution        = nvl(l_update_institution(i), update_institution),
                       id_prof_call              = nvl(l_id_prof_call(i), id_prof_call)
                 WHERE id_wl_waiting_line = l_id_wl_waiting_line(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE wl_waiting_line
                   SET char_queue                = l_char_queue(i),
                       number_queue              = l_number_queue(i),
                       id_clinical_service       = l_id_clinical_service(i),
                       id_professional           = l_id_professional(i),
                       id_wl_queue               = l_id_wl_queue(i),
                       id_patient                = l_id_patient(i),
                       id_room                   = l_id_room(i),
                       id_wl_waiting_line_parent = l_id_wl_waiting_line_parent(i),
                       id_episode                = l_id_episode(i),
                       dt_begin_tstz             = l_dt_begin_tstz(i),
                       dt_call_tstz              = l_dt_call_tstz(i),
                       dt_consult_tstz           = l_dt_consult_tstz(i),
                       dt_end_tstz               = l_dt_end_tstz(i),
                       flg_wl_status             = l_flg_wl_status(i),
                       create_user               = l_create_user(i),
                       create_time               = l_create_time(i),
                       create_institution        = l_create_institution(i),
                       update_user               = l_update_user(i),
                       update_time               = l_update_time(i),
                       update_institution        = l_update_institution(i),
                       id_prof_call              = l_id_prof_call(i)
                 WHERE id_wl_waiting_line = l_id_wl_waiting_line(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN wl_waiting_line_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE WL_WAITING_LINE
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE WL_WAITING_LINE
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE WL_WAITING_LINE set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE WL_WAITING_LINE set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_wl_waiting_line_in IN wl_waiting_line.id_wl_waiting_line%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM wl_waiting_line
         WHERE id_wl_waiting_line = id_wl_waiting_line_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_wl_waiting_line_in IN wl_waiting_line.id_wl_waiting_line%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_wl_waiting_line_in => id_wl_waiting_line_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_WL_WAITING_LINE
    PROCEDURE del_id_wl_waiting_line
    (
        id_wl_waiting_line_in IN wl_waiting_line.id_wl_waiting_line%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM wl_waiting_line
         WHERE id_wl_waiting_line = id_wl_waiting_line_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_wl_waiting_line;

    -- Delete all rows for primary key column ID_WL_WAITING_LINE
    PROCEDURE del_id_wl_waiting_line
    (
        id_wl_waiting_line_in IN wl_waiting_line.id_wl_waiting_line%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_wl_waiting_line(id_wl_waiting_line_in => id_wl_waiting_line_in,
                               handle_error_in       => handle_error_in,
                               rows_out              => rows_out);
    END del_id_wl_waiting_line;

    PROCEDURE del_wwl_cse_fk
    (
        id_clinical_service_in IN wl_waiting_line.id_clinical_service%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM wl_waiting_line
         WHERE id_clinical_service = del_wwl_cse_fk.id_clinical_service_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_wwl_cse_fk;

    PROCEDURE del_wwl_cse_fk
    (
        id_clinical_service_in IN wl_waiting_line.id_clinical_service%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_wwl_cse_fk(id_clinical_service_in => id_clinical_service_in,
                       handle_error_in        => handle_error_in,
                       rows_out               => rows_out);
    END del_wwl_cse_fk;

    PROCEDURE del_wwl_epis_fk
    (
        id_episode_in   IN wl_waiting_line.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM wl_waiting_line
         WHERE id_episode = del_wwl_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_wwl_epis_fk;

    PROCEDURE del_wwl_epis_fk
    (
        id_episode_in   IN wl_waiting_line.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_wwl_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_wwl_epis_fk;

    PROCEDURE del_wwl_pat_fk
    (
        id_patient_in   IN wl_waiting_line.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM wl_waiting_line
         WHERE id_patient = del_wwl_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_wwl_pat_fk;

    PROCEDURE del_wwl_pat_fk
    (
        id_patient_in   IN wl_waiting_line.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_wwl_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_wwl_pat_fk;

    PROCEDURE del_wwl_prof_fk
    (
        id_professional_in IN wl_waiting_line.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM wl_waiting_line
         WHERE id_professional = del_wwl_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_wwl_prof_fk;

    PROCEDURE del_wwl_prof_fk
    (
        id_professional_in IN wl_waiting_line.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_wwl_prof_fk(id_professional_in => id_professional_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_wwl_prof_fk;

    PROCEDURE del_wwl_room_fk
    (
        id_room_in      IN wl_waiting_line.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM wl_waiting_line
         WHERE id_room = del_wwl_room_fk.id_room_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_wwl_room_fk;

    PROCEDURE del_wwl_room_fk
    (
        id_room_in      IN wl_waiting_line.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_wwl_room_fk(id_room_in => id_room_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_wwl_room_fk;

    PROCEDURE del_wwl_wqe_fk
    (
        id_wl_queue_in  IN wl_waiting_line.id_wl_queue%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM wl_waiting_line
         WHERE id_wl_queue = del_wwl_wqe_fk.id_wl_queue_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_wwl_wqe_fk;

    PROCEDURE del_wwl_wqe_fk
    (
        id_wl_queue_in  IN wl_waiting_line.id_wl_queue%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_wwl_wqe_fk(id_wl_queue_in => id_wl_queue_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_wwl_wqe_fk;

    PROCEDURE del_wwl_wwl_fk
    (
        id_wl_waiting_line_parent_in IN wl_waiting_line.id_wl_waiting_line_parent%TYPE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM wl_waiting_line
         WHERE id_wl_waiting_line_parent = del_wwl_wwl_fk.id_wl_waiting_line_parent_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_wwl_wwl_fk;

    PROCEDURE del_wwl_wwl_fk
    (
        id_wl_waiting_line_parent_in IN wl_waiting_line.id_wl_waiting_line_parent%TYPE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_wwl_wwl_fk(id_wl_waiting_line_parent_in => id_wl_waiting_line_parent_in,
                       handle_error_in              => handle_error_in,
                       rows_out                     => rows_out);
    END del_wwl_wwl_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM WL_WAITING_LINE';
        ELSE
            RETURN 'DELETE FROM WL_WAITING_LINE WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'WL_WAITING_LINE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'WL_WAITING_LINE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(wl_waiting_line_inout IN OUT wl_waiting_line%ROWTYPE) IS
    BEGIN
        wl_waiting_line_inout.id_wl_waiting_line        := NULL;
        wl_waiting_line_inout.char_queue                := NULL;
        wl_waiting_line_inout.number_queue              := NULL;
        wl_waiting_line_inout.id_clinical_service       := NULL;
        wl_waiting_line_inout.id_professional           := NULL;
        wl_waiting_line_inout.id_wl_queue               := NULL;
        wl_waiting_line_inout.id_patient                := NULL;
        wl_waiting_line_inout.id_room                   := NULL;
        wl_waiting_line_inout.id_wl_waiting_line_parent := NULL;
        wl_waiting_line_inout.id_episode                := NULL;
        wl_waiting_line_inout.dt_begin_tstz             := NULL;
        wl_waiting_line_inout.dt_call_tstz              := NULL;
        wl_waiting_line_inout.dt_consult_tstz           := NULL;
        wl_waiting_line_inout.dt_end_tstz               := NULL;
        wl_waiting_line_inout.flg_wl_status             := NULL;
        wl_waiting_line_inout.create_user               := NULL;
        wl_waiting_line_inout.create_time               := NULL;
        wl_waiting_line_inout.create_institution        := NULL;
        wl_waiting_line_inout.update_user               := NULL;
        wl_waiting_line_inout.update_time               := NULL;
        wl_waiting_line_inout.update_institution        := NULL;
        wl_waiting_line_inout.id_prof_call              := NULL;
    END initrec;

    FUNCTION initrec RETURN wl_waiting_line%ROWTYPE IS
        l_wl_waiting_line wl_waiting_line%ROWTYPE;
    BEGIN
        RETURN l_wl_waiting_line;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN wl_waiting_line_tc IS
        data wl_waiting_line_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM wl_waiting_line
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001)*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN wl_waiting_line_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data wl_waiting_line_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_wl_waiting_line;
/
