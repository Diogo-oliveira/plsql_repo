/*-- Last Change Revision: $Rev: 2055402 $*/
/*-- Last Change by: $Author: diogo.oliveira $*/
/*-- Date of last change: $Date: 2023-02-22 09:44:22 +0000 (qua, 22 fev 2023) $*/
CREATE OR REPLACE PACKAGE BODY ts_opinion
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2022-11-15 11:58:00
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN opinion.id_opinion%TYPE IS
        retval opinion.id_opinion%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_opinion.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in          IN opinion.id_episode%TYPE DEFAULT NULL,
        flg_state_in           IN opinion.flg_state%TYPE DEFAULT NULL,
        desc_problem_in        IN opinion.desc_problem%TYPE DEFAULT NULL,
        id_prof_questions_in   IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questioned_in  IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_speciality_in       IN opinion.id_speciality%TYPE DEFAULT NULL,
        notes_cancel_in        IN opinion.notes_cancel%TYPE DEFAULT NULL,
        dt_problem_tstz_in     IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        status_flg_in          IN opinion.status_flg%TYPE DEFAULT NULL,
        status_icon_in         IN opinion.status_icon%TYPE DEFAULT NULL,
        status_msg_in          IN opinion.status_msg%TYPE DEFAULT NULL,
        status_str_in          IN opinion.status_str%TYPE DEFAULT NULL,
        create_user_in         IN opinion.create_user%TYPE DEFAULT NULL,
        create_time_in         IN opinion.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN opinion.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN opinion.update_user%TYPE DEFAULT NULL,
        update_time_in         IN opinion.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN opinion.update_institution%TYPE DEFAULT NULL,
        flg_type_in            IN opinion.flg_type%TYPE DEFAULT NULL,
        id_management_level_in IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_episode_answer_in   IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_patient_in          IN opinion.id_patient%TYPE DEFAULT NULL,
        dt_last_update_in      IN opinion.dt_last_update%TYPE DEFAULT NULL,
        id_opinion_type_in     IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        dt_approved_in         IN opinion.dt_approved%TYPE DEFAULT NULL,
        id_prof_approved_in    IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        notes_in               IN opinion.notes%TYPE DEFAULT NULL,
        id_episode_approval_in IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        flg_auto_follow_up_in  IN opinion.flg_auto_follow_up%TYPE DEFAULT 'N',
        id_prof_cancel_in      IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        flg_priority_in        IN opinion.flg_priority%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_pky opinion.id_opinion%TYPE := next_key;
    BEGIN
        ins(id_opinion_in          => l_pky,
            id_episode_in          => id_episode_in,
            flg_state_in           => flg_state_in,
            desc_problem_in        => desc_problem_in,
            id_prof_questions_in   => id_prof_questions_in,
            id_prof_questioned_in  => id_prof_questioned_in,
            id_speciality_in       => id_speciality_in,
            notes_cancel_in        => notes_cancel_in,
            dt_problem_tstz_in     => dt_problem_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            status_flg_in          => status_flg_in,
            status_icon_in         => status_icon_in,
            status_msg_in          => status_msg_in,
            status_str_in          => status_str_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_type_in            => flg_type_in,
            id_management_level_in => id_management_level_in,
            id_episode_answer_in   => id_episode_answer_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_patient_in          => id_patient_in,
            dt_last_update_in      => dt_last_update_in,
            id_opinion_type_in     => id_opinion_type_in,
            id_clinical_service_in => id_clinical_service_in,
            dt_approved_in         => dt_approved_in,
            id_prof_approved_in    => id_prof_approved_in,
            notes_in               => notes_in,
            id_episode_approval_in => id_episode_approval_in,
            flg_auto_follow_up_in  => flg_auto_follow_up_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            flg_priority_in        => flg_priority_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in          IN opinion.id_episode%TYPE DEFAULT NULL,
        flg_state_in           IN opinion.flg_state%TYPE DEFAULT NULL,
        desc_problem_in        IN opinion.desc_problem%TYPE DEFAULT NULL,
        id_prof_questions_in   IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questioned_in  IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_speciality_in       IN opinion.id_speciality%TYPE DEFAULT NULL,
        notes_cancel_in        IN opinion.notes_cancel%TYPE DEFAULT NULL,
        dt_problem_tstz_in     IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        status_flg_in          IN opinion.status_flg%TYPE DEFAULT NULL,
        status_icon_in         IN opinion.status_icon%TYPE DEFAULT NULL,
        status_msg_in          IN opinion.status_msg%TYPE DEFAULT NULL,
        status_str_in          IN opinion.status_str%TYPE DEFAULT NULL,
        create_user_in         IN opinion.create_user%TYPE DEFAULT NULL,
        create_time_in         IN opinion.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN opinion.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN opinion.update_user%TYPE DEFAULT NULL,
        update_time_in         IN opinion.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN opinion.update_institution%TYPE DEFAULT NULL,
        flg_type_in            IN opinion.flg_type%TYPE DEFAULT NULL,
        id_management_level_in IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_episode_answer_in   IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_patient_in          IN opinion.id_patient%TYPE DEFAULT NULL,
        dt_last_update_in      IN opinion.dt_last_update%TYPE DEFAULT NULL,
        id_opinion_type_in     IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        dt_approved_in         IN opinion.dt_approved%TYPE DEFAULT NULL,
        id_prof_approved_in    IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        notes_in               IN opinion.notes%TYPE DEFAULT NULL,
        id_episode_approval_in IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        flg_auto_follow_up_in  IN opinion.flg_auto_follow_up%TYPE DEFAULT 'N',
        id_prof_cancel_in      IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        flg_priority_in        IN opinion.flg_priority%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in          => id_episode_in,
            flg_state_in           => flg_state_in,
            desc_problem_in        => desc_problem_in,
            id_prof_questions_in   => id_prof_questions_in,
            id_prof_questioned_in  => id_prof_questioned_in,
            id_speciality_in       => id_speciality_in,
            notes_cancel_in        => notes_cancel_in,
            dt_problem_tstz_in     => dt_problem_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            status_flg_in          => status_flg_in,
            status_icon_in         => status_icon_in,
            status_msg_in          => status_msg_in,
            status_str_in          => status_str_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_type_in            => flg_type_in,
            id_management_level_in => id_management_level_in,
            id_episode_answer_in   => id_episode_answer_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_patient_in          => id_patient_in,
            dt_last_update_in      => dt_last_update_in,
            id_opinion_type_in     => id_opinion_type_in,
            id_clinical_service_in => id_clinical_service_in,
            dt_approved_in         => dt_approved_in,
            id_prof_approved_in    => id_prof_approved_in,
            notes_in               => notes_in,
            id_episode_approval_in => id_episode_approval_in,
            flg_auto_follow_up_in  => flg_auto_follow_up_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            flg_priority_in        => flg_priority_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in          IN opinion.id_episode%TYPE DEFAULT NULL,
        flg_state_in           IN opinion.flg_state%TYPE DEFAULT NULL,
        desc_problem_in        IN opinion.desc_problem%TYPE DEFAULT NULL,
        id_prof_questions_in   IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questioned_in  IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_speciality_in       IN opinion.id_speciality%TYPE DEFAULT NULL,
        notes_cancel_in        IN opinion.notes_cancel%TYPE DEFAULT NULL,
        dt_problem_tstz_in     IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        status_flg_in          IN opinion.status_flg%TYPE DEFAULT NULL,
        status_icon_in         IN opinion.status_icon%TYPE DEFAULT NULL,
        status_msg_in          IN opinion.status_msg%TYPE DEFAULT NULL,
        status_str_in          IN opinion.status_str%TYPE DEFAULT NULL,
        create_user_in         IN opinion.create_user%TYPE DEFAULT NULL,
        create_time_in         IN opinion.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN opinion.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN opinion.update_user%TYPE DEFAULT NULL,
        update_time_in         IN opinion.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN opinion.update_institution%TYPE DEFAULT NULL,
        flg_type_in            IN opinion.flg_type%TYPE DEFAULT NULL,
        id_management_level_in IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_episode_answer_in   IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_patient_in          IN opinion.id_patient%TYPE DEFAULT NULL,
        dt_last_update_in      IN opinion.dt_last_update%TYPE DEFAULT NULL,
        id_opinion_type_in     IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        dt_approved_in         IN opinion.dt_approved%TYPE DEFAULT NULL,
        id_prof_approved_in    IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        notes_in               IN opinion.notes%TYPE DEFAULT NULL,
        id_episode_approval_in IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        flg_auto_follow_up_in  IN opinion.flg_auto_follow_up%TYPE DEFAULT 'N',
        id_prof_cancel_in      IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        flg_priority_in        IN opinion.flg_priority%TYPE DEFAULT NULL,
        id_opinion_out         IN OUT opinion.id_opinion%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_pky opinion.id_opinion%TYPE := next_key;
    BEGIN
        ins(id_opinion_in          => l_pky,
            id_episode_in          => id_episode_in,
            flg_state_in           => flg_state_in,
            desc_problem_in        => desc_problem_in,
            id_prof_questions_in   => id_prof_questions_in,
            id_prof_questioned_in  => id_prof_questioned_in,
            id_speciality_in       => id_speciality_in,
            notes_cancel_in        => notes_cancel_in,
            dt_problem_tstz_in     => dt_problem_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            status_flg_in          => status_flg_in,
            status_icon_in         => status_icon_in,
            status_msg_in          => status_msg_in,
            status_str_in          => status_str_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_type_in            => flg_type_in,
            id_management_level_in => id_management_level_in,
            id_episode_answer_in   => id_episode_answer_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_patient_in          => id_patient_in,
            dt_last_update_in      => dt_last_update_in,
            id_opinion_type_in     => id_opinion_type_in,
            id_clinical_service_in => id_clinical_service_in,
            dt_approved_in         => dt_approved_in,
            id_prof_approved_in    => id_prof_approved_in,
            notes_in               => notes_in,
            id_episode_approval_in => id_episode_approval_in,
            flg_auto_follow_up_in  => flg_auto_follow_up_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            flg_priority_in        => flg_priority_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_opinion_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in          IN opinion.id_episode%TYPE DEFAULT NULL,
        flg_state_in           IN opinion.flg_state%TYPE DEFAULT NULL,
        desc_problem_in        IN opinion.desc_problem%TYPE DEFAULT NULL,
        id_prof_questions_in   IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questioned_in  IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_speciality_in       IN opinion.id_speciality%TYPE DEFAULT NULL,
        notes_cancel_in        IN opinion.notes_cancel%TYPE DEFAULT NULL,
        dt_problem_tstz_in     IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        status_flg_in          IN opinion.status_flg%TYPE DEFAULT NULL,
        status_icon_in         IN opinion.status_icon%TYPE DEFAULT NULL,
        status_msg_in          IN opinion.status_msg%TYPE DEFAULT NULL,
        status_str_in          IN opinion.status_str%TYPE DEFAULT NULL,
        create_user_in         IN opinion.create_user%TYPE DEFAULT NULL,
        create_time_in         IN opinion.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN opinion.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN opinion.update_user%TYPE DEFAULT NULL,
        update_time_in         IN opinion.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN opinion.update_institution%TYPE DEFAULT NULL,
        flg_type_in            IN opinion.flg_type%TYPE DEFAULT NULL,
        id_management_level_in IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_episode_answer_in   IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_patient_in          IN opinion.id_patient%TYPE DEFAULT NULL,
        dt_last_update_in      IN opinion.dt_last_update%TYPE DEFAULT NULL,
        id_opinion_type_in     IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        dt_approved_in         IN opinion.dt_approved%TYPE DEFAULT NULL,
        id_prof_approved_in    IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        notes_in               IN opinion.notes%TYPE DEFAULT NULL,
        id_episode_approval_in IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        flg_auto_follow_up_in  IN opinion.flg_auto_follow_up%TYPE DEFAULT 'N',
        id_prof_cancel_in      IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        flg_priority_in        IN opinion.flg_priority%TYPE DEFAULT NULL,
        id_opinion_out         IN OUT opinion.id_opinion%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in          => id_episode_in,
            flg_state_in           => flg_state_in,
            desc_problem_in        => desc_problem_in,
            id_prof_questions_in   => id_prof_questions_in,
            id_prof_questioned_in  => id_prof_questioned_in,
            id_speciality_in       => id_speciality_in,
            notes_cancel_in        => notes_cancel_in,
            dt_problem_tstz_in     => dt_problem_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            status_flg_in          => status_flg_in,
            status_icon_in         => status_icon_in,
            status_msg_in          => status_msg_in,
            status_str_in          => status_str_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_type_in            => flg_type_in,
            id_management_level_in => id_management_level_in,
            id_episode_answer_in   => id_episode_answer_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_patient_in          => id_patient_in,
            dt_last_update_in      => dt_last_update_in,
            id_opinion_type_in     => id_opinion_type_in,
            id_clinical_service_in => id_clinical_service_in,
            dt_approved_in         => dt_approved_in,
            id_prof_approved_in    => id_prof_approved_in,
            notes_in               => notes_in,
            id_episode_approval_in => id_episode_approval_in,
            flg_auto_follow_up_in  => flg_auto_follow_up_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            flg_priority_in        => flg_priority_in,
            id_opinion_out         => id_opinion_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in          IN opinion.id_episode%TYPE DEFAULT NULL,
        flg_state_in           IN opinion.flg_state%TYPE DEFAULT NULL,
        desc_problem_in        IN opinion.desc_problem%TYPE DEFAULT NULL,
        id_prof_questions_in   IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questioned_in  IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_speciality_in       IN opinion.id_speciality%TYPE DEFAULT NULL,
        notes_cancel_in        IN opinion.notes_cancel%TYPE DEFAULT NULL,
        dt_problem_tstz_in     IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        status_flg_in          IN opinion.status_flg%TYPE DEFAULT NULL,
        status_icon_in         IN opinion.status_icon%TYPE DEFAULT NULL,
        status_msg_in          IN opinion.status_msg%TYPE DEFAULT NULL,
        status_str_in          IN opinion.status_str%TYPE DEFAULT NULL,
        create_user_in         IN opinion.create_user%TYPE DEFAULT NULL,
        create_time_in         IN opinion.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN opinion.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN opinion.update_user%TYPE DEFAULT NULL,
        update_time_in         IN opinion.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN opinion.update_institution%TYPE DEFAULT NULL,
        flg_type_in            IN opinion.flg_type%TYPE DEFAULT NULL,
        id_management_level_in IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_episode_answer_in   IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_patient_in          IN opinion.id_patient%TYPE DEFAULT NULL,
        dt_last_update_in      IN opinion.dt_last_update%TYPE DEFAULT NULL,
        id_opinion_type_in     IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        dt_approved_in         IN opinion.dt_approved%TYPE DEFAULT NULL,
        id_prof_approved_in    IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        notes_in               IN opinion.notes%TYPE DEFAULT NULL,
        id_episode_approval_in IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        flg_auto_follow_up_in  IN opinion.flg_auto_follow_up%TYPE DEFAULT 'N',
        id_prof_cancel_in      IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        flg_priority_in        IN opinion.flg_priority%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) RETURN opinion.id_opinion%TYPE IS
        l_pky opinion.id_opinion%TYPE := next_key;
    BEGIN
        ins(id_opinion_in          => l_pky,
            id_episode_in          => id_episode_in,
            flg_state_in           => flg_state_in,
            desc_problem_in        => desc_problem_in,
            id_prof_questions_in   => id_prof_questions_in,
            id_prof_questioned_in  => id_prof_questioned_in,
            id_speciality_in       => id_speciality_in,
            notes_cancel_in        => notes_cancel_in,
            dt_problem_tstz_in     => dt_problem_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            status_flg_in          => status_flg_in,
            status_icon_in         => status_icon_in,
            status_msg_in          => status_msg_in,
            status_str_in          => status_str_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_type_in            => flg_type_in,
            id_management_level_in => id_management_level_in,
            id_episode_answer_in   => id_episode_answer_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_patient_in          => id_patient_in,
            dt_last_update_in      => dt_last_update_in,
            id_opinion_type_in     => id_opinion_type_in,
            id_clinical_service_in => id_clinical_service_in,
            dt_approved_in         => dt_approved_in,
            id_prof_approved_in    => id_prof_approved_in,
            notes_in               => notes_in,
            id_episode_approval_in => id_episode_approval_in,
            flg_auto_follow_up_in  => flg_auto_follow_up_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            flg_priority_in        => flg_priority_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in          IN opinion.id_episode%TYPE DEFAULT NULL,
        flg_state_in           IN opinion.flg_state%TYPE DEFAULT NULL,
        desc_problem_in        IN opinion.desc_problem%TYPE DEFAULT NULL,
        id_prof_questions_in   IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questioned_in  IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_speciality_in       IN opinion.id_speciality%TYPE DEFAULT NULL,
        notes_cancel_in        IN opinion.notes_cancel%TYPE DEFAULT NULL,
        dt_problem_tstz_in     IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        status_flg_in          IN opinion.status_flg%TYPE DEFAULT NULL,
        status_icon_in         IN opinion.status_icon%TYPE DEFAULT NULL,
        status_msg_in          IN opinion.status_msg%TYPE DEFAULT NULL,
        status_str_in          IN opinion.status_str%TYPE DEFAULT NULL,
        create_user_in         IN opinion.create_user%TYPE DEFAULT NULL,
        create_time_in         IN opinion.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN opinion.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN opinion.update_user%TYPE DEFAULT NULL,
        update_time_in         IN opinion.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN opinion.update_institution%TYPE DEFAULT NULL,
        flg_type_in            IN opinion.flg_type%TYPE DEFAULT NULL,
        id_management_level_in IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_episode_answer_in   IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_patient_in          IN opinion.id_patient%TYPE DEFAULT NULL,
        dt_last_update_in      IN opinion.dt_last_update%TYPE DEFAULT NULL,
        id_opinion_type_in     IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        dt_approved_in         IN opinion.dt_approved%TYPE DEFAULT NULL,
        id_prof_approved_in    IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        notes_in               IN opinion.notes%TYPE DEFAULT NULL,
        id_episode_approval_in IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        flg_auto_follow_up_in  IN opinion.flg_auto_follow_up%TYPE DEFAULT 'N',
        id_prof_cancel_in      IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        flg_priority_in        IN opinion.flg_priority%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) RETURN opinion.id_opinion%TYPE IS
        l_pky    opinion.id_opinion%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_opinion_in          => l_pky,
            id_episode_in          => id_episode_in,
            flg_state_in           => flg_state_in,
            desc_problem_in        => desc_problem_in,
            id_prof_questions_in   => id_prof_questions_in,
            id_prof_questioned_in  => id_prof_questioned_in,
            id_speciality_in       => id_speciality_in,
            notes_cancel_in        => notes_cancel_in,
            dt_problem_tstz_in     => dt_problem_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            status_flg_in          => status_flg_in,
            status_icon_in         => status_icon_in,
            status_msg_in          => status_msg_in,
            status_str_in          => status_str_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_type_in            => flg_type_in,
            id_management_level_in => id_management_level_in,
            id_episode_answer_in   => id_episode_answer_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_patient_in          => id_patient_in,
            dt_last_update_in      => dt_last_update_in,
            id_opinion_type_in     => id_opinion_type_in,
            id_clinical_service_in => id_clinical_service_in,
            dt_approved_in         => dt_approved_in,
            id_prof_approved_in    => id_prof_approved_in,
            notes_in               => notes_in,
            id_episode_approval_in => id_episode_approval_in,
            flg_auto_follow_up_in  => flg_auto_follow_up_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            flg_priority_in        => flg_priority_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_opinion_in          IN opinion.id_opinion%TYPE,
        id_episode_in          IN opinion.id_episode%TYPE DEFAULT NULL,
        flg_state_in           IN opinion.flg_state%TYPE DEFAULT NULL,
        desc_problem_in        IN opinion.desc_problem%TYPE DEFAULT NULL,
        id_prof_questions_in   IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questioned_in  IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_speciality_in       IN opinion.id_speciality%TYPE DEFAULT NULL,
        notes_cancel_in        IN opinion.notes_cancel%TYPE DEFAULT NULL,
        dt_problem_tstz_in     IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        status_flg_in          IN opinion.status_flg%TYPE DEFAULT NULL,
        status_icon_in         IN opinion.status_icon%TYPE DEFAULT NULL,
        status_msg_in          IN opinion.status_msg%TYPE DEFAULT NULL,
        status_str_in          IN opinion.status_str%TYPE DEFAULT NULL,
        create_user_in         IN opinion.create_user%TYPE DEFAULT NULL,
        create_time_in         IN opinion.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN opinion.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN opinion.update_user%TYPE DEFAULT NULL,
        update_time_in         IN opinion.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN opinion.update_institution%TYPE DEFAULT NULL,
        flg_type_in            IN opinion.flg_type%TYPE DEFAULT NULL,
        id_management_level_in IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_episode_answer_in   IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_patient_in          IN opinion.id_patient%TYPE DEFAULT NULL,
        dt_last_update_in      IN opinion.dt_last_update%TYPE DEFAULT NULL,
        id_opinion_type_in     IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        dt_approved_in         IN opinion.dt_approved%TYPE DEFAULT NULL,
        id_prof_approved_in    IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        notes_in               IN opinion.notes%TYPE DEFAULT NULL,
        id_episode_approval_in IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        flg_auto_follow_up_in  IN opinion.flg_auto_follow_up%TYPE DEFAULT 'N',
        id_prof_cancel_in      IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        flg_priority_in        IN opinion.flg_priority%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := FALSE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO opinion
            (id_opinion,
             id_episode,
             flg_state,
             desc_problem,
             id_prof_questions,
             id_prof_questioned,
             id_speciality,
             notes_cancel,
             dt_problem_tstz,
             dt_cancel_tstz,
             status_flg,
             status_icon,
             status_msg,
             status_str,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_type,
             id_management_level,
             id_episode_answer,
             id_cancel_reason,
             id_patient,
             dt_last_update,
             id_opinion_type,
             id_clinical_service,
             dt_approved,
             id_prof_approved,
             notes,
             id_episode_approval,
             flg_auto_follow_up,
             id_prof_cancel,
             flg_priority)
        VALUES
            (id_opinion_in,
             id_episode_in,
             flg_state_in,
             desc_problem_in,
             id_prof_questions_in,
             id_prof_questioned_in,
             id_speciality_in,
             notes_cancel_in,
             dt_problem_tstz_in,
             dt_cancel_tstz_in,
             status_flg_in,
             status_icon_in,
             status_msg_in,
             status_str_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_type_in,
             id_management_level_in,
             id_episode_answer_in,
             id_cancel_reason_in,
             id_patient_in,
             dt_last_update_in,
             id_opinion_type_in,
             id_clinical_service_in,
             dt_approved_in,
             id_prof_approved_in,
             notes_in,
             id_episode_approval_in,
             flg_auto_follow_up_in,
             id_prof_cancel_in,
             flg_priority_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_opinion_in          IN opinion.id_opinion%TYPE,
        id_episode_in          IN opinion.id_episode%TYPE DEFAULT NULL,
        flg_state_in           IN opinion.flg_state%TYPE DEFAULT NULL,
        desc_problem_in        IN opinion.desc_problem%TYPE DEFAULT NULL,
        id_prof_questions_in   IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questioned_in  IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_speciality_in       IN opinion.id_speciality%TYPE DEFAULT NULL,
        notes_cancel_in        IN opinion.notes_cancel%TYPE DEFAULT NULL,
        dt_problem_tstz_in     IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        status_flg_in          IN opinion.status_flg%TYPE DEFAULT NULL,
        status_icon_in         IN opinion.status_icon%TYPE DEFAULT NULL,
        status_msg_in          IN opinion.status_msg%TYPE DEFAULT NULL,
        status_str_in          IN opinion.status_str%TYPE DEFAULT NULL,
        create_user_in         IN opinion.create_user%TYPE DEFAULT NULL,
        create_time_in         IN opinion.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN opinion.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN opinion.update_user%TYPE DEFAULT NULL,
        update_time_in         IN opinion.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN opinion.update_institution%TYPE DEFAULT NULL,
        flg_type_in            IN opinion.flg_type%TYPE DEFAULT NULL,
        id_management_level_in IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_episode_answer_in   IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_patient_in          IN opinion.id_patient%TYPE DEFAULT NULL,
        dt_last_update_in      IN opinion.dt_last_update%TYPE DEFAULT NULL,
        id_opinion_type_in     IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        dt_approved_in         IN opinion.dt_approved%TYPE DEFAULT NULL,
        id_prof_approved_in    IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        notes_in               IN opinion.notes%TYPE DEFAULT NULL,
        id_episode_approval_in IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        flg_auto_follow_up_in  IN opinion.flg_auto_follow_up%TYPE DEFAULT 'N',
        id_prof_cancel_in      IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        flg_priority_in        IN opinion.flg_priority%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_opinion_in          => id_opinion_in,
            id_episode_in          => id_episode_in,
            flg_state_in           => flg_state_in,
            desc_problem_in        => desc_problem_in,
            id_prof_questions_in   => id_prof_questions_in,
            id_prof_questioned_in  => id_prof_questioned_in,
            id_speciality_in       => id_speciality_in,
            notes_cancel_in        => notes_cancel_in,
            dt_problem_tstz_in     => dt_problem_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            status_flg_in          => status_flg_in,
            status_icon_in         => status_icon_in,
            status_msg_in          => status_msg_in,
            status_str_in          => status_str_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_type_in            => flg_type_in,
            id_management_level_in => id_management_level_in,
            id_episode_answer_in   => id_episode_answer_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_patient_in          => id_patient_in,
            dt_last_update_in      => dt_last_update_in,
            id_opinion_type_in     => id_opinion_type_in,
            id_clinical_service_in => id_clinical_service_in,
            dt_approved_in         => dt_approved_in,
            id_prof_approved_in    => id_prof_approved_in,
            notes_in               => notes_in,
            id_episode_approval_in => id_episode_approval_in,
            flg_auto_follow_up_in  => flg_auto_follow_up_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            flg_priority_in        => flg_priority_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN opinion%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_rec opinion%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_opinion := next_key(sequence_in);
        END IF;
    
        ins(id_opinion_in          => l_rec.id_opinion,
            id_episode_in          => l_rec.id_episode,
            flg_state_in           => l_rec.flg_state,
            desc_problem_in        => l_rec.desc_problem,
            id_prof_questions_in   => l_rec.id_prof_questions,
            id_prof_questioned_in  => l_rec.id_prof_questioned,
            id_speciality_in       => l_rec.id_speciality,
            notes_cancel_in        => l_rec.notes_cancel,
            dt_problem_tstz_in     => l_rec.dt_problem_tstz,
            dt_cancel_tstz_in      => l_rec.dt_cancel_tstz,
            status_flg_in          => l_rec.status_flg,
            status_icon_in         => l_rec.status_icon,
            status_msg_in          => l_rec.status_msg,
            status_str_in          => l_rec.status_str,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            flg_type_in            => l_rec.flg_type,
            id_management_level_in => l_rec.id_management_level,
            id_episode_answer_in   => l_rec.id_episode_answer,
            id_cancel_reason_in    => l_rec.id_cancel_reason,
            id_patient_in          => l_rec.id_patient,
            dt_last_update_in      => l_rec.dt_last_update,
            id_opinion_type_in     => l_rec.id_opinion_type,
            id_clinical_service_in => l_rec.id_clinical_service,
            dt_approved_in         => l_rec.dt_approved,
            id_prof_approved_in    => l_rec.id_prof_approved,
            notes_in               => l_rec.notes,
            id_episode_approval_in => l_rec.id_episode_approval,
            flg_auto_follow_up_in  => l_rec.flg_auto_follow_up,
            id_prof_cancel_in      => l_rec.id_prof_cancel,
            flg_priority_in        => l_rec.flg_priority,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN opinion%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN opinion_tc,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO opinion
                    (id_opinion,
                     id_episode,
                     flg_state,
                     desc_problem,
                     id_prof_questions,
                     id_prof_questioned,
                     id_speciality,
                     notes_cancel,
                     dt_problem_tstz,
                     dt_cancel_tstz,
                     status_flg,
                     status_icon,
                     status_msg,
                     status_str,
                     flg_type,
                     id_management_level,
                     id_episode_answer,
                     id_cancel_reason,
                     id_patient,
                     dt_last_update,
                     id_opinion_type,
                     id_clinical_service,
                     dt_approved,
                     id_prof_approved,
                     notes,
                     id_episode_approval,
                     flg_auto_follow_up,
                     id_prof_cancel,
                     flg_priority)
                VALUES
                    (rows_in(indx).id_opinion,
                     rows_in(indx).id_episode,
                     rows_in(indx).flg_state,
                     rows_in(indx).desc_problem,
                     rows_in(indx).id_prof_questions,
                     rows_in(indx).id_prof_questioned,
                     rows_in(indx).id_speciality,
                     rows_in(indx).notes_cancel,
                     rows_in(indx).dt_problem_tstz,
                     rows_in(indx).dt_cancel_tstz,
                     rows_in(indx).status_flg,
                     rows_in(indx).status_icon,
                     rows_in(indx).status_msg,
                     rows_in(indx).status_str,
                     rows_in(indx).flg_type,
                     rows_in(indx).id_management_level,
                     rows_in(indx).id_episode_answer,
                     rows_in(indx).id_cancel_reason,
                     rows_in(indx).id_patient,
                     rows_in(indx).dt_last_update,
                     rows_in(indx).id_opinion_type,
                     rows_in(indx).id_clinical_service,
                     rows_in(indx).dt_approved,
                     rows_in(indx).id_prof_approved,
                     rows_in(indx).notes,
                     rows_in(indx).id_episode_approval,
                     rows_in(indx).flg_auto_follow_up,
                     rows_in(indx).id_prof_cancel,
                     rows_in(indx).flg_priority)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN opinion_tc,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_opinion_in           IN opinion.id_opinion%TYPE,
        id_episode_in           IN opinion.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        flg_state_in            IN opinion.flg_state%TYPE DEFAULT NULL,
        flg_state_nin           IN BOOLEAN := TRUE,
        desc_problem_in         IN opinion.desc_problem%TYPE DEFAULT NULL,
        desc_problem_nin        IN BOOLEAN := TRUE,
        id_prof_questions_in    IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questions_nin   IN BOOLEAN := TRUE,
        id_prof_questioned_in   IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_prof_questioned_nin  IN BOOLEAN := TRUE,
        id_speciality_in        IN opinion.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin       IN BOOLEAN := TRUE,
        notes_cancel_in         IN opinion.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        dt_problem_tstz_in      IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_problem_tstz_nin     IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        status_flg_in           IN opinion.status_flg%TYPE DEFAULT NULL,
        status_flg_nin          IN BOOLEAN := TRUE,
        status_icon_in          IN opinion.status_icon%TYPE DEFAULT NULL,
        status_icon_nin         IN BOOLEAN := TRUE,
        status_msg_in           IN opinion.status_msg%TYPE DEFAULT NULL,
        status_msg_nin          IN BOOLEAN := TRUE,
        status_str_in           IN opinion.status_str%TYPE DEFAULT NULL,
        status_str_nin          IN BOOLEAN := TRUE,
        create_user_in          IN opinion.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN opinion.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN opinion.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN opinion.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN opinion.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN opinion.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_type_in             IN opinion.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        id_management_level_in  IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_management_level_nin IN BOOLEAN := TRUE,
        id_episode_answer_in    IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_episode_answer_nin   IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        id_patient_in           IN opinion.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        dt_last_update_in       IN opinion.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        id_opinion_type_in      IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_opinion_type_nin     IN BOOLEAN := TRUE,
        id_clinical_service_in  IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin IN BOOLEAN := TRUE,
        dt_approved_in          IN opinion.dt_approved%TYPE DEFAULT NULL,
        dt_approved_nin         IN BOOLEAN := TRUE,
        id_prof_approved_in     IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        id_prof_approved_nin    IN BOOLEAN := TRUE,
        notes_in                IN opinion.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_episode_approval_in  IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        id_episode_approval_nin IN BOOLEAN := TRUE,
        flg_auto_follow_up_in   IN opinion.flg_auto_follow_up%TYPE DEFAULT NULL,
        flg_auto_follow_up_nin  IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        flg_priority_in         IN opinion.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin        IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := FALSE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_episode_n          NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_state_n           NUMBER(1) := sys.diutil.bool_to_int(flg_state_nin);
        l_desc_problem_n        NUMBER(1) := sys.diutil.bool_to_int(desc_problem_nin);
        l_id_prof_questions_n   NUMBER(1) := sys.diutil.bool_to_int(id_prof_questions_nin);
        l_id_prof_questioned_n  NUMBER(1) := sys.diutil.bool_to_int(id_prof_questioned_nin);
        l_id_speciality_n       NUMBER(1) := sys.diutil.bool_to_int(id_speciality_nin);
        l_notes_cancel_n        NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_dt_problem_tstz_n     NUMBER(1) := sys.diutil.bool_to_int(dt_problem_tstz_nin);
        l_dt_cancel_tstz_n      NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_status_flg_n          NUMBER(1) := sys.diutil.bool_to_int(status_flg_nin);
        l_status_icon_n         NUMBER(1) := sys.diutil.bool_to_int(status_icon_nin);
        l_status_msg_n          NUMBER(1) := sys.diutil.bool_to_int(status_msg_nin);
        l_status_str_n          NUMBER(1) := sys.diutil.bool_to_int(status_str_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_type_n            NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_id_management_level_n NUMBER(1) := sys.diutil.bool_to_int(id_management_level_nin);
        l_id_episode_answer_n   NUMBER(1) := sys.diutil.bool_to_int(id_episode_answer_nin);
        l_id_cancel_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_id_patient_n          NUMBER(1) := sys.diutil.bool_to_int(id_patient_nin);
        l_dt_last_update_n      NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_opinion_type_n     NUMBER(1) := sys.diutil.bool_to_int(id_opinion_type_nin);
        l_id_clinical_service_n NUMBER(1) := sys.diutil.bool_to_int(id_clinical_service_nin);
        l_dt_approved_n         NUMBER(1) := sys.diutil.bool_to_int(dt_approved_nin);
        l_id_prof_approved_n    NUMBER(1) := sys.diutil.bool_to_int(id_prof_approved_nin);
        l_notes_n               NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_id_episode_approval_n NUMBER(1) := sys.diutil.bool_to_int(id_episode_approval_nin);
        l_flg_auto_follow_up_n  NUMBER(1) := sys.diutil.bool_to_int(flg_auto_follow_up_nin);
        l_id_prof_cancel_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_flg_priority_n        NUMBER(1) := sys.diutil.bool_to_int(flg_priority_nin);
    BEGIN
    
        UPDATE opinion
           SET id_episode          = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               flg_state           = decode(l_flg_state_n, 0, flg_state_in, nvl(flg_state_in, flg_state)),
               desc_problem        = decode(l_desc_problem_n, 0, desc_problem_in, nvl(desc_problem_in, desc_problem)),
               id_prof_questions   = decode(l_id_prof_questions_n,
                                            0,
                                            id_prof_questions_in,
                                            nvl(id_prof_questions_in, id_prof_questions)),
               id_prof_questioned  = decode(l_id_prof_questioned_n,
                                            0,
                                            id_prof_questioned_in,
                                            nvl(id_prof_questioned_in, id_prof_questioned)),
               id_speciality       = decode(l_id_speciality_n, 0, id_speciality_in, nvl(id_speciality_in, id_speciality)),
               notes_cancel        = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               dt_problem_tstz     = decode(l_dt_problem_tstz_n,
                                            0,
                                            dt_problem_tstz_in,
                                            nvl(dt_problem_tstz_in, dt_problem_tstz)),
               dt_cancel_tstz      = decode(l_dt_cancel_tstz_n,
                                            0,
                                            dt_cancel_tstz_in,
                                            nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               status_flg          = decode(l_status_flg_n, 0, status_flg_in, nvl(status_flg_in, status_flg)),
               status_icon         = decode(l_status_icon_n, 0, status_icon_in, nvl(status_icon_in, status_icon)),
               status_msg          = decode(l_status_msg_n, 0, status_msg_in, nvl(status_msg_in, status_msg)),
               status_str          = decode(l_status_str_n, 0, status_str_in, nvl(status_str_in, status_str)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution)),
               flg_type            = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               id_management_level = decode(l_id_management_level_n,
                                            0,
                                            id_management_level_in,
                                            nvl(id_management_level_in, id_management_level)),
               id_episode_answer   = decode(l_id_episode_answer_n,
                                            0,
                                            id_episode_answer_in,
                                            nvl(id_episode_answer_in, id_episode_answer)),
               id_cancel_reason    = decode(l_id_cancel_reason_n,
                                            0,
                                            id_cancel_reason_in,
                                            nvl(id_cancel_reason_in, id_cancel_reason)),
               id_patient          = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               dt_last_update      = decode(l_dt_last_update_n,
                                            0,
                                            dt_last_update_in,
                                            nvl(dt_last_update_in, dt_last_update)),
               id_opinion_type     = decode(l_id_opinion_type_n,
                                            0,
                                            id_opinion_type_in,
                                            nvl(id_opinion_type_in, id_opinion_type)),
               id_clinical_service = decode(l_id_clinical_service_n,
                                            0,
                                            id_clinical_service_in,
                                            nvl(id_clinical_service_in, id_clinical_service)),
               dt_approved         = decode(l_dt_approved_n, 0, dt_approved_in, nvl(dt_approved_in, dt_approved)),
               id_prof_approved    = decode(l_id_prof_approved_n,
                                            0,
                                            id_prof_approved_in,
                                            nvl(id_prof_approved_in, id_prof_approved)),
               notes               = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_episode_approval = decode(l_id_episode_approval_n,
                                            0,
                                            id_episode_approval_in,
                                            nvl(id_episode_approval_in, id_episode_approval)),
               flg_auto_follow_up  = decode(l_flg_auto_follow_up_n,
                                            0,
                                            flg_auto_follow_up_in,
                                            nvl(flg_auto_follow_up_in, flg_auto_follow_up)),
               id_prof_cancel      = decode(l_id_prof_cancel_n,
                                            0,
                                            id_prof_cancel_in,
                                            nvl(id_prof_cancel_in, id_prof_cancel)),
               flg_priority        = decode(l_flg_priority_n, 0, flg_priority_in, nvl(flg_priority_in, flg_priority))
         WHERE id_opinion = id_opinion_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_opinion_in           IN opinion.id_opinion%TYPE,
        id_episode_in           IN opinion.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        flg_state_in            IN opinion.flg_state%TYPE DEFAULT NULL,
        flg_state_nin           IN BOOLEAN := TRUE,
        desc_problem_in         IN opinion.desc_problem%TYPE DEFAULT NULL,
        desc_problem_nin        IN BOOLEAN := TRUE,
        id_prof_questions_in    IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questions_nin   IN BOOLEAN := TRUE,
        id_prof_questioned_in   IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_prof_questioned_nin  IN BOOLEAN := TRUE,
        id_speciality_in        IN opinion.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin       IN BOOLEAN := TRUE,
        notes_cancel_in         IN opinion.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        dt_problem_tstz_in      IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_problem_tstz_nin     IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        status_flg_in           IN opinion.status_flg%TYPE DEFAULT NULL,
        status_flg_nin          IN BOOLEAN := TRUE,
        status_icon_in          IN opinion.status_icon%TYPE DEFAULT NULL,
        status_icon_nin         IN BOOLEAN := TRUE,
        status_msg_in           IN opinion.status_msg%TYPE DEFAULT NULL,
        status_msg_nin          IN BOOLEAN := TRUE,
        status_str_in           IN opinion.status_str%TYPE DEFAULT NULL,
        status_str_nin          IN BOOLEAN := TRUE,
        create_user_in          IN opinion.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN opinion.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN opinion.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN opinion.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN opinion.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN opinion.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_type_in             IN opinion.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        id_management_level_in  IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_management_level_nin IN BOOLEAN := TRUE,
        id_episode_answer_in    IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_episode_answer_nin   IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        id_patient_in           IN opinion.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        dt_last_update_in       IN opinion.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        id_opinion_type_in      IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_opinion_type_nin     IN BOOLEAN := TRUE,
        id_clinical_service_in  IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin IN BOOLEAN := TRUE,
        dt_approved_in          IN opinion.dt_approved%TYPE DEFAULT NULL,
        dt_approved_nin         IN BOOLEAN := TRUE,
        id_prof_approved_in     IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        id_prof_approved_nin    IN BOOLEAN := TRUE,
        notes_in                IN opinion.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_episode_approval_in  IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        id_episode_approval_nin IN BOOLEAN := TRUE,
        flg_auto_follow_up_in   IN opinion.flg_auto_follow_up%TYPE DEFAULT NULL,
        flg_auto_follow_up_nin  IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        flg_priority_in         IN opinion.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin        IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_opinion_in           => id_opinion_in,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            flg_state_in            => flg_state_in,
            flg_state_nin           => flg_state_nin,
            desc_problem_in         => desc_problem_in,
            desc_problem_nin        => desc_problem_nin,
            id_prof_questions_in    => id_prof_questions_in,
            id_prof_questions_nin   => id_prof_questions_nin,
            id_prof_questioned_in   => id_prof_questioned_in,
            id_prof_questioned_nin  => id_prof_questioned_nin,
            id_speciality_in        => id_speciality_in,
            id_speciality_nin       => id_speciality_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            dt_problem_tstz_in      => dt_problem_tstz_in,
            dt_problem_tstz_nin     => dt_problem_tstz_nin,
            dt_cancel_tstz_in       => dt_cancel_tstz_in,
            dt_cancel_tstz_nin      => dt_cancel_tstz_nin,
            status_flg_in           => status_flg_in,
            status_flg_nin          => status_flg_nin,
            status_icon_in          => status_icon_in,
            status_icon_nin         => status_icon_nin,
            status_msg_in           => status_msg_in,
            status_msg_nin          => status_msg_nin,
            status_str_in           => status_str_in,
            status_str_nin          => status_str_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            flg_type_in             => flg_type_in,
            flg_type_nin            => flg_type_nin,
            id_management_level_in  => id_management_level_in,
            id_management_level_nin => id_management_level_nin,
            id_episode_answer_in    => id_episode_answer_in,
            id_episode_answer_nin   => id_episode_answer_nin,
            id_cancel_reason_in     => id_cancel_reason_in,
            id_cancel_reason_nin    => id_cancel_reason_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            dt_last_update_in       => dt_last_update_in,
            dt_last_update_nin      => dt_last_update_nin,
            id_opinion_type_in      => id_opinion_type_in,
            id_opinion_type_nin     => id_opinion_type_nin,
            id_clinical_service_in  => id_clinical_service_in,
            id_clinical_service_nin => id_clinical_service_nin,
            dt_approved_in          => dt_approved_in,
            dt_approved_nin         => dt_approved_nin,
            id_prof_approved_in     => id_prof_approved_in,
            id_prof_approved_nin    => id_prof_approved_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            id_episode_approval_in  => id_episode_approval_in,
            id_episode_approval_nin => id_episode_approval_nin,
            flg_auto_follow_up_in   => flg_auto_follow_up_in,
            flg_auto_follow_up_nin  => flg_auto_follow_up_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            flg_priority_in         => flg_priority_in,
            flg_priority_nin        => flg_priority_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in           IN opinion.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        flg_state_in            IN opinion.flg_state%TYPE DEFAULT NULL,
        flg_state_nin           IN BOOLEAN := TRUE,
        desc_problem_in         IN opinion.desc_problem%TYPE DEFAULT NULL,
        desc_problem_nin        IN BOOLEAN := TRUE,
        id_prof_questions_in    IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questions_nin   IN BOOLEAN := TRUE,
        id_prof_questioned_in   IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_prof_questioned_nin  IN BOOLEAN := TRUE,
        id_speciality_in        IN opinion.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin       IN BOOLEAN := TRUE,
        notes_cancel_in         IN opinion.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        dt_problem_tstz_in      IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_problem_tstz_nin     IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        status_flg_in           IN opinion.status_flg%TYPE DEFAULT NULL,
        status_flg_nin          IN BOOLEAN := TRUE,
        status_icon_in          IN opinion.status_icon%TYPE DEFAULT NULL,
        status_icon_nin         IN BOOLEAN := TRUE,
        status_msg_in           IN opinion.status_msg%TYPE DEFAULT NULL,
        status_msg_nin          IN BOOLEAN := TRUE,
        status_str_in           IN opinion.status_str%TYPE DEFAULT NULL,
        status_str_nin          IN BOOLEAN := TRUE,
        create_user_in          IN opinion.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN opinion.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN opinion.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN opinion.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN opinion.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN opinion.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_type_in             IN opinion.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        id_management_level_in  IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_management_level_nin IN BOOLEAN := TRUE,
        id_episode_answer_in    IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_episode_answer_nin   IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        id_patient_in           IN opinion.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        dt_last_update_in       IN opinion.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        id_opinion_type_in      IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_opinion_type_nin     IN BOOLEAN := TRUE,
        id_clinical_service_in  IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin IN BOOLEAN := TRUE,
        dt_approved_in          IN opinion.dt_approved%TYPE DEFAULT NULL,
        dt_approved_nin         IN BOOLEAN := TRUE,
        id_prof_approved_in     IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        id_prof_approved_nin    IN BOOLEAN := TRUE,
        notes_in                IN opinion.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_episode_approval_in  IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        id_episode_approval_nin IN BOOLEAN := TRUE,
        flg_auto_follow_up_in   IN opinion.flg_auto_follow_up%TYPE DEFAULT NULL,
        flg_auto_follow_up_nin  IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        flg_priority_in         IN opinion.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin        IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := FALSE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_episode_n          NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_state_n           NUMBER(1) := sys.diutil.bool_to_int(flg_state_nin);
        l_desc_problem_n        NUMBER(1) := sys.diutil.bool_to_int(desc_problem_nin);
        l_id_prof_questions_n   NUMBER(1) := sys.diutil.bool_to_int(id_prof_questions_nin);
        l_id_prof_questioned_n  NUMBER(1) := sys.diutil.bool_to_int(id_prof_questioned_nin);
        l_id_speciality_n       NUMBER(1) := sys.diutil.bool_to_int(id_speciality_nin);
        l_notes_cancel_n        NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_dt_problem_tstz_n     NUMBER(1) := sys.diutil.bool_to_int(dt_problem_tstz_nin);
        l_dt_cancel_tstz_n      NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_status_flg_n          NUMBER(1) := sys.diutil.bool_to_int(status_flg_nin);
        l_status_icon_n         NUMBER(1) := sys.diutil.bool_to_int(status_icon_nin);
        l_status_msg_n          NUMBER(1) := sys.diutil.bool_to_int(status_msg_nin);
        l_status_str_n          NUMBER(1) := sys.diutil.bool_to_int(status_str_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_type_n            NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_id_management_level_n NUMBER(1) := sys.diutil.bool_to_int(id_management_level_nin);
        l_id_episode_answer_n   NUMBER(1) := sys.diutil.bool_to_int(id_episode_answer_nin);
        l_id_cancel_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_id_patient_n          NUMBER(1) := sys.diutil.bool_to_int(id_patient_nin);
        l_dt_last_update_n      NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_opinion_type_n     NUMBER(1) := sys.diutil.bool_to_int(id_opinion_type_nin);
        l_id_clinical_service_n NUMBER(1) := sys.diutil.bool_to_int(id_clinical_service_nin);
        l_dt_approved_n         NUMBER(1) := sys.diutil.bool_to_int(dt_approved_nin);
        l_id_prof_approved_n    NUMBER(1) := sys.diutil.bool_to_int(id_prof_approved_nin);
        l_notes_n               NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_id_episode_approval_n NUMBER(1) := sys.diutil.bool_to_int(id_episode_approval_nin);
        l_flg_auto_follow_up_n  NUMBER(1) := sys.diutil.bool_to_int(flg_auto_follow_up_nin);
        l_id_prof_cancel_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_flg_priority_n        NUMBER(1) := sys.diutil.bool_to_int(flg_priority_nin);
    BEGIN
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_state_n           := sys.diutil.bool_to_int(flg_state_nin);
        l_desc_problem_n        := sys.diutil.bool_to_int(desc_problem_nin);
        l_id_prof_questions_n   := sys.diutil.bool_to_int(id_prof_questions_nin);
        l_id_prof_questioned_n  := sys.diutil.bool_to_int(id_prof_questioned_nin);
        l_id_speciality_n       := sys.diutil.bool_to_int(id_speciality_nin);
        l_notes_cancel_n        := sys.diutil.bool_to_int(notes_cancel_nin);
        l_dt_problem_tstz_n     := sys.diutil.bool_to_int(dt_problem_tstz_nin);
        l_dt_cancel_tstz_n      := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_status_flg_n          := sys.diutil.bool_to_int(status_flg_nin);
        l_status_icon_n         := sys.diutil.bool_to_int(status_icon_nin);
        l_status_msg_n          := sys.diutil.bool_to_int(status_msg_nin);
        l_status_str_n          := sys.diutil.bool_to_int(status_str_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_type_n            := sys.diutil.bool_to_int(flg_type_nin);
        l_id_management_level_n := sys.diutil.bool_to_int(id_management_level_nin);
        l_id_episode_answer_n   := sys.diutil.bool_to_int(id_episode_answer_nin);
        l_id_cancel_reason_n    := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_dt_last_update_n      := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_opinion_type_n     := sys.diutil.bool_to_int(id_opinion_type_nin);
        l_id_clinical_service_n := sys.diutil.bool_to_int(id_clinical_service_nin);
        l_dt_approved_n         := sys.diutil.bool_to_int(dt_approved_nin);
        l_id_prof_approved_n    := sys.diutil.bool_to_int(id_prof_approved_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_id_episode_approval_n := sys.diutil.bool_to_int(id_episode_approval_nin);
        l_flg_auto_follow_up_n  := sys.diutil.bool_to_int(flg_auto_follow_up_nin);
        l_id_prof_cancel_n      := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_flg_priority_n        := sys.diutil.bool_to_int(flg_priority_nin);
        l_sql                   := 'UPDATE opinion SET' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                                   ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ',' ||
                                   ' FLG_STATE = decode (' || l_flg_state_n ||
                                   ',0,:FLG_STATE_in, NVL (:FLG_STATE_in, FLG_STATE)) ' || ',' ||
                                   ' DESC_PROBLEM = decode (' || l_desc_problem_n ||
                                   ',0,:DESC_PROBLEM_in, NVL (:DESC_PROBLEM_in, DESC_PROBLEM)) ' || ',' ||
                                   ' ID_PROF_QUESTIONS = decode (' || l_id_prof_questions_n ||
                                   ',0,:ID_PROF_QUESTIONS_in, NVL (:ID_PROF_QUESTIONS_in, ID_PROF_QUESTIONS)) ' || ',' ||
                                   ' ID_PROF_QUESTIONED = decode (' || l_id_prof_questioned_n ||
                                   ',0,:ID_PROF_QUESTIONED_in, NVL (:ID_PROF_QUESTIONED_in, ID_PROF_QUESTIONED)) ' || ',' ||
                                   ' ID_SPECIALITY = decode (' || l_id_speciality_n ||
                                   ',0,:ID_SPECIALITY_in, NVL (:ID_SPECIALITY_in, ID_SPECIALITY)) ' || ',' ||
                                   ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                                   ',0,:NOTES_CANCEL_in, NVL (:NOTES_CANCEL_in, NOTES_CANCEL)) ' || ',' ||
                                   ' DT_PROBLEM_TSTZ = decode (' || l_dt_problem_tstz_n ||
                                   ',0,:DT_PROBLEM_TSTZ_in, NVL (:DT_PROBLEM_TSTZ_in, DT_PROBLEM_TSTZ)) ' || ',' ||
                                   ' DT_CANCEL_TSTZ = decode (' || l_dt_cancel_tstz_n ||
                                   ',0,:DT_CANCEL_TSTZ_in, NVL (:DT_CANCEL_TSTZ_in, DT_CANCEL_TSTZ)) ' || ',' ||
                                   ' STATUS_FLG = decode (' || l_status_flg_n ||
                                   ',0,:STATUS_FLG_in, NVL (:STATUS_FLG_in, STATUS_FLG)) ' || ',' ||
                                   ' STATUS_ICON = decode (' || l_status_icon_n ||
                                   ',0,:STATUS_ICON_in, NVL (:STATUS_ICON_in, STATUS_ICON)) ' || ',' ||
                                   ' STATUS_MSG = decode (' || l_status_msg_n ||
                                   ',0,:STATUS_MSG_in, NVL (:STATUS_MSG_in, STATUS_MSG)) ' || ',' ||
                                   ' STATUS_STR = decode (' || l_status_str_n ||
                                   ',0,:STATUS_STR_in, NVL (:STATUS_STR_in, STATUS_STR)) ' || ',' ||
                                   ' CREATE_USER = decode (' || l_create_user_n ||
                                   ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                   ' CREATE_TIME = decode (' || l_create_time_n ||
                                   ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                   ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                   ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                   ' UPDATE_USER = decode (' || l_update_user_n ||
                                   ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                   ' UPDATE_TIME = decode (' || l_update_time_n ||
                                   ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                   ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                   ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                   ' FLG_TYPE = decode (' || l_flg_type_n ||
                                   ',0,:FLG_TYPE_in, NVL (:FLG_TYPE_in, FLG_TYPE)) ' || ',' ||
                                   ' ID_MANAGEMENT_LEVEL = decode (' || l_id_management_level_n ||
                                   ',0,:ID_MANAGEMENT_LEVEL_in, NVL (:ID_MANAGEMENT_LEVEL_in, ID_MANAGEMENT_LEVEL)) ' || ',' ||
                                   ' ID_EPISODE_ANSWER = decode (' || l_id_episode_answer_n ||
                                   ',0,:ID_EPISODE_ANSWER_in, NVL (:ID_EPISODE_ANSWER_in, ID_EPISODE_ANSWER)) ' || ',' ||
                                   ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                                   ',0,:ID_CANCEL_REASON_in, NVL (:ID_CANCEL_REASON_in, ID_CANCEL_REASON)) ' || ',' ||
                                   ' ID_PATIENT = decode (' || l_id_patient_n ||
                                   ',0,:ID_PATIENT_in, NVL (:ID_PATIENT_in, ID_PATIENT)) ' || ',' ||
                                   ' DT_LAST_UPDATE = decode (' || l_dt_last_update_n ||
                                   ',0,:DT_LAST_UPDATE_in, NVL (:DT_LAST_UPDATE_in, DT_LAST_UPDATE)) ' || ',' ||
                                   ' ID_OPINION_TYPE = decode (' || l_id_opinion_type_n ||
                                   ',0,:ID_OPINION_TYPE_in, NVL (:ID_OPINION_TYPE_in, ID_OPINION_TYPE)) ' || ',' ||
                                   ' ID_CLINICAL_SERVICE = decode (' || l_id_clinical_service_n ||
                                   ',0,:ID_CLINICAL_SERVICE_in, NVL (:ID_CLINICAL_SERVICE_in, ID_CLINICAL_SERVICE)) ' || ',' ||
                                   ' DT_APPROVED = decode (' || l_dt_approved_n ||
                                   ',0,:DT_APPROVED_in, NVL (:DT_APPROVED_in, DT_APPROVED)) ' || ',' ||
                                   ' ID_PROF_APPROVED = decode (' || l_id_prof_approved_n ||
                                   ',0,:ID_PROF_APPROVED_in, NVL (:ID_PROF_APPROVED_in, ID_PROF_APPROVED)) ' || ',' ||
                                   ' NOTES = decode (' || l_notes_n || ',0,:NOTES_in, NVL (:NOTES_in, NOTES)) ' || ',' ||
                                   ' ID_EPISODE_APPROVAL = decode (' || l_id_episode_approval_n ||
                                   ',0,:ID_EPISODE_APPROVAL_in, NVL (:ID_EPISODE_APPROVAL_in, ID_EPISODE_APPROVAL)) ' || ',' ||
                                   ' FLG_AUTO_FOLLOW_UP = decode (' || l_flg_auto_follow_up_n ||
                                   ',0,:FLG_AUTO_FOLLOW_UP_in, NVL (:FLG_AUTO_FOLLOW_UP_in, FLG_AUTO_FOLLOW_UP)) ' || ',' ||
                                   ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                                   ',0,:ID_PROF_CANCEL_in, NVL (:ID_PROF_CANCEL_in, ID_PROF_CANCEL)) ' || ',' ||
                                   ' FLG_PRIORITY = decode (' || l_flg_priority_n ||
                                   ',0,:FLG_PRIORITY_in, NVL (:FLG_PRIORITY_in, FLG_PRIORITY)) ' || ' where ' ||
                                   nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, flg_state_in, desc_problem_in, id_prof_questions_in, id_prof_questioned_in, id_speciality_in, notes_cancel_in, dt_problem_tstz_in, dt_cancel_tstz_in, status_flg_in, status_icon_in, status_msg_in, status_str_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_type_in, id_management_level_in, id_episode_answer_in, id_cancel_reason_in, id_patient_in, dt_last_update_in, id_opinion_type_in, id_clinical_service_in, dt_approved_in, id_prof_approved_in, notes_in, id_episode_approval_in, flg_auto_follow_up_in, id_prof_cancel_in, flg_priority_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in           IN opinion.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        flg_state_in            IN opinion.flg_state%TYPE DEFAULT NULL,
        flg_state_nin           IN BOOLEAN := TRUE,
        desc_problem_in         IN opinion.desc_problem%TYPE DEFAULT NULL,
        desc_problem_nin        IN BOOLEAN := TRUE,
        id_prof_questions_in    IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questions_nin   IN BOOLEAN := TRUE,
        id_prof_questioned_in   IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_prof_questioned_nin  IN BOOLEAN := TRUE,
        id_speciality_in        IN opinion.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin       IN BOOLEAN := TRUE,
        notes_cancel_in         IN opinion.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        dt_problem_tstz_in      IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_problem_tstz_nin     IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        status_flg_in           IN opinion.status_flg%TYPE DEFAULT NULL,
        status_flg_nin          IN BOOLEAN := TRUE,
        status_icon_in          IN opinion.status_icon%TYPE DEFAULT NULL,
        status_icon_nin         IN BOOLEAN := TRUE,
        status_msg_in           IN opinion.status_msg%TYPE DEFAULT NULL,
        status_msg_nin          IN BOOLEAN := TRUE,
        status_str_in           IN opinion.status_str%TYPE DEFAULT NULL,
        status_str_nin          IN BOOLEAN := TRUE,
        create_user_in          IN opinion.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN opinion.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN opinion.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN opinion.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN opinion.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN opinion.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_type_in             IN opinion.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        id_management_level_in  IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_management_level_nin IN BOOLEAN := TRUE,
        id_episode_answer_in    IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_episode_answer_nin   IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        id_patient_in           IN opinion.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        dt_last_update_in       IN opinion.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        id_opinion_type_in      IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_opinion_type_nin     IN BOOLEAN := TRUE,
        id_clinical_service_in  IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin IN BOOLEAN := TRUE,
        dt_approved_in          IN opinion.dt_approved%TYPE DEFAULT NULL,
        dt_approved_nin         IN BOOLEAN := TRUE,
        id_prof_approved_in     IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        id_prof_approved_nin    IN BOOLEAN := TRUE,
        notes_in                IN opinion.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_episode_approval_in  IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        id_episode_approval_nin IN BOOLEAN := TRUE,
        flg_auto_follow_up_in   IN opinion.flg_auto_follow_up%TYPE DEFAULT NULL,
        flg_auto_follow_up_nin  IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        flg_priority_in         IN opinion.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin        IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            flg_state_in            => flg_state_in,
            flg_state_nin           => flg_state_nin,
            desc_problem_in         => desc_problem_in,
            desc_problem_nin        => desc_problem_nin,
            id_prof_questions_in    => id_prof_questions_in,
            id_prof_questions_nin   => id_prof_questions_nin,
            id_prof_questioned_in   => id_prof_questioned_in,
            id_prof_questioned_nin  => id_prof_questioned_nin,
            id_speciality_in        => id_speciality_in,
            id_speciality_nin       => id_speciality_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            dt_problem_tstz_in      => dt_problem_tstz_in,
            dt_problem_tstz_nin     => dt_problem_tstz_nin,
            dt_cancel_tstz_in       => dt_cancel_tstz_in,
            dt_cancel_tstz_nin      => dt_cancel_tstz_nin,
            status_flg_in           => status_flg_in,
            status_flg_nin          => status_flg_nin,
            status_icon_in          => status_icon_in,
            status_icon_nin         => status_icon_nin,
            status_msg_in           => status_msg_in,
            status_msg_nin          => status_msg_nin,
            status_str_in           => status_str_in,
            status_str_nin          => status_str_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            flg_type_in             => flg_type_in,
            flg_type_nin            => flg_type_nin,
            id_management_level_in  => id_management_level_in,
            id_management_level_nin => id_management_level_nin,
            id_episode_answer_in    => id_episode_answer_in,
            id_episode_answer_nin   => id_episode_answer_nin,
            id_cancel_reason_in     => id_cancel_reason_in,
            id_cancel_reason_nin    => id_cancel_reason_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            dt_last_update_in       => dt_last_update_in,
            dt_last_update_nin      => dt_last_update_nin,
            id_opinion_type_in      => id_opinion_type_in,
            id_opinion_type_nin     => id_opinion_type_nin,
            id_clinical_service_in  => id_clinical_service_in,
            id_clinical_service_nin => id_clinical_service_nin,
            dt_approved_in          => dt_approved_in,
            dt_approved_nin         => dt_approved_nin,
            id_prof_approved_in     => id_prof_approved_in,
            id_prof_approved_nin    => id_prof_approved_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            id_episode_approval_in  => id_episode_approval_in,
            id_episode_approval_nin => id_episode_approval_nin,
            flg_auto_follow_up_in   => flg_auto_follow_up_in,
            flg_auto_follow_up_nin  => flg_auto_follow_up_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            flg_priority_in         => flg_priority_in,
            flg_priority_nin        => flg_priority_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_opinion_in          IN opinion.id_opinion%TYPE,
        id_episode_in          IN opinion.id_episode%TYPE DEFAULT NULL,
        flg_state_in           IN opinion.flg_state%TYPE DEFAULT NULL,
        desc_problem_in        IN opinion.desc_problem%TYPE DEFAULT NULL,
        id_prof_questions_in   IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questioned_in  IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_speciality_in       IN opinion.id_speciality%TYPE DEFAULT NULL,
        notes_cancel_in        IN opinion.notes_cancel%TYPE DEFAULT NULL,
        dt_problem_tstz_in     IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        status_flg_in          IN opinion.status_flg%TYPE DEFAULT NULL,
        status_icon_in         IN opinion.status_icon%TYPE DEFAULT NULL,
        status_msg_in          IN opinion.status_msg%TYPE DEFAULT NULL,
        status_str_in          IN opinion.status_str%TYPE DEFAULT NULL,
        create_user_in         IN opinion.create_user%TYPE DEFAULT NULL,
        create_time_in         IN opinion.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN opinion.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN opinion.update_user%TYPE DEFAULT NULL,
        update_time_in         IN opinion.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN opinion.update_institution%TYPE DEFAULT NULL,
        flg_type_in            IN opinion.flg_type%TYPE DEFAULT NULL,
        id_management_level_in IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_episode_answer_in   IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_patient_in          IN opinion.id_patient%TYPE DEFAULT NULL,
        dt_last_update_in      IN opinion.dt_last_update%TYPE DEFAULT NULL,
        id_opinion_type_in     IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        dt_approved_in         IN opinion.dt_approved%TYPE DEFAULT NULL,
        id_prof_approved_in    IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        notes_in               IN opinion.notes%TYPE DEFAULT NULL,
        id_episode_approval_in IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        flg_auto_follow_up_in  IN opinion.flg_auto_follow_up%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        flg_priority_in        IN opinion.flg_priority%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := FALSE,
        rows_out               IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_opinion_in          => id_opinion_in,
            id_episode_in          => id_episode_in,
            flg_state_in           => flg_state_in,
            desc_problem_in        => desc_problem_in,
            id_prof_questions_in   => id_prof_questions_in,
            id_prof_questioned_in  => id_prof_questioned_in,
            id_speciality_in       => id_speciality_in,
            notes_cancel_in        => notes_cancel_in,
            dt_problem_tstz_in     => dt_problem_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            status_flg_in          => status_flg_in,
            status_icon_in         => status_icon_in,
            status_msg_in          => status_msg_in,
            status_str_in          => status_str_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_type_in            => flg_type_in,
            id_management_level_in => id_management_level_in,
            id_episode_answer_in   => id_episode_answer_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_patient_in          => id_patient_in,
            dt_last_update_in      => dt_last_update_in,
            id_opinion_type_in     => id_opinion_type_in,
            id_clinical_service_in => id_clinical_service_in,
            dt_approved_in         => dt_approved_in,
            id_prof_approved_in    => id_prof_approved_in,
            notes_in               => notes_in,
            id_episode_approval_in => id_episode_approval_in,
            flg_auto_follow_up_in  => flg_auto_follow_up_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            flg_priority_in        => flg_priority_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_opinion_in          => id_opinion_in,
                id_episode_in          => id_episode_in,
                flg_state_in           => flg_state_in,
                desc_problem_in        => desc_problem_in,
                id_prof_questions_in   => id_prof_questions_in,
                id_prof_questioned_in  => id_prof_questioned_in,
                id_speciality_in       => id_speciality_in,
                notes_cancel_in        => notes_cancel_in,
                dt_problem_tstz_in     => dt_problem_tstz_in,
                dt_cancel_tstz_in      => dt_cancel_tstz_in,
                status_flg_in          => status_flg_in,
                status_icon_in         => status_icon_in,
                status_msg_in          => status_msg_in,
                status_str_in          => status_str_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                flg_type_in            => flg_type_in,
                id_management_level_in => id_management_level_in,
                id_episode_answer_in   => id_episode_answer_in,
                id_cancel_reason_in    => id_cancel_reason_in,
                id_patient_in          => id_patient_in,
                dt_last_update_in      => dt_last_update_in,
                id_opinion_type_in     => id_opinion_type_in,
                id_clinical_service_in => id_clinical_service_in,
                dt_approved_in         => dt_approved_in,
                id_prof_approved_in    => id_prof_approved_in,
                notes_in               => notes_in,
                id_episode_approval_in => id_episode_approval_in,
                flg_auto_follow_up_in  => flg_auto_follow_up_in,
                id_prof_cancel_in      => id_prof_cancel_in,
                flg_priority_in        => flg_priority_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_opinion_in          IN opinion.id_opinion%TYPE,
        id_episode_in          IN opinion.id_episode%TYPE DEFAULT NULL,
        flg_state_in           IN opinion.flg_state%TYPE DEFAULT NULL,
        desc_problem_in        IN opinion.desc_problem%TYPE DEFAULT NULL,
        id_prof_questions_in   IN opinion.id_prof_questions%TYPE DEFAULT NULL,
        id_prof_questioned_in  IN opinion.id_prof_questioned%TYPE DEFAULT NULL,
        id_speciality_in       IN opinion.id_speciality%TYPE DEFAULT NULL,
        notes_cancel_in        IN opinion.notes_cancel%TYPE DEFAULT NULL,
        dt_problem_tstz_in     IN opinion.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN opinion.dt_cancel_tstz%TYPE DEFAULT NULL,
        status_flg_in          IN opinion.status_flg%TYPE DEFAULT NULL,
        status_icon_in         IN opinion.status_icon%TYPE DEFAULT NULL,
        status_msg_in          IN opinion.status_msg%TYPE DEFAULT NULL,
        status_str_in          IN opinion.status_str%TYPE DEFAULT NULL,
        create_user_in         IN opinion.create_user%TYPE DEFAULT NULL,
        create_time_in         IN opinion.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN opinion.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN opinion.update_user%TYPE DEFAULT NULL,
        update_time_in         IN opinion.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN opinion.update_institution%TYPE DEFAULT NULL,
        flg_type_in            IN opinion.flg_type%TYPE DEFAULT NULL,
        id_management_level_in IN opinion.id_management_level%TYPE DEFAULT NULL,
        id_episode_answer_in   IN opinion.id_episode_answer%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN opinion.id_cancel_reason%TYPE DEFAULT NULL,
        id_patient_in          IN opinion.id_patient%TYPE DEFAULT NULL,
        dt_last_update_in      IN opinion.dt_last_update%TYPE DEFAULT NULL,
        id_opinion_type_in     IN opinion.id_opinion_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN opinion.id_clinical_service%TYPE DEFAULT NULL,
        dt_approved_in         IN opinion.dt_approved%TYPE DEFAULT NULL,
        id_prof_approved_in    IN opinion.id_prof_approved%TYPE DEFAULT NULL,
        notes_in               IN opinion.notes%TYPE DEFAULT NULL,
        id_episode_approval_in IN opinion.id_episode_approval%TYPE DEFAULT NULL,
        flg_auto_follow_up_in  IN opinion.flg_auto_follow_up%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN opinion.id_prof_cancel%TYPE DEFAULT NULL,
        flg_priority_in        IN opinion.flg_priority%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_opinion_in,
                id_episode_in,
                flg_state_in,
                desc_problem_in,
                id_prof_questions_in,
                id_prof_questioned_in,
                id_speciality_in,
                notes_cancel_in,
                dt_problem_tstz_in,
                dt_cancel_tstz_in,
                status_flg_in,
                status_icon_in,
                status_msg_in,
                status_str_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_type_in,
                id_management_level_in,
                id_episode_answer_in,
                id_cancel_reason_in,
                id_patient_in,
                dt_last_update_in,
                id_opinion_type_in,
                id_clinical_service_in,
                dt_approved_in,
                id_prof_approved_in,
                notes_in,
                id_episode_approval_in,
                flg_auto_follow_up_in,
                id_prof_cancel_in,
                flg_priority_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN opinion%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_opinion_in          => rec_in.id_opinion,
            id_episode_in          => rec_in.id_episode,
            flg_state_in           => rec_in.flg_state,
            desc_problem_in        => rec_in.desc_problem,
            id_prof_questions_in   => rec_in.id_prof_questions,
            id_prof_questioned_in  => rec_in.id_prof_questioned,
            id_speciality_in       => rec_in.id_speciality,
            notes_cancel_in        => rec_in.notes_cancel,
            dt_problem_tstz_in     => rec_in.dt_problem_tstz,
            dt_cancel_tstz_in      => rec_in.dt_cancel_tstz,
            status_flg_in          => rec_in.status_flg,
            status_icon_in         => rec_in.status_icon,
            status_msg_in          => rec_in.status_msg,
            status_str_in          => rec_in.status_str,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            flg_type_in            => rec_in.flg_type,
            id_management_level_in => rec_in.id_management_level,
            id_episode_answer_in   => rec_in.id_episode_answer,
            id_cancel_reason_in    => rec_in.id_cancel_reason,
            id_patient_in          => rec_in.id_patient,
            dt_last_update_in      => rec_in.dt_last_update,
            id_opinion_type_in     => rec_in.id_opinion_type,
            id_clinical_service_in => rec_in.id_clinical_service,
            dt_approved_in         => rec_in.dt_approved,
            id_prof_approved_in    => rec_in.id_prof_approved,
            notes_in               => rec_in.notes,
            id_episode_approval_in => rec_in.id_episode_approval,
            flg_auto_follow_up_in  => rec_in.flg_auto_follow_up,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            flg_priority_in        => rec_in.flg_priority,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN opinion%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_opinion_in          => rec_in.id_opinion,
            id_episode_in          => rec_in.id_episode,
            flg_state_in           => rec_in.flg_state,
            desc_problem_in        => rec_in.desc_problem,
            id_prof_questions_in   => rec_in.id_prof_questions,
            id_prof_questioned_in  => rec_in.id_prof_questioned,
            id_speciality_in       => rec_in.id_speciality,
            notes_cancel_in        => rec_in.notes_cancel,
            dt_problem_tstz_in     => rec_in.dt_problem_tstz,
            dt_cancel_tstz_in      => rec_in.dt_cancel_tstz,
            status_flg_in          => rec_in.status_flg,
            status_icon_in         => rec_in.status_icon,
            status_msg_in          => rec_in.status_msg,
            status_str_in          => rec_in.status_str,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            flg_type_in            => rec_in.flg_type,
            id_management_level_in => rec_in.id_management_level,
            id_episode_answer_in   => rec_in.id_episode_answer,
            id_cancel_reason_in    => rec_in.id_cancel_reason,
            id_patient_in          => rec_in.id_patient,
            dt_last_update_in      => rec_in.dt_last_update,
            id_opinion_type_in     => rec_in.id_opinion_type,
            id_clinical_service_in => rec_in.id_clinical_service,
            dt_approved_in         => rec_in.dt_approved,
            id_prof_approved_in    => rec_in.id_prof_approved,
            notes_in               => rec_in.notes,
            id_episode_approval_in => rec_in.id_episode_approval,
            flg_auto_follow_up_in  => rec_in.flg_auto_follow_up,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            flg_priority_in        => rec_in.flg_priority,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN opinion_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_opinion          id_opinion_cc;
        l_id_episode          id_episode_cc;
        l_flg_state           flg_state_cc;
        l_desc_problem        desc_problem_cc;
        l_id_prof_questions   id_prof_questions_cc;
        l_id_prof_questioned  id_prof_questioned_cc;
        l_id_speciality       id_speciality_cc;
        l_notes_cancel        notes_cancel_cc;
        l_dt_problem_tstz     dt_problem_tstz_cc;
        l_dt_cancel_tstz      dt_cancel_tstz_cc;
        l_status_flg          status_flg_cc;
        l_status_icon         status_icon_cc;
        l_status_msg          status_msg_cc;
        l_status_str          status_str_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
        l_flg_type            flg_type_cc;
        l_id_management_level id_management_level_cc;
        l_id_episode_answer   id_episode_answer_cc;
        l_id_cancel_reason    id_cancel_reason_cc;
        l_id_patient          id_patient_cc;
        l_dt_last_update      dt_last_update_cc;
        l_id_opinion_type     id_opinion_type_cc;
        l_id_clinical_service id_clinical_service_cc;
        l_dt_approved         dt_approved_cc;
        l_id_prof_approved    id_prof_approved_cc;
        l_notes               notes_cc;
        l_id_episode_approval id_episode_approval_cc;
        l_flg_auto_follow_up  flg_auto_follow_up_cc;
        l_id_prof_cancel      id_prof_cancel_cc;
        l_flg_priority        flg_priority_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_opinion(i) := col_in(i).id_opinion;
            l_id_episode(i) := col_in(i).id_episode;
            l_flg_state(i) := col_in(i).flg_state;
            l_desc_problem(i) := col_in(i).desc_problem;
            l_id_prof_questions(i) := col_in(i).id_prof_questions;
            l_id_prof_questioned(i) := col_in(i).id_prof_questioned;
            l_id_speciality(i) := col_in(i).id_speciality;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_dt_problem_tstz(i) := col_in(i).dt_problem_tstz;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_status_flg(i) := col_in(i).status_flg;
            l_status_icon(i) := col_in(i).status_icon;
            l_status_msg(i) := col_in(i).status_msg;
            l_status_str(i) := col_in(i).status_str;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_type(i) := col_in(i).flg_type;
            l_id_management_level(i) := col_in(i).id_management_level;
            l_id_episode_answer(i) := col_in(i).id_episode_answer;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_id_patient(i) := col_in(i).id_patient;
            l_dt_last_update(i) := col_in(i).dt_last_update;
            l_id_opinion_type(i) := col_in(i).id_opinion_type;
            l_id_clinical_service(i) := col_in(i).id_clinical_service;
            l_dt_approved(i) := col_in(i).dt_approved;
            l_id_prof_approved(i) := col_in(i).id_prof_approved;
            l_notes(i) := col_in(i).notes;
            l_id_episode_approval(i) := col_in(i).id_episode_approval;
            l_flg_auto_follow_up(i) := col_in(i).flg_auto_follow_up;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_flg_priority(i) := col_in(i).flg_priority;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE opinion
                   SET id_episode          = nvl(l_id_episode(i), id_episode),
                       flg_state           = nvl(l_flg_state(i), flg_state),
                       desc_problem        = nvl(l_desc_problem(i), desc_problem),
                       id_prof_questions   = nvl(l_id_prof_questions(i), id_prof_questions),
                       id_prof_questioned  = nvl(l_id_prof_questioned(i), id_prof_questioned),
                       id_speciality       = nvl(l_id_speciality(i), id_speciality),
                       notes_cancel        = nvl(l_notes_cancel(i), notes_cancel),
                       dt_problem_tstz     = nvl(l_dt_problem_tstz(i), dt_problem_tstz),
                       dt_cancel_tstz      = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       status_flg          = nvl(l_status_flg(i), status_flg),
                       status_icon         = nvl(l_status_icon(i), status_icon),
                       status_msg          = nvl(l_status_msg(i), status_msg),
                       status_str          = nvl(l_status_str(i), status_str),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution),
                       flg_type            = nvl(l_flg_type(i), flg_type),
                       id_management_level = nvl(l_id_management_level(i), id_management_level),
                       id_episode_answer   = nvl(l_id_episode_answer(i), id_episode_answer),
                       id_cancel_reason    = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       id_patient          = nvl(l_id_patient(i), id_patient),
                       dt_last_update      = nvl(l_dt_last_update(i), dt_last_update),
                       id_opinion_type     = nvl(l_id_opinion_type(i), id_opinion_type),
                       id_clinical_service = nvl(l_id_clinical_service(i), id_clinical_service),
                       dt_approved         = nvl(l_dt_approved(i), dt_approved),
                       id_prof_approved    = nvl(l_id_prof_approved(i), id_prof_approved),
                       notes               = nvl(l_notes(i), notes),
                       id_episode_approval = nvl(l_id_episode_approval(i), id_episode_approval),
                       flg_auto_follow_up  = nvl(l_flg_auto_follow_up(i), flg_auto_follow_up),
                       id_prof_cancel      = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       flg_priority        = nvl(l_flg_priority(i), flg_priority)
                 WHERE id_opinion = l_id_opinion(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE opinion
                   SET id_episode          = l_id_episode(i),
                       flg_state           = l_flg_state(i),
                       desc_problem        = l_desc_problem(i),
                       id_prof_questions   = l_id_prof_questions(i),
                       id_prof_questioned  = l_id_prof_questioned(i),
                       id_speciality       = l_id_speciality(i),
                       notes_cancel        = l_notes_cancel(i),
                       dt_problem_tstz     = l_dt_problem_tstz(i),
                       dt_cancel_tstz      = l_dt_cancel_tstz(i),
                       status_flg          = l_status_flg(i),
                       status_icon         = l_status_icon(i),
                       status_msg          = l_status_msg(i),
                       status_str          = l_status_str(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i),
                       flg_type            = l_flg_type(i),
                       id_management_level = l_id_management_level(i),
                       id_episode_answer   = l_id_episode_answer(i),
                       id_cancel_reason    = l_id_cancel_reason(i),
                       id_patient          = l_id_patient(i),
                       dt_last_update      = l_dt_last_update(i),
                       id_opinion_type     = l_id_opinion_type(i),
                       id_clinical_service = l_id_clinical_service(i),
                       dt_approved         = l_dt_approved(i),
                       id_prof_approved    = l_id_prof_approved(i),
                       notes               = l_notes(i),
                       id_episode_approval = l_id_episode_approval(i),
                       flg_auto_follow_up  = l_flg_auto_follow_up(i),
                       id_prof_cancel      = l_id_prof_cancel(i),
                       flg_priority        = l_flg_priority(i)
                 WHERE id_opinion = l_id_opinion(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN opinion_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE opinion
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE opinion
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE opinion
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_opinion_in   IN opinion.id_opinion%TYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion
         WHERE id_opinion = id_opinion_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_opinion_in   IN opinion.id_opinion%TYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_opinion_in => id_opinion_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this OPN_CRE_FK foreign key value
    PROCEDURE del_opn_cre_fk
    (
        id_cancel_reason_in IN opinion.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := FALSE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion
         WHERE id_cancel_reason = id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_cre_fk;

    -- Delete all rows for this OPN_CSE_FK foreign key value
    PROCEDURE del_opn_cse_fk
    (
        id_clinical_service_in IN opinion.id_clinical_service%TYPE,
        handle_error_in        IN BOOLEAN := FALSE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion
         WHERE id_clinical_service = id_clinical_service_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_cse_fk;

    -- Delete all rows for this OPN_EPISAPP_FK foreign key value
    PROCEDURE del_opn_episapp_fk
    (
        id_episode_approval_in IN opinion.id_episode_approval%TYPE,
        handle_error_in        IN BOOLEAN := FALSE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion
         WHERE id_episode_approval = id_episode_approval_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_episapp_fk;

    -- Delete all rows for this OPN_EPISA_FK foreign key value
    PROCEDURE del_opn_episa_fk
    (
        id_episode_answer_in IN opinion.id_episode_answer%TYPE,
        handle_error_in      IN BOOLEAN := FALSE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion
         WHERE id_episode_answer = id_episode_answer_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_episa_fk;

    -- Delete all rows for this OPN_EPIS_FK foreign key value
    PROCEDURE del_opn_epis_fk
    (
        id_episode_in   IN opinion.id_episode%TYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_epis_fk;

    -- Delete all rows for this OPN_ML_FK foreign key value
    PROCEDURE del_opn_ml_fk
    (
        id_management_level_in IN opinion.id_management_level%TYPE,
        handle_error_in        IN BOOLEAN := FALSE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion
         WHERE id_management_level = id_management_level_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_ml_fk;

    -- Delete all rows for this OPN_OT_FK foreign key value
    PROCEDURE del_opn_ot_fk
    (
        id_opinion_type_in IN opinion.id_opinion_type%TYPE,
        handle_error_in    IN BOOLEAN := FALSE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion
         WHERE id_opinion_type = id_opinion_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_ot_fk;

    -- Delete all rows for this OPN_PATIENT_FK foreign key value
    PROCEDURE del_opn_patient_fk
    (
        id_patient_in   IN opinion.id_patient%TYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion
         WHERE id_patient = id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_patient_fk;

    -- Delete all rows for this OPN_PROF_APPROVED_FK foreign key value
    PROCEDURE del_opn_prof_approved_fk
    (
        id_prof_approved_in IN opinion.id_prof_approved%TYPE,
        handle_error_in     IN BOOLEAN := FALSE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion
         WHERE id_prof_approved = id_prof_approved_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_prof_approved_fk;

    -- Delete all rows for this OPN_PROF_QUESTIONED_FK foreign key value
    PROCEDURE del_opn_prof_questioned_fk
    (
        id_prof_questioned_in IN opinion.id_prof_questioned%TYPE,
        handle_error_in       IN BOOLEAN := FALSE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion
         WHERE id_prof_questioned = id_prof_questioned_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_prof_questioned_fk;

    -- Delete all rows for this OPN_PROF_QUESTIONS_FK foreign key value
    PROCEDURE del_opn_prof_questions_fk
    (
        id_prof_questions_in IN opinion.id_prof_questions%TYPE,
        handle_error_in      IN BOOLEAN := FALSE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion
         WHERE id_prof_questions = id_prof_questions_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_prof_questions_fk;

    -- Delete all rows for this OPN_SPC_FK foreign key value
    PROCEDURE del_opn_spc_fk
    (
        id_speciality_in IN opinion.id_speciality%TYPE,
        handle_error_in  IN BOOLEAN := FALSE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion
         WHERE id_speciality = id_speciality_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_spc_fk;

    -- Delete all rows for this OPN_CRE_FK foreign key value
    PROCEDURE del_opn_cre_fk
    (
        id_cancel_reason_in IN opinion.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_cre_fk(id_cancel_reason_in => id_cancel_reason_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_opn_cre_fk;

    -- Delete all rows for this OPN_CSE_FK foreign key value
    PROCEDURE del_opn_cse_fk
    (
        id_clinical_service_in IN opinion.id_clinical_service%TYPE,
        handle_error_in        IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_cse_fk(id_clinical_service_in => id_clinical_service_in,
                       handle_error_in        => handle_error_in,
                       rows_out               => rows_out);
    END del_opn_cse_fk;

    -- Delete all rows for this OPN_EPISAPP_FK foreign key value
    PROCEDURE del_opn_episapp_fk
    (
        id_episode_approval_in IN opinion.id_episode_approval%TYPE,
        handle_error_in        IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_episapp_fk(id_episode_approval_in => id_episode_approval_in,
                           handle_error_in        => handle_error_in,
                           rows_out               => rows_out);
    END del_opn_episapp_fk;

    -- Delete all rows for this OPN_EPISA_FK foreign key value
    PROCEDURE del_opn_episa_fk
    (
        id_episode_answer_in IN opinion.id_episode_answer%TYPE,
        handle_error_in      IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_episa_fk(id_episode_answer_in => id_episode_answer_in,
                         handle_error_in      => handle_error_in,
                         rows_out             => rows_out);
    END del_opn_episa_fk;

    -- Delete all rows for this OPN_EPIS_FK foreign key value
    PROCEDURE del_opn_epis_fk
    (
        id_episode_in   IN opinion.id_episode%TYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_opn_epis_fk;

    -- Delete all rows for this OPN_ML_FK foreign key value
    PROCEDURE del_opn_ml_fk
    (
        id_management_level_in IN opinion.id_management_level%TYPE,
        handle_error_in        IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_ml_fk(id_management_level_in => id_management_level_in,
                      handle_error_in        => handle_error_in,
                      rows_out               => rows_out);
    END del_opn_ml_fk;

    -- Delete all rows for this OPN_OT_FK foreign key value
    PROCEDURE del_opn_ot_fk
    (
        id_opinion_type_in IN opinion.id_opinion_type%TYPE,
        handle_error_in    IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_ot_fk(id_opinion_type_in => id_opinion_type_in,
                      handle_error_in    => handle_error_in,
                      rows_out           => rows_out);
    END del_opn_ot_fk;

    -- Delete all rows for this OPN_PATIENT_FK foreign key value
    PROCEDURE del_opn_patient_fk
    (
        id_patient_in   IN opinion.id_patient%TYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_patient_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_opn_patient_fk;

    -- Delete all rows for this OPN_PROF_APPROVED_FK foreign key value
    PROCEDURE del_opn_prof_approved_fk
    (
        id_prof_approved_in IN opinion.id_prof_approved%TYPE,
        handle_error_in     IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_prof_approved_fk(id_prof_approved_in => id_prof_approved_in,
                                 handle_error_in     => handle_error_in,
                                 rows_out            => rows_out);
    END del_opn_prof_approved_fk;

    -- Delete all rows for this OPN_PROF_QUESTIONED_FK foreign key value
    PROCEDURE del_opn_prof_questioned_fk
    (
        id_prof_questioned_in IN opinion.id_prof_questioned%TYPE,
        handle_error_in       IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_prof_questioned_fk(id_prof_questioned_in => id_prof_questioned_in,
                                   handle_error_in       => handle_error_in,
                                   rows_out              => rows_out);
    END del_opn_prof_questioned_fk;

    -- Delete all rows for this OPN_PROF_QUESTIONS_FK foreign key value
    PROCEDURE del_opn_prof_questions_fk
    (
        id_prof_questions_in IN opinion.id_prof_questions%TYPE,
        handle_error_in      IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_prof_questions_fk(id_prof_questions_in => id_prof_questions_in,
                                  handle_error_in      => handle_error_in,
                                  rows_out             => rows_out);
    END del_opn_prof_questions_fk;

    -- Delete all rows for this OPN_SPC_FK foreign key value
    PROCEDURE del_opn_spc_fk
    (
        id_speciality_in IN opinion.id_speciality%TYPE,
        handle_error_in  IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_spc_fk(id_speciality_in => id_speciality_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_opn_spc_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM opinion';
        ELSE
            RETURN 'DELETE FROM opinion WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(opinion_inout IN OUT opinion%ROWTYPE) IS
    BEGIN
        opinion_inout.id_opinion          := NULL;
        opinion_inout.id_episode          := NULL;
        opinion_inout.flg_state           := NULL;
        opinion_inout.desc_problem        := NULL;
        opinion_inout.id_prof_questions   := NULL;
        opinion_inout.id_prof_questioned  := NULL;
        opinion_inout.id_speciality       := NULL;
        opinion_inout.notes_cancel        := NULL;
        opinion_inout.dt_problem_tstz     := NULL;
        opinion_inout.dt_cancel_tstz      := NULL;
        opinion_inout.status_flg          := NULL;
        opinion_inout.status_icon         := NULL;
        opinion_inout.status_msg          := NULL;
        opinion_inout.status_str          := NULL;
        opinion_inout.create_user         := NULL;
        opinion_inout.create_time         := NULL;
        opinion_inout.create_institution  := NULL;
        opinion_inout.update_user         := NULL;
        opinion_inout.update_time         := NULL;
        opinion_inout.update_institution  := NULL;
        opinion_inout.flg_type            := NULL;
        opinion_inout.id_management_level := NULL;
        opinion_inout.id_episode_answer   := NULL;
        opinion_inout.id_cancel_reason    := NULL;
        opinion_inout.id_patient          := NULL;
        opinion_inout.dt_last_update      := NULL;
        opinion_inout.id_opinion_type     := NULL;
        opinion_inout.id_clinical_service := NULL;
        opinion_inout.dt_approved         := NULL;
        opinion_inout.id_prof_approved    := NULL;
        opinion_inout.notes               := NULL;
        opinion_inout.id_episode_approval := NULL;
        opinion_inout.flg_auto_follow_up  := NULL;
        opinion_inout.id_prof_cancel      := NULL;
        opinion_inout.flg_priority        := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN opinion%ROWTYPE IS
        l_opinion opinion%ROWTYPE;
    BEGIN
        RETURN l_opinion;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN opinion_tc IS
        data opinion_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM opinion
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN opinion_tc IS
        data opinion_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_opinion;
/
