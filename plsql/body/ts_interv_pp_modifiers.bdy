/*-- Last Change Revision: $Rev: 2028240 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:36 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_interv_pp_modifiers
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: January 25, 2016 11:10:47
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_interv_pp_modifiers_in IN interv_pp_modifiers.id_interv_pp_modifiers%TYPE,
        id_interv_presc_plan_in   IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_modifier_in            IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_inst_owner_in          IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        create_user_in            IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_time_in            IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_time_in            IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in    IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO interv_pp_modifiers
            (id_interv_pp_modifiers,
             id_interv_presc_plan,
             id_modifier,
             id_inst_owner,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_prof_last_update,
             dt_last_update_tstz)
        VALUES
            (id_interv_pp_modifiers_in,
             id_interv_presc_plan_in,
             id_modifier_in,
             id_inst_owner_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_prof_last_update_in,
             dt_last_update_tstz_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'INTERV_PP_MODIFIERS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    IF l_name = 'IPR_CT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MODIFIER',
                                                        value_in           => id_modifier_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INST_OWNER',
                                                        value_in           => id_inst_owner_in);
                    END IF;
                    IF l_name = 'IPR_IPN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INTERV_PRESC_PLAN',
                                                        value_in           => id_interv_presc_plan_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_interv_pp_modifiers_in IN interv_pp_modifiers.id_interv_pp_modifiers%TYPE,
        id_interv_presc_plan_in   IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_modifier_in            IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_inst_owner_in          IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        create_user_in            IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_time_in            IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_time_in            IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in    IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_interv_pp_modifiers_in => id_interv_pp_modifiers_in,
            id_interv_presc_plan_in   => id_interv_presc_plan_in,
            id_modifier_in            => id_modifier_in,
            id_inst_owner_in          => id_inst_owner_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_tstz_in    => dt_last_update_tstz_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN interv_pp_modifiers%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec interv_pp_modifiers%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_interv_pp_modifiers := next_key(sequence_in);
        END IF;
        ins(id_interv_pp_modifiers_in => l_rec.id_interv_pp_modifiers,
            id_interv_presc_plan_in   => l_rec.id_interv_presc_plan,
            id_modifier_in            => l_rec.id_modifier,
            id_inst_owner_in          => l_rec.id_inst_owner,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            id_prof_last_update_in    => l_rec.id_prof_last_update,
            dt_last_update_tstz_in    => l_rec.dt_last_update_tstz,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN interv_pp_modifiers%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN interv_pp_modifiers.id_interv_pp_modifiers%TYPE
    
     IS
        retval interv_pp_modifiers.id_interv_pp_modifiers%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_interv_pp_modifiers.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_INTERV_PP_MODIFIERS'));
    END next_key;

    PROCEDURE ins
    (
        id_interv_presc_plan_in    IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_modifier_in             IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_inst_owner_in           IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        create_user_in             IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_time_in             IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_time_in             IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in     IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in     IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_interv_pp_modifiers_out IN OUT interv_pp_modifiers.id_interv_pp_modifiers%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky interv_pp_modifiers.id_interv_pp_modifiers%TYPE := next_key;
    BEGIN
        ins(id_interv_pp_modifiers_in => l_pky,
            id_interv_presc_plan_in   => id_interv_presc_plan_in,
            id_modifier_in            => id_modifier_in,
            id_inst_owner_in          => id_inst_owner_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_tstz_in    => dt_last_update_tstz_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        id_interv_pp_modifiers_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_interv_presc_plan_in    IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_modifier_in             IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_inst_owner_in           IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        create_user_in             IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_time_in             IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_time_in             IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in     IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in     IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_interv_pp_modifiers_out IN OUT interv_pp_modifiers.id_interv_pp_modifiers%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_interv_presc_plan_in    => id_interv_presc_plan_in,
            id_modifier_in             => id_modifier_in,
            id_inst_owner_in           => id_inst_owner_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_prof_last_update_in     => id_prof_last_update_in,
            dt_last_update_tstz_in     => dt_last_update_tstz_in,
            id_interv_pp_modifiers_out => id_interv_pp_modifiers_out,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    FUNCTION ins
    (
        id_interv_presc_plan_in IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_modifier_in          IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_inst_owner_in        IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        create_user_in          IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_time_in          IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_time_in          IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in  IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in  IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) RETURN interv_pp_modifiers.id_interv_pp_modifiers%TYPE IS
        l_pky interv_pp_modifiers.id_interv_pp_modifiers%TYPE := next_key;
    BEGIN
        ins(id_interv_pp_modifiers_in => l_pky,
            id_interv_presc_plan_in   => id_interv_presc_plan_in,
            id_modifier_in            => id_modifier_in,
            id_inst_owner_in          => id_inst_owner_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_tstz_in    => dt_last_update_tstz_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_interv_presc_plan_in IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_modifier_in          IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_inst_owner_in        IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        create_user_in          IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_time_in          IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_time_in          IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in  IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in  IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) RETURN interv_pp_modifiers.id_interv_pp_modifiers%TYPE IS
        l_pky    interv_pp_modifiers.id_interv_pp_modifiers%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_interv_pp_modifiers_in => l_pky,
            id_interv_presc_plan_in   => id_interv_presc_plan_in,
            id_modifier_in            => id_modifier_in,
            id_inst_owner_in          => id_inst_owner_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_tstz_in    => dt_last_update_tstz_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_interv_presc_plan_in IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_modifier_in          IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_inst_owner_in        IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        create_user_in          IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_time_in          IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_time_in          IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in  IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in  IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
        l_pky interv_pp_modifiers.id_interv_pp_modifiers%TYPE := next_key;
    BEGIN
        ins(id_interv_pp_modifiers_in => l_pky,
            id_interv_presc_plan_in   => id_interv_presc_plan_in,
            id_modifier_in            => id_modifier_in,
            id_inst_owner_in          => id_inst_owner_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_tstz_in    => dt_last_update_tstz_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_interv_presc_plan_in IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_modifier_in          IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_inst_owner_in        IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        create_user_in          IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_time_in          IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_time_in          IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in  IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in  IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        l_pky    interv_pp_modifiers.id_interv_pp_modifiers%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_interv_pp_modifiers_in => l_pky,
            id_interv_presc_plan_in   => id_interv_presc_plan_in,
            id_modifier_in            => id_modifier_in,
            id_inst_owner_in          => id_inst_owner_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_tstz_in    => dt_last_update_tstz_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN interv_pp_modifiers_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO interv_pp_modifiers
                    (id_interv_pp_modifiers,
                     id_interv_presc_plan,
                     id_modifier,
                     id_inst_owner,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     id_prof_last_update,
                     dt_last_update_tstz)
                VALUES
                    (rows_in(indx).id_interv_pp_modifiers,
                     rows_in(indx).id_interv_presc_plan,
                     rows_in(indx).id_modifier,
                     rows_in(indx).id_inst_owner,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).id_prof_last_update,
                     rows_in(indx).dt_last_update_tstz)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INTERV_PP_MODIFIERS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_interv_pp_modifiers,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INTERV_PRESC_PLAN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_interv_presc_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MODIFIER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_modifier,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INST_OWNER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_inst_owner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_LAST_UPDATE_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_last_update_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'INTERV_PP_MODIFIERS',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN interv_pp_modifiers_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_interv_pp_modifiers_in IN interv_pp_modifiers.id_interv_pp_modifiers%TYPE,
        id_interv_presc_plan_in   IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_interv_presc_plan_nin  IN BOOLEAN := TRUE,
        id_modifier_in            IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_modifier_nin           IN BOOLEAN := TRUE,
        id_inst_owner_in          IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        id_inst_owner_nin         IN BOOLEAN := TRUE,
        create_user_in            IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_prof_last_update_in    IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin   IN BOOLEAN := TRUE,
        dt_last_update_tstz_in    IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin   IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out               table_varchar;
        l_id_interv_presc_plan_n NUMBER(1);
        l_id_modifier_n          NUMBER(1);
        l_id_inst_owner_n        NUMBER(1);
        l_create_user_n          NUMBER(1);
        l_create_time_n          NUMBER(1);
        l_create_institution_n   NUMBER(1);
        l_update_user_n          NUMBER(1);
        l_update_time_n          NUMBER(1);
        l_update_institution_n   NUMBER(1);
        l_id_prof_last_update_n  NUMBER(1);
        l_dt_last_update_tstz_n  NUMBER(1);
    BEGIN
    
        l_id_interv_presc_plan_n := sys.diutil.bool_to_int(id_interv_presc_plan_nin);
        l_id_modifier_n          := sys.diutil.bool_to_int(id_modifier_nin);
        l_id_inst_owner_n        := sys.diutil.bool_to_int(id_inst_owner_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prof_last_update_n  := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_tstz_n  := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
    
        UPDATE interv_pp_modifiers
           SET id_interv_presc_plan = decode(l_id_interv_presc_plan_n,
                                             0,
                                             id_interv_presc_plan_in,
                                             nvl(id_interv_presc_plan_in, id_interv_presc_plan)),
               id_modifier          = decode(l_id_modifier_n, 0, id_modifier_in, nvl(id_modifier_in, id_modifier)),
               id_inst_owner        = decode(l_id_inst_owner_n,
                                             0,
                                             id_inst_owner_in,
                                             nvl(id_inst_owner_in, id_inst_owner)),
               create_user          = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time          = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution   = decode(l_create_institution_n,
                                             0,
                                             create_institution_in,
                                             nvl(create_institution_in, create_institution)),
               update_user          = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time          = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution   = decode(l_update_institution_n,
                                             0,
                                             update_institution_in,
                                             nvl(update_institution_in, update_institution)),
               id_prof_last_update  = decode(l_id_prof_last_update_n,
                                             0,
                                             id_prof_last_update_in,
                                             nvl(id_prof_last_update_in, id_prof_last_update)),
               dt_last_update_tstz  = decode(l_dt_last_update_tstz_n,
                                             0,
                                             dt_last_update_tstz_in,
                                             nvl(dt_last_update_tstz_in, dt_last_update_tstz))
         WHERE id_interv_pp_modifiers = id_interv_pp_modifiers_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'INTERV_PP_MODIFIERS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    IF l_name = 'IPR_CT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MODIFIER',
                                                        value_in           => id_modifier_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INST_OWNER',
                                                        value_in           => id_inst_owner_in);
                    END IF;
                    IF l_name = 'IPR_IPN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INTERV_PRESC_PLAN',
                                                        value_in           => id_interv_presc_plan_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_interv_pp_modifiers_in IN interv_pp_modifiers.id_interv_pp_modifiers%TYPE,
        id_interv_presc_plan_in   IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_interv_presc_plan_nin  IN BOOLEAN := TRUE,
        id_modifier_in            IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_modifier_nin           IN BOOLEAN := TRUE,
        id_inst_owner_in          IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        id_inst_owner_nin         IN BOOLEAN := TRUE,
        create_user_in            IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_prof_last_update_in    IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin   IN BOOLEAN := TRUE,
        dt_last_update_tstz_in    IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin   IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_interv_pp_modifiers_in => id_interv_pp_modifiers_in,
            id_interv_presc_plan_in   => id_interv_presc_plan_in,
            id_interv_presc_plan_nin  => id_interv_presc_plan_nin,
            id_modifier_in            => id_modifier_in,
            id_modifier_nin           => id_modifier_nin,
            id_inst_owner_in          => id_inst_owner_in,
            id_inst_owner_nin         => id_inst_owner_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            id_prof_last_update_in    => id_prof_last_update_in,
            id_prof_last_update_nin   => id_prof_last_update_nin,
            dt_last_update_tstz_in    => dt_last_update_tstz_in,
            dt_last_update_tstz_nin   => dt_last_update_tstz_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_interv_presc_plan_in  IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_interv_presc_plan_nin IN BOOLEAN := TRUE,
        id_modifier_in           IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_modifier_nin          IN BOOLEAN := TRUE,
        id_inst_owner_in         IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        id_inst_owner_nin        IN BOOLEAN := TRUE,
        create_user_in           IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_prof_last_update_in   IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin  IN BOOLEAN := TRUE,
        dt_last_update_tstz_in   IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin  IN BOOLEAN := TRUE,
        where_in                 VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_interv_presc_plan_n  NUMBER(1);
        l_id_modifier_n           NUMBER(1);
        l_id_inst_owner_n         NUMBER(1);
        l_create_user_n           NUMBER(1);
        l_create_time_n           NUMBER(1);
        l_create_institution_n    NUMBER(1);
        l_update_user_n           NUMBER(1);
        l_update_time_n           NUMBER(1);
        l_update_institution_n    NUMBER(1);
        l_id_prof_last_update_n   NUMBER(1);
        l_dt_last_update_tstz_n   NUMBER(1);
        id_interv_pp_modifiers_in interv_pp_modifiers.id_interv_pp_modifiers%TYPE;
    BEGIN
    
        l_id_interv_presc_plan_n := sys.diutil.bool_to_int(id_interv_presc_plan_nin);
        l_id_modifier_n          := sys.diutil.bool_to_int(id_modifier_nin);
        l_id_inst_owner_n        := sys.diutil.bool_to_int(id_inst_owner_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prof_last_update_n  := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_tstz_n  := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
    
        l_sql := 'UPDATE INTERV_PP_MODIFIERS SET ' || ' ID_INTERV_PRESC_PLAN = decode (' || l_id_interv_presc_plan_n ||
                 ',0,:id_interv_presc_plan_in, NVL (:id_interv_presc_plan_in, ID_INTERV_PRESC_PLAN)) ' || ',' ||
                 ' ID_MODIFIER = decode (' || l_id_modifier_n ||
                 ',0,:id_modifier_in, NVL (:id_modifier_in, ID_MODIFIER)) ' || ',' || ' ID_INST_OWNER = decode (' ||
                 l_id_inst_owner_n || ',0,:id_inst_owner_in, NVL (:id_inst_owner_in, ID_INST_OWNER)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                 ',0,:id_prof_last_update_in, NVL (:id_prof_last_update_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                 ' DT_LAST_UPDATE_TSTZ = decode (' || l_dt_last_update_tstz_n ||
                 ',0,:dt_last_update_tstz_in, NVL (:dt_last_update_tstz_in, DT_LAST_UPDATE_TSTZ)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_interv_presc_plan_in, id_modifier_in, id_inst_owner_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_prof_last_update_in, dt_last_update_tstz_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'INTERV_PP_MODIFIERS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    IF l_name = 'IPR_CT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_MODIFIER',
                                                        value_in           => id_modifier_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INST_OWNER',
                                                        value_in           => id_inst_owner_in);
                    END IF;
                    IF l_name = 'IPR_IPN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INTERV_PRESC_PLAN',
                                                        value_in           => id_interv_presc_plan_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_interv_presc_plan_in  IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_interv_presc_plan_nin IN BOOLEAN := TRUE,
        id_modifier_in           IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_modifier_nin          IN BOOLEAN := TRUE,
        id_inst_owner_in         IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        id_inst_owner_nin        IN BOOLEAN := TRUE,
        create_user_in           IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_prof_last_update_in   IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin  IN BOOLEAN := TRUE,
        dt_last_update_tstz_in   IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin  IN BOOLEAN := TRUE,
        where_in                 VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_interv_presc_plan_in  => id_interv_presc_plan_in,
            id_interv_presc_plan_nin => id_interv_presc_plan_nin,
            id_modifier_in           => id_modifier_in,
            id_modifier_nin          => id_modifier_nin,
            id_inst_owner_in         => id_inst_owner_in,
            id_inst_owner_nin        => id_inst_owner_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            id_prof_last_update_in   => id_prof_last_update_in,
            id_prof_last_update_nin  => id_prof_last_update_nin,
            dt_last_update_tstz_in   => dt_last_update_tstz_in,
            dt_last_update_tstz_nin  => dt_last_update_tstz_nin,
            where_in                 => where_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN interv_pp_modifiers%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_interv_pp_modifiers_in => rec_in.id_interv_pp_modifiers,
            id_interv_presc_plan_in   => rec_in.id_interv_presc_plan,
            id_modifier_in            => rec_in.id_modifier,
            id_inst_owner_in          => rec_in.id_inst_owner,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            id_prof_last_update_in    => rec_in.id_prof_last_update,
            dt_last_update_tstz_in    => rec_in.dt_last_update_tstz
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN interv_pp_modifiers%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_interv_pp_modifiers_in => rec_in.id_interv_pp_modifiers,
            id_interv_presc_plan_in   => rec_in.id_interv_presc_plan,
            id_modifier_in            => rec_in.id_modifier,
            id_inst_owner_in          => rec_in.id_inst_owner,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            id_prof_last_update_in    => rec_in.id_prof_last_update,
            dt_last_update_tstz_in    => rec_in.dt_last_update_tstz
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_interv_pp_modifiers_in IN interv_pp_modifiers.id_interv_pp_modifiers%TYPE,
        id_interv_presc_plan_in   IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_modifier_in            IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_inst_owner_in          IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        create_user_in            IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_time_in            IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_time_in            IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in    IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        upd(id_interv_pp_modifiers_in => id_interv_pp_modifiers_in,
            id_interv_presc_plan_in   => id_interv_presc_plan_in,
            id_modifier_in            => id_modifier_in,
            id_inst_owner_in          => id_inst_owner_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_tstz_in    => dt_last_update_tstz_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_interv_pp_modifiers_in => id_interv_pp_modifiers_in,
                id_interv_presc_plan_in   => id_interv_presc_plan_in,
                id_modifier_in            => id_modifier_in,
                id_inst_owner_in          => id_inst_owner_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                id_prof_last_update_in    => id_prof_last_update_in,
                dt_last_update_tstz_in    => dt_last_update_tstz_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_interv_pp_modifiers_in IN interv_pp_modifiers.id_interv_pp_modifiers%TYPE,
        id_interv_presc_plan_in   IN interv_pp_modifiers.id_interv_presc_plan%TYPE DEFAULT NULL,
        id_modifier_in            IN interv_pp_modifiers.id_modifier%TYPE DEFAULT NULL,
        id_inst_owner_in          IN interv_pp_modifiers.id_inst_owner%TYPE DEFAULT NULL,
        create_user_in            IN interv_pp_modifiers.create_user%TYPE DEFAULT NULL,
        create_time_in            IN interv_pp_modifiers.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN interv_pp_modifiers.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN interv_pp_modifiers.update_user%TYPE DEFAULT NULL,
        update_time_in            IN interv_pp_modifiers.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN interv_pp_modifiers.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN interv_pp_modifiers.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in    IN interv_pp_modifiers.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_interv_pp_modifiers_in,
                id_interv_presc_plan_in,
                id_modifier_in,
                id_inst_owner_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_prof_last_update_in,
                dt_last_update_tstz_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN interv_pp_modifiers_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_interv_pp_modifiers id_interv_pp_modifiers_cc;
        l_id_interv_presc_plan   id_interv_presc_plan_cc;
        l_id_modifier            id_modifier_cc;
        l_id_inst_owner          id_inst_owner_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
        l_id_prof_last_update    id_prof_last_update_cc;
        l_dt_last_update_tstz    dt_last_update_tstz_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_interv_pp_modifiers(i) := col_in(i).id_interv_pp_modifiers;
            l_id_interv_presc_plan(i) := col_in(i).id_interv_presc_plan;
            l_id_modifier(i) := col_in(i).id_modifier;
            l_id_inst_owner(i) := col_in(i).id_inst_owner;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_dt_last_update_tstz(i) := col_in(i).dt_last_update_tstz;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE interv_pp_modifiers
                   SET id_interv_presc_plan = nvl(l_id_interv_presc_plan(i), id_interv_presc_plan),
                       id_modifier          = nvl(l_id_modifier(i), id_modifier),
                       id_inst_owner        = nvl(l_id_inst_owner(i), id_inst_owner),
                       create_user          = nvl(l_create_user(i), create_user),
                       create_time          = nvl(l_create_time(i), create_time),
                       create_institution   = nvl(l_create_institution(i), create_institution),
                       update_user          = nvl(l_update_user(i), update_user),
                       update_time          = nvl(l_update_time(i), update_time),
                       update_institution   = nvl(l_update_institution(i), update_institution),
                       id_prof_last_update  = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       dt_last_update_tstz  = nvl(l_dt_last_update_tstz(i), dt_last_update_tstz)
                 WHERE id_interv_pp_modifiers = l_id_interv_pp_modifiers(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE interv_pp_modifiers
                   SET id_interv_presc_plan = l_id_interv_presc_plan(i),
                       id_modifier          = l_id_modifier(i),
                       id_inst_owner        = l_id_inst_owner(i),
                       create_user          = l_create_user(i),
                       create_time          = l_create_time(i),
                       create_institution   = l_create_institution(i),
                       update_user          = l_update_user(i),
                       update_time          = l_update_time(i),
                       update_institution   = l_update_institution(i),
                       id_prof_last_update  = l_id_prof_last_update(i),
                       dt_last_update_tstz  = l_dt_last_update_tstz(i)
                 WHERE id_interv_pp_modifiers = l_id_interv_pp_modifiers(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN interv_pp_modifiers_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE INTERV_PP_MODIFIERS
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE INTERV_PP_MODIFIERS
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE INTERV_PP_MODIFIERS set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE INTERV_PP_MODIFIERS set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_interv_pp_modifiers_in IN interv_pp_modifiers.id_interv_pp_modifiers%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_pp_modifiers
         WHERE id_interv_pp_modifiers = id_interv_pp_modifiers_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_interv_pp_modifiers_in IN interv_pp_modifiers.id_interv_pp_modifiers%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_interv_pp_modifiers_in => id_interv_pp_modifiers_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_INTERV_PP_MODIFIERS
    PROCEDURE del_id_interv_pp_modifiers
    (
        id_interv_pp_modifiers_in IN interv_pp_modifiers.id_interv_pp_modifiers%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_pp_modifiers
         WHERE id_interv_pp_modifiers = id_interv_pp_modifiers_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_interv_pp_modifiers;

    -- Delete all rows for primary key column ID_INTERV_PP_MODIFIERS
    PROCEDURE del_id_interv_pp_modifiers
    (
        id_interv_pp_modifiers_in IN interv_pp_modifiers.id_interv_pp_modifiers%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_interv_pp_modifiers(id_interv_pp_modifiers_in => id_interv_pp_modifiers_in,
                                   handle_error_in           => handle_error_in,
                                   rows_out                  => rows_out);
    END del_id_interv_pp_modifiers;

    PROCEDURE del_ipr_ct_fk
    (
        id_modifier_in   IN interv_pp_modifiers.id_modifier%TYPE,
        id_inst_owner_in IN interv_pp_modifiers.id_inst_owner%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_pp_modifiers
         WHERE id_modifier = del_ipr_ct_fk.id_modifier_in
           AND id_inst_owner = del_ipr_ct_fk.id_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ipr_ct_fk;

    PROCEDURE del_ipr_ct_fk
    (
        id_modifier_in   IN interv_pp_modifiers.id_modifier%TYPE,
        id_inst_owner_in IN interv_pp_modifiers.id_inst_owner%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ipr_ct_fk(id_modifier_in   => id_modifier_in,
                      id_inst_owner_in => id_inst_owner_in,
                      handle_error_in  => handle_error_in,
                      rows_out         => rows_out);
    END del_ipr_ct_fk;

    PROCEDURE del_ipr_ipn_fk
    (
        id_interv_presc_plan_in IN interv_pp_modifiers.id_interv_presc_plan%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_pp_modifiers
         WHERE id_interv_presc_plan = del_ipr_ipn_fk.id_interv_presc_plan_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ipr_ipn_fk;

    PROCEDURE del_ipr_ipn_fk
    (
        id_interv_presc_plan_in IN interv_pp_modifiers.id_interv_presc_plan%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ipr_ipn_fk(id_interv_presc_plan_in => id_interv_presc_plan_in,
                       handle_error_in         => handle_error_in,
                       rows_out                => rows_out);
    END del_ipr_ipn_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM INTERV_PP_MODIFIERS';
        ELSE
            RETURN 'DELETE FROM INTERV_PP_MODIFIERS WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PP_MODIFIERS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PP_MODIFIERS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(interv_pp_modifiers_inout IN OUT interv_pp_modifiers%ROWTYPE) IS
    BEGIN
        interv_pp_modifiers_inout.id_interv_pp_modifiers := NULL;
        interv_pp_modifiers_inout.id_interv_presc_plan   := NULL;
        interv_pp_modifiers_inout.id_modifier            := NULL;
        interv_pp_modifiers_inout.id_inst_owner          := NULL;
        interv_pp_modifiers_inout.create_user            := NULL;
        interv_pp_modifiers_inout.create_time            := NULL;
        interv_pp_modifiers_inout.create_institution     := NULL;
        interv_pp_modifiers_inout.update_user            := NULL;
        interv_pp_modifiers_inout.update_time            := NULL;
        interv_pp_modifiers_inout.update_institution     := NULL;
        interv_pp_modifiers_inout.id_prof_last_update    := NULL;
        interv_pp_modifiers_inout.dt_last_update_tstz    := NULL;
    END initrec;

    FUNCTION initrec RETURN interv_pp_modifiers%ROWTYPE IS
        l_interv_pp_modifiers interv_pp_modifiers%ROWTYPE;
    BEGIN
        RETURN l_interv_pp_modifiers;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN interv_pp_modifiers_tc IS
        data interv_pp_modifiers_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM interv_pp_modifiers
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN interv_pp_modifiers_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data interv_pp_modifiers_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_interv_pp_modifiers;
/
