/*-- Last Change Revision: $Rev: 1877368 $*/
/*-- Last Change by: $Author: adriano.ferreira $*/
/*-- Date of last change: $Date: 2018-11-12 15:39:19 +0000 (seg, 12 nov 2018) $*/

CREATE OR REPLACE PACKAGE BODY TS_TRIAL_HIST
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: MarÃ§o 18, 2011 15:40:9
| Created By: ALERT
*/
IS

   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_trial_hist_in IN TRIAL_HIST.ID_TRIAL_HIST%TYPE
      ,
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO TRIAL_HIST (
         ID_TRIAL_HIST,
         ID_TRIAL,
         NAME,
         CODE,
         FLG_STATUS,
         DT_RECORD,
         ID_PROF_RECORD,
         RESPONSIBLE,
         RESP_CONTACT_DET,
         NOTES,
         DT_START,
         DT_END,
         ID_INSTITUTION,
         FLG_TRIAL_TYPE,
         ID_CANCEL_INFO_DET,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         PHARMA_CODE,
         PHARMA_NAME
         )
      VALUES (
         id_trial_hist_in,
         id_trial_in,
         name_in,
         code_in,
         flg_status_in,
         dt_record_in,
         id_prof_record_in,
         responsible_in,
         resp_contact_det_in,
         notes_in,
         dt_start_in,
         dt_end_in,
         id_institution_in,
         flg_trial_type_in,
         id_cancel_info_det_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         pharma_code_in,
         pharma_name_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'TRIAL_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           IF l_name = 'TH_T_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_TRIAL'
               , value_in => id_trial_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_trial_hist_in IN TRIAL_HIST.ID_TRIAL_HIST%TYPE
      ,
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_trial_hist_in => id_trial_hist_in
      ,
      id_trial_in => id_trial_in,
      name_in => name_in,
      code_in => code_in,
      flg_status_in => flg_status_in,
      dt_record_in => dt_record_in,
      id_prof_record_in => id_prof_record_in,
      responsible_in => responsible_in,
      resp_contact_det_in => resp_contact_det_in,
      notes_in => notes_in,
      dt_start_in => dt_start_in,
      dt_end_in => dt_end_in,
      id_institution_in => id_institution_in,
      flg_trial_type_in => flg_trial_type_in,
      id_cancel_info_det_in => id_cancel_info_det_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      pharma_code_in => pharma_code_in,
      pharma_name_in => pharma_name_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;

   /*
   START Special logic for handling LOB columns....
   */

   PROCEDURE n_ins_clobs_in_chunks (
      id_trial_hist_in IN TRIAL_HIST.ID_TRIAL_HIST%TYPE,
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL,
      handle_error_in IN BOOLEAN := TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
   ) IS
        l_NOTES clob;
      i                PLS_INTEGER;
      current_column varchar2(30) := '';
   BEGIN
      /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
         variables from pointing to the same temporary CLOB (it creates copies).
         Otherwise, the code could have been written a bit more compactly. */

      FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
      LOOP
         /* Even when all clobs are null, DOA must send 1 row so skip it. */
         IF clob_columns_in (i) IS NOT NULL
         THEN
            IF current_column <> clob_columns_in (i) OR current_column IS NULL
            THEN
               current_column := LOWER (clob_columns_in (i));

               CASE current_column
                  WHEN 'notes_in'
                  THEN
                     IF l_NOTES IS NULL
                     THEN
                       DBMS_LOB.createtemporary (
                         l_NOTES, TRUE, DBMS_LOB.CALL);
                     END IF;
               END CASE;
            END IF;

            CASE current_column
              WHEN 'notes_in'
              THEN
                  DBMS_LOB.writeappend (l_NOTES
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
            END CASE;
         END IF;
      END LOOP;

      ins (
         id_trial_hist_in => id_trial_hist_in,
         id_trial_in => id_trial_in,
         name_in => name_in,
         code_in => code_in,
         flg_status_in => flg_status_in,
         dt_record_in => dt_record_in,
         id_prof_record_in => id_prof_record_in,
         responsible_in => responsible_in,
         resp_contact_det_in => resp_contact_det_in,
         notes_in => l_NOTES,
         dt_start_in => dt_start_in,
         dt_end_in => dt_end_in,
         id_institution_in => id_institution_in,
         flg_trial_type_in => flg_trial_type_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         pharma_code_in => pharma_code_in,
         pharma_name_in => pharma_name_in,
         handle_error_in => handle_error_in
         );

   END n_ins_clobs_in_chunks;

   PROCEDURE n_upd_clobs_in_chunks (
      id_trial_hist_in IN TRIAL_HIST.ID_TRIAL_HIST%TYPE,
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL,
      ignore_if_null_in IN BOOLEAN := TRUE,
      handle_error_in IN BOOLEAN := TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
      )
   IS
       l_NOTES clob;
      i                PLS_INTEGER;
      current_column varchar2(30) := '';
      l_rows PLS_INTEGER;
   BEGIN

      /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
         variables from pointing to the same temporary CLOB (it creates copies).
         Otherwise, the code could have been written a bit more compactly. */

      FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
      LOOP
         /* Even when all clobs are null, DOA must send 1 row so skip it. */
         IF clob_columns_in (i) IS NOT NULL
         THEN
            IF current_column <> clob_columns_in (i) OR current_column IS NULL
            THEN
               current_column := LOWER (clob_columns_in (i));

               CASE current_column
                  WHEN 'notes_in'
                  THEN
                    IF l_NOTES IS NULL
                    THEN
                      DBMS_LOB.createtemporary (
                         l_NOTES, TRUE, DBMS_LOB.CALL);
                    END IF;
               END CASE;
            END IF;

            CASE current_column
              WHEN 'notes_in'
              THEN
                  DBMS_LOB.writeappend (l_NOTES
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
            END CASE;
         END IF;
      END LOOP;

      upd (
         id_trial_hist_in => id_trial_hist_in,
         id_trial_in => id_trial_in,
         name_in => name_in,
         code_in => code_in,
         flg_status_in => flg_status_in,
         dt_record_in => dt_record_in,
         id_prof_record_in => id_prof_record_in,
         responsible_in => responsible_in,
         resp_contact_det_in => resp_contact_det_in,
         notes_in => l_NOTES,
         dt_start_in => dt_start_in,
         dt_end_in => dt_end_in,
         id_institution_in => id_institution_in,
         flg_trial_type_in => flg_trial_type_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         pharma_code_in => pharma_code_in,
         pharma_name_in => pharma_name_in,
         handle_error_in => handle_error_in
         );
   END n_upd_clobs_in_chunks;

   PROCEDURE n_upd_ins_clobs_in_chunks (
      id_trial_hist_in IN TRIAL_HIST.ID_TRIAL_HIST%TYPE,
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL,
      ignore_if_null_in IN BOOLEAN DEFAULT TRUE,
      handle_error_in IN BOOLEAN DEFAULT TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
      )
   IS
   BEGIN
      n_upd_clobs_in_chunks (
         id_trial_hist_in => id_trial_hist_in,
         id_trial_in => id_trial_in,
         name_in => name_in,
         code_in => code_in,
         flg_status_in => flg_status_in,
         dt_record_in => dt_record_in,
         id_prof_record_in => id_prof_record_in,
         responsible_in => responsible_in,
         resp_contact_det_in => resp_contact_det_in,
         dt_start_in => dt_start_in,
         dt_end_in => dt_end_in,
         id_institution_in => id_institution_in,
         flg_trial_type_in => flg_trial_type_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         pharma_code_in => pharma_code_in,
         pharma_name_in => pharma_name_in,
         clob_columns_in => clob_columns_in ,
         clob_pieces_in => clob_pieces_in ,
         ignore_if_null_in => ignore_if_null_in,
         handle_error_in => handle_error_in
       );

      IF SQL%ROWCOUNT = 0
      THEN
         n_ins_clobs_in_chunks (
            id_trial_hist_in => id_trial_hist_in,
            id_trial_in => id_trial_in,
            name_in => name_in,
            code_in => code_in,
            flg_status_in => flg_status_in,
            dt_record_in => dt_record_in,
            id_prof_record_in => id_prof_record_in,
            responsible_in => responsible_in,
            resp_contact_det_in => resp_contact_det_in,
            dt_start_in => dt_start_in,
            dt_end_in => dt_end_in,
            id_institution_in => id_institution_in,
            flg_trial_type_in => flg_trial_type_in,
            id_cancel_info_det_in => id_cancel_info_det_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            pharma_code_in => pharma_code_in,
            pharma_name_in => pharma_name_in,
            clob_columns_in => clob_columns_in ,
            clob_pieces_in => clob_pieces_in ,
            handle_error_in => handle_error_in
         );
      END IF;
   END n_upd_ins_clobs_in_chunks;

   /*
   END Special logic for handling LOB columns.
   */

   PROCEDURE ins (
      rec_in IN TRIAL_HIST%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec TRIAL_HIST%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_TRIAL_HIST := next_key (sequence_in);
      END IF;
      ins (
         id_trial_hist_in => l_rec.ID_TRIAL_HIST
         ,
         id_trial_in => l_rec.ID_TRIAL,
         name_in => l_rec.NAME,
         code_in => l_rec.CODE,
         flg_status_in => l_rec.FLG_STATUS,
         dt_record_in => l_rec.DT_RECORD,
         id_prof_record_in => l_rec.ID_PROF_RECORD,
         responsible_in => l_rec.RESPONSIBLE,
         resp_contact_det_in => l_rec.RESP_CONTACT_DET,
         notes_in => l_rec.NOTES,
         dt_start_in => l_rec.DT_START,
         dt_end_in => l_rec.DT_END,
         id_institution_in => l_rec.ID_INSTITUTION,
         flg_trial_type_in => l_rec.FLG_TRIAL_TYPE,
         id_cancel_info_det_in => l_rec.ID_CANCEL_INFO_DET,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         pharma_code_in => l_rec.PHARMA_CODE,
         pharma_name_in => l_rec.PHARMA_NAME
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN TRIAL_HIST%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN TRIAL_HIST.ID_TRIAL_HIST%TYPE

   IS
     retval TRIAL_HIST.ID_TRIAL_HIST%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_TRIAL_HIST.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_TRIAL_HIST')
           );
   END next_key;

   PROCEDURE ins (
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL,
      id_trial_hist_out IN OUT TRIAL_HIST.ID_TRIAL_HIST%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky TRIAL_HIST.ID_TRIAL_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_trial_hist_in => l_pky,
         id_trial_in => id_trial_in,
         name_in => name_in,
         code_in => code_in,
         flg_status_in => flg_status_in,
         dt_record_in => dt_record_in,
         id_prof_record_in => id_prof_record_in,
         responsible_in => responsible_in,
         resp_contact_det_in => resp_contact_det_in,
         notes_in => notes_in,
         dt_start_in => dt_start_in,
         dt_end_in => dt_end_in,
         id_institution_in => id_institution_in,
         flg_trial_type_in => flg_trial_type_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         pharma_code_in => pharma_code_in,
         pharma_name_in => pharma_name_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_trial_hist_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL,
      id_trial_hist_out IN OUT TRIAL_HIST.ID_TRIAL_HIST%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_trial_in => id_trial_in,
      name_in => name_in,
      code_in => code_in,
      flg_status_in => flg_status_in,
      dt_record_in => dt_record_in,
      id_prof_record_in => id_prof_record_in,
      responsible_in => responsible_in,
      resp_contact_det_in => resp_contact_det_in,
      notes_in => notes_in,
      dt_start_in => dt_start_in,
      dt_end_in => dt_end_in,
      id_institution_in => id_institution_in,
      flg_trial_type_in => flg_trial_type_in,
      id_cancel_info_det_in => id_cancel_info_det_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      pharma_code_in => pharma_code_in,
      pharma_name_in => pharma_name_in,
      id_trial_hist_out => id_trial_hist_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         TRIAL_HIST.ID_TRIAL_HIST%TYPE
   IS
        l_pky TRIAL_HIST.ID_TRIAL_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_trial_hist_in => l_pky,
         id_trial_in => id_trial_in,
         name_in => name_in,
         code_in => code_in,
         flg_status_in => flg_status_in,
         dt_record_in => dt_record_in,
         id_prof_record_in => id_prof_record_in,
         responsible_in => responsible_in,
         resp_contact_det_in => resp_contact_det_in,
         notes_in => notes_in,
         dt_start_in => dt_start_in,
         dt_end_in => dt_end_in,
         id_institution_in => id_institution_in,
         flg_trial_type_in => flg_trial_type_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         pharma_code_in => pharma_code_in,
         pharma_name_in => pharma_name_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         TRIAL_HIST.ID_TRIAL_HIST%TYPE
   IS
        l_pky TRIAL_HIST.ID_TRIAL_HIST%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_trial_hist_in => l_pky,
         id_trial_in => id_trial_in,
         name_in => name_in,
         code_in => code_in,
         flg_status_in => flg_status_in,
         dt_record_in => dt_record_in,
         id_prof_record_in => id_prof_record_in,
         responsible_in => responsible_in,
         resp_contact_det_in => resp_contact_det_in,
         notes_in => notes_in,
         dt_start_in => dt_start_in,
         dt_end_in => dt_end_in,
         id_institution_in => id_institution_in,
         flg_trial_type_in => flg_trial_type_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         pharma_code_in => pharma_code_in,
         pharma_name_in => pharma_name_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky TRIAL_HIST.ID_TRIAL_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_trial_hist_in => l_pky,
         id_trial_in => id_trial_in,
         name_in => name_in,
         code_in => code_in,
         flg_status_in => flg_status_in,
         dt_record_in => dt_record_in,
         id_prof_record_in => id_prof_record_in,
         responsible_in => responsible_in,
         resp_contact_det_in => resp_contact_det_in,
         notes_in => notes_in,
         dt_start_in => dt_start_in,
         dt_end_in => dt_end_in,
         id_institution_in => id_institution_in,
         flg_trial_type_in => flg_trial_type_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         pharma_code_in => pharma_code_in,
         pharma_name_in => pharma_name_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky TRIAL_HIST.ID_TRIAL_HIST%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_trial_hist_in => l_pky,
         id_trial_in => id_trial_in,
         name_in => name_in,
         code_in => code_in,
         flg_status_in => flg_status_in,
         dt_record_in => dt_record_in,
         id_prof_record_in => id_prof_record_in,
         responsible_in => responsible_in,
         resp_contact_det_in => resp_contact_det_in,
         notes_in => notes_in,
         dt_start_in => dt_start_in,
         dt_end_in => dt_end_in,
         id_institution_in => id_institution_in,
         flg_trial_type_in => flg_trial_type_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         pharma_code_in => pharma_code_in,
         pharma_name_in => pharma_name_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN TRIAL_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO TRIAL_HIST VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_TRIAL_HIST _' || indx
                  ,value_in => rows_in(indx).ID_TRIAL_HIST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_TRIAL _' || indx
                  ,value_in => rows_in(indx).ID_TRIAL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NAME _' || indx
                  ,value_in => rows_in(indx).NAME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CODE _' || indx
                  ,value_in => rows_in(indx).CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(indx).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_RECORD _' || indx
                  ,value_in => rows_in(indx).DT_RECORD
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_RECORD _' || indx
                  ,value_in => rows_in(indx).ID_PROF_RECORD
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'RESPONSIBLE _' || indx
                  ,value_in => rows_in(indx).RESPONSIBLE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'RESP_CONTACT_DET _' || indx
                  ,value_in => rows_in(indx).RESP_CONTACT_DET
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_START _' || indx
                  ,value_in => rows_in(indx).DT_START
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_END _' || indx
                  ,value_in => rows_in(indx).DT_END
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).ID_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_TRIAL_TYPE _' || indx
                  ,value_in => rows_in(indx).FLG_TRIAL_TYPE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CANCEL_INFO_DET _' || indx
                  ,value_in => rows_in(indx).ID_CANCEL_INFO_DET
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(indx).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(indx).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(indx).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(indx).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'PHARMA_CODE _' || indx
                  ,value_in => rows_in(indx).PHARMA_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'PHARMA_NAME _' || indx
                  ,value_in => rows_in(indx).PHARMA_NAME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'TRIAL_HIST'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN TRIAL_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_trial_hist_in IN TRIAL_HIST.ID_TRIAL_HIST%TYPE,
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      ID_TRIAL_nin IN BOOLEAN := TRUE,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      NAME_nin IN BOOLEAN := TRUE,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      CODE_nin IN BOOLEAN := TRUE,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      DT_RECORD_nin IN BOOLEAN := TRUE,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      ID_PROF_RECORD_nin IN BOOLEAN := TRUE,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      RESPONSIBLE_nin IN BOOLEAN := TRUE,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      RESP_CONTACT_DET_nin IN BOOLEAN := TRUE,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      DT_START_nin IN BOOLEAN := TRUE,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      DT_END_nin IN BOOLEAN := TRUE,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      FLG_TRIAL_TYPE_nin IN BOOLEAN := TRUE,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      ID_CANCEL_INFO_DET_nin IN BOOLEAN := TRUE,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      PHARMA_CODE_nin IN BOOLEAN := TRUE,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL,
      PHARMA_NAME_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_TRIAL_n NUMBER(1);
   l_NAME_n NUMBER(1);
   l_CODE_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_DT_RECORD_n NUMBER(1);
   l_ID_PROF_RECORD_n NUMBER(1);
   l_RESPONSIBLE_n NUMBER(1);
   l_RESP_CONTACT_DET_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_DT_START_n NUMBER(1);
   l_DT_END_n NUMBER(1);
   l_ID_INSTITUTION_n NUMBER(1);
   l_FLG_TRIAL_TYPE_n NUMBER(1);
   l_ID_CANCEL_INFO_DET_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_PHARMA_CODE_n NUMBER(1);
   l_PHARMA_NAME_n NUMBER(1);
   BEGIN

   l_ID_TRIAL_n := sys.diutil.bool_to_int(ID_TRIAL_nin);
   l_NAME_n := sys.diutil.bool_to_int(NAME_nin);
   l_CODE_n := sys.diutil.bool_to_int(CODE_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_DT_RECORD_n := sys.diutil.bool_to_int(DT_RECORD_nin);
   l_ID_PROF_RECORD_n := sys.diutil.bool_to_int(ID_PROF_RECORD_nin);
   l_RESPONSIBLE_n := sys.diutil.bool_to_int(RESPONSIBLE_nin);
   l_RESP_CONTACT_DET_n := sys.diutil.bool_to_int(RESP_CONTACT_DET_nin);
   l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
   l_DT_START_n := sys.diutil.bool_to_int(DT_START_nin);
   l_DT_END_n := sys.diutil.bool_to_int(DT_END_nin);
   l_ID_INSTITUTION_n := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
   l_FLG_TRIAL_TYPE_n := sys.diutil.bool_to_int(FLG_TRIAL_TYPE_nin);
   l_ID_CANCEL_INFO_DET_n := sys.diutil.bool_to_int(ID_CANCEL_INFO_DET_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_PHARMA_CODE_n := sys.diutil.bool_to_int(PHARMA_CODE_nin);
   l_PHARMA_NAME_n := sys.diutil.bool_to_int(PHARMA_NAME_nin);


         UPDATE TRIAL_HIST SET
     ID_TRIAL = decode (l_ID_TRIAL_n,0,id_trial_in, NVL (id_trial_in, ID_TRIAL)),
     NAME = decode (l_NAME_n,0,name_in, NVL (name_in, NAME)),
     CODE = decode (l_CODE_n,0,code_in, NVL (code_in, CODE)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     DT_RECORD = decode (l_DT_RECORD_n,0,dt_record_in, NVL (dt_record_in, DT_RECORD)),
     ID_PROF_RECORD = decode (l_ID_PROF_RECORD_n,0,id_prof_record_in, NVL (id_prof_record_in, ID_PROF_RECORD)),
     RESPONSIBLE = decode (l_RESPONSIBLE_n,0,responsible_in, NVL (responsible_in, RESPONSIBLE)),
     RESP_CONTACT_DET = decode (l_RESP_CONTACT_DET_n,0,resp_contact_det_in, NVL (resp_contact_det_in, RESP_CONTACT_DET)),
     NOTES = decode (l_NOTES_n,0,notes_in, NVL (notes_in, NOTES)),
     DT_START = decode (l_DT_START_n,0,dt_start_in, NVL (dt_start_in, DT_START)),
     DT_END = decode (l_DT_END_n,0,dt_end_in, NVL (dt_end_in, DT_END)),
     ID_INSTITUTION = decode (l_ID_INSTITUTION_n,0,id_institution_in, NVL (id_institution_in, ID_INSTITUTION)),
     FLG_TRIAL_TYPE = decode (l_FLG_TRIAL_TYPE_n,0,flg_trial_type_in, NVL (flg_trial_type_in, FLG_TRIAL_TYPE)),
     ID_CANCEL_INFO_DET = decode (l_ID_CANCEL_INFO_DET_n,0,id_cancel_info_det_in, NVL (id_cancel_info_det_in, ID_CANCEL_INFO_DET)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     PHARMA_CODE = decode (l_PHARMA_CODE_n,0,pharma_code_in, NVL (pharma_code_in, PHARMA_CODE)),
     PHARMA_NAME = decode (l_PHARMA_NAME_n,0,pharma_name_in, NVL (pharma_name_in, PHARMA_NAME))
          WHERE
             ID_TRIAL_HIST = id_trial_hist_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'TRIAL_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           IF l_name = 'TH_T_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_TRIAL'
               , value_in => id_trial_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_trial_hist_in IN TRIAL_HIST.ID_TRIAL_HIST%TYPE,
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      ID_TRIAL_nin IN BOOLEAN := TRUE,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      NAME_nin IN BOOLEAN := TRUE,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      CODE_nin IN BOOLEAN := TRUE,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      DT_RECORD_nin IN BOOLEAN := TRUE,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      ID_PROF_RECORD_nin IN BOOLEAN := TRUE,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      RESPONSIBLE_nin IN BOOLEAN := TRUE,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      RESP_CONTACT_DET_nin IN BOOLEAN := TRUE,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      DT_START_nin IN BOOLEAN := TRUE,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      DT_END_nin IN BOOLEAN := TRUE,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      FLG_TRIAL_TYPE_nin IN BOOLEAN := TRUE,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      ID_CANCEL_INFO_DET_nin IN BOOLEAN := TRUE,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      PHARMA_CODE_nin IN BOOLEAN := TRUE,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL,
      PHARMA_NAME_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_trial_hist_in => id_trial_hist_in,
      id_trial_in => id_trial_in,
      ID_TRIAL_nin => ID_TRIAL_nin,
      name_in => name_in,
      NAME_nin => NAME_nin,
      code_in => code_in,
      CODE_nin => CODE_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      dt_record_in => dt_record_in,
      DT_RECORD_nin => DT_RECORD_nin,
      id_prof_record_in => id_prof_record_in,
      ID_PROF_RECORD_nin => ID_PROF_RECORD_nin,
      responsible_in => responsible_in,
      RESPONSIBLE_nin => RESPONSIBLE_nin,
      resp_contact_det_in => resp_contact_det_in,
      RESP_CONTACT_DET_nin => RESP_CONTACT_DET_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      dt_start_in => dt_start_in,
      DT_START_nin => DT_START_nin,
      dt_end_in => dt_end_in,
      DT_END_nin => DT_END_nin,
      id_institution_in => id_institution_in,
      ID_INSTITUTION_nin => ID_INSTITUTION_nin,
      flg_trial_type_in => flg_trial_type_in,
      FLG_TRIAL_TYPE_nin => FLG_TRIAL_TYPE_nin,
      id_cancel_info_det_in => id_cancel_info_det_in,
      ID_CANCEL_INFO_DET_nin => ID_CANCEL_INFO_DET_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      pharma_code_in => pharma_code_in,
      PHARMA_CODE_nin => PHARMA_CODE_nin,
      pharma_name_in => pharma_name_in,
      PHARMA_NAME_nin => PHARMA_NAME_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      ID_TRIAL_nin IN BOOLEAN := TRUE,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      NAME_nin IN BOOLEAN := TRUE,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      CODE_nin IN BOOLEAN := TRUE,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      DT_RECORD_nin IN BOOLEAN := TRUE,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      ID_PROF_RECORD_nin IN BOOLEAN := TRUE,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      RESPONSIBLE_nin IN BOOLEAN := TRUE,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      RESP_CONTACT_DET_nin IN BOOLEAN := TRUE,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      DT_START_nin IN BOOLEAN := TRUE,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      DT_END_nin IN BOOLEAN := TRUE,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      FLG_TRIAL_TYPE_nin IN BOOLEAN := TRUE,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      ID_CANCEL_INFO_DET_nin IN BOOLEAN := TRUE,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      PHARMA_CODE_nin IN BOOLEAN := TRUE,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL,
      PHARMA_NAME_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_TRIAL_n NUMBER(1);
   l_NAME_n NUMBER(1);
   l_CODE_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_DT_RECORD_n NUMBER(1);
   l_ID_PROF_RECORD_n NUMBER(1);
   l_RESPONSIBLE_n NUMBER(1);
   l_RESP_CONTACT_DET_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_DT_START_n NUMBER(1);
   l_DT_END_n NUMBER(1);
   l_ID_INSTITUTION_n NUMBER(1);
   l_FLG_TRIAL_TYPE_n NUMBER(1);
   l_ID_CANCEL_INFO_DET_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_PHARMA_CODE_n NUMBER(1);
   l_PHARMA_NAME_n NUMBER(1);
      id_trial_hist_in TRIAL_HIST.ID_TRIAL_HIST%TYPE;
   BEGIN



      l_ID_TRIAL_n := sys.diutil.bool_to_int(ID_TRIAL_nin);
      l_NAME_n := sys.diutil.bool_to_int(NAME_nin);
      l_CODE_n := sys.diutil.bool_to_int(CODE_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_DT_RECORD_n := sys.diutil.bool_to_int(DT_RECORD_nin);
      l_ID_PROF_RECORD_n := sys.diutil.bool_to_int(ID_PROF_RECORD_nin);
      l_RESPONSIBLE_n := sys.diutil.bool_to_int(RESPONSIBLE_nin);
      l_RESP_CONTACT_DET_n := sys.diutil.bool_to_int(RESP_CONTACT_DET_nin);
      l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
      l_DT_START_n := sys.diutil.bool_to_int(DT_START_nin);
      l_DT_END_n := sys.diutil.bool_to_int(DT_END_nin);
      l_ID_INSTITUTION_n := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
      l_FLG_TRIAL_TYPE_n := sys.diutil.bool_to_int(FLG_TRIAL_TYPE_nin);
      l_ID_CANCEL_INFO_DET_n := sys.diutil.bool_to_int(ID_CANCEL_INFO_DET_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_PHARMA_CODE_n := sys.diutil.bool_to_int(PHARMA_CODE_nin);
      l_PHARMA_NAME_n := sys.diutil.bool_to_int(PHARMA_NAME_nin);



l_sql := 'UPDATE TRIAL_HIST SET '
     || ' ID_TRIAL = decode (' || l_ID_TRIAL_n || ',0,:id_trial_in, NVL (:id_trial_in, ID_TRIAL)) '|| ','
     || ' NAME = decode (' || l_NAME_n || ',0,:name_in, NVL (:name_in, NAME)) '|| ','
     || ' CODE = decode (' || l_CODE_n || ',0,:code_in, NVL (:code_in, CODE)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' DT_RECORD = decode (' || l_DT_RECORD_n || ',0,:dt_record_in, NVL (:dt_record_in, DT_RECORD)) '|| ','
     || ' ID_PROF_RECORD = decode (' || l_ID_PROF_RECORD_n || ',0,:id_prof_record_in, NVL (:id_prof_record_in, ID_PROF_RECORD)) '|| ','
     || ' RESPONSIBLE = decode (' || l_RESPONSIBLE_n || ',0,:responsible_in, NVL (:responsible_in, RESPONSIBLE)) '|| ','
     || ' RESP_CONTACT_DET = decode (' || l_RESP_CONTACT_DET_n || ',0,:resp_contact_det_in, NVL (:resp_contact_det_in, RESP_CONTACT_DET)) '|| ','
     || ' NOTES = decode (' || l_NOTES_n || ',0,:notes_in, NVL (:notes_in, NOTES)) '|| ','
     || ' DT_START = decode (' || l_DT_START_n || ',0,:dt_start_in, NVL (:dt_start_in, DT_START)) '|| ','
     || ' DT_END = decode (' || l_DT_END_n || ',0,:dt_end_in, NVL (:dt_end_in, DT_END)) '|| ','
     || ' ID_INSTITUTION = decode (' || l_ID_INSTITUTION_n || ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) '|| ','
     || ' FLG_TRIAL_TYPE = decode (' || l_FLG_TRIAL_TYPE_n || ',0,:flg_trial_type_in, NVL (:flg_trial_type_in, FLG_TRIAL_TYPE)) '|| ','
     || ' ID_CANCEL_INFO_DET = decode (' || l_ID_CANCEL_INFO_DET_n || ',0,:id_cancel_info_det_in, NVL (:id_cancel_info_det_in, ID_CANCEL_INFO_DET)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' PHARMA_CODE = decode (' || l_PHARMA_CODE_n || ',0,:pharma_code_in, NVL (:pharma_code_in, PHARMA_CODE)) '|| ','
     || ' PHARMA_NAME = decode (' || l_PHARMA_NAME_n || ',0,:pharma_name_in, NVL (:pharma_name_in, PHARMA_NAME)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_trial_in,
     name_in,
     code_in,
     flg_status_in,
     dt_record_in,
     id_prof_record_in,
     responsible_in,
     resp_contact_det_in,
     notes_in,
     dt_start_in,
     dt_end_in,
     id_institution_in,
     flg_trial_type_in,
     id_cancel_info_det_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     pharma_code_in,
     pharma_name_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'TRIAL_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           IF l_name = 'TH_T_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_TRIAL'
               , value_in => id_trial_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      ID_TRIAL_nin IN BOOLEAN := TRUE,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      NAME_nin IN BOOLEAN := TRUE,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      CODE_nin IN BOOLEAN := TRUE,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      DT_RECORD_nin IN BOOLEAN := TRUE,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      ID_PROF_RECORD_nin IN BOOLEAN := TRUE,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      RESPONSIBLE_nin IN BOOLEAN := TRUE,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      RESP_CONTACT_DET_nin IN BOOLEAN := TRUE,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      DT_START_nin IN BOOLEAN := TRUE,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      DT_END_nin IN BOOLEAN := TRUE,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      FLG_TRIAL_TYPE_nin IN BOOLEAN := TRUE,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      ID_CANCEL_INFO_DET_nin IN BOOLEAN := TRUE,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      PHARMA_CODE_nin IN BOOLEAN := TRUE,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL,
      PHARMA_NAME_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_trial_in => id_trial_in,
      ID_TRIAL_nin => ID_TRIAL_nin,
      name_in => name_in,
      NAME_nin => NAME_nin,
      code_in => code_in,
      CODE_nin => CODE_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      dt_record_in => dt_record_in,
      DT_RECORD_nin => DT_RECORD_nin,
      id_prof_record_in => id_prof_record_in,
      ID_PROF_RECORD_nin => ID_PROF_RECORD_nin,
      responsible_in => responsible_in,
      RESPONSIBLE_nin => RESPONSIBLE_nin,
      resp_contact_det_in => resp_contact_det_in,
      RESP_CONTACT_DET_nin => RESP_CONTACT_DET_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      dt_start_in => dt_start_in,
      DT_START_nin => DT_START_nin,
      dt_end_in => dt_end_in,
      DT_END_nin => DT_END_nin,
      id_institution_in => id_institution_in,
      ID_INSTITUTION_nin => ID_INSTITUTION_nin,
      flg_trial_type_in => flg_trial_type_in,
      FLG_TRIAL_TYPE_nin => FLG_TRIAL_TYPE_nin,
      id_cancel_info_det_in => id_cancel_info_det_in,
      ID_CANCEL_INFO_DET_nin => ID_CANCEL_INFO_DET_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      pharma_code_in => pharma_code_in,
      PHARMA_CODE_nin => PHARMA_CODE_nin,
      pharma_name_in => pharma_name_in,
      PHARMA_NAME_nin => PHARMA_NAME_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN TRIAL_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_trial_hist_in => rec_in.ID_TRIAL_HIST,
         id_trial_in => rec_in.ID_TRIAL,
         name_in => rec_in.NAME,
         code_in => rec_in.CODE,
         flg_status_in => rec_in.FLG_STATUS,
         dt_record_in => rec_in.DT_RECORD,
         id_prof_record_in => rec_in.ID_PROF_RECORD,
         responsible_in => rec_in.RESPONSIBLE,
         resp_contact_det_in => rec_in.RESP_CONTACT_DET,
         notes_in => rec_in.NOTES,
         dt_start_in => rec_in.DT_START,
         dt_end_in => rec_in.DT_END,
         id_institution_in => rec_in.ID_INSTITUTION,
         flg_trial_type_in => rec_in.FLG_TRIAL_TYPE,
         id_cancel_info_det_in => rec_in.ID_CANCEL_INFO_DET,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         pharma_code_in => rec_in.PHARMA_CODE,
         pharma_name_in => rec_in.PHARMA_NAME

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN TRIAL_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_trial_hist_in => rec_in.ID_TRIAL_HIST,
         id_trial_in => rec_in.ID_TRIAL,
         name_in => rec_in.NAME,
         code_in => rec_in.CODE,
         flg_status_in => rec_in.FLG_STATUS,
         dt_record_in => rec_in.DT_RECORD,
         id_prof_record_in => rec_in.ID_PROF_RECORD,
         responsible_in => rec_in.RESPONSIBLE,
         resp_contact_det_in => rec_in.RESP_CONTACT_DET,
         notes_in => rec_in.NOTES,
         dt_start_in => rec_in.DT_START,
         dt_end_in => rec_in.DT_END,
         id_institution_in => rec_in.ID_INSTITUTION,
         flg_trial_type_in => rec_in.FLG_TRIAL_TYPE,
         id_cancel_info_det_in => rec_in.ID_CANCEL_INFO_DET,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         pharma_code_in => rec_in.PHARMA_CODE,
         pharma_name_in => rec_in.PHARMA_NAME

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_trial_hist_in IN TRIAL_HIST.ID_TRIAL_HIST%TYPE,
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_trial_hist_in => id_trial_hist_in,
         id_trial_in => id_trial_in,
         name_in => name_in,
         code_in => code_in,
         flg_status_in => flg_status_in,
         dt_record_in => dt_record_in,
         id_prof_record_in => id_prof_record_in,
         responsible_in => responsible_in,
         resp_contact_det_in => resp_contact_det_in,
         notes_in => notes_in,
         dt_start_in => dt_start_in,
         dt_end_in => dt_end_in,
         id_institution_in => id_institution_in,
         flg_trial_type_in => flg_trial_type_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         pharma_code_in => pharma_code_in,
         pharma_name_in => pharma_name_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_trial_hist_in => id_trial_hist_in,
            id_trial_in => id_trial_in,
            name_in => name_in,
            code_in => code_in,
            flg_status_in => flg_status_in,
            dt_record_in => dt_record_in,
            id_prof_record_in => id_prof_record_in,
            responsible_in => responsible_in,
            resp_contact_det_in => resp_contact_det_in,
            notes_in => notes_in,
            dt_start_in => dt_start_in,
            dt_end_in => dt_end_in,
            id_institution_in => id_institution_in,
            flg_trial_type_in => flg_trial_type_in,
            id_cancel_info_det_in => id_cancel_info_det_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            pharma_code_in => pharma_code_in,
            pharma_name_in => pharma_name_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_trial_hist_in IN TRIAL_HIST.ID_TRIAL_HIST%TYPE,
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE DEFAULT NULL,
      name_in IN TRIAL_HIST.NAME%TYPE DEFAULT NULL,
      code_in IN TRIAL_HIST.CODE%TYPE DEFAULT NULL,
      flg_status_in IN TRIAL_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_record_in IN TRIAL_HIST.DT_RECORD%TYPE DEFAULT NULL,
      id_prof_record_in IN TRIAL_HIST.ID_PROF_RECORD%TYPE DEFAULT NULL,
      responsible_in IN TRIAL_HIST.RESPONSIBLE%TYPE DEFAULT NULL,
      resp_contact_det_in IN TRIAL_HIST.RESP_CONTACT_DET%TYPE DEFAULT NULL,
      notes_in IN TRIAL_HIST.NOTES%TYPE DEFAULT NULL,
      dt_start_in IN TRIAL_HIST.DT_START%TYPE DEFAULT NULL,
      dt_end_in IN TRIAL_HIST.DT_END%TYPE DEFAULT NULL,
      id_institution_in IN TRIAL_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      flg_trial_type_in IN TRIAL_HIST.FLG_TRIAL_TYPE%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN TRIAL_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      create_user_in IN TRIAL_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TRIAL_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TRIAL_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TRIAL_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TRIAL_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TRIAL_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      pharma_code_in IN TRIAL_HIST.PHARMA_CODE%TYPE DEFAULT NULL,
      pharma_name_in IN TRIAL_HIST.PHARMA_NAME%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_trial_hist_in,
      id_trial_in,
      name_in,
      code_in,
      flg_status_in,
      dt_record_in,
      id_prof_record_in,
      responsible_in,
      resp_contact_det_in,
      notes_in,
      dt_start_in,
      dt_end_in,
      id_institution_in,
      flg_trial_type_in,
      id_cancel_info_det_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      pharma_code_in,
      pharma_name_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN TRIAL_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_TRIAL_HIST ID_TRIAL_HIST_cc;
      l_ID_TRIAL ID_TRIAL_cc;
      l_NAME NAME_cc;
      l_CODE CODE_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_DT_RECORD DT_RECORD_cc;
      l_ID_PROF_RECORD ID_PROF_RECORD_cc;
      l_RESPONSIBLE RESPONSIBLE_cc;
      l_RESP_CONTACT_DET RESP_CONTACT_DET_cc;
      l_NOTES NOTES_cc;
      l_DT_START DT_START_cc;
      l_DT_END DT_END_cc;
      l_ID_INSTITUTION ID_INSTITUTION_cc;
      l_FLG_TRIAL_TYPE FLG_TRIAL_TYPE_cc;
      l_ID_CANCEL_INFO_DET ID_CANCEL_INFO_DET_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_PHARMA_CODE PHARMA_CODE_cc;
      l_PHARMA_NAME PHARMA_NAME_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_TRIAL_HIST(i) := col_in(i).ID_TRIAL_HIST;
         l_ID_TRIAL(i) := col_in(i).ID_TRIAL;
         l_NAME(i) := col_in(i).NAME;
         l_CODE(i) := col_in(i).CODE;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_DT_RECORD(i) := col_in(i).DT_RECORD;
         l_ID_PROF_RECORD(i) := col_in(i).ID_PROF_RECORD;
         l_RESPONSIBLE(i) := col_in(i).RESPONSIBLE;
         l_RESP_CONTACT_DET(i) := col_in(i).RESP_CONTACT_DET;
         l_NOTES(i) := col_in(i).NOTES;
         l_DT_START(i) := col_in(i).DT_START;
         l_DT_END(i) := col_in(i).DT_END;
         l_ID_INSTITUTION(i) := col_in(i).ID_INSTITUTION;
         l_FLG_TRIAL_TYPE(i) := col_in(i).FLG_TRIAL_TYPE;
         l_ID_CANCEL_INFO_DET(i) := col_in(i).ID_CANCEL_INFO_DET;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_PHARMA_CODE(i) := col_in(i).PHARMA_CODE;
         l_PHARMA_NAME(i) := col_in(i).PHARMA_NAME;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE TRIAL_HIST SET
               ID_TRIAL = NVL (l_ID_TRIAL(i), ID_TRIAL),
               NAME = NVL (l_NAME(i), NAME),
               CODE = NVL (l_CODE(i), CODE),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               DT_RECORD = NVL (l_DT_RECORD(i), DT_RECORD),
               ID_PROF_RECORD = NVL (l_ID_PROF_RECORD(i), ID_PROF_RECORD),
               RESPONSIBLE = NVL (l_RESPONSIBLE(i), RESPONSIBLE),
               RESP_CONTACT_DET = NVL (l_RESP_CONTACT_DET(i), RESP_CONTACT_DET),
               NOTES = NVL (l_NOTES(i), NOTES),
               DT_START = NVL (l_DT_START(i), DT_START),
               DT_END = NVL (l_DT_END(i), DT_END),
               ID_INSTITUTION = NVL (l_ID_INSTITUTION(i), ID_INSTITUTION),
               FLG_TRIAL_TYPE = NVL (l_FLG_TRIAL_TYPE(i), FLG_TRIAL_TYPE),
               ID_CANCEL_INFO_DET = NVL (l_ID_CANCEL_INFO_DET(i), ID_CANCEL_INFO_DET),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               PHARMA_CODE = NVL (l_PHARMA_CODE(i), PHARMA_CODE),
               PHARMA_NAME = NVL (l_PHARMA_NAME(i), PHARMA_NAME)
             WHERE
                ID_TRIAL_HIST = l_ID_TRIAL_HIST(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE TRIAL_HIST SET
               ID_TRIAL = l_ID_TRIAL(i),
               NAME = l_NAME(i),
               CODE = l_CODE(i),
               FLG_STATUS = l_FLG_STATUS(i),
               DT_RECORD = l_DT_RECORD(i),
               ID_PROF_RECORD = l_ID_PROF_RECORD(i),
               RESPONSIBLE = l_RESPONSIBLE(i),
               RESP_CONTACT_DET = l_RESP_CONTACT_DET(i),
               NOTES = l_NOTES(i),
               DT_START = l_DT_START(i),
               DT_END = l_DT_END(i),
               ID_INSTITUTION = l_ID_INSTITUTION(i),
               FLG_TRIAL_TYPE = l_FLG_TRIAL_TYPE(i),
               ID_CANCEL_INFO_DET = l_ID_CANCEL_INFO_DET(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               PHARMA_CODE = l_PHARMA_CODE(i),
               PHARMA_NAME = l_PHARMA_NAME(i)
             WHERE
                ID_TRIAL_HIST = l_ID_TRIAL_HIST(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN TRIAL_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE TRIAL_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE TRIAL_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE TRIAL_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE TRIAL_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_trial_hist_in IN TRIAL_HIST.ID_TRIAL_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM TRIAL_HIST
       WHERE
          ID_TRIAL_HIST = id_trial_hist_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_trial_hist_in IN TRIAL_HIST.ID_TRIAL_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_trial_hist_in => id_trial_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_TRIAL_HIST
   PROCEDURE del_ID_TRIAL_HIST (
      id_trial_hist_in IN TRIAL_HIST.ID_TRIAL_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM TRIAL_HIST
       WHERE ID_TRIAL_HIST = id_trial_hist_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_TRIAL_HIST;






   -- Delete all rows for primary key column ID_TRIAL_HIST
   PROCEDURE del_ID_TRIAL_HIST (
      id_trial_hist_in IN TRIAL_HIST.ID_TRIAL_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_TRIAL_HIST (
      id_trial_hist_in => id_trial_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_TRIAL_HIST;















   PROCEDURE del_TH_T_FK (
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM TRIAL_HIST
       WHERE
          ID_TRIAL = del_TH_T_FK.id_trial_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_TH_T_FK;



PROCEDURE del_TH_T_FK (
      id_trial_in IN TRIAL_HIST.ID_TRIAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_TH_T_FK (
      id_trial_in => id_trial_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_TH_T_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM TRIAL_HIST';
      ELSE
         RETURN
            'DELETE FROM TRIAL_HIST WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TRIAL_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TRIAL_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      trial_hist_inout IN OUT TRIAL_HIST%ROWTYPE
   )
   IS
   BEGIN
      trial_hist_inout.ID_TRIAL_HIST := NULL;
      trial_hist_inout.ID_TRIAL := NULL;
      trial_hist_inout.NAME := NULL;
      trial_hist_inout.CODE := NULL;
      trial_hist_inout.FLG_STATUS := NULL;
      trial_hist_inout.DT_RECORD := NULL;
      trial_hist_inout.ID_PROF_RECORD := NULL;
      trial_hist_inout.RESPONSIBLE := NULL;
      trial_hist_inout.RESP_CONTACT_DET := NULL;
      trial_hist_inout.NOTES := NULL;
      trial_hist_inout.DT_START := NULL;
      trial_hist_inout.DT_END := NULL;
      trial_hist_inout.ID_INSTITUTION := NULL;
      trial_hist_inout.FLG_TRIAL_TYPE := NULL;
      trial_hist_inout.ID_CANCEL_INFO_DET := NULL;
      trial_hist_inout.CREATE_USER := NULL;
      trial_hist_inout.CREATE_TIME := NULL;
      trial_hist_inout.CREATE_INSTITUTION := NULL;
      trial_hist_inout.UPDATE_USER := NULL;
      trial_hist_inout.UPDATE_TIME := NULL;
      trial_hist_inout.UPDATE_INSTITUTION := NULL;
      trial_hist_inout.PHARMA_CODE := NULL;
      trial_hist_inout.PHARMA_NAME := NULL;
   END initrec;

   FUNCTION initrec RETURN TRIAL_HIST%ROWTYPE
   IS
      l_trial_hist TRIAL_HIST%ROWTYPE;
   BEGIN
      RETURN l_trial_hist;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN TRIAL_HIST_tc
   IS
        data TRIAL_HIST_tc;
   BEGIN
        select * bulk collect into data from TRIAL_HIST where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN TRIAL_HIST_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data TRIAL_HIST_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_TRIAL_HIST;
/
