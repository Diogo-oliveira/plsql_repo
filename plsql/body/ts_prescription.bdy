/*-- Last Change Revision: $Rev: 2028326 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:07 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_prescription
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 21, 2008 18:26:18
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_prescription_in       IN prescription.id_prescription%TYPE,
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO prescription
            (id_prescription,
             id_episode,
             id_patient,
             id_professional,
             flg_status,
             id_prof_cancel,
             notes_cancel,
             id_institution,
             id_software,
             id_institution_cancel,
             id_software_cancel,
             flg_type,
             flg_sub_type,
             flg_print_type,
             id_prof_print,
             id_prev_episode,
             dt_prescription_tstz,
             dt_cancel_tstz,
             dt_prof_print_tstz)
        VALUES
            (id_prescription_in,
             id_episode_in,
             id_patient_in,
             id_professional_in,
             flg_status_in,
             id_prof_cancel_in,
             notes_cancel_in,
             id_institution_in,
             id_software_in,
             id_institution_cancel_in,
             id_software_cancel_in,
             flg_type_in,
             flg_sub_type_in,
             flg_print_type_in,
             id_prof_print_in,
             id_prev_episode_in,
             dt_prescription_tstz_in,
             dt_cancel_tstz_in,
             dt_prof_print_tstz_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PRESCRIPTION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    IF l_name = 'PRN_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PRN_EPIS_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PREV_EPISODE',
                                                        value_in           => id_prev_episode_in);
                    END IF;
                    IF l_name = 'PRN_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PRN_INST_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION_CANCEL',
                                                        value_in           => id_institution_cancel_in);
                    END IF;
                    IF l_name = 'PRN_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PRN_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'PRN_PROF_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'PRN_PROF_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_PRINT',
                                                        value_in           => id_prof_print_in);
                    END IF;
                    IF l_name = 'PRN_S_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    IF l_name = 'PRN_S_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE_CANCEL',
                                                        value_in           => id_software_cancel_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_prescription_in       IN prescription.id_prescription%TYPE,
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_prescription_in       => id_prescription_in,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            id_professional_in       => id_professional_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_institution_in        => id_institution_in,
            id_software_in           => id_software_in,
            id_institution_cancel_in => id_institution_cancel_in,
            id_software_cancel_in    => id_software_cancel_in,
            flg_type_in              => flg_type_in,
            flg_sub_type_in          => flg_sub_type_in,
            flg_print_type_in        => flg_print_type_in,
            id_prof_print_in         => id_prof_print_in,
            id_prev_episode_in       => id_prev_episode_in,
            dt_prescription_tstz_in  => dt_prescription_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            dt_prof_print_tstz_in    => dt_prof_print_tstz_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN prescription%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec prescription%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_prescription := next_key(sequence_in);
        END IF;
        ins(id_prescription_in       => l_rec.id_prescription,
            id_episode_in            => l_rec.id_episode,
            id_patient_in            => l_rec.id_patient,
            id_professional_in       => l_rec.id_professional,
            flg_status_in            => l_rec.flg_status,
            id_prof_cancel_in        => l_rec.id_prof_cancel,
            notes_cancel_in          => l_rec.notes_cancel,
            id_institution_in        => l_rec.id_institution,
            id_software_in           => l_rec.id_software,
            id_institution_cancel_in => l_rec.id_institution_cancel,
            id_software_cancel_in    => l_rec.id_software_cancel,
            flg_type_in              => l_rec.flg_type,
            flg_sub_type_in          => l_rec.flg_sub_type,
            flg_print_type_in        => l_rec.flg_print_type,
            id_prof_print_in         => l_rec.id_prof_print,
            id_prev_episode_in       => l_rec.id_prev_episode,
            dt_prescription_tstz_in  => l_rec.dt_prescription_tstz,
            dt_cancel_tstz_in        => l_rec.dt_cancel_tstz,
            dt_prof_print_tstz_in    => l_rec.dt_prof_print_tstz,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN prescription%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN prescription.id_prescription%TYPE
    
     IS
        retval prescription.id_prescription%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_prescription.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PRESCRIPTION'));
    END next_key;

    PROCEDURE ins
    (
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        id_prescription_out      IN OUT prescription.id_prescription%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
        l_pky prescription.id_prescription%TYPE := next_key;
    BEGIN
        ins(id_prescription_in       => l_pky,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            id_professional_in       => id_professional_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_institution_in        => id_institution_in,
            id_software_in           => id_software_in,
            id_institution_cancel_in => id_institution_cancel_in,
            id_software_cancel_in    => id_software_cancel_in,
            flg_type_in              => flg_type_in,
            flg_sub_type_in          => flg_sub_type_in,
            flg_print_type_in        => flg_print_type_in,
            id_prof_print_in         => id_prof_print_in,
            id_prev_episode_in       => id_prev_episode_in,
            dt_prescription_tstz_in  => dt_prescription_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            dt_prof_print_tstz_in    => dt_prof_print_tstz_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        id_prescription_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        id_prescription_out      IN OUT prescription.id_prescription%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            id_professional_in       => id_professional_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_institution_in        => id_institution_in,
            id_software_in           => id_software_in,
            id_institution_cancel_in => id_institution_cancel_in,
            id_software_cancel_in    => id_software_cancel_in,
            flg_type_in              => flg_type_in,
            flg_sub_type_in          => flg_sub_type_in,
            flg_print_type_in        => flg_print_type_in,
            id_prof_print_in         => id_prof_print_in,
            id_prev_episode_in       => id_prev_episode_in,
            dt_prescription_tstz_in  => dt_prescription_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            dt_prof_print_tstz_in    => dt_prof_print_tstz_in,
            id_prescription_out      => id_prescription_out,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    FUNCTION ins
    (
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) RETURN prescription.id_prescription%TYPE IS
        l_pky prescription.id_prescription%TYPE := next_key;
    BEGIN
        ins(id_prescription_in       => l_pky,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            id_professional_in       => id_professional_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_institution_in        => id_institution_in,
            id_software_in           => id_software_in,
            id_institution_cancel_in => id_institution_cancel_in,
            id_software_cancel_in    => id_software_cancel_in,
            flg_type_in              => flg_type_in,
            flg_sub_type_in          => flg_sub_type_in,
            flg_print_type_in        => flg_print_type_in,
            id_prof_print_in         => id_prof_print_in,
            id_prev_episode_in       => id_prev_episode_in,
            dt_prescription_tstz_in  => dt_prescription_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            dt_prof_print_tstz_in    => dt_prof_print_tstz_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) RETURN prescription.id_prescription%TYPE IS
        l_pky    prescription.id_prescription%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_prescription_in       => l_pky,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            id_professional_in       => id_professional_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_institution_in        => id_institution_in,
            id_software_in           => id_software_in,
            id_institution_cancel_in => id_institution_cancel_in,
            id_software_cancel_in    => id_software_cancel_in,
            flg_type_in              => flg_type_in,
            flg_sub_type_in          => flg_sub_type_in,
            flg_print_type_in        => flg_print_type_in,
            id_prof_print_in         => id_prof_print_in,
            id_prev_episode_in       => id_prev_episode_in,
            dt_prescription_tstz_in  => dt_prescription_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            dt_prof_print_tstz_in    => dt_prof_print_tstz_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
        l_pky prescription.id_prescription%TYPE := next_key;
    BEGIN
        ins(id_prescription_in       => l_pky,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            id_professional_in       => id_professional_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_institution_in        => id_institution_in,
            id_software_in           => id_software_in,
            id_institution_cancel_in => id_institution_cancel_in,
            id_software_cancel_in    => id_software_cancel_in,
            flg_type_in              => flg_type_in,
            flg_sub_type_in          => flg_sub_type_in,
            flg_print_type_in        => flg_print_type_in,
            id_prof_print_in         => id_prof_print_in,
            id_prev_episode_in       => id_prev_episode_in,
            dt_prescription_tstz_in  => dt_prescription_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            dt_prof_print_tstz_in    => dt_prof_print_tstz_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        l_pky    prescription.id_prescription%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_prescription_in       => l_pky,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            id_professional_in       => id_professional_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_institution_in        => id_institution_in,
            id_software_in           => id_software_in,
            id_institution_cancel_in => id_institution_cancel_in,
            id_software_cancel_in    => id_software_cancel_in,
            flg_type_in              => flg_type_in,
            flg_sub_type_in          => flg_sub_type_in,
            flg_print_type_in        => flg_print_type_in,
            id_prof_print_in         => id_prof_print_in,
            id_prev_episode_in       => id_prev_episode_in,
            dt_prescription_tstz_in  => dt_prescription_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            dt_prof_print_tstz_in    => dt_prof_print_tstz_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN prescription_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO prescription
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PRESCRIPTION _' || indx,
                                                        value_in           => rows_in(indx).id_prescription,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE _' || indx,
                                                        value_in           => rows_in(indx).id_software,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).id_institution_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).id_software_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_SUB_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_sub_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_PRINT_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_print_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_PRINT _' || indx,
                                                        value_in           => rows_in(indx).id_prof_print,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PREV_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_prev_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PRESCRIPTION_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_prescription_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PROF_PRINT_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_prof_print_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PRESCRIPTION',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN prescription_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_prescription_in        IN prescription.id_prescription%TYPE,
        id_episode_in             IN prescription.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN prescription.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_professional_in        IN prescription.id_professional%TYPE DEFAULT NULL,
        id_professional_nin       IN BOOLEAN := TRUE,
        flg_status_in             IN prescription.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_institution_in         IN prescription.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        id_software_in            IN prescription.id_software%TYPE DEFAULT NULL,
        id_software_nin           IN BOOLEAN := TRUE,
        id_institution_cancel_in  IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_institution_cancel_nin IN BOOLEAN := TRUE,
        id_software_cancel_in     IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        id_software_cancel_nin    IN BOOLEAN := TRUE,
        flg_type_in               IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        flg_sub_type_in           IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_sub_type_nin          IN BOOLEAN := TRUE,
        flg_print_type_in         IN prescription.flg_print_type%TYPE DEFAULT NULL,
        flg_print_type_nin        IN BOOLEAN := TRUE,
        id_prof_print_in          IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prof_print_nin         IN BOOLEAN := TRUE,
        id_prev_episode_in        IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin       IN BOOLEAN := TRUE,
        dt_prescription_tstz_in   IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_prescription_tstz_nin  IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        dt_prof_print_tstz_in     IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_nin    IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out                table_varchar;
        l_id_episode_n            NUMBER(1);
        l_id_patient_n            NUMBER(1);
        l_id_professional_n       NUMBER(1);
        l_flg_status_n            NUMBER(1);
        l_id_prof_cancel_n        NUMBER(1);
        l_notes_cancel_n          NUMBER(1);
        l_id_institution_n        NUMBER(1);
        l_id_software_n           NUMBER(1);
        l_id_institution_cancel_n NUMBER(1);
        l_id_software_cancel_n    NUMBER(1);
        l_flg_type_n              NUMBER(1);
        l_flg_sub_type_n          NUMBER(1);
        l_flg_print_type_n        NUMBER(1);
        l_id_prof_print_n         NUMBER(1);
        l_id_prev_episode_n       NUMBER(1);
        l_dt_prescription_tstz_n  NUMBER(1);
        l_dt_cancel_tstz_n        NUMBER(1);
        l_dt_prof_print_tstz_n    NUMBER(1);
    BEGIN
    
        l_id_episode_n            := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n            := sys.diutil.bool_to_int(id_patient_nin);
        l_id_professional_n       := sys.diutil.bool_to_int(id_professional_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_cancel_n        := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n          := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_institution_n        := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n           := sys.diutil.bool_to_int(id_software_nin);
        l_id_institution_cancel_n := sys.diutil.bool_to_int(id_institution_cancel_nin);
        l_id_software_cancel_n    := sys.diutil.bool_to_int(id_software_cancel_nin);
        l_flg_type_n              := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_sub_type_n          := sys.diutil.bool_to_int(flg_sub_type_nin);
        l_flg_print_type_n        := sys.diutil.bool_to_int(flg_print_type_nin);
        l_id_prof_print_n         := sys.diutil.bool_to_int(id_prof_print_nin);
        l_id_prev_episode_n       := sys.diutil.bool_to_int(id_prev_episode_nin);
        l_dt_prescription_tstz_n  := sys.diutil.bool_to_int(dt_prescription_tstz_nin);
        l_dt_cancel_tstz_n        := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_dt_prof_print_tstz_n    := sys.diutil.bool_to_int(dt_prof_print_tstz_nin);
    
        UPDATE prescription
           SET id_episode            = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_patient            = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_professional       = decode(l_id_professional_n,
                                              0,
                                              id_professional_in,
                                              nvl(id_professional_in, id_professional)),
               flg_status            = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_cancel        = decode(l_id_prof_cancel_n,
                                              0,
                                              id_prof_cancel_in,
                                              nvl(id_prof_cancel_in, id_prof_cancel)),
               notes_cancel          = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               id_institution        = decode(l_id_institution_n,
                                              0,
                                              id_institution_in,
                                              nvl(id_institution_in, id_institution)),
               id_software           = decode(l_id_software_n, 0, id_software_in, nvl(id_software_in, id_software)),
               id_institution_cancel = decode(l_id_institution_cancel_n,
                                              0,
                                              id_institution_cancel_in,
                                              nvl(id_institution_cancel_in, id_institution_cancel)),
               id_software_cancel    = decode(l_id_software_cancel_n,
                                              0,
                                              id_software_cancel_in,
                                              nvl(id_software_cancel_in, id_software_cancel)),
               flg_type              = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               flg_sub_type          = decode(l_flg_sub_type_n, 0, flg_sub_type_in, nvl(flg_sub_type_in, flg_sub_type)),
               flg_print_type        = decode(l_flg_print_type_n,
                                              0,
                                              flg_print_type_in,
                                              nvl(flg_print_type_in, flg_print_type)),
               id_prof_print         = decode(l_id_prof_print_n,
                                              0,
                                              id_prof_print_in,
                                              nvl(id_prof_print_in, id_prof_print)),
               id_prev_episode       = decode(l_id_prev_episode_n,
                                              0,
                                              id_prev_episode_in,
                                              nvl(id_prev_episode_in, id_prev_episode)),
               dt_prescription_tstz  = decode(l_dt_prescription_tstz_n,
                                              0,
                                              dt_prescription_tstz_in,
                                              nvl(dt_prescription_tstz_in, dt_prescription_tstz)),
               dt_cancel_tstz        = decode(l_dt_cancel_tstz_n,
                                              0,
                                              dt_cancel_tstz_in,
                                              nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               dt_prof_print_tstz    = decode(l_dt_prof_print_tstz_n,
                                              0,
                                              dt_prof_print_tstz_in,
                                              nvl(dt_prof_print_tstz_in, dt_prof_print_tstz))
         WHERE id_prescription = id_prescription_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PRESCRIPTION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    IF l_name = 'PRN_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PRN_EPIS_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PREV_EPISODE',
                                                        value_in           => id_prev_episode_in);
                    END IF;
                    IF l_name = 'PRN_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PRN_INST_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION_CANCEL',
                                                        value_in           => id_institution_cancel_in);
                    END IF;
                    IF l_name = 'PRN_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PRN_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'PRN_PROF_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'PRN_PROF_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_PRINT',
                                                        value_in           => id_prof_print_in);
                    END IF;
                    IF l_name = 'PRN_S_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    IF l_name = 'PRN_S_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE_CANCEL',
                                                        value_in           => id_software_cancel_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_prescription_in        IN prescription.id_prescription%TYPE,
        id_episode_in             IN prescription.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN prescription.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_professional_in        IN prescription.id_professional%TYPE DEFAULT NULL,
        id_professional_nin       IN BOOLEAN := TRUE,
        flg_status_in             IN prescription.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_institution_in         IN prescription.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        id_software_in            IN prescription.id_software%TYPE DEFAULT NULL,
        id_software_nin           IN BOOLEAN := TRUE,
        id_institution_cancel_in  IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_institution_cancel_nin IN BOOLEAN := TRUE,
        id_software_cancel_in     IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        id_software_cancel_nin    IN BOOLEAN := TRUE,
        flg_type_in               IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        flg_sub_type_in           IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_sub_type_nin          IN BOOLEAN := TRUE,
        flg_print_type_in         IN prescription.flg_print_type%TYPE DEFAULT NULL,
        flg_print_type_nin        IN BOOLEAN := TRUE,
        id_prof_print_in          IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prof_print_nin         IN BOOLEAN := TRUE,
        id_prev_episode_in        IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin       IN BOOLEAN := TRUE,
        dt_prescription_tstz_in   IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_prescription_tstz_nin  IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        dt_prof_print_tstz_in     IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_nin    IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_prescription_in        => id_prescription_in,
            id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            id_professional_in        => id_professional_in,
            id_professional_nin       => id_professional_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_prof_cancel_nin        => id_prof_cancel_nin,
            notes_cancel_in           => notes_cancel_in,
            notes_cancel_nin          => notes_cancel_nin,
            id_institution_in         => id_institution_in,
            id_institution_nin        => id_institution_nin,
            id_software_in            => id_software_in,
            id_software_nin           => id_software_nin,
            id_institution_cancel_in  => id_institution_cancel_in,
            id_institution_cancel_nin => id_institution_cancel_nin,
            id_software_cancel_in     => id_software_cancel_in,
            id_software_cancel_nin    => id_software_cancel_nin,
            flg_type_in               => flg_type_in,
            flg_type_nin              => flg_type_nin,
            flg_sub_type_in           => flg_sub_type_in,
            flg_sub_type_nin          => flg_sub_type_nin,
            flg_print_type_in         => flg_print_type_in,
            flg_print_type_nin        => flg_print_type_nin,
            id_prof_print_in          => id_prof_print_in,
            id_prof_print_nin         => id_prof_print_nin,
            id_prev_episode_in        => id_prev_episode_in,
            id_prev_episode_nin       => id_prev_episode_nin,
            dt_prescription_tstz_in   => dt_prescription_tstz_in,
            dt_prescription_tstz_nin  => dt_prescription_tstz_nin,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            dt_cancel_tstz_nin        => dt_cancel_tstz_nin,
            dt_prof_print_tstz_in     => dt_prof_print_tstz_in,
            dt_prof_print_tstz_nin    => dt_prof_print_tstz_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_episode_in             IN prescription.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN prescription.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_professional_in        IN prescription.id_professional%TYPE DEFAULT NULL,
        id_professional_nin       IN BOOLEAN := TRUE,
        flg_status_in             IN prescription.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_institution_in         IN prescription.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        id_software_in            IN prescription.id_software%TYPE DEFAULT NULL,
        id_software_nin           IN BOOLEAN := TRUE,
        id_institution_cancel_in  IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_institution_cancel_nin IN BOOLEAN := TRUE,
        id_software_cancel_in     IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        id_software_cancel_nin    IN BOOLEAN := TRUE,
        flg_type_in               IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        flg_sub_type_in           IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_sub_type_nin          IN BOOLEAN := TRUE,
        flg_print_type_in         IN prescription.flg_print_type%TYPE DEFAULT NULL,
        flg_print_type_nin        IN BOOLEAN := TRUE,
        id_prof_print_in          IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prof_print_nin         IN BOOLEAN := TRUE,
        id_prev_episode_in        IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin       IN BOOLEAN := TRUE,
        dt_prescription_tstz_in   IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_prescription_tstz_nin  IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        dt_prof_print_tstz_in     IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_nin    IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_episode_n            NUMBER(1);
        l_id_patient_n            NUMBER(1);
        l_id_professional_n       NUMBER(1);
        l_flg_status_n            NUMBER(1);
        l_id_prof_cancel_n        NUMBER(1);
        l_notes_cancel_n          NUMBER(1);
        l_id_institution_n        NUMBER(1);
        l_id_software_n           NUMBER(1);
        l_id_institution_cancel_n NUMBER(1);
        l_id_software_cancel_n    NUMBER(1);
        l_flg_type_n              NUMBER(1);
        l_flg_sub_type_n          NUMBER(1);
        l_flg_print_type_n        NUMBER(1);
        l_id_prof_print_n         NUMBER(1);
        l_id_prev_episode_n       NUMBER(1);
        l_dt_prescription_tstz_n  NUMBER(1);
        l_dt_cancel_tstz_n        NUMBER(1);
        l_dt_prof_print_tstz_n    NUMBER(1);
        id_prescription_in        prescription.id_prescription%TYPE;
    BEGIN
    
        l_id_episode_n            := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n            := sys.diutil.bool_to_int(id_patient_nin);
        l_id_professional_n       := sys.diutil.bool_to_int(id_professional_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_cancel_n        := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n          := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_institution_n        := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n           := sys.diutil.bool_to_int(id_software_nin);
        l_id_institution_cancel_n := sys.diutil.bool_to_int(id_institution_cancel_nin);
        l_id_software_cancel_n    := sys.diutil.bool_to_int(id_software_cancel_nin);
        l_flg_type_n              := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_sub_type_n          := sys.diutil.bool_to_int(flg_sub_type_nin);
        l_flg_print_type_n        := sys.diutil.bool_to_int(flg_print_type_nin);
        l_id_prof_print_n         := sys.diutil.bool_to_int(id_prof_print_nin);
        l_id_prev_episode_n       := sys.diutil.bool_to_int(id_prev_episode_nin);
        l_dt_prescription_tstz_n  := sys.diutil.bool_to_int(dt_prescription_tstz_nin);
        l_dt_cancel_tstz_n        := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_dt_prof_print_tstz_n    := sys.diutil.bool_to_int(dt_prof_print_tstz_nin);
    
        l_sql := 'UPDATE PRESCRIPTION SET ' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                 ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' || ' ID_PATIENT = decode (' ||
                 l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                 ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' ID_INSTITUTION = decode (' ||
                 l_id_institution_n || ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' ID_SOFTWARE = decode (' || l_id_software_n ||
                 ',0,:id_software_in, NVL (:id_software_in, ID_SOFTWARE)) ' || ',' ||
                 ' ID_INSTITUTION_CANCEL = decode (' || l_id_institution_cancel_n ||
                 ',0,:id_institution_cancel_in, NVL (:id_institution_cancel_in, ID_INSTITUTION_CANCEL)) ' || ',' ||
                 ' ID_SOFTWARE_CANCEL = decode (' || l_id_software_cancel_n ||
                 ',0,:id_software_cancel_in, NVL (:id_software_cancel_in, ID_SOFTWARE_CANCEL)) ' || ',' ||
                 ' FLG_TYPE = decode (' || l_flg_type_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' ||
                 ' FLG_SUB_TYPE = decode (' || l_flg_sub_type_n ||
                 ',0,:flg_sub_type_in, NVL (:flg_sub_type_in, FLG_SUB_TYPE)) ' || ',' || ' FLG_PRINT_TYPE = decode (' ||
                 l_flg_print_type_n || ',0,:flg_print_type_in, NVL (:flg_print_type_in, FLG_PRINT_TYPE)) ' || ',' ||
                 ' ID_PROF_PRINT = decode (' || l_id_prof_print_n ||
                 ',0,:id_prof_print_in, NVL (:id_prof_print_in, ID_PROF_PRINT)) ' || ',' ||
                 ' ID_PREV_EPISODE = decode (' || l_id_prev_episode_n ||
                 ',0,:id_prev_episode_in, NVL (:id_prev_episode_in, ID_PREV_EPISODE)) ' || ',' ||
                 ' DT_PRESCRIPTION_TSTZ = decode (' || l_dt_prescription_tstz_n ||
                 ',0,:dt_prescription_tstz_in, NVL (:dt_prescription_tstz_in, DT_PRESCRIPTION_TSTZ)) ' || ',' ||
                 ' DT_CANCEL_TSTZ = decode (' || l_dt_cancel_tstz_n ||
                 ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) ' || ',' ||
                 ' DT_PROF_PRINT_TSTZ = decode (' || l_dt_prof_print_tstz_n ||
                 ',0,:dt_prof_print_tstz_in, NVL (:dt_prof_print_tstz_in, DT_PROF_PRINT_TSTZ)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, id_patient_in, id_professional_in, flg_status_in, id_prof_cancel_in, notes_cancel_in, id_institution_in, id_software_in, id_institution_cancel_in, id_software_cancel_in, flg_type_in, flg_sub_type_in, flg_print_type_in, id_prof_print_in, id_prev_episode_in, dt_prescription_tstz_in, dt_cancel_tstz_in, dt_prof_print_tstz_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PRESCRIPTION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    IF l_name = 'PRN_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PRN_EPIS_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PREV_EPISODE',
                                                        value_in           => id_prev_episode_in);
                    END IF;
                    IF l_name = 'PRN_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PRN_INST_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION_CANCEL',
                                                        value_in           => id_institution_cancel_in);
                    END IF;
                    IF l_name = 'PRN_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PRN_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'PRN_PROF_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'PRN_PROF_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_PRINT',
                                                        value_in           => id_prof_print_in);
                    END IF;
                    IF l_name = 'PRN_S_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    IF l_name = 'PRN_S_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE_CANCEL',
                                                        value_in           => id_software_cancel_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_episode_in             IN prescription.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN prescription.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_professional_in        IN prescription.id_professional%TYPE DEFAULT NULL,
        id_professional_nin       IN BOOLEAN := TRUE,
        flg_status_in             IN prescription.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_institution_in         IN prescription.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        id_software_in            IN prescription.id_software%TYPE DEFAULT NULL,
        id_software_nin           IN BOOLEAN := TRUE,
        id_institution_cancel_in  IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_institution_cancel_nin IN BOOLEAN := TRUE,
        id_software_cancel_in     IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        id_software_cancel_nin    IN BOOLEAN := TRUE,
        flg_type_in               IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        flg_sub_type_in           IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_sub_type_nin          IN BOOLEAN := TRUE,
        flg_print_type_in         IN prescription.flg_print_type%TYPE DEFAULT NULL,
        flg_print_type_nin        IN BOOLEAN := TRUE,
        id_prof_print_in          IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prof_print_nin         IN BOOLEAN := TRUE,
        id_prev_episode_in        IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin       IN BOOLEAN := TRUE,
        dt_prescription_tstz_in   IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_prescription_tstz_nin  IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        dt_prof_print_tstz_in     IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_nin    IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            id_professional_in        => id_professional_in,
            id_professional_nin       => id_professional_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_prof_cancel_nin        => id_prof_cancel_nin,
            notes_cancel_in           => notes_cancel_in,
            notes_cancel_nin          => notes_cancel_nin,
            id_institution_in         => id_institution_in,
            id_institution_nin        => id_institution_nin,
            id_software_in            => id_software_in,
            id_software_nin           => id_software_nin,
            id_institution_cancel_in  => id_institution_cancel_in,
            id_institution_cancel_nin => id_institution_cancel_nin,
            id_software_cancel_in     => id_software_cancel_in,
            id_software_cancel_nin    => id_software_cancel_nin,
            flg_type_in               => flg_type_in,
            flg_type_nin              => flg_type_nin,
            flg_sub_type_in           => flg_sub_type_in,
            flg_sub_type_nin          => flg_sub_type_nin,
            flg_print_type_in         => flg_print_type_in,
            flg_print_type_nin        => flg_print_type_nin,
            id_prof_print_in          => id_prof_print_in,
            id_prof_print_nin         => id_prof_print_nin,
            id_prev_episode_in        => id_prev_episode_in,
            id_prev_episode_nin       => id_prev_episode_nin,
            dt_prescription_tstz_in   => dt_prescription_tstz_in,
            dt_prescription_tstz_nin  => dt_prescription_tstz_nin,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            dt_cancel_tstz_nin        => dt_cancel_tstz_nin,
            dt_prof_print_tstz_in     => dt_prof_print_tstz_in,
            dt_prof_print_tstz_nin    => dt_prof_print_tstz_nin,
            where_in                  => where_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN prescription%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_prescription_in       => rec_in.id_prescription,
            id_episode_in            => rec_in.id_episode,
            id_patient_in            => rec_in.id_patient,
            id_professional_in       => rec_in.id_professional,
            flg_status_in            => rec_in.flg_status,
            id_prof_cancel_in        => rec_in.id_prof_cancel,
            notes_cancel_in          => rec_in.notes_cancel,
            id_institution_in        => rec_in.id_institution,
            id_software_in           => rec_in.id_software,
            id_institution_cancel_in => rec_in.id_institution_cancel,
            id_software_cancel_in    => rec_in.id_software_cancel,
            flg_type_in              => rec_in.flg_type,
            flg_sub_type_in          => rec_in.flg_sub_type,
            flg_print_type_in        => rec_in.flg_print_type,
            id_prof_print_in         => rec_in.id_prof_print,
            id_prev_episode_in       => rec_in.id_prev_episode,
            dt_prescription_tstz_in  => rec_in.dt_prescription_tstz,
            dt_cancel_tstz_in        => rec_in.dt_cancel_tstz,
            dt_prof_print_tstz_in    => rec_in.dt_prof_print_tstz
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN prescription%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_prescription_in       => rec_in.id_prescription,
            id_episode_in            => rec_in.id_episode,
            id_patient_in            => rec_in.id_patient,
            id_professional_in       => rec_in.id_professional,
            flg_status_in            => rec_in.flg_status,
            id_prof_cancel_in        => rec_in.id_prof_cancel,
            notes_cancel_in          => rec_in.notes_cancel,
            id_institution_in        => rec_in.id_institution,
            id_software_in           => rec_in.id_software,
            id_institution_cancel_in => rec_in.id_institution_cancel,
            id_software_cancel_in    => rec_in.id_software_cancel,
            flg_type_in              => rec_in.flg_type,
            flg_sub_type_in          => rec_in.flg_sub_type,
            flg_print_type_in        => rec_in.flg_print_type,
            id_prof_print_in         => rec_in.id_prof_print,
            id_prev_episode_in       => rec_in.id_prev_episode,
            dt_prescription_tstz_in  => rec_in.dt_prescription_tstz,
            dt_cancel_tstz_in        => rec_in.dt_cancel_tstz,
            dt_prof_print_tstz_in    => rec_in.dt_prof_print_tstz
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_prescription_in       IN prescription.id_prescription%TYPE,
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        upd(id_prescription_in       => id_prescription_in,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            id_professional_in       => id_professional_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_institution_in        => id_institution_in,
            id_software_in           => id_software_in,
            id_institution_cancel_in => id_institution_cancel_in,
            id_software_cancel_in    => id_software_cancel_in,
            flg_type_in              => flg_type_in,
            flg_sub_type_in          => flg_sub_type_in,
            flg_print_type_in        => flg_print_type_in,
            id_prof_print_in         => id_prof_print_in,
            id_prev_episode_in       => id_prev_episode_in,
            dt_prescription_tstz_in  => dt_prescription_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            dt_prof_print_tstz_in    => dt_prof_print_tstz_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_prescription_in       => id_prescription_in,
                id_episode_in            => id_episode_in,
                id_patient_in            => id_patient_in,
                id_professional_in       => id_professional_in,
                flg_status_in            => flg_status_in,
                id_prof_cancel_in        => id_prof_cancel_in,
                notes_cancel_in          => notes_cancel_in,
                id_institution_in        => id_institution_in,
                id_software_in           => id_software_in,
                id_institution_cancel_in => id_institution_cancel_in,
                id_software_cancel_in    => id_software_cancel_in,
                flg_type_in              => flg_type_in,
                flg_sub_type_in          => flg_sub_type_in,
                flg_print_type_in        => flg_print_type_in,
                id_prof_print_in         => id_prof_print_in,
                id_prev_episode_in       => id_prev_episode_in,
                dt_prescription_tstz_in  => dt_prescription_tstz_in,
                dt_cancel_tstz_in        => dt_cancel_tstz_in,
                dt_prof_print_tstz_in    => dt_prof_print_tstz_in,
                handle_error_in          => handle_error_in,
                rows_out                 => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_prescription_in       IN prescription.id_prescription%TYPE,
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_prescription_in,
                id_episode_in,
                id_patient_in,
                id_professional_in,
                flg_status_in,
                id_prof_cancel_in,
                notes_cancel_in,
                id_institution_in,
                id_software_in,
                id_institution_cancel_in,
                id_software_cancel_in,
                flg_type_in,
                flg_sub_type_in,
                flg_print_type_in,
                id_prof_print_in,
                id_prev_episode_in,
                dt_prescription_tstz_in,
                dt_cancel_tstz_in,
                dt_prof_print_tstz_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN prescription_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_prescription       id_prescription_cc;
        l_id_episode            id_episode_cc;
        l_id_patient            id_patient_cc;
        l_id_professional       id_professional_cc;
        l_flg_status            flg_status_cc;
        l_id_prof_cancel        id_prof_cancel_cc;
        l_notes_cancel          notes_cancel_cc;
        l_id_institution        id_institution_cc;
        l_id_software           id_software_cc;
        l_id_institution_cancel id_institution_cancel_cc;
        l_id_software_cancel    id_software_cancel_cc;
        l_flg_type              flg_type_cc;
        l_flg_sub_type          flg_sub_type_cc;
        l_flg_print_type        flg_print_type_cc;
        l_id_prof_print         id_prof_print_cc;
        l_id_prev_episode       id_prev_episode_cc;
        l_dt_prescription_tstz  dt_prescription_tstz_cc;
        l_dt_cancel_tstz        dt_cancel_tstz_cc;
        l_dt_prof_print_tstz    dt_prof_print_tstz_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_prescription(i) := col_in(i).id_prescription;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_professional(i) := col_in(i).id_professional;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_software(i) := col_in(i).id_software;
            l_id_institution_cancel(i) := col_in(i).id_institution_cancel;
            l_id_software_cancel(i) := col_in(i).id_software_cancel;
            l_flg_type(i) := col_in(i).flg_type;
            l_flg_sub_type(i) := col_in(i).flg_sub_type;
            l_flg_print_type(i) := col_in(i).flg_print_type;
            l_id_prof_print(i) := col_in(i).id_prof_print;
            l_id_prev_episode(i) := col_in(i).id_prev_episode;
            l_dt_prescription_tstz(i) := col_in(i).dt_prescription_tstz;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_dt_prof_print_tstz(i) := col_in(i).dt_prof_print_tstz;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE prescription
                   SET id_episode            = nvl(l_id_episode(i), id_episode),
                       id_patient            = nvl(l_id_patient(i), id_patient),
                       id_professional       = nvl(l_id_professional(i), id_professional),
                       flg_status            = nvl(l_flg_status(i), flg_status),
                       id_prof_cancel        = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       notes_cancel          = nvl(l_notes_cancel(i), notes_cancel),
                       id_institution        = nvl(l_id_institution(i), id_institution),
                       id_software           = nvl(l_id_software(i), id_software),
                       id_institution_cancel = nvl(l_id_institution_cancel(i), id_institution_cancel),
                       id_software_cancel    = nvl(l_id_software_cancel(i), id_software_cancel),
                       flg_type              = nvl(l_flg_type(i), flg_type),
                       flg_sub_type          = nvl(l_flg_sub_type(i), flg_sub_type),
                       flg_print_type        = nvl(l_flg_print_type(i), flg_print_type),
                       id_prof_print         = nvl(l_id_prof_print(i), id_prof_print),
                       id_prev_episode       = nvl(l_id_prev_episode(i), id_prev_episode),
                       dt_prescription_tstz  = nvl(l_dt_prescription_tstz(i), dt_prescription_tstz),
                       dt_cancel_tstz        = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       dt_prof_print_tstz    = nvl(l_dt_prof_print_tstz(i), dt_prof_print_tstz)
                 WHERE id_prescription = l_id_prescription(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE prescription
                   SET id_episode            = l_id_episode(i),
                       id_patient            = l_id_patient(i),
                       id_professional       = l_id_professional(i),
                       flg_status            = l_flg_status(i),
                       id_prof_cancel        = l_id_prof_cancel(i),
                       notes_cancel          = l_notes_cancel(i),
                       id_institution        = l_id_institution(i),
                       id_software           = l_id_software(i),
                       id_institution_cancel = l_id_institution_cancel(i),
                       id_software_cancel    = l_id_software_cancel(i),
                       flg_type              = l_flg_type(i),
                       flg_sub_type          = l_flg_sub_type(i),
                       flg_print_type        = l_flg_print_type(i),
                       id_prof_print         = l_id_prof_print(i),
                       id_prev_episode       = l_id_prev_episode(i),
                       dt_prescription_tstz  = l_dt_prescription_tstz(i),
                       dt_cancel_tstz        = l_dt_cancel_tstz(i),
                       dt_prof_print_tstz    = l_dt_prof_print_tstz(i)
                 WHERE id_prescription = l_id_prescription(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN prescription_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PRESCRIPTION
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PRESCRIPTION
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PRESCRIPTION set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PRESCRIPTION set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_prescription_in IN prescription.id_prescription%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prescription
         WHERE id_prescription = id_prescription_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_prescription_in IN prescription.id_prescription%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_prescription_in => id_prescription_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PRESCRIPTION
    PROCEDURE del_id_prescription
    (
        id_prescription_in IN prescription.id_prescription%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prescription
         WHERE id_prescription = id_prescription_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_prescription;

    -- Delete all rows for primary key column ID_PRESCRIPTION
    PROCEDURE del_id_prescription
    (
        id_prescription_in IN prescription.id_prescription%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_prescription(id_prescription_in => id_prescription_in,
                            handle_error_in    => handle_error_in,
                            rows_out           => rows_out);
    END del_id_prescription;

    PROCEDURE del_prn_epis_fk
    (
        id_episode_in   IN prescription.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prescription
         WHERE id_episode = del_prn_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prn_epis_fk;

    PROCEDURE del_prn_epis_fk
    (
        id_episode_in   IN prescription.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prn_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_prn_epis_fk;

    PROCEDURE del_prn_epis_fk2
    (
        id_prev_episode_in IN prescription.id_prev_episode%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prescription
         WHERE id_prev_episode = del_prn_epis_fk2.id_prev_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prn_epis_fk2;

    PROCEDURE del_prn_epis_fk2
    (
        id_prev_episode_in IN prescription.id_prev_episode%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prn_epis_fk2(id_prev_episode_in => id_prev_episode_in,
                         handle_error_in    => handle_error_in,
                         rows_out           => rows_out);
    END del_prn_epis_fk2;

    PROCEDURE del_prn_inst_fk
    (
        id_institution_in IN prescription.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prescription
         WHERE id_institution = del_prn_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prn_inst_fk;

    PROCEDURE del_prn_inst_fk
    (
        id_institution_in IN prescription.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prn_inst_fk(id_institution_in => id_institution_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_prn_inst_fk;

    PROCEDURE del_prn_inst_fk2
    (
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prescription
         WHERE id_institution_cancel = del_prn_inst_fk2.id_institution_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prn_inst_fk2;

    PROCEDURE del_prn_inst_fk2
    (
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prn_inst_fk2(id_institution_cancel_in => id_institution_cancel_in,
                         handle_error_in          => handle_error_in,
                         rows_out                 => rows_out);
    END del_prn_inst_fk2;

    PROCEDURE del_prn_pat_fk
    (
        id_patient_in   IN prescription.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prescription
         WHERE id_patient = del_prn_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prn_pat_fk;

    PROCEDURE del_prn_pat_fk
    (
        id_patient_in   IN prescription.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prn_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_prn_pat_fk;

    PROCEDURE del_prn_prof_fk
    (
        id_professional_in IN prescription.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prescription
         WHERE id_professional = del_prn_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prn_prof_fk;

    PROCEDURE del_prn_prof_fk
    (
        id_professional_in IN prescription.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prn_prof_fk(id_professional_in => id_professional_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_prn_prof_fk;

    PROCEDURE del_prn_prof_fk2
    (
        id_prof_cancel_in IN prescription.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prescription
         WHERE id_prof_cancel = del_prn_prof_fk2.id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prn_prof_fk2;

    PROCEDURE del_prn_prof_fk2
    (
        id_prof_cancel_in IN prescription.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prn_prof_fk2(id_prof_cancel_in => id_prof_cancel_in,
                         handle_error_in   => handle_error_in,
                         rows_out          => rows_out);
    END del_prn_prof_fk2;

    PROCEDURE del_prn_prof_fk3
    (
        id_prof_print_in IN prescription.id_prof_print%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prescription
         WHERE id_prof_print = del_prn_prof_fk3.id_prof_print_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prn_prof_fk3;

    PROCEDURE del_prn_prof_fk3
    (
        id_prof_print_in IN prescription.id_prof_print%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prn_prof_fk3(id_prof_print_in => id_prof_print_in,
                         handle_error_in  => handle_error_in,
                         rows_out         => rows_out);
    END del_prn_prof_fk3;

    PROCEDURE del_prn_s_fk
    (
        id_software_in  IN prescription.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prescription
         WHERE id_software = del_prn_s_fk.id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prn_s_fk;

    PROCEDURE del_prn_s_fk
    (
        id_software_in  IN prescription.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prn_s_fk(id_software_in => id_software_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_prn_s_fk;

    PROCEDURE del_prn_s_fk2
    (
        id_software_cancel_in IN prescription.id_software_cancel%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prescription
         WHERE id_software_cancel = del_prn_s_fk2.id_software_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_prn_s_fk2;

    PROCEDURE del_prn_s_fk2
    (
        id_software_cancel_in IN prescription.id_software_cancel%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prn_s_fk2(id_software_cancel_in => id_software_cancel_in,
                      handle_error_in       => handle_error_in,
                      rows_out              => rows_out);
    END del_prn_s_fk2;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PRESCRIPTION';
        ELSE
            RETURN 'DELETE FROM PRESCRIPTION WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(prescription_inout IN OUT prescription%ROWTYPE) IS
    BEGIN
        prescription_inout.id_prescription       := NULL;
        prescription_inout.id_episode            := NULL;
        prescription_inout.id_patient            := NULL;
        prescription_inout.id_professional       := NULL;
        prescription_inout.flg_status            := NULL;
        prescription_inout.id_prof_cancel        := NULL;
        prescription_inout.notes_cancel          := NULL;
        prescription_inout.id_institution        := NULL;
        prescription_inout.id_software           := NULL;
        prescription_inout.id_institution_cancel := NULL;
        prescription_inout.id_software_cancel    := NULL;
        prescription_inout.flg_type              := NULL;
        prescription_inout.flg_sub_type          := NULL;
        prescription_inout.flg_print_type        := NULL;
        prescription_inout.id_prof_print         := NULL;
        prescription_inout.id_prev_episode       := NULL;
        prescription_inout.dt_prescription_tstz  := NULL;
        prescription_inout.dt_cancel_tstz        := NULL;
        prescription_inout.dt_prof_print_tstz    := NULL;
    END initrec;

    FUNCTION initrec RETURN prescription%ROWTYPE IS
        l_prescription prescription%ROWTYPE;
    BEGIN
        RETURN l_prescription;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN prescription_tc IS
        data prescription_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM prescription
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN prescription_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data prescription_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_prescription;
/
