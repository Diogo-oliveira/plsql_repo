/*-- Last Change Revision: $Rev: 2053893 $*/
/*-- Last Change by: $Author: ana.matos $*/
/*-- Date of last change: $Date: 2022-12-30 14:20:45 +0000 (sex, 30 dez 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_exam
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2022-12-30 13:39:16
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN exam.id_exam%TYPE IS
        retval exam.id_exam%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_exam.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        code_exam_in          IN exam.code_exam%TYPE DEFAULT NULL,
        code_help_exam_in     IN exam.code_help_exam%TYPE DEFAULT NULL,
        flg_available_in      IN exam.flg_available%TYPE DEFAULT NULL,
        rank_in               IN exam.rank%TYPE DEFAULT NULL,
        adw_last_update_in    IN exam.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_type_in           IN exam.flg_type%TYPE DEFAULT NULL,
        gender_in             IN exam.gender%TYPE DEFAULT NULL,
        age_min_in            IN exam.age_min%TYPE DEFAULT NULL,
        age_max_in            IN exam.age_max%TYPE DEFAULT NULL,
        id_exam_cat_in        IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_content_in         IN exam.id_content%TYPE DEFAULT NULL,
        create_user_in        IN exam.create_user%TYPE DEFAULT NULL,
        create_time_in        IN exam.create_time%TYPE DEFAULT NULL,
        create_institution_in IN exam.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN exam.update_user%TYPE DEFAULT NULL,
        update_time_in        IN exam.update_time%TYPE DEFAULT NULL,
        update_institution_in IN exam.update_institution%TYPE DEFAULT NULL,
        flg_technical_in      IN exam.flg_technical%TYPE DEFAULT 'N',
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_pky exam.id_exam%TYPE := next_key;
    BEGIN
        ins(id_exam_in            => l_pky,
            code_exam_in          => code_exam_in,
            code_help_exam_in     => code_help_exam_in,
            flg_available_in      => flg_available_in,
            rank_in               => rank_in,
            adw_last_update_in    => adw_last_update_in,
            flg_type_in           => flg_type_in,
            gender_in             => gender_in,
            age_min_in            => age_min_in,
            age_max_in            => age_max_in,
            id_exam_cat_in        => id_exam_cat_in,
            id_content_in         => id_content_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_technical_in      => flg_technical_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        code_exam_in          IN exam.code_exam%TYPE DEFAULT NULL,
        code_help_exam_in     IN exam.code_help_exam%TYPE DEFAULT NULL,
        flg_available_in      IN exam.flg_available%TYPE DEFAULT NULL,
        rank_in               IN exam.rank%TYPE DEFAULT NULL,
        adw_last_update_in    IN exam.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_type_in           IN exam.flg_type%TYPE DEFAULT NULL,
        gender_in             IN exam.gender%TYPE DEFAULT NULL,
        age_min_in            IN exam.age_min%TYPE DEFAULT NULL,
        age_max_in            IN exam.age_max%TYPE DEFAULT NULL,
        id_exam_cat_in        IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_content_in         IN exam.id_content%TYPE DEFAULT NULL,
        create_user_in        IN exam.create_user%TYPE DEFAULT NULL,
        create_time_in        IN exam.create_time%TYPE DEFAULT NULL,
        create_institution_in IN exam.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN exam.update_user%TYPE DEFAULT NULL,
        update_time_in        IN exam.update_time%TYPE DEFAULT NULL,
        update_institution_in IN exam.update_institution%TYPE DEFAULT NULL,
        flg_technical_in      IN exam.flg_technical%TYPE DEFAULT 'N',
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(code_exam_in          => code_exam_in,
            code_help_exam_in     => code_help_exam_in,
            flg_available_in      => flg_available_in,
            rank_in               => rank_in,
            adw_last_update_in    => adw_last_update_in,
            flg_type_in           => flg_type_in,
            gender_in             => gender_in,
            age_min_in            => age_min_in,
            age_max_in            => age_max_in,
            id_exam_cat_in        => id_exam_cat_in,
            id_content_in         => id_content_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_technical_in      => flg_technical_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        code_exam_in          IN exam.code_exam%TYPE DEFAULT NULL,
        code_help_exam_in     IN exam.code_help_exam%TYPE DEFAULT NULL,
        flg_available_in      IN exam.flg_available%TYPE DEFAULT NULL,
        rank_in               IN exam.rank%TYPE DEFAULT NULL,
        adw_last_update_in    IN exam.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_type_in           IN exam.flg_type%TYPE DEFAULT NULL,
        gender_in             IN exam.gender%TYPE DEFAULT NULL,
        age_min_in            IN exam.age_min%TYPE DEFAULT NULL,
        age_max_in            IN exam.age_max%TYPE DEFAULT NULL,
        id_exam_cat_in        IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_content_in         IN exam.id_content%TYPE DEFAULT NULL,
        create_user_in        IN exam.create_user%TYPE DEFAULT NULL,
        create_time_in        IN exam.create_time%TYPE DEFAULT NULL,
        create_institution_in IN exam.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN exam.update_user%TYPE DEFAULT NULL,
        update_time_in        IN exam.update_time%TYPE DEFAULT NULL,
        update_institution_in IN exam.update_institution%TYPE DEFAULT NULL,
        flg_technical_in      IN exam.flg_technical%TYPE DEFAULT 'N',
        id_exam_out           IN OUT exam.id_exam%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_pky exam.id_exam%TYPE := next_key;
    BEGIN
        ins(id_exam_in            => l_pky,
            code_exam_in          => code_exam_in,
            code_help_exam_in     => code_help_exam_in,
            flg_available_in      => flg_available_in,
            rank_in               => rank_in,
            adw_last_update_in    => adw_last_update_in,
            flg_type_in           => flg_type_in,
            gender_in             => gender_in,
            age_min_in            => age_min_in,
            age_max_in            => age_max_in,
            id_exam_cat_in        => id_exam_cat_in,
            id_content_in         => id_content_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_technical_in      => flg_technical_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        id_exam_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        code_exam_in          IN exam.code_exam%TYPE DEFAULT NULL,
        code_help_exam_in     IN exam.code_help_exam%TYPE DEFAULT NULL,
        flg_available_in      IN exam.flg_available%TYPE DEFAULT NULL,
        rank_in               IN exam.rank%TYPE DEFAULT NULL,
        adw_last_update_in    IN exam.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_type_in           IN exam.flg_type%TYPE DEFAULT NULL,
        gender_in             IN exam.gender%TYPE DEFAULT NULL,
        age_min_in            IN exam.age_min%TYPE DEFAULT NULL,
        age_max_in            IN exam.age_max%TYPE DEFAULT NULL,
        id_exam_cat_in        IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_content_in         IN exam.id_content%TYPE DEFAULT NULL,
        create_user_in        IN exam.create_user%TYPE DEFAULT NULL,
        create_time_in        IN exam.create_time%TYPE DEFAULT NULL,
        create_institution_in IN exam.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN exam.update_user%TYPE DEFAULT NULL,
        update_time_in        IN exam.update_time%TYPE DEFAULT NULL,
        update_institution_in IN exam.update_institution%TYPE DEFAULT NULL,
        flg_technical_in      IN exam.flg_technical%TYPE DEFAULT 'N',
        id_exam_out           IN OUT exam.id_exam%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(code_exam_in          => code_exam_in,
            code_help_exam_in     => code_help_exam_in,
            flg_available_in      => flg_available_in,
            rank_in               => rank_in,
            adw_last_update_in    => adw_last_update_in,
            flg_type_in           => flg_type_in,
            gender_in             => gender_in,
            age_min_in            => age_min_in,
            age_max_in            => age_max_in,
            id_exam_cat_in        => id_exam_cat_in,
            id_content_in         => id_content_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_technical_in      => flg_technical_in,
            id_exam_out           => id_exam_out,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        code_exam_in          IN exam.code_exam%TYPE DEFAULT NULL,
        code_help_exam_in     IN exam.code_help_exam%TYPE DEFAULT NULL,
        flg_available_in      IN exam.flg_available%TYPE DEFAULT NULL,
        rank_in               IN exam.rank%TYPE DEFAULT NULL,
        adw_last_update_in    IN exam.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_type_in           IN exam.flg_type%TYPE DEFAULT NULL,
        gender_in             IN exam.gender%TYPE DEFAULT NULL,
        age_min_in            IN exam.age_min%TYPE DEFAULT NULL,
        age_max_in            IN exam.age_max%TYPE DEFAULT NULL,
        id_exam_cat_in        IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_content_in         IN exam.id_content%TYPE DEFAULT NULL,
        create_user_in        IN exam.create_user%TYPE DEFAULT NULL,
        create_time_in        IN exam.create_time%TYPE DEFAULT NULL,
        create_institution_in IN exam.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN exam.update_user%TYPE DEFAULT NULL,
        update_time_in        IN exam.update_time%TYPE DEFAULT NULL,
        update_institution_in IN exam.update_institution%TYPE DEFAULT NULL,
        flg_technical_in      IN exam.flg_technical%TYPE DEFAULT 'N',
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) RETURN exam.id_exam%TYPE IS
        l_pky exam.id_exam%TYPE := next_key;
    BEGIN
        ins(id_exam_in            => l_pky,
            code_exam_in          => code_exam_in,
            code_help_exam_in     => code_help_exam_in,
            flg_available_in      => flg_available_in,
            rank_in               => rank_in,
            adw_last_update_in    => adw_last_update_in,
            flg_type_in           => flg_type_in,
            gender_in             => gender_in,
            age_min_in            => age_min_in,
            age_max_in            => age_max_in,
            id_exam_cat_in        => id_exam_cat_in,
            id_content_in         => id_content_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_technical_in      => flg_technical_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        code_exam_in          IN exam.code_exam%TYPE DEFAULT NULL,
        code_help_exam_in     IN exam.code_help_exam%TYPE DEFAULT NULL,
        flg_available_in      IN exam.flg_available%TYPE DEFAULT NULL,
        rank_in               IN exam.rank%TYPE DEFAULT NULL,
        adw_last_update_in    IN exam.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_type_in           IN exam.flg_type%TYPE DEFAULT NULL,
        gender_in             IN exam.gender%TYPE DEFAULT NULL,
        age_min_in            IN exam.age_min%TYPE DEFAULT NULL,
        age_max_in            IN exam.age_max%TYPE DEFAULT NULL,
        id_exam_cat_in        IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_content_in         IN exam.id_content%TYPE DEFAULT NULL,
        create_user_in        IN exam.create_user%TYPE DEFAULT NULL,
        create_time_in        IN exam.create_time%TYPE DEFAULT NULL,
        create_institution_in IN exam.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN exam.update_user%TYPE DEFAULT NULL,
        update_time_in        IN exam.update_time%TYPE DEFAULT NULL,
        update_institution_in IN exam.update_institution%TYPE DEFAULT NULL,
        flg_technical_in      IN exam.flg_technical%TYPE DEFAULT 'N',
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) RETURN exam.id_exam%TYPE IS
        l_pky    exam.id_exam%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_exam_in            => l_pky,
            code_exam_in          => code_exam_in,
            code_help_exam_in     => code_help_exam_in,
            flg_available_in      => flg_available_in,
            rank_in               => rank_in,
            adw_last_update_in    => adw_last_update_in,
            flg_type_in           => flg_type_in,
            gender_in             => gender_in,
            age_min_in            => age_min_in,
            age_max_in            => age_max_in,
            id_exam_cat_in        => id_exam_cat_in,
            id_content_in         => id_content_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_technical_in      => flg_technical_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_exam_in            IN exam.id_exam%TYPE,
        code_exam_in          IN exam.code_exam%TYPE DEFAULT NULL,
        code_help_exam_in     IN exam.code_help_exam%TYPE DEFAULT NULL,
        flg_available_in      IN exam.flg_available%TYPE DEFAULT NULL,
        rank_in               IN exam.rank%TYPE DEFAULT NULL,
        adw_last_update_in    IN exam.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_type_in           IN exam.flg_type%TYPE DEFAULT NULL,
        gender_in             IN exam.gender%TYPE DEFAULT NULL,
        age_min_in            IN exam.age_min%TYPE DEFAULT NULL,
        age_max_in            IN exam.age_max%TYPE DEFAULT NULL,
        id_exam_cat_in        IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_content_in         IN exam.id_content%TYPE DEFAULT NULL,
        create_user_in        IN exam.create_user%TYPE DEFAULT NULL,
        create_time_in        IN exam.create_time%TYPE DEFAULT NULL,
        create_institution_in IN exam.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN exam.update_user%TYPE DEFAULT NULL,
        update_time_in        IN exam.update_time%TYPE DEFAULT NULL,
        update_institution_in IN exam.update_institution%TYPE DEFAULT NULL,
        flg_technical_in      IN exam.flg_technical%TYPE DEFAULT 'N',
        handle_error_in       IN BOOLEAN := FALSE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO exam
            (id_exam,
             code_exam,
             code_help_exam,
             flg_available,
             rank,
             adw_last_update,
             flg_type,
             gender,
             age_min,
             age_max,
             id_exam_cat,
             id_content,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_technical)
        VALUES
            (id_exam_in,
             code_exam_in,
             code_help_exam_in,
             flg_available_in,
             rank_in,
             adw_last_update_in,
             flg_type_in,
             gender_in,
             age_min_in,
             age_max_in,
             id_exam_cat_in,
             id_content_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_technical_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_exam_in            IN exam.id_exam%TYPE,
        code_exam_in          IN exam.code_exam%TYPE DEFAULT NULL,
        code_help_exam_in     IN exam.code_help_exam%TYPE DEFAULT NULL,
        flg_available_in      IN exam.flg_available%TYPE DEFAULT NULL,
        rank_in               IN exam.rank%TYPE DEFAULT NULL,
        adw_last_update_in    IN exam.adw_last_update%TYPE DEFAULT SYSDATE,
        flg_type_in           IN exam.flg_type%TYPE DEFAULT NULL,
        gender_in             IN exam.gender%TYPE DEFAULT NULL,
        age_min_in            IN exam.age_min%TYPE DEFAULT NULL,
        age_max_in            IN exam.age_max%TYPE DEFAULT NULL,
        id_exam_cat_in        IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_content_in         IN exam.id_content%TYPE DEFAULT NULL,
        create_user_in        IN exam.create_user%TYPE DEFAULT NULL,
        create_time_in        IN exam.create_time%TYPE DEFAULT NULL,
        create_institution_in IN exam.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN exam.update_user%TYPE DEFAULT NULL,
        update_time_in        IN exam.update_time%TYPE DEFAULT NULL,
        update_institution_in IN exam.update_institution%TYPE DEFAULT NULL,
        flg_technical_in      IN exam.flg_technical%TYPE DEFAULT 'N',
        handle_error_in       IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_exam_in            => id_exam_in,
            code_exam_in          => code_exam_in,
            code_help_exam_in     => code_help_exam_in,
            flg_available_in      => flg_available_in,
            rank_in               => rank_in,
            adw_last_update_in    => adw_last_update_in,
            flg_type_in           => flg_type_in,
            gender_in             => gender_in,
            age_min_in            => age_min_in,
            age_max_in            => age_max_in,
            id_exam_cat_in        => id_exam_cat_in,
            id_content_in         => id_content_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_technical_in      => flg_technical_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN exam%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_rec exam%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_exam := next_key(sequence_in);
        END IF;
    
        ins(id_exam_in            => l_rec.id_exam,
            code_exam_in          => l_rec.code_exam,
            code_help_exam_in     => l_rec.code_help_exam,
            flg_available_in      => l_rec.flg_available,
            rank_in               => l_rec.rank,
            adw_last_update_in    => l_rec.adw_last_update,
            flg_type_in           => l_rec.flg_type,
            gender_in             => l_rec.gender,
            age_min_in            => l_rec.age_min,
            age_max_in            => l_rec.age_max,
            id_exam_cat_in        => l_rec.id_exam_cat,
            id_content_in         => l_rec.id_content,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_time_in        => l_rec.update_time,
            update_institution_in => l_rec.update_institution,
            flg_technical_in      => l_rec.flg_technical,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN exam%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN exam_tc,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO exam
                    (id_exam,
                     code_exam,
                     code_help_exam,
                     flg_available,
                     rank,
                     adw_last_update,
                     flg_type,
                     gender,
                     age_min,
                     age_max,
                     id_exam_cat,
                     id_content,
                     flg_technical)
                VALUES
                    (rows_in(indx).id_exam,
                     rows_in(indx).code_exam,
                     rows_in(indx).code_help_exam,
                     rows_in(indx).flg_available,
                     rows_in(indx).rank,
                     rows_in(indx).adw_last_update,
                     rows_in(indx).flg_type,
                     rows_in(indx).gender,
                     rows_in(indx).age_min,
                     rows_in(indx).age_max,
                     rows_in(indx).id_exam_cat,
                     rows_in(indx).id_content,
                     rows_in(indx).flg_technical)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN exam_tc,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_exam_in             IN exam.id_exam%TYPE,
        code_exam_in           IN exam.code_exam%TYPE DEFAULT NULL,
        code_exam_nin          IN BOOLEAN := TRUE,
        code_help_exam_in      IN exam.code_help_exam%TYPE DEFAULT NULL,
        code_help_exam_nin     IN BOOLEAN := TRUE,
        flg_available_in       IN exam.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        rank_in                IN exam.rank%TYPE DEFAULT NULL,
        rank_nin               IN BOOLEAN := TRUE,
        adw_last_update_in     IN exam.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin    IN BOOLEAN := TRUE,
        flg_type_in            IN exam.flg_type%TYPE DEFAULT NULL,
        flg_type_nin           IN BOOLEAN := TRUE,
        gender_in              IN exam.gender%TYPE DEFAULT NULL,
        gender_nin             IN BOOLEAN := TRUE,
        age_min_in             IN exam.age_min%TYPE DEFAULT NULL,
        age_min_nin            IN BOOLEAN := TRUE,
        age_max_in             IN exam.age_max%TYPE DEFAULT NULL,
        age_max_nin            IN BOOLEAN := TRUE,
        id_exam_cat_in         IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_exam_cat_nin        IN BOOLEAN := TRUE,
        id_content_in          IN exam.id_content%TYPE DEFAULT NULL,
        id_content_nin         IN BOOLEAN := TRUE,
        create_user_in         IN exam.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN exam.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN exam.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN exam.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN exam.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN exam.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        flg_technical_in       IN exam.flg_technical%TYPE DEFAULT NULL,
        flg_technical_nin      IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := FALSE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_code_exam_n          NUMBER(1) := sys.diutil.bool_to_int(code_exam_nin);
        l_code_help_exam_n     NUMBER(1) := sys.diutil.bool_to_int(code_help_exam_nin);
        l_flg_available_n      NUMBER(1) := sys.diutil.bool_to_int(flg_available_nin);
        l_rank_n               NUMBER(1) := sys.diutil.bool_to_int(rank_nin);
        l_adw_last_update_n    NUMBER(1) := sys.diutil.bool_to_int(adw_last_update_nin);
        l_flg_type_n           NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_gender_n             NUMBER(1) := sys.diutil.bool_to_int(gender_nin);
        l_age_min_n            NUMBER(1) := sys.diutil.bool_to_int(age_min_nin);
        l_age_max_n            NUMBER(1) := sys.diutil.bool_to_int(age_max_nin);
        l_id_exam_cat_n        NUMBER(1) := sys.diutil.bool_to_int(id_exam_cat_nin);
        l_id_content_n         NUMBER(1) := sys.diutil.bool_to_int(id_content_nin);
        l_create_user_n        NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_technical_n      NUMBER(1) := sys.diutil.bool_to_int(flg_technical_nin);
    BEGIN
    
        UPDATE exam
           SET code_exam          = decode(l_code_exam_n, 0, code_exam_in, nvl(code_exam_in, code_exam)),
               code_help_exam     = decode(l_code_help_exam_n,
                                           0,
                                           code_help_exam_in,
                                           nvl(code_help_exam_in, code_help_exam)),
               flg_available      = decode(l_flg_available_n, 0, flg_available_in, nvl(flg_available_in, flg_available)),
               rank               = decode(l_rank_n, 0, rank_in, nvl(rank_in, rank)),
               adw_last_update    = decode(l_adw_last_update_n,
                                           0,
                                           adw_last_update_in,
                                           nvl(adw_last_update_in, adw_last_update)),
               flg_type           = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               gender             = decode(l_gender_n, 0, gender_in, nvl(gender_in, gender)),
               age_min            = decode(l_age_min_n, 0, age_min_in, nvl(age_min_in, age_min)),
               age_max            = decode(l_age_max_n, 0, age_max_in, nvl(age_max_in, age_max)),
               id_exam_cat        = decode(l_id_exam_cat_n, 0, id_exam_cat_in, nvl(id_exam_cat_in, id_exam_cat)),
               id_content         = decode(l_id_content_n, 0, id_content_in, nvl(id_content_in, id_content)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution)),
               flg_technical      = decode(l_flg_technical_n, 0, flg_technical_in, nvl(flg_technical_in, flg_technical))
         WHERE id_exam = id_exam_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_exam_in             IN exam.id_exam%TYPE,
        code_exam_in           IN exam.code_exam%TYPE DEFAULT NULL,
        code_exam_nin          IN BOOLEAN := TRUE,
        code_help_exam_in      IN exam.code_help_exam%TYPE DEFAULT NULL,
        code_help_exam_nin     IN BOOLEAN := TRUE,
        flg_available_in       IN exam.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        rank_in                IN exam.rank%TYPE DEFAULT NULL,
        rank_nin               IN BOOLEAN := TRUE,
        adw_last_update_in     IN exam.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin    IN BOOLEAN := TRUE,
        flg_type_in            IN exam.flg_type%TYPE DEFAULT NULL,
        flg_type_nin           IN BOOLEAN := TRUE,
        gender_in              IN exam.gender%TYPE DEFAULT NULL,
        gender_nin             IN BOOLEAN := TRUE,
        age_min_in             IN exam.age_min%TYPE DEFAULT NULL,
        age_min_nin            IN BOOLEAN := TRUE,
        age_max_in             IN exam.age_max%TYPE DEFAULT NULL,
        age_max_nin            IN BOOLEAN := TRUE,
        id_exam_cat_in         IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_exam_cat_nin        IN BOOLEAN := TRUE,
        id_content_in          IN exam.id_content%TYPE DEFAULT NULL,
        id_content_nin         IN BOOLEAN := TRUE,
        create_user_in         IN exam.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN exam.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN exam.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN exam.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN exam.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN exam.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        flg_technical_in       IN exam.flg_technical%TYPE DEFAULT NULL,
        flg_technical_nin      IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_exam_in             => id_exam_in,
            code_exam_in           => code_exam_in,
            code_exam_nin          => code_exam_nin,
            code_help_exam_in      => code_help_exam_in,
            code_help_exam_nin     => code_help_exam_nin,
            flg_available_in       => flg_available_in,
            flg_available_nin      => flg_available_nin,
            rank_in                => rank_in,
            rank_nin               => rank_nin,
            adw_last_update_in     => adw_last_update_in,
            adw_last_update_nin    => adw_last_update_nin,
            flg_type_in            => flg_type_in,
            flg_type_nin           => flg_type_nin,
            gender_in              => gender_in,
            gender_nin             => gender_nin,
            age_min_in             => age_min_in,
            age_min_nin            => age_min_nin,
            age_max_in             => age_max_in,
            age_max_nin            => age_max_nin,
            id_exam_cat_in         => id_exam_cat_in,
            id_exam_cat_nin        => id_exam_cat_nin,
            id_content_in          => id_content_in,
            id_content_nin         => id_content_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            flg_technical_in       => flg_technical_in,
            flg_technical_nin      => flg_technical_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        code_exam_in           IN exam.code_exam%TYPE DEFAULT NULL,
        code_exam_nin          IN BOOLEAN := TRUE,
        code_help_exam_in      IN exam.code_help_exam%TYPE DEFAULT NULL,
        code_help_exam_nin     IN BOOLEAN := TRUE,
        flg_available_in       IN exam.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        rank_in                IN exam.rank%TYPE DEFAULT NULL,
        rank_nin               IN BOOLEAN := TRUE,
        adw_last_update_in     IN exam.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin    IN BOOLEAN := TRUE,
        flg_type_in            IN exam.flg_type%TYPE DEFAULT NULL,
        flg_type_nin           IN BOOLEAN := TRUE,
        gender_in              IN exam.gender%TYPE DEFAULT NULL,
        gender_nin             IN BOOLEAN := TRUE,
        age_min_in             IN exam.age_min%TYPE DEFAULT NULL,
        age_min_nin            IN BOOLEAN := TRUE,
        age_max_in             IN exam.age_max%TYPE DEFAULT NULL,
        age_max_nin            IN BOOLEAN := TRUE,
        id_exam_cat_in         IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_exam_cat_nin        IN BOOLEAN := TRUE,
        id_content_in          IN exam.id_content%TYPE DEFAULT NULL,
        id_content_nin         IN BOOLEAN := TRUE,
        create_user_in         IN exam.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN exam.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN exam.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN exam.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN exam.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN exam.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        flg_technical_in       IN exam.flg_technical%TYPE DEFAULT NULL,
        flg_technical_nin      IN BOOLEAN := TRUE,
        where_in               IN VARCHAR2,
        handle_error_in        IN BOOLEAN := FALSE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_code_exam_n          NUMBER(1) := sys.diutil.bool_to_int(code_exam_nin);
        l_code_help_exam_n     NUMBER(1) := sys.diutil.bool_to_int(code_help_exam_nin);
        l_flg_available_n      NUMBER(1) := sys.diutil.bool_to_int(flg_available_nin);
        l_rank_n               NUMBER(1) := sys.diutil.bool_to_int(rank_nin);
        l_adw_last_update_n    NUMBER(1) := sys.diutil.bool_to_int(adw_last_update_nin);
        l_flg_type_n           NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_gender_n             NUMBER(1) := sys.diutil.bool_to_int(gender_nin);
        l_age_min_n            NUMBER(1) := sys.diutil.bool_to_int(age_min_nin);
        l_age_max_n            NUMBER(1) := sys.diutil.bool_to_int(age_max_nin);
        l_id_exam_cat_n        NUMBER(1) := sys.diutil.bool_to_int(id_exam_cat_nin);
        l_id_content_n         NUMBER(1) := sys.diutil.bool_to_int(id_content_nin);
        l_create_user_n        NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_technical_n      NUMBER(1) := sys.diutil.bool_to_int(flg_technical_nin);
    BEGIN
        l_code_exam_n          := sys.diutil.bool_to_int(code_exam_nin);
        l_code_help_exam_n     := sys.diutil.bool_to_int(code_help_exam_nin);
        l_flg_available_n      := sys.diutil.bool_to_int(flg_available_nin);
        l_rank_n               := sys.diutil.bool_to_int(rank_nin);
        l_adw_last_update_n    := sys.diutil.bool_to_int(adw_last_update_nin);
        l_flg_type_n           := sys.diutil.bool_to_int(flg_type_nin);
        l_gender_n             := sys.diutil.bool_to_int(gender_nin);
        l_age_min_n            := sys.diutil.bool_to_int(age_min_nin);
        l_age_max_n            := sys.diutil.bool_to_int(age_max_nin);
        l_id_exam_cat_n        := sys.diutil.bool_to_int(id_exam_cat_nin);
        l_id_content_n         := sys.diutil.bool_to_int(id_content_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_technical_n      := sys.diutil.bool_to_int(flg_technical_nin);
        l_sql                  := 'UPDATE exam SET' || ' CODE_EXAM = decode (' || l_code_exam_n ||
                                  ',0,:CODE_EXAM_in, NVL (:CODE_EXAM_in, CODE_EXAM)) ' || ',' ||
                                  ' CODE_HELP_EXAM = decode (' || l_code_help_exam_n ||
                                  ',0,:CODE_HELP_EXAM_in, NVL (:CODE_HELP_EXAM_in, CODE_HELP_EXAM)) ' || ',' ||
                                  ' FLG_AVAILABLE = decode (' || l_flg_available_n ||
                                  ',0,:FLG_AVAILABLE_in, NVL (:FLG_AVAILABLE_in, FLG_AVAILABLE)) ' || ',' ||
                                  ' RANK = decode (' || l_rank_n || ',0,:RANK_in, NVL (:RANK_in, RANK)) ' || ',' ||
                                  ' ADW_LAST_UPDATE = decode (' || l_adw_last_update_n ||
                                  ',0,:ADW_LAST_UPDATE_in, NVL (:ADW_LAST_UPDATE_in, ADW_LAST_UPDATE)) ' || ',' ||
                                  ' FLG_TYPE = decode (' || l_flg_type_n ||
                                  ',0,:FLG_TYPE_in, NVL (:FLG_TYPE_in, FLG_TYPE)) ' || ',' || ' GENDER = decode (' ||
                                  l_gender_n || ',0,:GENDER_in, NVL (:GENDER_in, GENDER)) ' || ',' ||
                                  ' AGE_MIN = decode (' || l_age_min_n ||
                                  ',0,:AGE_MIN_in, NVL (:AGE_MIN_in, AGE_MIN)) ' || ',' || ' AGE_MAX = decode (' ||
                                  l_age_max_n || ',0,:AGE_MAX_in, NVL (:AGE_MAX_in, AGE_MAX)) ' || ',' ||
                                  ' ID_EXAM_CAT = decode (' || l_id_exam_cat_n ||
                                  ',0,:ID_EXAM_CAT_in, NVL (:ID_EXAM_CAT_in, ID_EXAM_CAT)) ' || ',' ||
                                  ' ID_CONTENT = decode (' || l_id_content_n ||
                                  ',0,:ID_CONTENT_in, NVL (:ID_CONTENT_in, ID_CONTENT)) ' || ',' ||
                                  ' CREATE_USER = decode (' || l_create_user_n ||
                                  ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                  ' CREATE_TIME = decode (' || l_create_time_n ||
                                  ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                  ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                  ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                  ' UPDATE_USER = decode (' || l_update_user_n ||
                                  ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                  ' UPDATE_TIME = decode (' || l_update_time_n ||
                                  ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                  ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                  ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                  ' FLG_TECHNICAL = decode (' || l_flg_technical_n ||
                                  ',0,:FLG_TECHNICAL_in, NVL (:FLG_TECHNICAL_in, FLG_TECHNICAL)) ' || ' where ' ||
                                  nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN code_exam_in, code_help_exam_in, flg_available_in, rank_in, adw_last_update_in, flg_type_in, gender_in, age_min_in, age_max_in, id_exam_cat_in, id_content_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_technical_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        code_exam_in           IN exam.code_exam%TYPE DEFAULT NULL,
        code_exam_nin          IN BOOLEAN := TRUE,
        code_help_exam_in      IN exam.code_help_exam%TYPE DEFAULT NULL,
        code_help_exam_nin     IN BOOLEAN := TRUE,
        flg_available_in       IN exam.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        rank_in                IN exam.rank%TYPE DEFAULT NULL,
        rank_nin               IN BOOLEAN := TRUE,
        adw_last_update_in     IN exam.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin    IN BOOLEAN := TRUE,
        flg_type_in            IN exam.flg_type%TYPE DEFAULT NULL,
        flg_type_nin           IN BOOLEAN := TRUE,
        gender_in              IN exam.gender%TYPE DEFAULT NULL,
        gender_nin             IN BOOLEAN := TRUE,
        age_min_in             IN exam.age_min%TYPE DEFAULT NULL,
        age_min_nin            IN BOOLEAN := TRUE,
        age_max_in             IN exam.age_max%TYPE DEFAULT NULL,
        age_max_nin            IN BOOLEAN := TRUE,
        id_exam_cat_in         IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_exam_cat_nin        IN BOOLEAN := TRUE,
        id_content_in          IN exam.id_content%TYPE DEFAULT NULL,
        id_content_nin         IN BOOLEAN := TRUE,
        create_user_in         IN exam.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN exam.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN exam.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN exam.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN exam.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN exam.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        flg_technical_in       IN exam.flg_technical%TYPE DEFAULT NULL,
        flg_technical_nin      IN BOOLEAN := TRUE,
        where_in               IN VARCHAR2,
        handle_error_in        IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(code_exam_in           => code_exam_in,
            code_exam_nin          => code_exam_nin,
            code_help_exam_in      => code_help_exam_in,
            code_help_exam_nin     => code_help_exam_nin,
            flg_available_in       => flg_available_in,
            flg_available_nin      => flg_available_nin,
            rank_in                => rank_in,
            rank_nin               => rank_nin,
            adw_last_update_in     => adw_last_update_in,
            adw_last_update_nin    => adw_last_update_nin,
            flg_type_in            => flg_type_in,
            flg_type_nin           => flg_type_nin,
            gender_in              => gender_in,
            gender_nin             => gender_nin,
            age_min_in             => age_min_in,
            age_min_nin            => age_min_nin,
            age_max_in             => age_max_in,
            age_max_nin            => age_max_nin,
            id_exam_cat_in         => id_exam_cat_in,
            id_exam_cat_nin        => id_exam_cat_nin,
            id_content_in          => id_content_in,
            id_content_nin         => id_content_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            flg_technical_in       => flg_technical_in,
            flg_technical_nin      => flg_technical_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_exam_in            IN exam.id_exam%TYPE,
        code_exam_in          IN exam.code_exam%TYPE DEFAULT NULL,
        code_help_exam_in     IN exam.code_help_exam%TYPE DEFAULT NULL,
        flg_available_in      IN exam.flg_available%TYPE DEFAULT NULL,
        rank_in               IN exam.rank%TYPE DEFAULT NULL,
        adw_last_update_in    IN exam.adw_last_update%TYPE DEFAULT NULL,
        flg_type_in           IN exam.flg_type%TYPE DEFAULT NULL,
        gender_in             IN exam.gender%TYPE DEFAULT NULL,
        age_min_in            IN exam.age_min%TYPE DEFAULT NULL,
        age_max_in            IN exam.age_max%TYPE DEFAULT NULL,
        id_exam_cat_in        IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_content_in         IN exam.id_content%TYPE DEFAULT NULL,
        create_user_in        IN exam.create_user%TYPE DEFAULT NULL,
        create_time_in        IN exam.create_time%TYPE DEFAULT NULL,
        create_institution_in IN exam.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN exam.update_user%TYPE DEFAULT NULL,
        update_time_in        IN exam.update_time%TYPE DEFAULT NULL,
        update_institution_in IN exam.update_institution%TYPE DEFAULT NULL,
        flg_technical_in      IN exam.flg_technical%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := FALSE,
        rows_out              IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_exam_in            => id_exam_in,
            code_exam_in          => code_exam_in,
            code_help_exam_in     => code_help_exam_in,
            flg_available_in      => flg_available_in,
            rank_in               => rank_in,
            adw_last_update_in    => adw_last_update_in,
            flg_type_in           => flg_type_in,
            gender_in             => gender_in,
            age_min_in            => age_min_in,
            age_max_in            => age_max_in,
            id_exam_cat_in        => id_exam_cat_in,
            id_content_in         => id_content_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_technical_in      => flg_technical_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_exam_in            => id_exam_in,
                code_exam_in          => code_exam_in,
                code_help_exam_in     => code_help_exam_in,
                flg_available_in      => flg_available_in,
                rank_in               => rank_in,
                adw_last_update_in    => adw_last_update_in,
                flg_type_in           => flg_type_in,
                gender_in             => gender_in,
                age_min_in            => age_min_in,
                age_max_in            => age_max_in,
                id_exam_cat_in        => id_exam_cat_in,
                id_content_in         => id_content_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_time_in        => update_time_in,
                update_institution_in => update_institution_in,
                flg_technical_in      => flg_technical_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_exam_in            IN exam.id_exam%TYPE,
        code_exam_in          IN exam.code_exam%TYPE DEFAULT NULL,
        code_help_exam_in     IN exam.code_help_exam%TYPE DEFAULT NULL,
        flg_available_in      IN exam.flg_available%TYPE DEFAULT NULL,
        rank_in               IN exam.rank%TYPE DEFAULT NULL,
        adw_last_update_in    IN exam.adw_last_update%TYPE DEFAULT NULL,
        flg_type_in           IN exam.flg_type%TYPE DEFAULT NULL,
        gender_in             IN exam.gender%TYPE DEFAULT NULL,
        age_min_in            IN exam.age_min%TYPE DEFAULT NULL,
        age_max_in            IN exam.age_max%TYPE DEFAULT NULL,
        id_exam_cat_in        IN exam.id_exam_cat%TYPE DEFAULT NULL,
        id_content_in         IN exam.id_content%TYPE DEFAULT NULL,
        create_user_in        IN exam.create_user%TYPE DEFAULT NULL,
        create_time_in        IN exam.create_time%TYPE DEFAULT NULL,
        create_institution_in IN exam.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN exam.update_user%TYPE DEFAULT NULL,
        update_time_in        IN exam.update_time%TYPE DEFAULT NULL,
        update_institution_in IN exam.update_institution%TYPE DEFAULT NULL,
        flg_technical_in      IN exam.flg_technical%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_exam_in,
                code_exam_in,
                code_help_exam_in,
                flg_available_in,
                rank_in,
                adw_last_update_in,
                flg_type_in,
                gender_in,
                age_min_in,
                age_max_in,
                id_exam_cat_in,
                id_content_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_technical_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN exam%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_exam_in            => rec_in.id_exam,
            code_exam_in          => rec_in.code_exam,
            code_help_exam_in     => rec_in.code_help_exam,
            flg_available_in      => rec_in.flg_available,
            rank_in               => rec_in.rank,
            adw_last_update_in    => rec_in.adw_last_update,
            flg_type_in           => rec_in.flg_type,
            gender_in             => rec_in.gender,
            age_min_in            => rec_in.age_min,
            age_max_in            => rec_in.age_max,
            id_exam_cat_in        => rec_in.id_exam_cat,
            id_content_in         => rec_in.id_content,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            flg_technical_in      => rec_in.flg_technical,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN exam%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_exam_in            => rec_in.id_exam,
            code_exam_in          => rec_in.code_exam,
            code_help_exam_in     => rec_in.code_help_exam,
            flg_available_in      => rec_in.flg_available,
            rank_in               => rec_in.rank,
            adw_last_update_in    => rec_in.adw_last_update,
            flg_type_in           => rec_in.flg_type,
            gender_in             => rec_in.gender,
            age_min_in            => rec_in.age_min,
            age_max_in            => rec_in.age_max,
            id_exam_cat_in        => rec_in.id_exam_cat,
            id_content_in         => rec_in.id_content,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            flg_technical_in      => rec_in.flg_technical,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN exam_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_exam            id_exam_cc;
        l_code_exam          code_exam_cc;
        l_code_help_exam     code_help_exam_cc;
        l_flg_available      flg_available_cc;
        l_rank               rank_cc;
        l_adw_last_update    adw_last_update_cc;
        l_flg_type           flg_type_cc;
        l_gender             gender_cc;
        l_age_min            age_min_cc;
        l_age_max            age_max_cc;
        l_id_exam_cat        id_exam_cat_cc;
        l_id_content         id_content_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_time        update_time_cc;
        l_update_institution update_institution_cc;
        l_flg_technical      flg_technical_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_exam(i) := col_in(i).id_exam;
            l_code_exam(i) := col_in(i).code_exam;
            l_code_help_exam(i) := col_in(i).code_help_exam;
            l_flg_available(i) := col_in(i).flg_available;
            l_rank(i) := col_in(i).rank;
            l_adw_last_update(i) := col_in(i).adw_last_update;
            l_flg_type(i) := col_in(i).flg_type;
            l_gender(i) := col_in(i).gender;
            l_age_min(i) := col_in(i).age_min;
            l_age_max(i) := col_in(i).age_max;
            l_id_exam_cat(i) := col_in(i).id_exam_cat;
            l_id_content(i) := col_in(i).id_content;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_technical(i) := col_in(i).flg_technical;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE exam
                   SET code_exam          = nvl(l_code_exam(i), code_exam),
                       code_help_exam     = nvl(l_code_help_exam(i), code_help_exam),
                       flg_available      = nvl(l_flg_available(i), flg_available),
                       rank               = nvl(l_rank(i), rank),
                       adw_last_update    = nvl(l_adw_last_update(i), adw_last_update),
                       flg_type           = nvl(l_flg_type(i), flg_type),
                       gender             = nvl(l_gender(i), gender),
                       age_min            = nvl(l_age_min(i), age_min),
                       age_max            = nvl(l_age_max(i), age_max),
                       id_exam_cat        = nvl(l_id_exam_cat(i), id_exam_cat),
                       id_content         = nvl(l_id_content(i), id_content),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution),
                       flg_technical      = nvl(l_flg_technical(i), flg_technical)
                 WHERE id_exam = l_id_exam(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE exam
                   SET code_exam          = l_code_exam(i),
                       code_help_exam     = l_code_help_exam(i),
                       flg_available      = l_flg_available(i),
                       rank               = l_rank(i),
                       adw_last_update    = l_adw_last_update(i),
                       flg_type           = l_flg_type(i),
                       gender             = l_gender(i),
                       age_min            = l_age_min(i),
                       age_max            = l_age_max(i),
                       id_exam_cat        = l_id_exam_cat(i),
                       id_content         = l_id_content(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i),
                       flg_technical      = l_flg_technical(i)
                 WHERE id_exam = l_id_exam(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN exam_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE exam
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE exam
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE exam
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_exam_in      IN exam.id_exam%TYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam
         WHERE id_exam = id_exam_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_exam_in      IN exam.id_exam%TYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_exam_in => id_exam_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this EXAM_ECT_FK foreign key value
    PROCEDURE del_exam_ect_fk
    (
        id_exam_cat_in  IN exam.id_exam_cat%TYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM exam
         WHERE id_exam_cat = id_exam_cat_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_exam_ect_fk;

    -- Delete all rows for this EXAM_ECT_FK foreign key value
    PROCEDURE del_exam_ect_fk
    (
        id_exam_cat_in  IN exam.id_exam_cat%TYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_exam_ect_fk(id_exam_cat_in => id_exam_cat_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_exam_ect_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM exam';
        ELSE
            RETURN 'DELETE FROM exam WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(exam_inout IN OUT exam%ROWTYPE) IS
    BEGIN
        exam_inout.id_exam            := NULL;
        exam_inout.code_exam          := NULL;
        exam_inout.code_help_exam     := NULL;
        exam_inout.flg_available      := NULL;
        exam_inout.rank               := NULL;
        exam_inout.adw_last_update    := NULL;
        exam_inout.flg_type           := NULL;
        exam_inout.gender             := NULL;
        exam_inout.age_min            := NULL;
        exam_inout.age_max            := NULL;
        exam_inout.id_exam_cat        := NULL;
        exam_inout.id_content         := NULL;
        exam_inout.create_user        := NULL;
        exam_inout.create_time        := NULL;
        exam_inout.create_institution := NULL;
        exam_inout.update_user        := NULL;
        exam_inout.update_time        := NULL;
        exam_inout.update_institution := NULL;
        exam_inout.flg_technical      := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN exam%ROWTYPE IS
        l_exam exam%ROWTYPE;
    BEGIN
        RETURN l_exam;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN exam_tc IS
        data exam_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM exam
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN exam_tc IS
        data exam_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_exam;
/
